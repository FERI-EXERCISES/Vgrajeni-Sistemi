
freeRTOS Projektna.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e2bc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000130  0800e45c  0800e45c  0001e45c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e58c  0800e58c  00020150  2**0
                  CONTENTS
  4 .ARM          00000008  0800e58c  0800e58c  0001e58c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e594  0800e594  00020150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e594  0800e594  0001e594  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e598  0800e598  0001e598  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000150  20000000  0800e59c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006ca8  20000150  0800e6ec  00020150  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20006df8  0800e6ec  00026df8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020150  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 13 .debug_info   000276d4  00000000  00000000  000201c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005892  00000000  00000000  00047897  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002128  00000000  00000000  0004d130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000019be  00000000  00000000  0004f258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000762b  00000000  00000000  00050c16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00028abc  00000000  00000000  00058241  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a1b9d  00000000  00000000  00080cfd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000090e8  00000000  00000000  0012289c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  0012b984  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000150 	.word	0x20000150
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800e444 	.word	0x0800e444

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000154 	.word	0x20000154
 80001dc:	0800e444 	.word	0x0800e444

080001e0 <__aeabi_dmul>:
 80001e0:	b570      	push	{r4, r5, r6, lr}
 80001e2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001e6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001ea:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001ee:	bf1d      	ittte	ne
 80001f0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001f4:	ea94 0f0c 	teqne	r4, ip
 80001f8:	ea95 0f0c 	teqne	r5, ip
 80001fc:	f000 f8de 	bleq	80003bc <__aeabi_dmul+0x1dc>
 8000200:	442c      	add	r4, r5
 8000202:	ea81 0603 	eor.w	r6, r1, r3
 8000206:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800020a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800020e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000212:	bf18      	it	ne
 8000214:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000218:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800021c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000220:	d038      	beq.n	8000294 <__aeabi_dmul+0xb4>
 8000222:	fba0 ce02 	umull	ip, lr, r0, r2
 8000226:	f04f 0500 	mov.w	r5, #0
 800022a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800022e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000232:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000236:	f04f 0600 	mov.w	r6, #0
 800023a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800023e:	f09c 0f00 	teq	ip, #0
 8000242:	bf18      	it	ne
 8000244:	f04e 0e01 	orrne.w	lr, lr, #1
 8000248:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800024c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000250:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000254:	d204      	bcs.n	8000260 <__aeabi_dmul+0x80>
 8000256:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800025a:	416d      	adcs	r5, r5
 800025c:	eb46 0606 	adc.w	r6, r6, r6
 8000260:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000264:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000268:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800026c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000270:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000274:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000278:	bf88      	it	hi
 800027a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800027e:	d81e      	bhi.n	80002be <__aeabi_dmul+0xde>
 8000280:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000284:	bf08      	it	eq
 8000286:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800028a:	f150 0000 	adcs.w	r0, r0, #0
 800028e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000292:	bd70      	pop	{r4, r5, r6, pc}
 8000294:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000298:	ea46 0101 	orr.w	r1, r6, r1
 800029c:	ea40 0002 	orr.w	r0, r0, r2
 80002a0:	ea81 0103 	eor.w	r1, r1, r3
 80002a4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002a8:	bfc2      	ittt	gt
 80002aa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002ae:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002b2:	bd70      	popgt	{r4, r5, r6, pc}
 80002b4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002b8:	f04f 0e00 	mov.w	lr, #0
 80002bc:	3c01      	subs	r4, #1
 80002be:	f300 80ab 	bgt.w	8000418 <__aeabi_dmul+0x238>
 80002c2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002c6:	bfde      	ittt	le
 80002c8:	2000      	movle	r0, #0
 80002ca:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002ce:	bd70      	pople	{r4, r5, r6, pc}
 80002d0:	f1c4 0400 	rsb	r4, r4, #0
 80002d4:	3c20      	subs	r4, #32
 80002d6:	da35      	bge.n	8000344 <__aeabi_dmul+0x164>
 80002d8:	340c      	adds	r4, #12
 80002da:	dc1b      	bgt.n	8000314 <__aeabi_dmul+0x134>
 80002dc:	f104 0414 	add.w	r4, r4, #20
 80002e0:	f1c4 0520 	rsb	r5, r4, #32
 80002e4:	fa00 f305 	lsl.w	r3, r0, r5
 80002e8:	fa20 f004 	lsr.w	r0, r0, r4
 80002ec:	fa01 f205 	lsl.w	r2, r1, r5
 80002f0:	ea40 0002 	orr.w	r0, r0, r2
 80002f4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002fc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000300:	fa21 f604 	lsr.w	r6, r1, r4
 8000304:	eb42 0106 	adc.w	r1, r2, r6
 8000308:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800030c:	bf08      	it	eq
 800030e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000312:	bd70      	pop	{r4, r5, r6, pc}
 8000314:	f1c4 040c 	rsb	r4, r4, #12
 8000318:	f1c4 0520 	rsb	r5, r4, #32
 800031c:	fa00 f304 	lsl.w	r3, r0, r4
 8000320:	fa20 f005 	lsr.w	r0, r0, r5
 8000324:	fa01 f204 	lsl.w	r2, r1, r4
 8000328:	ea40 0002 	orr.w	r0, r0, r2
 800032c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000330:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000334:	f141 0100 	adc.w	r1, r1, #0
 8000338:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800033c:	bf08      	it	eq
 800033e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000342:	bd70      	pop	{r4, r5, r6, pc}
 8000344:	f1c4 0520 	rsb	r5, r4, #32
 8000348:	fa00 f205 	lsl.w	r2, r0, r5
 800034c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000350:	fa20 f304 	lsr.w	r3, r0, r4
 8000354:	fa01 f205 	lsl.w	r2, r1, r5
 8000358:	ea43 0302 	orr.w	r3, r3, r2
 800035c:	fa21 f004 	lsr.w	r0, r1, r4
 8000360:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000364:	fa21 f204 	lsr.w	r2, r1, r4
 8000368:	ea20 0002 	bic.w	r0, r0, r2
 800036c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000370:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000374:	bf08      	it	eq
 8000376:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800037a:	bd70      	pop	{r4, r5, r6, pc}
 800037c:	f094 0f00 	teq	r4, #0
 8000380:	d10f      	bne.n	80003a2 <__aeabi_dmul+0x1c2>
 8000382:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000386:	0040      	lsls	r0, r0, #1
 8000388:	eb41 0101 	adc.w	r1, r1, r1
 800038c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000390:	bf08      	it	eq
 8000392:	3c01      	subeq	r4, #1
 8000394:	d0f7      	beq.n	8000386 <__aeabi_dmul+0x1a6>
 8000396:	ea41 0106 	orr.w	r1, r1, r6
 800039a:	f095 0f00 	teq	r5, #0
 800039e:	bf18      	it	ne
 80003a0:	4770      	bxne	lr
 80003a2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003a6:	0052      	lsls	r2, r2, #1
 80003a8:	eb43 0303 	adc.w	r3, r3, r3
 80003ac:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003b0:	bf08      	it	eq
 80003b2:	3d01      	subeq	r5, #1
 80003b4:	d0f7      	beq.n	80003a6 <__aeabi_dmul+0x1c6>
 80003b6:	ea43 0306 	orr.w	r3, r3, r6
 80003ba:	4770      	bx	lr
 80003bc:	ea94 0f0c 	teq	r4, ip
 80003c0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003c4:	bf18      	it	ne
 80003c6:	ea95 0f0c 	teqne	r5, ip
 80003ca:	d00c      	beq.n	80003e6 <__aeabi_dmul+0x206>
 80003cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d0:	bf18      	it	ne
 80003d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003d6:	d1d1      	bne.n	800037c <__aeabi_dmul+0x19c>
 80003d8:	ea81 0103 	eor.w	r1, r1, r3
 80003dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003e0:	f04f 0000 	mov.w	r0, #0
 80003e4:	bd70      	pop	{r4, r5, r6, pc}
 80003e6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003ea:	bf06      	itte	eq
 80003ec:	4610      	moveq	r0, r2
 80003ee:	4619      	moveq	r1, r3
 80003f0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003f4:	d019      	beq.n	800042a <__aeabi_dmul+0x24a>
 80003f6:	ea94 0f0c 	teq	r4, ip
 80003fa:	d102      	bne.n	8000402 <__aeabi_dmul+0x222>
 80003fc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000400:	d113      	bne.n	800042a <__aeabi_dmul+0x24a>
 8000402:	ea95 0f0c 	teq	r5, ip
 8000406:	d105      	bne.n	8000414 <__aeabi_dmul+0x234>
 8000408:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800040c:	bf1c      	itt	ne
 800040e:	4610      	movne	r0, r2
 8000410:	4619      	movne	r1, r3
 8000412:	d10a      	bne.n	800042a <__aeabi_dmul+0x24a>
 8000414:	ea81 0103 	eor.w	r1, r1, r3
 8000418:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800041c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd70      	pop	{r4, r5, r6, pc}
 800042a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800042e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000432:	bd70      	pop	{r4, r5, r6, pc}

08000434 <__aeabi_drsub>:
 8000434:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000438:	e002      	b.n	8000440 <__adddf3>
 800043a:	bf00      	nop

0800043c <__aeabi_dsub>:
 800043c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000440 <__adddf3>:
 8000440:	b530      	push	{r4, r5, lr}
 8000442:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000446:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800044a:	ea94 0f05 	teq	r4, r5
 800044e:	bf08      	it	eq
 8000450:	ea90 0f02 	teqeq	r0, r2
 8000454:	bf1f      	itttt	ne
 8000456:	ea54 0c00 	orrsne.w	ip, r4, r0
 800045a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800045e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000462:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000466:	f000 80e2 	beq.w	800062e <__adddf3+0x1ee>
 800046a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800046e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000472:	bfb8      	it	lt
 8000474:	426d      	neglt	r5, r5
 8000476:	dd0c      	ble.n	8000492 <__adddf3+0x52>
 8000478:	442c      	add	r4, r5
 800047a:	ea80 0202 	eor.w	r2, r0, r2
 800047e:	ea81 0303 	eor.w	r3, r1, r3
 8000482:	ea82 0000 	eor.w	r0, r2, r0
 8000486:	ea83 0101 	eor.w	r1, r3, r1
 800048a:	ea80 0202 	eor.w	r2, r0, r2
 800048e:	ea81 0303 	eor.w	r3, r1, r3
 8000492:	2d36      	cmp	r5, #54	; 0x36
 8000494:	bf88      	it	hi
 8000496:	bd30      	pophi	{r4, r5, pc}
 8000498:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800049c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004a0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004a4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004a8:	d002      	beq.n	80004b0 <__adddf3+0x70>
 80004aa:	4240      	negs	r0, r0
 80004ac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004b0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004b4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004b8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004bc:	d002      	beq.n	80004c4 <__adddf3+0x84>
 80004be:	4252      	negs	r2, r2
 80004c0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004c4:	ea94 0f05 	teq	r4, r5
 80004c8:	f000 80a7 	beq.w	800061a <__adddf3+0x1da>
 80004cc:	f1a4 0401 	sub.w	r4, r4, #1
 80004d0:	f1d5 0e20 	rsbs	lr, r5, #32
 80004d4:	db0d      	blt.n	80004f2 <__adddf3+0xb2>
 80004d6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004da:	fa22 f205 	lsr.w	r2, r2, r5
 80004de:	1880      	adds	r0, r0, r2
 80004e0:	f141 0100 	adc.w	r1, r1, #0
 80004e4:	fa03 f20e 	lsl.w	r2, r3, lr
 80004e8:	1880      	adds	r0, r0, r2
 80004ea:	fa43 f305 	asr.w	r3, r3, r5
 80004ee:	4159      	adcs	r1, r3
 80004f0:	e00e      	b.n	8000510 <__adddf3+0xd0>
 80004f2:	f1a5 0520 	sub.w	r5, r5, #32
 80004f6:	f10e 0e20 	add.w	lr, lr, #32
 80004fa:	2a01      	cmp	r2, #1
 80004fc:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000500:	bf28      	it	cs
 8000502:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000506:	fa43 f305 	asr.w	r3, r3, r5
 800050a:	18c0      	adds	r0, r0, r3
 800050c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000514:	d507      	bpl.n	8000526 <__adddf3+0xe6>
 8000516:	f04f 0e00 	mov.w	lr, #0
 800051a:	f1dc 0c00 	rsbs	ip, ip, #0
 800051e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000522:	eb6e 0101 	sbc.w	r1, lr, r1
 8000526:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800052a:	d31b      	bcc.n	8000564 <__adddf3+0x124>
 800052c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000530:	d30c      	bcc.n	800054c <__adddf3+0x10c>
 8000532:	0849      	lsrs	r1, r1, #1
 8000534:	ea5f 0030 	movs.w	r0, r0, rrx
 8000538:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800053c:	f104 0401 	add.w	r4, r4, #1
 8000540:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000544:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000548:	f080 809a 	bcs.w	8000680 <__adddf3+0x240>
 800054c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000550:	bf08      	it	eq
 8000552:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000556:	f150 0000 	adcs.w	r0, r0, #0
 800055a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800055e:	ea41 0105 	orr.w	r1, r1, r5
 8000562:	bd30      	pop	{r4, r5, pc}
 8000564:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000568:	4140      	adcs	r0, r0
 800056a:	eb41 0101 	adc.w	r1, r1, r1
 800056e:	3c01      	subs	r4, #1
 8000570:	bf28      	it	cs
 8000572:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000576:	d2e9      	bcs.n	800054c <__adddf3+0x10c>
 8000578:	f091 0f00 	teq	r1, #0
 800057c:	bf04      	itt	eq
 800057e:	4601      	moveq	r1, r0
 8000580:	2000      	moveq	r0, #0
 8000582:	fab1 f381 	clz	r3, r1
 8000586:	bf08      	it	eq
 8000588:	3320      	addeq	r3, #32
 800058a:	f1a3 030b 	sub.w	r3, r3, #11
 800058e:	f1b3 0220 	subs.w	r2, r3, #32
 8000592:	da0c      	bge.n	80005ae <__adddf3+0x16e>
 8000594:	320c      	adds	r2, #12
 8000596:	dd08      	ble.n	80005aa <__adddf3+0x16a>
 8000598:	f102 0c14 	add.w	ip, r2, #20
 800059c:	f1c2 020c 	rsb	r2, r2, #12
 80005a0:	fa01 f00c 	lsl.w	r0, r1, ip
 80005a4:	fa21 f102 	lsr.w	r1, r1, r2
 80005a8:	e00c      	b.n	80005c4 <__adddf3+0x184>
 80005aa:	f102 0214 	add.w	r2, r2, #20
 80005ae:	bfd8      	it	le
 80005b0:	f1c2 0c20 	rsble	ip, r2, #32
 80005b4:	fa01 f102 	lsl.w	r1, r1, r2
 80005b8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005bc:	bfdc      	itt	le
 80005be:	ea41 010c 	orrle.w	r1, r1, ip
 80005c2:	4090      	lslle	r0, r2
 80005c4:	1ae4      	subs	r4, r4, r3
 80005c6:	bfa2      	ittt	ge
 80005c8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005cc:	4329      	orrge	r1, r5
 80005ce:	bd30      	popge	{r4, r5, pc}
 80005d0:	ea6f 0404 	mvn.w	r4, r4
 80005d4:	3c1f      	subs	r4, #31
 80005d6:	da1c      	bge.n	8000612 <__adddf3+0x1d2>
 80005d8:	340c      	adds	r4, #12
 80005da:	dc0e      	bgt.n	80005fa <__adddf3+0x1ba>
 80005dc:	f104 0414 	add.w	r4, r4, #20
 80005e0:	f1c4 0220 	rsb	r2, r4, #32
 80005e4:	fa20 f004 	lsr.w	r0, r0, r4
 80005e8:	fa01 f302 	lsl.w	r3, r1, r2
 80005ec:	ea40 0003 	orr.w	r0, r0, r3
 80005f0:	fa21 f304 	lsr.w	r3, r1, r4
 80005f4:	ea45 0103 	orr.w	r1, r5, r3
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	f1c4 040c 	rsb	r4, r4, #12
 80005fe:	f1c4 0220 	rsb	r2, r4, #32
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 f304 	lsl.w	r3, r1, r4
 800060a:	ea40 0003 	orr.w	r0, r0, r3
 800060e:	4629      	mov	r1, r5
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	fa21 f004 	lsr.w	r0, r1, r4
 8000616:	4629      	mov	r1, r5
 8000618:	bd30      	pop	{r4, r5, pc}
 800061a:	f094 0f00 	teq	r4, #0
 800061e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000622:	bf06      	itte	eq
 8000624:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000628:	3401      	addeq	r4, #1
 800062a:	3d01      	subne	r5, #1
 800062c:	e74e      	b.n	80004cc <__adddf3+0x8c>
 800062e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000632:	bf18      	it	ne
 8000634:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000638:	d029      	beq.n	800068e <__adddf3+0x24e>
 800063a:	ea94 0f05 	teq	r4, r5
 800063e:	bf08      	it	eq
 8000640:	ea90 0f02 	teqeq	r0, r2
 8000644:	d005      	beq.n	8000652 <__adddf3+0x212>
 8000646:	ea54 0c00 	orrs.w	ip, r4, r0
 800064a:	bf04      	itt	eq
 800064c:	4619      	moveq	r1, r3
 800064e:	4610      	moveq	r0, r2
 8000650:	bd30      	pop	{r4, r5, pc}
 8000652:	ea91 0f03 	teq	r1, r3
 8000656:	bf1e      	ittt	ne
 8000658:	2100      	movne	r1, #0
 800065a:	2000      	movne	r0, #0
 800065c:	bd30      	popne	{r4, r5, pc}
 800065e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000662:	d105      	bne.n	8000670 <__adddf3+0x230>
 8000664:	0040      	lsls	r0, r0, #1
 8000666:	4149      	adcs	r1, r1
 8000668:	bf28      	it	cs
 800066a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd30      	pop	{r4, r5, pc}
 8000670:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000674:	bf3c      	itt	cc
 8000676:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800067a:	bd30      	popcc	{r4, r5, pc}
 800067c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000680:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000684:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000688:	f04f 0000 	mov.w	r0, #0
 800068c:	bd30      	pop	{r4, r5, pc}
 800068e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000692:	bf1a      	itte	ne
 8000694:	4619      	movne	r1, r3
 8000696:	4610      	movne	r0, r2
 8000698:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800069c:	bf1c      	itt	ne
 800069e:	460b      	movne	r3, r1
 80006a0:	4602      	movne	r2, r0
 80006a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006a6:	bf06      	itte	eq
 80006a8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006ac:	ea91 0f03 	teqeq	r1, r3
 80006b0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006b4:	bd30      	pop	{r4, r5, pc}
 80006b6:	bf00      	nop

080006b8 <__aeabi_ui2d>:
 80006b8:	f090 0f00 	teq	r0, #0
 80006bc:	bf04      	itt	eq
 80006be:	2100      	moveq	r1, #0
 80006c0:	4770      	bxeq	lr
 80006c2:	b530      	push	{r4, r5, lr}
 80006c4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006cc:	f04f 0500 	mov.w	r5, #0
 80006d0:	f04f 0100 	mov.w	r1, #0
 80006d4:	e750      	b.n	8000578 <__adddf3+0x138>
 80006d6:	bf00      	nop

080006d8 <__aeabi_i2d>:
 80006d8:	f090 0f00 	teq	r0, #0
 80006dc:	bf04      	itt	eq
 80006de:	2100      	moveq	r1, #0
 80006e0:	4770      	bxeq	lr
 80006e2:	b530      	push	{r4, r5, lr}
 80006e4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006e8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ec:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006f0:	bf48      	it	mi
 80006f2:	4240      	negmi	r0, r0
 80006f4:	f04f 0100 	mov.w	r1, #0
 80006f8:	e73e      	b.n	8000578 <__adddf3+0x138>
 80006fa:	bf00      	nop

080006fc <__aeabi_f2d>:
 80006fc:	0042      	lsls	r2, r0, #1
 80006fe:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000702:	ea4f 0131 	mov.w	r1, r1, rrx
 8000706:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800070a:	bf1f      	itttt	ne
 800070c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000710:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000714:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000718:	4770      	bxne	lr
 800071a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800071e:	bf08      	it	eq
 8000720:	4770      	bxeq	lr
 8000722:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000726:	bf04      	itt	eq
 8000728:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800072c:	4770      	bxeq	lr
 800072e:	b530      	push	{r4, r5, lr}
 8000730:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000734:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000738:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800073c:	e71c      	b.n	8000578 <__adddf3+0x138>
 800073e:	bf00      	nop

08000740 <__aeabi_ul2d>:
 8000740:	ea50 0201 	orrs.w	r2, r0, r1
 8000744:	bf08      	it	eq
 8000746:	4770      	bxeq	lr
 8000748:	b530      	push	{r4, r5, lr}
 800074a:	f04f 0500 	mov.w	r5, #0
 800074e:	e00a      	b.n	8000766 <__aeabi_l2d+0x16>

08000750 <__aeabi_l2d>:
 8000750:	ea50 0201 	orrs.w	r2, r0, r1
 8000754:	bf08      	it	eq
 8000756:	4770      	bxeq	lr
 8000758:	b530      	push	{r4, r5, lr}
 800075a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800075e:	d502      	bpl.n	8000766 <__aeabi_l2d+0x16>
 8000760:	4240      	negs	r0, r0
 8000762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000766:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800076a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800076e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000772:	f43f aed8 	beq.w	8000526 <__adddf3+0xe6>
 8000776:	f04f 0203 	mov.w	r2, #3
 800077a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800077e:	bf18      	it	ne
 8000780:	3203      	addne	r2, #3
 8000782:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000786:	bf18      	it	ne
 8000788:	3203      	addne	r2, #3
 800078a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800078e:	f1c2 0320 	rsb	r3, r2, #32
 8000792:	fa00 fc03 	lsl.w	ip, r0, r3
 8000796:	fa20 f002 	lsr.w	r0, r0, r2
 800079a:	fa01 fe03 	lsl.w	lr, r1, r3
 800079e:	ea40 000e 	orr.w	r0, r0, lr
 80007a2:	fa21 f102 	lsr.w	r1, r1, r2
 80007a6:	4414      	add	r4, r2
 80007a8:	e6bd      	b.n	8000526 <__adddf3+0xe6>
 80007aa:	bf00      	nop

080007ac <__aeabi_d2f>:
 80007ac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007b0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80007b4:	bf24      	itt	cs
 80007b6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80007ba:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80007be:	d90d      	bls.n	80007dc <__aeabi_d2f+0x30>
 80007c0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80007c4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80007c8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80007cc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80007d0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80007d4:	bf08      	it	eq
 80007d6:	f020 0001 	biceq.w	r0, r0, #1
 80007da:	4770      	bx	lr
 80007dc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80007e0:	d121      	bne.n	8000826 <__aeabi_d2f+0x7a>
 80007e2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80007e6:	bfbc      	itt	lt
 80007e8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80007ec:	4770      	bxlt	lr
 80007ee:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007f2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80007f6:	f1c2 0218 	rsb	r2, r2, #24
 80007fa:	f1c2 0c20 	rsb	ip, r2, #32
 80007fe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000802:	fa20 f002 	lsr.w	r0, r0, r2
 8000806:	bf18      	it	ne
 8000808:	f040 0001 	orrne.w	r0, r0, #1
 800080c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000810:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000814:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000818:	ea40 000c 	orr.w	r0, r0, ip
 800081c:	fa23 f302 	lsr.w	r3, r3, r2
 8000820:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000824:	e7cc      	b.n	80007c0 <__aeabi_d2f+0x14>
 8000826:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800082a:	d107      	bne.n	800083c <__aeabi_d2f+0x90>
 800082c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000830:	bf1e      	ittt	ne
 8000832:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000836:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800083a:	4770      	bxne	lr
 800083c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000840:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000844:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000848:	4770      	bx	lr
 800084a:	bf00      	nop

0800084c <__aeabi_uldivmod>:
 800084c:	b953      	cbnz	r3, 8000864 <__aeabi_uldivmod+0x18>
 800084e:	b94a      	cbnz	r2, 8000864 <__aeabi_uldivmod+0x18>
 8000850:	2900      	cmp	r1, #0
 8000852:	bf08      	it	eq
 8000854:	2800      	cmpeq	r0, #0
 8000856:	bf1c      	itt	ne
 8000858:	f04f 31ff 	movne.w	r1, #4294967295
 800085c:	f04f 30ff 	movne.w	r0, #4294967295
 8000860:	f000 b970 	b.w	8000b44 <__aeabi_idiv0>
 8000864:	f1ad 0c08 	sub.w	ip, sp, #8
 8000868:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800086c:	f000 f806 	bl	800087c <__udivmoddi4>
 8000870:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000874:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000878:	b004      	add	sp, #16
 800087a:	4770      	bx	lr

0800087c <__udivmoddi4>:
 800087c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000880:	9e08      	ldr	r6, [sp, #32]
 8000882:	460d      	mov	r5, r1
 8000884:	4604      	mov	r4, r0
 8000886:	460f      	mov	r7, r1
 8000888:	2b00      	cmp	r3, #0
 800088a:	d14a      	bne.n	8000922 <__udivmoddi4+0xa6>
 800088c:	428a      	cmp	r2, r1
 800088e:	4694      	mov	ip, r2
 8000890:	d965      	bls.n	800095e <__udivmoddi4+0xe2>
 8000892:	fab2 f382 	clz	r3, r2
 8000896:	b143      	cbz	r3, 80008aa <__udivmoddi4+0x2e>
 8000898:	fa02 fc03 	lsl.w	ip, r2, r3
 800089c:	f1c3 0220 	rsb	r2, r3, #32
 80008a0:	409f      	lsls	r7, r3
 80008a2:	fa20 f202 	lsr.w	r2, r0, r2
 80008a6:	4317      	orrs	r7, r2
 80008a8:	409c      	lsls	r4, r3
 80008aa:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80008ae:	fa1f f58c 	uxth.w	r5, ip
 80008b2:	fbb7 f1fe 	udiv	r1, r7, lr
 80008b6:	0c22      	lsrs	r2, r4, #16
 80008b8:	fb0e 7711 	mls	r7, lr, r1, r7
 80008bc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80008c0:	fb01 f005 	mul.w	r0, r1, r5
 80008c4:	4290      	cmp	r0, r2
 80008c6:	d90a      	bls.n	80008de <__udivmoddi4+0x62>
 80008c8:	eb1c 0202 	adds.w	r2, ip, r2
 80008cc:	f101 37ff 	add.w	r7, r1, #4294967295
 80008d0:	f080 811c 	bcs.w	8000b0c <__udivmoddi4+0x290>
 80008d4:	4290      	cmp	r0, r2
 80008d6:	f240 8119 	bls.w	8000b0c <__udivmoddi4+0x290>
 80008da:	3902      	subs	r1, #2
 80008dc:	4462      	add	r2, ip
 80008de:	1a12      	subs	r2, r2, r0
 80008e0:	b2a4      	uxth	r4, r4
 80008e2:	fbb2 f0fe 	udiv	r0, r2, lr
 80008e6:	fb0e 2210 	mls	r2, lr, r0, r2
 80008ea:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80008ee:	fb00 f505 	mul.w	r5, r0, r5
 80008f2:	42a5      	cmp	r5, r4
 80008f4:	d90a      	bls.n	800090c <__udivmoddi4+0x90>
 80008f6:	eb1c 0404 	adds.w	r4, ip, r4
 80008fa:	f100 32ff 	add.w	r2, r0, #4294967295
 80008fe:	f080 8107 	bcs.w	8000b10 <__udivmoddi4+0x294>
 8000902:	42a5      	cmp	r5, r4
 8000904:	f240 8104 	bls.w	8000b10 <__udivmoddi4+0x294>
 8000908:	4464      	add	r4, ip
 800090a:	3802      	subs	r0, #2
 800090c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000910:	1b64      	subs	r4, r4, r5
 8000912:	2100      	movs	r1, #0
 8000914:	b11e      	cbz	r6, 800091e <__udivmoddi4+0xa2>
 8000916:	40dc      	lsrs	r4, r3
 8000918:	2300      	movs	r3, #0
 800091a:	e9c6 4300 	strd	r4, r3, [r6]
 800091e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000922:	428b      	cmp	r3, r1
 8000924:	d908      	bls.n	8000938 <__udivmoddi4+0xbc>
 8000926:	2e00      	cmp	r6, #0
 8000928:	f000 80ed 	beq.w	8000b06 <__udivmoddi4+0x28a>
 800092c:	2100      	movs	r1, #0
 800092e:	e9c6 0500 	strd	r0, r5, [r6]
 8000932:	4608      	mov	r0, r1
 8000934:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000938:	fab3 f183 	clz	r1, r3
 800093c:	2900      	cmp	r1, #0
 800093e:	d149      	bne.n	80009d4 <__udivmoddi4+0x158>
 8000940:	42ab      	cmp	r3, r5
 8000942:	d302      	bcc.n	800094a <__udivmoddi4+0xce>
 8000944:	4282      	cmp	r2, r0
 8000946:	f200 80f8 	bhi.w	8000b3a <__udivmoddi4+0x2be>
 800094a:	1a84      	subs	r4, r0, r2
 800094c:	eb65 0203 	sbc.w	r2, r5, r3
 8000950:	2001      	movs	r0, #1
 8000952:	4617      	mov	r7, r2
 8000954:	2e00      	cmp	r6, #0
 8000956:	d0e2      	beq.n	800091e <__udivmoddi4+0xa2>
 8000958:	e9c6 4700 	strd	r4, r7, [r6]
 800095c:	e7df      	b.n	800091e <__udivmoddi4+0xa2>
 800095e:	b902      	cbnz	r2, 8000962 <__udivmoddi4+0xe6>
 8000960:	deff      	udf	#255	; 0xff
 8000962:	fab2 f382 	clz	r3, r2
 8000966:	2b00      	cmp	r3, #0
 8000968:	f040 8090 	bne.w	8000a8c <__udivmoddi4+0x210>
 800096c:	1a8a      	subs	r2, r1, r2
 800096e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000972:	fa1f fe8c 	uxth.w	lr, ip
 8000976:	2101      	movs	r1, #1
 8000978:	fbb2 f5f7 	udiv	r5, r2, r7
 800097c:	fb07 2015 	mls	r0, r7, r5, r2
 8000980:	0c22      	lsrs	r2, r4, #16
 8000982:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000986:	fb0e f005 	mul.w	r0, lr, r5
 800098a:	4290      	cmp	r0, r2
 800098c:	d908      	bls.n	80009a0 <__udivmoddi4+0x124>
 800098e:	eb1c 0202 	adds.w	r2, ip, r2
 8000992:	f105 38ff 	add.w	r8, r5, #4294967295
 8000996:	d202      	bcs.n	800099e <__udivmoddi4+0x122>
 8000998:	4290      	cmp	r0, r2
 800099a:	f200 80cb 	bhi.w	8000b34 <__udivmoddi4+0x2b8>
 800099e:	4645      	mov	r5, r8
 80009a0:	1a12      	subs	r2, r2, r0
 80009a2:	b2a4      	uxth	r4, r4
 80009a4:	fbb2 f0f7 	udiv	r0, r2, r7
 80009a8:	fb07 2210 	mls	r2, r7, r0, r2
 80009ac:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80009b0:	fb0e fe00 	mul.w	lr, lr, r0
 80009b4:	45a6      	cmp	lr, r4
 80009b6:	d908      	bls.n	80009ca <__udivmoddi4+0x14e>
 80009b8:	eb1c 0404 	adds.w	r4, ip, r4
 80009bc:	f100 32ff 	add.w	r2, r0, #4294967295
 80009c0:	d202      	bcs.n	80009c8 <__udivmoddi4+0x14c>
 80009c2:	45a6      	cmp	lr, r4
 80009c4:	f200 80bb 	bhi.w	8000b3e <__udivmoddi4+0x2c2>
 80009c8:	4610      	mov	r0, r2
 80009ca:	eba4 040e 	sub.w	r4, r4, lr
 80009ce:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80009d2:	e79f      	b.n	8000914 <__udivmoddi4+0x98>
 80009d4:	f1c1 0720 	rsb	r7, r1, #32
 80009d8:	408b      	lsls	r3, r1
 80009da:	fa22 fc07 	lsr.w	ip, r2, r7
 80009de:	ea4c 0c03 	orr.w	ip, ip, r3
 80009e2:	fa05 f401 	lsl.w	r4, r5, r1
 80009e6:	fa20 f307 	lsr.w	r3, r0, r7
 80009ea:	40fd      	lsrs	r5, r7
 80009ec:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80009f0:	4323      	orrs	r3, r4
 80009f2:	fbb5 f8f9 	udiv	r8, r5, r9
 80009f6:	fa1f fe8c 	uxth.w	lr, ip
 80009fa:	fb09 5518 	mls	r5, r9, r8, r5
 80009fe:	0c1c      	lsrs	r4, r3, #16
 8000a00:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000a04:	fb08 f50e 	mul.w	r5, r8, lr
 8000a08:	42a5      	cmp	r5, r4
 8000a0a:	fa02 f201 	lsl.w	r2, r2, r1
 8000a0e:	fa00 f001 	lsl.w	r0, r0, r1
 8000a12:	d90b      	bls.n	8000a2c <__udivmoddi4+0x1b0>
 8000a14:	eb1c 0404 	adds.w	r4, ip, r4
 8000a18:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a1c:	f080 8088 	bcs.w	8000b30 <__udivmoddi4+0x2b4>
 8000a20:	42a5      	cmp	r5, r4
 8000a22:	f240 8085 	bls.w	8000b30 <__udivmoddi4+0x2b4>
 8000a26:	f1a8 0802 	sub.w	r8, r8, #2
 8000a2a:	4464      	add	r4, ip
 8000a2c:	1b64      	subs	r4, r4, r5
 8000a2e:	b29d      	uxth	r5, r3
 8000a30:	fbb4 f3f9 	udiv	r3, r4, r9
 8000a34:	fb09 4413 	mls	r4, r9, r3, r4
 8000a38:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000a3c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000a40:	45a6      	cmp	lr, r4
 8000a42:	d908      	bls.n	8000a56 <__udivmoddi4+0x1da>
 8000a44:	eb1c 0404 	adds.w	r4, ip, r4
 8000a48:	f103 35ff 	add.w	r5, r3, #4294967295
 8000a4c:	d26c      	bcs.n	8000b28 <__udivmoddi4+0x2ac>
 8000a4e:	45a6      	cmp	lr, r4
 8000a50:	d96a      	bls.n	8000b28 <__udivmoddi4+0x2ac>
 8000a52:	3b02      	subs	r3, #2
 8000a54:	4464      	add	r4, ip
 8000a56:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a5a:	fba3 9502 	umull	r9, r5, r3, r2
 8000a5e:	eba4 040e 	sub.w	r4, r4, lr
 8000a62:	42ac      	cmp	r4, r5
 8000a64:	46c8      	mov	r8, r9
 8000a66:	46ae      	mov	lr, r5
 8000a68:	d356      	bcc.n	8000b18 <__udivmoddi4+0x29c>
 8000a6a:	d053      	beq.n	8000b14 <__udivmoddi4+0x298>
 8000a6c:	b156      	cbz	r6, 8000a84 <__udivmoddi4+0x208>
 8000a6e:	ebb0 0208 	subs.w	r2, r0, r8
 8000a72:	eb64 040e 	sbc.w	r4, r4, lr
 8000a76:	fa04 f707 	lsl.w	r7, r4, r7
 8000a7a:	40ca      	lsrs	r2, r1
 8000a7c:	40cc      	lsrs	r4, r1
 8000a7e:	4317      	orrs	r7, r2
 8000a80:	e9c6 7400 	strd	r7, r4, [r6]
 8000a84:	4618      	mov	r0, r3
 8000a86:	2100      	movs	r1, #0
 8000a88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a8c:	f1c3 0120 	rsb	r1, r3, #32
 8000a90:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a94:	fa20 f201 	lsr.w	r2, r0, r1
 8000a98:	fa25 f101 	lsr.w	r1, r5, r1
 8000a9c:	409d      	lsls	r5, r3
 8000a9e:	432a      	orrs	r2, r5
 8000aa0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000aa4:	fa1f fe8c 	uxth.w	lr, ip
 8000aa8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000aac:	fb07 1510 	mls	r5, r7, r0, r1
 8000ab0:	0c11      	lsrs	r1, r2, #16
 8000ab2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ab6:	fb00 f50e 	mul.w	r5, r0, lr
 8000aba:	428d      	cmp	r5, r1
 8000abc:	fa04 f403 	lsl.w	r4, r4, r3
 8000ac0:	d908      	bls.n	8000ad4 <__udivmoddi4+0x258>
 8000ac2:	eb1c 0101 	adds.w	r1, ip, r1
 8000ac6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000aca:	d22f      	bcs.n	8000b2c <__udivmoddi4+0x2b0>
 8000acc:	428d      	cmp	r5, r1
 8000ace:	d92d      	bls.n	8000b2c <__udivmoddi4+0x2b0>
 8000ad0:	3802      	subs	r0, #2
 8000ad2:	4461      	add	r1, ip
 8000ad4:	1b49      	subs	r1, r1, r5
 8000ad6:	b292      	uxth	r2, r2
 8000ad8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000adc:	fb07 1115 	mls	r1, r7, r5, r1
 8000ae0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ae4:	fb05 f10e 	mul.w	r1, r5, lr
 8000ae8:	4291      	cmp	r1, r2
 8000aea:	d908      	bls.n	8000afe <__udivmoddi4+0x282>
 8000aec:	eb1c 0202 	adds.w	r2, ip, r2
 8000af0:	f105 38ff 	add.w	r8, r5, #4294967295
 8000af4:	d216      	bcs.n	8000b24 <__udivmoddi4+0x2a8>
 8000af6:	4291      	cmp	r1, r2
 8000af8:	d914      	bls.n	8000b24 <__udivmoddi4+0x2a8>
 8000afa:	3d02      	subs	r5, #2
 8000afc:	4462      	add	r2, ip
 8000afe:	1a52      	subs	r2, r2, r1
 8000b00:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000b04:	e738      	b.n	8000978 <__udivmoddi4+0xfc>
 8000b06:	4631      	mov	r1, r6
 8000b08:	4630      	mov	r0, r6
 8000b0a:	e708      	b.n	800091e <__udivmoddi4+0xa2>
 8000b0c:	4639      	mov	r1, r7
 8000b0e:	e6e6      	b.n	80008de <__udivmoddi4+0x62>
 8000b10:	4610      	mov	r0, r2
 8000b12:	e6fb      	b.n	800090c <__udivmoddi4+0x90>
 8000b14:	4548      	cmp	r0, r9
 8000b16:	d2a9      	bcs.n	8000a6c <__udivmoddi4+0x1f0>
 8000b18:	ebb9 0802 	subs.w	r8, r9, r2
 8000b1c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000b20:	3b01      	subs	r3, #1
 8000b22:	e7a3      	b.n	8000a6c <__udivmoddi4+0x1f0>
 8000b24:	4645      	mov	r5, r8
 8000b26:	e7ea      	b.n	8000afe <__udivmoddi4+0x282>
 8000b28:	462b      	mov	r3, r5
 8000b2a:	e794      	b.n	8000a56 <__udivmoddi4+0x1da>
 8000b2c:	4640      	mov	r0, r8
 8000b2e:	e7d1      	b.n	8000ad4 <__udivmoddi4+0x258>
 8000b30:	46d0      	mov	r8, sl
 8000b32:	e77b      	b.n	8000a2c <__udivmoddi4+0x1b0>
 8000b34:	3d02      	subs	r5, #2
 8000b36:	4462      	add	r2, ip
 8000b38:	e732      	b.n	80009a0 <__udivmoddi4+0x124>
 8000b3a:	4608      	mov	r0, r1
 8000b3c:	e70a      	b.n	8000954 <__udivmoddi4+0xd8>
 8000b3e:	4464      	add	r4, ip
 8000b40:	3802      	subs	r0, #2
 8000b42:	e742      	b.n	80009ca <__udivmoddi4+0x14e>

08000b44 <__aeabi_idiv0>:
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop

08000b48 <spi1_beriRegister>:
void initAccel(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t spi1_beriRegister(uint8_t reg) {
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b086      	sub	sp, #24
 8000b4c:	af02      	add	r7, sp, #8
 8000b4e:	4603      	mov	r3, r0
 8000b50:	71fb      	strb	r3, [r7, #7]
    uint16_t buf_out, buf_in;
    reg |= 0x80; // najpomembnejsi bit na 1
 8000b52:	79fb      	ldrb	r3, [r7, #7]
 8000b54:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000b58:	71fb      	strb	r3, [r7, #7]
    buf_out = reg; // little endian, se postavi na pravo mesto ....
 8000b5a:	79fb      	ldrb	r3, [r7, #7]
 8000b5c:	b29b      	uxth	r3, r3
 8000b5e:	81fb      	strh	r3, [r7, #14]
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8000b60:	2200      	movs	r2, #0
 8000b62:	2108      	movs	r1, #8
 8000b64:	480c      	ldr	r0, [pc, #48]	; (8000b98 <spi1_beriRegister+0x50>)
 8000b66:	f001 fa81 	bl	800206c <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&buf_out, (uint8_t*)&buf_in, 2, 2); // blocking posiljanje ....
 8000b6a:	f107 020c 	add.w	r2, r7, #12
 8000b6e:	f107 010e 	add.w	r1, r7, #14
 8000b72:	2302      	movs	r3, #2
 8000b74:	9300      	str	r3, [sp, #0]
 8000b76:	2302      	movs	r3, #2
 8000b78:	4808      	ldr	r0, [pc, #32]	; (8000b9c <spi1_beriRegister+0x54>)
 8000b7a:	f004 fc6d 	bl	8005458 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 8000b7e:	2201      	movs	r2, #1
 8000b80:	2108      	movs	r1, #8
 8000b82:	4805      	ldr	r0, [pc, #20]	; (8000b98 <spi1_beriRegister+0x50>)
 8000b84:	f001 fa72 	bl	800206c <HAL_GPIO_WritePin>
    return buf_in >> 8; // little endian...
 8000b88:	89bb      	ldrh	r3, [r7, #12]
 8000b8a:	0a1b      	lsrs	r3, r3, #8
 8000b8c:	b29b      	uxth	r3, r3
 8000b8e:	b2db      	uxtb	r3, r3
}
 8000b90:	4618      	mov	r0, r3
 8000b92:	3710      	adds	r7, #16
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	40021000 	.word	0x40021000
 8000b9c:	200001c0 	.word	0x200001c0

08000ba0 <spi1_pisiRegister>:
void spi1_pisiRegister(uint8_t reg, uint8_t vrednost) {
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b084      	sub	sp, #16
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	460a      	mov	r2, r1
 8000baa:	71fb      	strb	r3, [r7, #7]
 8000bac:	4613      	mov	r3, r2
 8000bae:	71bb      	strb	r3, [r7, #6]
    uint16_t buf_out;
    buf_out = reg | (vrednost<<8); // little endian, se postavi na pravo mesto ....
 8000bb0:	79fb      	ldrb	r3, [r7, #7]
 8000bb2:	b21a      	sxth	r2, r3
 8000bb4:	79bb      	ldrb	r3, [r7, #6]
 8000bb6:	021b      	lsls	r3, r3, #8
 8000bb8:	b21b      	sxth	r3, r3
 8000bba:	4313      	orrs	r3, r2
 8000bbc:	b21b      	sxth	r3, r3
 8000bbe:	b29b      	uxth	r3, r3
 8000bc0:	81fb      	strh	r3, [r7, #14]
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	2108      	movs	r1, #8
 8000bc6:	4809      	ldr	r0, [pc, #36]	; (8000bec <spi1_pisiRegister+0x4c>)
 8000bc8:	f001 fa50 	bl	800206c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, (uint8_t*)&buf_out, 2, 2); // blocking posiljanje ....
 8000bcc:	f107 010e 	add.w	r1, r7, #14
 8000bd0:	2302      	movs	r3, #2
 8000bd2:	2202      	movs	r2, #2
 8000bd4:	4806      	ldr	r0, [pc, #24]	; (8000bf0 <spi1_pisiRegister+0x50>)
 8000bd6:	f004 f9f2 	bl	8004fbe <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 8000bda:	2201      	movs	r2, #1
 8000bdc:	2108      	movs	r1, #8
 8000bde:	4803      	ldr	r0, [pc, #12]	; (8000bec <spi1_pisiRegister+0x4c>)
 8000be0:	f001 fa44 	bl	800206c <HAL_GPIO_WritePin>
}
 8000be4:	bf00      	nop
 8000be6:	3710      	adds	r7, #16
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	40021000 	.word	0x40021000
 8000bf0:	200001c0 	.word	0x200001c0

08000bf4 <spi1_beriRegistre>:
void spi1_beriRegistre(uint8_t reg, uint8_t* buffer, uint8_t velikost) {
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	6039      	str	r1, [r7, #0]
 8000bfe:	71fb      	strb	r3, [r7, #7]
 8000c00:	4613      	mov	r3, r2
 8000c02:	71bb      	strb	r3, [r7, #6]
    reg |= 0xC0; // najpomembnejsa bita na 1
 8000c04:	79fb      	ldrb	r3, [r7, #7]
 8000c06:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8000c0a:	b2db      	uxtb	r3, r3
 8000c0c:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8000c0e:	2200      	movs	r2, #0
 8000c10:	2108      	movs	r1, #8
 8000c12:	480c      	ldr	r0, [pc, #48]	; (8000c44 <spi1_beriRegistre+0x50>)
 8000c14:	f001 fa2a 	bl	800206c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &reg, 1, 10); // blocking posiljanje....
 8000c18:	1df9      	adds	r1, r7, #7
 8000c1a:	230a      	movs	r3, #10
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	480a      	ldr	r0, [pc, #40]	; (8000c48 <spi1_beriRegistre+0x54>)
 8000c20:	f004 f9cd 	bl	8004fbe <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi1,  buffer, velikost, velikost); // blocking posiljanje....
 8000c24:	79bb      	ldrb	r3, [r7, #6]
 8000c26:	b29a      	uxth	r2, r3
 8000c28:	79bb      	ldrb	r3, [r7, #6]
 8000c2a:	6839      	ldr	r1, [r7, #0]
 8000c2c:	4806      	ldr	r0, [pc, #24]	; (8000c48 <spi1_beriRegistre+0x54>)
 8000c2e:	f004 fb02 	bl	8005236 <HAL_SPI_Receive>
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 8000c32:	2201      	movs	r2, #1
 8000c34:	2108      	movs	r1, #8
 8000c36:	4803      	ldr	r0, [pc, #12]	; (8000c44 <spi1_beriRegistre+0x50>)
 8000c38:	f001 fa18 	bl	800206c <HAL_GPIO_WritePin>
}
 8000c3c:	bf00      	nop
 8000c3e:	3708      	adds	r7, #8
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	40021000 	.word	0x40021000
 8000c48:	200001c0 	.word	0x200001c0

08000c4c <initGyro>:
void initGyro() { // ne pozabit klicat te funkcije
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
    uint8_t cip = spi1_beriRegister(0x0F);
 8000c52:	200f      	movs	r0, #15
 8000c54:	f7ff ff78 	bl	8000b48 <spi1_beriRegister>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	71fb      	strb	r3, [r7, #7]
    if (cip!=0xD4 && cip!=0xD3) {
 8000c5c:	79fb      	ldrb	r3, [r7, #7]
 8000c5e:	2bd4      	cmp	r3, #212	; 0xd4
 8000c60:	d003      	beq.n	8000c6a <initGyro+0x1e>
 8000c62:	79fb      	ldrb	r3, [r7, #7]
 8000c64:	2bd3      	cmp	r3, #211	; 0xd3
 8000c66:	d000      	beq.n	8000c6a <initGyro+0x1e>
        for (;;);
 8000c68:	e7fe      	b.n	8000c68 <initGyro+0x1c>
    }
    spi1_pisiRegister(0x20, 0x4F); // CTRL_REG1 PD Zen Yen Xen 200hz
 8000c6a:	214f      	movs	r1, #79	; 0x4f
 8000c6c:	2020      	movs	r0, #32
 8000c6e:	f7ff ff97 	bl	8000ba0 <spi1_pisiRegister>
    //TUKAJ NASTAVI Hz pa sensitivity +-500dps
    spi1_pisiRegister(0x22, 0x08); //DRDY
 8000c72:	2108      	movs	r1, #8
 8000c74:	2022      	movs	r0, #34	; 0x22
 8000c76:	f7ff ff93 	bl	8000ba0 <spi1_pisiRegister>
    spi1_pisiRegister(0x23, 0x10);
 8000c7a:	2110      	movs	r1, #16
 8000c7c:	2023      	movs	r0, #35	; 0x23
 8000c7e:	f7ff ff8f 	bl	8000ba0 <spi1_pisiRegister>
}
 8000c82:	bf00      	nop
 8000c84:	3708      	adds	r7, #8
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
	...

08000c8c <i2c1_pisiRegister>:
uint8_t i2c1_pisiRegister(uint8_t naprava, uint8_t reg, uint8_t podatek) {
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b086      	sub	sp, #24
 8000c90:	af04      	add	r7, sp, #16
 8000c92:	4603      	mov	r3, r0
 8000c94:	71fb      	strb	r3, [r7, #7]
 8000c96:	460b      	mov	r3, r1
 8000c98:	71bb      	strb	r3, [r7, #6]
 8000c9a:	4613      	mov	r3, r2
 8000c9c:	717b      	strb	r3, [r7, #5]
    naprava <<= 1;
 8000c9e:	79fb      	ldrb	r3, [r7, #7]
 8000ca0:	005b      	lsls	r3, r3, #1
 8000ca2:	71fb      	strb	r3, [r7, #7]
    return HAL_I2C_Mem_Write(&hi2c1, naprava, reg, I2C_MEMADD_SIZE_8BIT, &podatek, 1, 10);
 8000ca4:	79fb      	ldrb	r3, [r7, #7]
 8000ca6:	b299      	uxth	r1, r3
 8000ca8:	79bb      	ldrb	r3, [r7, #6]
 8000caa:	b29a      	uxth	r2, r3
 8000cac:	230a      	movs	r3, #10
 8000cae:	9302      	str	r3, [sp, #8]
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	9301      	str	r3, [sp, #4]
 8000cb4:	1d7b      	adds	r3, r7, #5
 8000cb6:	9300      	str	r3, [sp, #0]
 8000cb8:	2301      	movs	r3, #1
 8000cba:	4804      	ldr	r0, [pc, #16]	; (8000ccc <i2c1_pisiRegister+0x40>)
 8000cbc:	f001 fb34 	bl	8002328 <HAL_I2C_Mem_Write>
 8000cc0:	4603      	mov	r3, r0
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	3708      	adds	r7, #8
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	2000016c 	.word	0x2000016c

08000cd0 <i2c1_beriRegistre>:
void i2c1_beriRegistre(uint8_t naprava, uint8_t reg, uint8_t* podatek, uint8_t dolzina) {
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b086      	sub	sp, #24
 8000cd4:	af04      	add	r7, sp, #16
 8000cd6:	603a      	str	r2, [r7, #0]
 8000cd8:	461a      	mov	r2, r3
 8000cda:	4603      	mov	r3, r0
 8000cdc:	71fb      	strb	r3, [r7, #7]
 8000cde:	460b      	mov	r3, r1
 8000ce0:	71bb      	strb	r3, [r7, #6]
 8000ce2:	4613      	mov	r3, r2
 8000ce4:	717b      	strb	r3, [r7, #5]
    if ((dolzina>1)&&(naprava==0x19))  // ce je naprava 0x19 moramo postaviti ta bit, ce zelimo brati vec zlogov
 8000ce6:	797b      	ldrb	r3, [r7, #5]
 8000ce8:	2b01      	cmp	r3, #1
 8000cea:	d906      	bls.n	8000cfa <i2c1_beriRegistre+0x2a>
 8000cec:	79fb      	ldrb	r3, [r7, #7]
 8000cee:	2b19      	cmp	r3, #25
 8000cf0:	d103      	bne.n	8000cfa <i2c1_beriRegistre+0x2a>
        reg |= 0x80;
 8000cf2:	79bb      	ldrb	r3, [r7, #6]
 8000cf4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000cf8:	71bb      	strb	r3, [r7, #6]
    naprava <<= 1;
 8000cfa:	79fb      	ldrb	r3, [r7, #7]
 8000cfc:	005b      	lsls	r3, r3, #1
 8000cfe:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Read(&hi2c1, naprava, reg, I2C_MEMADD_SIZE_8BIT, podatek, dolzina, dolzina);
 8000d00:	79fb      	ldrb	r3, [r7, #7]
 8000d02:	b299      	uxth	r1, r3
 8000d04:	79bb      	ldrb	r3, [r7, #6]
 8000d06:	b298      	uxth	r0, r3
 8000d08:	797b      	ldrb	r3, [r7, #5]
 8000d0a:	b29b      	uxth	r3, r3
 8000d0c:	797a      	ldrb	r2, [r7, #5]
 8000d0e:	9202      	str	r2, [sp, #8]
 8000d10:	9301      	str	r3, [sp, #4]
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	9300      	str	r3, [sp, #0]
 8000d16:	2301      	movs	r3, #1
 8000d18:	4602      	mov	r2, r0
 8000d1a:	4803      	ldr	r0, [pc, #12]	; (8000d28 <i2c1_beriRegistre+0x58>)
 8000d1c:	f001 fbfe 	bl	800251c <HAL_I2C_Mem_Read>
}
 8000d20:	bf00      	nop
 8000d22:	3708      	adds	r7, #8
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	2000016c 	.word	0x2000016c

08000d2c <initAccel>:
void initAccel() {
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
    i2c1_pisiRegister(0x19, 0x20, 0x27);
 8000d30:	2227      	movs	r2, #39	; 0x27
 8000d32:	2120      	movs	r1, #32
 8000d34:	2019      	movs	r0, #25
 8000d36:	f7ff ffa9 	bl	8000c8c <i2c1_pisiRegister>
    i2c1_pisiRegister(0x19, 0x23, 0xA8);
 8000d3a:	22a8      	movs	r2, #168	; 0xa8
 8000d3c:	2123      	movs	r1, #35	; 0x23
 8000d3e:	2019      	movs	r0, #25
 8000d40:	f7ff ffa4 	bl	8000c8c <i2c1_pisiRegister>
}
 8000d44:	bf00      	nop
 8000d46:	bd80      	pop	{r7, pc}

08000d48 <TaskReadGyro>:
void TaskReadGyro(void *pvParameters){
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b088      	sub	sp, #32
 8000d4c:	af02      	add	r7, sp, #8
 8000d4e:	6078      	str	r0, [r7, #4]
	int16_t gyroX;
	int16_t gyroY;
	int16_t gyroZ;

	const EventBits_t xBitsToWaitFor = (TaskReadAccel_BIT | TaskSendAccel_BIT);
 8000d50:	2303      	movs	r3, #3
 8000d52:	617b      	str	r3, [r7, #20]
	while(1){
		xEventGroupWaitBits(xEventGroup, xBitsToWaitFor, pdTRUE, pdFALSE, portMAX_DELAY);
 8000d54:	4b1b      	ldr	r3, [pc, #108]	; (8000dc4 <TaskReadGyro+0x7c>)
 8000d56:	6818      	ldr	r0, [r3, #0]
 8000d58:	f04f 33ff 	mov.w	r3, #4294967295
 8000d5c:	9300      	str	r3, [sp, #0]
 8000d5e:	2300      	movs	r3, #0
 8000d60:	2201      	movs	r2, #1
 8000d62:	6979      	ldr	r1, [r7, #20]
 8000d64:	f009 fd7e 	bl	800a864 <xEventGroupWaitBits>


		spi1_beriRegistre(0x28, (uint8_t*)&gyroX, 2);
 8000d68:	f107 0312 	add.w	r3, r7, #18
 8000d6c:	2202      	movs	r2, #2
 8000d6e:	4619      	mov	r1, r3
 8000d70:	2028      	movs	r0, #40	; 0x28
 8000d72:	f7ff ff3f 	bl	8000bf4 <spi1_beriRegistre>
		spi1_beriRegistre(0x2A, (uint8_t*)&gyroY, 2);
 8000d76:	f107 0310 	add.w	r3, r7, #16
 8000d7a:	2202      	movs	r2, #2
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	202a      	movs	r0, #42	; 0x2a
 8000d80:	f7ff ff38 	bl	8000bf4 <spi1_beriRegistre>
		spi1_beriRegistre(0x2C, (uint8_t*)&gyroZ, 2);
 8000d84:	f107 030e 	add.w	r3, r7, #14
 8000d88:	2202      	movs	r2, #2
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	202c      	movs	r0, #44	; 0x2c
 8000d8e:	f7ff ff31 	bl	8000bf4 <spi1_beriRegistre>

		xQueueSendToBack(QueueGyro, &gyroX, 0);
 8000d92:	4b0d      	ldr	r3, [pc, #52]	; (8000dc8 <TaskReadGyro+0x80>)
 8000d94:	6818      	ldr	r0, [r3, #0]
 8000d96:	f107 0112 	add.w	r1, r7, #18
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	f00a f8cf 	bl	800af40 <xQueueGenericSend>
		xQueueSendToBack(QueueGyro, &gyroY, 0);
 8000da2:	4b09      	ldr	r3, [pc, #36]	; (8000dc8 <TaskReadGyro+0x80>)
 8000da4:	6818      	ldr	r0, [r3, #0]
 8000da6:	f107 0110 	add.w	r1, r7, #16
 8000daa:	2300      	movs	r3, #0
 8000dac:	2200      	movs	r2, #0
 8000dae:	f00a f8c7 	bl	800af40 <xQueueGenericSend>
		xQueueSendToBack(QueueGyro, &gyroZ, 0);
 8000db2:	4b05      	ldr	r3, [pc, #20]	; (8000dc8 <TaskReadGyro+0x80>)
 8000db4:	6818      	ldr	r0, [r3, #0]
 8000db6:	f107 010e 	add.w	r1, r7, #14
 8000dba:	2300      	movs	r3, #0
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	f00a f8bf 	bl	800af40 <xQueueGenericSend>
		xEventGroupWaitBits(xEventGroup, xBitsToWaitFor, pdTRUE, pdFALSE, portMAX_DELAY);
 8000dc2:	e7c7      	b.n	8000d54 <TaskReadGyro+0xc>
 8000dc4:	2000026c 	.word	0x2000026c
 8000dc8:	20000264 	.word	0x20000264
 8000dcc:	00000000 	.word	0x00000000

08000dd0 <TaskReadAccel>:
	}
}
void TaskReadAccel(void *pvParameters){
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b088      	sub	sp, #32
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
	float accelY;
	float accelZ;
	int16_t meritve[3];

	while(1){
		i2c1_beriRegistre(0x19, 0x28,(uint8_t*)&meritve[0], 2);
 8000dd8:	f107 020c 	add.w	r2, r7, #12
 8000ddc:	2302      	movs	r3, #2
 8000dde:	2128      	movs	r1, #40	; 0x28
 8000de0:	2019      	movs	r0, #25
 8000de2:	f7ff ff75 	bl	8000cd0 <i2c1_beriRegistre>
		i2c1_beriRegistre(0x19, 0x2A,(uint8_t*)&meritve[1], 2);
 8000de6:	f107 030c 	add.w	r3, r7, #12
 8000dea:	1c9a      	adds	r2, r3, #2
 8000dec:	2302      	movs	r3, #2
 8000dee:	212a      	movs	r1, #42	; 0x2a
 8000df0:	2019      	movs	r0, #25
 8000df2:	f7ff ff6d 	bl	8000cd0 <i2c1_beriRegistre>
		i2c1_beriRegistre(0x19, 0x2C,(uint8_t*)&meritve[2], 2);
 8000df6:	f107 030c 	add.w	r3, r7, #12
 8000dfa:	1d1a      	adds	r2, r3, #4
 8000dfc:	2302      	movs	r3, #2
 8000dfe:	212c      	movs	r1, #44	; 0x2c
 8000e00:	2019      	movs	r0, #25
 8000e02:	f7ff ff65 	bl	8000cd0 <i2c1_beriRegistre>
		//i2c1_beriRegistre(0x19, 0x28,(uint8_t*)&meritve, 6);

		meritve[0] = meritve[0] >> 4;
 8000e06:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000e0a:	111b      	asrs	r3, r3, #4
 8000e0c:	b21b      	sxth	r3, r3
 8000e0e:	81bb      	strh	r3, [r7, #12]
		meritve[1] = meritve[1] >> 4;
 8000e10:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000e14:	111b      	asrs	r3, r3, #4
 8000e16:	b21b      	sxth	r3, r3
 8000e18:	81fb      	strh	r3, [r7, #14]
		meritve[2] = meritve[2] >> 4;
 8000e1a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000e1e:	111b      	asrs	r3, r3, #4
 8000e20:	b21b      	sxth	r3, r3
 8000e22:	823b      	strh	r3, [r7, #16]

		accelX = meritve[0] * 0.0039;
 8000e24:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f7ff fc55 	bl	80006d8 <__aeabi_i2d>
 8000e2e:	a32a      	add	r3, pc, #168	; (adr r3, 8000ed8 <TaskReadAccel+0x108>)
 8000e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e34:	f7ff f9d4 	bl	80001e0 <__aeabi_dmul>
 8000e38:	4602      	mov	r2, r0
 8000e3a:	460b      	mov	r3, r1
 8000e3c:	4610      	mov	r0, r2
 8000e3e:	4619      	mov	r1, r3
 8000e40:	f7ff fcb4 	bl	80007ac <__aeabi_d2f>
 8000e44:	4603      	mov	r3, r0
 8000e46:	61fb      	str	r3, [r7, #28]
		accelY = meritve[1] * 0.0039;
 8000e48:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f7ff fc43 	bl	80006d8 <__aeabi_i2d>
 8000e52:	a321      	add	r3, pc, #132	; (adr r3, 8000ed8 <TaskReadAccel+0x108>)
 8000e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e58:	f7ff f9c2 	bl	80001e0 <__aeabi_dmul>
 8000e5c:	4602      	mov	r2, r0
 8000e5e:	460b      	mov	r3, r1
 8000e60:	4610      	mov	r0, r2
 8000e62:	4619      	mov	r1, r3
 8000e64:	f7ff fca2 	bl	80007ac <__aeabi_d2f>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	61bb      	str	r3, [r7, #24]
		accelZ = meritve[2] * 0.0039;
 8000e6c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000e70:	4618      	mov	r0, r3
 8000e72:	f7ff fc31 	bl	80006d8 <__aeabi_i2d>
 8000e76:	a318      	add	r3, pc, #96	; (adr r3, 8000ed8 <TaskReadAccel+0x108>)
 8000e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e7c:	f7ff f9b0 	bl	80001e0 <__aeabi_dmul>
 8000e80:	4602      	mov	r2, r0
 8000e82:	460b      	mov	r3, r1
 8000e84:	4610      	mov	r0, r2
 8000e86:	4619      	mov	r1, r3
 8000e88:	f7ff fc90 	bl	80007ac <__aeabi_d2f>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	617b      	str	r3, [r7, #20]

		xQueueSendToBack(QueueAccel, &accelX, 0);
 8000e90:	4b0f      	ldr	r3, [pc, #60]	; (8000ed0 <TaskReadAccel+0x100>)
 8000e92:	6818      	ldr	r0, [r3, #0]
 8000e94:	f107 011c 	add.w	r1, r7, #28
 8000e98:	2300      	movs	r3, #0
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	f00a f850 	bl	800af40 <xQueueGenericSend>
		xQueueSendToBack(QueueAccel, &accelY, 0);
 8000ea0:	4b0b      	ldr	r3, [pc, #44]	; (8000ed0 <TaskReadAccel+0x100>)
 8000ea2:	6818      	ldr	r0, [r3, #0]
 8000ea4:	f107 0118 	add.w	r1, r7, #24
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	2200      	movs	r2, #0
 8000eac:	f00a f848 	bl	800af40 <xQueueGenericSend>
		xQueueSendToBack(QueueAccel, &accelZ, 0);
 8000eb0:	4b07      	ldr	r3, [pc, #28]	; (8000ed0 <TaskReadAccel+0x100>)
 8000eb2:	6818      	ldr	r0, [r3, #0]
 8000eb4:	f107 0114 	add.w	r1, r7, #20
 8000eb8:	2300      	movs	r3, #0
 8000eba:	2200      	movs	r2, #0
 8000ebc:	f00a f840 	bl	800af40 <xQueueGenericSend>

		xEventGroupSetBits(xEventGroup, TaskReadAccel_BIT);
 8000ec0:	4b04      	ldr	r3, [pc, #16]	; (8000ed4 <TaskReadAccel+0x104>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	2101      	movs	r1, #1
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f009 fd9a 	bl	800aa00 <xEventGroupSetBits>
		i2c1_beriRegistre(0x19, 0x28,(uint8_t*)&meritve[0], 2);
 8000ecc:	e784      	b.n	8000dd8 <TaskReadAccel+0x8>
 8000ece:	bf00      	nop
 8000ed0:	20000268 	.word	0x20000268
 8000ed4:	2000026c 	.word	0x2000026c
 8000ed8:	8e8a71de 	.word	0x8e8a71de
 8000edc:	3f6ff2e4 	.word	0x3f6ff2e4

08000ee0 <TaskSendGyro>:
	}

}
void TaskSendGyro(void *pvParameters){
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b08a      	sub	sp, #40	; 0x28
 8000ee4:	af02      	add	r7, sp, #8
 8000ee6:	6078      	str	r0, [r7, #4]
	int16_t meritev[8];

	meritev[0] = 0xaaaa;
 8000ee8:	f64a 23aa 	movw	r3, #43690	; 0xaaaa
 8000eec:	813b      	strh	r3, [r7, #8]
	const EventBits_t xBitsToWaitFor = (TaskReadAccel_BIT | TaskSendAccel_BIT | TaskReadGyro_BIT);
 8000eee:	2307      	movs	r3, #7
 8000ef0:	61fb      	str	r3, [r7, #28]
	const TickType_t xTicksToWait = pdMS_TO_TICKS(100);
 8000ef2:	2364      	movs	r3, #100	; 0x64
 8000ef4:	61bb      	str	r3, [r7, #24]
	while(1){
		xEventGroupWaitBits(xEventGroup, xBitsToWaitFor, pdTRUE, pdFALSE, portMAX_DELAY);
 8000ef6:	4b16      	ldr	r3, [pc, #88]	; (8000f50 <TaskSendGyro+0x70>)
 8000ef8:	6818      	ldr	r0, [r3, #0]
 8000efa:	f04f 33ff 	mov.w	r3, #4294967295
 8000efe:	9300      	str	r3, [sp, #0]
 8000f00:	2300      	movs	r3, #0
 8000f02:	2201      	movs	r2, #1
 8000f04:	69f9      	ldr	r1, [r7, #28]
 8000f06:	f009 fcad 	bl	800a864 <xEventGroupWaitBits>


		xQueueReceive(QueueGyro, &meritev[1], xTicksToWait);
 8000f0a:	4b12      	ldr	r3, [pc, #72]	; (8000f54 <TaskSendGyro+0x74>)
 8000f0c:	6818      	ldr	r0, [r3, #0]
 8000f0e:	f107 0308 	add.w	r3, r7, #8
 8000f12:	3302      	adds	r3, #2
 8000f14:	69ba      	ldr	r2, [r7, #24]
 8000f16:	4619      	mov	r1, r3
 8000f18:	f00a f9ac 	bl	800b274 <xQueueReceive>
		xQueueReceive(QueueGyro, &meritev[2], xTicksToWait);
 8000f1c:	4b0d      	ldr	r3, [pc, #52]	; (8000f54 <TaskSendGyro+0x74>)
 8000f1e:	6818      	ldr	r0, [r3, #0]
 8000f20:	f107 0308 	add.w	r3, r7, #8
 8000f24:	3304      	adds	r3, #4
 8000f26:	69ba      	ldr	r2, [r7, #24]
 8000f28:	4619      	mov	r1, r3
 8000f2a:	f00a f9a3 	bl	800b274 <xQueueReceive>
		xQueueReceive(QueueGyro, &meritev[3], xTicksToWait);
 8000f2e:	4b09      	ldr	r3, [pc, #36]	; (8000f54 <TaskSendGyro+0x74>)
 8000f30:	6818      	ldr	r0, [r3, #0]
 8000f32:	f107 0308 	add.w	r3, r7, #8
 8000f36:	3306      	adds	r3, #6
 8000f38:	69ba      	ldr	r2, [r7, #24]
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	f00a f99a 	bl	800b274 <xQueueReceive>
		//posli
		CDC_Transmit_FS((uint8_t*)&meritev, sizeof(meritev));
 8000f40:	f107 0308 	add.w	r3, r7, #8
 8000f44:	2110      	movs	r1, #16
 8000f46:	4618      	mov	r0, r3
 8000f48:	f00c fd32 	bl	800d9b0 <CDC_Transmit_FS>
	while(1){
 8000f4c:	e7d3      	b.n	8000ef6 <TaskSendGyro+0x16>
 8000f4e:	bf00      	nop
 8000f50:	2000026c 	.word	0x2000026c
 8000f54:	20000264 	.word	0x20000264

08000f58 <TaskSendAccel>:
		//mqtt_pub_raw("GyroData", &meritev, sizeof(meritev), 0, 0, xTicksToWait);

	}
}
void TaskSendAccel(void *pvParameters){
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b088      	sub	sp, #32
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
	float meritev[4];

	meritev[0] = 0xbbbb;
 8000f60:	4b15      	ldr	r3, [pc, #84]	; (8000fb8 <TaskSendAccel+0x60>)
 8000f62:	60fb      	str	r3, [r7, #12]
	const TickType_t xTicksToWait = pdMS_TO_TICKS(100);
 8000f64:	2364      	movs	r3, #100	; 0x64
 8000f66:	61fb      	str	r3, [r7, #28]
	while(1){
		xQueueReceive(QueueAccel, &meritev[1], xTicksToWait);
 8000f68:	4b14      	ldr	r3, [pc, #80]	; (8000fbc <TaskSendAccel+0x64>)
 8000f6a:	6818      	ldr	r0, [r3, #0]
 8000f6c:	f107 030c 	add.w	r3, r7, #12
 8000f70:	3304      	adds	r3, #4
 8000f72:	69fa      	ldr	r2, [r7, #28]
 8000f74:	4619      	mov	r1, r3
 8000f76:	f00a f97d 	bl	800b274 <xQueueReceive>
		xQueueReceive(QueueAccel, &meritev[2], xTicksToWait);
 8000f7a:	4b10      	ldr	r3, [pc, #64]	; (8000fbc <TaskSendAccel+0x64>)
 8000f7c:	6818      	ldr	r0, [r3, #0]
 8000f7e:	f107 030c 	add.w	r3, r7, #12
 8000f82:	3308      	adds	r3, #8
 8000f84:	69fa      	ldr	r2, [r7, #28]
 8000f86:	4619      	mov	r1, r3
 8000f88:	f00a f974 	bl	800b274 <xQueueReceive>
		xQueueReceive(QueueAccel, &meritev[3], xTicksToWait);
 8000f8c:	4b0b      	ldr	r3, [pc, #44]	; (8000fbc <TaskSendAccel+0x64>)
 8000f8e:	6818      	ldr	r0, [r3, #0]
 8000f90:	f107 030c 	add.w	r3, r7, #12
 8000f94:	330c      	adds	r3, #12
 8000f96:	69fa      	ldr	r2, [r7, #28]
 8000f98:	4619      	mov	r1, r3
 8000f9a:	f00a f96b 	bl	800b274 <xQueueReceive>
		//posli
		//CDC_Transmit_FS((uint8_t*)&glava, sizeof(glava));
		CDC_Transmit_FS((uint8_t*)&meritev, sizeof(meritev));
 8000f9e:	f107 030c 	add.w	r3, r7, #12
 8000fa2:	2110      	movs	r1, #16
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f00c fd03 	bl	800d9b0 <CDC_Transmit_FS>
		//mqtt_pub_raw("AccelData", &meritev, sizeof(meritev), 0, 0, xTicksToWait);
		xEventGroupSetBits(xEventGroup, TaskSendAccel_BIT);
 8000faa:	4b05      	ldr	r3, [pc, #20]	; (8000fc0 <TaskSendAccel+0x68>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	2102      	movs	r1, #2
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f009 fd25 	bl	800aa00 <xEventGroupSetBits>
	while(1){
 8000fb6:	e7d7      	b.n	8000f68 <TaskSendAccel+0x10>
 8000fb8:	473bbb00 	.word	0x473bbb00
 8000fbc:	20000268 	.word	0x20000268
 8000fc0:	2000026c 	.word	0x2000026c

08000fc4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fca:	f000 fcf1 	bl	80019b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fce:	f000 f88d 	bl	80010ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fd2:	f000 f983 	bl	80012dc <MX_GPIO_Init>
  MX_I2C1_Init();
 8000fd6:	f000 f8f1 	bl	80011bc <MX_I2C1_Init>
  MX_SPI1_Init();
 8000fda:	f000 f91f 	bl	800121c <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000fde:	f000 f953 	bl	8001288 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  __HAL_I2C_ENABLE(&hi2c1);
 8000fe2:	4b31      	ldr	r3, [pc, #196]	; (80010a8 <main+0xe4>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	681a      	ldr	r2, [r3, #0]
 8000fe8:	4b2f      	ldr	r3, [pc, #188]	; (80010a8 <main+0xe4>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f042 0201 	orr.w	r2, r2, #1
 8000ff0:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE(&hspi1);
 8000ff2:	4b2e      	ldr	r3, [pc, #184]	; (80010ac <main+0xe8>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	681a      	ldr	r2, [r3, #0]
 8000ff8:	4b2c      	ldr	r3, [pc, #176]	; (80010ac <main+0xe8>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001000:	601a      	str	r2, [r3, #0]
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 8001002:	2201      	movs	r2, #1
 8001004:	2108      	movs	r1, #8
 8001006:	482a      	ldr	r0, [pc, #168]	; (80010b0 <main+0xec>)
 8001008:	f001 f830 	bl	800206c <HAL_GPIO_WritePin>

  initGyro();
 800100c:	f7ff fe1e 	bl	8000c4c <initGyro>
  initAccel();
 8001010:	f7ff fe8c 	bl	8000d2c <initAccel>
  //mqtt_pub("temp", "test", 0, 0, 100);
  //esp32_send
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001014:	f009 fae0 	bl	800a5d8 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  QueueGyro = xQueueCreate( 5, sizeof( int16_t ) );
 8001018:	2200      	movs	r2, #0
 800101a:	2102      	movs	r1, #2
 800101c:	2005      	movs	r0, #5
 800101e:	f009 ff31 	bl	800ae84 <xQueueGenericCreate>
 8001022:	4603      	mov	r3, r0
 8001024:	4a23      	ldr	r2, [pc, #140]	; (80010b4 <main+0xf0>)
 8001026:	6013      	str	r3, [r2, #0]
  QueueAccel = xQueueCreate( 5, sizeof( float ) );
 8001028:	2200      	movs	r2, #0
 800102a:	2104      	movs	r1, #4
 800102c:	2005      	movs	r0, #5
 800102e:	f009 ff29 	bl	800ae84 <xQueueGenericCreate>
 8001032:	4603      	mov	r3, r0
 8001034:	4a20      	ldr	r2, [pc, #128]	; (80010b8 <main+0xf4>)
 8001036:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001038:	4a20      	ldr	r2, [pc, #128]	; (80010bc <main+0xf8>)
 800103a:	2100      	movs	r1, #0
 800103c:	4820      	ldr	r0, [pc, #128]	; (80010c0 <main+0xfc>)
 800103e:	f009 fb15 	bl	800a66c <osThreadNew>
 8001042:	4603      	mov	r3, r0
 8001044:	4a1f      	ldr	r2, [pc, #124]	; (80010c4 <main+0x100>)
 8001046:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  xTaskCreate(TaskSendGyro, "running branje in posiljanje gyro", configMINIMAL_STACK_SIZE, NULL, 2, NULL);
 8001048:	2300      	movs	r3, #0
 800104a:	9301      	str	r3, [sp, #4]
 800104c:	2302      	movs	r3, #2
 800104e:	9300      	str	r3, [sp, #0]
 8001050:	2300      	movs	r3, #0
 8001052:	2280      	movs	r2, #128	; 0x80
 8001054:	491c      	ldr	r1, [pc, #112]	; (80010c8 <main+0x104>)
 8001056:	481d      	ldr	r0, [pc, #116]	; (80010cc <main+0x108>)
 8001058:	f00a fbb7 	bl	800b7ca <xTaskCreate>
  xTaskCreate(TaskSendAccel, "running branje in posiljanje accel", configMINIMAL_STACK_SIZE, NULL, 2, NULL);
 800105c:	2300      	movs	r3, #0
 800105e:	9301      	str	r3, [sp, #4]
 8001060:	2302      	movs	r3, #2
 8001062:	9300      	str	r3, [sp, #0]
 8001064:	2300      	movs	r3, #0
 8001066:	2280      	movs	r2, #128	; 0x80
 8001068:	4919      	ldr	r1, [pc, #100]	; (80010d0 <main+0x10c>)
 800106a:	481a      	ldr	r0, [pc, #104]	; (80010d4 <main+0x110>)
 800106c:	f00a fbad 	bl	800b7ca <xTaskCreate>
  xTaskCreate(TaskReadGyro, "running branje in pisanje gyro", configMINIMAL_STACK_SIZE, NULL, 1, NULL);
 8001070:	2300      	movs	r3, #0
 8001072:	9301      	str	r3, [sp, #4]
 8001074:	2301      	movs	r3, #1
 8001076:	9300      	str	r3, [sp, #0]
 8001078:	2300      	movs	r3, #0
 800107a:	2280      	movs	r2, #128	; 0x80
 800107c:	4916      	ldr	r1, [pc, #88]	; (80010d8 <main+0x114>)
 800107e:	4817      	ldr	r0, [pc, #92]	; (80010dc <main+0x118>)
 8001080:	f00a fba3 	bl	800b7ca <xTaskCreate>
  xTaskCreate(TaskReadAccel, "running branje in pisanje accel", configMINIMAL_STACK_SIZE, NULL, 1, NULL);
 8001084:	2300      	movs	r3, #0
 8001086:	9301      	str	r3, [sp, #4]
 8001088:	2301      	movs	r3, #1
 800108a:	9300      	str	r3, [sp, #0]
 800108c:	2300      	movs	r3, #0
 800108e:	2280      	movs	r2, #128	; 0x80
 8001090:	4913      	ldr	r1, [pc, #76]	; (80010e0 <main+0x11c>)
 8001092:	4814      	ldr	r0, [pc, #80]	; (80010e4 <main+0x120>)
 8001094:	f00a fb99 	bl	800b7ca <xTaskCreate>
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  xEventGroup = xEventGroupCreate();
 8001098:	f009 fbca 	bl	800a830 <xEventGroupCreate>
 800109c:	4603      	mov	r3, r0
 800109e:	4a12      	ldr	r2, [pc, #72]	; (80010e8 <main+0x124>)
 80010a0:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80010a2:	f009 fabd 	bl	800a620 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010a6:	e7fe      	b.n	80010a6 <main+0xe2>
 80010a8:	2000016c 	.word	0x2000016c
 80010ac:	200001c0 	.word	0x200001c0
 80010b0:	40021000 	.word	0x40021000
 80010b4:	20000264 	.word	0x20000264
 80010b8:	20000268 	.word	0x20000268
 80010bc:	0800e550 	.word	0x0800e550
 80010c0:	08001519 	.word	0x08001519
 80010c4:	2000025c 	.word	0x2000025c
 80010c8:	0800e468 	.word	0x0800e468
 80010cc:	08000ee1 	.word	0x08000ee1
 80010d0:	0800e48c 	.word	0x0800e48c
 80010d4:	08000f59 	.word	0x08000f59
 80010d8:	0800e4b0 	.word	0x0800e4b0
 80010dc:	08000d49 	.word	0x08000d49
 80010e0:	0800e4d0 	.word	0x0800e4d0
 80010e4:	08000dd1 	.word	0x08000dd1
 80010e8:	2000026c 	.word	0x2000026c

080010ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b094      	sub	sp, #80	; 0x50
 80010f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010f2:	f107 0320 	add.w	r3, r7, #32
 80010f6:	2230      	movs	r2, #48	; 0x30
 80010f8:	2100      	movs	r1, #0
 80010fa:	4618      	mov	r0, r3
 80010fc:	f00d f8b8 	bl	800e270 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001100:	f107 030c 	add.w	r3, r7, #12
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	605a      	str	r2, [r3, #4]
 800110a:	609a      	str	r2, [r3, #8]
 800110c:	60da      	str	r2, [r3, #12]
 800110e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001110:	2300      	movs	r3, #0
 8001112:	60bb      	str	r3, [r7, #8]
 8001114:	4b27      	ldr	r3, [pc, #156]	; (80011b4 <SystemClock_Config+0xc8>)
 8001116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001118:	4a26      	ldr	r2, [pc, #152]	; (80011b4 <SystemClock_Config+0xc8>)
 800111a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800111e:	6413      	str	r3, [r2, #64]	; 0x40
 8001120:	4b24      	ldr	r3, [pc, #144]	; (80011b4 <SystemClock_Config+0xc8>)
 8001122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001124:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001128:	60bb      	str	r3, [r7, #8]
 800112a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800112c:	2300      	movs	r3, #0
 800112e:	607b      	str	r3, [r7, #4]
 8001130:	4b21      	ldr	r3, [pc, #132]	; (80011b8 <SystemClock_Config+0xcc>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a20      	ldr	r2, [pc, #128]	; (80011b8 <SystemClock_Config+0xcc>)
 8001136:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800113a:	6013      	str	r3, [r2, #0]
 800113c:	4b1e      	ldr	r3, [pc, #120]	; (80011b8 <SystemClock_Config+0xcc>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001144:	607b      	str	r3, [r7, #4]
 8001146:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001148:	2301      	movs	r3, #1
 800114a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800114c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001150:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001152:	2302      	movs	r3, #2
 8001154:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001156:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800115a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800115c:	2304      	movs	r3, #4
 800115e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001160:	2348      	movs	r3, #72	; 0x48
 8001162:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001164:	2302      	movs	r3, #2
 8001166:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001168:	2303      	movs	r3, #3
 800116a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800116c:	f107 0320 	add.w	r3, r7, #32
 8001170:	4618      	mov	r0, r3
 8001172:	f003 f9d1 	bl	8004518 <HAL_RCC_OscConfig>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800117c:	f000 f9e8 	bl	8001550 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001180:	230f      	movs	r3, #15
 8001182:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001184:	2302      	movs	r3, #2
 8001186:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001188:	2300      	movs	r3, #0
 800118a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800118c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001190:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001192:	2300      	movs	r3, #0
 8001194:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001196:	f107 030c 	add.w	r3, r7, #12
 800119a:	2102      	movs	r1, #2
 800119c:	4618      	mov	r0, r3
 800119e:	f003 fc33 	bl	8004a08 <HAL_RCC_ClockConfig>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80011a8:	f000 f9d2 	bl	8001550 <Error_Handler>
  }
}
 80011ac:	bf00      	nop
 80011ae:	3750      	adds	r7, #80	; 0x50
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	40023800 	.word	0x40023800
 80011b8:	40007000 	.word	0x40007000

080011bc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011c0:	4b13      	ldr	r3, [pc, #76]	; (8001210 <MX_I2C1_Init+0x54>)
 80011c2:	4a14      	ldr	r2, [pc, #80]	; (8001214 <MX_I2C1_Init+0x58>)
 80011c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80011c6:	4b12      	ldr	r3, [pc, #72]	; (8001210 <MX_I2C1_Init+0x54>)
 80011c8:	4a13      	ldr	r2, [pc, #76]	; (8001218 <MX_I2C1_Init+0x5c>)
 80011ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_16_9;
 80011cc:	4b10      	ldr	r3, [pc, #64]	; (8001210 <MX_I2C1_Init+0x54>)
 80011ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011d2:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80011d4:	4b0e      	ldr	r3, [pc, #56]	; (8001210 <MX_I2C1_Init+0x54>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011da:	4b0d      	ldr	r3, [pc, #52]	; (8001210 <MX_I2C1_Init+0x54>)
 80011dc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011e0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011e2:	4b0b      	ldr	r3, [pc, #44]	; (8001210 <MX_I2C1_Init+0x54>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80011e8:	4b09      	ldr	r3, [pc, #36]	; (8001210 <MX_I2C1_Init+0x54>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011ee:	4b08      	ldr	r3, [pc, #32]	; (8001210 <MX_I2C1_Init+0x54>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011f4:	4b06      	ldr	r3, [pc, #24]	; (8001210 <MX_I2C1_Init+0x54>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011fa:	4805      	ldr	r0, [pc, #20]	; (8001210 <MX_I2C1_Init+0x54>)
 80011fc:	f000 ff50 	bl	80020a0 <HAL_I2C_Init>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 8001206:	f000 f9a3 	bl	8001550 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800120a:	bf00      	nop
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	2000016c 	.word	0x2000016c
 8001214:	40005400 	.word	0x40005400
 8001218:	00061a80 	.word	0x00061a80

0800121c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001220:	4b17      	ldr	r3, [pc, #92]	; (8001280 <MX_SPI1_Init+0x64>)
 8001222:	4a18      	ldr	r2, [pc, #96]	; (8001284 <MX_SPI1_Init+0x68>)
 8001224:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001226:	4b16      	ldr	r3, [pc, #88]	; (8001280 <MX_SPI1_Init+0x64>)
 8001228:	f44f 7282 	mov.w	r2, #260	; 0x104
 800122c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800122e:	4b14      	ldr	r3, [pc, #80]	; (8001280 <MX_SPI1_Init+0x64>)
 8001230:	2200      	movs	r2, #0
 8001232:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001234:	4b12      	ldr	r3, [pc, #72]	; (8001280 <MX_SPI1_Init+0x64>)
 8001236:	2200      	movs	r2, #0
 8001238:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800123a:	4b11      	ldr	r3, [pc, #68]	; (8001280 <MX_SPI1_Init+0x64>)
 800123c:	2202      	movs	r2, #2
 800123e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001240:	4b0f      	ldr	r3, [pc, #60]	; (8001280 <MX_SPI1_Init+0x64>)
 8001242:	2201      	movs	r2, #1
 8001244:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001246:	4b0e      	ldr	r3, [pc, #56]	; (8001280 <MX_SPI1_Init+0x64>)
 8001248:	f44f 7200 	mov.w	r2, #512	; 0x200
 800124c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800124e:	4b0c      	ldr	r3, [pc, #48]	; (8001280 <MX_SPI1_Init+0x64>)
 8001250:	2218      	movs	r2, #24
 8001252:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001254:	4b0a      	ldr	r3, [pc, #40]	; (8001280 <MX_SPI1_Init+0x64>)
 8001256:	2200      	movs	r2, #0
 8001258:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800125a:	4b09      	ldr	r3, [pc, #36]	; (8001280 <MX_SPI1_Init+0x64>)
 800125c:	2200      	movs	r2, #0
 800125e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001260:	4b07      	ldr	r3, [pc, #28]	; (8001280 <MX_SPI1_Init+0x64>)
 8001262:	2200      	movs	r2, #0
 8001264:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001266:	4b06      	ldr	r3, [pc, #24]	; (8001280 <MX_SPI1_Init+0x64>)
 8001268:	220a      	movs	r2, #10
 800126a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800126c:	4804      	ldr	r0, [pc, #16]	; (8001280 <MX_SPI1_Init+0x64>)
 800126e:	f003 fe1d 	bl	8004eac <HAL_SPI_Init>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001278:	f000 f96a 	bl	8001550 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800127c:	bf00      	nop
 800127e:	bd80      	pop	{r7, pc}
 8001280:	200001c0 	.word	0x200001c0
 8001284:	40013000 	.word	0x40013000

08001288 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800128c:	4b11      	ldr	r3, [pc, #68]	; (80012d4 <MX_USART2_UART_Init+0x4c>)
 800128e:	4a12      	ldr	r2, [pc, #72]	; (80012d8 <MX_USART2_UART_Init+0x50>)
 8001290:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001292:	4b10      	ldr	r3, [pc, #64]	; (80012d4 <MX_USART2_UART_Init+0x4c>)
 8001294:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001298:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800129a:	4b0e      	ldr	r3, [pc, #56]	; (80012d4 <MX_USART2_UART_Init+0x4c>)
 800129c:	2200      	movs	r2, #0
 800129e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012a0:	4b0c      	ldr	r3, [pc, #48]	; (80012d4 <MX_USART2_UART_Init+0x4c>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012a6:	4b0b      	ldr	r3, [pc, #44]	; (80012d4 <MX_USART2_UART_Init+0x4c>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012ac:	4b09      	ldr	r3, [pc, #36]	; (80012d4 <MX_USART2_UART_Init+0x4c>)
 80012ae:	220c      	movs	r2, #12
 80012b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012b2:	4b08      	ldr	r3, [pc, #32]	; (80012d4 <MX_USART2_UART_Init+0x4c>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012b8:	4b06      	ldr	r3, [pc, #24]	; (80012d4 <MX_USART2_UART_Init+0x4c>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012be:	4805      	ldr	r0, [pc, #20]	; (80012d4 <MX_USART2_UART_Init+0x4c>)
 80012c0:	f004 fe1c 	bl	8005efc <HAL_UART_Init>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80012ca:	f000 f941 	bl	8001550 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012ce:	bf00      	nop
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	20000218 	.word	0x20000218
 80012d8:	40004400 	.word	0x40004400

080012dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b08c      	sub	sp, #48	; 0x30
 80012e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e2:	f107 031c 	add.w	r3, r7, #28
 80012e6:	2200      	movs	r2, #0
 80012e8:	601a      	str	r2, [r3, #0]
 80012ea:	605a      	str	r2, [r3, #4]
 80012ec:	609a      	str	r2, [r3, #8]
 80012ee:	60da      	str	r2, [r3, #12]
 80012f0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80012f2:	2300      	movs	r3, #0
 80012f4:	61bb      	str	r3, [r7, #24]
 80012f6:	4b82      	ldr	r3, [pc, #520]	; (8001500 <MX_GPIO_Init+0x224>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fa:	4a81      	ldr	r2, [pc, #516]	; (8001500 <MX_GPIO_Init+0x224>)
 80012fc:	f043 0310 	orr.w	r3, r3, #16
 8001300:	6313      	str	r3, [r2, #48]	; 0x30
 8001302:	4b7f      	ldr	r3, [pc, #508]	; (8001500 <MX_GPIO_Init+0x224>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001306:	f003 0310 	and.w	r3, r3, #16
 800130a:	61bb      	str	r3, [r7, #24]
 800130c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800130e:	2300      	movs	r3, #0
 8001310:	617b      	str	r3, [r7, #20]
 8001312:	4b7b      	ldr	r3, [pc, #492]	; (8001500 <MX_GPIO_Init+0x224>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001316:	4a7a      	ldr	r2, [pc, #488]	; (8001500 <MX_GPIO_Init+0x224>)
 8001318:	f043 0304 	orr.w	r3, r3, #4
 800131c:	6313      	str	r3, [r2, #48]	; 0x30
 800131e:	4b78      	ldr	r3, [pc, #480]	; (8001500 <MX_GPIO_Init+0x224>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001322:	f003 0304 	and.w	r3, r3, #4
 8001326:	617b      	str	r3, [r7, #20]
 8001328:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800132a:	2300      	movs	r3, #0
 800132c:	613b      	str	r3, [r7, #16]
 800132e:	4b74      	ldr	r3, [pc, #464]	; (8001500 <MX_GPIO_Init+0x224>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001332:	4a73      	ldr	r2, [pc, #460]	; (8001500 <MX_GPIO_Init+0x224>)
 8001334:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001338:	6313      	str	r3, [r2, #48]	; 0x30
 800133a:	4b71      	ldr	r3, [pc, #452]	; (8001500 <MX_GPIO_Init+0x224>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001342:	613b      	str	r3, [r7, #16]
 8001344:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001346:	2300      	movs	r3, #0
 8001348:	60fb      	str	r3, [r7, #12]
 800134a:	4b6d      	ldr	r3, [pc, #436]	; (8001500 <MX_GPIO_Init+0x224>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134e:	4a6c      	ldr	r2, [pc, #432]	; (8001500 <MX_GPIO_Init+0x224>)
 8001350:	f043 0301 	orr.w	r3, r3, #1
 8001354:	6313      	str	r3, [r2, #48]	; 0x30
 8001356:	4b6a      	ldr	r3, [pc, #424]	; (8001500 <MX_GPIO_Init+0x224>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135a:	f003 0301 	and.w	r3, r3, #1
 800135e:	60fb      	str	r3, [r7, #12]
 8001360:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001362:	2300      	movs	r3, #0
 8001364:	60bb      	str	r3, [r7, #8]
 8001366:	4b66      	ldr	r3, [pc, #408]	; (8001500 <MX_GPIO_Init+0x224>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136a:	4a65      	ldr	r2, [pc, #404]	; (8001500 <MX_GPIO_Init+0x224>)
 800136c:	f043 0302 	orr.w	r3, r3, #2
 8001370:	6313      	str	r3, [r2, #48]	; 0x30
 8001372:	4b63      	ldr	r3, [pc, #396]	; (8001500 <MX_GPIO_Init+0x224>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001376:	f003 0302 	and.w	r3, r3, #2
 800137a:	60bb      	str	r3, [r7, #8]
 800137c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800137e:	2300      	movs	r3, #0
 8001380:	607b      	str	r3, [r7, #4]
 8001382:	4b5f      	ldr	r3, [pc, #380]	; (8001500 <MX_GPIO_Init+0x224>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001386:	4a5e      	ldr	r2, [pc, #376]	; (8001500 <MX_GPIO_Init+0x224>)
 8001388:	f043 0308 	orr.w	r3, r3, #8
 800138c:	6313      	str	r3, [r2, #48]	; 0x30
 800138e:	4b5c      	ldr	r3, [pc, #368]	; (8001500 <MX_GPIO_Init+0x224>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001392:	f003 0308 	and.w	r3, r3, #8
 8001396:	607b      	str	r3, [r7, #4]
 8001398:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800139a:	2200      	movs	r2, #0
 800139c:	2108      	movs	r1, #8
 800139e:	4859      	ldr	r0, [pc, #356]	; (8001504 <MX_GPIO_Init+0x228>)
 80013a0:	f000 fe64 	bl	800206c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80013a4:	2201      	movs	r2, #1
 80013a6:	2101      	movs	r1, #1
 80013a8:	4857      	ldr	r0, [pc, #348]	; (8001508 <MX_GPIO_Init+0x22c>)
 80013aa:	f000 fe5f 	bl	800206c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80013ae:	2200      	movs	r2, #0
 80013b0:	f24f 0110 	movw	r1, #61456	; 0xf010
 80013b4:	4855      	ldr	r0, [pc, #340]	; (800150c <MX_GPIO_Init+0x230>)
 80013b6:	f000 fe59 	bl	800206c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80013ba:	2304      	movs	r3, #4
 80013bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013be:	2300      	movs	r3, #0
 80013c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c2:	2300      	movs	r3, #0
 80013c4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013c6:	f107 031c 	add.w	r3, r7, #28
 80013ca:	4619      	mov	r1, r3
 80013cc:	484d      	ldr	r0, [pc, #308]	; (8001504 <MX_GPIO_Init+0x228>)
 80013ce:	f000 fcc9 	bl	8001d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80013d2:	2308      	movs	r3, #8
 80013d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013d6:	2301      	movs	r3, #1
 80013d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013da:	2300      	movs	r3, #0
 80013dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013de:	2302      	movs	r3, #2
 80013e0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80013e2:	f107 031c 	add.w	r3, r7, #28
 80013e6:	4619      	mov	r1, r3
 80013e8:	4846      	ldr	r0, [pc, #280]	; (8001504 <MX_GPIO_Init+0x228>)
 80013ea:	f000 fcbb 	bl	8001d64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE4 PE5 MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|MEMS_INT2_Pin;
 80013ee:	2332      	movs	r3, #50	; 0x32
 80013f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80013f2:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80013f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f8:	2300      	movs	r3, #0
 80013fa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013fc:	f107 031c 	add.w	r3, r7, #28
 8001400:	4619      	mov	r1, r3
 8001402:	4840      	ldr	r0, [pc, #256]	; (8001504 <MX_GPIO_Init+0x228>)
 8001404:	f000 fcae 	bl	8001d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001408:	2301      	movs	r3, #1
 800140a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800140c:	2301      	movs	r3, #1
 800140e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001410:	2300      	movs	r3, #0
 8001412:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001414:	2300      	movs	r3, #0
 8001416:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001418:	f107 031c 	add.w	r3, r7, #28
 800141c:	4619      	mov	r1, r3
 800141e:	483a      	ldr	r0, [pc, #232]	; (8001508 <MX_GPIO_Init+0x22c>)
 8001420:	f000 fca0 	bl	8001d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001424:	2308      	movs	r3, #8
 8001426:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001428:	2302      	movs	r3, #2
 800142a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142c:	2300      	movs	r3, #0
 800142e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001430:	2300      	movs	r3, #0
 8001432:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001434:	2305      	movs	r3, #5
 8001436:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001438:	f107 031c 	add.w	r3, r7, #28
 800143c:	4619      	mov	r1, r3
 800143e:	4832      	ldr	r0, [pc, #200]	; (8001508 <MX_GPIO_Init+0x22c>)
 8001440:	f000 fc90 	bl	8001d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001444:	2301      	movs	r3, #1
 8001446:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001448:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800144c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144e:	2300      	movs	r3, #0
 8001450:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001452:	f107 031c 	add.w	r3, r7, #28
 8001456:	4619      	mov	r1, r3
 8001458:	482d      	ldr	r0, [pc, #180]	; (8001510 <MX_GPIO_Init+0x234>)
 800145a:	f000 fc83 	bl	8001d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800145e:	2310      	movs	r3, #16
 8001460:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001462:	2302      	movs	r3, #2
 8001464:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001466:	2300      	movs	r3, #0
 8001468:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800146a:	2300      	movs	r3, #0
 800146c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800146e:	2306      	movs	r3, #6
 8001470:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001472:	f107 031c 	add.w	r3, r7, #28
 8001476:	4619      	mov	r1, r3
 8001478:	4825      	ldr	r0, [pc, #148]	; (8001510 <MX_GPIO_Init+0x234>)
 800147a:	f000 fc73 	bl	8001d64 <HAL_GPIO_Init>

  /*Configure GPIO pins : CLK_IN_Pin PB12 */
  GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 800147e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001482:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001484:	2302      	movs	r3, #2
 8001486:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001488:	2300      	movs	r3, #0
 800148a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800148c:	2300      	movs	r3, #0
 800148e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001490:	2305      	movs	r3, #5
 8001492:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001494:	f107 031c 	add.w	r3, r7, #28
 8001498:	4619      	mov	r1, r3
 800149a:	481e      	ldr	r0, [pc, #120]	; (8001514 <MX_GPIO_Init+0x238>)
 800149c:	f000 fc62 	bl	8001d64 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80014a0:	f24f 0310 	movw	r3, #61456	; 0xf010
 80014a4:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014a6:	2301      	movs	r3, #1
 80014a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014aa:	2300      	movs	r3, #0
 80014ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ae:	2300      	movs	r3, #0
 80014b0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014b2:	f107 031c 	add.w	r3, r7, #28
 80014b6:	4619      	mov	r1, r3
 80014b8:	4814      	ldr	r0, [pc, #80]	; (800150c <MX_GPIO_Init+0x230>)
 80014ba:	f000 fc53 	bl	8001d64 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80014be:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80014c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c4:	2302      	movs	r3, #2
 80014c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c8:	2300      	movs	r3, #0
 80014ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014cc:	2300      	movs	r3, #0
 80014ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80014d0:	2306      	movs	r3, #6
 80014d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014d4:	f107 031c 	add.w	r3, r7, #28
 80014d8:	4619      	mov	r1, r3
 80014da:	480b      	ldr	r0, [pc, #44]	; (8001508 <MX_GPIO_Init+0x22c>)
 80014dc:	f000 fc42 	bl	8001d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80014e0:	2320      	movs	r3, #32
 80014e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014e4:	2300      	movs	r3, #0
 80014e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e8:	2300      	movs	r3, #0
 80014ea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80014ec:	f107 031c 	add.w	r3, r7, #28
 80014f0:	4619      	mov	r1, r3
 80014f2:	4806      	ldr	r0, [pc, #24]	; (800150c <MX_GPIO_Init+0x230>)
 80014f4:	f000 fc36 	bl	8001d64 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014f8:	bf00      	nop
 80014fa:	3730      	adds	r7, #48	; 0x30
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	40023800 	.word	0x40023800
 8001504:	40021000 	.word	0x40021000
 8001508:	40020800 	.word	0x40020800
 800150c:	40020c00 	.word	0x40020c00
 8001510:	40020000 	.word	0x40020000
 8001514:	40020400 	.word	0x40020400

08001518 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8001520:	f00c f988 	bl	800d834 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001524:	2001      	movs	r0, #1
 8001526:	f009 f933 	bl	800a790 <osDelay>
 800152a:	e7fb      	b.n	8001524 <StartDefaultTask+0xc>

0800152c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a04      	ldr	r2, [pc, #16]	; (800154c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d101      	bne.n	8001542 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800153e:	f000 fa59 	bl	80019f4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001542:	bf00      	nop
 8001544:	3708      	adds	r7, #8
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	40000800 	.word	0x40000800

08001550 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001554:	b672      	cpsid	i
}
 8001556:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001558:	e7fe      	b.n	8001558 <Error_Handler+0x8>
	...

0800155c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001562:	2300      	movs	r3, #0
 8001564:	607b      	str	r3, [r7, #4]
 8001566:	4b12      	ldr	r3, [pc, #72]	; (80015b0 <HAL_MspInit+0x54>)
 8001568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800156a:	4a11      	ldr	r2, [pc, #68]	; (80015b0 <HAL_MspInit+0x54>)
 800156c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001570:	6453      	str	r3, [r2, #68]	; 0x44
 8001572:	4b0f      	ldr	r3, [pc, #60]	; (80015b0 <HAL_MspInit+0x54>)
 8001574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001576:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800157a:	607b      	str	r3, [r7, #4]
 800157c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800157e:	2300      	movs	r3, #0
 8001580:	603b      	str	r3, [r7, #0]
 8001582:	4b0b      	ldr	r3, [pc, #44]	; (80015b0 <HAL_MspInit+0x54>)
 8001584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001586:	4a0a      	ldr	r2, [pc, #40]	; (80015b0 <HAL_MspInit+0x54>)
 8001588:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800158c:	6413      	str	r3, [r2, #64]	; 0x40
 800158e:	4b08      	ldr	r3, [pc, #32]	; (80015b0 <HAL_MspInit+0x54>)
 8001590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001592:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001596:	603b      	str	r3, [r7, #0]
 8001598:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800159a:	2200      	movs	r2, #0
 800159c:	210f      	movs	r1, #15
 800159e:	f06f 0001 	mvn.w	r0, #1
 80015a2:	f000 fb23 	bl	8001bec <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015a6:	bf00      	nop
 80015a8:	3708      	adds	r7, #8
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	40023800 	.word	0x40023800

080015b4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b08a      	sub	sp, #40	; 0x28
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015bc:	f107 0314 	add.w	r3, r7, #20
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	605a      	str	r2, [r3, #4]
 80015c6:	609a      	str	r2, [r3, #8]
 80015c8:	60da      	str	r2, [r3, #12]
 80015ca:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a19      	ldr	r2, [pc, #100]	; (8001638 <HAL_I2C_MspInit+0x84>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d12c      	bne.n	8001630 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015d6:	2300      	movs	r3, #0
 80015d8:	613b      	str	r3, [r7, #16]
 80015da:	4b18      	ldr	r3, [pc, #96]	; (800163c <HAL_I2C_MspInit+0x88>)
 80015dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015de:	4a17      	ldr	r2, [pc, #92]	; (800163c <HAL_I2C_MspInit+0x88>)
 80015e0:	f043 0302 	orr.w	r3, r3, #2
 80015e4:	6313      	str	r3, [r2, #48]	; 0x30
 80015e6:	4b15      	ldr	r3, [pc, #84]	; (800163c <HAL_I2C_MspInit+0x88>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ea:	f003 0302 	and.w	r3, r3, #2
 80015ee:	613b      	str	r3, [r7, #16]
 80015f0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80015f2:	f44f 7310 	mov.w	r3, #576	; 0x240
 80015f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015f8:	2312      	movs	r3, #18
 80015fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fc:	2300      	movs	r3, #0
 80015fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001600:	2300      	movs	r3, #0
 8001602:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001604:	2304      	movs	r3, #4
 8001606:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001608:	f107 0314 	add.w	r3, r7, #20
 800160c:	4619      	mov	r1, r3
 800160e:	480c      	ldr	r0, [pc, #48]	; (8001640 <HAL_I2C_MspInit+0x8c>)
 8001610:	f000 fba8 	bl	8001d64 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001614:	2300      	movs	r3, #0
 8001616:	60fb      	str	r3, [r7, #12]
 8001618:	4b08      	ldr	r3, [pc, #32]	; (800163c <HAL_I2C_MspInit+0x88>)
 800161a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161c:	4a07      	ldr	r2, [pc, #28]	; (800163c <HAL_I2C_MspInit+0x88>)
 800161e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001622:	6413      	str	r3, [r2, #64]	; 0x40
 8001624:	4b05      	ldr	r3, [pc, #20]	; (800163c <HAL_I2C_MspInit+0x88>)
 8001626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001628:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800162c:	60fb      	str	r3, [r7, #12]
 800162e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001630:	bf00      	nop
 8001632:	3728      	adds	r7, #40	; 0x28
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	40005400 	.word	0x40005400
 800163c:	40023800 	.word	0x40023800
 8001640:	40020400 	.word	0x40020400

08001644 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b08a      	sub	sp, #40	; 0x28
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800164c:	f107 0314 	add.w	r3, r7, #20
 8001650:	2200      	movs	r2, #0
 8001652:	601a      	str	r2, [r3, #0]
 8001654:	605a      	str	r2, [r3, #4]
 8001656:	609a      	str	r2, [r3, #8]
 8001658:	60da      	str	r2, [r3, #12]
 800165a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a19      	ldr	r2, [pc, #100]	; (80016c8 <HAL_SPI_MspInit+0x84>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d12b      	bne.n	80016be <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001666:	2300      	movs	r3, #0
 8001668:	613b      	str	r3, [r7, #16]
 800166a:	4b18      	ldr	r3, [pc, #96]	; (80016cc <HAL_SPI_MspInit+0x88>)
 800166c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800166e:	4a17      	ldr	r2, [pc, #92]	; (80016cc <HAL_SPI_MspInit+0x88>)
 8001670:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001674:	6453      	str	r3, [r2, #68]	; 0x44
 8001676:	4b15      	ldr	r3, [pc, #84]	; (80016cc <HAL_SPI_MspInit+0x88>)
 8001678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800167a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800167e:	613b      	str	r3, [r7, #16]
 8001680:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001682:	2300      	movs	r3, #0
 8001684:	60fb      	str	r3, [r7, #12]
 8001686:	4b11      	ldr	r3, [pc, #68]	; (80016cc <HAL_SPI_MspInit+0x88>)
 8001688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168a:	4a10      	ldr	r2, [pc, #64]	; (80016cc <HAL_SPI_MspInit+0x88>)
 800168c:	f043 0301 	orr.w	r3, r3, #1
 8001690:	6313      	str	r3, [r2, #48]	; 0x30
 8001692:	4b0e      	ldr	r3, [pc, #56]	; (80016cc <HAL_SPI_MspInit+0x88>)
 8001694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001696:	f003 0301 	and.w	r3, r3, #1
 800169a:	60fb      	str	r3, [r7, #12]
 800169c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800169e:	23e0      	movs	r3, #224	; 0xe0
 80016a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a2:	2302      	movs	r3, #2
 80016a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a6:	2300      	movs	r3, #0
 80016a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016aa:	2303      	movs	r3, #3
 80016ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80016ae:	2305      	movs	r3, #5
 80016b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016b2:	f107 0314 	add.w	r3, r7, #20
 80016b6:	4619      	mov	r1, r3
 80016b8:	4805      	ldr	r0, [pc, #20]	; (80016d0 <HAL_SPI_MspInit+0x8c>)
 80016ba:	f000 fb53 	bl	8001d64 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80016be:	bf00      	nop
 80016c0:	3728      	adds	r7, #40	; 0x28
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	40013000 	.word	0x40013000
 80016cc:	40023800 	.word	0x40023800
 80016d0:	40020000 	.word	0x40020000

080016d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b08a      	sub	sp, #40	; 0x28
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016dc:	f107 0314 	add.w	r3, r7, #20
 80016e0:	2200      	movs	r2, #0
 80016e2:	601a      	str	r2, [r3, #0]
 80016e4:	605a      	str	r2, [r3, #4]
 80016e6:	609a      	str	r2, [r3, #8]
 80016e8:	60da      	str	r2, [r3, #12]
 80016ea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a1d      	ldr	r2, [pc, #116]	; (8001768 <HAL_UART_MspInit+0x94>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d133      	bne.n	800175e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016f6:	2300      	movs	r3, #0
 80016f8:	613b      	str	r3, [r7, #16]
 80016fa:	4b1c      	ldr	r3, [pc, #112]	; (800176c <HAL_UART_MspInit+0x98>)
 80016fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fe:	4a1b      	ldr	r2, [pc, #108]	; (800176c <HAL_UART_MspInit+0x98>)
 8001700:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001704:	6413      	str	r3, [r2, #64]	; 0x40
 8001706:	4b19      	ldr	r3, [pc, #100]	; (800176c <HAL_UART_MspInit+0x98>)
 8001708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800170e:	613b      	str	r3, [r7, #16]
 8001710:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001712:	2300      	movs	r3, #0
 8001714:	60fb      	str	r3, [r7, #12]
 8001716:	4b15      	ldr	r3, [pc, #84]	; (800176c <HAL_UART_MspInit+0x98>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171a:	4a14      	ldr	r2, [pc, #80]	; (800176c <HAL_UART_MspInit+0x98>)
 800171c:	f043 0301 	orr.w	r3, r3, #1
 8001720:	6313      	str	r3, [r2, #48]	; 0x30
 8001722:	4b12      	ldr	r3, [pc, #72]	; (800176c <HAL_UART_MspInit+0x98>)
 8001724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001726:	f003 0301 	and.w	r3, r3, #1
 800172a:	60fb      	str	r3, [r7, #12]
 800172c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800172e:	230c      	movs	r3, #12
 8001730:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001732:	2302      	movs	r3, #2
 8001734:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001736:	2300      	movs	r3, #0
 8001738:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800173a:	2303      	movs	r3, #3
 800173c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800173e:	2307      	movs	r3, #7
 8001740:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001742:	f107 0314 	add.w	r3, r7, #20
 8001746:	4619      	mov	r1, r3
 8001748:	4809      	ldr	r0, [pc, #36]	; (8001770 <HAL_UART_MspInit+0x9c>)
 800174a:	f000 fb0b 	bl	8001d64 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800174e:	2200      	movs	r2, #0
 8001750:	2105      	movs	r1, #5
 8001752:	2026      	movs	r0, #38	; 0x26
 8001754:	f000 fa4a 	bl	8001bec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001758:	2026      	movs	r0, #38	; 0x26
 800175a:	f000 fa63 	bl	8001c24 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800175e:	bf00      	nop
 8001760:	3728      	adds	r7, #40	; 0x28
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	40004400 	.word	0x40004400
 800176c:	40023800 	.word	0x40023800
 8001770:	40020000 	.word	0x40020000

08001774 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b08e      	sub	sp, #56	; 0x38
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800177c:	2300      	movs	r3, #0
 800177e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001780:	2300      	movs	r3, #0
 8001782:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001784:	2300      	movs	r3, #0
 8001786:	60fb      	str	r3, [r7, #12]
 8001788:	4b33      	ldr	r3, [pc, #204]	; (8001858 <HAL_InitTick+0xe4>)
 800178a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178c:	4a32      	ldr	r2, [pc, #200]	; (8001858 <HAL_InitTick+0xe4>)
 800178e:	f043 0304 	orr.w	r3, r3, #4
 8001792:	6413      	str	r3, [r2, #64]	; 0x40
 8001794:	4b30      	ldr	r3, [pc, #192]	; (8001858 <HAL_InitTick+0xe4>)
 8001796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001798:	f003 0304 	and.w	r3, r3, #4
 800179c:	60fb      	str	r3, [r7, #12]
 800179e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80017a0:	f107 0210 	add.w	r2, r7, #16
 80017a4:	f107 0314 	add.w	r3, r7, #20
 80017a8:	4611      	mov	r1, r2
 80017aa:	4618      	mov	r0, r3
 80017ac:	f003 fb4c 	bl	8004e48 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80017b0:	6a3b      	ldr	r3, [r7, #32]
 80017b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80017b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d103      	bne.n	80017c2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80017ba:	f003 fb1d 	bl	8004df8 <HAL_RCC_GetPCLK1Freq>
 80017be:	6378      	str	r0, [r7, #52]	; 0x34
 80017c0:	e004      	b.n	80017cc <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80017c2:	f003 fb19 	bl	8004df8 <HAL_RCC_GetPCLK1Freq>
 80017c6:	4603      	mov	r3, r0
 80017c8:	005b      	lsls	r3, r3, #1
 80017ca:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80017cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017ce:	4a23      	ldr	r2, [pc, #140]	; (800185c <HAL_InitTick+0xe8>)
 80017d0:	fba2 2303 	umull	r2, r3, r2, r3
 80017d4:	0c9b      	lsrs	r3, r3, #18
 80017d6:	3b01      	subs	r3, #1
 80017d8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80017da:	4b21      	ldr	r3, [pc, #132]	; (8001860 <HAL_InitTick+0xec>)
 80017dc:	4a21      	ldr	r2, [pc, #132]	; (8001864 <HAL_InitTick+0xf0>)
 80017de:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80017e0:	4b1f      	ldr	r3, [pc, #124]	; (8001860 <HAL_InitTick+0xec>)
 80017e2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80017e6:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80017e8:	4a1d      	ldr	r2, [pc, #116]	; (8001860 <HAL_InitTick+0xec>)
 80017ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017ec:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80017ee:	4b1c      	ldr	r3, [pc, #112]	; (8001860 <HAL_InitTick+0xec>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017f4:	4b1a      	ldr	r3, [pc, #104]	; (8001860 <HAL_InitTick+0xec>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017fa:	4b19      	ldr	r3, [pc, #100]	; (8001860 <HAL_InitTick+0xec>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8001800:	4817      	ldr	r0, [pc, #92]	; (8001860 <HAL_InitTick+0xec>)
 8001802:	f004 f8fb 	bl	80059fc <HAL_TIM_Base_Init>
 8001806:	4603      	mov	r3, r0
 8001808:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800180c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001810:	2b00      	cmp	r3, #0
 8001812:	d11b      	bne.n	800184c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8001814:	4812      	ldr	r0, [pc, #72]	; (8001860 <HAL_InitTick+0xec>)
 8001816:	f004 f94b 	bl	8005ab0 <HAL_TIM_Base_Start_IT>
 800181a:	4603      	mov	r3, r0
 800181c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001820:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001824:	2b00      	cmp	r3, #0
 8001826:	d111      	bne.n	800184c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001828:	201e      	movs	r0, #30
 800182a:	f000 f9fb 	bl	8001c24 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2b0f      	cmp	r3, #15
 8001832:	d808      	bhi.n	8001846 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8001834:	2200      	movs	r2, #0
 8001836:	6879      	ldr	r1, [r7, #4]
 8001838:	201e      	movs	r0, #30
 800183a:	f000 f9d7 	bl	8001bec <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800183e:	4a0a      	ldr	r2, [pc, #40]	; (8001868 <HAL_InitTick+0xf4>)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6013      	str	r3, [r2, #0]
 8001844:	e002      	b.n	800184c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800184c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001850:	4618      	mov	r0, r3
 8001852:	3738      	adds	r7, #56	; 0x38
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	40023800 	.word	0x40023800
 800185c:	431bde83 	.word	0x431bde83
 8001860:	20000270 	.word	0x20000270
 8001864:	40000800 	.word	0x40000800
 8001868:	20000004 	.word	0x20000004

0800186c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001870:	e7fe      	b.n	8001870 <NMI_Handler+0x4>

08001872 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001872:	b480      	push	{r7}
 8001874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001876:	e7fe      	b.n	8001876 <HardFault_Handler+0x4>

08001878 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800187c:	e7fe      	b.n	800187c <MemManage_Handler+0x4>

0800187e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800187e:	b480      	push	{r7}
 8001880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001882:	e7fe      	b.n	8001882 <BusFault_Handler+0x4>

08001884 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001888:	e7fe      	b.n	8001888 <UsageFault_Handler+0x4>

0800188a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800188a:	b480      	push	{r7}
 800188c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800188e:	bf00      	nop
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr

08001898 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800189c:	4802      	ldr	r0, [pc, #8]	; (80018a8 <TIM4_IRQHandler+0x10>)
 800189e:	f004 f969 	bl	8005b74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80018a2:	bf00      	nop
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	20000270 	.word	0x20000270

080018ac <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80018ac:	b590      	push	{r4, r7, lr}
 80018ae:	b085      	sub	sp, #20
 80018b0:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN USART2_IRQn 0 */
USART_QUEUE_RX_ISR_SNIPPET
 80018b2:	4b19      	ldr	r3, [pc, #100]	; (8001918 <USART2_IRQHandler+0x6c>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 0320 	and.w	r3, r3, #32
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d025      	beq.n	800190a <USART2_IRQHandler+0x5e>
 80018be:	4b16      	ldr	r3, [pc, #88]	; (8001918 <USART2_IRQHandler+0x6c>)
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	b2db      	uxtb	r3, r3
 80018c4:	4618      	mov	r0, r3
 80018c6:	f00b ff69 	bl	800d79c <rx_queue_put>
 80018ca:	4b13      	ldr	r3, [pc, #76]	; (8001918 <USART2_IRQHandler+0x6c>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a12      	ldr	r2, [pc, #72]	; (8001918 <USART2_IRQHandler+0x6c>)
 80018d0:	f023 0320 	bic.w	r3, r3, #32
 80018d4:	6013      	str	r3, [r2, #0]
 80018d6:	2300      	movs	r3, #0
 80018d8:	607b      	str	r3, [r7, #4]
 80018da:	f00b ff9f 	bl	800d81c <getTaskHandle>
 80018de:	4604      	mov	r4, r0
 80018e0:	f00b ff7e 	bl	800d7e0 <count>
 80018e4:	4601      	mov	r1, r0
 80018e6:	1d3b      	adds	r3, r7, #4
 80018e8:	9300      	str	r3, [sp, #0]
 80018ea:	2300      	movs	r3, #0
 80018ec:	2203      	movs	r2, #3
 80018ee:	4620      	mov	r0, r4
 80018f0:	f00a fe98 	bl	800c624 <xTaskGenericNotifyFromISR>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d007      	beq.n	800190a <USART2_IRQHandler+0x5e>
 80018fa:	4b08      	ldr	r3, [pc, #32]	; (800191c <USART2_IRQHandler+0x70>)
 80018fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001900:	601a      	str	r2, [r3, #0]
 8001902:	f3bf 8f4f 	dsb	sy
 8001906:	f3bf 8f6f 	isb	sy
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800190a:	4805      	ldr	r0, [pc, #20]	; (8001920 <USART2_IRQHandler+0x74>)
 800190c:	f004 fb44 	bl	8005f98 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001910:	bf00      	nop
 8001912:	370c      	adds	r7, #12
 8001914:	46bd      	mov	sp, r7
 8001916:	bd90      	pop	{r4, r7, pc}
 8001918:	40004400 	.word	0x40004400
 800191c:	e000ed04 	.word	0xe000ed04
 8001920:	20000218 	.word	0x20000218

08001924 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001928:	4802      	ldr	r0, [pc, #8]	; (8001934 <OTG_FS_IRQHandler+0x10>)
 800192a:	f001 fcc8 	bl	80032be <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800192e:	bf00      	nop
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	2000658c 	.word	0x2000658c

08001938 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800193c:	4b06      	ldr	r3, [pc, #24]	; (8001958 <SystemInit+0x20>)
 800193e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001942:	4a05      	ldr	r2, [pc, #20]	; (8001958 <SystemInit+0x20>)
 8001944:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001948:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800194c:	bf00      	nop
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	e000ed00 	.word	0xe000ed00

0800195c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800195c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001994 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001960:	480d      	ldr	r0, [pc, #52]	; (8001998 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001962:	490e      	ldr	r1, [pc, #56]	; (800199c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001964:	4a0e      	ldr	r2, [pc, #56]	; (80019a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001966:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001968:	e002      	b.n	8001970 <LoopCopyDataInit>

0800196a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800196a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800196c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800196e:	3304      	adds	r3, #4

08001970 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001970:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001972:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001974:	d3f9      	bcc.n	800196a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001976:	4a0b      	ldr	r2, [pc, #44]	; (80019a4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001978:	4c0b      	ldr	r4, [pc, #44]	; (80019a8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800197a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800197c:	e001      	b.n	8001982 <LoopFillZerobss>

0800197e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800197e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001980:	3204      	adds	r2, #4

08001982 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001982:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001984:	d3fb      	bcc.n	800197e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001986:	f7ff ffd7 	bl	8001938 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800198a:	f00c fccf 	bl	800e32c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800198e:	f7ff fb19 	bl	8000fc4 <main>
  bx  lr    
 8001992:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001994:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001998:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800199c:	20000150 	.word	0x20000150
  ldr r2, =_sidata
 80019a0:	0800e59c 	.word	0x0800e59c
  ldr r2, =_sbss
 80019a4:	20000150 	.word	0x20000150
  ldr r4, =_ebss
 80019a8:	20006df8 	.word	0x20006df8

080019ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019ac:	e7fe      	b.n	80019ac <ADC_IRQHandler>
	...

080019b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019b4:	4b0e      	ldr	r3, [pc, #56]	; (80019f0 <HAL_Init+0x40>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a0d      	ldr	r2, [pc, #52]	; (80019f0 <HAL_Init+0x40>)
 80019ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019c0:	4b0b      	ldr	r3, [pc, #44]	; (80019f0 <HAL_Init+0x40>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a0a      	ldr	r2, [pc, #40]	; (80019f0 <HAL_Init+0x40>)
 80019c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019cc:	4b08      	ldr	r3, [pc, #32]	; (80019f0 <HAL_Init+0x40>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a07      	ldr	r2, [pc, #28]	; (80019f0 <HAL_Init+0x40>)
 80019d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019d8:	2003      	movs	r0, #3
 80019da:	f000 f8fc 	bl	8001bd6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019de:	200f      	movs	r0, #15
 80019e0:	f7ff fec8 	bl	8001774 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019e4:	f7ff fdba 	bl	800155c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019e8:	2300      	movs	r3, #0
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	40023c00 	.word	0x40023c00

080019f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019f8:	4b06      	ldr	r3, [pc, #24]	; (8001a14 <HAL_IncTick+0x20>)
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	461a      	mov	r2, r3
 80019fe:	4b06      	ldr	r3, [pc, #24]	; (8001a18 <HAL_IncTick+0x24>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4413      	add	r3, r2
 8001a04:	4a04      	ldr	r2, [pc, #16]	; (8001a18 <HAL_IncTick+0x24>)
 8001a06:	6013      	str	r3, [r2, #0]
}
 8001a08:	bf00      	nop
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	20000008 	.word	0x20000008
 8001a18:	200002b8 	.word	0x200002b8

08001a1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  return uwTick;
 8001a20:	4b03      	ldr	r3, [pc, #12]	; (8001a30 <HAL_GetTick+0x14>)
 8001a22:	681b      	ldr	r3, [r3, #0]
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	200002b8 	.word	0x200002b8

08001a34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b084      	sub	sp, #16
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a3c:	f7ff ffee 	bl	8001a1c <HAL_GetTick>
 8001a40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a4c:	d005      	beq.n	8001a5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a4e:	4b0a      	ldr	r3, [pc, #40]	; (8001a78 <HAL_Delay+0x44>)
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	461a      	mov	r2, r3
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	4413      	add	r3, r2
 8001a58:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a5a:	bf00      	nop
 8001a5c:	f7ff ffde 	bl	8001a1c <HAL_GetTick>
 8001a60:	4602      	mov	r2, r0
 8001a62:	68bb      	ldr	r3, [r7, #8]
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	68fa      	ldr	r2, [r7, #12]
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d8f7      	bhi.n	8001a5c <HAL_Delay+0x28>
  {
  }
}
 8001a6c:	bf00      	nop
 8001a6e:	bf00      	nop
 8001a70:	3710      	adds	r7, #16
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	20000008 	.word	0x20000008

08001a7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b085      	sub	sp, #20
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	f003 0307 	and.w	r3, r3, #7
 8001a8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a8c:	4b0c      	ldr	r3, [pc, #48]	; (8001ac0 <__NVIC_SetPriorityGrouping+0x44>)
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a92:	68ba      	ldr	r2, [r7, #8]
 8001a94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a98:	4013      	ands	r3, r2
 8001a9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001aa4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001aa8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001aac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001aae:	4a04      	ldr	r2, [pc, #16]	; (8001ac0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	60d3      	str	r3, [r2, #12]
}
 8001ab4:	bf00      	nop
 8001ab6:	3714      	adds	r7, #20
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr
 8001ac0:	e000ed00 	.word	0xe000ed00

08001ac4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ac8:	4b04      	ldr	r3, [pc, #16]	; (8001adc <__NVIC_GetPriorityGrouping+0x18>)
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	0a1b      	lsrs	r3, r3, #8
 8001ace:	f003 0307 	and.w	r3, r3, #7
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr
 8001adc:	e000ed00 	.word	0xe000ed00

08001ae0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b083      	sub	sp, #12
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	db0b      	blt.n	8001b0a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001af2:	79fb      	ldrb	r3, [r7, #7]
 8001af4:	f003 021f 	and.w	r2, r3, #31
 8001af8:	4907      	ldr	r1, [pc, #28]	; (8001b18 <__NVIC_EnableIRQ+0x38>)
 8001afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001afe:	095b      	lsrs	r3, r3, #5
 8001b00:	2001      	movs	r0, #1
 8001b02:	fa00 f202 	lsl.w	r2, r0, r2
 8001b06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b0a:	bf00      	nop
 8001b0c:	370c      	adds	r7, #12
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	e000e100 	.word	0xe000e100

08001b1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	4603      	mov	r3, r0
 8001b24:	6039      	str	r1, [r7, #0]
 8001b26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	db0a      	blt.n	8001b46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	b2da      	uxtb	r2, r3
 8001b34:	490c      	ldr	r1, [pc, #48]	; (8001b68 <__NVIC_SetPriority+0x4c>)
 8001b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b3a:	0112      	lsls	r2, r2, #4
 8001b3c:	b2d2      	uxtb	r2, r2
 8001b3e:	440b      	add	r3, r1
 8001b40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b44:	e00a      	b.n	8001b5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	b2da      	uxtb	r2, r3
 8001b4a:	4908      	ldr	r1, [pc, #32]	; (8001b6c <__NVIC_SetPriority+0x50>)
 8001b4c:	79fb      	ldrb	r3, [r7, #7]
 8001b4e:	f003 030f 	and.w	r3, r3, #15
 8001b52:	3b04      	subs	r3, #4
 8001b54:	0112      	lsls	r2, r2, #4
 8001b56:	b2d2      	uxtb	r2, r2
 8001b58:	440b      	add	r3, r1
 8001b5a:	761a      	strb	r2, [r3, #24]
}
 8001b5c:	bf00      	nop
 8001b5e:	370c      	adds	r7, #12
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr
 8001b68:	e000e100 	.word	0xe000e100
 8001b6c:	e000ed00 	.word	0xe000ed00

08001b70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b089      	sub	sp, #36	; 0x24
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	60f8      	str	r0, [r7, #12]
 8001b78:	60b9      	str	r1, [r7, #8]
 8001b7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	f003 0307 	and.w	r3, r3, #7
 8001b82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b84:	69fb      	ldr	r3, [r7, #28]
 8001b86:	f1c3 0307 	rsb	r3, r3, #7
 8001b8a:	2b04      	cmp	r3, #4
 8001b8c:	bf28      	it	cs
 8001b8e:	2304      	movcs	r3, #4
 8001b90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	3304      	adds	r3, #4
 8001b96:	2b06      	cmp	r3, #6
 8001b98:	d902      	bls.n	8001ba0 <NVIC_EncodePriority+0x30>
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	3b03      	subs	r3, #3
 8001b9e:	e000      	b.n	8001ba2 <NVIC_EncodePriority+0x32>
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ba4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ba8:	69bb      	ldr	r3, [r7, #24]
 8001baa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bae:	43da      	mvns	r2, r3
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	401a      	ands	r2, r3
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bb8:	f04f 31ff 	mov.w	r1, #4294967295
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	fa01 f303 	lsl.w	r3, r1, r3
 8001bc2:	43d9      	mvns	r1, r3
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bc8:	4313      	orrs	r3, r2
         );
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3724      	adds	r7, #36	; 0x24
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr

08001bd6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bd6:	b580      	push	{r7, lr}
 8001bd8:	b082      	sub	sp, #8
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f7ff ff4c 	bl	8001a7c <__NVIC_SetPriorityGrouping>
}
 8001be4:	bf00      	nop
 8001be6:	3708      	adds	r7, #8
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}

08001bec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b086      	sub	sp, #24
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	60b9      	str	r1, [r7, #8]
 8001bf6:	607a      	str	r2, [r7, #4]
 8001bf8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bfe:	f7ff ff61 	bl	8001ac4 <__NVIC_GetPriorityGrouping>
 8001c02:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c04:	687a      	ldr	r2, [r7, #4]
 8001c06:	68b9      	ldr	r1, [r7, #8]
 8001c08:	6978      	ldr	r0, [r7, #20]
 8001c0a:	f7ff ffb1 	bl	8001b70 <NVIC_EncodePriority>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c14:	4611      	mov	r1, r2
 8001c16:	4618      	mov	r0, r3
 8001c18:	f7ff ff80 	bl	8001b1c <__NVIC_SetPriority>
}
 8001c1c:	bf00      	nop
 8001c1e:	3718      	adds	r7, #24
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}

08001c24 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c32:	4618      	mov	r0, r3
 8001c34:	f7ff ff54 	bl	8001ae0 <__NVIC_EnableIRQ>
}
 8001c38:	bf00      	nop
 8001c3a:	3708      	adds	r7, #8
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}

08001c40 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b084      	sub	sp, #16
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c4c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001c4e:	f7ff fee5 	bl	8001a1c <HAL_GetTick>
 8001c52:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c5a:	b2db      	uxtb	r3, r3
 8001c5c:	2b02      	cmp	r3, #2
 8001c5e:	d008      	beq.n	8001c72 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2280      	movs	r2, #128	; 0x80
 8001c64:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e052      	b.n	8001d18 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f022 0216 	bic.w	r2, r2, #22
 8001c80:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	695a      	ldr	r2, [r3, #20]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c90:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d103      	bne.n	8001ca2 <HAL_DMA_Abort+0x62>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d007      	beq.n	8001cb2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f022 0208 	bic.w	r2, r2, #8
 8001cb0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f022 0201 	bic.w	r2, r2, #1
 8001cc0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cc2:	e013      	b.n	8001cec <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001cc4:	f7ff feaa 	bl	8001a1c <HAL_GetTick>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	2b05      	cmp	r3, #5
 8001cd0:	d90c      	bls.n	8001cec <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2220      	movs	r2, #32
 8001cd6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2203      	movs	r2, #3
 8001cdc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001ce8:	2303      	movs	r3, #3
 8001cea:	e015      	b.n	8001d18 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 0301 	and.w	r3, r3, #1
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d1e4      	bne.n	8001cc4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cfe:	223f      	movs	r2, #63	; 0x3f
 8001d00:	409a      	lsls	r2, r3
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2201      	movs	r2, #1
 8001d0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2200      	movs	r2, #0
 8001d12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001d16:	2300      	movs	r3, #0
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3710      	adds	r7, #16
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}

08001d20 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d2e:	b2db      	uxtb	r3, r3
 8001d30:	2b02      	cmp	r3, #2
 8001d32:	d004      	beq.n	8001d3e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2280      	movs	r2, #128	; 0x80
 8001d38:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e00c      	b.n	8001d58 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2205      	movs	r2, #5
 8001d42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f022 0201 	bic.w	r2, r2, #1
 8001d54:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001d56:	2300      	movs	r3, #0
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	370c      	adds	r7, #12
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr

08001d64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b089      	sub	sp, #36	; 0x24
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d72:	2300      	movs	r3, #0
 8001d74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d76:	2300      	movs	r3, #0
 8001d78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	61fb      	str	r3, [r7, #28]
 8001d7e:	e159      	b.n	8002034 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d80:	2201      	movs	r2, #1
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	fa02 f303 	lsl.w	r3, r2, r3
 8001d88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	697a      	ldr	r2, [r7, #20]
 8001d90:	4013      	ands	r3, r2
 8001d92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d94:	693a      	ldr	r2, [r7, #16]
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	f040 8148 	bne.w	800202e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	f003 0303 	and.w	r3, r3, #3
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d005      	beq.n	8001db6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001db2:	2b02      	cmp	r3, #2
 8001db4:	d130      	bne.n	8001e18 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	005b      	lsls	r3, r3, #1
 8001dc0:	2203      	movs	r2, #3
 8001dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc6:	43db      	mvns	r3, r3
 8001dc8:	69ba      	ldr	r2, [r7, #24]
 8001dca:	4013      	ands	r3, r2
 8001dcc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	68da      	ldr	r2, [r3, #12]
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	005b      	lsls	r3, r3, #1
 8001dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dda:	69ba      	ldr	r2, [r7, #24]
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	69ba      	ldr	r2, [r7, #24]
 8001de4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001dec:	2201      	movs	r2, #1
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	fa02 f303 	lsl.w	r3, r2, r3
 8001df4:	43db      	mvns	r3, r3
 8001df6:	69ba      	ldr	r2, [r7, #24]
 8001df8:	4013      	ands	r3, r2
 8001dfa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	091b      	lsrs	r3, r3, #4
 8001e02:	f003 0201 	and.w	r2, r3, #1
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0c:	69ba      	ldr	r2, [r7, #24]
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	69ba      	ldr	r2, [r7, #24]
 8001e16:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f003 0303 	and.w	r3, r3, #3
 8001e20:	2b03      	cmp	r3, #3
 8001e22:	d017      	beq.n	8001e54 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	005b      	lsls	r3, r3, #1
 8001e2e:	2203      	movs	r2, #3
 8001e30:	fa02 f303 	lsl.w	r3, r2, r3
 8001e34:	43db      	mvns	r3, r3
 8001e36:	69ba      	ldr	r2, [r7, #24]
 8001e38:	4013      	ands	r3, r2
 8001e3a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	689a      	ldr	r2, [r3, #8]
 8001e40:	69fb      	ldr	r3, [r7, #28]
 8001e42:	005b      	lsls	r3, r3, #1
 8001e44:	fa02 f303 	lsl.w	r3, r2, r3
 8001e48:	69ba      	ldr	r2, [r7, #24]
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	69ba      	ldr	r2, [r7, #24]
 8001e52:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f003 0303 	and.w	r3, r3, #3
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d123      	bne.n	8001ea8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e60:	69fb      	ldr	r3, [r7, #28]
 8001e62:	08da      	lsrs	r2, r3, #3
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	3208      	adds	r2, #8
 8001e68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	f003 0307 	and.w	r3, r3, #7
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	220f      	movs	r2, #15
 8001e78:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7c:	43db      	mvns	r3, r3
 8001e7e:	69ba      	ldr	r2, [r7, #24]
 8001e80:	4013      	ands	r3, r2
 8001e82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	691a      	ldr	r2, [r3, #16]
 8001e88:	69fb      	ldr	r3, [r7, #28]
 8001e8a:	f003 0307 	and.w	r3, r3, #7
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	fa02 f303 	lsl.w	r3, r2, r3
 8001e94:	69ba      	ldr	r2, [r7, #24]
 8001e96:	4313      	orrs	r3, r2
 8001e98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	08da      	lsrs	r2, r3, #3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	3208      	adds	r2, #8
 8001ea2:	69b9      	ldr	r1, [r7, #24]
 8001ea4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	005b      	lsls	r3, r3, #1
 8001eb2:	2203      	movs	r2, #3
 8001eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb8:	43db      	mvns	r3, r3
 8001eba:	69ba      	ldr	r2, [r7, #24]
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f003 0203 	and.w	r2, r3, #3
 8001ec8:	69fb      	ldr	r3, [r7, #28]
 8001eca:	005b      	lsls	r3, r3, #1
 8001ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed0:	69ba      	ldr	r2, [r7, #24]
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	69ba      	ldr	r2, [r7, #24]
 8001eda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	f000 80a2 	beq.w	800202e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eea:	2300      	movs	r3, #0
 8001eec:	60fb      	str	r3, [r7, #12]
 8001eee:	4b57      	ldr	r3, [pc, #348]	; (800204c <HAL_GPIO_Init+0x2e8>)
 8001ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef2:	4a56      	ldr	r2, [pc, #344]	; (800204c <HAL_GPIO_Init+0x2e8>)
 8001ef4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ef8:	6453      	str	r3, [r2, #68]	; 0x44
 8001efa:	4b54      	ldr	r3, [pc, #336]	; (800204c <HAL_GPIO_Init+0x2e8>)
 8001efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001efe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f02:	60fb      	str	r3, [r7, #12]
 8001f04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f06:	4a52      	ldr	r2, [pc, #328]	; (8002050 <HAL_GPIO_Init+0x2ec>)
 8001f08:	69fb      	ldr	r3, [r7, #28]
 8001f0a:	089b      	lsrs	r3, r3, #2
 8001f0c:	3302      	adds	r3, #2
 8001f0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f14:	69fb      	ldr	r3, [r7, #28]
 8001f16:	f003 0303 	and.w	r3, r3, #3
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	220f      	movs	r2, #15
 8001f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f22:	43db      	mvns	r3, r3
 8001f24:	69ba      	ldr	r2, [r7, #24]
 8001f26:	4013      	ands	r3, r2
 8001f28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4a49      	ldr	r2, [pc, #292]	; (8002054 <HAL_GPIO_Init+0x2f0>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d019      	beq.n	8001f66 <HAL_GPIO_Init+0x202>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4a48      	ldr	r2, [pc, #288]	; (8002058 <HAL_GPIO_Init+0x2f4>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d013      	beq.n	8001f62 <HAL_GPIO_Init+0x1fe>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4a47      	ldr	r2, [pc, #284]	; (800205c <HAL_GPIO_Init+0x2f8>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d00d      	beq.n	8001f5e <HAL_GPIO_Init+0x1fa>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4a46      	ldr	r2, [pc, #280]	; (8002060 <HAL_GPIO_Init+0x2fc>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d007      	beq.n	8001f5a <HAL_GPIO_Init+0x1f6>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4a45      	ldr	r2, [pc, #276]	; (8002064 <HAL_GPIO_Init+0x300>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d101      	bne.n	8001f56 <HAL_GPIO_Init+0x1f2>
 8001f52:	2304      	movs	r3, #4
 8001f54:	e008      	b.n	8001f68 <HAL_GPIO_Init+0x204>
 8001f56:	2307      	movs	r3, #7
 8001f58:	e006      	b.n	8001f68 <HAL_GPIO_Init+0x204>
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	e004      	b.n	8001f68 <HAL_GPIO_Init+0x204>
 8001f5e:	2302      	movs	r3, #2
 8001f60:	e002      	b.n	8001f68 <HAL_GPIO_Init+0x204>
 8001f62:	2301      	movs	r3, #1
 8001f64:	e000      	b.n	8001f68 <HAL_GPIO_Init+0x204>
 8001f66:	2300      	movs	r3, #0
 8001f68:	69fa      	ldr	r2, [r7, #28]
 8001f6a:	f002 0203 	and.w	r2, r2, #3
 8001f6e:	0092      	lsls	r2, r2, #2
 8001f70:	4093      	lsls	r3, r2
 8001f72:	69ba      	ldr	r2, [r7, #24]
 8001f74:	4313      	orrs	r3, r2
 8001f76:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f78:	4935      	ldr	r1, [pc, #212]	; (8002050 <HAL_GPIO_Init+0x2ec>)
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	089b      	lsrs	r3, r3, #2
 8001f7e:	3302      	adds	r3, #2
 8001f80:	69ba      	ldr	r2, [r7, #24]
 8001f82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f86:	4b38      	ldr	r3, [pc, #224]	; (8002068 <HAL_GPIO_Init+0x304>)
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	43db      	mvns	r3, r3
 8001f90:	69ba      	ldr	r2, [r7, #24]
 8001f92:	4013      	ands	r3, r2
 8001f94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d003      	beq.n	8001faa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001fa2:	69ba      	ldr	r2, [r7, #24]
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001faa:	4a2f      	ldr	r2, [pc, #188]	; (8002068 <HAL_GPIO_Init+0x304>)
 8001fac:	69bb      	ldr	r3, [r7, #24]
 8001fae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fb0:	4b2d      	ldr	r3, [pc, #180]	; (8002068 <HAL_GPIO_Init+0x304>)
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	43db      	mvns	r3, r3
 8001fba:	69ba      	ldr	r2, [r7, #24]
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d003      	beq.n	8001fd4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001fcc:	69ba      	ldr	r2, [r7, #24]
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001fd4:	4a24      	ldr	r2, [pc, #144]	; (8002068 <HAL_GPIO_Init+0x304>)
 8001fd6:	69bb      	ldr	r3, [r7, #24]
 8001fd8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001fda:	4b23      	ldr	r3, [pc, #140]	; (8002068 <HAL_GPIO_Init+0x304>)
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	43db      	mvns	r3, r3
 8001fe4:	69ba      	ldr	r2, [r7, #24]
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d003      	beq.n	8001ffe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001ff6:	69ba      	ldr	r2, [r7, #24]
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ffe:	4a1a      	ldr	r2, [pc, #104]	; (8002068 <HAL_GPIO_Init+0x304>)
 8002000:	69bb      	ldr	r3, [r7, #24]
 8002002:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002004:	4b18      	ldr	r3, [pc, #96]	; (8002068 <HAL_GPIO_Init+0x304>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	43db      	mvns	r3, r3
 800200e:	69ba      	ldr	r2, [r7, #24]
 8002010:	4013      	ands	r3, r2
 8002012:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800201c:	2b00      	cmp	r3, #0
 800201e:	d003      	beq.n	8002028 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002020:	69ba      	ldr	r2, [r7, #24]
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	4313      	orrs	r3, r2
 8002026:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002028:	4a0f      	ldr	r2, [pc, #60]	; (8002068 <HAL_GPIO_Init+0x304>)
 800202a:	69bb      	ldr	r3, [r7, #24]
 800202c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	3301      	adds	r3, #1
 8002032:	61fb      	str	r3, [r7, #28]
 8002034:	69fb      	ldr	r3, [r7, #28]
 8002036:	2b0f      	cmp	r3, #15
 8002038:	f67f aea2 	bls.w	8001d80 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800203c:	bf00      	nop
 800203e:	bf00      	nop
 8002040:	3724      	adds	r7, #36	; 0x24
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr
 800204a:	bf00      	nop
 800204c:	40023800 	.word	0x40023800
 8002050:	40013800 	.word	0x40013800
 8002054:	40020000 	.word	0x40020000
 8002058:	40020400 	.word	0x40020400
 800205c:	40020800 	.word	0x40020800
 8002060:	40020c00 	.word	0x40020c00
 8002064:	40021000 	.word	0x40021000
 8002068:	40013c00 	.word	0x40013c00

0800206c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	460b      	mov	r3, r1
 8002076:	807b      	strh	r3, [r7, #2]
 8002078:	4613      	mov	r3, r2
 800207a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800207c:	787b      	ldrb	r3, [r7, #1]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d003      	beq.n	800208a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002082:	887a      	ldrh	r2, [r7, #2]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002088:	e003      	b.n	8002092 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800208a:	887b      	ldrh	r3, [r7, #2]
 800208c:	041a      	lsls	r2, r3, #16
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	619a      	str	r2, [r3, #24]
}
 8002092:	bf00      	nop
 8002094:	370c      	adds	r7, #12
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr
	...

080020a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b084      	sub	sp, #16
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d101      	bne.n	80020b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e12b      	b.n	800230a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d106      	bne.n	80020cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2200      	movs	r2, #0
 80020c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f7ff fa74 	bl	80015b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2224      	movs	r2, #36	; 0x24
 80020d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f022 0201 	bic.w	r2, r2, #1
 80020e2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80020f2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002102:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002104:	f002 fe78 	bl	8004df8 <HAL_RCC_GetPCLK1Freq>
 8002108:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	4a81      	ldr	r2, [pc, #516]	; (8002314 <HAL_I2C_Init+0x274>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d807      	bhi.n	8002124 <HAL_I2C_Init+0x84>
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	4a80      	ldr	r2, [pc, #512]	; (8002318 <HAL_I2C_Init+0x278>)
 8002118:	4293      	cmp	r3, r2
 800211a:	bf94      	ite	ls
 800211c:	2301      	movls	r3, #1
 800211e:	2300      	movhi	r3, #0
 8002120:	b2db      	uxtb	r3, r3
 8002122:	e006      	b.n	8002132 <HAL_I2C_Init+0x92>
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	4a7d      	ldr	r2, [pc, #500]	; (800231c <HAL_I2C_Init+0x27c>)
 8002128:	4293      	cmp	r3, r2
 800212a:	bf94      	ite	ls
 800212c:	2301      	movls	r3, #1
 800212e:	2300      	movhi	r3, #0
 8002130:	b2db      	uxtb	r3, r3
 8002132:	2b00      	cmp	r3, #0
 8002134:	d001      	beq.n	800213a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e0e7      	b.n	800230a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	4a78      	ldr	r2, [pc, #480]	; (8002320 <HAL_I2C_Init+0x280>)
 800213e:	fba2 2303 	umull	r2, r3, r2, r3
 8002142:	0c9b      	lsrs	r3, r3, #18
 8002144:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	68ba      	ldr	r2, [r7, #8]
 8002156:	430a      	orrs	r2, r1
 8002158:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	6a1b      	ldr	r3, [r3, #32]
 8002160:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	4a6a      	ldr	r2, [pc, #424]	; (8002314 <HAL_I2C_Init+0x274>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d802      	bhi.n	8002174 <HAL_I2C_Init+0xd4>
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	3301      	adds	r3, #1
 8002172:	e009      	b.n	8002188 <HAL_I2C_Init+0xe8>
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800217a:	fb02 f303 	mul.w	r3, r2, r3
 800217e:	4a69      	ldr	r2, [pc, #420]	; (8002324 <HAL_I2C_Init+0x284>)
 8002180:	fba2 2303 	umull	r2, r3, r2, r3
 8002184:	099b      	lsrs	r3, r3, #6
 8002186:	3301      	adds	r3, #1
 8002188:	687a      	ldr	r2, [r7, #4]
 800218a:	6812      	ldr	r2, [r2, #0]
 800218c:	430b      	orrs	r3, r1
 800218e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	69db      	ldr	r3, [r3, #28]
 8002196:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800219a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	495c      	ldr	r1, [pc, #368]	; (8002314 <HAL_I2C_Init+0x274>)
 80021a4:	428b      	cmp	r3, r1
 80021a6:	d819      	bhi.n	80021dc <HAL_I2C_Init+0x13c>
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	1e59      	subs	r1, r3, #1
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	005b      	lsls	r3, r3, #1
 80021b2:	fbb1 f3f3 	udiv	r3, r1, r3
 80021b6:	1c59      	adds	r1, r3, #1
 80021b8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80021bc:	400b      	ands	r3, r1
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d00a      	beq.n	80021d8 <HAL_I2C_Init+0x138>
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	1e59      	subs	r1, r3, #1
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	005b      	lsls	r3, r3, #1
 80021cc:	fbb1 f3f3 	udiv	r3, r1, r3
 80021d0:	3301      	adds	r3, #1
 80021d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021d6:	e051      	b.n	800227c <HAL_I2C_Init+0x1dc>
 80021d8:	2304      	movs	r3, #4
 80021da:	e04f      	b.n	800227c <HAL_I2C_Init+0x1dc>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d111      	bne.n	8002208 <HAL_I2C_Init+0x168>
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	1e58      	subs	r0, r3, #1
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6859      	ldr	r1, [r3, #4]
 80021ec:	460b      	mov	r3, r1
 80021ee:	005b      	lsls	r3, r3, #1
 80021f0:	440b      	add	r3, r1
 80021f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80021f6:	3301      	adds	r3, #1
 80021f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	bf0c      	ite	eq
 8002200:	2301      	moveq	r3, #1
 8002202:	2300      	movne	r3, #0
 8002204:	b2db      	uxtb	r3, r3
 8002206:	e012      	b.n	800222e <HAL_I2C_Init+0x18e>
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	1e58      	subs	r0, r3, #1
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6859      	ldr	r1, [r3, #4]
 8002210:	460b      	mov	r3, r1
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	440b      	add	r3, r1
 8002216:	0099      	lsls	r1, r3, #2
 8002218:	440b      	add	r3, r1
 800221a:	fbb0 f3f3 	udiv	r3, r0, r3
 800221e:	3301      	adds	r3, #1
 8002220:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002224:	2b00      	cmp	r3, #0
 8002226:	bf0c      	ite	eq
 8002228:	2301      	moveq	r3, #1
 800222a:	2300      	movne	r3, #0
 800222c:	b2db      	uxtb	r3, r3
 800222e:	2b00      	cmp	r3, #0
 8002230:	d001      	beq.n	8002236 <HAL_I2C_Init+0x196>
 8002232:	2301      	movs	r3, #1
 8002234:	e022      	b.n	800227c <HAL_I2C_Init+0x1dc>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d10e      	bne.n	800225c <HAL_I2C_Init+0x1bc>
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	1e58      	subs	r0, r3, #1
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6859      	ldr	r1, [r3, #4]
 8002246:	460b      	mov	r3, r1
 8002248:	005b      	lsls	r3, r3, #1
 800224a:	440b      	add	r3, r1
 800224c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002250:	3301      	adds	r3, #1
 8002252:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002256:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800225a:	e00f      	b.n	800227c <HAL_I2C_Init+0x1dc>
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	1e58      	subs	r0, r3, #1
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6859      	ldr	r1, [r3, #4]
 8002264:	460b      	mov	r3, r1
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	440b      	add	r3, r1
 800226a:	0099      	lsls	r1, r3, #2
 800226c:	440b      	add	r3, r1
 800226e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002272:	3301      	adds	r3, #1
 8002274:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002278:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800227c:	6879      	ldr	r1, [r7, #4]
 800227e:	6809      	ldr	r1, [r1, #0]
 8002280:	4313      	orrs	r3, r2
 8002282:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	69da      	ldr	r2, [r3, #28]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6a1b      	ldr	r3, [r3, #32]
 8002296:	431a      	orrs	r2, r3
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	430a      	orrs	r2, r1
 800229e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80022aa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80022ae:	687a      	ldr	r2, [r7, #4]
 80022b0:	6911      	ldr	r1, [r2, #16]
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	68d2      	ldr	r2, [r2, #12]
 80022b6:	4311      	orrs	r1, r2
 80022b8:	687a      	ldr	r2, [r7, #4]
 80022ba:	6812      	ldr	r2, [r2, #0]
 80022bc:	430b      	orrs	r3, r1
 80022be:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	68db      	ldr	r3, [r3, #12]
 80022c6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	695a      	ldr	r2, [r3, #20]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	699b      	ldr	r3, [r3, #24]
 80022d2:	431a      	orrs	r2, r3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	430a      	orrs	r2, r1
 80022da:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f042 0201 	orr.w	r2, r2, #1
 80022ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2200      	movs	r2, #0
 80022f0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2220      	movs	r2, #32
 80022f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2200      	movs	r2, #0
 80022fe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2200      	movs	r2, #0
 8002304:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002308:	2300      	movs	r3, #0
}
 800230a:	4618      	mov	r0, r3
 800230c:	3710      	adds	r7, #16
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	000186a0 	.word	0x000186a0
 8002318:	001e847f 	.word	0x001e847f
 800231c:	003d08ff 	.word	0x003d08ff
 8002320:	431bde83 	.word	0x431bde83
 8002324:	10624dd3 	.word	0x10624dd3

08002328 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b088      	sub	sp, #32
 800232c:	af02      	add	r7, sp, #8
 800232e:	60f8      	str	r0, [r7, #12]
 8002330:	4608      	mov	r0, r1
 8002332:	4611      	mov	r1, r2
 8002334:	461a      	mov	r2, r3
 8002336:	4603      	mov	r3, r0
 8002338:	817b      	strh	r3, [r7, #10]
 800233a:	460b      	mov	r3, r1
 800233c:	813b      	strh	r3, [r7, #8]
 800233e:	4613      	mov	r3, r2
 8002340:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002342:	f7ff fb6b 	bl	8001a1c <HAL_GetTick>
 8002346:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800234e:	b2db      	uxtb	r3, r3
 8002350:	2b20      	cmp	r3, #32
 8002352:	f040 80d9 	bne.w	8002508 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	9300      	str	r3, [sp, #0]
 800235a:	2319      	movs	r3, #25
 800235c:	2201      	movs	r2, #1
 800235e:	496d      	ldr	r1, [pc, #436]	; (8002514 <HAL_I2C_Mem_Write+0x1ec>)
 8002360:	68f8      	ldr	r0, [r7, #12]
 8002362:	f000 fc7f 	bl	8002c64 <I2C_WaitOnFlagUntilTimeout>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d001      	beq.n	8002370 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800236c:	2302      	movs	r3, #2
 800236e:	e0cc      	b.n	800250a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002376:	2b01      	cmp	r3, #1
 8002378:	d101      	bne.n	800237e <HAL_I2C_Mem_Write+0x56>
 800237a:	2302      	movs	r3, #2
 800237c:	e0c5      	b.n	800250a <HAL_I2C_Mem_Write+0x1e2>
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	2201      	movs	r2, #1
 8002382:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 0301 	and.w	r3, r3, #1
 8002390:	2b01      	cmp	r3, #1
 8002392:	d007      	beq.n	80023a4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f042 0201 	orr.w	r2, r2, #1
 80023a2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023b2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	2221      	movs	r2, #33	; 0x21
 80023b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2240      	movs	r2, #64	; 0x40
 80023c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2200      	movs	r2, #0
 80023c8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	6a3a      	ldr	r2, [r7, #32]
 80023ce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80023d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023da:	b29a      	uxth	r2, r3
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	4a4d      	ldr	r2, [pc, #308]	; (8002518 <HAL_I2C_Mem_Write+0x1f0>)
 80023e4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80023e6:	88f8      	ldrh	r0, [r7, #6]
 80023e8:	893a      	ldrh	r2, [r7, #8]
 80023ea:	8979      	ldrh	r1, [r7, #10]
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	9301      	str	r3, [sp, #4]
 80023f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023f2:	9300      	str	r3, [sp, #0]
 80023f4:	4603      	mov	r3, r0
 80023f6:	68f8      	ldr	r0, [r7, #12]
 80023f8:	f000 fab6 	bl	8002968 <I2C_RequestMemoryWrite>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d052      	beq.n	80024a8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e081      	b.n	800250a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002406:	697a      	ldr	r2, [r7, #20]
 8002408:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800240a:	68f8      	ldr	r0, [r7, #12]
 800240c:	f000 fd00 	bl	8002e10 <I2C_WaitOnTXEFlagUntilTimeout>
 8002410:	4603      	mov	r3, r0
 8002412:	2b00      	cmp	r3, #0
 8002414:	d00d      	beq.n	8002432 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241a:	2b04      	cmp	r3, #4
 800241c:	d107      	bne.n	800242e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800242c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e06b      	b.n	800250a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002436:	781a      	ldrb	r2, [r3, #0]
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002442:	1c5a      	adds	r2, r3, #1
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800244c:	3b01      	subs	r3, #1
 800244e:	b29a      	uxth	r2, r3
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002458:	b29b      	uxth	r3, r3
 800245a:	3b01      	subs	r3, #1
 800245c:	b29a      	uxth	r2, r3
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	695b      	ldr	r3, [r3, #20]
 8002468:	f003 0304 	and.w	r3, r3, #4
 800246c:	2b04      	cmp	r3, #4
 800246e:	d11b      	bne.n	80024a8 <HAL_I2C_Mem_Write+0x180>
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002474:	2b00      	cmp	r3, #0
 8002476:	d017      	beq.n	80024a8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800247c:	781a      	ldrb	r2, [r3, #0]
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002488:	1c5a      	adds	r2, r3, #1
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002492:	3b01      	subs	r3, #1
 8002494:	b29a      	uxth	r2, r3
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800249e:	b29b      	uxth	r3, r3
 80024a0:	3b01      	subs	r3, #1
 80024a2:	b29a      	uxth	r2, r3
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d1aa      	bne.n	8002406 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024b0:	697a      	ldr	r2, [r7, #20]
 80024b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80024b4:	68f8      	ldr	r0, [r7, #12]
 80024b6:	f000 fcec 	bl	8002e92 <I2C_WaitOnBTFFlagUntilTimeout>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d00d      	beq.n	80024dc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c4:	2b04      	cmp	r3, #4
 80024c6:	d107      	bne.n	80024d8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024d6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	e016      	b.n	800250a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	2220      	movs	r2, #32
 80024f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2200      	movs	r2, #0
 80024f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2200      	movs	r2, #0
 8002500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002504:	2300      	movs	r3, #0
 8002506:	e000      	b.n	800250a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002508:	2302      	movs	r3, #2
  }
}
 800250a:	4618      	mov	r0, r3
 800250c:	3718      	adds	r7, #24
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	00100002 	.word	0x00100002
 8002518:	ffff0000 	.word	0xffff0000

0800251c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b08c      	sub	sp, #48	; 0x30
 8002520:	af02      	add	r7, sp, #8
 8002522:	60f8      	str	r0, [r7, #12]
 8002524:	4608      	mov	r0, r1
 8002526:	4611      	mov	r1, r2
 8002528:	461a      	mov	r2, r3
 800252a:	4603      	mov	r3, r0
 800252c:	817b      	strh	r3, [r7, #10]
 800252e:	460b      	mov	r3, r1
 8002530:	813b      	strh	r3, [r7, #8]
 8002532:	4613      	mov	r3, r2
 8002534:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002536:	f7ff fa71 	bl	8001a1c <HAL_GetTick>
 800253a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002542:	b2db      	uxtb	r3, r3
 8002544:	2b20      	cmp	r3, #32
 8002546:	f040 8208 	bne.w	800295a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800254a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254c:	9300      	str	r3, [sp, #0]
 800254e:	2319      	movs	r3, #25
 8002550:	2201      	movs	r2, #1
 8002552:	497b      	ldr	r1, [pc, #492]	; (8002740 <HAL_I2C_Mem_Read+0x224>)
 8002554:	68f8      	ldr	r0, [r7, #12]
 8002556:	f000 fb85 	bl	8002c64 <I2C_WaitOnFlagUntilTimeout>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d001      	beq.n	8002564 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002560:	2302      	movs	r3, #2
 8002562:	e1fb      	b.n	800295c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800256a:	2b01      	cmp	r3, #1
 800256c:	d101      	bne.n	8002572 <HAL_I2C_Mem_Read+0x56>
 800256e:	2302      	movs	r3, #2
 8002570:	e1f4      	b.n	800295c <HAL_I2C_Mem_Read+0x440>
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2201      	movs	r2, #1
 8002576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 0301 	and.w	r3, r3, #1
 8002584:	2b01      	cmp	r3, #1
 8002586:	d007      	beq.n	8002598 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f042 0201 	orr.w	r2, r2, #1
 8002596:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025a6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2222      	movs	r2, #34	; 0x22
 80025ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2240      	movs	r2, #64	; 0x40
 80025b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2200      	movs	r2, #0
 80025bc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025c2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80025c8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025ce:	b29a      	uxth	r2, r3
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	4a5b      	ldr	r2, [pc, #364]	; (8002744 <HAL_I2C_Mem_Read+0x228>)
 80025d8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80025da:	88f8      	ldrh	r0, [r7, #6]
 80025dc:	893a      	ldrh	r2, [r7, #8]
 80025de:	8979      	ldrh	r1, [r7, #10]
 80025e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e2:	9301      	str	r3, [sp, #4]
 80025e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025e6:	9300      	str	r3, [sp, #0]
 80025e8:	4603      	mov	r3, r0
 80025ea:	68f8      	ldr	r0, [r7, #12]
 80025ec:	f000 fa52 	bl	8002a94 <I2C_RequestMemoryRead>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d001      	beq.n	80025fa <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e1b0      	b.n	800295c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d113      	bne.n	800262a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002602:	2300      	movs	r3, #0
 8002604:	623b      	str	r3, [r7, #32]
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	695b      	ldr	r3, [r3, #20]
 800260c:	623b      	str	r3, [r7, #32]
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	699b      	ldr	r3, [r3, #24]
 8002614:	623b      	str	r3, [r7, #32]
 8002616:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002626:	601a      	str	r2, [r3, #0]
 8002628:	e184      	b.n	8002934 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800262e:	2b01      	cmp	r3, #1
 8002630:	d11b      	bne.n	800266a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002640:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002642:	2300      	movs	r3, #0
 8002644:	61fb      	str	r3, [r7, #28]
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	695b      	ldr	r3, [r3, #20]
 800264c:	61fb      	str	r3, [r7, #28]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	699b      	ldr	r3, [r3, #24]
 8002654:	61fb      	str	r3, [r7, #28]
 8002656:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002666:	601a      	str	r2, [r3, #0]
 8002668:	e164      	b.n	8002934 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800266e:	2b02      	cmp	r3, #2
 8002670:	d11b      	bne.n	80026aa <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002680:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002690:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002692:	2300      	movs	r3, #0
 8002694:	61bb      	str	r3, [r7, #24]
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	695b      	ldr	r3, [r3, #20]
 800269c:	61bb      	str	r3, [r7, #24]
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	699b      	ldr	r3, [r3, #24]
 80026a4:	61bb      	str	r3, [r7, #24]
 80026a6:	69bb      	ldr	r3, [r7, #24]
 80026a8:	e144      	b.n	8002934 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026aa:	2300      	movs	r3, #0
 80026ac:	617b      	str	r3, [r7, #20]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	695b      	ldr	r3, [r3, #20]
 80026b4:	617b      	str	r3, [r7, #20]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	699b      	ldr	r3, [r3, #24]
 80026bc:	617b      	str	r3, [r7, #20]
 80026be:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80026c0:	e138      	b.n	8002934 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026c6:	2b03      	cmp	r3, #3
 80026c8:	f200 80f1 	bhi.w	80028ae <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d123      	bne.n	800271c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026d6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80026d8:	68f8      	ldr	r0, [r7, #12]
 80026da:	f000 fc1b 	bl	8002f14 <I2C_WaitOnRXNEFlagUntilTimeout>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d001      	beq.n	80026e8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e139      	b.n	800295c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	691a      	ldr	r2, [r3, #16]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f2:	b2d2      	uxtb	r2, r2
 80026f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fa:	1c5a      	adds	r2, r3, #1
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002704:	3b01      	subs	r3, #1
 8002706:	b29a      	uxth	r2, r3
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002710:	b29b      	uxth	r3, r3
 8002712:	3b01      	subs	r3, #1
 8002714:	b29a      	uxth	r2, r3
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	855a      	strh	r2, [r3, #42]	; 0x2a
 800271a:	e10b      	b.n	8002934 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002720:	2b02      	cmp	r3, #2
 8002722:	d14e      	bne.n	80027c2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002726:	9300      	str	r3, [sp, #0]
 8002728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800272a:	2200      	movs	r2, #0
 800272c:	4906      	ldr	r1, [pc, #24]	; (8002748 <HAL_I2C_Mem_Read+0x22c>)
 800272e:	68f8      	ldr	r0, [r7, #12]
 8002730:	f000 fa98 	bl	8002c64 <I2C_WaitOnFlagUntilTimeout>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d008      	beq.n	800274c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e10e      	b.n	800295c <HAL_I2C_Mem_Read+0x440>
 800273e:	bf00      	nop
 8002740:	00100002 	.word	0x00100002
 8002744:	ffff0000 	.word	0xffff0000
 8002748:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800275a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	691a      	ldr	r2, [r3, #16]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002766:	b2d2      	uxtb	r2, r2
 8002768:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800276e:	1c5a      	adds	r2, r3, #1
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002778:	3b01      	subs	r3, #1
 800277a:	b29a      	uxth	r2, r3
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002784:	b29b      	uxth	r3, r3
 8002786:	3b01      	subs	r3, #1
 8002788:	b29a      	uxth	r2, r3
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	691a      	ldr	r2, [r3, #16]
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002798:	b2d2      	uxtb	r2, r2
 800279a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a0:	1c5a      	adds	r2, r3, #1
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027aa:	3b01      	subs	r3, #1
 80027ac:	b29a      	uxth	r2, r3
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027b6:	b29b      	uxth	r3, r3
 80027b8:	3b01      	subs	r3, #1
 80027ba:	b29a      	uxth	r2, r3
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	855a      	strh	r2, [r3, #42]	; 0x2a
 80027c0:	e0b8      	b.n	8002934 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80027c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c4:	9300      	str	r3, [sp, #0]
 80027c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027c8:	2200      	movs	r2, #0
 80027ca:	4966      	ldr	r1, [pc, #408]	; (8002964 <HAL_I2C_Mem_Read+0x448>)
 80027cc:	68f8      	ldr	r0, [r7, #12]
 80027ce:	f000 fa49 	bl	8002c64 <I2C_WaitOnFlagUntilTimeout>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d001      	beq.n	80027dc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	e0bf      	b.n	800295c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	691a      	ldr	r2, [r3, #16]
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f6:	b2d2      	uxtb	r2, r2
 80027f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027fe:	1c5a      	adds	r2, r3, #1
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002808:	3b01      	subs	r3, #1
 800280a:	b29a      	uxth	r2, r3
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002814:	b29b      	uxth	r3, r3
 8002816:	3b01      	subs	r3, #1
 8002818:	b29a      	uxth	r2, r3
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800281e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002820:	9300      	str	r3, [sp, #0]
 8002822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002824:	2200      	movs	r2, #0
 8002826:	494f      	ldr	r1, [pc, #316]	; (8002964 <HAL_I2C_Mem_Read+0x448>)
 8002828:	68f8      	ldr	r0, [r7, #12]
 800282a:	f000 fa1b 	bl	8002c64 <I2C_WaitOnFlagUntilTimeout>
 800282e:	4603      	mov	r3, r0
 8002830:	2b00      	cmp	r3, #0
 8002832:	d001      	beq.n	8002838 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	e091      	b.n	800295c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002846:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	691a      	ldr	r2, [r3, #16]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002852:	b2d2      	uxtb	r2, r2
 8002854:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800285a:	1c5a      	adds	r2, r3, #1
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002864:	3b01      	subs	r3, #1
 8002866:	b29a      	uxth	r2, r3
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002870:	b29b      	uxth	r3, r3
 8002872:	3b01      	subs	r3, #1
 8002874:	b29a      	uxth	r2, r3
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	691a      	ldr	r2, [r3, #16]
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002884:	b2d2      	uxtb	r2, r2
 8002886:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800288c:	1c5a      	adds	r2, r3, #1
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002896:	3b01      	subs	r3, #1
 8002898:	b29a      	uxth	r2, r3
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028a2:	b29b      	uxth	r3, r3
 80028a4:	3b01      	subs	r3, #1
 80028a6:	b29a      	uxth	r2, r3
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80028ac:	e042      	b.n	8002934 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028b0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80028b2:	68f8      	ldr	r0, [r7, #12]
 80028b4:	f000 fb2e 	bl	8002f14 <I2C_WaitOnRXNEFlagUntilTimeout>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d001      	beq.n	80028c2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e04c      	b.n	800295c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	691a      	ldr	r2, [r3, #16]
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028cc:	b2d2      	uxtb	r2, r2
 80028ce:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d4:	1c5a      	adds	r2, r3, #1
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028de:	3b01      	subs	r3, #1
 80028e0:	b29a      	uxth	r2, r3
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028ea:	b29b      	uxth	r3, r3
 80028ec:	3b01      	subs	r3, #1
 80028ee:	b29a      	uxth	r2, r3
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	695b      	ldr	r3, [r3, #20]
 80028fa:	f003 0304 	and.w	r3, r3, #4
 80028fe:	2b04      	cmp	r3, #4
 8002900:	d118      	bne.n	8002934 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	691a      	ldr	r2, [r3, #16]
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800290c:	b2d2      	uxtb	r2, r2
 800290e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002914:	1c5a      	adds	r2, r3, #1
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800291e:	3b01      	subs	r3, #1
 8002920:	b29a      	uxth	r2, r3
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800292a:	b29b      	uxth	r3, r3
 800292c:	3b01      	subs	r3, #1
 800292e:	b29a      	uxth	r2, r3
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002938:	2b00      	cmp	r3, #0
 800293a:	f47f aec2 	bne.w	80026c2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2220      	movs	r2, #32
 8002942:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2200      	movs	r2, #0
 800294a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2200      	movs	r2, #0
 8002952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002956:	2300      	movs	r3, #0
 8002958:	e000      	b.n	800295c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800295a:	2302      	movs	r3, #2
  }
}
 800295c:	4618      	mov	r0, r3
 800295e:	3728      	adds	r7, #40	; 0x28
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}
 8002964:	00010004 	.word	0x00010004

08002968 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b088      	sub	sp, #32
 800296c:	af02      	add	r7, sp, #8
 800296e:	60f8      	str	r0, [r7, #12]
 8002970:	4608      	mov	r0, r1
 8002972:	4611      	mov	r1, r2
 8002974:	461a      	mov	r2, r3
 8002976:	4603      	mov	r3, r0
 8002978:	817b      	strh	r3, [r7, #10]
 800297a:	460b      	mov	r3, r1
 800297c:	813b      	strh	r3, [r7, #8]
 800297e:	4613      	mov	r3, r2
 8002980:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002990:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002994:	9300      	str	r3, [sp, #0]
 8002996:	6a3b      	ldr	r3, [r7, #32]
 8002998:	2200      	movs	r2, #0
 800299a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800299e:	68f8      	ldr	r0, [r7, #12]
 80029a0:	f000 f960 	bl	8002c64 <I2C_WaitOnFlagUntilTimeout>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d00d      	beq.n	80029c6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029b8:	d103      	bne.n	80029c2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029c0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80029c2:	2303      	movs	r3, #3
 80029c4:	e05f      	b.n	8002a86 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80029c6:	897b      	ldrh	r3, [r7, #10]
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	461a      	mov	r2, r3
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80029d4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80029d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d8:	6a3a      	ldr	r2, [r7, #32]
 80029da:	492d      	ldr	r1, [pc, #180]	; (8002a90 <I2C_RequestMemoryWrite+0x128>)
 80029dc:	68f8      	ldr	r0, [r7, #12]
 80029de:	f000 f998 	bl	8002d12 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80029e2:	4603      	mov	r3, r0
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d001      	beq.n	80029ec <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	e04c      	b.n	8002a86 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029ec:	2300      	movs	r3, #0
 80029ee:	617b      	str	r3, [r7, #20]
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	695b      	ldr	r3, [r3, #20]
 80029f6:	617b      	str	r3, [r7, #20]
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	699b      	ldr	r3, [r3, #24]
 80029fe:	617b      	str	r3, [r7, #20]
 8002a00:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a04:	6a39      	ldr	r1, [r7, #32]
 8002a06:	68f8      	ldr	r0, [r7, #12]
 8002a08:	f000 fa02 	bl	8002e10 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d00d      	beq.n	8002a2e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a16:	2b04      	cmp	r3, #4
 8002a18:	d107      	bne.n	8002a2a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a28:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e02b      	b.n	8002a86 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002a2e:	88fb      	ldrh	r3, [r7, #6]
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d105      	bne.n	8002a40 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a34:	893b      	ldrh	r3, [r7, #8]
 8002a36:	b2da      	uxtb	r2, r3
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	611a      	str	r2, [r3, #16]
 8002a3e:	e021      	b.n	8002a84 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002a40:	893b      	ldrh	r3, [r7, #8]
 8002a42:	0a1b      	lsrs	r3, r3, #8
 8002a44:	b29b      	uxth	r3, r3
 8002a46:	b2da      	uxtb	r2, r3
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a50:	6a39      	ldr	r1, [r7, #32]
 8002a52:	68f8      	ldr	r0, [r7, #12]
 8002a54:	f000 f9dc 	bl	8002e10 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d00d      	beq.n	8002a7a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a62:	2b04      	cmp	r3, #4
 8002a64:	d107      	bne.n	8002a76 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a74:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e005      	b.n	8002a86 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a7a:	893b      	ldrh	r3, [r7, #8]
 8002a7c:	b2da      	uxtb	r2, r3
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002a84:	2300      	movs	r3, #0
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3718      	adds	r7, #24
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	00010002 	.word	0x00010002

08002a94 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b088      	sub	sp, #32
 8002a98:	af02      	add	r7, sp, #8
 8002a9a:	60f8      	str	r0, [r7, #12]
 8002a9c:	4608      	mov	r0, r1
 8002a9e:	4611      	mov	r1, r2
 8002aa0:	461a      	mov	r2, r3
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	817b      	strh	r3, [r7, #10]
 8002aa6:	460b      	mov	r3, r1
 8002aa8:	813b      	strh	r3, [r7, #8]
 8002aaa:	4613      	mov	r3, r2
 8002aac:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002abc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002acc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad0:	9300      	str	r3, [sp, #0]
 8002ad2:	6a3b      	ldr	r3, [r7, #32]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002ada:	68f8      	ldr	r0, [r7, #12]
 8002adc:	f000 f8c2 	bl	8002c64 <I2C_WaitOnFlagUntilTimeout>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d00d      	beq.n	8002b02 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002af0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002af4:	d103      	bne.n	8002afe <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002afc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002afe:	2303      	movs	r3, #3
 8002b00:	e0aa      	b.n	8002c58 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002b02:	897b      	ldrh	r3, [r7, #10]
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	461a      	mov	r2, r3
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002b10:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b14:	6a3a      	ldr	r2, [r7, #32]
 8002b16:	4952      	ldr	r1, [pc, #328]	; (8002c60 <I2C_RequestMemoryRead+0x1cc>)
 8002b18:	68f8      	ldr	r0, [r7, #12]
 8002b1a:	f000 f8fa 	bl	8002d12 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d001      	beq.n	8002b28 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e097      	b.n	8002c58 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b28:	2300      	movs	r3, #0
 8002b2a:	617b      	str	r3, [r7, #20]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	695b      	ldr	r3, [r3, #20]
 8002b32:	617b      	str	r3, [r7, #20]
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	699b      	ldr	r3, [r3, #24]
 8002b3a:	617b      	str	r3, [r7, #20]
 8002b3c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b40:	6a39      	ldr	r1, [r7, #32]
 8002b42:	68f8      	ldr	r0, [r7, #12]
 8002b44:	f000 f964 	bl	8002e10 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d00d      	beq.n	8002b6a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b52:	2b04      	cmp	r3, #4
 8002b54:	d107      	bne.n	8002b66 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b64:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e076      	b.n	8002c58 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002b6a:	88fb      	ldrh	r3, [r7, #6]
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d105      	bne.n	8002b7c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002b70:	893b      	ldrh	r3, [r7, #8]
 8002b72:	b2da      	uxtb	r2, r3
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	611a      	str	r2, [r3, #16]
 8002b7a:	e021      	b.n	8002bc0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002b7c:	893b      	ldrh	r3, [r7, #8]
 8002b7e:	0a1b      	lsrs	r3, r3, #8
 8002b80:	b29b      	uxth	r3, r3
 8002b82:	b2da      	uxtb	r2, r3
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b8c:	6a39      	ldr	r1, [r7, #32]
 8002b8e:	68f8      	ldr	r0, [r7, #12]
 8002b90:	f000 f93e 	bl	8002e10 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d00d      	beq.n	8002bb6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9e:	2b04      	cmp	r3, #4
 8002ba0:	d107      	bne.n	8002bb2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bb0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e050      	b.n	8002c58 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002bb6:	893b      	ldrh	r3, [r7, #8]
 8002bb8:	b2da      	uxtb	r2, r3
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bc2:	6a39      	ldr	r1, [r7, #32]
 8002bc4:	68f8      	ldr	r0, [r7, #12]
 8002bc6:	f000 f923 	bl	8002e10 <I2C_WaitOnTXEFlagUntilTimeout>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d00d      	beq.n	8002bec <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd4:	2b04      	cmp	r3, #4
 8002bd6:	d107      	bne.n	8002be8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002be6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	e035      	b.n	8002c58 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bfa:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfe:	9300      	str	r3, [sp, #0]
 8002c00:	6a3b      	ldr	r3, [r7, #32]
 8002c02:	2200      	movs	r2, #0
 8002c04:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002c08:	68f8      	ldr	r0, [r7, #12]
 8002c0a:	f000 f82b 	bl	8002c64 <I2C_WaitOnFlagUntilTimeout>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d00d      	beq.n	8002c30 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c22:	d103      	bne.n	8002c2c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c2a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002c2c:	2303      	movs	r3, #3
 8002c2e:	e013      	b.n	8002c58 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002c30:	897b      	ldrh	r3, [r7, #10]
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	f043 0301 	orr.w	r3, r3, #1
 8002c38:	b2da      	uxtb	r2, r3
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c42:	6a3a      	ldr	r2, [r7, #32]
 8002c44:	4906      	ldr	r1, [pc, #24]	; (8002c60 <I2C_RequestMemoryRead+0x1cc>)
 8002c46:	68f8      	ldr	r0, [r7, #12]
 8002c48:	f000 f863 	bl	8002d12 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d001      	beq.n	8002c56 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e000      	b.n	8002c58 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002c56:	2300      	movs	r3, #0
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3718      	adds	r7, #24
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	00010002 	.word	0x00010002

08002c64 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b084      	sub	sp, #16
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	60f8      	str	r0, [r7, #12]
 8002c6c:	60b9      	str	r1, [r7, #8]
 8002c6e:	603b      	str	r3, [r7, #0]
 8002c70:	4613      	mov	r3, r2
 8002c72:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c74:	e025      	b.n	8002cc2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c7c:	d021      	beq.n	8002cc2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c7e:	f7fe fecd 	bl	8001a1c <HAL_GetTick>
 8002c82:	4602      	mov	r2, r0
 8002c84:	69bb      	ldr	r3, [r7, #24]
 8002c86:	1ad3      	subs	r3, r2, r3
 8002c88:	683a      	ldr	r2, [r7, #0]
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	d302      	bcc.n	8002c94 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d116      	bne.n	8002cc2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2200      	movs	r2, #0
 8002c98:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2220      	movs	r2, #32
 8002c9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cae:	f043 0220 	orr.w	r2, r3, #32
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e023      	b.n	8002d0a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	0c1b      	lsrs	r3, r3, #16
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d10d      	bne.n	8002ce8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	695b      	ldr	r3, [r3, #20]
 8002cd2:	43da      	mvns	r2, r3
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	b29b      	uxth	r3, r3
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	bf0c      	ite	eq
 8002cde:	2301      	moveq	r3, #1
 8002ce0:	2300      	movne	r3, #0
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	e00c      	b.n	8002d02 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	699b      	ldr	r3, [r3, #24]
 8002cee:	43da      	mvns	r2, r3
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	b29b      	uxth	r3, r3
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	bf0c      	ite	eq
 8002cfa:	2301      	moveq	r3, #1
 8002cfc:	2300      	movne	r3, #0
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	461a      	mov	r2, r3
 8002d02:	79fb      	ldrb	r3, [r7, #7]
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d0b6      	beq.n	8002c76 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002d08:	2300      	movs	r3, #0
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3710      	adds	r7, #16
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}

08002d12 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002d12:	b580      	push	{r7, lr}
 8002d14:	b084      	sub	sp, #16
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	60f8      	str	r0, [r7, #12]
 8002d1a:	60b9      	str	r1, [r7, #8]
 8002d1c:	607a      	str	r2, [r7, #4]
 8002d1e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d20:	e051      	b.n	8002dc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	695b      	ldr	r3, [r3, #20]
 8002d28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d30:	d123      	bne.n	8002d7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d40:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002d4a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	2220      	movs	r2, #32
 8002d56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d66:	f043 0204 	orr.w	r2, r3, #4
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2200      	movs	r2, #0
 8002d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e046      	b.n	8002e08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d80:	d021      	beq.n	8002dc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d82:	f7fe fe4b 	bl	8001a1c <HAL_GetTick>
 8002d86:	4602      	mov	r2, r0
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	1ad3      	subs	r3, r2, r3
 8002d8c:	687a      	ldr	r2, [r7, #4]
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	d302      	bcc.n	8002d98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d116      	bne.n	8002dc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2220      	movs	r2, #32
 8002da2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2200      	movs	r2, #0
 8002daa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db2:	f043 0220 	orr.w	r2, r3, #32
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e020      	b.n	8002e08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	0c1b      	lsrs	r3, r3, #16
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d10c      	bne.n	8002dea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	695b      	ldr	r3, [r3, #20]
 8002dd6:	43da      	mvns	r2, r3
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	4013      	ands	r3, r2
 8002ddc:	b29b      	uxth	r3, r3
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	bf14      	ite	ne
 8002de2:	2301      	movne	r3, #1
 8002de4:	2300      	moveq	r3, #0
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	e00b      	b.n	8002e02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	699b      	ldr	r3, [r3, #24]
 8002df0:	43da      	mvns	r2, r3
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	4013      	ands	r3, r2
 8002df6:	b29b      	uxth	r3, r3
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	bf14      	ite	ne
 8002dfc:	2301      	movne	r3, #1
 8002dfe:	2300      	moveq	r3, #0
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d18d      	bne.n	8002d22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002e06:	2300      	movs	r3, #0
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	3710      	adds	r7, #16
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}

08002e10 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b084      	sub	sp, #16
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	60f8      	str	r0, [r7, #12]
 8002e18:	60b9      	str	r1, [r7, #8]
 8002e1a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e1c:	e02d      	b.n	8002e7a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002e1e:	68f8      	ldr	r0, [r7, #12]
 8002e20:	f000 f8ce 	bl	8002fc0 <I2C_IsAcknowledgeFailed>
 8002e24:	4603      	mov	r3, r0
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d001      	beq.n	8002e2e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e02d      	b.n	8002e8a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e34:	d021      	beq.n	8002e7a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e36:	f7fe fdf1 	bl	8001a1c <HAL_GetTick>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	1ad3      	subs	r3, r2, r3
 8002e40:	68ba      	ldr	r2, [r7, #8]
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d302      	bcc.n	8002e4c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d116      	bne.n	8002e7a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2220      	movs	r2, #32
 8002e56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e66:	f043 0220 	orr.w	r2, r3, #32
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2200      	movs	r2, #0
 8002e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e007      	b.n	8002e8a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	695b      	ldr	r3, [r3, #20]
 8002e80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e84:	2b80      	cmp	r3, #128	; 0x80
 8002e86:	d1ca      	bne.n	8002e1e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002e88:	2300      	movs	r3, #0
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3710      	adds	r7, #16
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}

08002e92 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e92:	b580      	push	{r7, lr}
 8002e94:	b084      	sub	sp, #16
 8002e96:	af00      	add	r7, sp, #0
 8002e98:	60f8      	str	r0, [r7, #12]
 8002e9a:	60b9      	str	r1, [r7, #8]
 8002e9c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e9e:	e02d      	b.n	8002efc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002ea0:	68f8      	ldr	r0, [r7, #12]
 8002ea2:	f000 f88d 	bl	8002fc0 <I2C_IsAcknowledgeFailed>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d001      	beq.n	8002eb0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	e02d      	b.n	8002f0c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eb6:	d021      	beq.n	8002efc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002eb8:	f7fe fdb0 	bl	8001a1c <HAL_GetTick>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	1ad3      	subs	r3, r2, r3
 8002ec2:	68ba      	ldr	r2, [r7, #8]
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d302      	bcc.n	8002ece <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d116      	bne.n	8002efc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2220      	movs	r2, #32
 8002ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee8:	f043 0220 	orr.w	r2, r3, #32
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	e007      	b.n	8002f0c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	695b      	ldr	r3, [r3, #20]
 8002f02:	f003 0304 	and.w	r3, r3, #4
 8002f06:	2b04      	cmp	r3, #4
 8002f08:	d1ca      	bne.n	8002ea0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002f0a:	2300      	movs	r3, #0
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3710      	adds	r7, #16
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}

08002f14 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b084      	sub	sp, #16
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	60f8      	str	r0, [r7, #12]
 8002f1c:	60b9      	str	r1, [r7, #8]
 8002f1e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002f20:	e042      	b.n	8002fa8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	695b      	ldr	r3, [r3, #20]
 8002f28:	f003 0310 	and.w	r3, r3, #16
 8002f2c:	2b10      	cmp	r3, #16
 8002f2e:	d119      	bne.n	8002f64 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f06f 0210 	mvn.w	r2, #16
 8002f38:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2220      	movs	r2, #32
 8002f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	e029      	b.n	8002fb8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f64:	f7fe fd5a 	bl	8001a1c <HAL_GetTick>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	68ba      	ldr	r2, [r7, #8]
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d302      	bcc.n	8002f7a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d116      	bne.n	8002fa8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2220      	movs	r2, #32
 8002f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f94:	f043 0220 	orr.w	r2, r3, #32
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e007      	b.n	8002fb8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	695b      	ldr	r3, [r3, #20]
 8002fae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fb2:	2b40      	cmp	r3, #64	; 0x40
 8002fb4:	d1b5      	bne.n	8002f22 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002fb6:	2300      	movs	r3, #0
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	3710      	adds	r7, #16
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}

08002fc0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	695b      	ldr	r3, [r3, #20]
 8002fce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fd6:	d11b      	bne.n	8003010 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002fe0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2220      	movs	r2, #32
 8002fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffc:	f043 0204 	orr.w	r2, r3, #4
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2200      	movs	r2, #0
 8003008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	e000      	b.n	8003012 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003010:	2300      	movs	r3, #0
}
 8003012:	4618      	mov	r0, r3
 8003014:	370c      	adds	r7, #12
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr

0800301e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800301e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003020:	b08f      	sub	sp, #60	; 0x3c
 8003022:	af0a      	add	r7, sp, #40	; 0x28
 8003024:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d101      	bne.n	8003030 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	e10f      	b.n	8003250 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800303c:	b2db      	uxtb	r3, r3
 800303e:	2b00      	cmp	r3, #0
 8003040:	d106      	bne.n	8003050 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2200      	movs	r2, #0
 8003046:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f00a fdf8 	bl	800dc40 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2203      	movs	r2, #3
 8003054:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800305c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003060:	2b00      	cmp	r3, #0
 8003062:	d102      	bne.n	800306a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2200      	movs	r2, #0
 8003068:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4618      	mov	r0, r3
 8003070:	f003 ff6d 	bl	8006f4e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	603b      	str	r3, [r7, #0]
 800307a:	687e      	ldr	r6, [r7, #4]
 800307c:	466d      	mov	r5, sp
 800307e:	f106 0410 	add.w	r4, r6, #16
 8003082:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003084:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003086:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003088:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800308a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800308e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003092:	1d33      	adds	r3, r6, #4
 8003094:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003096:	6838      	ldr	r0, [r7, #0]
 8003098:	f003 fe44 	bl	8006d24 <USB_CoreInit>
 800309c:	4603      	mov	r3, r0
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d005      	beq.n	80030ae <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2202      	movs	r2, #2
 80030a6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e0d0      	b.n	8003250 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	2100      	movs	r1, #0
 80030b4:	4618      	mov	r0, r3
 80030b6:	f003 ff5b 	bl	8006f70 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030ba:	2300      	movs	r3, #0
 80030bc:	73fb      	strb	r3, [r7, #15]
 80030be:	e04a      	b.n	8003156 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80030c0:	7bfa      	ldrb	r2, [r7, #15]
 80030c2:	6879      	ldr	r1, [r7, #4]
 80030c4:	4613      	mov	r3, r2
 80030c6:	00db      	lsls	r3, r3, #3
 80030c8:	4413      	add	r3, r2
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	440b      	add	r3, r1
 80030ce:	333d      	adds	r3, #61	; 0x3d
 80030d0:	2201      	movs	r2, #1
 80030d2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80030d4:	7bfa      	ldrb	r2, [r7, #15]
 80030d6:	6879      	ldr	r1, [r7, #4]
 80030d8:	4613      	mov	r3, r2
 80030da:	00db      	lsls	r3, r3, #3
 80030dc:	4413      	add	r3, r2
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	440b      	add	r3, r1
 80030e2:	333c      	adds	r3, #60	; 0x3c
 80030e4:	7bfa      	ldrb	r2, [r7, #15]
 80030e6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80030e8:	7bfa      	ldrb	r2, [r7, #15]
 80030ea:	7bfb      	ldrb	r3, [r7, #15]
 80030ec:	b298      	uxth	r0, r3
 80030ee:	6879      	ldr	r1, [r7, #4]
 80030f0:	4613      	mov	r3, r2
 80030f2:	00db      	lsls	r3, r3, #3
 80030f4:	4413      	add	r3, r2
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	440b      	add	r3, r1
 80030fa:	3344      	adds	r3, #68	; 0x44
 80030fc:	4602      	mov	r2, r0
 80030fe:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003100:	7bfa      	ldrb	r2, [r7, #15]
 8003102:	6879      	ldr	r1, [r7, #4]
 8003104:	4613      	mov	r3, r2
 8003106:	00db      	lsls	r3, r3, #3
 8003108:	4413      	add	r3, r2
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	440b      	add	r3, r1
 800310e:	3340      	adds	r3, #64	; 0x40
 8003110:	2200      	movs	r2, #0
 8003112:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003114:	7bfa      	ldrb	r2, [r7, #15]
 8003116:	6879      	ldr	r1, [r7, #4]
 8003118:	4613      	mov	r3, r2
 800311a:	00db      	lsls	r3, r3, #3
 800311c:	4413      	add	r3, r2
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	440b      	add	r3, r1
 8003122:	3348      	adds	r3, #72	; 0x48
 8003124:	2200      	movs	r2, #0
 8003126:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003128:	7bfa      	ldrb	r2, [r7, #15]
 800312a:	6879      	ldr	r1, [r7, #4]
 800312c:	4613      	mov	r3, r2
 800312e:	00db      	lsls	r3, r3, #3
 8003130:	4413      	add	r3, r2
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	440b      	add	r3, r1
 8003136:	334c      	adds	r3, #76	; 0x4c
 8003138:	2200      	movs	r2, #0
 800313a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800313c:	7bfa      	ldrb	r2, [r7, #15]
 800313e:	6879      	ldr	r1, [r7, #4]
 8003140:	4613      	mov	r3, r2
 8003142:	00db      	lsls	r3, r3, #3
 8003144:	4413      	add	r3, r2
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	440b      	add	r3, r1
 800314a:	3354      	adds	r3, #84	; 0x54
 800314c:	2200      	movs	r2, #0
 800314e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003150:	7bfb      	ldrb	r3, [r7, #15]
 8003152:	3301      	adds	r3, #1
 8003154:	73fb      	strb	r3, [r7, #15]
 8003156:	7bfa      	ldrb	r2, [r7, #15]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	429a      	cmp	r2, r3
 800315e:	d3af      	bcc.n	80030c0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003160:	2300      	movs	r3, #0
 8003162:	73fb      	strb	r3, [r7, #15]
 8003164:	e044      	b.n	80031f0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003166:	7bfa      	ldrb	r2, [r7, #15]
 8003168:	6879      	ldr	r1, [r7, #4]
 800316a:	4613      	mov	r3, r2
 800316c:	00db      	lsls	r3, r3, #3
 800316e:	4413      	add	r3, r2
 8003170:	009b      	lsls	r3, r3, #2
 8003172:	440b      	add	r3, r1
 8003174:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003178:	2200      	movs	r2, #0
 800317a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800317c:	7bfa      	ldrb	r2, [r7, #15]
 800317e:	6879      	ldr	r1, [r7, #4]
 8003180:	4613      	mov	r3, r2
 8003182:	00db      	lsls	r3, r3, #3
 8003184:	4413      	add	r3, r2
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	440b      	add	r3, r1
 800318a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800318e:	7bfa      	ldrb	r2, [r7, #15]
 8003190:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003192:	7bfa      	ldrb	r2, [r7, #15]
 8003194:	6879      	ldr	r1, [r7, #4]
 8003196:	4613      	mov	r3, r2
 8003198:	00db      	lsls	r3, r3, #3
 800319a:	4413      	add	r3, r2
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	440b      	add	r3, r1
 80031a0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80031a4:	2200      	movs	r2, #0
 80031a6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80031a8:	7bfa      	ldrb	r2, [r7, #15]
 80031aa:	6879      	ldr	r1, [r7, #4]
 80031ac:	4613      	mov	r3, r2
 80031ae:	00db      	lsls	r3, r3, #3
 80031b0:	4413      	add	r3, r2
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	440b      	add	r3, r1
 80031b6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80031ba:	2200      	movs	r2, #0
 80031bc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80031be:	7bfa      	ldrb	r2, [r7, #15]
 80031c0:	6879      	ldr	r1, [r7, #4]
 80031c2:	4613      	mov	r3, r2
 80031c4:	00db      	lsls	r3, r3, #3
 80031c6:	4413      	add	r3, r2
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	440b      	add	r3, r1
 80031cc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80031d0:	2200      	movs	r2, #0
 80031d2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80031d4:	7bfa      	ldrb	r2, [r7, #15]
 80031d6:	6879      	ldr	r1, [r7, #4]
 80031d8:	4613      	mov	r3, r2
 80031da:	00db      	lsls	r3, r3, #3
 80031dc:	4413      	add	r3, r2
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	440b      	add	r3, r1
 80031e2:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80031e6:	2200      	movs	r2, #0
 80031e8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031ea:	7bfb      	ldrb	r3, [r7, #15]
 80031ec:	3301      	adds	r3, #1
 80031ee:	73fb      	strb	r3, [r7, #15]
 80031f0:	7bfa      	ldrb	r2, [r7, #15]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d3b5      	bcc.n	8003166 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	603b      	str	r3, [r7, #0]
 8003200:	687e      	ldr	r6, [r7, #4]
 8003202:	466d      	mov	r5, sp
 8003204:	f106 0410 	add.w	r4, r6, #16
 8003208:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800320a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800320c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800320e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003210:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003214:	e885 0003 	stmia.w	r5, {r0, r1}
 8003218:	1d33      	adds	r3, r6, #4
 800321a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800321c:	6838      	ldr	r0, [r7, #0]
 800321e:	f003 fef3 	bl	8007008 <USB_DevInit>
 8003222:	4603      	mov	r3, r0
 8003224:	2b00      	cmp	r3, #0
 8003226:	d005      	beq.n	8003234 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2202      	movs	r2, #2
 800322c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	e00d      	b.n	8003250 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2200      	movs	r2, #0
 8003238:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2201      	movs	r2, #1
 8003240:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4618      	mov	r0, r3
 800324a:	f005 f842 	bl	80082d2 <USB_DevDisconnect>

  return HAL_OK;
 800324e:	2300      	movs	r3, #0
}
 8003250:	4618      	mov	r0, r3
 8003252:	3714      	adds	r7, #20
 8003254:	46bd      	mov	sp, r7
 8003256:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003258 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b084      	sub	sp, #16
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800326c:	2b01      	cmp	r3, #1
 800326e:	d101      	bne.n	8003274 <HAL_PCD_Start+0x1c>
 8003270:	2302      	movs	r3, #2
 8003272:	e020      	b.n	80032b6 <HAL_PCD_Start+0x5e>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2201      	movs	r2, #1
 8003278:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003280:	2b01      	cmp	r3, #1
 8003282:	d109      	bne.n	8003298 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003288:	2b01      	cmp	r3, #1
 800328a:	d005      	beq.n	8003298 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003290:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4618      	mov	r0, r3
 800329e:	f003 fe45 	bl	8006f2c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4618      	mov	r0, r3
 80032a8:	f004 fff2 	bl	8008290 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2200      	movs	r2, #0
 80032b0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80032b4:	2300      	movs	r3, #0
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3710      	adds	r7, #16
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}

080032be <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80032be:	b590      	push	{r4, r7, lr}
 80032c0:	b08d      	sub	sp, #52	; 0x34
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032cc:	6a3b      	ldr	r3, [r7, #32]
 80032ce:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4618      	mov	r0, r3
 80032d6:	f005 f8b0 	bl	800843a <USB_GetMode>
 80032da:	4603      	mov	r3, r0
 80032dc:	2b00      	cmp	r3, #0
 80032de:	f040 848a 	bne.w	8003bf6 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4618      	mov	r0, r3
 80032e8:	f005 f814 	bl	8008314 <USB_ReadInterrupts>
 80032ec:	4603      	mov	r3, r0
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	f000 8480 	beq.w	8003bf4 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80032f4:	69fb      	ldr	r3, [r7, #28]
 80032f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	0a1b      	lsrs	r3, r3, #8
 80032fe:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4618      	mov	r0, r3
 800330e:	f005 f801 	bl	8008314 <USB_ReadInterrupts>
 8003312:	4603      	mov	r3, r0
 8003314:	f003 0302 	and.w	r3, r3, #2
 8003318:	2b02      	cmp	r3, #2
 800331a:	d107      	bne.n	800332c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	695a      	ldr	r2, [r3, #20]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f002 0202 	and.w	r2, r2, #2
 800332a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4618      	mov	r0, r3
 8003332:	f004 ffef 	bl	8008314 <USB_ReadInterrupts>
 8003336:	4603      	mov	r3, r0
 8003338:	f003 0310 	and.w	r3, r3, #16
 800333c:	2b10      	cmp	r3, #16
 800333e:	d161      	bne.n	8003404 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	699a      	ldr	r2, [r3, #24]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f022 0210 	bic.w	r2, r2, #16
 800334e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003350:	6a3b      	ldr	r3, [r7, #32]
 8003352:	6a1b      	ldr	r3, [r3, #32]
 8003354:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003356:	69bb      	ldr	r3, [r7, #24]
 8003358:	f003 020f 	and.w	r2, r3, #15
 800335c:	4613      	mov	r3, r2
 800335e:	00db      	lsls	r3, r3, #3
 8003360:	4413      	add	r3, r2
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003368:	687a      	ldr	r2, [r7, #4]
 800336a:	4413      	add	r3, r2
 800336c:	3304      	adds	r3, #4
 800336e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003370:	69bb      	ldr	r3, [r7, #24]
 8003372:	0c5b      	lsrs	r3, r3, #17
 8003374:	f003 030f 	and.w	r3, r3, #15
 8003378:	2b02      	cmp	r3, #2
 800337a:	d124      	bne.n	80033c6 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800337c:	69ba      	ldr	r2, [r7, #24]
 800337e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003382:	4013      	ands	r3, r2
 8003384:	2b00      	cmp	r3, #0
 8003386:	d035      	beq.n	80033f4 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800338c:	69bb      	ldr	r3, [r7, #24]
 800338e:	091b      	lsrs	r3, r3, #4
 8003390:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003392:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003396:	b29b      	uxth	r3, r3
 8003398:	461a      	mov	r2, r3
 800339a:	6a38      	ldr	r0, [r7, #32]
 800339c:	f004 fe26 	bl	8007fec <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	691a      	ldr	r2, [r3, #16]
 80033a4:	69bb      	ldr	r3, [r7, #24]
 80033a6:	091b      	lsrs	r3, r3, #4
 80033a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80033ac:	441a      	add	r2, r3
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	6a1a      	ldr	r2, [r3, #32]
 80033b6:	69bb      	ldr	r3, [r7, #24]
 80033b8:	091b      	lsrs	r3, r3, #4
 80033ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80033be:	441a      	add	r2, r3
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	621a      	str	r2, [r3, #32]
 80033c4:	e016      	b.n	80033f4 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80033c6:	69bb      	ldr	r3, [r7, #24]
 80033c8:	0c5b      	lsrs	r3, r3, #17
 80033ca:	f003 030f 	and.w	r3, r3, #15
 80033ce:	2b06      	cmp	r3, #6
 80033d0:	d110      	bne.n	80033f4 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80033d8:	2208      	movs	r2, #8
 80033da:	4619      	mov	r1, r3
 80033dc:	6a38      	ldr	r0, [r7, #32]
 80033de:	f004 fe05 	bl	8007fec <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	6a1a      	ldr	r2, [r3, #32]
 80033e6:	69bb      	ldr	r3, [r7, #24]
 80033e8:	091b      	lsrs	r3, r3, #4
 80033ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80033ee:	441a      	add	r2, r3
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	699a      	ldr	r2, [r3, #24]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f042 0210 	orr.w	r2, r2, #16
 8003402:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4618      	mov	r0, r3
 800340a:	f004 ff83 	bl	8008314 <USB_ReadInterrupts>
 800340e:	4603      	mov	r3, r0
 8003410:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003414:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003418:	f040 80a7 	bne.w	800356a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800341c:	2300      	movs	r3, #0
 800341e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4618      	mov	r0, r3
 8003426:	f004 ff88 	bl	800833a <USB_ReadDevAllOutEpInterrupt>
 800342a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800342c:	e099      	b.n	8003562 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800342e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003430:	f003 0301 	and.w	r3, r3, #1
 8003434:	2b00      	cmp	r3, #0
 8003436:	f000 808e 	beq.w	8003556 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003440:	b2d2      	uxtb	r2, r2
 8003442:	4611      	mov	r1, r2
 8003444:	4618      	mov	r0, r3
 8003446:	f004 ffac 	bl	80083a2 <USB_ReadDevOutEPInterrupt>
 800344a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	f003 0301 	and.w	r3, r3, #1
 8003452:	2b00      	cmp	r3, #0
 8003454:	d00c      	beq.n	8003470 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003458:	015a      	lsls	r2, r3, #5
 800345a:	69fb      	ldr	r3, [r7, #28]
 800345c:	4413      	add	r3, r2
 800345e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003462:	461a      	mov	r2, r3
 8003464:	2301      	movs	r3, #1
 8003466:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003468:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f000 fec2 	bl	80041f4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	f003 0308 	and.w	r3, r3, #8
 8003476:	2b00      	cmp	r3, #0
 8003478:	d00c      	beq.n	8003494 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800347a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800347c:	015a      	lsls	r2, r3, #5
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	4413      	add	r3, r2
 8003482:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003486:	461a      	mov	r2, r3
 8003488:	2308      	movs	r3, #8
 800348a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800348c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f000 ff98 	bl	80043c4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	f003 0310 	and.w	r3, r3, #16
 800349a:	2b00      	cmp	r3, #0
 800349c:	d008      	beq.n	80034b0 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800349e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a0:	015a      	lsls	r2, r3, #5
 80034a2:	69fb      	ldr	r3, [r7, #28]
 80034a4:	4413      	add	r3, r2
 80034a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034aa:	461a      	mov	r2, r3
 80034ac:	2310      	movs	r3, #16
 80034ae:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	f003 0302 	and.w	r3, r3, #2
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d030      	beq.n	800351c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80034ba:	6a3b      	ldr	r3, [r7, #32]
 80034bc:	695b      	ldr	r3, [r3, #20]
 80034be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034c2:	2b80      	cmp	r3, #128	; 0x80
 80034c4:	d109      	bne.n	80034da <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80034c6:	69fb      	ldr	r3, [r7, #28]
 80034c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	69fa      	ldr	r2, [r7, #28]
 80034d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80034d4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80034d8:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80034da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034dc:	4613      	mov	r3, r2
 80034de:	00db      	lsls	r3, r3, #3
 80034e0:	4413      	add	r3, r2
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80034e8:	687a      	ldr	r2, [r7, #4]
 80034ea:	4413      	add	r3, r2
 80034ec:	3304      	adds	r3, #4
 80034ee:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	78db      	ldrb	r3, [r3, #3]
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d108      	bne.n	800350a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	2200      	movs	r2, #0
 80034fc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80034fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003500:	b2db      	uxtb	r3, r3
 8003502:	4619      	mov	r1, r3
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	f00a fca5 	bl	800de54 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800350a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350c:	015a      	lsls	r2, r3, #5
 800350e:	69fb      	ldr	r3, [r7, #28]
 8003510:	4413      	add	r3, r2
 8003512:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003516:	461a      	mov	r2, r3
 8003518:	2302      	movs	r3, #2
 800351a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	f003 0320 	and.w	r3, r3, #32
 8003522:	2b00      	cmp	r3, #0
 8003524:	d008      	beq.n	8003538 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003528:	015a      	lsls	r2, r3, #5
 800352a:	69fb      	ldr	r3, [r7, #28]
 800352c:	4413      	add	r3, r2
 800352e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003532:	461a      	mov	r2, r3
 8003534:	2320      	movs	r3, #32
 8003536:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800353e:	2b00      	cmp	r3, #0
 8003540:	d009      	beq.n	8003556 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003544:	015a      	lsls	r2, r3, #5
 8003546:	69fb      	ldr	r3, [r7, #28]
 8003548:	4413      	add	r3, r2
 800354a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800354e:	461a      	mov	r2, r3
 8003550:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003554:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003558:	3301      	adds	r3, #1
 800355a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800355c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800355e:	085b      	lsrs	r3, r3, #1
 8003560:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003564:	2b00      	cmp	r3, #0
 8003566:	f47f af62 	bne.w	800342e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4618      	mov	r0, r3
 8003570:	f004 fed0 	bl	8008314 <USB_ReadInterrupts>
 8003574:	4603      	mov	r3, r0
 8003576:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800357a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800357e:	f040 80db 	bne.w	8003738 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4618      	mov	r0, r3
 8003588:	f004 fef1 	bl	800836e <USB_ReadDevAllInEpInterrupt>
 800358c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800358e:	2300      	movs	r3, #0
 8003590:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003592:	e0cd      	b.n	8003730 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003596:	f003 0301 	and.w	r3, r3, #1
 800359a:	2b00      	cmp	r3, #0
 800359c:	f000 80c2 	beq.w	8003724 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035a6:	b2d2      	uxtb	r2, r2
 80035a8:	4611      	mov	r1, r2
 80035aa:	4618      	mov	r0, r3
 80035ac:	f004 ff17 	bl	80083de <USB_ReadDevInEPInterrupt>
 80035b0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	f003 0301 	and.w	r3, r3, #1
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d057      	beq.n	800366c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80035bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035be:	f003 030f 	and.w	r3, r3, #15
 80035c2:	2201      	movs	r2, #1
 80035c4:	fa02 f303 	lsl.w	r3, r2, r3
 80035c8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80035ca:	69fb      	ldr	r3, [r7, #28]
 80035cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	43db      	mvns	r3, r3
 80035d6:	69f9      	ldr	r1, [r7, #28]
 80035d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80035dc:	4013      	ands	r3, r2
 80035de:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80035e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e2:	015a      	lsls	r2, r3, #5
 80035e4:	69fb      	ldr	r3, [r7, #28]
 80035e6:	4413      	add	r3, r2
 80035e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035ec:	461a      	mov	r2, r3
 80035ee:	2301      	movs	r3, #1
 80035f0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	691b      	ldr	r3, [r3, #16]
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	d132      	bne.n	8003660 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80035fa:	6879      	ldr	r1, [r7, #4]
 80035fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035fe:	4613      	mov	r3, r2
 8003600:	00db      	lsls	r3, r3, #3
 8003602:	4413      	add	r3, r2
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	440b      	add	r3, r1
 8003608:	334c      	adds	r3, #76	; 0x4c
 800360a:	6819      	ldr	r1, [r3, #0]
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003610:	4613      	mov	r3, r2
 8003612:	00db      	lsls	r3, r3, #3
 8003614:	4413      	add	r3, r2
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	4403      	add	r3, r0
 800361a:	3348      	adds	r3, #72	; 0x48
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4419      	add	r1, r3
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003624:	4613      	mov	r3, r2
 8003626:	00db      	lsls	r3, r3, #3
 8003628:	4413      	add	r3, r2
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	4403      	add	r3, r0
 800362e:	334c      	adds	r3, #76	; 0x4c
 8003630:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003634:	2b00      	cmp	r3, #0
 8003636:	d113      	bne.n	8003660 <HAL_PCD_IRQHandler+0x3a2>
 8003638:	6879      	ldr	r1, [r7, #4]
 800363a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800363c:	4613      	mov	r3, r2
 800363e:	00db      	lsls	r3, r3, #3
 8003640:	4413      	add	r3, r2
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	440b      	add	r3, r1
 8003646:	3354      	adds	r3, #84	; 0x54
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d108      	bne.n	8003660 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6818      	ldr	r0, [r3, #0]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003658:	461a      	mov	r2, r3
 800365a:	2101      	movs	r1, #1
 800365c:	f004 ff1e 	bl	800849c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003662:	b2db      	uxtb	r3, r3
 8003664:	4619      	mov	r1, r3
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f00a fb79 	bl	800dd5e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	f003 0308 	and.w	r3, r3, #8
 8003672:	2b00      	cmp	r3, #0
 8003674:	d008      	beq.n	8003688 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003678:	015a      	lsls	r2, r3, #5
 800367a:	69fb      	ldr	r3, [r7, #28]
 800367c:	4413      	add	r3, r2
 800367e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003682:	461a      	mov	r2, r3
 8003684:	2308      	movs	r3, #8
 8003686:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	f003 0310 	and.w	r3, r3, #16
 800368e:	2b00      	cmp	r3, #0
 8003690:	d008      	beq.n	80036a4 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003694:	015a      	lsls	r2, r3, #5
 8003696:	69fb      	ldr	r3, [r7, #28]
 8003698:	4413      	add	r3, r2
 800369a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800369e:	461a      	mov	r2, r3
 80036a0:	2310      	movs	r3, #16
 80036a2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d008      	beq.n	80036c0 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80036ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b0:	015a      	lsls	r2, r3, #5
 80036b2:	69fb      	ldr	r3, [r7, #28]
 80036b4:	4413      	add	r3, r2
 80036b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036ba:	461a      	mov	r2, r3
 80036bc:	2340      	movs	r3, #64	; 0x40
 80036be:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	f003 0302 	and.w	r3, r3, #2
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d023      	beq.n	8003712 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80036ca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80036cc:	6a38      	ldr	r0, [r7, #32]
 80036ce:	f003 fdff 	bl	80072d0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80036d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036d4:	4613      	mov	r3, r2
 80036d6:	00db      	lsls	r3, r3, #3
 80036d8:	4413      	add	r3, r2
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	3338      	adds	r3, #56	; 0x38
 80036de:	687a      	ldr	r2, [r7, #4]
 80036e0:	4413      	add	r3, r2
 80036e2:	3304      	adds	r3, #4
 80036e4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	78db      	ldrb	r3, [r3, #3]
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d108      	bne.n	8003700 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	2200      	movs	r2, #0
 80036f2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80036f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	4619      	mov	r1, r3
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f00a fbbc 	bl	800de78 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003702:	015a      	lsls	r2, r3, #5
 8003704:	69fb      	ldr	r3, [r7, #28]
 8003706:	4413      	add	r3, r2
 8003708:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800370c:	461a      	mov	r2, r3
 800370e:	2302      	movs	r3, #2
 8003710:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003718:	2b00      	cmp	r3, #0
 800371a:	d003      	beq.n	8003724 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800371c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f000 fcdb 	bl	80040da <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003726:	3301      	adds	r3, #1
 8003728:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800372a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800372c:	085b      	lsrs	r3, r3, #1
 800372e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003732:	2b00      	cmp	r3, #0
 8003734:	f47f af2e 	bne.w	8003594 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4618      	mov	r0, r3
 800373e:	f004 fde9 	bl	8008314 <USB_ReadInterrupts>
 8003742:	4603      	mov	r3, r0
 8003744:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003748:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800374c:	d122      	bne.n	8003794 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800374e:	69fb      	ldr	r3, [r7, #28]
 8003750:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	69fa      	ldr	r2, [r7, #28]
 8003758:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800375c:	f023 0301 	bic.w	r3, r3, #1
 8003760:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003768:	2b01      	cmp	r3, #1
 800376a:	d108      	bne.n	800377e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2200      	movs	r2, #0
 8003770:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003774:	2100      	movs	r1, #0
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f000 fec2 	bl	8004500 <HAL_PCDEx_LPM_Callback>
 800377c:	e002      	b.n	8003784 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f00a fb5a 	bl	800de38 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	695a      	ldr	r2, [r3, #20]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003792:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4618      	mov	r0, r3
 800379a:	f004 fdbb 	bl	8008314 <USB_ReadInterrupts>
 800379e:	4603      	mov	r3, r0
 80037a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037a8:	d112      	bne.n	80037d0 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80037aa:	69fb      	ldr	r3, [r7, #28]
 80037ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	f003 0301 	and.w	r3, r3, #1
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d102      	bne.n	80037c0 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f00a fb16 	bl	800ddec <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	695a      	ldr	r2, [r3, #20]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80037ce:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4618      	mov	r0, r3
 80037d6:	f004 fd9d 	bl	8008314 <USB_ReadInterrupts>
 80037da:	4603      	mov	r3, r0
 80037dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037e4:	f040 80b7 	bne.w	8003956 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80037e8:	69fb      	ldr	r3, [r7, #28]
 80037ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	69fa      	ldr	r2, [r7, #28]
 80037f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037f6:	f023 0301 	bic.w	r3, r3, #1
 80037fa:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	2110      	movs	r1, #16
 8003802:	4618      	mov	r0, r3
 8003804:	f003 fd64 	bl	80072d0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003808:	2300      	movs	r3, #0
 800380a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800380c:	e046      	b.n	800389c <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800380e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003810:	015a      	lsls	r2, r3, #5
 8003812:	69fb      	ldr	r3, [r7, #28]
 8003814:	4413      	add	r3, r2
 8003816:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800381a:	461a      	mov	r2, r3
 800381c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003820:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003824:	015a      	lsls	r2, r3, #5
 8003826:	69fb      	ldr	r3, [r7, #28]
 8003828:	4413      	add	r3, r2
 800382a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003832:	0151      	lsls	r1, r2, #5
 8003834:	69fa      	ldr	r2, [r7, #28]
 8003836:	440a      	add	r2, r1
 8003838:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800383c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003840:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003844:	015a      	lsls	r2, r3, #5
 8003846:	69fb      	ldr	r3, [r7, #28]
 8003848:	4413      	add	r3, r2
 800384a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800384e:	461a      	mov	r2, r3
 8003850:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003854:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003858:	015a      	lsls	r2, r3, #5
 800385a:	69fb      	ldr	r3, [r7, #28]
 800385c:	4413      	add	r3, r2
 800385e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003866:	0151      	lsls	r1, r2, #5
 8003868:	69fa      	ldr	r2, [r7, #28]
 800386a:	440a      	add	r2, r1
 800386c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003870:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003874:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003878:	015a      	lsls	r2, r3, #5
 800387a:	69fb      	ldr	r3, [r7, #28]
 800387c:	4413      	add	r3, r2
 800387e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003886:	0151      	lsls	r1, r2, #5
 8003888:	69fa      	ldr	r2, [r7, #28]
 800388a:	440a      	add	r2, r1
 800388c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003890:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003894:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003898:	3301      	adds	r3, #1
 800389a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038a2:	429a      	cmp	r2, r3
 80038a4:	d3b3      	bcc.n	800380e <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80038a6:	69fb      	ldr	r3, [r7, #28]
 80038a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038ac:	69db      	ldr	r3, [r3, #28]
 80038ae:	69fa      	ldr	r2, [r7, #28]
 80038b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038b4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80038b8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d016      	beq.n	80038f0 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80038c2:	69fb      	ldr	r3, [r7, #28]
 80038c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038cc:	69fa      	ldr	r2, [r7, #28]
 80038ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038d2:	f043 030b 	orr.w	r3, r3, #11
 80038d6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80038da:	69fb      	ldr	r3, [r7, #28]
 80038dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038e2:	69fa      	ldr	r2, [r7, #28]
 80038e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038e8:	f043 030b 	orr.w	r3, r3, #11
 80038ec:	6453      	str	r3, [r2, #68]	; 0x44
 80038ee:	e015      	b.n	800391c <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038f6:	695b      	ldr	r3, [r3, #20]
 80038f8:	69fa      	ldr	r2, [r7, #28]
 80038fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038fe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003902:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003906:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003908:	69fb      	ldr	r3, [r7, #28]
 800390a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800390e:	691b      	ldr	r3, [r3, #16]
 8003910:	69fa      	ldr	r2, [r7, #28]
 8003912:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003916:	f043 030b 	orr.w	r3, r3, #11
 800391a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800391c:	69fb      	ldr	r3, [r7, #28]
 800391e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	69fa      	ldr	r2, [r7, #28]
 8003926:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800392a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800392e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6818      	ldr	r0, [r3, #0]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	691b      	ldr	r3, [r3, #16]
 8003938:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003940:	461a      	mov	r2, r3
 8003942:	f004 fdab 	bl	800849c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	695a      	ldr	r2, [r3, #20]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003954:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4618      	mov	r0, r3
 800395c:	f004 fcda 	bl	8008314 <USB_ReadInterrupts>
 8003960:	4603      	mov	r3, r0
 8003962:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003966:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800396a:	d124      	bne.n	80039b6 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4618      	mov	r0, r3
 8003972:	f004 fd70 	bl	8008456 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4618      	mov	r0, r3
 800397c:	f003 fd25 	bl	80073ca <USB_GetDevSpeed>
 8003980:	4603      	mov	r3, r0
 8003982:	461a      	mov	r2, r3
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681c      	ldr	r4, [r3, #0]
 800398c:	f001 fa28 	bl	8004de0 <HAL_RCC_GetHCLKFreq>
 8003990:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003996:	b2db      	uxtb	r3, r3
 8003998:	461a      	mov	r2, r3
 800399a:	4620      	mov	r0, r4
 800399c:	f003 fa24 	bl	8006de8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	f00a fa04 	bl	800ddae <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	695a      	ldr	r2, [r3, #20]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80039b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4618      	mov	r0, r3
 80039bc:	f004 fcaa 	bl	8008314 <USB_ReadInterrupts>
 80039c0:	4603      	mov	r3, r0
 80039c2:	f003 0308 	and.w	r3, r3, #8
 80039c6:	2b08      	cmp	r3, #8
 80039c8:	d10a      	bne.n	80039e0 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f00a f9e1 	bl	800dd92 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	695a      	ldr	r2, [r3, #20]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f002 0208 	and.w	r2, r2, #8
 80039de:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4618      	mov	r0, r3
 80039e6:	f004 fc95 	bl	8008314 <USB_ReadInterrupts>
 80039ea:	4603      	mov	r3, r0
 80039ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039f0:	2b80      	cmp	r3, #128	; 0x80
 80039f2:	d122      	bne.n	8003a3a <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80039f4:	6a3b      	ldr	r3, [r7, #32]
 80039f6:	699b      	ldr	r3, [r3, #24]
 80039f8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80039fc:	6a3b      	ldr	r3, [r7, #32]
 80039fe:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003a00:	2301      	movs	r3, #1
 8003a02:	627b      	str	r3, [r7, #36]	; 0x24
 8003a04:	e014      	b.n	8003a30 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003a06:	6879      	ldr	r1, [r7, #4]
 8003a08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a0a:	4613      	mov	r3, r2
 8003a0c:	00db      	lsls	r3, r3, #3
 8003a0e:	4413      	add	r3, r2
 8003a10:	009b      	lsls	r3, r3, #2
 8003a12:	440b      	add	r3, r1
 8003a14:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003a18:	781b      	ldrb	r3, [r3, #0]
 8003a1a:	2b01      	cmp	r3, #1
 8003a1c:	d105      	bne.n	8003a2a <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	4619      	mov	r1, r3
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	f000 fb27 	bl	8004078 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a2c:	3301      	adds	r3, #1
 8003a2e:	627b      	str	r3, [r7, #36]	; 0x24
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a36:	429a      	cmp	r2, r3
 8003a38:	d3e5      	bcc.n	8003a06 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f004 fc68 	bl	8008314 <USB_ReadInterrupts>
 8003a44:	4603      	mov	r3, r0
 8003a46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a4e:	d13b      	bne.n	8003ac8 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003a50:	2301      	movs	r3, #1
 8003a52:	627b      	str	r3, [r7, #36]	; 0x24
 8003a54:	e02b      	b.n	8003aae <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a58:	015a      	lsls	r2, r3, #5
 8003a5a:	69fb      	ldr	r3, [r7, #28]
 8003a5c:	4413      	add	r3, r2
 8003a5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003a66:	6879      	ldr	r1, [r7, #4]
 8003a68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a6a:	4613      	mov	r3, r2
 8003a6c:	00db      	lsls	r3, r3, #3
 8003a6e:	4413      	add	r3, r2
 8003a70:	009b      	lsls	r3, r3, #2
 8003a72:	440b      	add	r3, r1
 8003a74:	3340      	adds	r3, #64	; 0x40
 8003a76:	781b      	ldrb	r3, [r3, #0]
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d115      	bne.n	8003aa8 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003a7c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	da12      	bge.n	8003aa8 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003a82:	6879      	ldr	r1, [r7, #4]
 8003a84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a86:	4613      	mov	r3, r2
 8003a88:	00db      	lsls	r3, r3, #3
 8003a8a:	4413      	add	r3, r2
 8003a8c:	009b      	lsls	r3, r3, #2
 8003a8e:	440b      	add	r3, r1
 8003a90:	333f      	adds	r3, #63	; 0x3f
 8003a92:	2201      	movs	r2, #1
 8003a94:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003a9e:	b2db      	uxtb	r3, r3
 8003aa0:	4619      	mov	r1, r3
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f000 fae8 	bl	8004078 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aaa:	3301      	adds	r3, #1
 8003aac:	627b      	str	r3, [r7, #36]	; 0x24
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d3ce      	bcc.n	8003a56 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	695a      	ldr	r2, [r3, #20]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003ac6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4618      	mov	r0, r3
 8003ace:	f004 fc21 	bl	8008314 <USB_ReadInterrupts>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ad8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003adc:	d155      	bne.n	8003b8a <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003ade:	2301      	movs	r3, #1
 8003ae0:	627b      	str	r3, [r7, #36]	; 0x24
 8003ae2:	e045      	b.n	8003b70 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae6:	015a      	lsls	r2, r3, #5
 8003ae8:	69fb      	ldr	r3, [r7, #28]
 8003aea:	4413      	add	r3, r2
 8003aec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003af4:	6879      	ldr	r1, [r7, #4]
 8003af6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003af8:	4613      	mov	r3, r2
 8003afa:	00db      	lsls	r3, r3, #3
 8003afc:	4413      	add	r3, r2
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	440b      	add	r3, r1
 8003b02:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003b06:	781b      	ldrb	r3, [r3, #0]
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	d12e      	bne.n	8003b6a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003b0c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	da2b      	bge.n	8003b6a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003b12:	69bb      	ldr	r3, [r7, #24]
 8003b14:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003b1e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003b22:	429a      	cmp	r2, r3
 8003b24:	d121      	bne.n	8003b6a <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003b26:	6879      	ldr	r1, [r7, #4]
 8003b28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b2a:	4613      	mov	r3, r2
 8003b2c:	00db      	lsls	r3, r3, #3
 8003b2e:	4413      	add	r3, r2
 8003b30:	009b      	lsls	r3, r3, #2
 8003b32:	440b      	add	r3, r1
 8003b34:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003b38:	2201      	movs	r2, #1
 8003b3a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003b3c:	6a3b      	ldr	r3, [r7, #32]
 8003b3e:	699b      	ldr	r3, [r3, #24]
 8003b40:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003b44:	6a3b      	ldr	r3, [r7, #32]
 8003b46:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003b48:	6a3b      	ldr	r3, [r7, #32]
 8003b4a:	695b      	ldr	r3, [r3, #20]
 8003b4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d10a      	bne.n	8003b6a <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003b54:	69fb      	ldr	r3, [r7, #28]
 8003b56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	69fa      	ldr	r2, [r7, #28]
 8003b5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b66:	6053      	str	r3, [r2, #4]
            break;
 8003b68:	e007      	b.n	8003b7a <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b6c:	3301      	adds	r3, #1
 8003b6e:	627b      	str	r3, [r7, #36]	; 0x24
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b76:	429a      	cmp	r2, r3
 8003b78:	d3b4      	bcc.n	8003ae4 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	695a      	ldr	r2, [r3, #20]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003b88:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f004 fbc0 	bl	8008314 <USB_ReadInterrupts>
 8003b94:	4603      	mov	r3, r0
 8003b96:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003b9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b9e:	d10a      	bne.n	8003bb6 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003ba0:	6878      	ldr	r0, [r7, #4]
 8003ba2:	f00a f97b 	bl	800de9c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	695a      	ldr	r2, [r3, #20]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003bb4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f004 fbaa 	bl	8008314 <USB_ReadInterrupts>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	f003 0304 	and.w	r3, r3, #4
 8003bc6:	2b04      	cmp	r3, #4
 8003bc8:	d115      	bne.n	8003bf6 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003bd2:	69bb      	ldr	r3, [r7, #24]
 8003bd4:	f003 0304 	and.w	r3, r3, #4
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d002      	beq.n	8003be2 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003bdc:	6878      	ldr	r0, [r7, #4]
 8003bde:	f00a f96b 	bl	800deb8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	6859      	ldr	r1, [r3, #4]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	69ba      	ldr	r2, [r7, #24]
 8003bee:	430a      	orrs	r2, r1
 8003bf0:	605a      	str	r2, [r3, #4]
 8003bf2:	e000      	b.n	8003bf6 <HAL_PCD_IRQHandler+0x938>
      return;
 8003bf4:	bf00      	nop
    }
  }
}
 8003bf6:	3734      	adds	r7, #52	; 0x34
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd90      	pop	{r4, r7, pc}

08003bfc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b082      	sub	sp, #8
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
 8003c04:	460b      	mov	r3, r1
 8003c06:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d101      	bne.n	8003c16 <HAL_PCD_SetAddress+0x1a>
 8003c12:	2302      	movs	r3, #2
 8003c14:	e013      	b.n	8003c3e <HAL_PCD_SetAddress+0x42>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2201      	movs	r2, #1
 8003c1a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	78fa      	ldrb	r2, [r7, #3]
 8003c22:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	78fa      	ldrb	r2, [r7, #3]
 8003c2c:	4611      	mov	r1, r2
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f004 fb08 	bl	8008244 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2200      	movs	r2, #0
 8003c38:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003c3c:	2300      	movs	r3, #0
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3708      	adds	r7, #8
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}

08003c46 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003c46:	b580      	push	{r7, lr}
 8003c48:	b084      	sub	sp, #16
 8003c4a:	af00      	add	r7, sp, #0
 8003c4c:	6078      	str	r0, [r7, #4]
 8003c4e:	4608      	mov	r0, r1
 8003c50:	4611      	mov	r1, r2
 8003c52:	461a      	mov	r2, r3
 8003c54:	4603      	mov	r3, r0
 8003c56:	70fb      	strb	r3, [r7, #3]
 8003c58:	460b      	mov	r3, r1
 8003c5a:	803b      	strh	r3, [r7, #0]
 8003c5c:	4613      	mov	r3, r2
 8003c5e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003c60:	2300      	movs	r3, #0
 8003c62:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003c64:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	da0f      	bge.n	8003c8c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c6c:	78fb      	ldrb	r3, [r7, #3]
 8003c6e:	f003 020f 	and.w	r2, r3, #15
 8003c72:	4613      	mov	r3, r2
 8003c74:	00db      	lsls	r3, r3, #3
 8003c76:	4413      	add	r3, r2
 8003c78:	009b      	lsls	r3, r3, #2
 8003c7a:	3338      	adds	r3, #56	; 0x38
 8003c7c:	687a      	ldr	r2, [r7, #4]
 8003c7e:	4413      	add	r3, r2
 8003c80:	3304      	adds	r3, #4
 8003c82:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2201      	movs	r2, #1
 8003c88:	705a      	strb	r2, [r3, #1]
 8003c8a:	e00f      	b.n	8003cac <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c8c:	78fb      	ldrb	r3, [r7, #3]
 8003c8e:	f003 020f 	and.w	r2, r3, #15
 8003c92:	4613      	mov	r3, r2
 8003c94:	00db      	lsls	r3, r3, #3
 8003c96:	4413      	add	r3, r2
 8003c98:	009b      	lsls	r3, r3, #2
 8003c9a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	4413      	add	r3, r2
 8003ca2:	3304      	adds	r3, #4
 8003ca4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003cac:	78fb      	ldrb	r3, [r7, #3]
 8003cae:	f003 030f 	and.w	r3, r3, #15
 8003cb2:	b2da      	uxtb	r2, r3
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003cb8:	883a      	ldrh	r2, [r7, #0]
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	78ba      	ldrb	r2, [r7, #2]
 8003cc2:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	785b      	ldrb	r3, [r3, #1]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d004      	beq.n	8003cd6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	781b      	ldrb	r3, [r3, #0]
 8003cd0:	b29a      	uxth	r2, r3
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003cd6:	78bb      	ldrb	r3, [r7, #2]
 8003cd8:	2b02      	cmp	r3, #2
 8003cda:	d102      	bne.n	8003ce2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	d101      	bne.n	8003cf0 <HAL_PCD_EP_Open+0xaa>
 8003cec:	2302      	movs	r3, #2
 8003cee:	e00e      	b.n	8003d0e <HAL_PCD_EP_Open+0xc8>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	68f9      	ldr	r1, [r7, #12]
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f003 fb88 	bl	8007414 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2200      	movs	r2, #0
 8003d08:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003d0c:	7afb      	ldrb	r3, [r7, #11]
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3710      	adds	r7, #16
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}

08003d16 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d16:	b580      	push	{r7, lr}
 8003d18:	b084      	sub	sp, #16
 8003d1a:	af00      	add	r7, sp, #0
 8003d1c:	6078      	str	r0, [r7, #4]
 8003d1e:	460b      	mov	r3, r1
 8003d20:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003d22:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	da0f      	bge.n	8003d4a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d2a:	78fb      	ldrb	r3, [r7, #3]
 8003d2c:	f003 020f 	and.w	r2, r3, #15
 8003d30:	4613      	mov	r3, r2
 8003d32:	00db      	lsls	r3, r3, #3
 8003d34:	4413      	add	r3, r2
 8003d36:	009b      	lsls	r3, r3, #2
 8003d38:	3338      	adds	r3, #56	; 0x38
 8003d3a:	687a      	ldr	r2, [r7, #4]
 8003d3c:	4413      	add	r3, r2
 8003d3e:	3304      	adds	r3, #4
 8003d40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2201      	movs	r2, #1
 8003d46:	705a      	strb	r2, [r3, #1]
 8003d48:	e00f      	b.n	8003d6a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d4a:	78fb      	ldrb	r3, [r7, #3]
 8003d4c:	f003 020f 	and.w	r2, r3, #15
 8003d50:	4613      	mov	r3, r2
 8003d52:	00db      	lsls	r3, r3, #3
 8003d54:	4413      	add	r3, r2
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003d5c:	687a      	ldr	r2, [r7, #4]
 8003d5e:	4413      	add	r3, r2
 8003d60:	3304      	adds	r3, #4
 8003d62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2200      	movs	r2, #0
 8003d68:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003d6a:	78fb      	ldrb	r3, [r7, #3]
 8003d6c:	f003 030f 	and.w	r3, r3, #15
 8003d70:	b2da      	uxtb	r2, r3
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d101      	bne.n	8003d84 <HAL_PCD_EP_Close+0x6e>
 8003d80:	2302      	movs	r3, #2
 8003d82:	e00e      	b.n	8003da2 <HAL_PCD_EP_Close+0x8c>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2201      	movs	r2, #1
 8003d88:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	68f9      	ldr	r1, [r7, #12]
 8003d92:	4618      	mov	r0, r3
 8003d94:	f003 fbc6 	bl	8007524 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003da0:	2300      	movs	r3, #0
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3710      	adds	r7, #16
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}

08003daa <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003daa:	b580      	push	{r7, lr}
 8003dac:	b086      	sub	sp, #24
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	60f8      	str	r0, [r7, #12]
 8003db2:	607a      	str	r2, [r7, #4]
 8003db4:	603b      	str	r3, [r7, #0]
 8003db6:	460b      	mov	r3, r1
 8003db8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003dba:	7afb      	ldrb	r3, [r7, #11]
 8003dbc:	f003 020f 	and.w	r2, r3, #15
 8003dc0:	4613      	mov	r3, r2
 8003dc2:	00db      	lsls	r3, r3, #3
 8003dc4:	4413      	add	r3, r2
 8003dc6:	009b      	lsls	r3, r3, #2
 8003dc8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003dcc:	68fa      	ldr	r2, [r7, #12]
 8003dce:	4413      	add	r3, r2
 8003dd0:	3304      	adds	r3, #4
 8003dd2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	687a      	ldr	r2, [r7, #4]
 8003dd8:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	683a      	ldr	r2, [r7, #0]
 8003dde:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	2200      	movs	r2, #0
 8003de4:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	2200      	movs	r2, #0
 8003dea:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003dec:	7afb      	ldrb	r3, [r7, #11]
 8003dee:	f003 030f 	and.w	r3, r3, #15
 8003df2:	b2da      	uxtb	r2, r3
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	691b      	ldr	r3, [r3, #16]
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d102      	bne.n	8003e06 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003e00:	687a      	ldr	r2, [r7, #4]
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003e06:	7afb      	ldrb	r3, [r7, #11]
 8003e08:	f003 030f 	and.w	r3, r3, #15
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d109      	bne.n	8003e24 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	6818      	ldr	r0, [r3, #0]
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	691b      	ldr	r3, [r3, #16]
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	461a      	mov	r2, r3
 8003e1c:	6979      	ldr	r1, [r7, #20]
 8003e1e:	f003 fea5 	bl	8007b6c <USB_EP0StartXfer>
 8003e22:	e008      	b.n	8003e36 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	6818      	ldr	r0, [r3, #0]
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	691b      	ldr	r3, [r3, #16]
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	461a      	mov	r2, r3
 8003e30:	6979      	ldr	r1, [r7, #20]
 8003e32:	f003 fc53 	bl	80076dc <USB_EPStartXfer>
  }

  return HAL_OK;
 8003e36:	2300      	movs	r3, #0
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	3718      	adds	r7, #24
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}

08003e40 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b083      	sub	sp, #12
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
 8003e48:	460b      	mov	r3, r1
 8003e4a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003e4c:	78fb      	ldrb	r3, [r7, #3]
 8003e4e:	f003 020f 	and.w	r2, r3, #15
 8003e52:	6879      	ldr	r1, [r7, #4]
 8003e54:	4613      	mov	r3, r2
 8003e56:	00db      	lsls	r3, r3, #3
 8003e58:	4413      	add	r3, r2
 8003e5a:	009b      	lsls	r3, r3, #2
 8003e5c:	440b      	add	r3, r1
 8003e5e:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8003e62:	681b      	ldr	r3, [r3, #0]
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	370c      	adds	r7, #12
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6e:	4770      	bx	lr

08003e70 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b086      	sub	sp, #24
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	60f8      	str	r0, [r7, #12]
 8003e78:	607a      	str	r2, [r7, #4]
 8003e7a:	603b      	str	r3, [r7, #0]
 8003e7c:	460b      	mov	r3, r1
 8003e7e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e80:	7afb      	ldrb	r3, [r7, #11]
 8003e82:	f003 020f 	and.w	r2, r3, #15
 8003e86:	4613      	mov	r3, r2
 8003e88:	00db      	lsls	r3, r3, #3
 8003e8a:	4413      	add	r3, r2
 8003e8c:	009b      	lsls	r3, r3, #2
 8003e8e:	3338      	adds	r3, #56	; 0x38
 8003e90:	68fa      	ldr	r2, [r7, #12]
 8003e92:	4413      	add	r3, r2
 8003e94:	3304      	adds	r3, #4
 8003e96:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	687a      	ldr	r2, [r7, #4]
 8003e9c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	683a      	ldr	r2, [r7, #0]
 8003ea2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	2201      	movs	r2, #1
 8003eae:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003eb0:	7afb      	ldrb	r3, [r7, #11]
 8003eb2:	f003 030f 	and.w	r3, r3, #15
 8003eb6:	b2da      	uxtb	r2, r3
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	691b      	ldr	r3, [r3, #16]
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d102      	bne.n	8003eca <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003ec4:	687a      	ldr	r2, [r7, #4]
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003eca:	7afb      	ldrb	r3, [r7, #11]
 8003ecc:	f003 030f 	and.w	r3, r3, #15
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d109      	bne.n	8003ee8 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	6818      	ldr	r0, [r3, #0]
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	691b      	ldr	r3, [r3, #16]
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	461a      	mov	r2, r3
 8003ee0:	6979      	ldr	r1, [r7, #20]
 8003ee2:	f003 fe43 	bl	8007b6c <USB_EP0StartXfer>
 8003ee6:	e008      	b.n	8003efa <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	6818      	ldr	r0, [r3, #0]
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	691b      	ldr	r3, [r3, #16]
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	461a      	mov	r2, r3
 8003ef4:	6979      	ldr	r1, [r7, #20]
 8003ef6:	f003 fbf1 	bl	80076dc <USB_EPStartXfer>
  }

  return HAL_OK;
 8003efa:	2300      	movs	r3, #0
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	3718      	adds	r7, #24
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}

08003f04 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b084      	sub	sp, #16
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
 8003f0c:	460b      	mov	r3, r1
 8003f0e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003f10:	78fb      	ldrb	r3, [r7, #3]
 8003f12:	f003 020f 	and.w	r2, r3, #15
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	429a      	cmp	r2, r3
 8003f1c:	d901      	bls.n	8003f22 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e050      	b.n	8003fc4 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003f22:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	da0f      	bge.n	8003f4a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f2a:	78fb      	ldrb	r3, [r7, #3]
 8003f2c:	f003 020f 	and.w	r2, r3, #15
 8003f30:	4613      	mov	r3, r2
 8003f32:	00db      	lsls	r3, r3, #3
 8003f34:	4413      	add	r3, r2
 8003f36:	009b      	lsls	r3, r3, #2
 8003f38:	3338      	adds	r3, #56	; 0x38
 8003f3a:	687a      	ldr	r2, [r7, #4]
 8003f3c:	4413      	add	r3, r2
 8003f3e:	3304      	adds	r3, #4
 8003f40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2201      	movs	r2, #1
 8003f46:	705a      	strb	r2, [r3, #1]
 8003f48:	e00d      	b.n	8003f66 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003f4a:	78fa      	ldrb	r2, [r7, #3]
 8003f4c:	4613      	mov	r3, r2
 8003f4e:	00db      	lsls	r3, r3, #3
 8003f50:	4413      	add	r3, r2
 8003f52:	009b      	lsls	r3, r3, #2
 8003f54:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003f58:	687a      	ldr	r2, [r7, #4]
 8003f5a:	4413      	add	r3, r2
 8003f5c:	3304      	adds	r3, #4
 8003f5e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2200      	movs	r2, #0
 8003f64:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2201      	movs	r2, #1
 8003f6a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f6c:	78fb      	ldrb	r3, [r7, #3]
 8003f6e:	f003 030f 	and.w	r3, r3, #15
 8003f72:	b2da      	uxtb	r2, r3
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003f7e:	2b01      	cmp	r3, #1
 8003f80:	d101      	bne.n	8003f86 <HAL_PCD_EP_SetStall+0x82>
 8003f82:	2302      	movs	r3, #2
 8003f84:	e01e      	b.n	8003fc4 <HAL_PCD_EP_SetStall+0xc0>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2201      	movs	r2, #1
 8003f8a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	68f9      	ldr	r1, [r7, #12]
 8003f94:	4618      	mov	r0, r3
 8003f96:	f004 f881 	bl	800809c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003f9a:	78fb      	ldrb	r3, [r7, #3]
 8003f9c:	f003 030f 	and.w	r3, r3, #15
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d10a      	bne.n	8003fba <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6818      	ldr	r0, [r3, #0]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	691b      	ldr	r3, [r3, #16]
 8003fac:	b2d9      	uxtb	r1, r3
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003fb4:	461a      	mov	r2, r3
 8003fb6:	f004 fa71 	bl	800849c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003fc2:	2300      	movs	r3, #0
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	3710      	adds	r7, #16
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}

08003fcc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b084      	sub	sp, #16
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
 8003fd4:	460b      	mov	r3, r1
 8003fd6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003fd8:	78fb      	ldrb	r3, [r7, #3]
 8003fda:	f003 020f 	and.w	r2, r3, #15
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	d901      	bls.n	8003fea <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e042      	b.n	8004070 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003fea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	da0f      	bge.n	8004012 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ff2:	78fb      	ldrb	r3, [r7, #3]
 8003ff4:	f003 020f 	and.w	r2, r3, #15
 8003ff8:	4613      	mov	r3, r2
 8003ffa:	00db      	lsls	r3, r3, #3
 8003ffc:	4413      	add	r3, r2
 8003ffe:	009b      	lsls	r3, r3, #2
 8004000:	3338      	adds	r3, #56	; 0x38
 8004002:	687a      	ldr	r2, [r7, #4]
 8004004:	4413      	add	r3, r2
 8004006:	3304      	adds	r3, #4
 8004008:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2201      	movs	r2, #1
 800400e:	705a      	strb	r2, [r3, #1]
 8004010:	e00f      	b.n	8004032 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004012:	78fb      	ldrb	r3, [r7, #3]
 8004014:	f003 020f 	and.w	r2, r3, #15
 8004018:	4613      	mov	r3, r2
 800401a:	00db      	lsls	r3, r3, #3
 800401c:	4413      	add	r3, r2
 800401e:	009b      	lsls	r3, r3, #2
 8004020:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004024:	687a      	ldr	r2, [r7, #4]
 8004026:	4413      	add	r3, r2
 8004028:	3304      	adds	r3, #4
 800402a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2200      	movs	r2, #0
 8004030:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2200      	movs	r2, #0
 8004036:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004038:	78fb      	ldrb	r3, [r7, #3]
 800403a:	f003 030f 	and.w	r3, r3, #15
 800403e:	b2da      	uxtb	r2, r3
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800404a:	2b01      	cmp	r3, #1
 800404c:	d101      	bne.n	8004052 <HAL_PCD_EP_ClrStall+0x86>
 800404e:	2302      	movs	r3, #2
 8004050:	e00e      	b.n	8004070 <HAL_PCD_EP_ClrStall+0xa4>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2201      	movs	r2, #1
 8004056:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	68f9      	ldr	r1, [r7, #12]
 8004060:	4618      	mov	r0, r3
 8004062:	f004 f889 	bl	8008178 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2200      	movs	r2, #0
 800406a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800406e:	2300      	movs	r3, #0
}
 8004070:	4618      	mov	r0, r3
 8004072:	3710      	adds	r7, #16
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}

08004078 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b084      	sub	sp, #16
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
 8004080:	460b      	mov	r3, r1
 8004082:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004084:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004088:	2b00      	cmp	r3, #0
 800408a:	da0c      	bge.n	80040a6 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800408c:	78fb      	ldrb	r3, [r7, #3]
 800408e:	f003 020f 	and.w	r2, r3, #15
 8004092:	4613      	mov	r3, r2
 8004094:	00db      	lsls	r3, r3, #3
 8004096:	4413      	add	r3, r2
 8004098:	009b      	lsls	r3, r3, #2
 800409a:	3338      	adds	r3, #56	; 0x38
 800409c:	687a      	ldr	r2, [r7, #4]
 800409e:	4413      	add	r3, r2
 80040a0:	3304      	adds	r3, #4
 80040a2:	60fb      	str	r3, [r7, #12]
 80040a4:	e00c      	b.n	80040c0 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80040a6:	78fb      	ldrb	r3, [r7, #3]
 80040a8:	f003 020f 	and.w	r2, r3, #15
 80040ac:	4613      	mov	r3, r2
 80040ae:	00db      	lsls	r3, r3, #3
 80040b0:	4413      	add	r3, r2
 80040b2:	009b      	lsls	r3, r3, #2
 80040b4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80040b8:	687a      	ldr	r2, [r7, #4]
 80040ba:	4413      	add	r3, r2
 80040bc:	3304      	adds	r3, #4
 80040be:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	68f9      	ldr	r1, [r7, #12]
 80040c6:	4618      	mov	r0, r3
 80040c8:	f003 fea8 	bl	8007e1c <USB_EPStopXfer>
 80040cc:	4603      	mov	r3, r0
 80040ce:	72fb      	strb	r3, [r7, #11]

  return ret;
 80040d0:	7afb      	ldrb	r3, [r7, #11]
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3710      	adds	r7, #16
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}

080040da <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80040da:	b580      	push	{r7, lr}
 80040dc:	b08a      	sub	sp, #40	; 0x28
 80040de:	af02      	add	r7, sp, #8
 80040e0:	6078      	str	r0, [r7, #4]
 80040e2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80040ee:	683a      	ldr	r2, [r7, #0]
 80040f0:	4613      	mov	r3, r2
 80040f2:	00db      	lsls	r3, r3, #3
 80040f4:	4413      	add	r3, r2
 80040f6:	009b      	lsls	r3, r3, #2
 80040f8:	3338      	adds	r3, #56	; 0x38
 80040fa:	687a      	ldr	r2, [r7, #4]
 80040fc:	4413      	add	r3, r2
 80040fe:	3304      	adds	r3, #4
 8004100:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	6a1a      	ldr	r2, [r3, #32]
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	699b      	ldr	r3, [r3, #24]
 800410a:	429a      	cmp	r2, r3
 800410c:	d901      	bls.n	8004112 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	e06c      	b.n	80041ec <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	699a      	ldr	r2, [r3, #24]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	6a1b      	ldr	r3, [r3, #32]
 800411a:	1ad3      	subs	r3, r2, r3
 800411c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	68db      	ldr	r3, [r3, #12]
 8004122:	69fa      	ldr	r2, [r7, #28]
 8004124:	429a      	cmp	r2, r3
 8004126:	d902      	bls.n	800412e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800412e:	69fb      	ldr	r3, [r7, #28]
 8004130:	3303      	adds	r3, #3
 8004132:	089b      	lsrs	r3, r3, #2
 8004134:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004136:	e02b      	b.n	8004190 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	699a      	ldr	r2, [r3, #24]
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	6a1b      	ldr	r3, [r3, #32]
 8004140:	1ad3      	subs	r3, r2, r3
 8004142:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	68db      	ldr	r3, [r3, #12]
 8004148:	69fa      	ldr	r2, [r7, #28]
 800414a:	429a      	cmp	r2, r3
 800414c:	d902      	bls.n	8004154 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	68db      	ldr	r3, [r3, #12]
 8004152:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004154:	69fb      	ldr	r3, [r7, #28]
 8004156:	3303      	adds	r3, #3
 8004158:	089b      	lsrs	r3, r3, #2
 800415a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	6919      	ldr	r1, [r3, #16]
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	b2da      	uxtb	r2, r3
 8004164:	69fb      	ldr	r3, [r7, #28]
 8004166:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800416c:	b2db      	uxtb	r3, r3
 800416e:	9300      	str	r3, [sp, #0]
 8004170:	4603      	mov	r3, r0
 8004172:	6978      	ldr	r0, [r7, #20]
 8004174:	f003 fefc 	bl	8007f70 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	691a      	ldr	r2, [r3, #16]
 800417c:	69fb      	ldr	r3, [r7, #28]
 800417e:	441a      	add	r2, r3
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	6a1a      	ldr	r2, [r3, #32]
 8004188:	69fb      	ldr	r3, [r7, #28]
 800418a:	441a      	add	r2, r3
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	015a      	lsls	r2, r3, #5
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	4413      	add	r3, r2
 8004198:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800419c:	699b      	ldr	r3, [r3, #24]
 800419e:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80041a0:	69ba      	ldr	r2, [r7, #24]
 80041a2:	429a      	cmp	r2, r3
 80041a4:	d809      	bhi.n	80041ba <PCD_WriteEmptyTxFifo+0xe0>
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	6a1a      	ldr	r2, [r3, #32]
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80041ae:	429a      	cmp	r2, r3
 80041b0:	d203      	bcs.n	80041ba <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	699b      	ldr	r3, [r3, #24]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d1be      	bne.n	8004138 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	699a      	ldr	r2, [r3, #24]
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	6a1b      	ldr	r3, [r3, #32]
 80041c2:	429a      	cmp	r2, r3
 80041c4:	d811      	bhi.n	80041ea <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	f003 030f 	and.w	r3, r3, #15
 80041cc:	2201      	movs	r2, #1
 80041ce:	fa02 f303 	lsl.w	r3, r2, r3
 80041d2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	43db      	mvns	r3, r3
 80041e0:	6939      	ldr	r1, [r7, #16]
 80041e2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80041e6:	4013      	ands	r3, r2
 80041e8:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80041ea:	2300      	movs	r3, #0
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3720      	adds	r7, #32
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}

080041f4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b088      	sub	sp, #32
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
 80041fc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004204:	69fb      	ldr	r3, [r7, #28]
 8004206:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004208:	69fb      	ldr	r3, [r7, #28]
 800420a:	333c      	adds	r3, #60	; 0x3c
 800420c:	3304      	adds	r3, #4
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	015a      	lsls	r2, r3, #5
 8004216:	69bb      	ldr	r3, [r7, #24]
 8004218:	4413      	add	r3, r2
 800421a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	691b      	ldr	r3, [r3, #16]
 8004226:	2b01      	cmp	r3, #1
 8004228:	d17b      	bne.n	8004322 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	f003 0308 	and.w	r3, r3, #8
 8004230:	2b00      	cmp	r3, #0
 8004232:	d015      	beq.n	8004260 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	4a61      	ldr	r2, [pc, #388]	; (80043bc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004238:	4293      	cmp	r3, r2
 800423a:	f240 80b9 	bls.w	80043b0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004244:	2b00      	cmp	r3, #0
 8004246:	f000 80b3 	beq.w	80043b0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	015a      	lsls	r2, r3, #5
 800424e:	69bb      	ldr	r3, [r7, #24]
 8004250:	4413      	add	r3, r2
 8004252:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004256:	461a      	mov	r2, r3
 8004258:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800425c:	6093      	str	r3, [r2, #8]
 800425e:	e0a7      	b.n	80043b0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	f003 0320 	and.w	r3, r3, #32
 8004266:	2b00      	cmp	r3, #0
 8004268:	d009      	beq.n	800427e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	015a      	lsls	r2, r3, #5
 800426e:	69bb      	ldr	r3, [r7, #24]
 8004270:	4413      	add	r3, r2
 8004272:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004276:	461a      	mov	r2, r3
 8004278:	2320      	movs	r3, #32
 800427a:	6093      	str	r3, [r2, #8]
 800427c:	e098      	b.n	80043b0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004284:	2b00      	cmp	r3, #0
 8004286:	f040 8093 	bne.w	80043b0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	4a4b      	ldr	r2, [pc, #300]	; (80043bc <PCD_EP_OutXfrComplete_int+0x1c8>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d90f      	bls.n	80042b2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004298:	2b00      	cmp	r3, #0
 800429a:	d00a      	beq.n	80042b2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	015a      	lsls	r2, r3, #5
 80042a0:	69bb      	ldr	r3, [r7, #24]
 80042a2:	4413      	add	r3, r2
 80042a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042a8:	461a      	mov	r2, r3
 80042aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042ae:	6093      	str	r3, [r2, #8]
 80042b0:	e07e      	b.n	80043b0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80042b2:	683a      	ldr	r2, [r7, #0]
 80042b4:	4613      	mov	r3, r2
 80042b6:	00db      	lsls	r3, r3, #3
 80042b8:	4413      	add	r3, r2
 80042ba:	009b      	lsls	r3, r3, #2
 80042bc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80042c0:	687a      	ldr	r2, [r7, #4]
 80042c2:	4413      	add	r3, r2
 80042c4:	3304      	adds	r3, #4
 80042c6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	69da      	ldr	r2, [r3, #28]
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	0159      	lsls	r1, r3, #5
 80042d0:	69bb      	ldr	r3, [r7, #24]
 80042d2:	440b      	add	r3, r1
 80042d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042d8:	691b      	ldr	r3, [r3, #16]
 80042da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042de:	1ad2      	subs	r2, r2, r3
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d114      	bne.n	8004314 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	699b      	ldr	r3, [r3, #24]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d109      	bne.n	8004306 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6818      	ldr	r0, [r3, #0]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80042fc:	461a      	mov	r2, r3
 80042fe:	2101      	movs	r1, #1
 8004300:	f004 f8cc 	bl	800849c <USB_EP0_OutStart>
 8004304:	e006      	b.n	8004314 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	691a      	ldr	r2, [r3, #16]
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	6a1b      	ldr	r3, [r3, #32]
 800430e:	441a      	add	r2, r3
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	b2db      	uxtb	r3, r3
 8004318:	4619      	mov	r1, r3
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f009 fd04 	bl	800dd28 <HAL_PCD_DataOutStageCallback>
 8004320:	e046      	b.n	80043b0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	4a26      	ldr	r2, [pc, #152]	; (80043c0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d124      	bne.n	8004374 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004330:	2b00      	cmp	r3, #0
 8004332:	d00a      	beq.n	800434a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	015a      	lsls	r2, r3, #5
 8004338:	69bb      	ldr	r3, [r7, #24]
 800433a:	4413      	add	r3, r2
 800433c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004340:	461a      	mov	r2, r3
 8004342:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004346:	6093      	str	r3, [r2, #8]
 8004348:	e032      	b.n	80043b0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	f003 0320 	and.w	r3, r3, #32
 8004350:	2b00      	cmp	r3, #0
 8004352:	d008      	beq.n	8004366 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	015a      	lsls	r2, r3, #5
 8004358:	69bb      	ldr	r3, [r7, #24]
 800435a:	4413      	add	r3, r2
 800435c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004360:	461a      	mov	r2, r3
 8004362:	2320      	movs	r3, #32
 8004364:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	b2db      	uxtb	r3, r3
 800436a:	4619      	mov	r1, r3
 800436c:	6878      	ldr	r0, [r7, #4]
 800436e:	f009 fcdb 	bl	800dd28 <HAL_PCD_DataOutStageCallback>
 8004372:	e01d      	b.n	80043b0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d114      	bne.n	80043a4 <PCD_EP_OutXfrComplete_int+0x1b0>
 800437a:	6879      	ldr	r1, [r7, #4]
 800437c:	683a      	ldr	r2, [r7, #0]
 800437e:	4613      	mov	r3, r2
 8004380:	00db      	lsls	r3, r3, #3
 8004382:	4413      	add	r3, r2
 8004384:	009b      	lsls	r3, r3, #2
 8004386:	440b      	add	r3, r1
 8004388:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d108      	bne.n	80043a4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6818      	ldr	r0, [r3, #0]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800439c:	461a      	mov	r2, r3
 800439e:	2100      	movs	r1, #0
 80043a0:	f004 f87c 	bl	800849c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	b2db      	uxtb	r3, r3
 80043a8:	4619      	mov	r1, r3
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f009 fcbc 	bl	800dd28 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80043b0:	2300      	movs	r3, #0
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	3720      	adds	r7, #32
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}
 80043ba:	bf00      	nop
 80043bc:	4f54300a 	.word	0x4f54300a
 80043c0:	4f54310a 	.word	0x4f54310a

080043c4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b086      	sub	sp, #24
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
 80043cc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	333c      	adds	r3, #60	; 0x3c
 80043dc:	3304      	adds	r3, #4
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	015a      	lsls	r2, r3, #5
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	4413      	add	r3, r2
 80043ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	4a15      	ldr	r2, [pc, #84]	; (800444c <PCD_EP_OutSetupPacket_int+0x88>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d90e      	bls.n	8004418 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004400:	2b00      	cmp	r3, #0
 8004402:	d009      	beq.n	8004418 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	015a      	lsls	r2, r3, #5
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	4413      	add	r3, r2
 800440c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004410:	461a      	mov	r2, r3
 8004412:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004416:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004418:	6878      	ldr	r0, [r7, #4]
 800441a:	f009 fc73 	bl	800dd04 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	4a0a      	ldr	r2, [pc, #40]	; (800444c <PCD_EP_OutSetupPacket_int+0x88>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d90c      	bls.n	8004440 <PCD_EP_OutSetupPacket_int+0x7c>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	691b      	ldr	r3, [r3, #16]
 800442a:	2b01      	cmp	r3, #1
 800442c:	d108      	bne.n	8004440 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6818      	ldr	r0, [r3, #0]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004438:	461a      	mov	r2, r3
 800443a:	2101      	movs	r1, #1
 800443c:	f004 f82e 	bl	800849c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004440:	2300      	movs	r3, #0
}
 8004442:	4618      	mov	r0, r3
 8004444:	3718      	adds	r7, #24
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}
 800444a:	bf00      	nop
 800444c:	4f54300a 	.word	0x4f54300a

08004450 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004450:	b480      	push	{r7}
 8004452:	b085      	sub	sp, #20
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
 8004458:	460b      	mov	r3, r1
 800445a:	70fb      	strb	r3, [r7, #3]
 800445c:	4613      	mov	r3, r2
 800445e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004466:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004468:	78fb      	ldrb	r3, [r7, #3]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d107      	bne.n	800447e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800446e:	883b      	ldrh	r3, [r7, #0]
 8004470:	0419      	lsls	r1, r3, #16
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	68ba      	ldr	r2, [r7, #8]
 8004478:	430a      	orrs	r2, r1
 800447a:	629a      	str	r2, [r3, #40]	; 0x28
 800447c:	e028      	b.n	80044d0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004484:	0c1b      	lsrs	r3, r3, #16
 8004486:	68ba      	ldr	r2, [r7, #8]
 8004488:	4413      	add	r3, r2
 800448a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800448c:	2300      	movs	r3, #0
 800448e:	73fb      	strb	r3, [r7, #15]
 8004490:	e00d      	b.n	80044ae <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	7bfb      	ldrb	r3, [r7, #15]
 8004498:	3340      	adds	r3, #64	; 0x40
 800449a:	009b      	lsls	r3, r3, #2
 800449c:	4413      	add	r3, r2
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	0c1b      	lsrs	r3, r3, #16
 80044a2:	68ba      	ldr	r2, [r7, #8]
 80044a4:	4413      	add	r3, r2
 80044a6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80044a8:	7bfb      	ldrb	r3, [r7, #15]
 80044aa:	3301      	adds	r3, #1
 80044ac:	73fb      	strb	r3, [r7, #15]
 80044ae:	7bfa      	ldrb	r2, [r7, #15]
 80044b0:	78fb      	ldrb	r3, [r7, #3]
 80044b2:	3b01      	subs	r3, #1
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d3ec      	bcc.n	8004492 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80044b8:	883b      	ldrh	r3, [r7, #0]
 80044ba:	0418      	lsls	r0, r3, #16
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6819      	ldr	r1, [r3, #0]
 80044c0:	78fb      	ldrb	r3, [r7, #3]
 80044c2:	3b01      	subs	r3, #1
 80044c4:	68ba      	ldr	r2, [r7, #8]
 80044c6:	4302      	orrs	r2, r0
 80044c8:	3340      	adds	r3, #64	; 0x40
 80044ca:	009b      	lsls	r3, r3, #2
 80044cc:	440b      	add	r3, r1
 80044ce:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80044d0:	2300      	movs	r3, #0
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3714      	adds	r7, #20
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr

080044de <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80044de:	b480      	push	{r7}
 80044e0:	b083      	sub	sp, #12
 80044e2:	af00      	add	r7, sp, #0
 80044e4:	6078      	str	r0, [r7, #4]
 80044e6:	460b      	mov	r3, r1
 80044e8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	887a      	ldrh	r2, [r7, #2]
 80044f0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80044f2:	2300      	movs	r3, #0
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	370c      	adds	r7, #12
 80044f8:	46bd      	mov	sp, r7
 80044fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fe:	4770      	bx	lr

08004500 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004500:	b480      	push	{r7}
 8004502:	b083      	sub	sp, #12
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
 8004508:	460b      	mov	r3, r1
 800450a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800450c:	bf00      	nop
 800450e:	370c      	adds	r7, #12
 8004510:	46bd      	mov	sp, r7
 8004512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004516:	4770      	bx	lr

08004518 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b086      	sub	sp, #24
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d101      	bne.n	800452a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	e267      	b.n	80049fa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 0301 	and.w	r3, r3, #1
 8004532:	2b00      	cmp	r3, #0
 8004534:	d075      	beq.n	8004622 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004536:	4b88      	ldr	r3, [pc, #544]	; (8004758 <HAL_RCC_OscConfig+0x240>)
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	f003 030c 	and.w	r3, r3, #12
 800453e:	2b04      	cmp	r3, #4
 8004540:	d00c      	beq.n	800455c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004542:	4b85      	ldr	r3, [pc, #532]	; (8004758 <HAL_RCC_OscConfig+0x240>)
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800454a:	2b08      	cmp	r3, #8
 800454c:	d112      	bne.n	8004574 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800454e:	4b82      	ldr	r3, [pc, #520]	; (8004758 <HAL_RCC_OscConfig+0x240>)
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004556:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800455a:	d10b      	bne.n	8004574 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800455c:	4b7e      	ldr	r3, [pc, #504]	; (8004758 <HAL_RCC_OscConfig+0x240>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004564:	2b00      	cmp	r3, #0
 8004566:	d05b      	beq.n	8004620 <HAL_RCC_OscConfig+0x108>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d157      	bne.n	8004620 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004570:	2301      	movs	r3, #1
 8004572:	e242      	b.n	80049fa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800457c:	d106      	bne.n	800458c <HAL_RCC_OscConfig+0x74>
 800457e:	4b76      	ldr	r3, [pc, #472]	; (8004758 <HAL_RCC_OscConfig+0x240>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a75      	ldr	r2, [pc, #468]	; (8004758 <HAL_RCC_OscConfig+0x240>)
 8004584:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004588:	6013      	str	r3, [r2, #0]
 800458a:	e01d      	b.n	80045c8 <HAL_RCC_OscConfig+0xb0>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004594:	d10c      	bne.n	80045b0 <HAL_RCC_OscConfig+0x98>
 8004596:	4b70      	ldr	r3, [pc, #448]	; (8004758 <HAL_RCC_OscConfig+0x240>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a6f      	ldr	r2, [pc, #444]	; (8004758 <HAL_RCC_OscConfig+0x240>)
 800459c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045a0:	6013      	str	r3, [r2, #0]
 80045a2:	4b6d      	ldr	r3, [pc, #436]	; (8004758 <HAL_RCC_OscConfig+0x240>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a6c      	ldr	r2, [pc, #432]	; (8004758 <HAL_RCC_OscConfig+0x240>)
 80045a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045ac:	6013      	str	r3, [r2, #0]
 80045ae:	e00b      	b.n	80045c8 <HAL_RCC_OscConfig+0xb0>
 80045b0:	4b69      	ldr	r3, [pc, #420]	; (8004758 <HAL_RCC_OscConfig+0x240>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a68      	ldr	r2, [pc, #416]	; (8004758 <HAL_RCC_OscConfig+0x240>)
 80045b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045ba:	6013      	str	r3, [r2, #0]
 80045bc:	4b66      	ldr	r3, [pc, #408]	; (8004758 <HAL_RCC_OscConfig+0x240>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a65      	ldr	r2, [pc, #404]	; (8004758 <HAL_RCC_OscConfig+0x240>)
 80045c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d013      	beq.n	80045f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045d0:	f7fd fa24 	bl	8001a1c <HAL_GetTick>
 80045d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045d6:	e008      	b.n	80045ea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80045d8:	f7fd fa20 	bl	8001a1c <HAL_GetTick>
 80045dc:	4602      	mov	r2, r0
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	1ad3      	subs	r3, r2, r3
 80045e2:	2b64      	cmp	r3, #100	; 0x64
 80045e4:	d901      	bls.n	80045ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80045e6:	2303      	movs	r3, #3
 80045e8:	e207      	b.n	80049fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045ea:	4b5b      	ldr	r3, [pc, #364]	; (8004758 <HAL_RCC_OscConfig+0x240>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d0f0      	beq.n	80045d8 <HAL_RCC_OscConfig+0xc0>
 80045f6:	e014      	b.n	8004622 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045f8:	f7fd fa10 	bl	8001a1c <HAL_GetTick>
 80045fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045fe:	e008      	b.n	8004612 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004600:	f7fd fa0c 	bl	8001a1c <HAL_GetTick>
 8004604:	4602      	mov	r2, r0
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	1ad3      	subs	r3, r2, r3
 800460a:	2b64      	cmp	r3, #100	; 0x64
 800460c:	d901      	bls.n	8004612 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800460e:	2303      	movs	r3, #3
 8004610:	e1f3      	b.n	80049fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004612:	4b51      	ldr	r3, [pc, #324]	; (8004758 <HAL_RCC_OscConfig+0x240>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800461a:	2b00      	cmp	r3, #0
 800461c:	d1f0      	bne.n	8004600 <HAL_RCC_OscConfig+0xe8>
 800461e:	e000      	b.n	8004622 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004620:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f003 0302 	and.w	r3, r3, #2
 800462a:	2b00      	cmp	r3, #0
 800462c:	d063      	beq.n	80046f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800462e:	4b4a      	ldr	r3, [pc, #296]	; (8004758 <HAL_RCC_OscConfig+0x240>)
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	f003 030c 	and.w	r3, r3, #12
 8004636:	2b00      	cmp	r3, #0
 8004638:	d00b      	beq.n	8004652 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800463a:	4b47      	ldr	r3, [pc, #284]	; (8004758 <HAL_RCC_OscConfig+0x240>)
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004642:	2b08      	cmp	r3, #8
 8004644:	d11c      	bne.n	8004680 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004646:	4b44      	ldr	r3, [pc, #272]	; (8004758 <HAL_RCC_OscConfig+0x240>)
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800464e:	2b00      	cmp	r3, #0
 8004650:	d116      	bne.n	8004680 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004652:	4b41      	ldr	r3, [pc, #260]	; (8004758 <HAL_RCC_OscConfig+0x240>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 0302 	and.w	r3, r3, #2
 800465a:	2b00      	cmp	r3, #0
 800465c:	d005      	beq.n	800466a <HAL_RCC_OscConfig+0x152>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	68db      	ldr	r3, [r3, #12]
 8004662:	2b01      	cmp	r3, #1
 8004664:	d001      	beq.n	800466a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	e1c7      	b.n	80049fa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800466a:	4b3b      	ldr	r3, [pc, #236]	; (8004758 <HAL_RCC_OscConfig+0x240>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	691b      	ldr	r3, [r3, #16]
 8004676:	00db      	lsls	r3, r3, #3
 8004678:	4937      	ldr	r1, [pc, #220]	; (8004758 <HAL_RCC_OscConfig+0x240>)
 800467a:	4313      	orrs	r3, r2
 800467c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800467e:	e03a      	b.n	80046f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	68db      	ldr	r3, [r3, #12]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d020      	beq.n	80046ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004688:	4b34      	ldr	r3, [pc, #208]	; (800475c <HAL_RCC_OscConfig+0x244>)
 800468a:	2201      	movs	r2, #1
 800468c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800468e:	f7fd f9c5 	bl	8001a1c <HAL_GetTick>
 8004692:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004694:	e008      	b.n	80046a8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004696:	f7fd f9c1 	bl	8001a1c <HAL_GetTick>
 800469a:	4602      	mov	r2, r0
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	1ad3      	subs	r3, r2, r3
 80046a0:	2b02      	cmp	r3, #2
 80046a2:	d901      	bls.n	80046a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80046a4:	2303      	movs	r3, #3
 80046a6:	e1a8      	b.n	80049fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046a8:	4b2b      	ldr	r3, [pc, #172]	; (8004758 <HAL_RCC_OscConfig+0x240>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f003 0302 	and.w	r3, r3, #2
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d0f0      	beq.n	8004696 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046b4:	4b28      	ldr	r3, [pc, #160]	; (8004758 <HAL_RCC_OscConfig+0x240>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	691b      	ldr	r3, [r3, #16]
 80046c0:	00db      	lsls	r3, r3, #3
 80046c2:	4925      	ldr	r1, [pc, #148]	; (8004758 <HAL_RCC_OscConfig+0x240>)
 80046c4:	4313      	orrs	r3, r2
 80046c6:	600b      	str	r3, [r1, #0]
 80046c8:	e015      	b.n	80046f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046ca:	4b24      	ldr	r3, [pc, #144]	; (800475c <HAL_RCC_OscConfig+0x244>)
 80046cc:	2200      	movs	r2, #0
 80046ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046d0:	f7fd f9a4 	bl	8001a1c <HAL_GetTick>
 80046d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046d6:	e008      	b.n	80046ea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046d8:	f7fd f9a0 	bl	8001a1c <HAL_GetTick>
 80046dc:	4602      	mov	r2, r0
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	1ad3      	subs	r3, r2, r3
 80046e2:	2b02      	cmp	r3, #2
 80046e4:	d901      	bls.n	80046ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80046e6:	2303      	movs	r3, #3
 80046e8:	e187      	b.n	80049fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046ea:	4b1b      	ldr	r3, [pc, #108]	; (8004758 <HAL_RCC_OscConfig+0x240>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f003 0302 	and.w	r3, r3, #2
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d1f0      	bne.n	80046d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f003 0308 	and.w	r3, r3, #8
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d036      	beq.n	8004770 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	695b      	ldr	r3, [r3, #20]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d016      	beq.n	8004738 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800470a:	4b15      	ldr	r3, [pc, #84]	; (8004760 <HAL_RCC_OscConfig+0x248>)
 800470c:	2201      	movs	r2, #1
 800470e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004710:	f7fd f984 	bl	8001a1c <HAL_GetTick>
 8004714:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004716:	e008      	b.n	800472a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004718:	f7fd f980 	bl	8001a1c <HAL_GetTick>
 800471c:	4602      	mov	r2, r0
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	1ad3      	subs	r3, r2, r3
 8004722:	2b02      	cmp	r3, #2
 8004724:	d901      	bls.n	800472a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004726:	2303      	movs	r3, #3
 8004728:	e167      	b.n	80049fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800472a:	4b0b      	ldr	r3, [pc, #44]	; (8004758 <HAL_RCC_OscConfig+0x240>)
 800472c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800472e:	f003 0302 	and.w	r3, r3, #2
 8004732:	2b00      	cmp	r3, #0
 8004734:	d0f0      	beq.n	8004718 <HAL_RCC_OscConfig+0x200>
 8004736:	e01b      	b.n	8004770 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004738:	4b09      	ldr	r3, [pc, #36]	; (8004760 <HAL_RCC_OscConfig+0x248>)
 800473a:	2200      	movs	r2, #0
 800473c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800473e:	f7fd f96d 	bl	8001a1c <HAL_GetTick>
 8004742:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004744:	e00e      	b.n	8004764 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004746:	f7fd f969 	bl	8001a1c <HAL_GetTick>
 800474a:	4602      	mov	r2, r0
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	1ad3      	subs	r3, r2, r3
 8004750:	2b02      	cmp	r3, #2
 8004752:	d907      	bls.n	8004764 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004754:	2303      	movs	r3, #3
 8004756:	e150      	b.n	80049fa <HAL_RCC_OscConfig+0x4e2>
 8004758:	40023800 	.word	0x40023800
 800475c:	42470000 	.word	0x42470000
 8004760:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004764:	4b88      	ldr	r3, [pc, #544]	; (8004988 <HAL_RCC_OscConfig+0x470>)
 8004766:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004768:	f003 0302 	and.w	r3, r3, #2
 800476c:	2b00      	cmp	r3, #0
 800476e:	d1ea      	bne.n	8004746 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f003 0304 	and.w	r3, r3, #4
 8004778:	2b00      	cmp	r3, #0
 800477a:	f000 8097 	beq.w	80048ac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800477e:	2300      	movs	r3, #0
 8004780:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004782:	4b81      	ldr	r3, [pc, #516]	; (8004988 <HAL_RCC_OscConfig+0x470>)
 8004784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004786:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800478a:	2b00      	cmp	r3, #0
 800478c:	d10f      	bne.n	80047ae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800478e:	2300      	movs	r3, #0
 8004790:	60bb      	str	r3, [r7, #8]
 8004792:	4b7d      	ldr	r3, [pc, #500]	; (8004988 <HAL_RCC_OscConfig+0x470>)
 8004794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004796:	4a7c      	ldr	r2, [pc, #496]	; (8004988 <HAL_RCC_OscConfig+0x470>)
 8004798:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800479c:	6413      	str	r3, [r2, #64]	; 0x40
 800479e:	4b7a      	ldr	r3, [pc, #488]	; (8004988 <HAL_RCC_OscConfig+0x470>)
 80047a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047a6:	60bb      	str	r3, [r7, #8]
 80047a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047aa:	2301      	movs	r3, #1
 80047ac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047ae:	4b77      	ldr	r3, [pc, #476]	; (800498c <HAL_RCC_OscConfig+0x474>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d118      	bne.n	80047ec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80047ba:	4b74      	ldr	r3, [pc, #464]	; (800498c <HAL_RCC_OscConfig+0x474>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a73      	ldr	r2, [pc, #460]	; (800498c <HAL_RCC_OscConfig+0x474>)
 80047c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047c6:	f7fd f929 	bl	8001a1c <HAL_GetTick>
 80047ca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047cc:	e008      	b.n	80047e0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047ce:	f7fd f925 	bl	8001a1c <HAL_GetTick>
 80047d2:	4602      	mov	r2, r0
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	1ad3      	subs	r3, r2, r3
 80047d8:	2b02      	cmp	r3, #2
 80047da:	d901      	bls.n	80047e0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80047dc:	2303      	movs	r3, #3
 80047de:	e10c      	b.n	80049fa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047e0:	4b6a      	ldr	r3, [pc, #424]	; (800498c <HAL_RCC_OscConfig+0x474>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d0f0      	beq.n	80047ce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	2b01      	cmp	r3, #1
 80047f2:	d106      	bne.n	8004802 <HAL_RCC_OscConfig+0x2ea>
 80047f4:	4b64      	ldr	r3, [pc, #400]	; (8004988 <HAL_RCC_OscConfig+0x470>)
 80047f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047f8:	4a63      	ldr	r2, [pc, #396]	; (8004988 <HAL_RCC_OscConfig+0x470>)
 80047fa:	f043 0301 	orr.w	r3, r3, #1
 80047fe:	6713      	str	r3, [r2, #112]	; 0x70
 8004800:	e01c      	b.n	800483c <HAL_RCC_OscConfig+0x324>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	2b05      	cmp	r3, #5
 8004808:	d10c      	bne.n	8004824 <HAL_RCC_OscConfig+0x30c>
 800480a:	4b5f      	ldr	r3, [pc, #380]	; (8004988 <HAL_RCC_OscConfig+0x470>)
 800480c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800480e:	4a5e      	ldr	r2, [pc, #376]	; (8004988 <HAL_RCC_OscConfig+0x470>)
 8004810:	f043 0304 	orr.w	r3, r3, #4
 8004814:	6713      	str	r3, [r2, #112]	; 0x70
 8004816:	4b5c      	ldr	r3, [pc, #368]	; (8004988 <HAL_RCC_OscConfig+0x470>)
 8004818:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800481a:	4a5b      	ldr	r2, [pc, #364]	; (8004988 <HAL_RCC_OscConfig+0x470>)
 800481c:	f043 0301 	orr.w	r3, r3, #1
 8004820:	6713      	str	r3, [r2, #112]	; 0x70
 8004822:	e00b      	b.n	800483c <HAL_RCC_OscConfig+0x324>
 8004824:	4b58      	ldr	r3, [pc, #352]	; (8004988 <HAL_RCC_OscConfig+0x470>)
 8004826:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004828:	4a57      	ldr	r2, [pc, #348]	; (8004988 <HAL_RCC_OscConfig+0x470>)
 800482a:	f023 0301 	bic.w	r3, r3, #1
 800482e:	6713      	str	r3, [r2, #112]	; 0x70
 8004830:	4b55      	ldr	r3, [pc, #340]	; (8004988 <HAL_RCC_OscConfig+0x470>)
 8004832:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004834:	4a54      	ldr	r2, [pc, #336]	; (8004988 <HAL_RCC_OscConfig+0x470>)
 8004836:	f023 0304 	bic.w	r3, r3, #4
 800483a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d015      	beq.n	8004870 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004844:	f7fd f8ea 	bl	8001a1c <HAL_GetTick>
 8004848:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800484a:	e00a      	b.n	8004862 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800484c:	f7fd f8e6 	bl	8001a1c <HAL_GetTick>
 8004850:	4602      	mov	r2, r0
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	1ad3      	subs	r3, r2, r3
 8004856:	f241 3288 	movw	r2, #5000	; 0x1388
 800485a:	4293      	cmp	r3, r2
 800485c:	d901      	bls.n	8004862 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800485e:	2303      	movs	r3, #3
 8004860:	e0cb      	b.n	80049fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004862:	4b49      	ldr	r3, [pc, #292]	; (8004988 <HAL_RCC_OscConfig+0x470>)
 8004864:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004866:	f003 0302 	and.w	r3, r3, #2
 800486a:	2b00      	cmp	r3, #0
 800486c:	d0ee      	beq.n	800484c <HAL_RCC_OscConfig+0x334>
 800486e:	e014      	b.n	800489a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004870:	f7fd f8d4 	bl	8001a1c <HAL_GetTick>
 8004874:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004876:	e00a      	b.n	800488e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004878:	f7fd f8d0 	bl	8001a1c <HAL_GetTick>
 800487c:	4602      	mov	r2, r0
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	1ad3      	subs	r3, r2, r3
 8004882:	f241 3288 	movw	r2, #5000	; 0x1388
 8004886:	4293      	cmp	r3, r2
 8004888:	d901      	bls.n	800488e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800488a:	2303      	movs	r3, #3
 800488c:	e0b5      	b.n	80049fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800488e:	4b3e      	ldr	r3, [pc, #248]	; (8004988 <HAL_RCC_OscConfig+0x470>)
 8004890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004892:	f003 0302 	and.w	r3, r3, #2
 8004896:	2b00      	cmp	r3, #0
 8004898:	d1ee      	bne.n	8004878 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800489a:	7dfb      	ldrb	r3, [r7, #23]
 800489c:	2b01      	cmp	r3, #1
 800489e:	d105      	bne.n	80048ac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048a0:	4b39      	ldr	r3, [pc, #228]	; (8004988 <HAL_RCC_OscConfig+0x470>)
 80048a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a4:	4a38      	ldr	r2, [pc, #224]	; (8004988 <HAL_RCC_OscConfig+0x470>)
 80048a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048aa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	699b      	ldr	r3, [r3, #24]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	f000 80a1 	beq.w	80049f8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80048b6:	4b34      	ldr	r3, [pc, #208]	; (8004988 <HAL_RCC_OscConfig+0x470>)
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	f003 030c 	and.w	r3, r3, #12
 80048be:	2b08      	cmp	r3, #8
 80048c0:	d05c      	beq.n	800497c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	699b      	ldr	r3, [r3, #24]
 80048c6:	2b02      	cmp	r3, #2
 80048c8:	d141      	bne.n	800494e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048ca:	4b31      	ldr	r3, [pc, #196]	; (8004990 <HAL_RCC_OscConfig+0x478>)
 80048cc:	2200      	movs	r2, #0
 80048ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048d0:	f7fd f8a4 	bl	8001a1c <HAL_GetTick>
 80048d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048d6:	e008      	b.n	80048ea <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048d8:	f7fd f8a0 	bl	8001a1c <HAL_GetTick>
 80048dc:	4602      	mov	r2, r0
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	1ad3      	subs	r3, r2, r3
 80048e2:	2b02      	cmp	r3, #2
 80048e4:	d901      	bls.n	80048ea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80048e6:	2303      	movs	r3, #3
 80048e8:	e087      	b.n	80049fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048ea:	4b27      	ldr	r3, [pc, #156]	; (8004988 <HAL_RCC_OscConfig+0x470>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d1f0      	bne.n	80048d8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	69da      	ldr	r2, [r3, #28]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6a1b      	ldr	r3, [r3, #32]
 80048fe:	431a      	orrs	r2, r3
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004904:	019b      	lsls	r3, r3, #6
 8004906:	431a      	orrs	r2, r3
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800490c:	085b      	lsrs	r3, r3, #1
 800490e:	3b01      	subs	r3, #1
 8004910:	041b      	lsls	r3, r3, #16
 8004912:	431a      	orrs	r2, r3
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004918:	061b      	lsls	r3, r3, #24
 800491a:	491b      	ldr	r1, [pc, #108]	; (8004988 <HAL_RCC_OscConfig+0x470>)
 800491c:	4313      	orrs	r3, r2
 800491e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004920:	4b1b      	ldr	r3, [pc, #108]	; (8004990 <HAL_RCC_OscConfig+0x478>)
 8004922:	2201      	movs	r2, #1
 8004924:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004926:	f7fd f879 	bl	8001a1c <HAL_GetTick>
 800492a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800492c:	e008      	b.n	8004940 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800492e:	f7fd f875 	bl	8001a1c <HAL_GetTick>
 8004932:	4602      	mov	r2, r0
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	1ad3      	subs	r3, r2, r3
 8004938:	2b02      	cmp	r3, #2
 800493a:	d901      	bls.n	8004940 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800493c:	2303      	movs	r3, #3
 800493e:	e05c      	b.n	80049fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004940:	4b11      	ldr	r3, [pc, #68]	; (8004988 <HAL_RCC_OscConfig+0x470>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004948:	2b00      	cmp	r3, #0
 800494a:	d0f0      	beq.n	800492e <HAL_RCC_OscConfig+0x416>
 800494c:	e054      	b.n	80049f8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800494e:	4b10      	ldr	r3, [pc, #64]	; (8004990 <HAL_RCC_OscConfig+0x478>)
 8004950:	2200      	movs	r2, #0
 8004952:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004954:	f7fd f862 	bl	8001a1c <HAL_GetTick>
 8004958:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800495a:	e008      	b.n	800496e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800495c:	f7fd f85e 	bl	8001a1c <HAL_GetTick>
 8004960:	4602      	mov	r2, r0
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	1ad3      	subs	r3, r2, r3
 8004966:	2b02      	cmp	r3, #2
 8004968:	d901      	bls.n	800496e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800496a:	2303      	movs	r3, #3
 800496c:	e045      	b.n	80049fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800496e:	4b06      	ldr	r3, [pc, #24]	; (8004988 <HAL_RCC_OscConfig+0x470>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004976:	2b00      	cmp	r3, #0
 8004978:	d1f0      	bne.n	800495c <HAL_RCC_OscConfig+0x444>
 800497a:	e03d      	b.n	80049f8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	699b      	ldr	r3, [r3, #24]
 8004980:	2b01      	cmp	r3, #1
 8004982:	d107      	bne.n	8004994 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004984:	2301      	movs	r3, #1
 8004986:	e038      	b.n	80049fa <HAL_RCC_OscConfig+0x4e2>
 8004988:	40023800 	.word	0x40023800
 800498c:	40007000 	.word	0x40007000
 8004990:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004994:	4b1b      	ldr	r3, [pc, #108]	; (8004a04 <HAL_RCC_OscConfig+0x4ec>)
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	699b      	ldr	r3, [r3, #24]
 800499e:	2b01      	cmp	r3, #1
 80049a0:	d028      	beq.n	80049f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d121      	bne.n	80049f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049ba:	429a      	cmp	r2, r3
 80049bc:	d11a      	bne.n	80049f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80049be:	68fa      	ldr	r2, [r7, #12]
 80049c0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80049c4:	4013      	ands	r3, r2
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80049ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d111      	bne.n	80049f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049da:	085b      	lsrs	r3, r3, #1
 80049dc:	3b01      	subs	r3, #1
 80049de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80049e0:	429a      	cmp	r2, r3
 80049e2:	d107      	bne.n	80049f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d001      	beq.n	80049f8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80049f4:	2301      	movs	r3, #1
 80049f6:	e000      	b.n	80049fa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80049f8:	2300      	movs	r3, #0
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3718      	adds	r7, #24
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}
 8004a02:	bf00      	nop
 8004a04:	40023800 	.word	0x40023800

08004a08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b084      	sub	sp, #16
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
 8004a10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d101      	bne.n	8004a1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	e0cc      	b.n	8004bb6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a1c:	4b68      	ldr	r3, [pc, #416]	; (8004bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f003 0307 	and.w	r3, r3, #7
 8004a24:	683a      	ldr	r2, [r7, #0]
 8004a26:	429a      	cmp	r2, r3
 8004a28:	d90c      	bls.n	8004a44 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a2a:	4b65      	ldr	r3, [pc, #404]	; (8004bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8004a2c:	683a      	ldr	r2, [r7, #0]
 8004a2e:	b2d2      	uxtb	r2, r2
 8004a30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a32:	4b63      	ldr	r3, [pc, #396]	; (8004bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f003 0307 	and.w	r3, r3, #7
 8004a3a:	683a      	ldr	r2, [r7, #0]
 8004a3c:	429a      	cmp	r2, r3
 8004a3e:	d001      	beq.n	8004a44 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004a40:	2301      	movs	r3, #1
 8004a42:	e0b8      	b.n	8004bb6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f003 0302 	and.w	r3, r3, #2
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d020      	beq.n	8004a92 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f003 0304 	and.w	r3, r3, #4
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d005      	beq.n	8004a68 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a5c:	4b59      	ldr	r3, [pc, #356]	; (8004bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a5e:	689b      	ldr	r3, [r3, #8]
 8004a60:	4a58      	ldr	r2, [pc, #352]	; (8004bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a62:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004a66:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f003 0308 	and.w	r3, r3, #8
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d005      	beq.n	8004a80 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a74:	4b53      	ldr	r3, [pc, #332]	; (8004bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	4a52      	ldr	r2, [pc, #328]	; (8004bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a7a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004a7e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a80:	4b50      	ldr	r3, [pc, #320]	; (8004bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	494d      	ldr	r1, [pc, #308]	; (8004bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f003 0301 	and.w	r3, r3, #1
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d044      	beq.n	8004b28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	2b01      	cmp	r3, #1
 8004aa4:	d107      	bne.n	8004ab6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004aa6:	4b47      	ldr	r3, [pc, #284]	; (8004bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d119      	bne.n	8004ae6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e07f      	b.n	8004bb6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	2b02      	cmp	r3, #2
 8004abc:	d003      	beq.n	8004ac6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ac2:	2b03      	cmp	r3, #3
 8004ac4:	d107      	bne.n	8004ad6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ac6:	4b3f      	ldr	r3, [pc, #252]	; (8004bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d109      	bne.n	8004ae6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e06f      	b.n	8004bb6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ad6:	4b3b      	ldr	r3, [pc, #236]	; (8004bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f003 0302 	and.w	r3, r3, #2
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d101      	bne.n	8004ae6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e067      	b.n	8004bb6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ae6:	4b37      	ldr	r3, [pc, #220]	; (8004bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	f023 0203 	bic.w	r2, r3, #3
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	4934      	ldr	r1, [pc, #208]	; (8004bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004af4:	4313      	orrs	r3, r2
 8004af6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004af8:	f7fc ff90 	bl	8001a1c <HAL_GetTick>
 8004afc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004afe:	e00a      	b.n	8004b16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b00:	f7fc ff8c 	bl	8001a1c <HAL_GetTick>
 8004b04:	4602      	mov	r2, r0
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	1ad3      	subs	r3, r2, r3
 8004b0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d901      	bls.n	8004b16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004b12:	2303      	movs	r3, #3
 8004b14:	e04f      	b.n	8004bb6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b16:	4b2b      	ldr	r3, [pc, #172]	; (8004bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	f003 020c 	and.w	r2, r3, #12
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	009b      	lsls	r3, r3, #2
 8004b24:	429a      	cmp	r2, r3
 8004b26:	d1eb      	bne.n	8004b00 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b28:	4b25      	ldr	r3, [pc, #148]	; (8004bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f003 0307 	and.w	r3, r3, #7
 8004b30:	683a      	ldr	r2, [r7, #0]
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d20c      	bcs.n	8004b50 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b36:	4b22      	ldr	r3, [pc, #136]	; (8004bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8004b38:	683a      	ldr	r2, [r7, #0]
 8004b3a:	b2d2      	uxtb	r2, r2
 8004b3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b3e:	4b20      	ldr	r3, [pc, #128]	; (8004bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f003 0307 	and.w	r3, r3, #7
 8004b46:	683a      	ldr	r2, [r7, #0]
 8004b48:	429a      	cmp	r2, r3
 8004b4a:	d001      	beq.n	8004b50 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	e032      	b.n	8004bb6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f003 0304 	and.w	r3, r3, #4
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d008      	beq.n	8004b6e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b5c:	4b19      	ldr	r3, [pc, #100]	; (8004bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b5e:	689b      	ldr	r3, [r3, #8]
 8004b60:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	68db      	ldr	r3, [r3, #12]
 8004b68:	4916      	ldr	r1, [pc, #88]	; (8004bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f003 0308 	and.w	r3, r3, #8
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d009      	beq.n	8004b8e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b7a:	4b12      	ldr	r3, [pc, #72]	; (8004bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	691b      	ldr	r3, [r3, #16]
 8004b86:	00db      	lsls	r3, r3, #3
 8004b88:	490e      	ldr	r1, [pc, #56]	; (8004bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004b8e:	f000 f821 	bl	8004bd4 <HAL_RCC_GetSysClockFreq>
 8004b92:	4602      	mov	r2, r0
 8004b94:	4b0b      	ldr	r3, [pc, #44]	; (8004bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	091b      	lsrs	r3, r3, #4
 8004b9a:	f003 030f 	and.w	r3, r3, #15
 8004b9e:	490a      	ldr	r1, [pc, #40]	; (8004bc8 <HAL_RCC_ClockConfig+0x1c0>)
 8004ba0:	5ccb      	ldrb	r3, [r1, r3]
 8004ba2:	fa22 f303 	lsr.w	r3, r2, r3
 8004ba6:	4a09      	ldr	r2, [pc, #36]	; (8004bcc <HAL_RCC_ClockConfig+0x1c4>)
 8004ba8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004baa:	4b09      	ldr	r3, [pc, #36]	; (8004bd0 <HAL_RCC_ClockConfig+0x1c8>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f7fc fde0 	bl	8001774 <HAL_InitTick>

  return HAL_OK;
 8004bb4:	2300      	movs	r3, #0
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	3710      	adds	r7, #16
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}
 8004bbe:	bf00      	nop
 8004bc0:	40023c00 	.word	0x40023c00
 8004bc4:	40023800 	.word	0x40023800
 8004bc8:	0800e574 	.word	0x0800e574
 8004bcc:	20000000 	.word	0x20000000
 8004bd0:	20000004 	.word	0x20000004

08004bd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004bd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004bd8:	b094      	sub	sp, #80	; 0x50
 8004bda:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004bdc:	2300      	movs	r3, #0
 8004bde:	647b      	str	r3, [r7, #68]	; 0x44
 8004be0:	2300      	movs	r3, #0
 8004be2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004be4:	2300      	movs	r3, #0
 8004be6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004be8:	2300      	movs	r3, #0
 8004bea:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004bec:	4b79      	ldr	r3, [pc, #484]	; (8004dd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	f003 030c 	and.w	r3, r3, #12
 8004bf4:	2b08      	cmp	r3, #8
 8004bf6:	d00d      	beq.n	8004c14 <HAL_RCC_GetSysClockFreq+0x40>
 8004bf8:	2b08      	cmp	r3, #8
 8004bfa:	f200 80e1 	bhi.w	8004dc0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d002      	beq.n	8004c08 <HAL_RCC_GetSysClockFreq+0x34>
 8004c02:	2b04      	cmp	r3, #4
 8004c04:	d003      	beq.n	8004c0e <HAL_RCC_GetSysClockFreq+0x3a>
 8004c06:	e0db      	b.n	8004dc0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004c08:	4b73      	ldr	r3, [pc, #460]	; (8004dd8 <HAL_RCC_GetSysClockFreq+0x204>)
 8004c0a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004c0c:	e0db      	b.n	8004dc6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004c0e:	4b73      	ldr	r3, [pc, #460]	; (8004ddc <HAL_RCC_GetSysClockFreq+0x208>)
 8004c10:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004c12:	e0d8      	b.n	8004dc6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c14:	4b6f      	ldr	r3, [pc, #444]	; (8004dd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c1c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c1e:	4b6d      	ldr	r3, [pc, #436]	; (8004dd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d063      	beq.n	8004cf2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c2a:	4b6a      	ldr	r3, [pc, #424]	; (8004dd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	099b      	lsrs	r3, r3, #6
 8004c30:	2200      	movs	r2, #0
 8004c32:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c34:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c3c:	633b      	str	r3, [r7, #48]	; 0x30
 8004c3e:	2300      	movs	r3, #0
 8004c40:	637b      	str	r3, [r7, #52]	; 0x34
 8004c42:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004c46:	4622      	mov	r2, r4
 8004c48:	462b      	mov	r3, r5
 8004c4a:	f04f 0000 	mov.w	r0, #0
 8004c4e:	f04f 0100 	mov.w	r1, #0
 8004c52:	0159      	lsls	r1, r3, #5
 8004c54:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c58:	0150      	lsls	r0, r2, #5
 8004c5a:	4602      	mov	r2, r0
 8004c5c:	460b      	mov	r3, r1
 8004c5e:	4621      	mov	r1, r4
 8004c60:	1a51      	subs	r1, r2, r1
 8004c62:	6139      	str	r1, [r7, #16]
 8004c64:	4629      	mov	r1, r5
 8004c66:	eb63 0301 	sbc.w	r3, r3, r1
 8004c6a:	617b      	str	r3, [r7, #20]
 8004c6c:	f04f 0200 	mov.w	r2, #0
 8004c70:	f04f 0300 	mov.w	r3, #0
 8004c74:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c78:	4659      	mov	r1, fp
 8004c7a:	018b      	lsls	r3, r1, #6
 8004c7c:	4651      	mov	r1, sl
 8004c7e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004c82:	4651      	mov	r1, sl
 8004c84:	018a      	lsls	r2, r1, #6
 8004c86:	4651      	mov	r1, sl
 8004c88:	ebb2 0801 	subs.w	r8, r2, r1
 8004c8c:	4659      	mov	r1, fp
 8004c8e:	eb63 0901 	sbc.w	r9, r3, r1
 8004c92:	f04f 0200 	mov.w	r2, #0
 8004c96:	f04f 0300 	mov.w	r3, #0
 8004c9a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c9e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ca2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ca6:	4690      	mov	r8, r2
 8004ca8:	4699      	mov	r9, r3
 8004caa:	4623      	mov	r3, r4
 8004cac:	eb18 0303 	adds.w	r3, r8, r3
 8004cb0:	60bb      	str	r3, [r7, #8]
 8004cb2:	462b      	mov	r3, r5
 8004cb4:	eb49 0303 	adc.w	r3, r9, r3
 8004cb8:	60fb      	str	r3, [r7, #12]
 8004cba:	f04f 0200 	mov.w	r2, #0
 8004cbe:	f04f 0300 	mov.w	r3, #0
 8004cc2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004cc6:	4629      	mov	r1, r5
 8004cc8:	024b      	lsls	r3, r1, #9
 8004cca:	4621      	mov	r1, r4
 8004ccc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004cd0:	4621      	mov	r1, r4
 8004cd2:	024a      	lsls	r2, r1, #9
 8004cd4:	4610      	mov	r0, r2
 8004cd6:	4619      	mov	r1, r3
 8004cd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cda:	2200      	movs	r2, #0
 8004cdc:	62bb      	str	r3, [r7, #40]	; 0x28
 8004cde:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004ce0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004ce4:	f7fb fdb2 	bl	800084c <__aeabi_uldivmod>
 8004ce8:	4602      	mov	r2, r0
 8004cea:	460b      	mov	r3, r1
 8004cec:	4613      	mov	r3, r2
 8004cee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004cf0:	e058      	b.n	8004da4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004cf2:	4b38      	ldr	r3, [pc, #224]	; (8004dd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	099b      	lsrs	r3, r3, #6
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	4611      	mov	r1, r2
 8004cfe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004d02:	623b      	str	r3, [r7, #32]
 8004d04:	2300      	movs	r3, #0
 8004d06:	627b      	str	r3, [r7, #36]	; 0x24
 8004d08:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004d0c:	4642      	mov	r2, r8
 8004d0e:	464b      	mov	r3, r9
 8004d10:	f04f 0000 	mov.w	r0, #0
 8004d14:	f04f 0100 	mov.w	r1, #0
 8004d18:	0159      	lsls	r1, r3, #5
 8004d1a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d1e:	0150      	lsls	r0, r2, #5
 8004d20:	4602      	mov	r2, r0
 8004d22:	460b      	mov	r3, r1
 8004d24:	4641      	mov	r1, r8
 8004d26:	ebb2 0a01 	subs.w	sl, r2, r1
 8004d2a:	4649      	mov	r1, r9
 8004d2c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004d30:	f04f 0200 	mov.w	r2, #0
 8004d34:	f04f 0300 	mov.w	r3, #0
 8004d38:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004d3c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004d40:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004d44:	ebb2 040a 	subs.w	r4, r2, sl
 8004d48:	eb63 050b 	sbc.w	r5, r3, fp
 8004d4c:	f04f 0200 	mov.w	r2, #0
 8004d50:	f04f 0300 	mov.w	r3, #0
 8004d54:	00eb      	lsls	r3, r5, #3
 8004d56:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d5a:	00e2      	lsls	r2, r4, #3
 8004d5c:	4614      	mov	r4, r2
 8004d5e:	461d      	mov	r5, r3
 8004d60:	4643      	mov	r3, r8
 8004d62:	18e3      	adds	r3, r4, r3
 8004d64:	603b      	str	r3, [r7, #0]
 8004d66:	464b      	mov	r3, r9
 8004d68:	eb45 0303 	adc.w	r3, r5, r3
 8004d6c:	607b      	str	r3, [r7, #4]
 8004d6e:	f04f 0200 	mov.w	r2, #0
 8004d72:	f04f 0300 	mov.w	r3, #0
 8004d76:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004d7a:	4629      	mov	r1, r5
 8004d7c:	028b      	lsls	r3, r1, #10
 8004d7e:	4621      	mov	r1, r4
 8004d80:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004d84:	4621      	mov	r1, r4
 8004d86:	028a      	lsls	r2, r1, #10
 8004d88:	4610      	mov	r0, r2
 8004d8a:	4619      	mov	r1, r3
 8004d8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d8e:	2200      	movs	r2, #0
 8004d90:	61bb      	str	r3, [r7, #24]
 8004d92:	61fa      	str	r2, [r7, #28]
 8004d94:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d98:	f7fb fd58 	bl	800084c <__aeabi_uldivmod>
 8004d9c:	4602      	mov	r2, r0
 8004d9e:	460b      	mov	r3, r1
 8004da0:	4613      	mov	r3, r2
 8004da2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004da4:	4b0b      	ldr	r3, [pc, #44]	; (8004dd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	0c1b      	lsrs	r3, r3, #16
 8004daa:	f003 0303 	and.w	r3, r3, #3
 8004dae:	3301      	adds	r3, #1
 8004db0:	005b      	lsls	r3, r3, #1
 8004db2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004db4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004db6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004db8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dbc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004dbe:	e002      	b.n	8004dc6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004dc0:	4b05      	ldr	r3, [pc, #20]	; (8004dd8 <HAL_RCC_GetSysClockFreq+0x204>)
 8004dc2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004dc4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004dc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	3750      	adds	r7, #80	; 0x50
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004dd2:	bf00      	nop
 8004dd4:	40023800 	.word	0x40023800
 8004dd8:	00f42400 	.word	0x00f42400
 8004ddc:	007a1200 	.word	0x007a1200

08004de0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004de0:	b480      	push	{r7}
 8004de2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004de4:	4b03      	ldr	r3, [pc, #12]	; (8004df4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004de6:	681b      	ldr	r3, [r3, #0]
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	46bd      	mov	sp, r7
 8004dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df0:	4770      	bx	lr
 8004df2:	bf00      	nop
 8004df4:	20000000 	.word	0x20000000

08004df8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004dfc:	f7ff fff0 	bl	8004de0 <HAL_RCC_GetHCLKFreq>
 8004e00:	4602      	mov	r2, r0
 8004e02:	4b05      	ldr	r3, [pc, #20]	; (8004e18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	0a9b      	lsrs	r3, r3, #10
 8004e08:	f003 0307 	and.w	r3, r3, #7
 8004e0c:	4903      	ldr	r1, [pc, #12]	; (8004e1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e0e:	5ccb      	ldrb	r3, [r1, r3]
 8004e10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	bd80      	pop	{r7, pc}
 8004e18:	40023800 	.word	0x40023800
 8004e1c:	0800e584 	.word	0x0800e584

08004e20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004e24:	f7ff ffdc 	bl	8004de0 <HAL_RCC_GetHCLKFreq>
 8004e28:	4602      	mov	r2, r0
 8004e2a:	4b05      	ldr	r3, [pc, #20]	; (8004e40 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	0b5b      	lsrs	r3, r3, #13
 8004e30:	f003 0307 	and.w	r3, r3, #7
 8004e34:	4903      	ldr	r1, [pc, #12]	; (8004e44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e36:	5ccb      	ldrb	r3, [r1, r3]
 8004e38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	bd80      	pop	{r7, pc}
 8004e40:	40023800 	.word	0x40023800
 8004e44:	0800e584 	.word	0x0800e584

08004e48 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b083      	sub	sp, #12
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
 8004e50:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	220f      	movs	r2, #15
 8004e56:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004e58:	4b12      	ldr	r3, [pc, #72]	; (8004ea4 <HAL_RCC_GetClockConfig+0x5c>)
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	f003 0203 	and.w	r2, r3, #3
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004e64:	4b0f      	ldr	r3, [pc, #60]	; (8004ea4 <HAL_RCC_GetClockConfig+0x5c>)
 8004e66:	689b      	ldr	r3, [r3, #8]
 8004e68:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004e70:	4b0c      	ldr	r3, [pc, #48]	; (8004ea4 <HAL_RCC_GetClockConfig+0x5c>)
 8004e72:	689b      	ldr	r3, [r3, #8]
 8004e74:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004e7c:	4b09      	ldr	r3, [pc, #36]	; (8004ea4 <HAL_RCC_GetClockConfig+0x5c>)
 8004e7e:	689b      	ldr	r3, [r3, #8]
 8004e80:	08db      	lsrs	r3, r3, #3
 8004e82:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004e8a:	4b07      	ldr	r3, [pc, #28]	; (8004ea8 <HAL_RCC_GetClockConfig+0x60>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f003 0207 	and.w	r2, r3, #7
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	601a      	str	r2, [r3, #0]
}
 8004e96:	bf00      	nop
 8004e98:	370c      	adds	r7, #12
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea0:	4770      	bx	lr
 8004ea2:	bf00      	nop
 8004ea4:	40023800 	.word	0x40023800
 8004ea8:	40023c00 	.word	0x40023c00

08004eac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b082      	sub	sp, #8
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d101      	bne.n	8004ebe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	e07b      	b.n	8004fb6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d108      	bne.n	8004ed8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ece:	d009      	beq.n	8004ee4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	61da      	str	r2, [r3, #28]
 8004ed6:	e005      	b.n	8004ee4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2200      	movs	r2, #0
 8004edc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ef0:	b2db      	uxtb	r3, r3
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d106      	bne.n	8004f04 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	f7fc fba0 	bl	8001644 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2202      	movs	r2, #2
 8004f08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f1a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004f2c:	431a      	orrs	r2, r3
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	68db      	ldr	r3, [r3, #12]
 8004f32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f36:	431a      	orrs	r2, r3
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	691b      	ldr	r3, [r3, #16]
 8004f3c:	f003 0302 	and.w	r3, r3, #2
 8004f40:	431a      	orrs	r2, r3
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	695b      	ldr	r3, [r3, #20]
 8004f46:	f003 0301 	and.w	r3, r3, #1
 8004f4a:	431a      	orrs	r2, r3
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	699b      	ldr	r3, [r3, #24]
 8004f50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f54:	431a      	orrs	r2, r3
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	69db      	ldr	r3, [r3, #28]
 8004f5a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004f5e:	431a      	orrs	r2, r3
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6a1b      	ldr	r3, [r3, #32]
 8004f64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f68:	ea42 0103 	orr.w	r1, r2, r3
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f70:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	430a      	orrs	r2, r1
 8004f7a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	699b      	ldr	r3, [r3, #24]
 8004f80:	0c1b      	lsrs	r3, r3, #16
 8004f82:	f003 0104 	and.w	r1, r3, #4
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f8a:	f003 0210 	and.w	r2, r3, #16
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	430a      	orrs	r2, r1
 8004f94:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	69da      	ldr	r2, [r3, #28]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004fa4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2201      	movs	r2, #1
 8004fb0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004fb4:	2300      	movs	r3, #0
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	3708      	adds	r7, #8
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}

08004fbe <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fbe:	b580      	push	{r7, lr}
 8004fc0:	b088      	sub	sp, #32
 8004fc2:	af00      	add	r7, sp, #0
 8004fc4:	60f8      	str	r0, [r7, #12]
 8004fc6:	60b9      	str	r1, [r7, #8]
 8004fc8:	603b      	str	r3, [r7, #0]
 8004fca:	4613      	mov	r3, r2
 8004fcc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	d101      	bne.n	8004fe0 <HAL_SPI_Transmit+0x22>
 8004fdc:	2302      	movs	r3, #2
 8004fde:	e126      	b.n	800522e <HAL_SPI_Transmit+0x270>
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004fe8:	f7fc fd18 	bl	8001a1c <HAL_GetTick>
 8004fec:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004fee:	88fb      	ldrh	r3, [r7, #6]
 8004ff0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ff8:	b2db      	uxtb	r3, r3
 8004ffa:	2b01      	cmp	r3, #1
 8004ffc:	d002      	beq.n	8005004 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004ffe:	2302      	movs	r3, #2
 8005000:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005002:	e10b      	b.n	800521c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d002      	beq.n	8005010 <HAL_SPI_Transmit+0x52>
 800500a:	88fb      	ldrh	r3, [r7, #6]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d102      	bne.n	8005016 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005010:	2301      	movs	r3, #1
 8005012:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005014:	e102      	b.n	800521c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	2203      	movs	r2, #3
 800501a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	2200      	movs	r2, #0
 8005022:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	68ba      	ldr	r2, [r7, #8]
 8005028:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	88fa      	ldrh	r2, [r7, #6]
 800502e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	88fa      	ldrh	r2, [r7, #6]
 8005034:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2200      	movs	r2, #0
 800503a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2200      	movs	r2, #0
 8005040:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	2200      	movs	r2, #0
 8005046:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	2200      	movs	r2, #0
 800504c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2200      	movs	r2, #0
 8005052:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	689b      	ldr	r3, [r3, #8]
 8005058:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800505c:	d10f      	bne.n	800507e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	681a      	ldr	r2, [r3, #0]
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800506c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	681a      	ldr	r2, [r3, #0]
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800507c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005088:	2b40      	cmp	r3, #64	; 0x40
 800508a:	d007      	beq.n	800509c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	681a      	ldr	r2, [r3, #0]
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800509a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	68db      	ldr	r3, [r3, #12]
 80050a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050a4:	d14b      	bne.n	800513e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d002      	beq.n	80050b4 <HAL_SPI_Transmit+0xf6>
 80050ae:	8afb      	ldrh	r3, [r7, #22]
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	d13e      	bne.n	8005132 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050b8:	881a      	ldrh	r2, [r3, #0]
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050c4:	1c9a      	adds	r2, r3, #2
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050ce:	b29b      	uxth	r3, r3
 80050d0:	3b01      	subs	r3, #1
 80050d2:	b29a      	uxth	r2, r3
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80050d8:	e02b      	b.n	8005132 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	689b      	ldr	r3, [r3, #8]
 80050e0:	f003 0302 	and.w	r3, r3, #2
 80050e4:	2b02      	cmp	r3, #2
 80050e6:	d112      	bne.n	800510e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ec:	881a      	ldrh	r2, [r3, #0]
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050f8:	1c9a      	adds	r2, r3, #2
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005102:	b29b      	uxth	r3, r3
 8005104:	3b01      	subs	r3, #1
 8005106:	b29a      	uxth	r2, r3
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	86da      	strh	r2, [r3, #54]	; 0x36
 800510c:	e011      	b.n	8005132 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800510e:	f7fc fc85 	bl	8001a1c <HAL_GetTick>
 8005112:	4602      	mov	r2, r0
 8005114:	69bb      	ldr	r3, [r7, #24]
 8005116:	1ad3      	subs	r3, r2, r3
 8005118:	683a      	ldr	r2, [r7, #0]
 800511a:	429a      	cmp	r2, r3
 800511c:	d803      	bhi.n	8005126 <HAL_SPI_Transmit+0x168>
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005124:	d102      	bne.n	800512c <HAL_SPI_Transmit+0x16e>
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d102      	bne.n	8005132 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800512c:	2303      	movs	r3, #3
 800512e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005130:	e074      	b.n	800521c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005136:	b29b      	uxth	r3, r3
 8005138:	2b00      	cmp	r3, #0
 800513a:	d1ce      	bne.n	80050da <HAL_SPI_Transmit+0x11c>
 800513c:	e04c      	b.n	80051d8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d002      	beq.n	800514c <HAL_SPI_Transmit+0x18e>
 8005146:	8afb      	ldrh	r3, [r7, #22]
 8005148:	2b01      	cmp	r3, #1
 800514a:	d140      	bne.n	80051ce <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	330c      	adds	r3, #12
 8005156:	7812      	ldrb	r2, [r2, #0]
 8005158:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800515e:	1c5a      	adds	r2, r3, #1
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005168:	b29b      	uxth	r3, r3
 800516a:	3b01      	subs	r3, #1
 800516c:	b29a      	uxth	r2, r3
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005172:	e02c      	b.n	80051ce <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	689b      	ldr	r3, [r3, #8]
 800517a:	f003 0302 	and.w	r3, r3, #2
 800517e:	2b02      	cmp	r3, #2
 8005180:	d113      	bne.n	80051aa <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	330c      	adds	r3, #12
 800518c:	7812      	ldrb	r2, [r2, #0]
 800518e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005194:	1c5a      	adds	r2, r3, #1
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800519e:	b29b      	uxth	r3, r3
 80051a0:	3b01      	subs	r3, #1
 80051a2:	b29a      	uxth	r2, r3
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	86da      	strh	r2, [r3, #54]	; 0x36
 80051a8:	e011      	b.n	80051ce <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80051aa:	f7fc fc37 	bl	8001a1c <HAL_GetTick>
 80051ae:	4602      	mov	r2, r0
 80051b0:	69bb      	ldr	r3, [r7, #24]
 80051b2:	1ad3      	subs	r3, r2, r3
 80051b4:	683a      	ldr	r2, [r7, #0]
 80051b6:	429a      	cmp	r2, r3
 80051b8:	d803      	bhi.n	80051c2 <HAL_SPI_Transmit+0x204>
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051c0:	d102      	bne.n	80051c8 <HAL_SPI_Transmit+0x20a>
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d102      	bne.n	80051ce <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80051c8:	2303      	movs	r3, #3
 80051ca:	77fb      	strb	r3, [r7, #31]
          goto error;
 80051cc:	e026      	b.n	800521c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051d2:	b29b      	uxth	r3, r3
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d1cd      	bne.n	8005174 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80051d8:	69ba      	ldr	r2, [r7, #24]
 80051da:	6839      	ldr	r1, [r7, #0]
 80051dc:	68f8      	ldr	r0, [r7, #12]
 80051de:	f000 fbcb 	bl	8005978 <SPI_EndRxTxTransaction>
 80051e2:	4603      	mov	r3, r0
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d002      	beq.n	80051ee <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2220      	movs	r2, #32
 80051ec:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	689b      	ldr	r3, [r3, #8]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d10a      	bne.n	800520c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80051f6:	2300      	movs	r3, #0
 80051f8:	613b      	str	r3, [r7, #16]
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	68db      	ldr	r3, [r3, #12]
 8005200:	613b      	str	r3, [r7, #16]
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	689b      	ldr	r3, [r3, #8]
 8005208:	613b      	str	r3, [r7, #16]
 800520a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005210:	2b00      	cmp	r3, #0
 8005212:	d002      	beq.n	800521a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005214:	2301      	movs	r3, #1
 8005216:	77fb      	strb	r3, [r7, #31]
 8005218:	e000      	b.n	800521c <HAL_SPI_Transmit+0x25e>
  }

error:
 800521a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	2201      	movs	r2, #1
 8005220:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	2200      	movs	r2, #0
 8005228:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800522c:	7ffb      	ldrb	r3, [r7, #31]
}
 800522e:	4618      	mov	r0, r3
 8005230:	3720      	adds	r7, #32
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}

08005236 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005236:	b580      	push	{r7, lr}
 8005238:	b088      	sub	sp, #32
 800523a:	af02      	add	r7, sp, #8
 800523c:	60f8      	str	r0, [r7, #12]
 800523e:	60b9      	str	r1, [r7, #8]
 8005240:	603b      	str	r3, [r7, #0]
 8005242:	4613      	mov	r3, r2
 8005244:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005246:	2300      	movs	r3, #0
 8005248:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005252:	d112      	bne.n	800527a <HAL_SPI_Receive+0x44>
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	689b      	ldr	r3, [r3, #8]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d10e      	bne.n	800527a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	2204      	movs	r2, #4
 8005260:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005264:	88fa      	ldrh	r2, [r7, #6]
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	9300      	str	r3, [sp, #0]
 800526a:	4613      	mov	r3, r2
 800526c:	68ba      	ldr	r2, [r7, #8]
 800526e:	68b9      	ldr	r1, [r7, #8]
 8005270:	68f8      	ldr	r0, [r7, #12]
 8005272:	f000 f8f1 	bl	8005458 <HAL_SPI_TransmitReceive>
 8005276:	4603      	mov	r3, r0
 8005278:	e0ea      	b.n	8005450 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005280:	2b01      	cmp	r3, #1
 8005282:	d101      	bne.n	8005288 <HAL_SPI_Receive+0x52>
 8005284:	2302      	movs	r3, #2
 8005286:	e0e3      	b.n	8005450 <HAL_SPI_Receive+0x21a>
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	2201      	movs	r2, #1
 800528c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005290:	f7fc fbc4 	bl	8001a1c <HAL_GetTick>
 8005294:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800529c:	b2db      	uxtb	r3, r3
 800529e:	2b01      	cmp	r3, #1
 80052a0:	d002      	beq.n	80052a8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80052a2:	2302      	movs	r3, #2
 80052a4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80052a6:	e0ca      	b.n	800543e <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d002      	beq.n	80052b4 <HAL_SPI_Receive+0x7e>
 80052ae:	88fb      	ldrh	r3, [r7, #6]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d102      	bne.n	80052ba <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80052b4:	2301      	movs	r3, #1
 80052b6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80052b8:	e0c1      	b.n	800543e <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	2204      	movs	r2, #4
 80052be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	2200      	movs	r2, #0
 80052c6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	68ba      	ldr	r2, [r7, #8]
 80052cc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	88fa      	ldrh	r2, [r7, #6]
 80052d2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	88fa      	ldrh	r2, [r7, #6]
 80052d8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2200      	movs	r2, #0
 80052de:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	2200      	movs	r2, #0
 80052e4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2200      	movs	r2, #0
 80052ea:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2200      	movs	r2, #0
 80052f0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2200      	movs	r2, #0
 80052f6:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	689b      	ldr	r3, [r3, #8]
 80052fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005300:	d10f      	bne.n	8005322 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	681a      	ldr	r2, [r3, #0]
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005310:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	681a      	ldr	r2, [r3, #0]
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005320:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800532c:	2b40      	cmp	r3, #64	; 0x40
 800532e:	d007      	beq.n	8005340 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	681a      	ldr	r2, [r3, #0]
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800533e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	68db      	ldr	r3, [r3, #12]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d162      	bne.n	800540e <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005348:	e02e      	b.n	80053a8 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	689b      	ldr	r3, [r3, #8]
 8005350:	f003 0301 	and.w	r3, r3, #1
 8005354:	2b01      	cmp	r3, #1
 8005356:	d115      	bne.n	8005384 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f103 020c 	add.w	r2, r3, #12
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005364:	7812      	ldrb	r2, [r2, #0]
 8005366:	b2d2      	uxtb	r2, r2
 8005368:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800536e:	1c5a      	adds	r2, r3, #1
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005378:	b29b      	uxth	r3, r3
 800537a:	3b01      	subs	r3, #1
 800537c:	b29a      	uxth	r2, r3
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005382:	e011      	b.n	80053a8 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005384:	f7fc fb4a 	bl	8001a1c <HAL_GetTick>
 8005388:	4602      	mov	r2, r0
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	1ad3      	subs	r3, r2, r3
 800538e:	683a      	ldr	r2, [r7, #0]
 8005390:	429a      	cmp	r2, r3
 8005392:	d803      	bhi.n	800539c <HAL_SPI_Receive+0x166>
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	f1b3 3fff 	cmp.w	r3, #4294967295
 800539a:	d102      	bne.n	80053a2 <HAL_SPI_Receive+0x16c>
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d102      	bne.n	80053a8 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80053a2:	2303      	movs	r3, #3
 80053a4:	75fb      	strb	r3, [r7, #23]
          goto error;
 80053a6:	e04a      	b.n	800543e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053ac:	b29b      	uxth	r3, r3
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d1cb      	bne.n	800534a <HAL_SPI_Receive+0x114>
 80053b2:	e031      	b.n	8005418 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	f003 0301 	and.w	r3, r3, #1
 80053be:	2b01      	cmp	r3, #1
 80053c0:	d113      	bne.n	80053ea <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	68da      	ldr	r2, [r3, #12]
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053cc:	b292      	uxth	r2, r2
 80053ce:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053d4:	1c9a      	adds	r2, r3, #2
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053de:	b29b      	uxth	r3, r3
 80053e0:	3b01      	subs	r3, #1
 80053e2:	b29a      	uxth	r2, r3
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80053e8:	e011      	b.n	800540e <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80053ea:	f7fc fb17 	bl	8001a1c <HAL_GetTick>
 80053ee:	4602      	mov	r2, r0
 80053f0:	693b      	ldr	r3, [r7, #16]
 80053f2:	1ad3      	subs	r3, r2, r3
 80053f4:	683a      	ldr	r2, [r7, #0]
 80053f6:	429a      	cmp	r2, r3
 80053f8:	d803      	bhi.n	8005402 <HAL_SPI_Receive+0x1cc>
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005400:	d102      	bne.n	8005408 <HAL_SPI_Receive+0x1d2>
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d102      	bne.n	800540e <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8005408:	2303      	movs	r3, #3
 800540a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800540c:	e017      	b.n	800543e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005412:	b29b      	uxth	r3, r3
 8005414:	2b00      	cmp	r3, #0
 8005416:	d1cd      	bne.n	80053b4 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005418:	693a      	ldr	r2, [r7, #16]
 800541a:	6839      	ldr	r1, [r7, #0]
 800541c:	68f8      	ldr	r0, [r7, #12]
 800541e:	f000 fa45 	bl	80058ac <SPI_EndRxTransaction>
 8005422:	4603      	mov	r3, r0
 8005424:	2b00      	cmp	r3, #0
 8005426:	d002      	beq.n	800542e <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2220      	movs	r2, #32
 800542c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005432:	2b00      	cmp	r3, #0
 8005434:	d002      	beq.n	800543c <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8005436:	2301      	movs	r3, #1
 8005438:	75fb      	strb	r3, [r7, #23]
 800543a:	e000      	b.n	800543e <HAL_SPI_Receive+0x208>
  }

error :
 800543c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	2201      	movs	r2, #1
 8005442:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	2200      	movs	r2, #0
 800544a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800544e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005450:	4618      	mov	r0, r3
 8005452:	3718      	adds	r7, #24
 8005454:	46bd      	mov	sp, r7
 8005456:	bd80      	pop	{r7, pc}

08005458 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b08c      	sub	sp, #48	; 0x30
 800545c:	af00      	add	r7, sp, #0
 800545e:	60f8      	str	r0, [r7, #12]
 8005460:	60b9      	str	r1, [r7, #8]
 8005462:	607a      	str	r2, [r7, #4]
 8005464:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005466:	2301      	movs	r3, #1
 8005468:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800546a:	2300      	movs	r3, #0
 800546c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005476:	2b01      	cmp	r3, #1
 8005478:	d101      	bne.n	800547e <HAL_SPI_TransmitReceive+0x26>
 800547a:	2302      	movs	r3, #2
 800547c:	e18a      	b.n	8005794 <HAL_SPI_TransmitReceive+0x33c>
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	2201      	movs	r2, #1
 8005482:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005486:	f7fc fac9 	bl	8001a1c <HAL_GetTick>
 800548a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005492:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800549c:	887b      	ldrh	r3, [r7, #2]
 800549e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80054a0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80054a4:	2b01      	cmp	r3, #1
 80054a6:	d00f      	beq.n	80054c8 <HAL_SPI_TransmitReceive+0x70>
 80054a8:	69fb      	ldr	r3, [r7, #28]
 80054aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054ae:	d107      	bne.n	80054c0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	689b      	ldr	r3, [r3, #8]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d103      	bne.n	80054c0 <HAL_SPI_TransmitReceive+0x68>
 80054b8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80054bc:	2b04      	cmp	r3, #4
 80054be:	d003      	beq.n	80054c8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80054c0:	2302      	movs	r3, #2
 80054c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80054c6:	e15b      	b.n	8005780 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d005      	beq.n	80054da <HAL_SPI_TransmitReceive+0x82>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d002      	beq.n	80054da <HAL_SPI_TransmitReceive+0x82>
 80054d4:	887b      	ldrh	r3, [r7, #2]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d103      	bne.n	80054e2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80054da:	2301      	movs	r3, #1
 80054dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80054e0:	e14e      	b.n	8005780 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80054e8:	b2db      	uxtb	r3, r3
 80054ea:	2b04      	cmp	r3, #4
 80054ec:	d003      	beq.n	80054f6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	2205      	movs	r2, #5
 80054f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	2200      	movs	r2, #0
 80054fa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	687a      	ldr	r2, [r7, #4]
 8005500:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	887a      	ldrh	r2, [r7, #2]
 8005506:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	887a      	ldrh	r2, [r7, #2]
 800550c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	68ba      	ldr	r2, [r7, #8]
 8005512:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	887a      	ldrh	r2, [r7, #2]
 8005518:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	887a      	ldrh	r2, [r7, #2]
 800551e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	2200      	movs	r2, #0
 8005524:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2200      	movs	r2, #0
 800552a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005536:	2b40      	cmp	r3, #64	; 0x40
 8005538:	d007      	beq.n	800554a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	681a      	ldr	r2, [r3, #0]
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005548:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	68db      	ldr	r3, [r3, #12]
 800554e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005552:	d178      	bne.n	8005646 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d002      	beq.n	8005562 <HAL_SPI_TransmitReceive+0x10a>
 800555c:	8b7b      	ldrh	r3, [r7, #26]
 800555e:	2b01      	cmp	r3, #1
 8005560:	d166      	bne.n	8005630 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005566:	881a      	ldrh	r2, [r3, #0]
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005572:	1c9a      	adds	r2, r3, #2
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800557c:	b29b      	uxth	r3, r3
 800557e:	3b01      	subs	r3, #1
 8005580:	b29a      	uxth	r2, r3
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005586:	e053      	b.n	8005630 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	689b      	ldr	r3, [r3, #8]
 800558e:	f003 0302 	and.w	r3, r3, #2
 8005592:	2b02      	cmp	r3, #2
 8005594:	d11b      	bne.n	80055ce <HAL_SPI_TransmitReceive+0x176>
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800559a:	b29b      	uxth	r3, r3
 800559c:	2b00      	cmp	r3, #0
 800559e:	d016      	beq.n	80055ce <HAL_SPI_TransmitReceive+0x176>
 80055a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055a2:	2b01      	cmp	r3, #1
 80055a4:	d113      	bne.n	80055ce <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055aa:	881a      	ldrh	r2, [r3, #0]
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055b6:	1c9a      	adds	r2, r3, #2
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055c0:	b29b      	uxth	r3, r3
 80055c2:	3b01      	subs	r3, #1
 80055c4:	b29a      	uxth	r2, r3
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80055ca:	2300      	movs	r3, #0
 80055cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	689b      	ldr	r3, [r3, #8]
 80055d4:	f003 0301 	and.w	r3, r3, #1
 80055d8:	2b01      	cmp	r3, #1
 80055da:	d119      	bne.n	8005610 <HAL_SPI_TransmitReceive+0x1b8>
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055e0:	b29b      	uxth	r3, r3
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d014      	beq.n	8005610 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	68da      	ldr	r2, [r3, #12]
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055f0:	b292      	uxth	r2, r2
 80055f2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055f8:	1c9a      	adds	r2, r3, #2
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005602:	b29b      	uxth	r3, r3
 8005604:	3b01      	subs	r3, #1
 8005606:	b29a      	uxth	r2, r3
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800560c:	2301      	movs	r3, #1
 800560e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005610:	f7fc fa04 	bl	8001a1c <HAL_GetTick>
 8005614:	4602      	mov	r2, r0
 8005616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005618:	1ad3      	subs	r3, r2, r3
 800561a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800561c:	429a      	cmp	r2, r3
 800561e:	d807      	bhi.n	8005630 <HAL_SPI_TransmitReceive+0x1d8>
 8005620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005622:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005626:	d003      	beq.n	8005630 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005628:	2303      	movs	r3, #3
 800562a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800562e:	e0a7      	b.n	8005780 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005634:	b29b      	uxth	r3, r3
 8005636:	2b00      	cmp	r3, #0
 8005638:	d1a6      	bne.n	8005588 <HAL_SPI_TransmitReceive+0x130>
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800563e:	b29b      	uxth	r3, r3
 8005640:	2b00      	cmp	r3, #0
 8005642:	d1a1      	bne.n	8005588 <HAL_SPI_TransmitReceive+0x130>
 8005644:	e07c      	b.n	8005740 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d002      	beq.n	8005654 <HAL_SPI_TransmitReceive+0x1fc>
 800564e:	8b7b      	ldrh	r3, [r7, #26]
 8005650:	2b01      	cmp	r3, #1
 8005652:	d16b      	bne.n	800572c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	330c      	adds	r3, #12
 800565e:	7812      	ldrb	r2, [r2, #0]
 8005660:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005666:	1c5a      	adds	r2, r3, #1
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005670:	b29b      	uxth	r3, r3
 8005672:	3b01      	subs	r3, #1
 8005674:	b29a      	uxth	r2, r3
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800567a:	e057      	b.n	800572c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	689b      	ldr	r3, [r3, #8]
 8005682:	f003 0302 	and.w	r3, r3, #2
 8005686:	2b02      	cmp	r3, #2
 8005688:	d11c      	bne.n	80056c4 <HAL_SPI_TransmitReceive+0x26c>
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800568e:	b29b      	uxth	r3, r3
 8005690:	2b00      	cmp	r3, #0
 8005692:	d017      	beq.n	80056c4 <HAL_SPI_TransmitReceive+0x26c>
 8005694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005696:	2b01      	cmp	r3, #1
 8005698:	d114      	bne.n	80056c4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	330c      	adds	r3, #12
 80056a4:	7812      	ldrb	r2, [r2, #0]
 80056a6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ac:	1c5a      	adds	r2, r3, #1
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056b6:	b29b      	uxth	r3, r3
 80056b8:	3b01      	subs	r3, #1
 80056ba:	b29a      	uxth	r2, r3
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80056c0:	2300      	movs	r3, #0
 80056c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	689b      	ldr	r3, [r3, #8]
 80056ca:	f003 0301 	and.w	r3, r3, #1
 80056ce:	2b01      	cmp	r3, #1
 80056d0:	d119      	bne.n	8005706 <HAL_SPI_TransmitReceive+0x2ae>
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056d6:	b29b      	uxth	r3, r3
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d014      	beq.n	8005706 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	68da      	ldr	r2, [r3, #12]
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056e6:	b2d2      	uxtb	r2, r2
 80056e8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ee:	1c5a      	adds	r2, r3, #1
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056f8:	b29b      	uxth	r3, r3
 80056fa:	3b01      	subs	r3, #1
 80056fc:	b29a      	uxth	r2, r3
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005702:	2301      	movs	r3, #1
 8005704:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005706:	f7fc f989 	bl	8001a1c <HAL_GetTick>
 800570a:	4602      	mov	r2, r0
 800570c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800570e:	1ad3      	subs	r3, r2, r3
 8005710:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005712:	429a      	cmp	r2, r3
 8005714:	d803      	bhi.n	800571e <HAL_SPI_TransmitReceive+0x2c6>
 8005716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005718:	f1b3 3fff 	cmp.w	r3, #4294967295
 800571c:	d102      	bne.n	8005724 <HAL_SPI_TransmitReceive+0x2cc>
 800571e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005720:	2b00      	cmp	r3, #0
 8005722:	d103      	bne.n	800572c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005724:	2303      	movs	r3, #3
 8005726:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800572a:	e029      	b.n	8005780 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005730:	b29b      	uxth	r3, r3
 8005732:	2b00      	cmp	r3, #0
 8005734:	d1a2      	bne.n	800567c <HAL_SPI_TransmitReceive+0x224>
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800573a:	b29b      	uxth	r3, r3
 800573c:	2b00      	cmp	r3, #0
 800573e:	d19d      	bne.n	800567c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005740:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005742:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005744:	68f8      	ldr	r0, [r7, #12]
 8005746:	f000 f917 	bl	8005978 <SPI_EndRxTxTransaction>
 800574a:	4603      	mov	r3, r0
 800574c:	2b00      	cmp	r3, #0
 800574e:	d006      	beq.n	800575e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005750:	2301      	movs	r3, #1
 8005752:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	2220      	movs	r2, #32
 800575a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800575c:	e010      	b.n	8005780 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	689b      	ldr	r3, [r3, #8]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d10b      	bne.n	800577e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005766:	2300      	movs	r3, #0
 8005768:	617b      	str	r3, [r7, #20]
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	68db      	ldr	r3, [r3, #12]
 8005770:	617b      	str	r3, [r7, #20]
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	689b      	ldr	r3, [r3, #8]
 8005778:	617b      	str	r3, [r7, #20]
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	e000      	b.n	8005780 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800577e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2201      	movs	r2, #1
 8005784:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2200      	movs	r2, #0
 800578c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005790:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005794:	4618      	mov	r0, r3
 8005796:	3730      	adds	r7, #48	; 0x30
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}

0800579c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b088      	sub	sp, #32
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	60f8      	str	r0, [r7, #12]
 80057a4:	60b9      	str	r1, [r7, #8]
 80057a6:	603b      	str	r3, [r7, #0]
 80057a8:	4613      	mov	r3, r2
 80057aa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80057ac:	f7fc f936 	bl	8001a1c <HAL_GetTick>
 80057b0:	4602      	mov	r2, r0
 80057b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057b4:	1a9b      	subs	r3, r3, r2
 80057b6:	683a      	ldr	r2, [r7, #0]
 80057b8:	4413      	add	r3, r2
 80057ba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80057bc:	f7fc f92e 	bl	8001a1c <HAL_GetTick>
 80057c0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80057c2:	4b39      	ldr	r3, [pc, #228]	; (80058a8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	015b      	lsls	r3, r3, #5
 80057c8:	0d1b      	lsrs	r3, r3, #20
 80057ca:	69fa      	ldr	r2, [r7, #28]
 80057cc:	fb02 f303 	mul.w	r3, r2, r3
 80057d0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80057d2:	e054      	b.n	800587e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057da:	d050      	beq.n	800587e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80057dc:	f7fc f91e 	bl	8001a1c <HAL_GetTick>
 80057e0:	4602      	mov	r2, r0
 80057e2:	69bb      	ldr	r3, [r7, #24]
 80057e4:	1ad3      	subs	r3, r2, r3
 80057e6:	69fa      	ldr	r2, [r7, #28]
 80057e8:	429a      	cmp	r2, r3
 80057ea:	d902      	bls.n	80057f2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80057ec:	69fb      	ldr	r3, [r7, #28]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d13d      	bne.n	800586e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	685a      	ldr	r2, [r3, #4]
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005800:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800580a:	d111      	bne.n	8005830 <SPI_WaitFlagStateUntilTimeout+0x94>
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	689b      	ldr	r3, [r3, #8]
 8005810:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005814:	d004      	beq.n	8005820 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	689b      	ldr	r3, [r3, #8]
 800581a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800581e:	d107      	bne.n	8005830 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	681a      	ldr	r2, [r3, #0]
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800582e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005834:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005838:	d10f      	bne.n	800585a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	681a      	ldr	r2, [r3, #0]
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005848:	601a      	str	r2, [r3, #0]
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	681a      	ldr	r2, [r3, #0]
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005858:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2201      	movs	r2, #1
 800585e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2200      	movs	r2, #0
 8005866:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800586a:	2303      	movs	r3, #3
 800586c:	e017      	b.n	800589e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d101      	bne.n	8005878 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005874:	2300      	movs	r3, #0
 8005876:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	3b01      	subs	r3, #1
 800587c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	689a      	ldr	r2, [r3, #8]
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	4013      	ands	r3, r2
 8005888:	68ba      	ldr	r2, [r7, #8]
 800588a:	429a      	cmp	r2, r3
 800588c:	bf0c      	ite	eq
 800588e:	2301      	moveq	r3, #1
 8005890:	2300      	movne	r3, #0
 8005892:	b2db      	uxtb	r3, r3
 8005894:	461a      	mov	r2, r3
 8005896:	79fb      	ldrb	r3, [r7, #7]
 8005898:	429a      	cmp	r2, r3
 800589a:	d19b      	bne.n	80057d4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800589c:	2300      	movs	r3, #0
}
 800589e:	4618      	mov	r0, r3
 80058a0:	3720      	adds	r7, #32
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}
 80058a6:	bf00      	nop
 80058a8:	20000000 	.word	0x20000000

080058ac <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b086      	sub	sp, #24
 80058b0:	af02      	add	r7, sp, #8
 80058b2:	60f8      	str	r0, [r7, #12]
 80058b4:	60b9      	str	r1, [r7, #8]
 80058b6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	685b      	ldr	r3, [r3, #4]
 80058bc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80058c0:	d111      	bne.n	80058e6 <SPI_EndRxTransaction+0x3a>
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	689b      	ldr	r3, [r3, #8]
 80058c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058ca:	d004      	beq.n	80058d6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	689b      	ldr	r3, [r3, #8]
 80058d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058d4:	d107      	bne.n	80058e6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	681a      	ldr	r2, [r3, #0]
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058e4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	685b      	ldr	r3, [r3, #4]
 80058ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80058ee:	d12a      	bne.n	8005946 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	689b      	ldr	r3, [r3, #8]
 80058f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058f8:	d012      	beq.n	8005920 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	9300      	str	r3, [sp, #0]
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	2200      	movs	r2, #0
 8005902:	2180      	movs	r1, #128	; 0x80
 8005904:	68f8      	ldr	r0, [r7, #12]
 8005906:	f7ff ff49 	bl	800579c <SPI_WaitFlagStateUntilTimeout>
 800590a:	4603      	mov	r3, r0
 800590c:	2b00      	cmp	r3, #0
 800590e:	d02d      	beq.n	800596c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005914:	f043 0220 	orr.w	r2, r3, #32
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800591c:	2303      	movs	r3, #3
 800591e:	e026      	b.n	800596e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	9300      	str	r3, [sp, #0]
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	2200      	movs	r2, #0
 8005928:	2101      	movs	r1, #1
 800592a:	68f8      	ldr	r0, [r7, #12]
 800592c:	f7ff ff36 	bl	800579c <SPI_WaitFlagStateUntilTimeout>
 8005930:	4603      	mov	r3, r0
 8005932:	2b00      	cmp	r3, #0
 8005934:	d01a      	beq.n	800596c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800593a:	f043 0220 	orr.w	r2, r3, #32
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005942:	2303      	movs	r3, #3
 8005944:	e013      	b.n	800596e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	9300      	str	r3, [sp, #0]
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	2200      	movs	r2, #0
 800594e:	2101      	movs	r1, #1
 8005950:	68f8      	ldr	r0, [r7, #12]
 8005952:	f7ff ff23 	bl	800579c <SPI_WaitFlagStateUntilTimeout>
 8005956:	4603      	mov	r3, r0
 8005958:	2b00      	cmp	r3, #0
 800595a:	d007      	beq.n	800596c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005960:	f043 0220 	orr.w	r2, r3, #32
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005968:	2303      	movs	r3, #3
 800596a:	e000      	b.n	800596e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800596c:	2300      	movs	r3, #0
}
 800596e:	4618      	mov	r0, r3
 8005970:	3710      	adds	r7, #16
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}
	...

08005978 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b088      	sub	sp, #32
 800597c:	af02      	add	r7, sp, #8
 800597e:	60f8      	str	r0, [r7, #12]
 8005980:	60b9      	str	r1, [r7, #8]
 8005982:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005984:	4b1b      	ldr	r3, [pc, #108]	; (80059f4 <SPI_EndRxTxTransaction+0x7c>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a1b      	ldr	r2, [pc, #108]	; (80059f8 <SPI_EndRxTxTransaction+0x80>)
 800598a:	fba2 2303 	umull	r2, r3, r2, r3
 800598e:	0d5b      	lsrs	r3, r3, #21
 8005990:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005994:	fb02 f303 	mul.w	r3, r2, r3
 8005998:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80059a2:	d112      	bne.n	80059ca <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	9300      	str	r3, [sp, #0]
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	2200      	movs	r2, #0
 80059ac:	2180      	movs	r1, #128	; 0x80
 80059ae:	68f8      	ldr	r0, [r7, #12]
 80059b0:	f7ff fef4 	bl	800579c <SPI_WaitFlagStateUntilTimeout>
 80059b4:	4603      	mov	r3, r0
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d016      	beq.n	80059e8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059be:	f043 0220 	orr.w	r2, r3, #32
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80059c6:	2303      	movs	r3, #3
 80059c8:	e00f      	b.n	80059ea <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80059ca:	697b      	ldr	r3, [r7, #20]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d00a      	beq.n	80059e6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	3b01      	subs	r3, #1
 80059d4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	689b      	ldr	r3, [r3, #8]
 80059dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059e0:	2b80      	cmp	r3, #128	; 0x80
 80059e2:	d0f2      	beq.n	80059ca <SPI_EndRxTxTransaction+0x52>
 80059e4:	e000      	b.n	80059e8 <SPI_EndRxTxTransaction+0x70>
        break;
 80059e6:	bf00      	nop
  }

  return HAL_OK;
 80059e8:	2300      	movs	r3, #0
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	3718      	adds	r7, #24
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}
 80059f2:	bf00      	nop
 80059f4:	20000000 	.word	0x20000000
 80059f8:	165e9f81 	.word	0x165e9f81

080059fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b082      	sub	sp, #8
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d101      	bne.n	8005a0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	e041      	b.n	8005a92 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a14:	b2db      	uxtb	r3, r3
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d106      	bne.n	8005a28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f000 f839 	bl	8005a9a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2202      	movs	r2, #2
 8005a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681a      	ldr	r2, [r3, #0]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	3304      	adds	r3, #4
 8005a38:	4619      	mov	r1, r3
 8005a3a:	4610      	mov	r0, r2
 8005a3c:	f000 f9ca 	bl	8005dd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2201      	movs	r2, #1
 8005a44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2201      	movs	r2, #1
 8005a54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2201      	movs	r2, #1
 8005a64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2201      	movs	r2, #1
 8005a74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2201      	movs	r2, #1
 8005a84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a90:	2300      	movs	r3, #0
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	3708      	adds	r7, #8
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}

08005a9a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005a9a:	b480      	push	{r7}
 8005a9c:	b083      	sub	sp, #12
 8005a9e:	af00      	add	r7, sp, #0
 8005aa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005aa2:	bf00      	nop
 8005aa4:	370c      	adds	r7, #12
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aac:	4770      	bx	lr
	...

08005ab0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b085      	sub	sp, #20
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005abe:	b2db      	uxtb	r3, r3
 8005ac0:	2b01      	cmp	r3, #1
 8005ac2:	d001      	beq.n	8005ac8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	e044      	b.n	8005b52 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2202      	movs	r2, #2
 8005acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	68da      	ldr	r2, [r3, #12]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f042 0201 	orr.w	r2, r2, #1
 8005ade:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a1e      	ldr	r2, [pc, #120]	; (8005b60 <HAL_TIM_Base_Start_IT+0xb0>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d018      	beq.n	8005b1c <HAL_TIM_Base_Start_IT+0x6c>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005af2:	d013      	beq.n	8005b1c <HAL_TIM_Base_Start_IT+0x6c>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4a1a      	ldr	r2, [pc, #104]	; (8005b64 <HAL_TIM_Base_Start_IT+0xb4>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d00e      	beq.n	8005b1c <HAL_TIM_Base_Start_IT+0x6c>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a19      	ldr	r2, [pc, #100]	; (8005b68 <HAL_TIM_Base_Start_IT+0xb8>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d009      	beq.n	8005b1c <HAL_TIM_Base_Start_IT+0x6c>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4a17      	ldr	r2, [pc, #92]	; (8005b6c <HAL_TIM_Base_Start_IT+0xbc>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d004      	beq.n	8005b1c <HAL_TIM_Base_Start_IT+0x6c>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4a16      	ldr	r2, [pc, #88]	; (8005b70 <HAL_TIM_Base_Start_IT+0xc0>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d111      	bne.n	8005b40 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	689b      	ldr	r3, [r3, #8]
 8005b22:	f003 0307 	and.w	r3, r3, #7
 8005b26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	2b06      	cmp	r3, #6
 8005b2c:	d010      	beq.n	8005b50 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	681a      	ldr	r2, [r3, #0]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f042 0201 	orr.w	r2, r2, #1
 8005b3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b3e:	e007      	b.n	8005b50 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	681a      	ldr	r2, [r3, #0]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f042 0201 	orr.w	r2, r2, #1
 8005b4e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005b50:	2300      	movs	r3, #0
}
 8005b52:	4618      	mov	r0, r3
 8005b54:	3714      	adds	r7, #20
 8005b56:	46bd      	mov	sp, r7
 8005b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5c:	4770      	bx	lr
 8005b5e:	bf00      	nop
 8005b60:	40010000 	.word	0x40010000
 8005b64:	40000400 	.word	0x40000400
 8005b68:	40000800 	.word	0x40000800
 8005b6c:	40000c00 	.word	0x40000c00
 8005b70:	40014000 	.word	0x40014000

08005b74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b082      	sub	sp, #8
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	691b      	ldr	r3, [r3, #16]
 8005b82:	f003 0302 	and.w	r3, r3, #2
 8005b86:	2b02      	cmp	r3, #2
 8005b88:	d122      	bne.n	8005bd0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	68db      	ldr	r3, [r3, #12]
 8005b90:	f003 0302 	and.w	r3, r3, #2
 8005b94:	2b02      	cmp	r3, #2
 8005b96:	d11b      	bne.n	8005bd0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f06f 0202 	mvn.w	r2, #2
 8005ba0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2201      	movs	r2, #1
 8005ba6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	699b      	ldr	r3, [r3, #24]
 8005bae:	f003 0303 	and.w	r3, r3, #3
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d003      	beq.n	8005bbe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	f000 f8ee 	bl	8005d98 <HAL_TIM_IC_CaptureCallback>
 8005bbc:	e005      	b.n	8005bca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f000 f8e0 	bl	8005d84 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bc4:	6878      	ldr	r0, [r7, #4]
 8005bc6:	f000 f8f1 	bl	8005dac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	691b      	ldr	r3, [r3, #16]
 8005bd6:	f003 0304 	and.w	r3, r3, #4
 8005bda:	2b04      	cmp	r3, #4
 8005bdc:	d122      	bne.n	8005c24 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	68db      	ldr	r3, [r3, #12]
 8005be4:	f003 0304 	and.w	r3, r3, #4
 8005be8:	2b04      	cmp	r3, #4
 8005bea:	d11b      	bne.n	8005c24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f06f 0204 	mvn.w	r2, #4
 8005bf4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2202      	movs	r2, #2
 8005bfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	699b      	ldr	r3, [r3, #24]
 8005c02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d003      	beq.n	8005c12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f000 f8c4 	bl	8005d98 <HAL_TIM_IC_CaptureCallback>
 8005c10:	e005      	b.n	8005c1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f000 f8b6 	bl	8005d84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c18:	6878      	ldr	r0, [r7, #4]
 8005c1a:	f000 f8c7 	bl	8005dac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2200      	movs	r2, #0
 8005c22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	691b      	ldr	r3, [r3, #16]
 8005c2a:	f003 0308 	and.w	r3, r3, #8
 8005c2e:	2b08      	cmp	r3, #8
 8005c30:	d122      	bne.n	8005c78 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	68db      	ldr	r3, [r3, #12]
 8005c38:	f003 0308 	and.w	r3, r3, #8
 8005c3c:	2b08      	cmp	r3, #8
 8005c3e:	d11b      	bne.n	8005c78 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f06f 0208 	mvn.w	r2, #8
 8005c48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2204      	movs	r2, #4
 8005c4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	69db      	ldr	r3, [r3, #28]
 8005c56:	f003 0303 	and.w	r3, r3, #3
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d003      	beq.n	8005c66 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f000 f89a 	bl	8005d98 <HAL_TIM_IC_CaptureCallback>
 8005c64:	e005      	b.n	8005c72 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	f000 f88c 	bl	8005d84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c6c:	6878      	ldr	r0, [r7, #4]
 8005c6e:	f000 f89d 	bl	8005dac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2200      	movs	r2, #0
 8005c76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	691b      	ldr	r3, [r3, #16]
 8005c7e:	f003 0310 	and.w	r3, r3, #16
 8005c82:	2b10      	cmp	r3, #16
 8005c84:	d122      	bne.n	8005ccc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	68db      	ldr	r3, [r3, #12]
 8005c8c:	f003 0310 	and.w	r3, r3, #16
 8005c90:	2b10      	cmp	r3, #16
 8005c92:	d11b      	bne.n	8005ccc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f06f 0210 	mvn.w	r2, #16
 8005c9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2208      	movs	r2, #8
 8005ca2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	69db      	ldr	r3, [r3, #28]
 8005caa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d003      	beq.n	8005cba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f000 f870 	bl	8005d98 <HAL_TIM_IC_CaptureCallback>
 8005cb8:	e005      	b.n	8005cc6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cba:	6878      	ldr	r0, [r7, #4]
 8005cbc:	f000 f862 	bl	8005d84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cc0:	6878      	ldr	r0, [r7, #4]
 8005cc2:	f000 f873 	bl	8005dac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	691b      	ldr	r3, [r3, #16]
 8005cd2:	f003 0301 	and.w	r3, r3, #1
 8005cd6:	2b01      	cmp	r3, #1
 8005cd8:	d10e      	bne.n	8005cf8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	68db      	ldr	r3, [r3, #12]
 8005ce0:	f003 0301 	and.w	r3, r3, #1
 8005ce4:	2b01      	cmp	r3, #1
 8005ce6:	d107      	bne.n	8005cf8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f06f 0201 	mvn.w	r2, #1
 8005cf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f7fb fc1a 	bl	800152c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	691b      	ldr	r3, [r3, #16]
 8005cfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d02:	2b80      	cmp	r3, #128	; 0x80
 8005d04:	d10e      	bne.n	8005d24 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	68db      	ldr	r3, [r3, #12]
 8005d0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d10:	2b80      	cmp	r3, #128	; 0x80
 8005d12:	d107      	bne.n	8005d24 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005d1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005d1e:	6878      	ldr	r0, [r7, #4]
 8005d20:	f000 f8e2 	bl	8005ee8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	691b      	ldr	r3, [r3, #16]
 8005d2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d2e:	2b40      	cmp	r3, #64	; 0x40
 8005d30:	d10e      	bne.n	8005d50 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	68db      	ldr	r3, [r3, #12]
 8005d38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d3c:	2b40      	cmp	r3, #64	; 0x40
 8005d3e:	d107      	bne.n	8005d50 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005d48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	f000 f838 	bl	8005dc0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	691b      	ldr	r3, [r3, #16]
 8005d56:	f003 0320 	and.w	r3, r3, #32
 8005d5a:	2b20      	cmp	r3, #32
 8005d5c:	d10e      	bne.n	8005d7c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	68db      	ldr	r3, [r3, #12]
 8005d64:	f003 0320 	and.w	r3, r3, #32
 8005d68:	2b20      	cmp	r3, #32
 8005d6a:	d107      	bne.n	8005d7c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f06f 0220 	mvn.w	r2, #32
 8005d74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	f000 f8ac 	bl	8005ed4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005d7c:	bf00      	nop
 8005d7e:	3708      	adds	r7, #8
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd80      	pop	{r7, pc}

08005d84 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d84:	b480      	push	{r7}
 8005d86:	b083      	sub	sp, #12
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005d8c:	bf00      	nop
 8005d8e:	370c      	adds	r7, #12
 8005d90:	46bd      	mov	sp, r7
 8005d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d96:	4770      	bx	lr

08005d98 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b083      	sub	sp, #12
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005da0:	bf00      	nop
 8005da2:	370c      	adds	r7, #12
 8005da4:	46bd      	mov	sp, r7
 8005da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005daa:	4770      	bx	lr

08005dac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005dac:	b480      	push	{r7}
 8005dae:	b083      	sub	sp, #12
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005db4:	bf00      	nop
 8005db6:	370c      	adds	r7, #12
 8005db8:	46bd      	mov	sp, r7
 8005dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbe:	4770      	bx	lr

08005dc0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b083      	sub	sp, #12
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005dc8:	bf00      	nop
 8005dca:	370c      	adds	r7, #12
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd2:	4770      	bx	lr

08005dd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b085      	sub	sp, #20
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
 8005ddc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	4a34      	ldr	r2, [pc, #208]	; (8005eb8 <TIM_Base_SetConfig+0xe4>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d00f      	beq.n	8005e0c <TIM_Base_SetConfig+0x38>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005df2:	d00b      	beq.n	8005e0c <TIM_Base_SetConfig+0x38>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	4a31      	ldr	r2, [pc, #196]	; (8005ebc <TIM_Base_SetConfig+0xe8>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d007      	beq.n	8005e0c <TIM_Base_SetConfig+0x38>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	4a30      	ldr	r2, [pc, #192]	; (8005ec0 <TIM_Base_SetConfig+0xec>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d003      	beq.n	8005e0c <TIM_Base_SetConfig+0x38>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	4a2f      	ldr	r2, [pc, #188]	; (8005ec4 <TIM_Base_SetConfig+0xf0>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d108      	bne.n	8005e1e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	68fa      	ldr	r2, [r7, #12]
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	4a25      	ldr	r2, [pc, #148]	; (8005eb8 <TIM_Base_SetConfig+0xe4>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d01b      	beq.n	8005e5e <TIM_Base_SetConfig+0x8a>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e2c:	d017      	beq.n	8005e5e <TIM_Base_SetConfig+0x8a>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	4a22      	ldr	r2, [pc, #136]	; (8005ebc <TIM_Base_SetConfig+0xe8>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d013      	beq.n	8005e5e <TIM_Base_SetConfig+0x8a>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	4a21      	ldr	r2, [pc, #132]	; (8005ec0 <TIM_Base_SetConfig+0xec>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d00f      	beq.n	8005e5e <TIM_Base_SetConfig+0x8a>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	4a20      	ldr	r2, [pc, #128]	; (8005ec4 <TIM_Base_SetConfig+0xf0>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d00b      	beq.n	8005e5e <TIM_Base_SetConfig+0x8a>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	4a1f      	ldr	r2, [pc, #124]	; (8005ec8 <TIM_Base_SetConfig+0xf4>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d007      	beq.n	8005e5e <TIM_Base_SetConfig+0x8a>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	4a1e      	ldr	r2, [pc, #120]	; (8005ecc <TIM_Base_SetConfig+0xf8>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d003      	beq.n	8005e5e <TIM_Base_SetConfig+0x8a>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	4a1d      	ldr	r2, [pc, #116]	; (8005ed0 <TIM_Base_SetConfig+0xfc>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d108      	bne.n	8005e70 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	68db      	ldr	r3, [r3, #12]
 8005e6a:	68fa      	ldr	r2, [r7, #12]
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	695b      	ldr	r3, [r3, #20]
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	68fa      	ldr	r2, [r7, #12]
 8005e82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	689a      	ldr	r2, [r3, #8]
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	681a      	ldr	r2, [r3, #0]
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	4a08      	ldr	r2, [pc, #32]	; (8005eb8 <TIM_Base_SetConfig+0xe4>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d103      	bne.n	8005ea4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	691a      	ldr	r2, [r3, #16]
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	615a      	str	r2, [r3, #20]
}
 8005eaa:	bf00      	nop
 8005eac:	3714      	adds	r7, #20
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb4:	4770      	bx	lr
 8005eb6:	bf00      	nop
 8005eb8:	40010000 	.word	0x40010000
 8005ebc:	40000400 	.word	0x40000400
 8005ec0:	40000800 	.word	0x40000800
 8005ec4:	40000c00 	.word	0x40000c00
 8005ec8:	40014000 	.word	0x40014000
 8005ecc:	40014400 	.word	0x40014400
 8005ed0:	40014800 	.word	0x40014800

08005ed4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b083      	sub	sp, #12
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005edc:	bf00      	nop
 8005ede:	370c      	adds	r7, #12
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee6:	4770      	bx	lr

08005ee8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005ee8:	b480      	push	{r7}
 8005eea:	b083      	sub	sp, #12
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005ef0:	bf00      	nop
 8005ef2:	370c      	adds	r7, #12
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efa:	4770      	bx	lr

08005efc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b082      	sub	sp, #8
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d101      	bne.n	8005f0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	e03f      	b.n	8005f8e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f14:	b2db      	uxtb	r3, r3
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d106      	bne.n	8005f28 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	f7fb fbd6 	bl	80016d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2224      	movs	r2, #36	; 0x24
 8005f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	68da      	ldr	r2, [r3, #12]
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005f3e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005f40:	6878      	ldr	r0, [r7, #4]
 8005f42:	f000 fc7b 	bl	800683c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	691a      	ldr	r2, [r3, #16]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005f54:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	695a      	ldr	r2, [r3, #20]
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005f64:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	68da      	ldr	r2, [r3, #12]
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005f74:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2220      	movs	r2, #32
 8005f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2220      	movs	r2, #32
 8005f88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005f8c:	2300      	movs	r3, #0
}
 8005f8e:	4618      	mov	r0, r3
 8005f90:	3708      	adds	r7, #8
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bd80      	pop	{r7, pc}
	...

08005f98 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b0ba      	sub	sp, #232	; 0xe8
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	68db      	ldr	r3, [r3, #12]
 8005fb0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	695b      	ldr	r3, [r3, #20]
 8005fba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005fca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fce:	f003 030f 	and.w	r3, r3, #15
 8005fd2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005fd6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d10f      	bne.n	8005ffe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005fde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fe2:	f003 0320 	and.w	r3, r3, #32
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d009      	beq.n	8005ffe <HAL_UART_IRQHandler+0x66>
 8005fea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fee:	f003 0320 	and.w	r3, r3, #32
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d003      	beq.n	8005ffe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	f000 fb65 	bl	80066c6 <UART_Receive_IT>
      return;
 8005ffc:	e256      	b.n	80064ac <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005ffe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006002:	2b00      	cmp	r3, #0
 8006004:	f000 80de 	beq.w	80061c4 <HAL_UART_IRQHandler+0x22c>
 8006008:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800600c:	f003 0301 	and.w	r3, r3, #1
 8006010:	2b00      	cmp	r3, #0
 8006012:	d106      	bne.n	8006022 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006014:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006018:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800601c:	2b00      	cmp	r3, #0
 800601e:	f000 80d1 	beq.w	80061c4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006022:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006026:	f003 0301 	and.w	r3, r3, #1
 800602a:	2b00      	cmp	r3, #0
 800602c:	d00b      	beq.n	8006046 <HAL_UART_IRQHandler+0xae>
 800602e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006032:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006036:	2b00      	cmp	r3, #0
 8006038:	d005      	beq.n	8006046 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800603e:	f043 0201 	orr.w	r2, r3, #1
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006046:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800604a:	f003 0304 	and.w	r3, r3, #4
 800604e:	2b00      	cmp	r3, #0
 8006050:	d00b      	beq.n	800606a <HAL_UART_IRQHandler+0xd2>
 8006052:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006056:	f003 0301 	and.w	r3, r3, #1
 800605a:	2b00      	cmp	r3, #0
 800605c:	d005      	beq.n	800606a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006062:	f043 0202 	orr.w	r2, r3, #2
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800606a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800606e:	f003 0302 	and.w	r3, r3, #2
 8006072:	2b00      	cmp	r3, #0
 8006074:	d00b      	beq.n	800608e <HAL_UART_IRQHandler+0xf6>
 8006076:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800607a:	f003 0301 	and.w	r3, r3, #1
 800607e:	2b00      	cmp	r3, #0
 8006080:	d005      	beq.n	800608e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006086:	f043 0204 	orr.w	r2, r3, #4
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800608e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006092:	f003 0308 	and.w	r3, r3, #8
 8006096:	2b00      	cmp	r3, #0
 8006098:	d011      	beq.n	80060be <HAL_UART_IRQHandler+0x126>
 800609a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800609e:	f003 0320 	and.w	r3, r3, #32
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d105      	bne.n	80060b2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80060a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80060aa:	f003 0301 	and.w	r3, r3, #1
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d005      	beq.n	80060be <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060b6:	f043 0208 	orr.w	r2, r3, #8
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	f000 81ed 	beq.w	80064a2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80060c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060cc:	f003 0320 	and.w	r3, r3, #32
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d008      	beq.n	80060e6 <HAL_UART_IRQHandler+0x14e>
 80060d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060d8:	f003 0320 	and.w	r3, r3, #32
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d002      	beq.n	80060e6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	f000 faf0 	bl	80066c6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	695b      	ldr	r3, [r3, #20]
 80060ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060f0:	2b40      	cmp	r3, #64	; 0x40
 80060f2:	bf0c      	ite	eq
 80060f4:	2301      	moveq	r3, #1
 80060f6:	2300      	movne	r3, #0
 80060f8:	b2db      	uxtb	r3, r3
 80060fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006102:	f003 0308 	and.w	r3, r3, #8
 8006106:	2b00      	cmp	r3, #0
 8006108:	d103      	bne.n	8006112 <HAL_UART_IRQHandler+0x17a>
 800610a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800610e:	2b00      	cmp	r3, #0
 8006110:	d04f      	beq.n	80061b2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	f000 f9f8 	bl	8006508 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	695b      	ldr	r3, [r3, #20]
 800611e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006122:	2b40      	cmp	r3, #64	; 0x40
 8006124:	d141      	bne.n	80061aa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	3314      	adds	r3, #20
 800612c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006130:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006134:	e853 3f00 	ldrex	r3, [r3]
 8006138:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800613c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006140:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006144:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	3314      	adds	r3, #20
 800614e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006152:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006156:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800615a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800615e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006162:	e841 2300 	strex	r3, r2, [r1]
 8006166:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800616a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800616e:	2b00      	cmp	r3, #0
 8006170:	d1d9      	bne.n	8006126 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006176:	2b00      	cmp	r3, #0
 8006178:	d013      	beq.n	80061a2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800617e:	4a7d      	ldr	r2, [pc, #500]	; (8006374 <HAL_UART_IRQHandler+0x3dc>)
 8006180:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006186:	4618      	mov	r0, r3
 8006188:	f7fb fdca 	bl	8001d20 <HAL_DMA_Abort_IT>
 800618c:	4603      	mov	r3, r0
 800618e:	2b00      	cmp	r3, #0
 8006190:	d016      	beq.n	80061c0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006196:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006198:	687a      	ldr	r2, [r7, #4]
 800619a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800619c:	4610      	mov	r0, r2
 800619e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061a0:	e00e      	b.n	80061c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f000 f99a 	bl	80064dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061a8:	e00a      	b.n	80061c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f000 f996 	bl	80064dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061b0:	e006      	b.n	80061c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	f000 f992 	bl	80064dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2200      	movs	r2, #0
 80061bc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80061be:	e170      	b.n	80064a2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061c0:	bf00      	nop
    return;
 80061c2:	e16e      	b.n	80064a2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061c8:	2b01      	cmp	r3, #1
 80061ca:	f040 814a 	bne.w	8006462 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80061ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061d2:	f003 0310 	and.w	r3, r3, #16
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	f000 8143 	beq.w	8006462 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80061dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061e0:	f003 0310 	and.w	r3, r3, #16
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	f000 813c 	beq.w	8006462 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80061ea:	2300      	movs	r3, #0
 80061ec:	60bb      	str	r3, [r7, #8]
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	60bb      	str	r3, [r7, #8]
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	685b      	ldr	r3, [r3, #4]
 80061fc:	60bb      	str	r3, [r7, #8]
 80061fe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	695b      	ldr	r3, [r3, #20]
 8006206:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800620a:	2b40      	cmp	r3, #64	; 0x40
 800620c:	f040 80b4 	bne.w	8006378 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	685b      	ldr	r3, [r3, #4]
 8006218:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800621c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006220:	2b00      	cmp	r3, #0
 8006222:	f000 8140 	beq.w	80064a6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800622a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800622e:	429a      	cmp	r2, r3
 8006230:	f080 8139 	bcs.w	80064a6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800623a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006240:	69db      	ldr	r3, [r3, #28]
 8006242:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006246:	f000 8088 	beq.w	800635a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	330c      	adds	r3, #12
 8006250:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006254:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006258:	e853 3f00 	ldrex	r3, [r3]
 800625c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006260:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006264:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006268:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	330c      	adds	r3, #12
 8006272:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006276:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800627a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800627e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006282:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006286:	e841 2300 	strex	r3, r2, [r1]
 800628a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800628e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006292:	2b00      	cmp	r3, #0
 8006294:	d1d9      	bne.n	800624a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	3314      	adds	r3, #20
 800629c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800629e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80062a0:	e853 3f00 	ldrex	r3, [r3]
 80062a4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80062a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80062a8:	f023 0301 	bic.w	r3, r3, #1
 80062ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	3314      	adds	r3, #20
 80062b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80062ba:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80062be:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062c0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80062c2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80062c6:	e841 2300 	strex	r3, r2, [r1]
 80062ca:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80062cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d1e1      	bne.n	8006296 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	3314      	adds	r3, #20
 80062d8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80062dc:	e853 3f00 	ldrex	r3, [r3]
 80062e0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80062e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80062e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	3314      	adds	r3, #20
 80062f2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80062f6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80062f8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062fa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80062fc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80062fe:	e841 2300 	strex	r3, r2, [r1]
 8006302:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006304:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006306:	2b00      	cmp	r3, #0
 8006308:	d1e3      	bne.n	80062d2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2220      	movs	r2, #32
 800630e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2200      	movs	r2, #0
 8006316:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	330c      	adds	r3, #12
 800631e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006320:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006322:	e853 3f00 	ldrex	r3, [r3]
 8006326:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006328:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800632a:	f023 0310 	bic.w	r3, r3, #16
 800632e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	330c      	adds	r3, #12
 8006338:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800633c:	65ba      	str	r2, [r7, #88]	; 0x58
 800633e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006340:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006342:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006344:	e841 2300 	strex	r3, r2, [r1]
 8006348:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800634a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800634c:	2b00      	cmp	r3, #0
 800634e:	d1e3      	bne.n	8006318 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006354:	4618      	mov	r0, r3
 8006356:	f7fb fc73 	bl	8001c40 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006362:	b29b      	uxth	r3, r3
 8006364:	1ad3      	subs	r3, r2, r3
 8006366:	b29b      	uxth	r3, r3
 8006368:	4619      	mov	r1, r3
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f000 f8c0 	bl	80064f0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006370:	e099      	b.n	80064a6 <HAL_UART_IRQHandler+0x50e>
 8006372:	bf00      	nop
 8006374:	080065cf 	.word	0x080065cf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006380:	b29b      	uxth	r3, r3
 8006382:	1ad3      	subs	r3, r2, r3
 8006384:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800638c:	b29b      	uxth	r3, r3
 800638e:	2b00      	cmp	r3, #0
 8006390:	f000 808b 	beq.w	80064aa <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006394:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006398:	2b00      	cmp	r3, #0
 800639a:	f000 8086 	beq.w	80064aa <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	330c      	adds	r3, #12
 80063a4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063a8:	e853 3f00 	ldrex	r3, [r3]
 80063ac:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80063ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063b0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80063b4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	330c      	adds	r3, #12
 80063be:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80063c2:	647a      	str	r2, [r7, #68]	; 0x44
 80063c4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063c6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80063c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80063ca:	e841 2300 	strex	r3, r2, [r1]
 80063ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80063d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d1e3      	bne.n	800639e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	3314      	adds	r3, #20
 80063dc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e0:	e853 3f00 	ldrex	r3, [r3]
 80063e4:	623b      	str	r3, [r7, #32]
   return(result);
 80063e6:	6a3b      	ldr	r3, [r7, #32]
 80063e8:	f023 0301 	bic.w	r3, r3, #1
 80063ec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	3314      	adds	r3, #20
 80063f6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80063fa:	633a      	str	r2, [r7, #48]	; 0x30
 80063fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006400:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006402:	e841 2300 	strex	r3, r2, [r1]
 8006406:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800640a:	2b00      	cmp	r3, #0
 800640c:	d1e3      	bne.n	80063d6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2220      	movs	r2, #32
 8006412:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2200      	movs	r2, #0
 800641a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	330c      	adds	r3, #12
 8006422:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006424:	693b      	ldr	r3, [r7, #16]
 8006426:	e853 3f00 	ldrex	r3, [r3]
 800642a:	60fb      	str	r3, [r7, #12]
   return(result);
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	f023 0310 	bic.w	r3, r3, #16
 8006432:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	330c      	adds	r3, #12
 800643c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006440:	61fa      	str	r2, [r7, #28]
 8006442:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006444:	69b9      	ldr	r1, [r7, #24]
 8006446:	69fa      	ldr	r2, [r7, #28]
 8006448:	e841 2300 	strex	r3, r2, [r1]
 800644c:	617b      	str	r3, [r7, #20]
   return(result);
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d1e3      	bne.n	800641c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006454:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006458:	4619      	mov	r1, r3
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f000 f848 	bl	80064f0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006460:	e023      	b.n	80064aa <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006462:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006466:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800646a:	2b00      	cmp	r3, #0
 800646c:	d009      	beq.n	8006482 <HAL_UART_IRQHandler+0x4ea>
 800646e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006472:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006476:	2b00      	cmp	r3, #0
 8006478:	d003      	beq.n	8006482 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f000 f8bb 	bl	80065f6 <UART_Transmit_IT>
    return;
 8006480:	e014      	b.n	80064ac <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006482:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006486:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800648a:	2b00      	cmp	r3, #0
 800648c:	d00e      	beq.n	80064ac <HAL_UART_IRQHandler+0x514>
 800648e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006492:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006496:	2b00      	cmp	r3, #0
 8006498:	d008      	beq.n	80064ac <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	f000 f8fb 	bl	8006696 <UART_EndTransmit_IT>
    return;
 80064a0:	e004      	b.n	80064ac <HAL_UART_IRQHandler+0x514>
    return;
 80064a2:	bf00      	nop
 80064a4:	e002      	b.n	80064ac <HAL_UART_IRQHandler+0x514>
      return;
 80064a6:	bf00      	nop
 80064a8:	e000      	b.n	80064ac <HAL_UART_IRQHandler+0x514>
      return;
 80064aa:	bf00      	nop
  }
}
 80064ac:	37e8      	adds	r7, #232	; 0xe8
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bd80      	pop	{r7, pc}
 80064b2:	bf00      	nop

080064b4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80064b4:	b480      	push	{r7}
 80064b6:	b083      	sub	sp, #12
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80064bc:	bf00      	nop
 80064be:	370c      	adds	r7, #12
 80064c0:	46bd      	mov	sp, r7
 80064c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c6:	4770      	bx	lr

080064c8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80064c8:	b480      	push	{r7}
 80064ca:	b083      	sub	sp, #12
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80064d0:	bf00      	nop
 80064d2:	370c      	adds	r7, #12
 80064d4:	46bd      	mov	sp, r7
 80064d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064da:	4770      	bx	lr

080064dc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80064dc:	b480      	push	{r7}
 80064de:	b083      	sub	sp, #12
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80064e4:	bf00      	nop
 80064e6:	370c      	adds	r7, #12
 80064e8:	46bd      	mov	sp, r7
 80064ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ee:	4770      	bx	lr

080064f0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80064f0:	b480      	push	{r7}
 80064f2:	b083      	sub	sp, #12
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
 80064f8:	460b      	mov	r3, r1
 80064fa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80064fc:	bf00      	nop
 80064fe:	370c      	adds	r7, #12
 8006500:	46bd      	mov	sp, r7
 8006502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006506:	4770      	bx	lr

08006508 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006508:	b480      	push	{r7}
 800650a:	b095      	sub	sp, #84	; 0x54
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	330c      	adds	r3, #12
 8006516:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006518:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800651a:	e853 3f00 	ldrex	r3, [r3]
 800651e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006522:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006526:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	330c      	adds	r3, #12
 800652e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006530:	643a      	str	r2, [r7, #64]	; 0x40
 8006532:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006534:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006536:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006538:	e841 2300 	strex	r3, r2, [r1]
 800653c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800653e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006540:	2b00      	cmp	r3, #0
 8006542:	d1e5      	bne.n	8006510 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	3314      	adds	r3, #20
 800654a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800654c:	6a3b      	ldr	r3, [r7, #32]
 800654e:	e853 3f00 	ldrex	r3, [r3]
 8006552:	61fb      	str	r3, [r7, #28]
   return(result);
 8006554:	69fb      	ldr	r3, [r7, #28]
 8006556:	f023 0301 	bic.w	r3, r3, #1
 800655a:	64bb      	str	r3, [r7, #72]	; 0x48
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	3314      	adds	r3, #20
 8006562:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006564:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006566:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006568:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800656a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800656c:	e841 2300 	strex	r3, r2, [r1]
 8006570:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006574:	2b00      	cmp	r3, #0
 8006576:	d1e5      	bne.n	8006544 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800657c:	2b01      	cmp	r3, #1
 800657e:	d119      	bne.n	80065b4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	330c      	adds	r3, #12
 8006586:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	e853 3f00 	ldrex	r3, [r3]
 800658e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	f023 0310 	bic.w	r3, r3, #16
 8006596:	647b      	str	r3, [r7, #68]	; 0x44
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	330c      	adds	r3, #12
 800659e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80065a0:	61ba      	str	r2, [r7, #24]
 80065a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065a4:	6979      	ldr	r1, [r7, #20]
 80065a6:	69ba      	ldr	r2, [r7, #24]
 80065a8:	e841 2300 	strex	r3, r2, [r1]
 80065ac:	613b      	str	r3, [r7, #16]
   return(result);
 80065ae:	693b      	ldr	r3, [r7, #16]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d1e5      	bne.n	8006580 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2220      	movs	r2, #32
 80065b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2200      	movs	r2, #0
 80065c0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80065c2:	bf00      	nop
 80065c4:	3754      	adds	r7, #84	; 0x54
 80065c6:	46bd      	mov	sp, r7
 80065c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065cc:	4770      	bx	lr

080065ce <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80065ce:	b580      	push	{r7, lr}
 80065d0:	b084      	sub	sp, #16
 80065d2:	af00      	add	r7, sp, #0
 80065d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065da:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	2200      	movs	r2, #0
 80065e0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	2200      	movs	r2, #0
 80065e6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80065e8:	68f8      	ldr	r0, [r7, #12]
 80065ea:	f7ff ff77 	bl	80064dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80065ee:	bf00      	nop
 80065f0:	3710      	adds	r7, #16
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}

080065f6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80065f6:	b480      	push	{r7}
 80065f8:	b085      	sub	sp, #20
 80065fa:	af00      	add	r7, sp, #0
 80065fc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006604:	b2db      	uxtb	r3, r3
 8006606:	2b21      	cmp	r3, #33	; 0x21
 8006608:	d13e      	bne.n	8006688 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	689b      	ldr	r3, [r3, #8]
 800660e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006612:	d114      	bne.n	800663e <UART_Transmit_IT+0x48>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	691b      	ldr	r3, [r3, #16]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d110      	bne.n	800663e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6a1b      	ldr	r3, [r3, #32]
 8006620:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	881b      	ldrh	r3, [r3, #0]
 8006626:	461a      	mov	r2, r3
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006630:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6a1b      	ldr	r3, [r3, #32]
 8006636:	1c9a      	adds	r2, r3, #2
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	621a      	str	r2, [r3, #32]
 800663c:	e008      	b.n	8006650 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6a1b      	ldr	r3, [r3, #32]
 8006642:	1c59      	adds	r1, r3, #1
 8006644:	687a      	ldr	r2, [r7, #4]
 8006646:	6211      	str	r1, [r2, #32]
 8006648:	781a      	ldrb	r2, [r3, #0]
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006654:	b29b      	uxth	r3, r3
 8006656:	3b01      	subs	r3, #1
 8006658:	b29b      	uxth	r3, r3
 800665a:	687a      	ldr	r2, [r7, #4]
 800665c:	4619      	mov	r1, r3
 800665e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006660:	2b00      	cmp	r3, #0
 8006662:	d10f      	bne.n	8006684 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	68da      	ldr	r2, [r3, #12]
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006672:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	68da      	ldr	r2, [r3, #12]
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006682:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006684:	2300      	movs	r3, #0
 8006686:	e000      	b.n	800668a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006688:	2302      	movs	r3, #2
  }
}
 800668a:	4618      	mov	r0, r3
 800668c:	3714      	adds	r7, #20
 800668e:	46bd      	mov	sp, r7
 8006690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006694:	4770      	bx	lr

08006696 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006696:	b580      	push	{r7, lr}
 8006698:	b082      	sub	sp, #8
 800669a:	af00      	add	r7, sp, #0
 800669c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	68da      	ldr	r2, [r3, #12]
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066ac:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2220      	movs	r2, #32
 80066b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80066b6:	6878      	ldr	r0, [r7, #4]
 80066b8:	f7ff fefc 	bl	80064b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80066bc:	2300      	movs	r3, #0
}
 80066be:	4618      	mov	r0, r3
 80066c0:	3708      	adds	r7, #8
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd80      	pop	{r7, pc}

080066c6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80066c6:	b580      	push	{r7, lr}
 80066c8:	b08c      	sub	sp, #48	; 0x30
 80066ca:	af00      	add	r7, sp, #0
 80066cc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80066d4:	b2db      	uxtb	r3, r3
 80066d6:	2b22      	cmp	r3, #34	; 0x22
 80066d8:	f040 80ab 	bne.w	8006832 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	689b      	ldr	r3, [r3, #8]
 80066e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066e4:	d117      	bne.n	8006716 <UART_Receive_IT+0x50>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	691b      	ldr	r3, [r3, #16]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d113      	bne.n	8006716 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80066ee:	2300      	movs	r3, #0
 80066f0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066f6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	685b      	ldr	r3, [r3, #4]
 80066fe:	b29b      	uxth	r3, r3
 8006700:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006704:	b29a      	uxth	r2, r3
 8006706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006708:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800670e:	1c9a      	adds	r2, r3, #2
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	629a      	str	r2, [r3, #40]	; 0x28
 8006714:	e026      	b.n	8006764 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800671a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800671c:	2300      	movs	r3, #0
 800671e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	689b      	ldr	r3, [r3, #8]
 8006724:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006728:	d007      	beq.n	800673a <UART_Receive_IT+0x74>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	689b      	ldr	r3, [r3, #8]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d10a      	bne.n	8006748 <UART_Receive_IT+0x82>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	691b      	ldr	r3, [r3, #16]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d106      	bne.n	8006748 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	685b      	ldr	r3, [r3, #4]
 8006740:	b2da      	uxtb	r2, r3
 8006742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006744:	701a      	strb	r2, [r3, #0]
 8006746:	e008      	b.n	800675a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	685b      	ldr	r3, [r3, #4]
 800674e:	b2db      	uxtb	r3, r3
 8006750:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006754:	b2da      	uxtb	r2, r3
 8006756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006758:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800675e:	1c5a      	adds	r2, r3, #1
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006768:	b29b      	uxth	r3, r3
 800676a:	3b01      	subs	r3, #1
 800676c:	b29b      	uxth	r3, r3
 800676e:	687a      	ldr	r2, [r7, #4]
 8006770:	4619      	mov	r1, r3
 8006772:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006774:	2b00      	cmp	r3, #0
 8006776:	d15a      	bne.n	800682e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	68da      	ldr	r2, [r3, #12]
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f022 0220 	bic.w	r2, r2, #32
 8006786:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	68da      	ldr	r2, [r3, #12]
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006796:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	695a      	ldr	r2, [r3, #20]
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f022 0201 	bic.w	r2, r2, #1
 80067a6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2220      	movs	r2, #32
 80067ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067b4:	2b01      	cmp	r3, #1
 80067b6:	d135      	bne.n	8006824 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2200      	movs	r2, #0
 80067bc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	330c      	adds	r3, #12
 80067c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067c6:	697b      	ldr	r3, [r7, #20]
 80067c8:	e853 3f00 	ldrex	r3, [r3]
 80067cc:	613b      	str	r3, [r7, #16]
   return(result);
 80067ce:	693b      	ldr	r3, [r7, #16]
 80067d0:	f023 0310 	bic.w	r3, r3, #16
 80067d4:	627b      	str	r3, [r7, #36]	; 0x24
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	330c      	adds	r3, #12
 80067dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067de:	623a      	str	r2, [r7, #32]
 80067e0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067e2:	69f9      	ldr	r1, [r7, #28]
 80067e4:	6a3a      	ldr	r2, [r7, #32]
 80067e6:	e841 2300 	strex	r3, r2, [r1]
 80067ea:	61bb      	str	r3, [r7, #24]
   return(result);
 80067ec:	69bb      	ldr	r3, [r7, #24]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d1e5      	bne.n	80067be <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f003 0310 	and.w	r3, r3, #16
 80067fc:	2b10      	cmp	r3, #16
 80067fe:	d10a      	bne.n	8006816 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006800:	2300      	movs	r3, #0
 8006802:	60fb      	str	r3, [r7, #12]
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	60fb      	str	r3, [r7, #12]
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	685b      	ldr	r3, [r3, #4]
 8006812:	60fb      	str	r3, [r7, #12]
 8006814:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800681a:	4619      	mov	r1, r3
 800681c:	6878      	ldr	r0, [r7, #4]
 800681e:	f7ff fe67 	bl	80064f0 <HAL_UARTEx_RxEventCallback>
 8006822:	e002      	b.n	800682a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006824:	6878      	ldr	r0, [r7, #4]
 8006826:	f7ff fe4f 	bl	80064c8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800682a:	2300      	movs	r3, #0
 800682c:	e002      	b.n	8006834 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800682e:	2300      	movs	r3, #0
 8006830:	e000      	b.n	8006834 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006832:	2302      	movs	r3, #2
  }
}
 8006834:	4618      	mov	r0, r3
 8006836:	3730      	adds	r7, #48	; 0x30
 8006838:	46bd      	mov	sp, r7
 800683a:	bd80      	pop	{r7, pc}

0800683c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800683c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006840:	b0c0      	sub	sp, #256	; 0x100
 8006842:	af00      	add	r7, sp, #0
 8006844:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006848:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	691b      	ldr	r3, [r3, #16]
 8006850:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006854:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006858:	68d9      	ldr	r1, [r3, #12]
 800685a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800685e:	681a      	ldr	r2, [r3, #0]
 8006860:	ea40 0301 	orr.w	r3, r0, r1
 8006864:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006866:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800686a:	689a      	ldr	r2, [r3, #8]
 800686c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006870:	691b      	ldr	r3, [r3, #16]
 8006872:	431a      	orrs	r2, r3
 8006874:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006878:	695b      	ldr	r3, [r3, #20]
 800687a:	431a      	orrs	r2, r3
 800687c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006880:	69db      	ldr	r3, [r3, #28]
 8006882:	4313      	orrs	r3, r2
 8006884:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006888:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	68db      	ldr	r3, [r3, #12]
 8006890:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006894:	f021 010c 	bic.w	r1, r1, #12
 8006898:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800689c:	681a      	ldr	r2, [r3, #0]
 800689e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80068a2:	430b      	orrs	r3, r1
 80068a4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80068a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	695b      	ldr	r3, [r3, #20]
 80068ae:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80068b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068b6:	6999      	ldr	r1, [r3, #24]
 80068b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068bc:	681a      	ldr	r2, [r3, #0]
 80068be:	ea40 0301 	orr.w	r3, r0, r1
 80068c2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80068c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068c8:	681a      	ldr	r2, [r3, #0]
 80068ca:	4b8f      	ldr	r3, [pc, #572]	; (8006b08 <UART_SetConfig+0x2cc>)
 80068cc:	429a      	cmp	r2, r3
 80068ce:	d005      	beq.n	80068dc <UART_SetConfig+0xa0>
 80068d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068d4:	681a      	ldr	r2, [r3, #0]
 80068d6:	4b8d      	ldr	r3, [pc, #564]	; (8006b0c <UART_SetConfig+0x2d0>)
 80068d8:	429a      	cmp	r2, r3
 80068da:	d104      	bne.n	80068e6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80068dc:	f7fe faa0 	bl	8004e20 <HAL_RCC_GetPCLK2Freq>
 80068e0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80068e4:	e003      	b.n	80068ee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80068e6:	f7fe fa87 	bl	8004df8 <HAL_RCC_GetPCLK1Freq>
 80068ea:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80068ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068f2:	69db      	ldr	r3, [r3, #28]
 80068f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068f8:	f040 810c 	bne.w	8006b14 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80068fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006900:	2200      	movs	r2, #0
 8006902:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006906:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800690a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800690e:	4622      	mov	r2, r4
 8006910:	462b      	mov	r3, r5
 8006912:	1891      	adds	r1, r2, r2
 8006914:	65b9      	str	r1, [r7, #88]	; 0x58
 8006916:	415b      	adcs	r3, r3
 8006918:	65fb      	str	r3, [r7, #92]	; 0x5c
 800691a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800691e:	4621      	mov	r1, r4
 8006920:	eb12 0801 	adds.w	r8, r2, r1
 8006924:	4629      	mov	r1, r5
 8006926:	eb43 0901 	adc.w	r9, r3, r1
 800692a:	f04f 0200 	mov.w	r2, #0
 800692e:	f04f 0300 	mov.w	r3, #0
 8006932:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006936:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800693a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800693e:	4690      	mov	r8, r2
 8006940:	4699      	mov	r9, r3
 8006942:	4623      	mov	r3, r4
 8006944:	eb18 0303 	adds.w	r3, r8, r3
 8006948:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800694c:	462b      	mov	r3, r5
 800694e:	eb49 0303 	adc.w	r3, r9, r3
 8006952:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006956:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800695a:	685b      	ldr	r3, [r3, #4]
 800695c:	2200      	movs	r2, #0
 800695e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006962:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006966:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800696a:	460b      	mov	r3, r1
 800696c:	18db      	adds	r3, r3, r3
 800696e:	653b      	str	r3, [r7, #80]	; 0x50
 8006970:	4613      	mov	r3, r2
 8006972:	eb42 0303 	adc.w	r3, r2, r3
 8006976:	657b      	str	r3, [r7, #84]	; 0x54
 8006978:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800697c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006980:	f7f9 ff64 	bl	800084c <__aeabi_uldivmod>
 8006984:	4602      	mov	r2, r0
 8006986:	460b      	mov	r3, r1
 8006988:	4b61      	ldr	r3, [pc, #388]	; (8006b10 <UART_SetConfig+0x2d4>)
 800698a:	fba3 2302 	umull	r2, r3, r3, r2
 800698e:	095b      	lsrs	r3, r3, #5
 8006990:	011c      	lsls	r4, r3, #4
 8006992:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006996:	2200      	movs	r2, #0
 8006998:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800699c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80069a0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80069a4:	4642      	mov	r2, r8
 80069a6:	464b      	mov	r3, r9
 80069a8:	1891      	adds	r1, r2, r2
 80069aa:	64b9      	str	r1, [r7, #72]	; 0x48
 80069ac:	415b      	adcs	r3, r3
 80069ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80069b0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80069b4:	4641      	mov	r1, r8
 80069b6:	eb12 0a01 	adds.w	sl, r2, r1
 80069ba:	4649      	mov	r1, r9
 80069bc:	eb43 0b01 	adc.w	fp, r3, r1
 80069c0:	f04f 0200 	mov.w	r2, #0
 80069c4:	f04f 0300 	mov.w	r3, #0
 80069c8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80069cc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80069d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80069d4:	4692      	mov	sl, r2
 80069d6:	469b      	mov	fp, r3
 80069d8:	4643      	mov	r3, r8
 80069da:	eb1a 0303 	adds.w	r3, sl, r3
 80069de:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80069e2:	464b      	mov	r3, r9
 80069e4:	eb4b 0303 	adc.w	r3, fp, r3
 80069e8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80069ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069f0:	685b      	ldr	r3, [r3, #4]
 80069f2:	2200      	movs	r2, #0
 80069f4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80069f8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80069fc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006a00:	460b      	mov	r3, r1
 8006a02:	18db      	adds	r3, r3, r3
 8006a04:	643b      	str	r3, [r7, #64]	; 0x40
 8006a06:	4613      	mov	r3, r2
 8006a08:	eb42 0303 	adc.w	r3, r2, r3
 8006a0c:	647b      	str	r3, [r7, #68]	; 0x44
 8006a0e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006a12:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006a16:	f7f9 ff19 	bl	800084c <__aeabi_uldivmod>
 8006a1a:	4602      	mov	r2, r0
 8006a1c:	460b      	mov	r3, r1
 8006a1e:	4611      	mov	r1, r2
 8006a20:	4b3b      	ldr	r3, [pc, #236]	; (8006b10 <UART_SetConfig+0x2d4>)
 8006a22:	fba3 2301 	umull	r2, r3, r3, r1
 8006a26:	095b      	lsrs	r3, r3, #5
 8006a28:	2264      	movs	r2, #100	; 0x64
 8006a2a:	fb02 f303 	mul.w	r3, r2, r3
 8006a2e:	1acb      	subs	r3, r1, r3
 8006a30:	00db      	lsls	r3, r3, #3
 8006a32:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006a36:	4b36      	ldr	r3, [pc, #216]	; (8006b10 <UART_SetConfig+0x2d4>)
 8006a38:	fba3 2302 	umull	r2, r3, r3, r2
 8006a3c:	095b      	lsrs	r3, r3, #5
 8006a3e:	005b      	lsls	r3, r3, #1
 8006a40:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006a44:	441c      	add	r4, r3
 8006a46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006a50:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006a54:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006a58:	4642      	mov	r2, r8
 8006a5a:	464b      	mov	r3, r9
 8006a5c:	1891      	adds	r1, r2, r2
 8006a5e:	63b9      	str	r1, [r7, #56]	; 0x38
 8006a60:	415b      	adcs	r3, r3
 8006a62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a64:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006a68:	4641      	mov	r1, r8
 8006a6a:	1851      	adds	r1, r2, r1
 8006a6c:	6339      	str	r1, [r7, #48]	; 0x30
 8006a6e:	4649      	mov	r1, r9
 8006a70:	414b      	adcs	r3, r1
 8006a72:	637b      	str	r3, [r7, #52]	; 0x34
 8006a74:	f04f 0200 	mov.w	r2, #0
 8006a78:	f04f 0300 	mov.w	r3, #0
 8006a7c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006a80:	4659      	mov	r1, fp
 8006a82:	00cb      	lsls	r3, r1, #3
 8006a84:	4651      	mov	r1, sl
 8006a86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006a8a:	4651      	mov	r1, sl
 8006a8c:	00ca      	lsls	r2, r1, #3
 8006a8e:	4610      	mov	r0, r2
 8006a90:	4619      	mov	r1, r3
 8006a92:	4603      	mov	r3, r0
 8006a94:	4642      	mov	r2, r8
 8006a96:	189b      	adds	r3, r3, r2
 8006a98:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006a9c:	464b      	mov	r3, r9
 8006a9e:	460a      	mov	r2, r1
 8006aa0:	eb42 0303 	adc.w	r3, r2, r3
 8006aa4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006aa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006aac:	685b      	ldr	r3, [r3, #4]
 8006aae:	2200      	movs	r2, #0
 8006ab0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006ab4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006ab8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006abc:	460b      	mov	r3, r1
 8006abe:	18db      	adds	r3, r3, r3
 8006ac0:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ac2:	4613      	mov	r3, r2
 8006ac4:	eb42 0303 	adc.w	r3, r2, r3
 8006ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006aca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006ace:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006ad2:	f7f9 febb 	bl	800084c <__aeabi_uldivmod>
 8006ad6:	4602      	mov	r2, r0
 8006ad8:	460b      	mov	r3, r1
 8006ada:	4b0d      	ldr	r3, [pc, #52]	; (8006b10 <UART_SetConfig+0x2d4>)
 8006adc:	fba3 1302 	umull	r1, r3, r3, r2
 8006ae0:	095b      	lsrs	r3, r3, #5
 8006ae2:	2164      	movs	r1, #100	; 0x64
 8006ae4:	fb01 f303 	mul.w	r3, r1, r3
 8006ae8:	1ad3      	subs	r3, r2, r3
 8006aea:	00db      	lsls	r3, r3, #3
 8006aec:	3332      	adds	r3, #50	; 0x32
 8006aee:	4a08      	ldr	r2, [pc, #32]	; (8006b10 <UART_SetConfig+0x2d4>)
 8006af0:	fba2 2303 	umull	r2, r3, r2, r3
 8006af4:	095b      	lsrs	r3, r3, #5
 8006af6:	f003 0207 	and.w	r2, r3, #7
 8006afa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	4422      	add	r2, r4
 8006b02:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006b04:	e106      	b.n	8006d14 <UART_SetConfig+0x4d8>
 8006b06:	bf00      	nop
 8006b08:	40011000 	.word	0x40011000
 8006b0c:	40011400 	.word	0x40011400
 8006b10:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006b14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b18:	2200      	movs	r2, #0
 8006b1a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006b1e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006b22:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006b26:	4642      	mov	r2, r8
 8006b28:	464b      	mov	r3, r9
 8006b2a:	1891      	adds	r1, r2, r2
 8006b2c:	6239      	str	r1, [r7, #32]
 8006b2e:	415b      	adcs	r3, r3
 8006b30:	627b      	str	r3, [r7, #36]	; 0x24
 8006b32:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006b36:	4641      	mov	r1, r8
 8006b38:	1854      	adds	r4, r2, r1
 8006b3a:	4649      	mov	r1, r9
 8006b3c:	eb43 0501 	adc.w	r5, r3, r1
 8006b40:	f04f 0200 	mov.w	r2, #0
 8006b44:	f04f 0300 	mov.w	r3, #0
 8006b48:	00eb      	lsls	r3, r5, #3
 8006b4a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006b4e:	00e2      	lsls	r2, r4, #3
 8006b50:	4614      	mov	r4, r2
 8006b52:	461d      	mov	r5, r3
 8006b54:	4643      	mov	r3, r8
 8006b56:	18e3      	adds	r3, r4, r3
 8006b58:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006b5c:	464b      	mov	r3, r9
 8006b5e:	eb45 0303 	adc.w	r3, r5, r3
 8006b62:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006b66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b6a:	685b      	ldr	r3, [r3, #4]
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006b72:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006b76:	f04f 0200 	mov.w	r2, #0
 8006b7a:	f04f 0300 	mov.w	r3, #0
 8006b7e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006b82:	4629      	mov	r1, r5
 8006b84:	008b      	lsls	r3, r1, #2
 8006b86:	4621      	mov	r1, r4
 8006b88:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006b8c:	4621      	mov	r1, r4
 8006b8e:	008a      	lsls	r2, r1, #2
 8006b90:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006b94:	f7f9 fe5a 	bl	800084c <__aeabi_uldivmod>
 8006b98:	4602      	mov	r2, r0
 8006b9a:	460b      	mov	r3, r1
 8006b9c:	4b60      	ldr	r3, [pc, #384]	; (8006d20 <UART_SetConfig+0x4e4>)
 8006b9e:	fba3 2302 	umull	r2, r3, r3, r2
 8006ba2:	095b      	lsrs	r3, r3, #5
 8006ba4:	011c      	lsls	r4, r3, #4
 8006ba6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006baa:	2200      	movs	r2, #0
 8006bac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006bb0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006bb4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006bb8:	4642      	mov	r2, r8
 8006bba:	464b      	mov	r3, r9
 8006bbc:	1891      	adds	r1, r2, r2
 8006bbe:	61b9      	str	r1, [r7, #24]
 8006bc0:	415b      	adcs	r3, r3
 8006bc2:	61fb      	str	r3, [r7, #28]
 8006bc4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006bc8:	4641      	mov	r1, r8
 8006bca:	1851      	adds	r1, r2, r1
 8006bcc:	6139      	str	r1, [r7, #16]
 8006bce:	4649      	mov	r1, r9
 8006bd0:	414b      	adcs	r3, r1
 8006bd2:	617b      	str	r3, [r7, #20]
 8006bd4:	f04f 0200 	mov.w	r2, #0
 8006bd8:	f04f 0300 	mov.w	r3, #0
 8006bdc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006be0:	4659      	mov	r1, fp
 8006be2:	00cb      	lsls	r3, r1, #3
 8006be4:	4651      	mov	r1, sl
 8006be6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006bea:	4651      	mov	r1, sl
 8006bec:	00ca      	lsls	r2, r1, #3
 8006bee:	4610      	mov	r0, r2
 8006bf0:	4619      	mov	r1, r3
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	4642      	mov	r2, r8
 8006bf6:	189b      	adds	r3, r3, r2
 8006bf8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006bfc:	464b      	mov	r3, r9
 8006bfe:	460a      	mov	r2, r1
 8006c00:	eb42 0303 	adc.w	r3, r2, r3
 8006c04:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006c08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c0c:	685b      	ldr	r3, [r3, #4]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	67bb      	str	r3, [r7, #120]	; 0x78
 8006c12:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006c14:	f04f 0200 	mov.w	r2, #0
 8006c18:	f04f 0300 	mov.w	r3, #0
 8006c1c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006c20:	4649      	mov	r1, r9
 8006c22:	008b      	lsls	r3, r1, #2
 8006c24:	4641      	mov	r1, r8
 8006c26:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006c2a:	4641      	mov	r1, r8
 8006c2c:	008a      	lsls	r2, r1, #2
 8006c2e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006c32:	f7f9 fe0b 	bl	800084c <__aeabi_uldivmod>
 8006c36:	4602      	mov	r2, r0
 8006c38:	460b      	mov	r3, r1
 8006c3a:	4611      	mov	r1, r2
 8006c3c:	4b38      	ldr	r3, [pc, #224]	; (8006d20 <UART_SetConfig+0x4e4>)
 8006c3e:	fba3 2301 	umull	r2, r3, r3, r1
 8006c42:	095b      	lsrs	r3, r3, #5
 8006c44:	2264      	movs	r2, #100	; 0x64
 8006c46:	fb02 f303 	mul.w	r3, r2, r3
 8006c4a:	1acb      	subs	r3, r1, r3
 8006c4c:	011b      	lsls	r3, r3, #4
 8006c4e:	3332      	adds	r3, #50	; 0x32
 8006c50:	4a33      	ldr	r2, [pc, #204]	; (8006d20 <UART_SetConfig+0x4e4>)
 8006c52:	fba2 2303 	umull	r2, r3, r2, r3
 8006c56:	095b      	lsrs	r3, r3, #5
 8006c58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006c5c:	441c      	add	r4, r3
 8006c5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c62:	2200      	movs	r2, #0
 8006c64:	673b      	str	r3, [r7, #112]	; 0x70
 8006c66:	677a      	str	r2, [r7, #116]	; 0x74
 8006c68:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006c6c:	4642      	mov	r2, r8
 8006c6e:	464b      	mov	r3, r9
 8006c70:	1891      	adds	r1, r2, r2
 8006c72:	60b9      	str	r1, [r7, #8]
 8006c74:	415b      	adcs	r3, r3
 8006c76:	60fb      	str	r3, [r7, #12]
 8006c78:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006c7c:	4641      	mov	r1, r8
 8006c7e:	1851      	adds	r1, r2, r1
 8006c80:	6039      	str	r1, [r7, #0]
 8006c82:	4649      	mov	r1, r9
 8006c84:	414b      	adcs	r3, r1
 8006c86:	607b      	str	r3, [r7, #4]
 8006c88:	f04f 0200 	mov.w	r2, #0
 8006c8c:	f04f 0300 	mov.w	r3, #0
 8006c90:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006c94:	4659      	mov	r1, fp
 8006c96:	00cb      	lsls	r3, r1, #3
 8006c98:	4651      	mov	r1, sl
 8006c9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006c9e:	4651      	mov	r1, sl
 8006ca0:	00ca      	lsls	r2, r1, #3
 8006ca2:	4610      	mov	r0, r2
 8006ca4:	4619      	mov	r1, r3
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	4642      	mov	r2, r8
 8006caa:	189b      	adds	r3, r3, r2
 8006cac:	66bb      	str	r3, [r7, #104]	; 0x68
 8006cae:	464b      	mov	r3, r9
 8006cb0:	460a      	mov	r2, r1
 8006cb2:	eb42 0303 	adc.w	r3, r2, r3
 8006cb6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006cb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cbc:	685b      	ldr	r3, [r3, #4]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	663b      	str	r3, [r7, #96]	; 0x60
 8006cc2:	667a      	str	r2, [r7, #100]	; 0x64
 8006cc4:	f04f 0200 	mov.w	r2, #0
 8006cc8:	f04f 0300 	mov.w	r3, #0
 8006ccc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006cd0:	4649      	mov	r1, r9
 8006cd2:	008b      	lsls	r3, r1, #2
 8006cd4:	4641      	mov	r1, r8
 8006cd6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006cda:	4641      	mov	r1, r8
 8006cdc:	008a      	lsls	r2, r1, #2
 8006cde:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006ce2:	f7f9 fdb3 	bl	800084c <__aeabi_uldivmod>
 8006ce6:	4602      	mov	r2, r0
 8006ce8:	460b      	mov	r3, r1
 8006cea:	4b0d      	ldr	r3, [pc, #52]	; (8006d20 <UART_SetConfig+0x4e4>)
 8006cec:	fba3 1302 	umull	r1, r3, r3, r2
 8006cf0:	095b      	lsrs	r3, r3, #5
 8006cf2:	2164      	movs	r1, #100	; 0x64
 8006cf4:	fb01 f303 	mul.w	r3, r1, r3
 8006cf8:	1ad3      	subs	r3, r2, r3
 8006cfa:	011b      	lsls	r3, r3, #4
 8006cfc:	3332      	adds	r3, #50	; 0x32
 8006cfe:	4a08      	ldr	r2, [pc, #32]	; (8006d20 <UART_SetConfig+0x4e4>)
 8006d00:	fba2 2303 	umull	r2, r3, r2, r3
 8006d04:	095b      	lsrs	r3, r3, #5
 8006d06:	f003 020f 	and.w	r2, r3, #15
 8006d0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4422      	add	r2, r4
 8006d12:	609a      	str	r2, [r3, #8]
}
 8006d14:	bf00      	nop
 8006d16:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006d20:	51eb851f 	.word	0x51eb851f

08006d24 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006d24:	b084      	sub	sp, #16
 8006d26:	b580      	push	{r7, lr}
 8006d28:	b084      	sub	sp, #16
 8006d2a:	af00      	add	r7, sp, #0
 8006d2c:	6078      	str	r0, [r7, #4]
 8006d2e:	f107 001c 	add.w	r0, r7, #28
 8006d32:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d38:	2b01      	cmp	r3, #1
 8006d3a:	d122      	bne.n	8006d82 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d40:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	68db      	ldr	r3, [r3, #12]
 8006d4c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006d50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d54:	687a      	ldr	r2, [r7, #4]
 8006d56:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	68db      	ldr	r3, [r3, #12]
 8006d5c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006d64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d66:	2b01      	cmp	r3, #1
 8006d68:	d105      	bne.n	8006d76 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	68db      	ldr	r3, [r3, #12]
 8006d6e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	f001 fbee 	bl	8008558 <USB_CoreReset>
 8006d7c:	4603      	mov	r3, r0
 8006d7e:	73fb      	strb	r3, [r7, #15]
 8006d80:	e01a      	b.n	8006db8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	68db      	ldr	r3, [r3, #12]
 8006d86:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	f001 fbe2 	bl	8008558 <USB_CoreReset>
 8006d94:	4603      	mov	r3, r0
 8006d96:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006d98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d106      	bne.n	8006dac <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006da2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	639a      	str	r2, [r3, #56]	; 0x38
 8006daa:	e005      	b.n	8006db8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006db0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dba:	2b01      	cmp	r3, #1
 8006dbc:	d10b      	bne.n	8006dd6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	689b      	ldr	r3, [r3, #8]
 8006dc2:	f043 0206 	orr.w	r2, r3, #6
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	689b      	ldr	r3, [r3, #8]
 8006dce:	f043 0220 	orr.w	r2, r3, #32
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006dd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dd8:	4618      	mov	r0, r3
 8006dda:	3710      	adds	r7, #16
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006de2:	b004      	add	sp, #16
 8006de4:	4770      	bx	lr
	...

08006de8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006de8:	b480      	push	{r7}
 8006dea:	b087      	sub	sp, #28
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	60f8      	str	r0, [r7, #12]
 8006df0:	60b9      	str	r1, [r7, #8]
 8006df2:	4613      	mov	r3, r2
 8006df4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006df6:	79fb      	ldrb	r3, [r7, #7]
 8006df8:	2b02      	cmp	r3, #2
 8006dfa:	d165      	bne.n	8006ec8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	4a41      	ldr	r2, [pc, #260]	; (8006f04 <USB_SetTurnaroundTime+0x11c>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d906      	bls.n	8006e12 <USB_SetTurnaroundTime+0x2a>
 8006e04:	68bb      	ldr	r3, [r7, #8]
 8006e06:	4a40      	ldr	r2, [pc, #256]	; (8006f08 <USB_SetTurnaroundTime+0x120>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d202      	bcs.n	8006e12 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006e0c:	230f      	movs	r3, #15
 8006e0e:	617b      	str	r3, [r7, #20]
 8006e10:	e062      	b.n	8006ed8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	4a3c      	ldr	r2, [pc, #240]	; (8006f08 <USB_SetTurnaroundTime+0x120>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d306      	bcc.n	8006e28 <USB_SetTurnaroundTime+0x40>
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	4a3b      	ldr	r2, [pc, #236]	; (8006f0c <USB_SetTurnaroundTime+0x124>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d202      	bcs.n	8006e28 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006e22:	230e      	movs	r3, #14
 8006e24:	617b      	str	r3, [r7, #20]
 8006e26:	e057      	b.n	8006ed8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	4a38      	ldr	r2, [pc, #224]	; (8006f0c <USB_SetTurnaroundTime+0x124>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d306      	bcc.n	8006e3e <USB_SetTurnaroundTime+0x56>
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	4a37      	ldr	r2, [pc, #220]	; (8006f10 <USB_SetTurnaroundTime+0x128>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d202      	bcs.n	8006e3e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006e38:	230d      	movs	r3, #13
 8006e3a:	617b      	str	r3, [r7, #20]
 8006e3c:	e04c      	b.n	8006ed8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006e3e:	68bb      	ldr	r3, [r7, #8]
 8006e40:	4a33      	ldr	r2, [pc, #204]	; (8006f10 <USB_SetTurnaroundTime+0x128>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d306      	bcc.n	8006e54 <USB_SetTurnaroundTime+0x6c>
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	4a32      	ldr	r2, [pc, #200]	; (8006f14 <USB_SetTurnaroundTime+0x12c>)
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	d802      	bhi.n	8006e54 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006e4e:	230c      	movs	r3, #12
 8006e50:	617b      	str	r3, [r7, #20]
 8006e52:	e041      	b.n	8006ed8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	4a2f      	ldr	r2, [pc, #188]	; (8006f14 <USB_SetTurnaroundTime+0x12c>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d906      	bls.n	8006e6a <USB_SetTurnaroundTime+0x82>
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	4a2e      	ldr	r2, [pc, #184]	; (8006f18 <USB_SetTurnaroundTime+0x130>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d802      	bhi.n	8006e6a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006e64:	230b      	movs	r3, #11
 8006e66:	617b      	str	r3, [r7, #20]
 8006e68:	e036      	b.n	8006ed8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006e6a:	68bb      	ldr	r3, [r7, #8]
 8006e6c:	4a2a      	ldr	r2, [pc, #168]	; (8006f18 <USB_SetTurnaroundTime+0x130>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d906      	bls.n	8006e80 <USB_SetTurnaroundTime+0x98>
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	4a29      	ldr	r2, [pc, #164]	; (8006f1c <USB_SetTurnaroundTime+0x134>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d802      	bhi.n	8006e80 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006e7a:	230a      	movs	r3, #10
 8006e7c:	617b      	str	r3, [r7, #20]
 8006e7e:	e02b      	b.n	8006ed8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	4a26      	ldr	r2, [pc, #152]	; (8006f1c <USB_SetTurnaroundTime+0x134>)
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d906      	bls.n	8006e96 <USB_SetTurnaroundTime+0xae>
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	4a25      	ldr	r2, [pc, #148]	; (8006f20 <USB_SetTurnaroundTime+0x138>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d202      	bcs.n	8006e96 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006e90:	2309      	movs	r3, #9
 8006e92:	617b      	str	r3, [r7, #20]
 8006e94:	e020      	b.n	8006ed8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006e96:	68bb      	ldr	r3, [r7, #8]
 8006e98:	4a21      	ldr	r2, [pc, #132]	; (8006f20 <USB_SetTurnaroundTime+0x138>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d306      	bcc.n	8006eac <USB_SetTurnaroundTime+0xc4>
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	4a20      	ldr	r2, [pc, #128]	; (8006f24 <USB_SetTurnaroundTime+0x13c>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d802      	bhi.n	8006eac <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006ea6:	2308      	movs	r3, #8
 8006ea8:	617b      	str	r3, [r7, #20]
 8006eaa:	e015      	b.n	8006ed8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	4a1d      	ldr	r2, [pc, #116]	; (8006f24 <USB_SetTurnaroundTime+0x13c>)
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	d906      	bls.n	8006ec2 <USB_SetTurnaroundTime+0xda>
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	4a1c      	ldr	r2, [pc, #112]	; (8006f28 <USB_SetTurnaroundTime+0x140>)
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	d202      	bcs.n	8006ec2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006ebc:	2307      	movs	r3, #7
 8006ebe:	617b      	str	r3, [r7, #20]
 8006ec0:	e00a      	b.n	8006ed8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006ec2:	2306      	movs	r3, #6
 8006ec4:	617b      	str	r3, [r7, #20]
 8006ec6:	e007      	b.n	8006ed8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006ec8:	79fb      	ldrb	r3, [r7, #7]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d102      	bne.n	8006ed4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006ece:	2309      	movs	r3, #9
 8006ed0:	617b      	str	r3, [r7, #20]
 8006ed2:	e001      	b.n	8006ed8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006ed4:	2309      	movs	r3, #9
 8006ed6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	68db      	ldr	r3, [r3, #12]
 8006edc:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	68da      	ldr	r2, [r3, #12]
 8006ee8:	697b      	ldr	r3, [r7, #20]
 8006eea:	029b      	lsls	r3, r3, #10
 8006eec:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006ef0:	431a      	orrs	r2, r3
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006ef6:	2300      	movs	r3, #0
}
 8006ef8:	4618      	mov	r0, r3
 8006efa:	371c      	adds	r7, #28
 8006efc:	46bd      	mov	sp, r7
 8006efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f02:	4770      	bx	lr
 8006f04:	00d8acbf 	.word	0x00d8acbf
 8006f08:	00e4e1c0 	.word	0x00e4e1c0
 8006f0c:	00f42400 	.word	0x00f42400
 8006f10:	01067380 	.word	0x01067380
 8006f14:	011a499f 	.word	0x011a499f
 8006f18:	01312cff 	.word	0x01312cff
 8006f1c:	014ca43f 	.word	0x014ca43f
 8006f20:	016e3600 	.word	0x016e3600
 8006f24:	01a6ab1f 	.word	0x01a6ab1f
 8006f28:	01e84800 	.word	0x01e84800

08006f2c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	b083      	sub	sp, #12
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	689b      	ldr	r3, [r3, #8]
 8006f38:	f043 0201 	orr.w	r2, r3, #1
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006f40:	2300      	movs	r3, #0
}
 8006f42:	4618      	mov	r0, r3
 8006f44:	370c      	adds	r7, #12
 8006f46:	46bd      	mov	sp, r7
 8006f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4c:	4770      	bx	lr

08006f4e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006f4e:	b480      	push	{r7}
 8006f50:	b083      	sub	sp, #12
 8006f52:	af00      	add	r7, sp, #0
 8006f54:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	689b      	ldr	r3, [r3, #8]
 8006f5a:	f023 0201 	bic.w	r2, r3, #1
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006f62:	2300      	movs	r3, #0
}
 8006f64:	4618      	mov	r0, r3
 8006f66:	370c      	adds	r7, #12
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6e:	4770      	bx	lr

08006f70 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b084      	sub	sp, #16
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
 8006f78:	460b      	mov	r3, r1
 8006f7a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	68db      	ldr	r3, [r3, #12]
 8006f84:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006f8c:	78fb      	ldrb	r3, [r7, #3]
 8006f8e:	2b01      	cmp	r3, #1
 8006f90:	d115      	bne.n	8006fbe <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	68db      	ldr	r3, [r3, #12]
 8006f96:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006f9e:	2001      	movs	r0, #1
 8006fa0:	f7fa fd48 	bl	8001a34 <HAL_Delay>
      ms++;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	3301      	adds	r3, #1
 8006fa8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	f001 fa45 	bl	800843a <USB_GetMode>
 8006fb0:	4603      	mov	r3, r0
 8006fb2:	2b01      	cmp	r3, #1
 8006fb4:	d01e      	beq.n	8006ff4 <USB_SetCurrentMode+0x84>
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	2b31      	cmp	r3, #49	; 0x31
 8006fba:	d9f0      	bls.n	8006f9e <USB_SetCurrentMode+0x2e>
 8006fbc:	e01a      	b.n	8006ff4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006fbe:	78fb      	ldrb	r3, [r7, #3]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d115      	bne.n	8006ff0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	68db      	ldr	r3, [r3, #12]
 8006fc8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006fd0:	2001      	movs	r0, #1
 8006fd2:	f7fa fd2f 	bl	8001a34 <HAL_Delay>
      ms++;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	3301      	adds	r3, #1
 8006fda:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	f001 fa2c 	bl	800843a <USB_GetMode>
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d005      	beq.n	8006ff4 <USB_SetCurrentMode+0x84>
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	2b31      	cmp	r3, #49	; 0x31
 8006fec:	d9f0      	bls.n	8006fd0 <USB_SetCurrentMode+0x60>
 8006fee:	e001      	b.n	8006ff4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	e005      	b.n	8007000 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	2b32      	cmp	r3, #50	; 0x32
 8006ff8:	d101      	bne.n	8006ffe <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	e000      	b.n	8007000 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006ffe:	2300      	movs	r3, #0
}
 8007000:	4618      	mov	r0, r3
 8007002:	3710      	adds	r7, #16
 8007004:	46bd      	mov	sp, r7
 8007006:	bd80      	pop	{r7, pc}

08007008 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007008:	b084      	sub	sp, #16
 800700a:	b580      	push	{r7, lr}
 800700c:	b086      	sub	sp, #24
 800700e:	af00      	add	r7, sp, #0
 8007010:	6078      	str	r0, [r7, #4]
 8007012:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007016:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800701a:	2300      	movs	r3, #0
 800701c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007022:	2300      	movs	r3, #0
 8007024:	613b      	str	r3, [r7, #16]
 8007026:	e009      	b.n	800703c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007028:	687a      	ldr	r2, [r7, #4]
 800702a:	693b      	ldr	r3, [r7, #16]
 800702c:	3340      	adds	r3, #64	; 0x40
 800702e:	009b      	lsls	r3, r3, #2
 8007030:	4413      	add	r3, r2
 8007032:	2200      	movs	r2, #0
 8007034:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007036:	693b      	ldr	r3, [r7, #16]
 8007038:	3301      	adds	r3, #1
 800703a:	613b      	str	r3, [r7, #16]
 800703c:	693b      	ldr	r3, [r7, #16]
 800703e:	2b0e      	cmp	r3, #14
 8007040:	d9f2      	bls.n	8007028 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007042:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007044:	2b00      	cmp	r3, #0
 8007046:	d11c      	bne.n	8007082 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800704e:	685b      	ldr	r3, [r3, #4]
 8007050:	68fa      	ldr	r2, [r7, #12]
 8007052:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007056:	f043 0302 	orr.w	r3, r3, #2
 800705a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007060:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800706c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007078:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	639a      	str	r2, [r3, #56]	; 0x38
 8007080:	e00b      	b.n	800709a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007086:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007092:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80070a0:	461a      	mov	r2, r3
 80070a2:	2300      	movs	r3, #0
 80070a4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070ac:	4619      	mov	r1, r3
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070b4:	461a      	mov	r2, r3
 80070b6:	680b      	ldr	r3, [r1, #0]
 80070b8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80070ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070bc:	2b01      	cmp	r3, #1
 80070be:	d10c      	bne.n	80070da <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80070c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d104      	bne.n	80070d0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80070c6:	2100      	movs	r1, #0
 80070c8:	6878      	ldr	r0, [r7, #4]
 80070ca:	f000 f965 	bl	8007398 <USB_SetDevSpeed>
 80070ce:	e008      	b.n	80070e2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80070d0:	2101      	movs	r1, #1
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	f000 f960 	bl	8007398 <USB_SetDevSpeed>
 80070d8:	e003      	b.n	80070e2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80070da:	2103      	movs	r1, #3
 80070dc:	6878      	ldr	r0, [r7, #4]
 80070de:	f000 f95b 	bl	8007398 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80070e2:	2110      	movs	r1, #16
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	f000 f8f3 	bl	80072d0 <USB_FlushTxFifo>
 80070ea:	4603      	mov	r3, r0
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d001      	beq.n	80070f4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80070f0:	2301      	movs	r3, #1
 80070f2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80070f4:	6878      	ldr	r0, [r7, #4]
 80070f6:	f000 f91f 	bl	8007338 <USB_FlushRxFifo>
 80070fa:	4603      	mov	r3, r0
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d001      	beq.n	8007104 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8007100:	2301      	movs	r3, #1
 8007102:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800710a:	461a      	mov	r2, r3
 800710c:	2300      	movs	r3, #0
 800710e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007116:	461a      	mov	r2, r3
 8007118:	2300      	movs	r3, #0
 800711a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007122:	461a      	mov	r2, r3
 8007124:	2300      	movs	r3, #0
 8007126:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007128:	2300      	movs	r3, #0
 800712a:	613b      	str	r3, [r7, #16]
 800712c:	e043      	b.n	80071b6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800712e:	693b      	ldr	r3, [r7, #16]
 8007130:	015a      	lsls	r2, r3, #5
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	4413      	add	r3, r2
 8007136:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007140:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007144:	d118      	bne.n	8007178 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8007146:	693b      	ldr	r3, [r7, #16]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d10a      	bne.n	8007162 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800714c:	693b      	ldr	r3, [r7, #16]
 800714e:	015a      	lsls	r2, r3, #5
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	4413      	add	r3, r2
 8007154:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007158:	461a      	mov	r2, r3
 800715a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800715e:	6013      	str	r3, [r2, #0]
 8007160:	e013      	b.n	800718a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007162:	693b      	ldr	r3, [r7, #16]
 8007164:	015a      	lsls	r2, r3, #5
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	4413      	add	r3, r2
 800716a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800716e:	461a      	mov	r2, r3
 8007170:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007174:	6013      	str	r3, [r2, #0]
 8007176:	e008      	b.n	800718a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007178:	693b      	ldr	r3, [r7, #16]
 800717a:	015a      	lsls	r2, r3, #5
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	4413      	add	r3, r2
 8007180:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007184:	461a      	mov	r2, r3
 8007186:	2300      	movs	r3, #0
 8007188:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800718a:	693b      	ldr	r3, [r7, #16]
 800718c:	015a      	lsls	r2, r3, #5
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	4413      	add	r3, r2
 8007192:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007196:	461a      	mov	r2, r3
 8007198:	2300      	movs	r3, #0
 800719a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800719c:	693b      	ldr	r3, [r7, #16]
 800719e:	015a      	lsls	r2, r3, #5
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	4413      	add	r3, r2
 80071a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071a8:	461a      	mov	r2, r3
 80071aa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80071ae:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80071b0:	693b      	ldr	r3, [r7, #16]
 80071b2:	3301      	adds	r3, #1
 80071b4:	613b      	str	r3, [r7, #16]
 80071b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071b8:	693a      	ldr	r2, [r7, #16]
 80071ba:	429a      	cmp	r2, r3
 80071bc:	d3b7      	bcc.n	800712e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80071be:	2300      	movs	r3, #0
 80071c0:	613b      	str	r3, [r7, #16]
 80071c2:	e043      	b.n	800724c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80071c4:	693b      	ldr	r3, [r7, #16]
 80071c6:	015a      	lsls	r2, r3, #5
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	4413      	add	r3, r2
 80071cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80071d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80071da:	d118      	bne.n	800720e <USB_DevInit+0x206>
    {
      if (i == 0U)
 80071dc:	693b      	ldr	r3, [r7, #16]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d10a      	bne.n	80071f8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80071e2:	693b      	ldr	r3, [r7, #16]
 80071e4:	015a      	lsls	r2, r3, #5
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	4413      	add	r3, r2
 80071ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071ee:	461a      	mov	r2, r3
 80071f0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80071f4:	6013      	str	r3, [r2, #0]
 80071f6:	e013      	b.n	8007220 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80071f8:	693b      	ldr	r3, [r7, #16]
 80071fa:	015a      	lsls	r2, r3, #5
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	4413      	add	r3, r2
 8007200:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007204:	461a      	mov	r2, r3
 8007206:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800720a:	6013      	str	r3, [r2, #0]
 800720c:	e008      	b.n	8007220 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800720e:	693b      	ldr	r3, [r7, #16]
 8007210:	015a      	lsls	r2, r3, #5
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	4413      	add	r3, r2
 8007216:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800721a:	461a      	mov	r2, r3
 800721c:	2300      	movs	r3, #0
 800721e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007220:	693b      	ldr	r3, [r7, #16]
 8007222:	015a      	lsls	r2, r3, #5
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	4413      	add	r3, r2
 8007228:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800722c:	461a      	mov	r2, r3
 800722e:	2300      	movs	r3, #0
 8007230:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007232:	693b      	ldr	r3, [r7, #16]
 8007234:	015a      	lsls	r2, r3, #5
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	4413      	add	r3, r2
 800723a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800723e:	461a      	mov	r2, r3
 8007240:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007244:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007246:	693b      	ldr	r3, [r7, #16]
 8007248:	3301      	adds	r3, #1
 800724a:	613b      	str	r3, [r7, #16]
 800724c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800724e:	693a      	ldr	r2, [r7, #16]
 8007250:	429a      	cmp	r2, r3
 8007252:	d3b7      	bcc.n	80071c4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800725a:	691b      	ldr	r3, [r3, #16]
 800725c:	68fa      	ldr	r2, [r7, #12]
 800725e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007262:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007266:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2200      	movs	r2, #0
 800726c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007274:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007278:	2b00      	cmp	r3, #0
 800727a:	d105      	bne.n	8007288 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	699b      	ldr	r3, [r3, #24]
 8007280:	f043 0210 	orr.w	r2, r3, #16
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	699a      	ldr	r2, [r3, #24]
 800728c:	4b0f      	ldr	r3, [pc, #60]	; (80072cc <USB_DevInit+0x2c4>)
 800728e:	4313      	orrs	r3, r2
 8007290:	687a      	ldr	r2, [r7, #4]
 8007292:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007294:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007296:	2b00      	cmp	r3, #0
 8007298:	d005      	beq.n	80072a6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	699b      	ldr	r3, [r3, #24]
 800729e:	f043 0208 	orr.w	r2, r3, #8
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80072a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072a8:	2b01      	cmp	r3, #1
 80072aa:	d107      	bne.n	80072bc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	699b      	ldr	r3, [r3, #24]
 80072b0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80072b4:	f043 0304 	orr.w	r3, r3, #4
 80072b8:	687a      	ldr	r2, [r7, #4]
 80072ba:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80072bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80072be:	4618      	mov	r0, r3
 80072c0:	3718      	adds	r7, #24
 80072c2:	46bd      	mov	sp, r7
 80072c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80072c8:	b004      	add	sp, #16
 80072ca:	4770      	bx	lr
 80072cc:	803c3800 	.word	0x803c3800

080072d0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80072d0:	b480      	push	{r7}
 80072d2:	b085      	sub	sp, #20
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
 80072d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80072da:	2300      	movs	r3, #0
 80072dc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	3301      	adds	r3, #1
 80072e2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	4a13      	ldr	r2, [pc, #76]	; (8007334 <USB_FlushTxFifo+0x64>)
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d901      	bls.n	80072f0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80072ec:	2303      	movs	r3, #3
 80072ee:	e01b      	b.n	8007328 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	691b      	ldr	r3, [r3, #16]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	daf2      	bge.n	80072de <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80072f8:	2300      	movs	r3, #0
 80072fa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	019b      	lsls	r3, r3, #6
 8007300:	f043 0220 	orr.w	r2, r3, #32
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	3301      	adds	r3, #1
 800730c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	4a08      	ldr	r2, [pc, #32]	; (8007334 <USB_FlushTxFifo+0x64>)
 8007312:	4293      	cmp	r3, r2
 8007314:	d901      	bls.n	800731a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007316:	2303      	movs	r3, #3
 8007318:	e006      	b.n	8007328 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	691b      	ldr	r3, [r3, #16]
 800731e:	f003 0320 	and.w	r3, r3, #32
 8007322:	2b20      	cmp	r3, #32
 8007324:	d0f0      	beq.n	8007308 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007326:	2300      	movs	r3, #0
}
 8007328:	4618      	mov	r0, r3
 800732a:	3714      	adds	r7, #20
 800732c:	46bd      	mov	sp, r7
 800732e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007332:	4770      	bx	lr
 8007334:	00030d40 	.word	0x00030d40

08007338 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007338:	b480      	push	{r7}
 800733a:	b085      	sub	sp, #20
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007340:	2300      	movs	r3, #0
 8007342:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	3301      	adds	r3, #1
 8007348:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	4a11      	ldr	r2, [pc, #68]	; (8007394 <USB_FlushRxFifo+0x5c>)
 800734e:	4293      	cmp	r3, r2
 8007350:	d901      	bls.n	8007356 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007352:	2303      	movs	r3, #3
 8007354:	e018      	b.n	8007388 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	691b      	ldr	r3, [r3, #16]
 800735a:	2b00      	cmp	r3, #0
 800735c:	daf2      	bge.n	8007344 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800735e:	2300      	movs	r3, #0
 8007360:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2210      	movs	r2, #16
 8007366:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	3301      	adds	r3, #1
 800736c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	4a08      	ldr	r2, [pc, #32]	; (8007394 <USB_FlushRxFifo+0x5c>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d901      	bls.n	800737a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007376:	2303      	movs	r3, #3
 8007378:	e006      	b.n	8007388 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	691b      	ldr	r3, [r3, #16]
 800737e:	f003 0310 	and.w	r3, r3, #16
 8007382:	2b10      	cmp	r3, #16
 8007384:	d0f0      	beq.n	8007368 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007386:	2300      	movs	r3, #0
}
 8007388:	4618      	mov	r0, r3
 800738a:	3714      	adds	r7, #20
 800738c:	46bd      	mov	sp, r7
 800738e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007392:	4770      	bx	lr
 8007394:	00030d40 	.word	0x00030d40

08007398 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007398:	b480      	push	{r7}
 800739a:	b085      	sub	sp, #20
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
 80073a0:	460b      	mov	r3, r1
 80073a2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073ae:	681a      	ldr	r2, [r3, #0]
 80073b0:	78fb      	ldrb	r3, [r7, #3]
 80073b2:	68f9      	ldr	r1, [r7, #12]
 80073b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80073b8:	4313      	orrs	r3, r2
 80073ba:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80073bc:	2300      	movs	r3, #0
}
 80073be:	4618      	mov	r0, r3
 80073c0:	3714      	adds	r7, #20
 80073c2:	46bd      	mov	sp, r7
 80073c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c8:	4770      	bx	lr

080073ca <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80073ca:	b480      	push	{r7}
 80073cc:	b087      	sub	sp, #28
 80073ce:	af00      	add	r7, sp, #0
 80073d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80073d6:	693b      	ldr	r3, [r7, #16]
 80073d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073dc:	689b      	ldr	r3, [r3, #8]
 80073de:	f003 0306 	and.w	r3, r3, #6
 80073e2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d102      	bne.n	80073f0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80073ea:	2300      	movs	r3, #0
 80073ec:	75fb      	strb	r3, [r7, #23]
 80073ee:	e00a      	b.n	8007406 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	2b02      	cmp	r3, #2
 80073f4:	d002      	beq.n	80073fc <USB_GetDevSpeed+0x32>
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	2b06      	cmp	r3, #6
 80073fa:	d102      	bne.n	8007402 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80073fc:	2302      	movs	r3, #2
 80073fe:	75fb      	strb	r3, [r7, #23]
 8007400:	e001      	b.n	8007406 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007402:	230f      	movs	r3, #15
 8007404:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007406:	7dfb      	ldrb	r3, [r7, #23]
}
 8007408:	4618      	mov	r0, r3
 800740a:	371c      	adds	r7, #28
 800740c:	46bd      	mov	sp, r7
 800740e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007412:	4770      	bx	lr

08007414 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007414:	b480      	push	{r7}
 8007416:	b085      	sub	sp, #20
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
 800741c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	781b      	ldrb	r3, [r3, #0]
 8007426:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	785b      	ldrb	r3, [r3, #1]
 800742c:	2b01      	cmp	r3, #1
 800742e:	d13a      	bne.n	80074a6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007436:	69da      	ldr	r2, [r3, #28]
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	781b      	ldrb	r3, [r3, #0]
 800743c:	f003 030f 	and.w	r3, r3, #15
 8007440:	2101      	movs	r1, #1
 8007442:	fa01 f303 	lsl.w	r3, r1, r3
 8007446:	b29b      	uxth	r3, r3
 8007448:	68f9      	ldr	r1, [r7, #12]
 800744a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800744e:	4313      	orrs	r3, r2
 8007450:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	015a      	lsls	r2, r3, #5
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	4413      	add	r3, r2
 800745a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007464:	2b00      	cmp	r3, #0
 8007466:	d155      	bne.n	8007514 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007468:	68bb      	ldr	r3, [r7, #8]
 800746a:	015a      	lsls	r2, r3, #5
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	4413      	add	r3, r2
 8007470:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007474:	681a      	ldr	r2, [r3, #0]
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	68db      	ldr	r3, [r3, #12]
 800747a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	791b      	ldrb	r3, [r3, #4]
 8007482:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007484:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007486:	68bb      	ldr	r3, [r7, #8]
 8007488:	059b      	lsls	r3, r3, #22
 800748a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800748c:	4313      	orrs	r3, r2
 800748e:	68ba      	ldr	r2, [r7, #8]
 8007490:	0151      	lsls	r1, r2, #5
 8007492:	68fa      	ldr	r2, [r7, #12]
 8007494:	440a      	add	r2, r1
 8007496:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800749a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800749e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80074a2:	6013      	str	r3, [r2, #0]
 80074a4:	e036      	b.n	8007514 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074ac:	69da      	ldr	r2, [r3, #28]
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	781b      	ldrb	r3, [r3, #0]
 80074b2:	f003 030f 	and.w	r3, r3, #15
 80074b6:	2101      	movs	r1, #1
 80074b8:	fa01 f303 	lsl.w	r3, r1, r3
 80074bc:	041b      	lsls	r3, r3, #16
 80074be:	68f9      	ldr	r1, [r7, #12]
 80074c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80074c4:	4313      	orrs	r3, r2
 80074c6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	015a      	lsls	r2, r3, #5
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	4413      	add	r3, r2
 80074d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d11a      	bne.n	8007514 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	015a      	lsls	r2, r3, #5
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	4413      	add	r3, r2
 80074e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074ea:	681a      	ldr	r2, [r3, #0]
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	68db      	ldr	r3, [r3, #12]
 80074f0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	791b      	ldrb	r3, [r3, #4]
 80074f8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80074fa:	430b      	orrs	r3, r1
 80074fc:	4313      	orrs	r3, r2
 80074fe:	68ba      	ldr	r2, [r7, #8]
 8007500:	0151      	lsls	r1, r2, #5
 8007502:	68fa      	ldr	r2, [r7, #12]
 8007504:	440a      	add	r2, r1
 8007506:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800750a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800750e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007512:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007514:	2300      	movs	r3, #0
}
 8007516:	4618      	mov	r0, r3
 8007518:	3714      	adds	r7, #20
 800751a:	46bd      	mov	sp, r7
 800751c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007520:	4770      	bx	lr
	...

08007524 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007524:	b480      	push	{r7}
 8007526:	b085      	sub	sp, #20
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
 800752c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	781b      	ldrb	r3, [r3, #0]
 8007536:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	785b      	ldrb	r3, [r3, #1]
 800753c:	2b01      	cmp	r3, #1
 800753e:	d161      	bne.n	8007604 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007540:	68bb      	ldr	r3, [r7, #8]
 8007542:	015a      	lsls	r2, r3, #5
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	4413      	add	r3, r2
 8007548:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007552:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007556:	d11f      	bne.n	8007598 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	015a      	lsls	r2, r3, #5
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	4413      	add	r3, r2
 8007560:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	68ba      	ldr	r2, [r7, #8]
 8007568:	0151      	lsls	r1, r2, #5
 800756a:	68fa      	ldr	r2, [r7, #12]
 800756c:	440a      	add	r2, r1
 800756e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007572:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007576:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007578:	68bb      	ldr	r3, [r7, #8]
 800757a:	015a      	lsls	r2, r3, #5
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	4413      	add	r3, r2
 8007580:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	68ba      	ldr	r2, [r7, #8]
 8007588:	0151      	lsls	r1, r2, #5
 800758a:	68fa      	ldr	r2, [r7, #12]
 800758c:	440a      	add	r2, r1
 800758e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007592:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007596:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800759e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	781b      	ldrb	r3, [r3, #0]
 80075a4:	f003 030f 	and.w	r3, r3, #15
 80075a8:	2101      	movs	r1, #1
 80075aa:	fa01 f303 	lsl.w	r3, r1, r3
 80075ae:	b29b      	uxth	r3, r3
 80075b0:	43db      	mvns	r3, r3
 80075b2:	68f9      	ldr	r1, [r7, #12]
 80075b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80075b8:	4013      	ands	r3, r2
 80075ba:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075c2:	69da      	ldr	r2, [r3, #28]
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	781b      	ldrb	r3, [r3, #0]
 80075c8:	f003 030f 	and.w	r3, r3, #15
 80075cc:	2101      	movs	r1, #1
 80075ce:	fa01 f303 	lsl.w	r3, r1, r3
 80075d2:	b29b      	uxth	r3, r3
 80075d4:	43db      	mvns	r3, r3
 80075d6:	68f9      	ldr	r1, [r7, #12]
 80075d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80075dc:	4013      	ands	r3, r2
 80075de:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80075e0:	68bb      	ldr	r3, [r7, #8]
 80075e2:	015a      	lsls	r2, r3, #5
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	4413      	add	r3, r2
 80075e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075ec:	681a      	ldr	r2, [r3, #0]
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	0159      	lsls	r1, r3, #5
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	440b      	add	r3, r1
 80075f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075fa:	4619      	mov	r1, r3
 80075fc:	4b35      	ldr	r3, [pc, #212]	; (80076d4 <USB_DeactivateEndpoint+0x1b0>)
 80075fe:	4013      	ands	r3, r2
 8007600:	600b      	str	r3, [r1, #0]
 8007602:	e060      	b.n	80076c6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007604:	68bb      	ldr	r3, [r7, #8]
 8007606:	015a      	lsls	r2, r3, #5
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	4413      	add	r3, r2
 800760c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007616:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800761a:	d11f      	bne.n	800765c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	015a      	lsls	r2, r3, #5
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	4413      	add	r3, r2
 8007624:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	68ba      	ldr	r2, [r7, #8]
 800762c:	0151      	lsls	r1, r2, #5
 800762e:	68fa      	ldr	r2, [r7, #12]
 8007630:	440a      	add	r2, r1
 8007632:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007636:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800763a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	015a      	lsls	r2, r3, #5
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	4413      	add	r3, r2
 8007644:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	68ba      	ldr	r2, [r7, #8]
 800764c:	0151      	lsls	r1, r2, #5
 800764e:	68fa      	ldr	r2, [r7, #12]
 8007650:	440a      	add	r2, r1
 8007652:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007656:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800765a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007662:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	781b      	ldrb	r3, [r3, #0]
 8007668:	f003 030f 	and.w	r3, r3, #15
 800766c:	2101      	movs	r1, #1
 800766e:	fa01 f303 	lsl.w	r3, r1, r3
 8007672:	041b      	lsls	r3, r3, #16
 8007674:	43db      	mvns	r3, r3
 8007676:	68f9      	ldr	r1, [r7, #12]
 8007678:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800767c:	4013      	ands	r3, r2
 800767e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007686:	69da      	ldr	r2, [r3, #28]
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	781b      	ldrb	r3, [r3, #0]
 800768c:	f003 030f 	and.w	r3, r3, #15
 8007690:	2101      	movs	r1, #1
 8007692:	fa01 f303 	lsl.w	r3, r1, r3
 8007696:	041b      	lsls	r3, r3, #16
 8007698:	43db      	mvns	r3, r3
 800769a:	68f9      	ldr	r1, [r7, #12]
 800769c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80076a0:	4013      	ands	r3, r2
 80076a2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	015a      	lsls	r2, r3, #5
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	4413      	add	r3, r2
 80076ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076b0:	681a      	ldr	r2, [r3, #0]
 80076b2:	68bb      	ldr	r3, [r7, #8]
 80076b4:	0159      	lsls	r1, r3, #5
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	440b      	add	r3, r1
 80076ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076be:	4619      	mov	r1, r3
 80076c0:	4b05      	ldr	r3, [pc, #20]	; (80076d8 <USB_DeactivateEndpoint+0x1b4>)
 80076c2:	4013      	ands	r3, r2
 80076c4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80076c6:	2300      	movs	r3, #0
}
 80076c8:	4618      	mov	r0, r3
 80076ca:	3714      	adds	r7, #20
 80076cc:	46bd      	mov	sp, r7
 80076ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d2:	4770      	bx	lr
 80076d4:	ec337800 	.word	0xec337800
 80076d8:	eff37800 	.word	0xeff37800

080076dc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b08a      	sub	sp, #40	; 0x28
 80076e0:	af02      	add	r7, sp, #8
 80076e2:	60f8      	str	r0, [r7, #12]
 80076e4:	60b9      	str	r1, [r7, #8]
 80076e6:	4613      	mov	r3, r2
 80076e8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80076ee:	68bb      	ldr	r3, [r7, #8]
 80076f0:	781b      	ldrb	r3, [r3, #0]
 80076f2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80076f4:	68bb      	ldr	r3, [r7, #8]
 80076f6:	785b      	ldrb	r3, [r3, #1]
 80076f8:	2b01      	cmp	r3, #1
 80076fa:	f040 815c 	bne.w	80079b6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80076fe:	68bb      	ldr	r3, [r7, #8]
 8007700:	699b      	ldr	r3, [r3, #24]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d132      	bne.n	800776c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007706:	69bb      	ldr	r3, [r7, #24]
 8007708:	015a      	lsls	r2, r3, #5
 800770a:	69fb      	ldr	r3, [r7, #28]
 800770c:	4413      	add	r3, r2
 800770e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007712:	691b      	ldr	r3, [r3, #16]
 8007714:	69ba      	ldr	r2, [r7, #24]
 8007716:	0151      	lsls	r1, r2, #5
 8007718:	69fa      	ldr	r2, [r7, #28]
 800771a:	440a      	add	r2, r1
 800771c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007720:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007724:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007728:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800772a:	69bb      	ldr	r3, [r7, #24]
 800772c:	015a      	lsls	r2, r3, #5
 800772e:	69fb      	ldr	r3, [r7, #28]
 8007730:	4413      	add	r3, r2
 8007732:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007736:	691b      	ldr	r3, [r3, #16]
 8007738:	69ba      	ldr	r2, [r7, #24]
 800773a:	0151      	lsls	r1, r2, #5
 800773c:	69fa      	ldr	r2, [r7, #28]
 800773e:	440a      	add	r2, r1
 8007740:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007744:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007748:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800774a:	69bb      	ldr	r3, [r7, #24]
 800774c:	015a      	lsls	r2, r3, #5
 800774e:	69fb      	ldr	r3, [r7, #28]
 8007750:	4413      	add	r3, r2
 8007752:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007756:	691b      	ldr	r3, [r3, #16]
 8007758:	69ba      	ldr	r2, [r7, #24]
 800775a:	0151      	lsls	r1, r2, #5
 800775c:	69fa      	ldr	r2, [r7, #28]
 800775e:	440a      	add	r2, r1
 8007760:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007764:	0cdb      	lsrs	r3, r3, #19
 8007766:	04db      	lsls	r3, r3, #19
 8007768:	6113      	str	r3, [r2, #16]
 800776a:	e074      	b.n	8007856 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800776c:	69bb      	ldr	r3, [r7, #24]
 800776e:	015a      	lsls	r2, r3, #5
 8007770:	69fb      	ldr	r3, [r7, #28]
 8007772:	4413      	add	r3, r2
 8007774:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007778:	691b      	ldr	r3, [r3, #16]
 800777a:	69ba      	ldr	r2, [r7, #24]
 800777c:	0151      	lsls	r1, r2, #5
 800777e:	69fa      	ldr	r2, [r7, #28]
 8007780:	440a      	add	r2, r1
 8007782:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007786:	0cdb      	lsrs	r3, r3, #19
 8007788:	04db      	lsls	r3, r3, #19
 800778a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800778c:	69bb      	ldr	r3, [r7, #24]
 800778e:	015a      	lsls	r2, r3, #5
 8007790:	69fb      	ldr	r3, [r7, #28]
 8007792:	4413      	add	r3, r2
 8007794:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007798:	691b      	ldr	r3, [r3, #16]
 800779a:	69ba      	ldr	r2, [r7, #24]
 800779c:	0151      	lsls	r1, r2, #5
 800779e:	69fa      	ldr	r2, [r7, #28]
 80077a0:	440a      	add	r2, r1
 80077a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077a6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80077aa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80077ae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80077b0:	69bb      	ldr	r3, [r7, #24]
 80077b2:	015a      	lsls	r2, r3, #5
 80077b4:	69fb      	ldr	r3, [r7, #28]
 80077b6:	4413      	add	r3, r2
 80077b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077bc:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80077be:	68bb      	ldr	r3, [r7, #8]
 80077c0:	6999      	ldr	r1, [r3, #24]
 80077c2:	68bb      	ldr	r3, [r7, #8]
 80077c4:	68db      	ldr	r3, [r3, #12]
 80077c6:	440b      	add	r3, r1
 80077c8:	1e59      	subs	r1, r3, #1
 80077ca:	68bb      	ldr	r3, [r7, #8]
 80077cc:	68db      	ldr	r3, [r3, #12]
 80077ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80077d2:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80077d4:	4b9d      	ldr	r3, [pc, #628]	; (8007a4c <USB_EPStartXfer+0x370>)
 80077d6:	400b      	ands	r3, r1
 80077d8:	69b9      	ldr	r1, [r7, #24]
 80077da:	0148      	lsls	r0, r1, #5
 80077dc:	69f9      	ldr	r1, [r7, #28]
 80077de:	4401      	add	r1, r0
 80077e0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80077e4:	4313      	orrs	r3, r2
 80077e6:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80077e8:	69bb      	ldr	r3, [r7, #24]
 80077ea:	015a      	lsls	r2, r3, #5
 80077ec:	69fb      	ldr	r3, [r7, #28]
 80077ee:	4413      	add	r3, r2
 80077f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077f4:	691a      	ldr	r2, [r3, #16]
 80077f6:	68bb      	ldr	r3, [r7, #8]
 80077f8:	699b      	ldr	r3, [r3, #24]
 80077fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80077fe:	69b9      	ldr	r1, [r7, #24]
 8007800:	0148      	lsls	r0, r1, #5
 8007802:	69f9      	ldr	r1, [r7, #28]
 8007804:	4401      	add	r1, r0
 8007806:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800780a:	4313      	orrs	r3, r2
 800780c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800780e:	68bb      	ldr	r3, [r7, #8]
 8007810:	791b      	ldrb	r3, [r3, #4]
 8007812:	2b01      	cmp	r3, #1
 8007814:	d11f      	bne.n	8007856 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007816:	69bb      	ldr	r3, [r7, #24]
 8007818:	015a      	lsls	r2, r3, #5
 800781a:	69fb      	ldr	r3, [r7, #28]
 800781c:	4413      	add	r3, r2
 800781e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007822:	691b      	ldr	r3, [r3, #16]
 8007824:	69ba      	ldr	r2, [r7, #24]
 8007826:	0151      	lsls	r1, r2, #5
 8007828:	69fa      	ldr	r2, [r7, #28]
 800782a:	440a      	add	r2, r1
 800782c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007830:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007834:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8007836:	69bb      	ldr	r3, [r7, #24]
 8007838:	015a      	lsls	r2, r3, #5
 800783a:	69fb      	ldr	r3, [r7, #28]
 800783c:	4413      	add	r3, r2
 800783e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007842:	691b      	ldr	r3, [r3, #16]
 8007844:	69ba      	ldr	r2, [r7, #24]
 8007846:	0151      	lsls	r1, r2, #5
 8007848:	69fa      	ldr	r2, [r7, #28]
 800784a:	440a      	add	r2, r1
 800784c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007850:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007854:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8007856:	79fb      	ldrb	r3, [r7, #7]
 8007858:	2b01      	cmp	r3, #1
 800785a:	d14b      	bne.n	80078f4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	695b      	ldr	r3, [r3, #20]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d009      	beq.n	8007878 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007864:	69bb      	ldr	r3, [r7, #24]
 8007866:	015a      	lsls	r2, r3, #5
 8007868:	69fb      	ldr	r3, [r7, #28]
 800786a:	4413      	add	r3, r2
 800786c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007870:	461a      	mov	r2, r3
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	695b      	ldr	r3, [r3, #20]
 8007876:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	791b      	ldrb	r3, [r3, #4]
 800787c:	2b01      	cmp	r3, #1
 800787e:	d128      	bne.n	80078d2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007880:	69fb      	ldr	r3, [r7, #28]
 8007882:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007886:	689b      	ldr	r3, [r3, #8]
 8007888:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800788c:	2b00      	cmp	r3, #0
 800788e:	d110      	bne.n	80078b2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007890:	69bb      	ldr	r3, [r7, #24]
 8007892:	015a      	lsls	r2, r3, #5
 8007894:	69fb      	ldr	r3, [r7, #28]
 8007896:	4413      	add	r3, r2
 8007898:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	69ba      	ldr	r2, [r7, #24]
 80078a0:	0151      	lsls	r1, r2, #5
 80078a2:	69fa      	ldr	r2, [r7, #28]
 80078a4:	440a      	add	r2, r1
 80078a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078aa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80078ae:	6013      	str	r3, [r2, #0]
 80078b0:	e00f      	b.n	80078d2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80078b2:	69bb      	ldr	r3, [r7, #24]
 80078b4:	015a      	lsls	r2, r3, #5
 80078b6:	69fb      	ldr	r3, [r7, #28]
 80078b8:	4413      	add	r3, r2
 80078ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	69ba      	ldr	r2, [r7, #24]
 80078c2:	0151      	lsls	r1, r2, #5
 80078c4:	69fa      	ldr	r2, [r7, #28]
 80078c6:	440a      	add	r2, r1
 80078c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80078d0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80078d2:	69bb      	ldr	r3, [r7, #24]
 80078d4:	015a      	lsls	r2, r3, #5
 80078d6:	69fb      	ldr	r3, [r7, #28]
 80078d8:	4413      	add	r3, r2
 80078da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	69ba      	ldr	r2, [r7, #24]
 80078e2:	0151      	lsls	r1, r2, #5
 80078e4:	69fa      	ldr	r2, [r7, #28]
 80078e6:	440a      	add	r2, r1
 80078e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078ec:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80078f0:	6013      	str	r3, [r2, #0]
 80078f2:	e133      	b.n	8007b5c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80078f4:	69bb      	ldr	r3, [r7, #24]
 80078f6:	015a      	lsls	r2, r3, #5
 80078f8:	69fb      	ldr	r3, [r7, #28]
 80078fa:	4413      	add	r3, r2
 80078fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	69ba      	ldr	r2, [r7, #24]
 8007904:	0151      	lsls	r1, r2, #5
 8007906:	69fa      	ldr	r2, [r7, #28]
 8007908:	440a      	add	r2, r1
 800790a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800790e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007912:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007914:	68bb      	ldr	r3, [r7, #8]
 8007916:	791b      	ldrb	r3, [r3, #4]
 8007918:	2b01      	cmp	r3, #1
 800791a:	d015      	beq.n	8007948 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800791c:	68bb      	ldr	r3, [r7, #8]
 800791e:	699b      	ldr	r3, [r3, #24]
 8007920:	2b00      	cmp	r3, #0
 8007922:	f000 811b 	beq.w	8007b5c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007926:	69fb      	ldr	r3, [r7, #28]
 8007928:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800792c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800792e:	68bb      	ldr	r3, [r7, #8]
 8007930:	781b      	ldrb	r3, [r3, #0]
 8007932:	f003 030f 	and.w	r3, r3, #15
 8007936:	2101      	movs	r1, #1
 8007938:	fa01 f303 	lsl.w	r3, r1, r3
 800793c:	69f9      	ldr	r1, [r7, #28]
 800793e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007942:	4313      	orrs	r3, r2
 8007944:	634b      	str	r3, [r1, #52]	; 0x34
 8007946:	e109      	b.n	8007b5c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007948:	69fb      	ldr	r3, [r7, #28]
 800794a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800794e:	689b      	ldr	r3, [r3, #8]
 8007950:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007954:	2b00      	cmp	r3, #0
 8007956:	d110      	bne.n	800797a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007958:	69bb      	ldr	r3, [r7, #24]
 800795a:	015a      	lsls	r2, r3, #5
 800795c:	69fb      	ldr	r3, [r7, #28]
 800795e:	4413      	add	r3, r2
 8007960:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	69ba      	ldr	r2, [r7, #24]
 8007968:	0151      	lsls	r1, r2, #5
 800796a:	69fa      	ldr	r2, [r7, #28]
 800796c:	440a      	add	r2, r1
 800796e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007972:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007976:	6013      	str	r3, [r2, #0]
 8007978:	e00f      	b.n	800799a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800797a:	69bb      	ldr	r3, [r7, #24]
 800797c:	015a      	lsls	r2, r3, #5
 800797e:	69fb      	ldr	r3, [r7, #28]
 8007980:	4413      	add	r3, r2
 8007982:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	69ba      	ldr	r2, [r7, #24]
 800798a:	0151      	lsls	r1, r2, #5
 800798c:	69fa      	ldr	r2, [r7, #28]
 800798e:	440a      	add	r2, r1
 8007990:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007994:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007998:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800799a:	68bb      	ldr	r3, [r7, #8]
 800799c:	6919      	ldr	r1, [r3, #16]
 800799e:	68bb      	ldr	r3, [r7, #8]
 80079a0:	781a      	ldrb	r2, [r3, #0]
 80079a2:	68bb      	ldr	r3, [r7, #8]
 80079a4:	699b      	ldr	r3, [r3, #24]
 80079a6:	b298      	uxth	r0, r3
 80079a8:	79fb      	ldrb	r3, [r7, #7]
 80079aa:	9300      	str	r3, [sp, #0]
 80079ac:	4603      	mov	r3, r0
 80079ae:	68f8      	ldr	r0, [r7, #12]
 80079b0:	f000 fade 	bl	8007f70 <USB_WritePacket>
 80079b4:	e0d2      	b.n	8007b5c <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80079b6:	69bb      	ldr	r3, [r7, #24]
 80079b8:	015a      	lsls	r2, r3, #5
 80079ba:	69fb      	ldr	r3, [r7, #28]
 80079bc:	4413      	add	r3, r2
 80079be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079c2:	691b      	ldr	r3, [r3, #16]
 80079c4:	69ba      	ldr	r2, [r7, #24]
 80079c6:	0151      	lsls	r1, r2, #5
 80079c8:	69fa      	ldr	r2, [r7, #28]
 80079ca:	440a      	add	r2, r1
 80079cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80079d0:	0cdb      	lsrs	r3, r3, #19
 80079d2:	04db      	lsls	r3, r3, #19
 80079d4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80079d6:	69bb      	ldr	r3, [r7, #24]
 80079d8:	015a      	lsls	r2, r3, #5
 80079da:	69fb      	ldr	r3, [r7, #28]
 80079dc:	4413      	add	r3, r2
 80079de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079e2:	691b      	ldr	r3, [r3, #16]
 80079e4:	69ba      	ldr	r2, [r7, #24]
 80079e6:	0151      	lsls	r1, r2, #5
 80079e8:	69fa      	ldr	r2, [r7, #28]
 80079ea:	440a      	add	r2, r1
 80079ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80079f0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80079f4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80079f8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80079fa:	68bb      	ldr	r3, [r7, #8]
 80079fc:	699b      	ldr	r3, [r3, #24]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d126      	bne.n	8007a50 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007a02:	69bb      	ldr	r3, [r7, #24]
 8007a04:	015a      	lsls	r2, r3, #5
 8007a06:	69fb      	ldr	r3, [r7, #28]
 8007a08:	4413      	add	r3, r2
 8007a0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a0e:	691a      	ldr	r2, [r3, #16]
 8007a10:	68bb      	ldr	r3, [r7, #8]
 8007a12:	68db      	ldr	r3, [r3, #12]
 8007a14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007a18:	69b9      	ldr	r1, [r7, #24]
 8007a1a:	0148      	lsls	r0, r1, #5
 8007a1c:	69f9      	ldr	r1, [r7, #28]
 8007a1e:	4401      	add	r1, r0
 8007a20:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007a24:	4313      	orrs	r3, r2
 8007a26:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007a28:	69bb      	ldr	r3, [r7, #24]
 8007a2a:	015a      	lsls	r2, r3, #5
 8007a2c:	69fb      	ldr	r3, [r7, #28]
 8007a2e:	4413      	add	r3, r2
 8007a30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a34:	691b      	ldr	r3, [r3, #16]
 8007a36:	69ba      	ldr	r2, [r7, #24]
 8007a38:	0151      	lsls	r1, r2, #5
 8007a3a:	69fa      	ldr	r2, [r7, #28]
 8007a3c:	440a      	add	r2, r1
 8007a3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a42:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007a46:	6113      	str	r3, [r2, #16]
 8007a48:	e03a      	b.n	8007ac0 <USB_EPStartXfer+0x3e4>
 8007a4a:	bf00      	nop
 8007a4c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007a50:	68bb      	ldr	r3, [r7, #8]
 8007a52:	699a      	ldr	r2, [r3, #24]
 8007a54:	68bb      	ldr	r3, [r7, #8]
 8007a56:	68db      	ldr	r3, [r3, #12]
 8007a58:	4413      	add	r3, r2
 8007a5a:	1e5a      	subs	r2, r3, #1
 8007a5c:	68bb      	ldr	r3, [r7, #8]
 8007a5e:	68db      	ldr	r3, [r3, #12]
 8007a60:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a64:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8007a66:	68bb      	ldr	r3, [r7, #8]
 8007a68:	68db      	ldr	r3, [r3, #12]
 8007a6a:	8afa      	ldrh	r2, [r7, #22]
 8007a6c:	fb03 f202 	mul.w	r2, r3, r2
 8007a70:	68bb      	ldr	r3, [r7, #8]
 8007a72:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007a74:	69bb      	ldr	r3, [r7, #24]
 8007a76:	015a      	lsls	r2, r3, #5
 8007a78:	69fb      	ldr	r3, [r7, #28]
 8007a7a:	4413      	add	r3, r2
 8007a7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a80:	691a      	ldr	r2, [r3, #16]
 8007a82:	8afb      	ldrh	r3, [r7, #22]
 8007a84:	04d9      	lsls	r1, r3, #19
 8007a86:	4b38      	ldr	r3, [pc, #224]	; (8007b68 <USB_EPStartXfer+0x48c>)
 8007a88:	400b      	ands	r3, r1
 8007a8a:	69b9      	ldr	r1, [r7, #24]
 8007a8c:	0148      	lsls	r0, r1, #5
 8007a8e:	69f9      	ldr	r1, [r7, #28]
 8007a90:	4401      	add	r1, r0
 8007a92:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007a96:	4313      	orrs	r3, r2
 8007a98:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007a9a:	69bb      	ldr	r3, [r7, #24]
 8007a9c:	015a      	lsls	r2, r3, #5
 8007a9e:	69fb      	ldr	r3, [r7, #28]
 8007aa0:	4413      	add	r3, r2
 8007aa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007aa6:	691a      	ldr	r2, [r3, #16]
 8007aa8:	68bb      	ldr	r3, [r7, #8]
 8007aaa:	69db      	ldr	r3, [r3, #28]
 8007aac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007ab0:	69b9      	ldr	r1, [r7, #24]
 8007ab2:	0148      	lsls	r0, r1, #5
 8007ab4:	69f9      	ldr	r1, [r7, #28]
 8007ab6:	4401      	add	r1, r0
 8007ab8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007abc:	4313      	orrs	r3, r2
 8007abe:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007ac0:	79fb      	ldrb	r3, [r7, #7]
 8007ac2:	2b01      	cmp	r3, #1
 8007ac4:	d10d      	bne.n	8007ae2 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007ac6:	68bb      	ldr	r3, [r7, #8]
 8007ac8:	691b      	ldr	r3, [r3, #16]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d009      	beq.n	8007ae2 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007ace:	68bb      	ldr	r3, [r7, #8]
 8007ad0:	6919      	ldr	r1, [r3, #16]
 8007ad2:	69bb      	ldr	r3, [r7, #24]
 8007ad4:	015a      	lsls	r2, r3, #5
 8007ad6:	69fb      	ldr	r3, [r7, #28]
 8007ad8:	4413      	add	r3, r2
 8007ada:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ade:	460a      	mov	r2, r1
 8007ae0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007ae2:	68bb      	ldr	r3, [r7, #8]
 8007ae4:	791b      	ldrb	r3, [r3, #4]
 8007ae6:	2b01      	cmp	r3, #1
 8007ae8:	d128      	bne.n	8007b3c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007aea:	69fb      	ldr	r3, [r7, #28]
 8007aec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007af0:	689b      	ldr	r3, [r3, #8]
 8007af2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d110      	bne.n	8007b1c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007afa:	69bb      	ldr	r3, [r7, #24]
 8007afc:	015a      	lsls	r2, r3, #5
 8007afe:	69fb      	ldr	r3, [r7, #28]
 8007b00:	4413      	add	r3, r2
 8007b02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	69ba      	ldr	r2, [r7, #24]
 8007b0a:	0151      	lsls	r1, r2, #5
 8007b0c:	69fa      	ldr	r2, [r7, #28]
 8007b0e:	440a      	add	r2, r1
 8007b10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b14:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007b18:	6013      	str	r3, [r2, #0]
 8007b1a:	e00f      	b.n	8007b3c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007b1c:	69bb      	ldr	r3, [r7, #24]
 8007b1e:	015a      	lsls	r2, r3, #5
 8007b20:	69fb      	ldr	r3, [r7, #28]
 8007b22:	4413      	add	r3, r2
 8007b24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	69ba      	ldr	r2, [r7, #24]
 8007b2c:	0151      	lsls	r1, r2, #5
 8007b2e:	69fa      	ldr	r2, [r7, #28]
 8007b30:	440a      	add	r2, r1
 8007b32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b3a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007b3c:	69bb      	ldr	r3, [r7, #24]
 8007b3e:	015a      	lsls	r2, r3, #5
 8007b40:	69fb      	ldr	r3, [r7, #28]
 8007b42:	4413      	add	r3, r2
 8007b44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	69ba      	ldr	r2, [r7, #24]
 8007b4c:	0151      	lsls	r1, r2, #5
 8007b4e:	69fa      	ldr	r2, [r7, #28]
 8007b50:	440a      	add	r2, r1
 8007b52:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b56:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007b5a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007b5c:	2300      	movs	r3, #0
}
 8007b5e:	4618      	mov	r0, r3
 8007b60:	3720      	adds	r7, #32
 8007b62:	46bd      	mov	sp, r7
 8007b64:	bd80      	pop	{r7, pc}
 8007b66:	bf00      	nop
 8007b68:	1ff80000 	.word	0x1ff80000

08007b6c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007b6c:	b480      	push	{r7}
 8007b6e:	b087      	sub	sp, #28
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	60f8      	str	r0, [r7, #12]
 8007b74:	60b9      	str	r1, [r7, #8]
 8007b76:	4613      	mov	r3, r2
 8007b78:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8007b7e:	68bb      	ldr	r3, [r7, #8]
 8007b80:	781b      	ldrb	r3, [r3, #0]
 8007b82:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	785b      	ldrb	r3, [r3, #1]
 8007b88:	2b01      	cmp	r3, #1
 8007b8a:	f040 80ce 	bne.w	8007d2a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007b8e:	68bb      	ldr	r3, [r7, #8]
 8007b90:	699b      	ldr	r3, [r3, #24]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d132      	bne.n	8007bfc <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007b96:	693b      	ldr	r3, [r7, #16]
 8007b98:	015a      	lsls	r2, r3, #5
 8007b9a:	697b      	ldr	r3, [r7, #20]
 8007b9c:	4413      	add	r3, r2
 8007b9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ba2:	691b      	ldr	r3, [r3, #16]
 8007ba4:	693a      	ldr	r2, [r7, #16]
 8007ba6:	0151      	lsls	r1, r2, #5
 8007ba8:	697a      	ldr	r2, [r7, #20]
 8007baa:	440a      	add	r2, r1
 8007bac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007bb0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007bb4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007bb8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007bba:	693b      	ldr	r3, [r7, #16]
 8007bbc:	015a      	lsls	r2, r3, #5
 8007bbe:	697b      	ldr	r3, [r7, #20]
 8007bc0:	4413      	add	r3, r2
 8007bc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bc6:	691b      	ldr	r3, [r3, #16]
 8007bc8:	693a      	ldr	r2, [r7, #16]
 8007bca:	0151      	lsls	r1, r2, #5
 8007bcc:	697a      	ldr	r2, [r7, #20]
 8007bce:	440a      	add	r2, r1
 8007bd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007bd4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007bd8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007bda:	693b      	ldr	r3, [r7, #16]
 8007bdc:	015a      	lsls	r2, r3, #5
 8007bde:	697b      	ldr	r3, [r7, #20]
 8007be0:	4413      	add	r3, r2
 8007be2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007be6:	691b      	ldr	r3, [r3, #16]
 8007be8:	693a      	ldr	r2, [r7, #16]
 8007bea:	0151      	lsls	r1, r2, #5
 8007bec:	697a      	ldr	r2, [r7, #20]
 8007bee:	440a      	add	r2, r1
 8007bf0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007bf4:	0cdb      	lsrs	r3, r3, #19
 8007bf6:	04db      	lsls	r3, r3, #19
 8007bf8:	6113      	str	r3, [r2, #16]
 8007bfa:	e04e      	b.n	8007c9a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007bfc:	693b      	ldr	r3, [r7, #16]
 8007bfe:	015a      	lsls	r2, r3, #5
 8007c00:	697b      	ldr	r3, [r7, #20]
 8007c02:	4413      	add	r3, r2
 8007c04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c08:	691b      	ldr	r3, [r3, #16]
 8007c0a:	693a      	ldr	r2, [r7, #16]
 8007c0c:	0151      	lsls	r1, r2, #5
 8007c0e:	697a      	ldr	r2, [r7, #20]
 8007c10:	440a      	add	r2, r1
 8007c12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c16:	0cdb      	lsrs	r3, r3, #19
 8007c18:	04db      	lsls	r3, r3, #19
 8007c1a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007c1c:	693b      	ldr	r3, [r7, #16]
 8007c1e:	015a      	lsls	r2, r3, #5
 8007c20:	697b      	ldr	r3, [r7, #20]
 8007c22:	4413      	add	r3, r2
 8007c24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c28:	691b      	ldr	r3, [r3, #16]
 8007c2a:	693a      	ldr	r2, [r7, #16]
 8007c2c:	0151      	lsls	r1, r2, #5
 8007c2e:	697a      	ldr	r2, [r7, #20]
 8007c30:	440a      	add	r2, r1
 8007c32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c36:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007c3a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007c3e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	699a      	ldr	r2, [r3, #24]
 8007c44:	68bb      	ldr	r3, [r7, #8]
 8007c46:	68db      	ldr	r3, [r3, #12]
 8007c48:	429a      	cmp	r2, r3
 8007c4a:	d903      	bls.n	8007c54 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007c4c:	68bb      	ldr	r3, [r7, #8]
 8007c4e:	68da      	ldr	r2, [r3, #12]
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007c54:	693b      	ldr	r3, [r7, #16]
 8007c56:	015a      	lsls	r2, r3, #5
 8007c58:	697b      	ldr	r3, [r7, #20]
 8007c5a:	4413      	add	r3, r2
 8007c5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c60:	691b      	ldr	r3, [r3, #16]
 8007c62:	693a      	ldr	r2, [r7, #16]
 8007c64:	0151      	lsls	r1, r2, #5
 8007c66:	697a      	ldr	r2, [r7, #20]
 8007c68:	440a      	add	r2, r1
 8007c6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c6e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007c72:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007c74:	693b      	ldr	r3, [r7, #16]
 8007c76:	015a      	lsls	r2, r3, #5
 8007c78:	697b      	ldr	r3, [r7, #20]
 8007c7a:	4413      	add	r3, r2
 8007c7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c80:	691a      	ldr	r2, [r3, #16]
 8007c82:	68bb      	ldr	r3, [r7, #8]
 8007c84:	699b      	ldr	r3, [r3, #24]
 8007c86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007c8a:	6939      	ldr	r1, [r7, #16]
 8007c8c:	0148      	lsls	r0, r1, #5
 8007c8e:	6979      	ldr	r1, [r7, #20]
 8007c90:	4401      	add	r1, r0
 8007c92:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007c96:	4313      	orrs	r3, r2
 8007c98:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007c9a:	79fb      	ldrb	r3, [r7, #7]
 8007c9c:	2b01      	cmp	r3, #1
 8007c9e:	d11e      	bne.n	8007cde <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007ca0:	68bb      	ldr	r3, [r7, #8]
 8007ca2:	695b      	ldr	r3, [r3, #20]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d009      	beq.n	8007cbc <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007ca8:	693b      	ldr	r3, [r7, #16]
 8007caa:	015a      	lsls	r2, r3, #5
 8007cac:	697b      	ldr	r3, [r7, #20]
 8007cae:	4413      	add	r3, r2
 8007cb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cb4:	461a      	mov	r2, r3
 8007cb6:	68bb      	ldr	r3, [r7, #8]
 8007cb8:	695b      	ldr	r3, [r3, #20]
 8007cba:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007cbc:	693b      	ldr	r3, [r7, #16]
 8007cbe:	015a      	lsls	r2, r3, #5
 8007cc0:	697b      	ldr	r3, [r7, #20]
 8007cc2:	4413      	add	r3, r2
 8007cc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	693a      	ldr	r2, [r7, #16]
 8007ccc:	0151      	lsls	r1, r2, #5
 8007cce:	697a      	ldr	r2, [r7, #20]
 8007cd0:	440a      	add	r2, r1
 8007cd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007cd6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007cda:	6013      	str	r3, [r2, #0]
 8007cdc:	e097      	b.n	8007e0e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007cde:	693b      	ldr	r3, [r7, #16]
 8007ce0:	015a      	lsls	r2, r3, #5
 8007ce2:	697b      	ldr	r3, [r7, #20]
 8007ce4:	4413      	add	r3, r2
 8007ce6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	693a      	ldr	r2, [r7, #16]
 8007cee:	0151      	lsls	r1, r2, #5
 8007cf0:	697a      	ldr	r2, [r7, #20]
 8007cf2:	440a      	add	r2, r1
 8007cf4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007cf8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007cfc:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8007cfe:	68bb      	ldr	r3, [r7, #8]
 8007d00:	699b      	ldr	r3, [r3, #24]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	f000 8083 	beq.w	8007e0e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007d08:	697b      	ldr	r3, [r7, #20]
 8007d0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d10:	68bb      	ldr	r3, [r7, #8]
 8007d12:	781b      	ldrb	r3, [r3, #0]
 8007d14:	f003 030f 	and.w	r3, r3, #15
 8007d18:	2101      	movs	r1, #1
 8007d1a:	fa01 f303 	lsl.w	r3, r1, r3
 8007d1e:	6979      	ldr	r1, [r7, #20]
 8007d20:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007d24:	4313      	orrs	r3, r2
 8007d26:	634b      	str	r3, [r1, #52]	; 0x34
 8007d28:	e071      	b.n	8007e0e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007d2a:	693b      	ldr	r3, [r7, #16]
 8007d2c:	015a      	lsls	r2, r3, #5
 8007d2e:	697b      	ldr	r3, [r7, #20]
 8007d30:	4413      	add	r3, r2
 8007d32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d36:	691b      	ldr	r3, [r3, #16]
 8007d38:	693a      	ldr	r2, [r7, #16]
 8007d3a:	0151      	lsls	r1, r2, #5
 8007d3c:	697a      	ldr	r2, [r7, #20]
 8007d3e:	440a      	add	r2, r1
 8007d40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d44:	0cdb      	lsrs	r3, r3, #19
 8007d46:	04db      	lsls	r3, r3, #19
 8007d48:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007d4a:	693b      	ldr	r3, [r7, #16]
 8007d4c:	015a      	lsls	r2, r3, #5
 8007d4e:	697b      	ldr	r3, [r7, #20]
 8007d50:	4413      	add	r3, r2
 8007d52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d56:	691b      	ldr	r3, [r3, #16]
 8007d58:	693a      	ldr	r2, [r7, #16]
 8007d5a:	0151      	lsls	r1, r2, #5
 8007d5c:	697a      	ldr	r2, [r7, #20]
 8007d5e:	440a      	add	r2, r1
 8007d60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d64:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007d68:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007d6c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8007d6e:	68bb      	ldr	r3, [r7, #8]
 8007d70:	699b      	ldr	r3, [r3, #24]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d003      	beq.n	8007d7e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8007d76:	68bb      	ldr	r3, [r7, #8]
 8007d78:	68da      	ldr	r2, [r3, #12]
 8007d7a:	68bb      	ldr	r3, [r7, #8]
 8007d7c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8007d7e:	68bb      	ldr	r3, [r7, #8]
 8007d80:	68da      	ldr	r2, [r3, #12]
 8007d82:	68bb      	ldr	r3, [r7, #8]
 8007d84:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007d86:	693b      	ldr	r3, [r7, #16]
 8007d88:	015a      	lsls	r2, r3, #5
 8007d8a:	697b      	ldr	r3, [r7, #20]
 8007d8c:	4413      	add	r3, r2
 8007d8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d92:	691b      	ldr	r3, [r3, #16]
 8007d94:	693a      	ldr	r2, [r7, #16]
 8007d96:	0151      	lsls	r1, r2, #5
 8007d98:	697a      	ldr	r2, [r7, #20]
 8007d9a:	440a      	add	r2, r1
 8007d9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007da0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007da4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007da6:	693b      	ldr	r3, [r7, #16]
 8007da8:	015a      	lsls	r2, r3, #5
 8007daa:	697b      	ldr	r3, [r7, #20]
 8007dac:	4413      	add	r3, r2
 8007dae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007db2:	691a      	ldr	r2, [r3, #16]
 8007db4:	68bb      	ldr	r3, [r7, #8]
 8007db6:	69db      	ldr	r3, [r3, #28]
 8007db8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007dbc:	6939      	ldr	r1, [r7, #16]
 8007dbe:	0148      	lsls	r0, r1, #5
 8007dc0:	6979      	ldr	r1, [r7, #20]
 8007dc2:	4401      	add	r1, r0
 8007dc4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007dc8:	4313      	orrs	r3, r2
 8007dca:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8007dcc:	79fb      	ldrb	r3, [r7, #7]
 8007dce:	2b01      	cmp	r3, #1
 8007dd0:	d10d      	bne.n	8007dee <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007dd2:	68bb      	ldr	r3, [r7, #8]
 8007dd4:	691b      	ldr	r3, [r3, #16]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d009      	beq.n	8007dee <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007dda:	68bb      	ldr	r3, [r7, #8]
 8007ddc:	6919      	ldr	r1, [r3, #16]
 8007dde:	693b      	ldr	r3, [r7, #16]
 8007de0:	015a      	lsls	r2, r3, #5
 8007de2:	697b      	ldr	r3, [r7, #20]
 8007de4:	4413      	add	r3, r2
 8007de6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dea:	460a      	mov	r2, r1
 8007dec:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007dee:	693b      	ldr	r3, [r7, #16]
 8007df0:	015a      	lsls	r2, r3, #5
 8007df2:	697b      	ldr	r3, [r7, #20]
 8007df4:	4413      	add	r3, r2
 8007df6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	693a      	ldr	r2, [r7, #16]
 8007dfe:	0151      	lsls	r1, r2, #5
 8007e00:	697a      	ldr	r2, [r7, #20]
 8007e02:	440a      	add	r2, r1
 8007e04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e08:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007e0c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007e0e:	2300      	movs	r3, #0
}
 8007e10:	4618      	mov	r0, r3
 8007e12:	371c      	adds	r7, #28
 8007e14:	46bd      	mov	sp, r7
 8007e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1a:	4770      	bx	lr

08007e1c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007e1c:	b480      	push	{r7}
 8007e1e:	b087      	sub	sp, #28
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
 8007e24:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007e26:	2300      	movs	r3, #0
 8007e28:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	785b      	ldrb	r3, [r3, #1]
 8007e36:	2b01      	cmp	r3, #1
 8007e38:	d14a      	bne.n	8007ed0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	781b      	ldrb	r3, [r3, #0]
 8007e3e:	015a      	lsls	r2, r3, #5
 8007e40:	693b      	ldr	r3, [r7, #16]
 8007e42:	4413      	add	r3, r2
 8007e44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007e4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007e52:	f040 8086 	bne.w	8007f62 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	781b      	ldrb	r3, [r3, #0]
 8007e5a:	015a      	lsls	r2, r3, #5
 8007e5c:	693b      	ldr	r3, [r7, #16]
 8007e5e:	4413      	add	r3, r2
 8007e60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	683a      	ldr	r2, [r7, #0]
 8007e68:	7812      	ldrb	r2, [r2, #0]
 8007e6a:	0151      	lsls	r1, r2, #5
 8007e6c:	693a      	ldr	r2, [r7, #16]
 8007e6e:	440a      	add	r2, r1
 8007e70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e74:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007e78:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	781b      	ldrb	r3, [r3, #0]
 8007e7e:	015a      	lsls	r2, r3, #5
 8007e80:	693b      	ldr	r3, [r7, #16]
 8007e82:	4413      	add	r3, r2
 8007e84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	683a      	ldr	r2, [r7, #0]
 8007e8c:	7812      	ldrb	r2, [r2, #0]
 8007e8e:	0151      	lsls	r1, r2, #5
 8007e90:	693a      	ldr	r2, [r7, #16]
 8007e92:	440a      	add	r2, r1
 8007e94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e98:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007e9c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	3301      	adds	r3, #1
 8007ea2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	f242 7210 	movw	r2, #10000	; 0x2710
 8007eaa:	4293      	cmp	r3, r2
 8007eac:	d902      	bls.n	8007eb4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007eae:	2301      	movs	r3, #1
 8007eb0:	75fb      	strb	r3, [r7, #23]
          break;
 8007eb2:	e056      	b.n	8007f62 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	781b      	ldrb	r3, [r3, #0]
 8007eb8:	015a      	lsls	r2, r3, #5
 8007eba:	693b      	ldr	r3, [r7, #16]
 8007ebc:	4413      	add	r3, r2
 8007ebe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007ec8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007ecc:	d0e7      	beq.n	8007e9e <USB_EPStopXfer+0x82>
 8007ece:	e048      	b.n	8007f62 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	781b      	ldrb	r3, [r3, #0]
 8007ed4:	015a      	lsls	r2, r3, #5
 8007ed6:	693b      	ldr	r3, [r7, #16]
 8007ed8:	4413      	add	r3, r2
 8007eda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007ee4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007ee8:	d13b      	bne.n	8007f62 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	781b      	ldrb	r3, [r3, #0]
 8007eee:	015a      	lsls	r2, r3, #5
 8007ef0:	693b      	ldr	r3, [r7, #16]
 8007ef2:	4413      	add	r3, r2
 8007ef4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	683a      	ldr	r2, [r7, #0]
 8007efc:	7812      	ldrb	r2, [r2, #0]
 8007efe:	0151      	lsls	r1, r2, #5
 8007f00:	693a      	ldr	r2, [r7, #16]
 8007f02:	440a      	add	r2, r1
 8007f04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f08:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007f0c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	781b      	ldrb	r3, [r3, #0]
 8007f12:	015a      	lsls	r2, r3, #5
 8007f14:	693b      	ldr	r3, [r7, #16]
 8007f16:	4413      	add	r3, r2
 8007f18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	683a      	ldr	r2, [r7, #0]
 8007f20:	7812      	ldrb	r2, [r2, #0]
 8007f22:	0151      	lsls	r1, r2, #5
 8007f24:	693a      	ldr	r2, [r7, #16]
 8007f26:	440a      	add	r2, r1
 8007f28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f2c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007f30:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	3301      	adds	r3, #1
 8007f36:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	f242 7210 	movw	r2, #10000	; 0x2710
 8007f3e:	4293      	cmp	r3, r2
 8007f40:	d902      	bls.n	8007f48 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007f42:	2301      	movs	r3, #1
 8007f44:	75fb      	strb	r3, [r7, #23]
          break;
 8007f46:	e00c      	b.n	8007f62 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	781b      	ldrb	r3, [r3, #0]
 8007f4c:	015a      	lsls	r2, r3, #5
 8007f4e:	693b      	ldr	r3, [r7, #16]
 8007f50:	4413      	add	r3, r2
 8007f52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007f5c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007f60:	d0e7      	beq.n	8007f32 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007f62:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f64:	4618      	mov	r0, r3
 8007f66:	371c      	adds	r7, #28
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6e:	4770      	bx	lr

08007f70 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007f70:	b480      	push	{r7}
 8007f72:	b089      	sub	sp, #36	; 0x24
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	60f8      	str	r0, [r7, #12]
 8007f78:	60b9      	str	r1, [r7, #8]
 8007f7a:	4611      	mov	r1, r2
 8007f7c:	461a      	mov	r2, r3
 8007f7e:	460b      	mov	r3, r1
 8007f80:	71fb      	strb	r3, [r7, #7]
 8007f82:	4613      	mov	r3, r2
 8007f84:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007f8a:	68bb      	ldr	r3, [r7, #8]
 8007f8c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007f8e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d123      	bne.n	8007fde <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007f96:	88bb      	ldrh	r3, [r7, #4]
 8007f98:	3303      	adds	r3, #3
 8007f9a:	089b      	lsrs	r3, r3, #2
 8007f9c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	61bb      	str	r3, [r7, #24]
 8007fa2:	e018      	b.n	8007fd6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007fa4:	79fb      	ldrb	r3, [r7, #7]
 8007fa6:	031a      	lsls	r2, r3, #12
 8007fa8:	697b      	ldr	r3, [r7, #20]
 8007faa:	4413      	add	r3, r2
 8007fac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007fb0:	461a      	mov	r2, r3
 8007fb2:	69fb      	ldr	r3, [r7, #28]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007fb8:	69fb      	ldr	r3, [r7, #28]
 8007fba:	3301      	adds	r3, #1
 8007fbc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007fbe:	69fb      	ldr	r3, [r7, #28]
 8007fc0:	3301      	adds	r3, #1
 8007fc2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007fc4:	69fb      	ldr	r3, [r7, #28]
 8007fc6:	3301      	adds	r3, #1
 8007fc8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007fca:	69fb      	ldr	r3, [r7, #28]
 8007fcc:	3301      	adds	r3, #1
 8007fce:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007fd0:	69bb      	ldr	r3, [r7, #24]
 8007fd2:	3301      	adds	r3, #1
 8007fd4:	61bb      	str	r3, [r7, #24]
 8007fd6:	69ba      	ldr	r2, [r7, #24]
 8007fd8:	693b      	ldr	r3, [r7, #16]
 8007fda:	429a      	cmp	r2, r3
 8007fdc:	d3e2      	bcc.n	8007fa4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007fde:	2300      	movs	r3, #0
}
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	3724      	adds	r7, #36	; 0x24
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fea:	4770      	bx	lr

08007fec <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007fec:	b480      	push	{r7}
 8007fee:	b08b      	sub	sp, #44	; 0x2c
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	60f8      	str	r0, [r7, #12]
 8007ff4:	60b9      	str	r1, [r7, #8]
 8007ff6:	4613      	mov	r3, r2
 8007ff8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007ffe:	68bb      	ldr	r3, [r7, #8]
 8008000:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008002:	88fb      	ldrh	r3, [r7, #6]
 8008004:	089b      	lsrs	r3, r3, #2
 8008006:	b29b      	uxth	r3, r3
 8008008:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800800a:	88fb      	ldrh	r3, [r7, #6]
 800800c:	f003 0303 	and.w	r3, r3, #3
 8008010:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008012:	2300      	movs	r3, #0
 8008014:	623b      	str	r3, [r7, #32]
 8008016:	e014      	b.n	8008042 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008018:	69bb      	ldr	r3, [r7, #24]
 800801a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800801e:	681a      	ldr	r2, [r3, #0]
 8008020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008022:	601a      	str	r2, [r3, #0]
    pDest++;
 8008024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008026:	3301      	adds	r3, #1
 8008028:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800802a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800802c:	3301      	adds	r3, #1
 800802e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008032:	3301      	adds	r3, #1
 8008034:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008038:	3301      	adds	r3, #1
 800803a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800803c:	6a3b      	ldr	r3, [r7, #32]
 800803e:	3301      	adds	r3, #1
 8008040:	623b      	str	r3, [r7, #32]
 8008042:	6a3a      	ldr	r2, [r7, #32]
 8008044:	697b      	ldr	r3, [r7, #20]
 8008046:	429a      	cmp	r2, r3
 8008048:	d3e6      	bcc.n	8008018 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800804a:	8bfb      	ldrh	r3, [r7, #30]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d01e      	beq.n	800808e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008050:	2300      	movs	r3, #0
 8008052:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008054:	69bb      	ldr	r3, [r7, #24]
 8008056:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800805a:	461a      	mov	r2, r3
 800805c:	f107 0310 	add.w	r3, r7, #16
 8008060:	6812      	ldr	r2, [r2, #0]
 8008062:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008064:	693a      	ldr	r2, [r7, #16]
 8008066:	6a3b      	ldr	r3, [r7, #32]
 8008068:	b2db      	uxtb	r3, r3
 800806a:	00db      	lsls	r3, r3, #3
 800806c:	fa22 f303 	lsr.w	r3, r2, r3
 8008070:	b2da      	uxtb	r2, r3
 8008072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008074:	701a      	strb	r2, [r3, #0]
      i++;
 8008076:	6a3b      	ldr	r3, [r7, #32]
 8008078:	3301      	adds	r3, #1
 800807a:	623b      	str	r3, [r7, #32]
      pDest++;
 800807c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800807e:	3301      	adds	r3, #1
 8008080:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8008082:	8bfb      	ldrh	r3, [r7, #30]
 8008084:	3b01      	subs	r3, #1
 8008086:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008088:	8bfb      	ldrh	r3, [r7, #30]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d1ea      	bne.n	8008064 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800808e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008090:	4618      	mov	r0, r3
 8008092:	372c      	adds	r7, #44	; 0x2c
 8008094:	46bd      	mov	sp, r7
 8008096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809a:	4770      	bx	lr

0800809c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800809c:	b480      	push	{r7}
 800809e:	b085      	sub	sp, #20
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
 80080a4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	781b      	ldrb	r3, [r3, #0]
 80080ae:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	785b      	ldrb	r3, [r3, #1]
 80080b4:	2b01      	cmp	r3, #1
 80080b6:	d12c      	bne.n	8008112 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80080b8:	68bb      	ldr	r3, [r7, #8]
 80080ba:	015a      	lsls	r2, r3, #5
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	4413      	add	r3, r2
 80080c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	db12      	blt.n	80080f0 <USB_EPSetStall+0x54>
 80080ca:	68bb      	ldr	r3, [r7, #8]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d00f      	beq.n	80080f0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80080d0:	68bb      	ldr	r3, [r7, #8]
 80080d2:	015a      	lsls	r2, r3, #5
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	4413      	add	r3, r2
 80080d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	68ba      	ldr	r2, [r7, #8]
 80080e0:	0151      	lsls	r1, r2, #5
 80080e2:	68fa      	ldr	r2, [r7, #12]
 80080e4:	440a      	add	r2, r1
 80080e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80080ea:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80080ee:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80080f0:	68bb      	ldr	r3, [r7, #8]
 80080f2:	015a      	lsls	r2, r3, #5
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	4413      	add	r3, r2
 80080f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	68ba      	ldr	r2, [r7, #8]
 8008100:	0151      	lsls	r1, r2, #5
 8008102:	68fa      	ldr	r2, [r7, #12]
 8008104:	440a      	add	r2, r1
 8008106:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800810a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800810e:	6013      	str	r3, [r2, #0]
 8008110:	e02b      	b.n	800816a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008112:	68bb      	ldr	r3, [r7, #8]
 8008114:	015a      	lsls	r2, r3, #5
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	4413      	add	r3, r2
 800811a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	2b00      	cmp	r3, #0
 8008122:	db12      	blt.n	800814a <USB_EPSetStall+0xae>
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d00f      	beq.n	800814a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800812a:	68bb      	ldr	r3, [r7, #8]
 800812c:	015a      	lsls	r2, r3, #5
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	4413      	add	r3, r2
 8008132:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	68ba      	ldr	r2, [r7, #8]
 800813a:	0151      	lsls	r1, r2, #5
 800813c:	68fa      	ldr	r2, [r7, #12]
 800813e:	440a      	add	r2, r1
 8008140:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008144:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008148:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800814a:	68bb      	ldr	r3, [r7, #8]
 800814c:	015a      	lsls	r2, r3, #5
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	4413      	add	r3, r2
 8008152:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	68ba      	ldr	r2, [r7, #8]
 800815a:	0151      	lsls	r1, r2, #5
 800815c:	68fa      	ldr	r2, [r7, #12]
 800815e:	440a      	add	r2, r1
 8008160:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008164:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008168:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800816a:	2300      	movs	r3, #0
}
 800816c:	4618      	mov	r0, r3
 800816e:	3714      	adds	r7, #20
 8008170:	46bd      	mov	sp, r7
 8008172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008176:	4770      	bx	lr

08008178 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008178:	b480      	push	{r7}
 800817a:	b085      	sub	sp, #20
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
 8008180:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	781b      	ldrb	r3, [r3, #0]
 800818a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	785b      	ldrb	r3, [r3, #1]
 8008190:	2b01      	cmp	r3, #1
 8008192:	d128      	bne.n	80081e6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008194:	68bb      	ldr	r3, [r7, #8]
 8008196:	015a      	lsls	r2, r3, #5
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	4413      	add	r3, r2
 800819c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	68ba      	ldr	r2, [r7, #8]
 80081a4:	0151      	lsls	r1, r2, #5
 80081a6:	68fa      	ldr	r2, [r7, #12]
 80081a8:	440a      	add	r2, r1
 80081aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80081ae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80081b2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	791b      	ldrb	r3, [r3, #4]
 80081b8:	2b03      	cmp	r3, #3
 80081ba:	d003      	beq.n	80081c4 <USB_EPClearStall+0x4c>
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	791b      	ldrb	r3, [r3, #4]
 80081c0:	2b02      	cmp	r3, #2
 80081c2:	d138      	bne.n	8008236 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	015a      	lsls	r2, r3, #5
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	4413      	add	r3, r2
 80081cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	68ba      	ldr	r2, [r7, #8]
 80081d4:	0151      	lsls	r1, r2, #5
 80081d6:	68fa      	ldr	r2, [r7, #12]
 80081d8:	440a      	add	r2, r1
 80081da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80081de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80081e2:	6013      	str	r3, [r2, #0]
 80081e4:	e027      	b.n	8008236 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80081e6:	68bb      	ldr	r3, [r7, #8]
 80081e8:	015a      	lsls	r2, r3, #5
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	4413      	add	r3, r2
 80081ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	68ba      	ldr	r2, [r7, #8]
 80081f6:	0151      	lsls	r1, r2, #5
 80081f8:	68fa      	ldr	r2, [r7, #12]
 80081fa:	440a      	add	r2, r1
 80081fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008200:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008204:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	791b      	ldrb	r3, [r3, #4]
 800820a:	2b03      	cmp	r3, #3
 800820c:	d003      	beq.n	8008216 <USB_EPClearStall+0x9e>
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	791b      	ldrb	r3, [r3, #4]
 8008212:	2b02      	cmp	r3, #2
 8008214:	d10f      	bne.n	8008236 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008216:	68bb      	ldr	r3, [r7, #8]
 8008218:	015a      	lsls	r2, r3, #5
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	4413      	add	r3, r2
 800821e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	68ba      	ldr	r2, [r7, #8]
 8008226:	0151      	lsls	r1, r2, #5
 8008228:	68fa      	ldr	r2, [r7, #12]
 800822a:	440a      	add	r2, r1
 800822c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008230:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008234:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008236:	2300      	movs	r3, #0
}
 8008238:	4618      	mov	r0, r3
 800823a:	3714      	adds	r7, #20
 800823c:	46bd      	mov	sp, r7
 800823e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008242:	4770      	bx	lr

08008244 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008244:	b480      	push	{r7}
 8008246:	b085      	sub	sp, #20
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
 800824c:	460b      	mov	r3, r1
 800824e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	68fa      	ldr	r2, [r7, #12]
 800825e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008262:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008266:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800826e:	681a      	ldr	r2, [r3, #0]
 8008270:	78fb      	ldrb	r3, [r7, #3]
 8008272:	011b      	lsls	r3, r3, #4
 8008274:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8008278:	68f9      	ldr	r1, [r7, #12]
 800827a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800827e:	4313      	orrs	r3, r2
 8008280:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008282:	2300      	movs	r3, #0
}
 8008284:	4618      	mov	r0, r3
 8008286:	3714      	adds	r7, #20
 8008288:	46bd      	mov	sp, r7
 800828a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828e:	4770      	bx	lr

08008290 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008290:	b480      	push	{r7}
 8008292:	b085      	sub	sp, #20
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	68fa      	ldr	r2, [r7, #12]
 80082a6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80082aa:	f023 0303 	bic.w	r3, r3, #3
 80082ae:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082b6:	685b      	ldr	r3, [r3, #4]
 80082b8:	68fa      	ldr	r2, [r7, #12]
 80082ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80082be:	f023 0302 	bic.w	r3, r3, #2
 80082c2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80082c4:	2300      	movs	r3, #0
}
 80082c6:	4618      	mov	r0, r3
 80082c8:	3714      	adds	r7, #20
 80082ca:	46bd      	mov	sp, r7
 80082cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d0:	4770      	bx	lr

080082d2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80082d2:	b480      	push	{r7}
 80082d4:	b085      	sub	sp, #20
 80082d6:	af00      	add	r7, sp, #0
 80082d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	68fa      	ldr	r2, [r7, #12]
 80082e8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80082ec:	f023 0303 	bic.w	r3, r3, #3
 80082f0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082f8:	685b      	ldr	r3, [r3, #4]
 80082fa:	68fa      	ldr	r2, [r7, #12]
 80082fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008300:	f043 0302 	orr.w	r3, r3, #2
 8008304:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008306:	2300      	movs	r3, #0
}
 8008308:	4618      	mov	r0, r3
 800830a:	3714      	adds	r7, #20
 800830c:	46bd      	mov	sp, r7
 800830e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008312:	4770      	bx	lr

08008314 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008314:	b480      	push	{r7}
 8008316:	b085      	sub	sp, #20
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	695b      	ldr	r3, [r3, #20]
 8008320:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	699b      	ldr	r3, [r3, #24]
 8008326:	68fa      	ldr	r2, [r7, #12]
 8008328:	4013      	ands	r3, r2
 800832a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800832c:	68fb      	ldr	r3, [r7, #12]
}
 800832e:	4618      	mov	r0, r3
 8008330:	3714      	adds	r7, #20
 8008332:	46bd      	mov	sp, r7
 8008334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008338:	4770      	bx	lr

0800833a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800833a:	b480      	push	{r7}
 800833c:	b085      	sub	sp, #20
 800833e:	af00      	add	r7, sp, #0
 8008340:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800834c:	699b      	ldr	r3, [r3, #24]
 800834e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008356:	69db      	ldr	r3, [r3, #28]
 8008358:	68ba      	ldr	r2, [r7, #8]
 800835a:	4013      	ands	r3, r2
 800835c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800835e:	68bb      	ldr	r3, [r7, #8]
 8008360:	0c1b      	lsrs	r3, r3, #16
}
 8008362:	4618      	mov	r0, r3
 8008364:	3714      	adds	r7, #20
 8008366:	46bd      	mov	sp, r7
 8008368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836c:	4770      	bx	lr

0800836e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800836e:	b480      	push	{r7}
 8008370:	b085      	sub	sp, #20
 8008372:	af00      	add	r7, sp, #0
 8008374:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008380:	699b      	ldr	r3, [r3, #24]
 8008382:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800838a:	69db      	ldr	r3, [r3, #28]
 800838c:	68ba      	ldr	r2, [r7, #8]
 800838e:	4013      	ands	r3, r2
 8008390:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008392:	68bb      	ldr	r3, [r7, #8]
 8008394:	b29b      	uxth	r3, r3
}
 8008396:	4618      	mov	r0, r3
 8008398:	3714      	adds	r7, #20
 800839a:	46bd      	mov	sp, r7
 800839c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a0:	4770      	bx	lr

080083a2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80083a2:	b480      	push	{r7}
 80083a4:	b085      	sub	sp, #20
 80083a6:	af00      	add	r7, sp, #0
 80083a8:	6078      	str	r0, [r7, #4]
 80083aa:	460b      	mov	r3, r1
 80083ac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80083b2:	78fb      	ldrb	r3, [r7, #3]
 80083b4:	015a      	lsls	r2, r3, #5
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	4413      	add	r3, r2
 80083ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083be:	689b      	ldr	r3, [r3, #8]
 80083c0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083c8:	695b      	ldr	r3, [r3, #20]
 80083ca:	68ba      	ldr	r2, [r7, #8]
 80083cc:	4013      	ands	r3, r2
 80083ce:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80083d0:	68bb      	ldr	r3, [r7, #8]
}
 80083d2:	4618      	mov	r0, r3
 80083d4:	3714      	adds	r7, #20
 80083d6:	46bd      	mov	sp, r7
 80083d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083dc:	4770      	bx	lr

080083de <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80083de:	b480      	push	{r7}
 80083e0:	b087      	sub	sp, #28
 80083e2:	af00      	add	r7, sp, #0
 80083e4:	6078      	str	r0, [r7, #4]
 80083e6:	460b      	mov	r3, r1
 80083e8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80083ee:	697b      	ldr	r3, [r7, #20]
 80083f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083f4:	691b      	ldr	r3, [r3, #16]
 80083f6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80083f8:	697b      	ldr	r3, [r7, #20]
 80083fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008400:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008402:	78fb      	ldrb	r3, [r7, #3]
 8008404:	f003 030f 	and.w	r3, r3, #15
 8008408:	68fa      	ldr	r2, [r7, #12]
 800840a:	fa22 f303 	lsr.w	r3, r2, r3
 800840e:	01db      	lsls	r3, r3, #7
 8008410:	b2db      	uxtb	r3, r3
 8008412:	693a      	ldr	r2, [r7, #16]
 8008414:	4313      	orrs	r3, r2
 8008416:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008418:	78fb      	ldrb	r3, [r7, #3]
 800841a:	015a      	lsls	r2, r3, #5
 800841c:	697b      	ldr	r3, [r7, #20]
 800841e:	4413      	add	r3, r2
 8008420:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008424:	689b      	ldr	r3, [r3, #8]
 8008426:	693a      	ldr	r2, [r7, #16]
 8008428:	4013      	ands	r3, r2
 800842a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800842c:	68bb      	ldr	r3, [r7, #8]
}
 800842e:	4618      	mov	r0, r3
 8008430:	371c      	adds	r7, #28
 8008432:	46bd      	mov	sp, r7
 8008434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008438:	4770      	bx	lr

0800843a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800843a:	b480      	push	{r7}
 800843c:	b083      	sub	sp, #12
 800843e:	af00      	add	r7, sp, #0
 8008440:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	695b      	ldr	r3, [r3, #20]
 8008446:	f003 0301 	and.w	r3, r3, #1
}
 800844a:	4618      	mov	r0, r3
 800844c:	370c      	adds	r7, #12
 800844e:	46bd      	mov	sp, r7
 8008450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008454:	4770      	bx	lr

08008456 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8008456:	b480      	push	{r7}
 8008458:	b085      	sub	sp, #20
 800845a:	af00      	add	r7, sp, #0
 800845c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	68fa      	ldr	r2, [r7, #12]
 800846c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008470:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008474:	f023 0307 	bic.w	r3, r3, #7
 8008478:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008480:	685b      	ldr	r3, [r3, #4]
 8008482:	68fa      	ldr	r2, [r7, #12]
 8008484:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008488:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800848c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800848e:	2300      	movs	r3, #0
}
 8008490:	4618      	mov	r0, r3
 8008492:	3714      	adds	r7, #20
 8008494:	46bd      	mov	sp, r7
 8008496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849a:	4770      	bx	lr

0800849c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800849c:	b480      	push	{r7}
 800849e:	b087      	sub	sp, #28
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	60f8      	str	r0, [r7, #12]
 80084a4:	460b      	mov	r3, r1
 80084a6:	607a      	str	r2, [r7, #4]
 80084a8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	333c      	adds	r3, #60	; 0x3c
 80084b2:	3304      	adds	r3, #4
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80084b8:	693b      	ldr	r3, [r7, #16]
 80084ba:	4a26      	ldr	r2, [pc, #152]	; (8008554 <USB_EP0_OutStart+0xb8>)
 80084bc:	4293      	cmp	r3, r2
 80084be:	d90a      	bls.n	80084d6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80084c0:	697b      	ldr	r3, [r7, #20]
 80084c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80084cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80084d0:	d101      	bne.n	80084d6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80084d2:	2300      	movs	r3, #0
 80084d4:	e037      	b.n	8008546 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80084d6:	697b      	ldr	r3, [r7, #20]
 80084d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084dc:	461a      	mov	r2, r3
 80084de:	2300      	movs	r3, #0
 80084e0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80084e2:	697b      	ldr	r3, [r7, #20]
 80084e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084e8:	691b      	ldr	r3, [r3, #16]
 80084ea:	697a      	ldr	r2, [r7, #20]
 80084ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80084f0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80084f4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80084f6:	697b      	ldr	r3, [r7, #20]
 80084f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084fc:	691b      	ldr	r3, [r3, #16]
 80084fe:	697a      	ldr	r2, [r7, #20]
 8008500:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008504:	f043 0318 	orr.w	r3, r3, #24
 8008508:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800850a:	697b      	ldr	r3, [r7, #20]
 800850c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008510:	691b      	ldr	r3, [r3, #16]
 8008512:	697a      	ldr	r2, [r7, #20]
 8008514:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008518:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800851c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800851e:	7afb      	ldrb	r3, [r7, #11]
 8008520:	2b01      	cmp	r3, #1
 8008522:	d10f      	bne.n	8008544 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008524:	697b      	ldr	r3, [r7, #20]
 8008526:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800852a:	461a      	mov	r2, r3
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008530:	697b      	ldr	r3, [r7, #20]
 8008532:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	697a      	ldr	r2, [r7, #20]
 800853a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800853e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8008542:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008544:	2300      	movs	r3, #0
}
 8008546:	4618      	mov	r0, r3
 8008548:	371c      	adds	r7, #28
 800854a:	46bd      	mov	sp, r7
 800854c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008550:	4770      	bx	lr
 8008552:	bf00      	nop
 8008554:	4f54300a 	.word	0x4f54300a

08008558 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008558:	b480      	push	{r7}
 800855a:	b085      	sub	sp, #20
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008560:	2300      	movs	r3, #0
 8008562:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	3301      	adds	r3, #1
 8008568:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	4a13      	ldr	r2, [pc, #76]	; (80085bc <USB_CoreReset+0x64>)
 800856e:	4293      	cmp	r3, r2
 8008570:	d901      	bls.n	8008576 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008572:	2303      	movs	r3, #3
 8008574:	e01b      	b.n	80085ae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	691b      	ldr	r3, [r3, #16]
 800857a:	2b00      	cmp	r3, #0
 800857c:	daf2      	bge.n	8008564 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800857e:	2300      	movs	r3, #0
 8008580:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	691b      	ldr	r3, [r3, #16]
 8008586:	f043 0201 	orr.w	r2, r3, #1
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	3301      	adds	r3, #1
 8008592:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	4a09      	ldr	r2, [pc, #36]	; (80085bc <USB_CoreReset+0x64>)
 8008598:	4293      	cmp	r3, r2
 800859a:	d901      	bls.n	80085a0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800859c:	2303      	movs	r3, #3
 800859e:	e006      	b.n	80085ae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	691b      	ldr	r3, [r3, #16]
 80085a4:	f003 0301 	and.w	r3, r3, #1
 80085a8:	2b01      	cmp	r3, #1
 80085aa:	d0f0      	beq.n	800858e <USB_CoreReset+0x36>

  return HAL_OK;
 80085ac:	2300      	movs	r3, #0
}
 80085ae:	4618      	mov	r0, r3
 80085b0:	3714      	adds	r7, #20
 80085b2:	46bd      	mov	sp, r7
 80085b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b8:	4770      	bx	lr
 80085ba:	bf00      	nop
 80085bc:	00030d40 	.word	0x00030d40

080085c0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b084      	sub	sp, #16
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
 80085c8:	460b      	mov	r3, r1
 80085ca:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80085cc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80085d0:	f005 fe0a 	bl	800e1e8 <USBD_static_malloc>
 80085d4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d109      	bne.n	80085f0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	32b0      	adds	r2, #176	; 0xb0
 80085e6:	2100      	movs	r1, #0
 80085e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80085ec:	2302      	movs	r3, #2
 80085ee:	e0d4      	b.n	800879a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80085f0:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80085f4:	2100      	movs	r1, #0
 80085f6:	68f8      	ldr	r0, [r7, #12]
 80085f8:	f005 fe3a 	bl	800e270 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	32b0      	adds	r2, #176	; 0xb0
 8008606:	68f9      	ldr	r1, [r7, #12]
 8008608:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	32b0      	adds	r2, #176	; 0xb0
 8008616:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	7c1b      	ldrb	r3, [r3, #16]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d138      	bne.n	800869a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008628:	4b5e      	ldr	r3, [pc, #376]	; (80087a4 <USBD_CDC_Init+0x1e4>)
 800862a:	7819      	ldrb	r1, [r3, #0]
 800862c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008630:	2202      	movs	r2, #2
 8008632:	6878      	ldr	r0, [r7, #4]
 8008634:	f005 fcb5 	bl	800dfa2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008638:	4b5a      	ldr	r3, [pc, #360]	; (80087a4 <USBD_CDC_Init+0x1e4>)
 800863a:	781b      	ldrb	r3, [r3, #0]
 800863c:	f003 020f 	and.w	r2, r3, #15
 8008640:	6879      	ldr	r1, [r7, #4]
 8008642:	4613      	mov	r3, r2
 8008644:	009b      	lsls	r3, r3, #2
 8008646:	4413      	add	r3, r2
 8008648:	009b      	lsls	r3, r3, #2
 800864a:	440b      	add	r3, r1
 800864c:	3324      	adds	r3, #36	; 0x24
 800864e:	2201      	movs	r2, #1
 8008650:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008652:	4b55      	ldr	r3, [pc, #340]	; (80087a8 <USBD_CDC_Init+0x1e8>)
 8008654:	7819      	ldrb	r1, [r3, #0]
 8008656:	f44f 7300 	mov.w	r3, #512	; 0x200
 800865a:	2202      	movs	r2, #2
 800865c:	6878      	ldr	r0, [r7, #4]
 800865e:	f005 fca0 	bl	800dfa2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008662:	4b51      	ldr	r3, [pc, #324]	; (80087a8 <USBD_CDC_Init+0x1e8>)
 8008664:	781b      	ldrb	r3, [r3, #0]
 8008666:	f003 020f 	and.w	r2, r3, #15
 800866a:	6879      	ldr	r1, [r7, #4]
 800866c:	4613      	mov	r3, r2
 800866e:	009b      	lsls	r3, r3, #2
 8008670:	4413      	add	r3, r2
 8008672:	009b      	lsls	r3, r3, #2
 8008674:	440b      	add	r3, r1
 8008676:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800867a:	2201      	movs	r2, #1
 800867c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800867e:	4b4b      	ldr	r3, [pc, #300]	; (80087ac <USBD_CDC_Init+0x1ec>)
 8008680:	781b      	ldrb	r3, [r3, #0]
 8008682:	f003 020f 	and.w	r2, r3, #15
 8008686:	6879      	ldr	r1, [r7, #4]
 8008688:	4613      	mov	r3, r2
 800868a:	009b      	lsls	r3, r3, #2
 800868c:	4413      	add	r3, r2
 800868e:	009b      	lsls	r3, r3, #2
 8008690:	440b      	add	r3, r1
 8008692:	3326      	adds	r3, #38	; 0x26
 8008694:	2210      	movs	r2, #16
 8008696:	801a      	strh	r2, [r3, #0]
 8008698:	e035      	b.n	8008706 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800869a:	4b42      	ldr	r3, [pc, #264]	; (80087a4 <USBD_CDC_Init+0x1e4>)
 800869c:	7819      	ldrb	r1, [r3, #0]
 800869e:	2340      	movs	r3, #64	; 0x40
 80086a0:	2202      	movs	r2, #2
 80086a2:	6878      	ldr	r0, [r7, #4]
 80086a4:	f005 fc7d 	bl	800dfa2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80086a8:	4b3e      	ldr	r3, [pc, #248]	; (80087a4 <USBD_CDC_Init+0x1e4>)
 80086aa:	781b      	ldrb	r3, [r3, #0]
 80086ac:	f003 020f 	and.w	r2, r3, #15
 80086b0:	6879      	ldr	r1, [r7, #4]
 80086b2:	4613      	mov	r3, r2
 80086b4:	009b      	lsls	r3, r3, #2
 80086b6:	4413      	add	r3, r2
 80086b8:	009b      	lsls	r3, r3, #2
 80086ba:	440b      	add	r3, r1
 80086bc:	3324      	adds	r3, #36	; 0x24
 80086be:	2201      	movs	r2, #1
 80086c0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80086c2:	4b39      	ldr	r3, [pc, #228]	; (80087a8 <USBD_CDC_Init+0x1e8>)
 80086c4:	7819      	ldrb	r1, [r3, #0]
 80086c6:	2340      	movs	r3, #64	; 0x40
 80086c8:	2202      	movs	r2, #2
 80086ca:	6878      	ldr	r0, [r7, #4]
 80086cc:	f005 fc69 	bl	800dfa2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80086d0:	4b35      	ldr	r3, [pc, #212]	; (80087a8 <USBD_CDC_Init+0x1e8>)
 80086d2:	781b      	ldrb	r3, [r3, #0]
 80086d4:	f003 020f 	and.w	r2, r3, #15
 80086d8:	6879      	ldr	r1, [r7, #4]
 80086da:	4613      	mov	r3, r2
 80086dc:	009b      	lsls	r3, r3, #2
 80086de:	4413      	add	r3, r2
 80086e0:	009b      	lsls	r3, r3, #2
 80086e2:	440b      	add	r3, r1
 80086e4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80086e8:	2201      	movs	r2, #1
 80086ea:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80086ec:	4b2f      	ldr	r3, [pc, #188]	; (80087ac <USBD_CDC_Init+0x1ec>)
 80086ee:	781b      	ldrb	r3, [r3, #0]
 80086f0:	f003 020f 	and.w	r2, r3, #15
 80086f4:	6879      	ldr	r1, [r7, #4]
 80086f6:	4613      	mov	r3, r2
 80086f8:	009b      	lsls	r3, r3, #2
 80086fa:	4413      	add	r3, r2
 80086fc:	009b      	lsls	r3, r3, #2
 80086fe:	440b      	add	r3, r1
 8008700:	3326      	adds	r3, #38	; 0x26
 8008702:	2210      	movs	r2, #16
 8008704:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008706:	4b29      	ldr	r3, [pc, #164]	; (80087ac <USBD_CDC_Init+0x1ec>)
 8008708:	7819      	ldrb	r1, [r3, #0]
 800870a:	2308      	movs	r3, #8
 800870c:	2203      	movs	r2, #3
 800870e:	6878      	ldr	r0, [r7, #4]
 8008710:	f005 fc47 	bl	800dfa2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8008714:	4b25      	ldr	r3, [pc, #148]	; (80087ac <USBD_CDC_Init+0x1ec>)
 8008716:	781b      	ldrb	r3, [r3, #0]
 8008718:	f003 020f 	and.w	r2, r3, #15
 800871c:	6879      	ldr	r1, [r7, #4]
 800871e:	4613      	mov	r3, r2
 8008720:	009b      	lsls	r3, r3, #2
 8008722:	4413      	add	r3, r2
 8008724:	009b      	lsls	r3, r3, #2
 8008726:	440b      	add	r3, r1
 8008728:	3324      	adds	r3, #36	; 0x24
 800872a:	2201      	movs	r2, #1
 800872c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	2200      	movs	r2, #0
 8008732:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800873c:	687a      	ldr	r2, [r7, #4]
 800873e:	33b0      	adds	r3, #176	; 0xb0
 8008740:	009b      	lsls	r3, r3, #2
 8008742:	4413      	add	r3, r2
 8008744:	685b      	ldr	r3, [r3, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	2200      	movs	r2, #0
 800874e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	2200      	movs	r2, #0
 8008756:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8008760:	2b00      	cmp	r3, #0
 8008762:	d101      	bne.n	8008768 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8008764:	2302      	movs	r3, #2
 8008766:	e018      	b.n	800879a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	7c1b      	ldrb	r3, [r3, #16]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d10a      	bne.n	8008786 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008770:	4b0d      	ldr	r3, [pc, #52]	; (80087a8 <USBD_CDC_Init+0x1e8>)
 8008772:	7819      	ldrb	r1, [r3, #0]
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800877a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800877e:	6878      	ldr	r0, [r7, #4]
 8008780:	f005 fcfe 	bl	800e180 <USBD_LL_PrepareReceive>
 8008784:	e008      	b.n	8008798 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008786:	4b08      	ldr	r3, [pc, #32]	; (80087a8 <USBD_CDC_Init+0x1e8>)
 8008788:	7819      	ldrb	r1, [r3, #0]
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008790:	2340      	movs	r3, #64	; 0x40
 8008792:	6878      	ldr	r0, [r7, #4]
 8008794:	f005 fcf4 	bl	800e180 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008798:	2300      	movs	r3, #0
}
 800879a:	4618      	mov	r0, r3
 800879c:	3710      	adds	r7, #16
 800879e:	46bd      	mov	sp, r7
 80087a0:	bd80      	pop	{r7, pc}
 80087a2:	bf00      	nop
 80087a4:	20000093 	.word	0x20000093
 80087a8:	20000094 	.word	0x20000094
 80087ac:	20000095 	.word	0x20000095

080087b0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b082      	sub	sp, #8
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
 80087b8:	460b      	mov	r3, r1
 80087ba:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80087bc:	4b3a      	ldr	r3, [pc, #232]	; (80088a8 <USBD_CDC_DeInit+0xf8>)
 80087be:	781b      	ldrb	r3, [r3, #0]
 80087c0:	4619      	mov	r1, r3
 80087c2:	6878      	ldr	r0, [r7, #4]
 80087c4:	f005 fc13 	bl	800dfee <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80087c8:	4b37      	ldr	r3, [pc, #220]	; (80088a8 <USBD_CDC_DeInit+0xf8>)
 80087ca:	781b      	ldrb	r3, [r3, #0]
 80087cc:	f003 020f 	and.w	r2, r3, #15
 80087d0:	6879      	ldr	r1, [r7, #4]
 80087d2:	4613      	mov	r3, r2
 80087d4:	009b      	lsls	r3, r3, #2
 80087d6:	4413      	add	r3, r2
 80087d8:	009b      	lsls	r3, r3, #2
 80087da:	440b      	add	r3, r1
 80087dc:	3324      	adds	r3, #36	; 0x24
 80087de:	2200      	movs	r2, #0
 80087e0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80087e2:	4b32      	ldr	r3, [pc, #200]	; (80088ac <USBD_CDC_DeInit+0xfc>)
 80087e4:	781b      	ldrb	r3, [r3, #0]
 80087e6:	4619      	mov	r1, r3
 80087e8:	6878      	ldr	r0, [r7, #4]
 80087ea:	f005 fc00 	bl	800dfee <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80087ee:	4b2f      	ldr	r3, [pc, #188]	; (80088ac <USBD_CDC_DeInit+0xfc>)
 80087f0:	781b      	ldrb	r3, [r3, #0]
 80087f2:	f003 020f 	and.w	r2, r3, #15
 80087f6:	6879      	ldr	r1, [r7, #4]
 80087f8:	4613      	mov	r3, r2
 80087fa:	009b      	lsls	r3, r3, #2
 80087fc:	4413      	add	r3, r2
 80087fe:	009b      	lsls	r3, r3, #2
 8008800:	440b      	add	r3, r1
 8008802:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008806:	2200      	movs	r2, #0
 8008808:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800880a:	4b29      	ldr	r3, [pc, #164]	; (80088b0 <USBD_CDC_DeInit+0x100>)
 800880c:	781b      	ldrb	r3, [r3, #0]
 800880e:	4619      	mov	r1, r3
 8008810:	6878      	ldr	r0, [r7, #4]
 8008812:	f005 fbec 	bl	800dfee <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8008816:	4b26      	ldr	r3, [pc, #152]	; (80088b0 <USBD_CDC_DeInit+0x100>)
 8008818:	781b      	ldrb	r3, [r3, #0]
 800881a:	f003 020f 	and.w	r2, r3, #15
 800881e:	6879      	ldr	r1, [r7, #4]
 8008820:	4613      	mov	r3, r2
 8008822:	009b      	lsls	r3, r3, #2
 8008824:	4413      	add	r3, r2
 8008826:	009b      	lsls	r3, r3, #2
 8008828:	440b      	add	r3, r1
 800882a:	3324      	adds	r3, #36	; 0x24
 800882c:	2200      	movs	r2, #0
 800882e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8008830:	4b1f      	ldr	r3, [pc, #124]	; (80088b0 <USBD_CDC_DeInit+0x100>)
 8008832:	781b      	ldrb	r3, [r3, #0]
 8008834:	f003 020f 	and.w	r2, r3, #15
 8008838:	6879      	ldr	r1, [r7, #4]
 800883a:	4613      	mov	r3, r2
 800883c:	009b      	lsls	r3, r3, #2
 800883e:	4413      	add	r3, r2
 8008840:	009b      	lsls	r3, r3, #2
 8008842:	440b      	add	r3, r1
 8008844:	3326      	adds	r3, #38	; 0x26
 8008846:	2200      	movs	r2, #0
 8008848:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	32b0      	adds	r2, #176	; 0xb0
 8008854:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d01f      	beq.n	800889c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008862:	687a      	ldr	r2, [r7, #4]
 8008864:	33b0      	adds	r3, #176	; 0xb0
 8008866:	009b      	lsls	r3, r3, #2
 8008868:	4413      	add	r3, r2
 800886a:	685b      	ldr	r3, [r3, #4]
 800886c:	685b      	ldr	r3, [r3, #4]
 800886e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	32b0      	adds	r2, #176	; 0xb0
 800887a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800887e:	4618      	mov	r0, r3
 8008880:	f005 fcc0 	bl	800e204 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	32b0      	adds	r2, #176	; 0xb0
 800888e:	2100      	movs	r1, #0
 8008890:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	2200      	movs	r2, #0
 8008898:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800889c:	2300      	movs	r3, #0
}
 800889e:	4618      	mov	r0, r3
 80088a0:	3708      	adds	r7, #8
 80088a2:	46bd      	mov	sp, r7
 80088a4:	bd80      	pop	{r7, pc}
 80088a6:	bf00      	nop
 80088a8:	20000093 	.word	0x20000093
 80088ac:	20000094 	.word	0x20000094
 80088b0:	20000095 	.word	0x20000095

080088b4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b086      	sub	sp, #24
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
 80088bc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	32b0      	adds	r2, #176	; 0xb0
 80088c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088cc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80088ce:	2300      	movs	r3, #0
 80088d0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80088d2:	2300      	movs	r3, #0
 80088d4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80088d6:	2300      	movs	r3, #0
 80088d8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80088da:	693b      	ldr	r3, [r7, #16]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d101      	bne.n	80088e4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80088e0:	2303      	movs	r3, #3
 80088e2:	e0bf      	b.n	8008a64 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80088e4:	683b      	ldr	r3, [r7, #0]
 80088e6:	781b      	ldrb	r3, [r3, #0]
 80088e8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d050      	beq.n	8008992 <USBD_CDC_Setup+0xde>
 80088f0:	2b20      	cmp	r3, #32
 80088f2:	f040 80af 	bne.w	8008a54 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80088f6:	683b      	ldr	r3, [r7, #0]
 80088f8:	88db      	ldrh	r3, [r3, #6]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d03a      	beq.n	8008974 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80088fe:	683b      	ldr	r3, [r7, #0]
 8008900:	781b      	ldrb	r3, [r3, #0]
 8008902:	b25b      	sxtb	r3, r3
 8008904:	2b00      	cmp	r3, #0
 8008906:	da1b      	bge.n	8008940 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800890e:	687a      	ldr	r2, [r7, #4]
 8008910:	33b0      	adds	r3, #176	; 0xb0
 8008912:	009b      	lsls	r3, r3, #2
 8008914:	4413      	add	r3, r2
 8008916:	685b      	ldr	r3, [r3, #4]
 8008918:	689b      	ldr	r3, [r3, #8]
 800891a:	683a      	ldr	r2, [r7, #0]
 800891c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800891e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008920:	683a      	ldr	r2, [r7, #0]
 8008922:	88d2      	ldrh	r2, [r2, #6]
 8008924:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008926:	683b      	ldr	r3, [r7, #0]
 8008928:	88db      	ldrh	r3, [r3, #6]
 800892a:	2b07      	cmp	r3, #7
 800892c:	bf28      	it	cs
 800892e:	2307      	movcs	r3, #7
 8008930:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008932:	693b      	ldr	r3, [r7, #16]
 8008934:	89fa      	ldrh	r2, [r7, #14]
 8008936:	4619      	mov	r1, r3
 8008938:	6878      	ldr	r0, [r7, #4]
 800893a:	f001 fd89 	bl	800a450 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800893e:	e090      	b.n	8008a62 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	785a      	ldrb	r2, [r3, #1]
 8008944:	693b      	ldr	r3, [r7, #16]
 8008946:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800894a:	683b      	ldr	r3, [r7, #0]
 800894c:	88db      	ldrh	r3, [r3, #6]
 800894e:	2b3f      	cmp	r3, #63	; 0x3f
 8008950:	d803      	bhi.n	800895a <USBD_CDC_Setup+0xa6>
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	88db      	ldrh	r3, [r3, #6]
 8008956:	b2da      	uxtb	r2, r3
 8008958:	e000      	b.n	800895c <USBD_CDC_Setup+0xa8>
 800895a:	2240      	movs	r2, #64	; 0x40
 800895c:	693b      	ldr	r3, [r7, #16]
 800895e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8008962:	6939      	ldr	r1, [r7, #16]
 8008964:	693b      	ldr	r3, [r7, #16]
 8008966:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800896a:	461a      	mov	r2, r3
 800896c:	6878      	ldr	r0, [r7, #4]
 800896e:	f001 fd9b 	bl	800a4a8 <USBD_CtlPrepareRx>
      break;
 8008972:	e076      	b.n	8008a62 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800897a:	687a      	ldr	r2, [r7, #4]
 800897c:	33b0      	adds	r3, #176	; 0xb0
 800897e:	009b      	lsls	r3, r3, #2
 8008980:	4413      	add	r3, r2
 8008982:	685b      	ldr	r3, [r3, #4]
 8008984:	689b      	ldr	r3, [r3, #8]
 8008986:	683a      	ldr	r2, [r7, #0]
 8008988:	7850      	ldrb	r0, [r2, #1]
 800898a:	2200      	movs	r2, #0
 800898c:	6839      	ldr	r1, [r7, #0]
 800898e:	4798      	blx	r3
      break;
 8008990:	e067      	b.n	8008a62 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008992:	683b      	ldr	r3, [r7, #0]
 8008994:	785b      	ldrb	r3, [r3, #1]
 8008996:	2b0b      	cmp	r3, #11
 8008998:	d851      	bhi.n	8008a3e <USBD_CDC_Setup+0x18a>
 800899a:	a201      	add	r2, pc, #4	; (adr r2, 80089a0 <USBD_CDC_Setup+0xec>)
 800899c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089a0:	080089d1 	.word	0x080089d1
 80089a4:	08008a4d 	.word	0x08008a4d
 80089a8:	08008a3f 	.word	0x08008a3f
 80089ac:	08008a3f 	.word	0x08008a3f
 80089b0:	08008a3f 	.word	0x08008a3f
 80089b4:	08008a3f 	.word	0x08008a3f
 80089b8:	08008a3f 	.word	0x08008a3f
 80089bc:	08008a3f 	.word	0x08008a3f
 80089c0:	08008a3f 	.word	0x08008a3f
 80089c4:	08008a3f 	.word	0x08008a3f
 80089c8:	080089fb 	.word	0x080089fb
 80089cc:	08008a25 	.word	0x08008a25
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089d6:	b2db      	uxtb	r3, r3
 80089d8:	2b03      	cmp	r3, #3
 80089da:	d107      	bne.n	80089ec <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80089dc:	f107 030a 	add.w	r3, r7, #10
 80089e0:	2202      	movs	r2, #2
 80089e2:	4619      	mov	r1, r3
 80089e4:	6878      	ldr	r0, [r7, #4]
 80089e6:	f001 fd33 	bl	800a450 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80089ea:	e032      	b.n	8008a52 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80089ec:	6839      	ldr	r1, [r7, #0]
 80089ee:	6878      	ldr	r0, [r7, #4]
 80089f0:	f001 fcbd 	bl	800a36e <USBD_CtlError>
            ret = USBD_FAIL;
 80089f4:	2303      	movs	r3, #3
 80089f6:	75fb      	strb	r3, [r7, #23]
          break;
 80089f8:	e02b      	b.n	8008a52 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a00:	b2db      	uxtb	r3, r3
 8008a02:	2b03      	cmp	r3, #3
 8008a04:	d107      	bne.n	8008a16 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008a06:	f107 030d 	add.w	r3, r7, #13
 8008a0a:	2201      	movs	r2, #1
 8008a0c:	4619      	mov	r1, r3
 8008a0e:	6878      	ldr	r0, [r7, #4]
 8008a10:	f001 fd1e 	bl	800a450 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008a14:	e01d      	b.n	8008a52 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008a16:	6839      	ldr	r1, [r7, #0]
 8008a18:	6878      	ldr	r0, [r7, #4]
 8008a1a:	f001 fca8 	bl	800a36e <USBD_CtlError>
            ret = USBD_FAIL;
 8008a1e:	2303      	movs	r3, #3
 8008a20:	75fb      	strb	r3, [r7, #23]
          break;
 8008a22:	e016      	b.n	8008a52 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a2a:	b2db      	uxtb	r3, r3
 8008a2c:	2b03      	cmp	r3, #3
 8008a2e:	d00f      	beq.n	8008a50 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8008a30:	6839      	ldr	r1, [r7, #0]
 8008a32:	6878      	ldr	r0, [r7, #4]
 8008a34:	f001 fc9b 	bl	800a36e <USBD_CtlError>
            ret = USBD_FAIL;
 8008a38:	2303      	movs	r3, #3
 8008a3a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008a3c:	e008      	b.n	8008a50 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008a3e:	6839      	ldr	r1, [r7, #0]
 8008a40:	6878      	ldr	r0, [r7, #4]
 8008a42:	f001 fc94 	bl	800a36e <USBD_CtlError>
          ret = USBD_FAIL;
 8008a46:	2303      	movs	r3, #3
 8008a48:	75fb      	strb	r3, [r7, #23]
          break;
 8008a4a:	e002      	b.n	8008a52 <USBD_CDC_Setup+0x19e>
          break;
 8008a4c:	bf00      	nop
 8008a4e:	e008      	b.n	8008a62 <USBD_CDC_Setup+0x1ae>
          break;
 8008a50:	bf00      	nop
      }
      break;
 8008a52:	e006      	b.n	8008a62 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8008a54:	6839      	ldr	r1, [r7, #0]
 8008a56:	6878      	ldr	r0, [r7, #4]
 8008a58:	f001 fc89 	bl	800a36e <USBD_CtlError>
      ret = USBD_FAIL;
 8008a5c:	2303      	movs	r3, #3
 8008a5e:	75fb      	strb	r3, [r7, #23]
      break;
 8008a60:	bf00      	nop
  }

  return (uint8_t)ret;
 8008a62:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a64:	4618      	mov	r0, r3
 8008a66:	3718      	adds	r7, #24
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	bd80      	pop	{r7, pc}

08008a6c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b084      	sub	sp, #16
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
 8008a74:	460b      	mov	r3, r1
 8008a76:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008a7e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	32b0      	adds	r2, #176	; 0xb0
 8008a8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d101      	bne.n	8008a96 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8008a92:	2303      	movs	r3, #3
 8008a94:	e065      	b.n	8008b62 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	32b0      	adds	r2, #176	; 0xb0
 8008aa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008aa4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008aa6:	78fb      	ldrb	r3, [r7, #3]
 8008aa8:	f003 020f 	and.w	r2, r3, #15
 8008aac:	6879      	ldr	r1, [r7, #4]
 8008aae:	4613      	mov	r3, r2
 8008ab0:	009b      	lsls	r3, r3, #2
 8008ab2:	4413      	add	r3, r2
 8008ab4:	009b      	lsls	r3, r3, #2
 8008ab6:	440b      	add	r3, r1
 8008ab8:	3318      	adds	r3, #24
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d02f      	beq.n	8008b20 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008ac0:	78fb      	ldrb	r3, [r7, #3]
 8008ac2:	f003 020f 	and.w	r2, r3, #15
 8008ac6:	6879      	ldr	r1, [r7, #4]
 8008ac8:	4613      	mov	r3, r2
 8008aca:	009b      	lsls	r3, r3, #2
 8008acc:	4413      	add	r3, r2
 8008ace:	009b      	lsls	r3, r3, #2
 8008ad0:	440b      	add	r3, r1
 8008ad2:	3318      	adds	r3, #24
 8008ad4:	681a      	ldr	r2, [r3, #0]
 8008ad6:	78fb      	ldrb	r3, [r7, #3]
 8008ad8:	f003 010f 	and.w	r1, r3, #15
 8008adc:	68f8      	ldr	r0, [r7, #12]
 8008ade:	460b      	mov	r3, r1
 8008ae0:	00db      	lsls	r3, r3, #3
 8008ae2:	440b      	add	r3, r1
 8008ae4:	009b      	lsls	r3, r3, #2
 8008ae6:	4403      	add	r3, r0
 8008ae8:	3348      	adds	r3, #72	; 0x48
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	fbb2 f1f3 	udiv	r1, r2, r3
 8008af0:	fb01 f303 	mul.w	r3, r1, r3
 8008af4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d112      	bne.n	8008b20 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8008afa:	78fb      	ldrb	r3, [r7, #3]
 8008afc:	f003 020f 	and.w	r2, r3, #15
 8008b00:	6879      	ldr	r1, [r7, #4]
 8008b02:	4613      	mov	r3, r2
 8008b04:	009b      	lsls	r3, r3, #2
 8008b06:	4413      	add	r3, r2
 8008b08:	009b      	lsls	r3, r3, #2
 8008b0a:	440b      	add	r3, r1
 8008b0c:	3318      	adds	r3, #24
 8008b0e:	2200      	movs	r2, #0
 8008b10:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008b12:	78f9      	ldrb	r1, [r7, #3]
 8008b14:	2300      	movs	r3, #0
 8008b16:	2200      	movs	r2, #0
 8008b18:	6878      	ldr	r0, [r7, #4]
 8008b1a:	f005 fb10 	bl	800e13e <USBD_LL_Transmit>
 8008b1e:	e01f      	b.n	8008b60 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008b20:	68bb      	ldr	r3, [r7, #8]
 8008b22:	2200      	movs	r2, #0
 8008b24:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008b2e:	687a      	ldr	r2, [r7, #4]
 8008b30:	33b0      	adds	r3, #176	; 0xb0
 8008b32:	009b      	lsls	r3, r3, #2
 8008b34:	4413      	add	r3, r2
 8008b36:	685b      	ldr	r3, [r3, #4]
 8008b38:	691b      	ldr	r3, [r3, #16]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d010      	beq.n	8008b60 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008b44:	687a      	ldr	r2, [r7, #4]
 8008b46:	33b0      	adds	r3, #176	; 0xb0
 8008b48:	009b      	lsls	r3, r3, #2
 8008b4a:	4413      	add	r3, r2
 8008b4c:	685b      	ldr	r3, [r3, #4]
 8008b4e:	691b      	ldr	r3, [r3, #16]
 8008b50:	68ba      	ldr	r2, [r7, #8]
 8008b52:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8008b56:	68ba      	ldr	r2, [r7, #8]
 8008b58:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008b5c:	78fa      	ldrb	r2, [r7, #3]
 8008b5e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008b60:	2300      	movs	r3, #0
}
 8008b62:	4618      	mov	r0, r3
 8008b64:	3710      	adds	r7, #16
 8008b66:	46bd      	mov	sp, r7
 8008b68:	bd80      	pop	{r7, pc}

08008b6a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008b6a:	b580      	push	{r7, lr}
 8008b6c:	b084      	sub	sp, #16
 8008b6e:	af00      	add	r7, sp, #0
 8008b70:	6078      	str	r0, [r7, #4]
 8008b72:	460b      	mov	r3, r1
 8008b74:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	32b0      	adds	r2, #176	; 0xb0
 8008b80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b84:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	32b0      	adds	r2, #176	; 0xb0
 8008b90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d101      	bne.n	8008b9c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008b98:	2303      	movs	r3, #3
 8008b9a:	e01a      	b.n	8008bd2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008b9c:	78fb      	ldrb	r3, [r7, #3]
 8008b9e:	4619      	mov	r1, r3
 8008ba0:	6878      	ldr	r0, [r7, #4]
 8008ba2:	f005 fb0e 	bl	800e1c2 <USBD_LL_GetRxDataSize>
 8008ba6:	4602      	mov	r2, r0
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008bb4:	687a      	ldr	r2, [r7, #4]
 8008bb6:	33b0      	adds	r3, #176	; 0xb0
 8008bb8:	009b      	lsls	r3, r3, #2
 8008bba:	4413      	add	r3, r2
 8008bbc:	685b      	ldr	r3, [r3, #4]
 8008bbe:	68db      	ldr	r3, [r3, #12]
 8008bc0:	68fa      	ldr	r2, [r7, #12]
 8008bc2:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008bc6:	68fa      	ldr	r2, [r7, #12]
 8008bc8:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008bcc:	4611      	mov	r1, r2
 8008bce:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008bd0:	2300      	movs	r3, #0
}
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	3710      	adds	r7, #16
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	bd80      	pop	{r7, pc}

08008bda <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008bda:	b580      	push	{r7, lr}
 8008bdc:	b084      	sub	sp, #16
 8008bde:	af00      	add	r7, sp, #0
 8008be0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	32b0      	adds	r2, #176	; 0xb0
 8008bec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bf0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d101      	bne.n	8008bfc <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008bf8:	2303      	movs	r3, #3
 8008bfa:	e025      	b.n	8008c48 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008c02:	687a      	ldr	r2, [r7, #4]
 8008c04:	33b0      	adds	r3, #176	; 0xb0
 8008c06:	009b      	lsls	r3, r3, #2
 8008c08:	4413      	add	r3, r2
 8008c0a:	685b      	ldr	r3, [r3, #4]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d01a      	beq.n	8008c46 <USBD_CDC_EP0_RxReady+0x6c>
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008c16:	2bff      	cmp	r3, #255	; 0xff
 8008c18:	d015      	beq.n	8008c46 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008c20:	687a      	ldr	r2, [r7, #4]
 8008c22:	33b0      	adds	r3, #176	; 0xb0
 8008c24:	009b      	lsls	r3, r3, #2
 8008c26:	4413      	add	r3, r2
 8008c28:	685b      	ldr	r3, [r3, #4]
 8008c2a:	689b      	ldr	r3, [r3, #8]
 8008c2c:	68fa      	ldr	r2, [r7, #12]
 8008c2e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8008c32:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8008c34:	68fa      	ldr	r2, [r7, #12]
 8008c36:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008c3a:	b292      	uxth	r2, r2
 8008c3c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	22ff      	movs	r2, #255	; 0xff
 8008c42:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8008c46:	2300      	movs	r3, #0
}
 8008c48:	4618      	mov	r0, r3
 8008c4a:	3710      	adds	r7, #16
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	bd80      	pop	{r7, pc}

08008c50 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	b086      	sub	sp, #24
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008c58:	2182      	movs	r1, #130	; 0x82
 8008c5a:	4818      	ldr	r0, [pc, #96]	; (8008cbc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008c5c:	f000 fd4f 	bl	80096fe <USBD_GetEpDesc>
 8008c60:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008c62:	2101      	movs	r1, #1
 8008c64:	4815      	ldr	r0, [pc, #84]	; (8008cbc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008c66:	f000 fd4a 	bl	80096fe <USBD_GetEpDesc>
 8008c6a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008c6c:	2181      	movs	r1, #129	; 0x81
 8008c6e:	4813      	ldr	r0, [pc, #76]	; (8008cbc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008c70:	f000 fd45 	bl	80096fe <USBD_GetEpDesc>
 8008c74:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008c76:	697b      	ldr	r3, [r7, #20]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d002      	beq.n	8008c82 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008c7c:	697b      	ldr	r3, [r7, #20]
 8008c7e:	2210      	movs	r2, #16
 8008c80:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008c82:	693b      	ldr	r3, [r7, #16]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d006      	beq.n	8008c96 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008c88:	693b      	ldr	r3, [r7, #16]
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008c90:	711a      	strb	r2, [r3, #4]
 8008c92:	2200      	movs	r2, #0
 8008c94:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d006      	beq.n	8008caa <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008ca4:	711a      	strb	r2, [r3, #4]
 8008ca6:	2200      	movs	r2, #0
 8008ca8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	2243      	movs	r2, #67	; 0x43
 8008cae:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008cb0:	4b02      	ldr	r3, [pc, #8]	; (8008cbc <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	3718      	adds	r7, #24
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	bd80      	pop	{r7, pc}
 8008cba:	bf00      	nop
 8008cbc:	20000050 	.word	0x20000050

08008cc0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b086      	sub	sp, #24
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008cc8:	2182      	movs	r1, #130	; 0x82
 8008cca:	4818      	ldr	r0, [pc, #96]	; (8008d2c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008ccc:	f000 fd17 	bl	80096fe <USBD_GetEpDesc>
 8008cd0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008cd2:	2101      	movs	r1, #1
 8008cd4:	4815      	ldr	r0, [pc, #84]	; (8008d2c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008cd6:	f000 fd12 	bl	80096fe <USBD_GetEpDesc>
 8008cda:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008cdc:	2181      	movs	r1, #129	; 0x81
 8008cde:	4813      	ldr	r0, [pc, #76]	; (8008d2c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008ce0:	f000 fd0d 	bl	80096fe <USBD_GetEpDesc>
 8008ce4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008ce6:	697b      	ldr	r3, [r7, #20]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d002      	beq.n	8008cf2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008cec:	697b      	ldr	r3, [r7, #20]
 8008cee:	2210      	movs	r2, #16
 8008cf0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008cf2:	693b      	ldr	r3, [r7, #16]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d006      	beq.n	8008d06 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008cf8:	693b      	ldr	r3, [r7, #16]
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	711a      	strb	r2, [r3, #4]
 8008cfe:	2200      	movs	r2, #0
 8008d00:	f042 0202 	orr.w	r2, r2, #2
 8008d04:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d006      	beq.n	8008d1a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	2200      	movs	r2, #0
 8008d10:	711a      	strb	r2, [r3, #4]
 8008d12:	2200      	movs	r2, #0
 8008d14:	f042 0202 	orr.w	r2, r2, #2
 8008d18:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	2243      	movs	r2, #67	; 0x43
 8008d1e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008d20:	4b02      	ldr	r3, [pc, #8]	; (8008d2c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8008d22:	4618      	mov	r0, r3
 8008d24:	3718      	adds	r7, #24
 8008d26:	46bd      	mov	sp, r7
 8008d28:	bd80      	pop	{r7, pc}
 8008d2a:	bf00      	nop
 8008d2c:	20000050 	.word	0x20000050

08008d30 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b086      	sub	sp, #24
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008d38:	2182      	movs	r1, #130	; 0x82
 8008d3a:	4818      	ldr	r0, [pc, #96]	; (8008d9c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008d3c:	f000 fcdf 	bl	80096fe <USBD_GetEpDesc>
 8008d40:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008d42:	2101      	movs	r1, #1
 8008d44:	4815      	ldr	r0, [pc, #84]	; (8008d9c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008d46:	f000 fcda 	bl	80096fe <USBD_GetEpDesc>
 8008d4a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008d4c:	2181      	movs	r1, #129	; 0x81
 8008d4e:	4813      	ldr	r0, [pc, #76]	; (8008d9c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008d50:	f000 fcd5 	bl	80096fe <USBD_GetEpDesc>
 8008d54:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008d56:	697b      	ldr	r3, [r7, #20]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d002      	beq.n	8008d62 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008d5c:	697b      	ldr	r3, [r7, #20]
 8008d5e:	2210      	movs	r2, #16
 8008d60:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008d62:	693b      	ldr	r3, [r7, #16]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d006      	beq.n	8008d76 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008d68:	693b      	ldr	r3, [r7, #16]
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008d70:	711a      	strb	r2, [r3, #4]
 8008d72:	2200      	movs	r2, #0
 8008d74:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d006      	beq.n	8008d8a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	2200      	movs	r2, #0
 8008d80:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008d84:	711a      	strb	r2, [r3, #4]
 8008d86:	2200      	movs	r2, #0
 8008d88:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	2243      	movs	r2, #67	; 0x43
 8008d8e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008d90:	4b02      	ldr	r3, [pc, #8]	; (8008d9c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8008d92:	4618      	mov	r0, r3
 8008d94:	3718      	adds	r7, #24
 8008d96:	46bd      	mov	sp, r7
 8008d98:	bd80      	pop	{r7, pc}
 8008d9a:	bf00      	nop
 8008d9c:	20000050 	.word	0x20000050

08008da0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008da0:	b480      	push	{r7}
 8008da2:	b083      	sub	sp, #12
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	220a      	movs	r2, #10
 8008dac:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008dae:	4b03      	ldr	r3, [pc, #12]	; (8008dbc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008db0:	4618      	mov	r0, r3
 8008db2:	370c      	adds	r7, #12
 8008db4:	46bd      	mov	sp, r7
 8008db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dba:	4770      	bx	lr
 8008dbc:	2000000c 	.word	0x2000000c

08008dc0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008dc0:	b480      	push	{r7}
 8008dc2:	b083      	sub	sp, #12
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
 8008dc8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d101      	bne.n	8008dd4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008dd0:	2303      	movs	r3, #3
 8008dd2:	e009      	b.n	8008de8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008dda:	687a      	ldr	r2, [r7, #4]
 8008ddc:	33b0      	adds	r3, #176	; 0xb0
 8008dde:	009b      	lsls	r3, r3, #2
 8008de0:	4413      	add	r3, r2
 8008de2:	683a      	ldr	r2, [r7, #0]
 8008de4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8008de6:	2300      	movs	r3, #0
}
 8008de8:	4618      	mov	r0, r3
 8008dea:	370c      	adds	r7, #12
 8008dec:	46bd      	mov	sp, r7
 8008dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df2:	4770      	bx	lr

08008df4 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008df4:	b480      	push	{r7}
 8008df6:	b087      	sub	sp, #28
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	60f8      	str	r0, [r7, #12]
 8008dfc:	60b9      	str	r1, [r7, #8]
 8008dfe:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	32b0      	adds	r2, #176	; 0xb0
 8008e0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e0e:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8008e10:	697b      	ldr	r3, [r7, #20]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d101      	bne.n	8008e1a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008e16:	2303      	movs	r3, #3
 8008e18:	e008      	b.n	8008e2c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8008e1a:	697b      	ldr	r3, [r7, #20]
 8008e1c:	68ba      	ldr	r2, [r7, #8]
 8008e1e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008e22:	697b      	ldr	r3, [r7, #20]
 8008e24:	687a      	ldr	r2, [r7, #4]
 8008e26:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8008e2a:	2300      	movs	r3, #0
}
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	371c      	adds	r7, #28
 8008e30:	46bd      	mov	sp, r7
 8008e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e36:	4770      	bx	lr

08008e38 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008e38:	b480      	push	{r7}
 8008e3a:	b085      	sub	sp, #20
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
 8008e40:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	32b0      	adds	r2, #176	; 0xb0
 8008e4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e50:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d101      	bne.n	8008e5c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008e58:	2303      	movs	r3, #3
 8008e5a:	e004      	b.n	8008e66 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	683a      	ldr	r2, [r7, #0]
 8008e60:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8008e64:	2300      	movs	r3, #0
}
 8008e66:	4618      	mov	r0, r3
 8008e68:	3714      	adds	r7, #20
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e70:	4770      	bx	lr
	...

08008e74 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b084      	sub	sp, #16
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	32b0      	adds	r2, #176	; 0xb0
 8008e86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e8a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8008e8c:	2301      	movs	r3, #1
 8008e8e:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	32b0      	adds	r2, #176	; 0xb0
 8008e9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d101      	bne.n	8008ea6 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008ea2:	2303      	movs	r3, #3
 8008ea4:	e025      	b.n	8008ef2 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8008ea6:	68bb      	ldr	r3, [r7, #8]
 8008ea8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d11f      	bne.n	8008ef0 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008eb0:	68bb      	ldr	r3, [r7, #8]
 8008eb2:	2201      	movs	r2, #1
 8008eb4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8008eb8:	4b10      	ldr	r3, [pc, #64]	; (8008efc <USBD_CDC_TransmitPacket+0x88>)
 8008eba:	781b      	ldrb	r3, [r3, #0]
 8008ebc:	f003 020f 	and.w	r2, r3, #15
 8008ec0:	68bb      	ldr	r3, [r7, #8]
 8008ec2:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8008ec6:	6878      	ldr	r0, [r7, #4]
 8008ec8:	4613      	mov	r3, r2
 8008eca:	009b      	lsls	r3, r3, #2
 8008ecc:	4413      	add	r3, r2
 8008ece:	009b      	lsls	r3, r3, #2
 8008ed0:	4403      	add	r3, r0
 8008ed2:	3318      	adds	r3, #24
 8008ed4:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8008ed6:	4b09      	ldr	r3, [pc, #36]	; (8008efc <USBD_CDC_TransmitPacket+0x88>)
 8008ed8:	7819      	ldrb	r1, [r3, #0]
 8008eda:	68bb      	ldr	r3, [r7, #8]
 8008edc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8008ee0:	68bb      	ldr	r3, [r7, #8]
 8008ee2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8008ee6:	6878      	ldr	r0, [r7, #4]
 8008ee8:	f005 f929 	bl	800e13e <USBD_LL_Transmit>

    ret = USBD_OK;
 8008eec:	2300      	movs	r3, #0
 8008eee:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008ef0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	3710      	adds	r7, #16
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	bd80      	pop	{r7, pc}
 8008efa:	bf00      	nop
 8008efc:	20000093 	.word	0x20000093

08008f00 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b084      	sub	sp, #16
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	32b0      	adds	r2, #176	; 0xb0
 8008f12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f16:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	32b0      	adds	r2, #176	; 0xb0
 8008f22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d101      	bne.n	8008f2e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8008f2a:	2303      	movs	r3, #3
 8008f2c:	e018      	b.n	8008f60 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	7c1b      	ldrb	r3, [r3, #16]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d10a      	bne.n	8008f4c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008f36:	4b0c      	ldr	r3, [pc, #48]	; (8008f68 <USBD_CDC_ReceivePacket+0x68>)
 8008f38:	7819      	ldrb	r1, [r3, #0]
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008f40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008f44:	6878      	ldr	r0, [r7, #4]
 8008f46:	f005 f91b 	bl	800e180 <USBD_LL_PrepareReceive>
 8008f4a:	e008      	b.n	8008f5e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008f4c:	4b06      	ldr	r3, [pc, #24]	; (8008f68 <USBD_CDC_ReceivePacket+0x68>)
 8008f4e:	7819      	ldrb	r1, [r3, #0]
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008f56:	2340      	movs	r3, #64	; 0x40
 8008f58:	6878      	ldr	r0, [r7, #4]
 8008f5a:	f005 f911 	bl	800e180 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008f5e:	2300      	movs	r3, #0
}
 8008f60:	4618      	mov	r0, r3
 8008f62:	3710      	adds	r7, #16
 8008f64:	46bd      	mov	sp, r7
 8008f66:	bd80      	pop	{r7, pc}
 8008f68:	20000094 	.word	0x20000094

08008f6c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b086      	sub	sp, #24
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	60f8      	str	r0, [r7, #12]
 8008f74:	60b9      	str	r1, [r7, #8]
 8008f76:	4613      	mov	r3, r2
 8008f78:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d101      	bne.n	8008f84 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008f80:	2303      	movs	r3, #3
 8008f82:	e01f      	b.n	8008fc4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	2200      	movs	r2, #0
 8008f88:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	2200      	movs	r2, #0
 8008f90:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	2200      	movs	r2, #0
 8008f98:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008f9c:	68bb      	ldr	r3, [r7, #8]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d003      	beq.n	8008faa <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	68ba      	ldr	r2, [r7, #8]
 8008fa6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	2201      	movs	r2, #1
 8008fae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	79fa      	ldrb	r2, [r7, #7]
 8008fb6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008fb8:	68f8      	ldr	r0, [r7, #12]
 8008fba:	f004 ff8b 	bl	800ded4 <USBD_LL_Init>
 8008fbe:	4603      	mov	r3, r0
 8008fc0:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008fc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	3718      	adds	r7, #24
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	bd80      	pop	{r7, pc}

08008fcc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b084      	sub	sp, #16
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
 8008fd4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008fda:	683b      	ldr	r3, [r7, #0]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d101      	bne.n	8008fe4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008fe0:	2303      	movs	r3, #3
 8008fe2:	e025      	b.n	8009030 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	683a      	ldr	r2, [r7, #0]
 8008fe8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	32ae      	adds	r2, #174	; 0xae
 8008ff6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d00f      	beq.n	8009020 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	32ae      	adds	r2, #174	; 0xae
 800900a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800900e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009010:	f107 020e 	add.w	r2, r7, #14
 8009014:	4610      	mov	r0, r2
 8009016:	4798      	blx	r3
 8009018:	4602      	mov	r2, r0
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8009026:	1c5a      	adds	r2, r3, #1
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800902e:	2300      	movs	r3, #0
}
 8009030:	4618      	mov	r0, r3
 8009032:	3710      	adds	r7, #16
 8009034:	46bd      	mov	sp, r7
 8009036:	bd80      	pop	{r7, pc}

08009038 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009038:	b580      	push	{r7, lr}
 800903a:	b082      	sub	sp, #8
 800903c:	af00      	add	r7, sp, #0
 800903e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009040:	6878      	ldr	r0, [r7, #4]
 8009042:	f004 ff93 	bl	800df6c <USBD_LL_Start>
 8009046:	4603      	mov	r3, r0
}
 8009048:	4618      	mov	r0, r3
 800904a:	3708      	adds	r7, #8
 800904c:	46bd      	mov	sp, r7
 800904e:	bd80      	pop	{r7, pc}

08009050 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009050:	b480      	push	{r7}
 8009052:	b083      	sub	sp, #12
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009058:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800905a:	4618      	mov	r0, r3
 800905c:	370c      	adds	r7, #12
 800905e:	46bd      	mov	sp, r7
 8009060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009064:	4770      	bx	lr

08009066 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009066:	b580      	push	{r7, lr}
 8009068:	b084      	sub	sp, #16
 800906a:	af00      	add	r7, sp, #0
 800906c:	6078      	str	r0, [r7, #4]
 800906e:	460b      	mov	r3, r1
 8009070:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009072:	2300      	movs	r3, #0
 8009074:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800907c:	2b00      	cmp	r3, #0
 800907e:	d009      	beq.n	8009094 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	78fa      	ldrb	r2, [r7, #3]
 800908a:	4611      	mov	r1, r2
 800908c:	6878      	ldr	r0, [r7, #4]
 800908e:	4798      	blx	r3
 8009090:	4603      	mov	r3, r0
 8009092:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009094:	7bfb      	ldrb	r3, [r7, #15]
}
 8009096:	4618      	mov	r0, r3
 8009098:	3710      	adds	r7, #16
 800909a:	46bd      	mov	sp, r7
 800909c:	bd80      	pop	{r7, pc}

0800909e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800909e:	b580      	push	{r7, lr}
 80090a0:	b084      	sub	sp, #16
 80090a2:	af00      	add	r7, sp, #0
 80090a4:	6078      	str	r0, [r7, #4]
 80090a6:	460b      	mov	r3, r1
 80090a8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80090aa:	2300      	movs	r3, #0
 80090ac:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090b4:	685b      	ldr	r3, [r3, #4]
 80090b6:	78fa      	ldrb	r2, [r7, #3]
 80090b8:	4611      	mov	r1, r2
 80090ba:	6878      	ldr	r0, [r7, #4]
 80090bc:	4798      	blx	r3
 80090be:	4603      	mov	r3, r0
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d001      	beq.n	80090c8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80090c4:	2303      	movs	r3, #3
 80090c6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80090c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80090ca:	4618      	mov	r0, r3
 80090cc:	3710      	adds	r7, #16
 80090ce:	46bd      	mov	sp, r7
 80090d0:	bd80      	pop	{r7, pc}

080090d2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80090d2:	b580      	push	{r7, lr}
 80090d4:	b084      	sub	sp, #16
 80090d6:	af00      	add	r7, sp, #0
 80090d8:	6078      	str	r0, [r7, #4]
 80090da:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80090e2:	6839      	ldr	r1, [r7, #0]
 80090e4:	4618      	mov	r0, r3
 80090e6:	f001 f908 	bl	800a2fa <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	2201      	movs	r2, #1
 80090ee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80090f8:	461a      	mov	r2, r3
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009106:	f003 031f 	and.w	r3, r3, #31
 800910a:	2b02      	cmp	r3, #2
 800910c:	d01a      	beq.n	8009144 <USBD_LL_SetupStage+0x72>
 800910e:	2b02      	cmp	r3, #2
 8009110:	d822      	bhi.n	8009158 <USBD_LL_SetupStage+0x86>
 8009112:	2b00      	cmp	r3, #0
 8009114:	d002      	beq.n	800911c <USBD_LL_SetupStage+0x4a>
 8009116:	2b01      	cmp	r3, #1
 8009118:	d00a      	beq.n	8009130 <USBD_LL_SetupStage+0x5e>
 800911a:	e01d      	b.n	8009158 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009122:	4619      	mov	r1, r3
 8009124:	6878      	ldr	r0, [r7, #4]
 8009126:	f000 fb5f 	bl	80097e8 <USBD_StdDevReq>
 800912a:	4603      	mov	r3, r0
 800912c:	73fb      	strb	r3, [r7, #15]
      break;
 800912e:	e020      	b.n	8009172 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009136:	4619      	mov	r1, r3
 8009138:	6878      	ldr	r0, [r7, #4]
 800913a:	f000 fbc7 	bl	80098cc <USBD_StdItfReq>
 800913e:	4603      	mov	r3, r0
 8009140:	73fb      	strb	r3, [r7, #15]
      break;
 8009142:	e016      	b.n	8009172 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800914a:	4619      	mov	r1, r3
 800914c:	6878      	ldr	r0, [r7, #4]
 800914e:	f000 fc29 	bl	80099a4 <USBD_StdEPReq>
 8009152:	4603      	mov	r3, r0
 8009154:	73fb      	strb	r3, [r7, #15]
      break;
 8009156:	e00c      	b.n	8009172 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800915e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009162:	b2db      	uxtb	r3, r3
 8009164:	4619      	mov	r1, r3
 8009166:	6878      	ldr	r0, [r7, #4]
 8009168:	f004 ff60 	bl	800e02c <USBD_LL_StallEP>
 800916c:	4603      	mov	r3, r0
 800916e:	73fb      	strb	r3, [r7, #15]
      break;
 8009170:	bf00      	nop
  }

  return ret;
 8009172:	7bfb      	ldrb	r3, [r7, #15]
}
 8009174:	4618      	mov	r0, r3
 8009176:	3710      	adds	r7, #16
 8009178:	46bd      	mov	sp, r7
 800917a:	bd80      	pop	{r7, pc}

0800917c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b086      	sub	sp, #24
 8009180:	af00      	add	r7, sp, #0
 8009182:	60f8      	str	r0, [r7, #12]
 8009184:	460b      	mov	r3, r1
 8009186:	607a      	str	r2, [r7, #4]
 8009188:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800918a:	2300      	movs	r3, #0
 800918c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800918e:	7afb      	ldrb	r3, [r7, #11]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d16e      	bne.n	8009272 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800919a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80091a2:	2b03      	cmp	r3, #3
 80091a4:	f040 8098 	bne.w	80092d8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80091a8:	693b      	ldr	r3, [r7, #16]
 80091aa:	689a      	ldr	r2, [r3, #8]
 80091ac:	693b      	ldr	r3, [r7, #16]
 80091ae:	68db      	ldr	r3, [r3, #12]
 80091b0:	429a      	cmp	r2, r3
 80091b2:	d913      	bls.n	80091dc <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80091b4:	693b      	ldr	r3, [r7, #16]
 80091b6:	689a      	ldr	r2, [r3, #8]
 80091b8:	693b      	ldr	r3, [r7, #16]
 80091ba:	68db      	ldr	r3, [r3, #12]
 80091bc:	1ad2      	subs	r2, r2, r3
 80091be:	693b      	ldr	r3, [r7, #16]
 80091c0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80091c2:	693b      	ldr	r3, [r7, #16]
 80091c4:	68da      	ldr	r2, [r3, #12]
 80091c6:	693b      	ldr	r3, [r7, #16]
 80091c8:	689b      	ldr	r3, [r3, #8]
 80091ca:	4293      	cmp	r3, r2
 80091cc:	bf28      	it	cs
 80091ce:	4613      	movcs	r3, r2
 80091d0:	461a      	mov	r2, r3
 80091d2:	6879      	ldr	r1, [r7, #4]
 80091d4:	68f8      	ldr	r0, [r7, #12]
 80091d6:	f001 f984 	bl	800a4e2 <USBD_CtlContinueRx>
 80091da:	e07d      	b.n	80092d8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80091e2:	f003 031f 	and.w	r3, r3, #31
 80091e6:	2b02      	cmp	r3, #2
 80091e8:	d014      	beq.n	8009214 <USBD_LL_DataOutStage+0x98>
 80091ea:	2b02      	cmp	r3, #2
 80091ec:	d81d      	bhi.n	800922a <USBD_LL_DataOutStage+0xae>
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d002      	beq.n	80091f8 <USBD_LL_DataOutStage+0x7c>
 80091f2:	2b01      	cmp	r3, #1
 80091f4:	d003      	beq.n	80091fe <USBD_LL_DataOutStage+0x82>
 80091f6:	e018      	b.n	800922a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80091f8:	2300      	movs	r3, #0
 80091fa:	75bb      	strb	r3, [r7, #22]
            break;
 80091fc:	e018      	b.n	8009230 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009204:	b2db      	uxtb	r3, r3
 8009206:	4619      	mov	r1, r3
 8009208:	68f8      	ldr	r0, [r7, #12]
 800920a:	f000 fa5e 	bl	80096ca <USBD_CoreFindIF>
 800920e:	4603      	mov	r3, r0
 8009210:	75bb      	strb	r3, [r7, #22]
            break;
 8009212:	e00d      	b.n	8009230 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800921a:	b2db      	uxtb	r3, r3
 800921c:	4619      	mov	r1, r3
 800921e:	68f8      	ldr	r0, [r7, #12]
 8009220:	f000 fa60 	bl	80096e4 <USBD_CoreFindEP>
 8009224:	4603      	mov	r3, r0
 8009226:	75bb      	strb	r3, [r7, #22]
            break;
 8009228:	e002      	b.n	8009230 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800922a:	2300      	movs	r3, #0
 800922c:	75bb      	strb	r3, [r7, #22]
            break;
 800922e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8009230:	7dbb      	ldrb	r3, [r7, #22]
 8009232:	2b00      	cmp	r3, #0
 8009234:	d119      	bne.n	800926a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800923c:	b2db      	uxtb	r3, r3
 800923e:	2b03      	cmp	r3, #3
 8009240:	d113      	bne.n	800926a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8009242:	7dba      	ldrb	r2, [r7, #22]
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	32ae      	adds	r2, #174	; 0xae
 8009248:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800924c:	691b      	ldr	r3, [r3, #16]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d00b      	beq.n	800926a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8009252:	7dba      	ldrb	r2, [r7, #22]
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800925a:	7dba      	ldrb	r2, [r7, #22]
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	32ae      	adds	r2, #174	; 0xae
 8009260:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009264:	691b      	ldr	r3, [r3, #16]
 8009266:	68f8      	ldr	r0, [r7, #12]
 8009268:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800926a:	68f8      	ldr	r0, [r7, #12]
 800926c:	f001 f94a 	bl	800a504 <USBD_CtlSendStatus>
 8009270:	e032      	b.n	80092d8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8009272:	7afb      	ldrb	r3, [r7, #11]
 8009274:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009278:	b2db      	uxtb	r3, r3
 800927a:	4619      	mov	r1, r3
 800927c:	68f8      	ldr	r0, [r7, #12]
 800927e:	f000 fa31 	bl	80096e4 <USBD_CoreFindEP>
 8009282:	4603      	mov	r3, r0
 8009284:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009286:	7dbb      	ldrb	r3, [r7, #22]
 8009288:	2bff      	cmp	r3, #255	; 0xff
 800928a:	d025      	beq.n	80092d8 <USBD_LL_DataOutStage+0x15c>
 800928c:	7dbb      	ldrb	r3, [r7, #22]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d122      	bne.n	80092d8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009298:	b2db      	uxtb	r3, r3
 800929a:	2b03      	cmp	r3, #3
 800929c:	d117      	bne.n	80092ce <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800929e:	7dba      	ldrb	r2, [r7, #22]
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	32ae      	adds	r2, #174	; 0xae
 80092a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092a8:	699b      	ldr	r3, [r3, #24]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d00f      	beq.n	80092ce <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80092ae:	7dba      	ldrb	r2, [r7, #22]
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80092b6:	7dba      	ldrb	r2, [r7, #22]
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	32ae      	adds	r2, #174	; 0xae
 80092bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092c0:	699b      	ldr	r3, [r3, #24]
 80092c2:	7afa      	ldrb	r2, [r7, #11]
 80092c4:	4611      	mov	r1, r2
 80092c6:	68f8      	ldr	r0, [r7, #12]
 80092c8:	4798      	blx	r3
 80092ca:	4603      	mov	r3, r0
 80092cc:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80092ce:	7dfb      	ldrb	r3, [r7, #23]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d001      	beq.n	80092d8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80092d4:	7dfb      	ldrb	r3, [r7, #23]
 80092d6:	e000      	b.n	80092da <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80092d8:	2300      	movs	r3, #0
}
 80092da:	4618      	mov	r0, r3
 80092dc:	3718      	adds	r7, #24
 80092de:	46bd      	mov	sp, r7
 80092e0:	bd80      	pop	{r7, pc}

080092e2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80092e2:	b580      	push	{r7, lr}
 80092e4:	b086      	sub	sp, #24
 80092e6:	af00      	add	r7, sp, #0
 80092e8:	60f8      	str	r0, [r7, #12]
 80092ea:	460b      	mov	r3, r1
 80092ec:	607a      	str	r2, [r7, #4]
 80092ee:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80092f0:	7afb      	ldrb	r3, [r7, #11]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d16f      	bne.n	80093d6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	3314      	adds	r3, #20
 80092fa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009302:	2b02      	cmp	r3, #2
 8009304:	d15a      	bne.n	80093bc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8009306:	693b      	ldr	r3, [r7, #16]
 8009308:	689a      	ldr	r2, [r3, #8]
 800930a:	693b      	ldr	r3, [r7, #16]
 800930c:	68db      	ldr	r3, [r3, #12]
 800930e:	429a      	cmp	r2, r3
 8009310:	d914      	bls.n	800933c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009312:	693b      	ldr	r3, [r7, #16]
 8009314:	689a      	ldr	r2, [r3, #8]
 8009316:	693b      	ldr	r3, [r7, #16]
 8009318:	68db      	ldr	r3, [r3, #12]
 800931a:	1ad2      	subs	r2, r2, r3
 800931c:	693b      	ldr	r3, [r7, #16]
 800931e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009320:	693b      	ldr	r3, [r7, #16]
 8009322:	689b      	ldr	r3, [r3, #8]
 8009324:	461a      	mov	r2, r3
 8009326:	6879      	ldr	r1, [r7, #4]
 8009328:	68f8      	ldr	r0, [r7, #12]
 800932a:	f001 f8ac 	bl	800a486 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800932e:	2300      	movs	r3, #0
 8009330:	2200      	movs	r2, #0
 8009332:	2100      	movs	r1, #0
 8009334:	68f8      	ldr	r0, [r7, #12]
 8009336:	f004 ff23 	bl	800e180 <USBD_LL_PrepareReceive>
 800933a:	e03f      	b.n	80093bc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800933c:	693b      	ldr	r3, [r7, #16]
 800933e:	68da      	ldr	r2, [r3, #12]
 8009340:	693b      	ldr	r3, [r7, #16]
 8009342:	689b      	ldr	r3, [r3, #8]
 8009344:	429a      	cmp	r2, r3
 8009346:	d11c      	bne.n	8009382 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009348:	693b      	ldr	r3, [r7, #16]
 800934a:	685a      	ldr	r2, [r3, #4]
 800934c:	693b      	ldr	r3, [r7, #16]
 800934e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009350:	429a      	cmp	r2, r3
 8009352:	d316      	bcc.n	8009382 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009354:	693b      	ldr	r3, [r7, #16]
 8009356:	685a      	ldr	r2, [r3, #4]
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800935e:	429a      	cmp	r2, r3
 8009360:	d20f      	bcs.n	8009382 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009362:	2200      	movs	r2, #0
 8009364:	2100      	movs	r1, #0
 8009366:	68f8      	ldr	r0, [r7, #12]
 8009368:	f001 f88d 	bl	800a486 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	2200      	movs	r2, #0
 8009370:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009374:	2300      	movs	r3, #0
 8009376:	2200      	movs	r2, #0
 8009378:	2100      	movs	r1, #0
 800937a:	68f8      	ldr	r0, [r7, #12]
 800937c:	f004 ff00 	bl	800e180 <USBD_LL_PrepareReceive>
 8009380:	e01c      	b.n	80093bc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009388:	b2db      	uxtb	r3, r3
 800938a:	2b03      	cmp	r3, #3
 800938c:	d10f      	bne.n	80093ae <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009394:	68db      	ldr	r3, [r3, #12]
 8009396:	2b00      	cmp	r3, #0
 8009398:	d009      	beq.n	80093ae <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	2200      	movs	r2, #0
 800939e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093a8:	68db      	ldr	r3, [r3, #12]
 80093aa:	68f8      	ldr	r0, [r7, #12]
 80093ac:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80093ae:	2180      	movs	r1, #128	; 0x80
 80093b0:	68f8      	ldr	r0, [r7, #12]
 80093b2:	f004 fe3b 	bl	800e02c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80093b6:	68f8      	ldr	r0, [r7, #12]
 80093b8:	f001 f8b7 	bl	800a52a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d03a      	beq.n	800943c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80093c6:	68f8      	ldr	r0, [r7, #12]
 80093c8:	f7ff fe42 	bl	8009050 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	2200      	movs	r2, #0
 80093d0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80093d4:	e032      	b.n	800943c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80093d6:	7afb      	ldrb	r3, [r7, #11]
 80093d8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80093dc:	b2db      	uxtb	r3, r3
 80093de:	4619      	mov	r1, r3
 80093e0:	68f8      	ldr	r0, [r7, #12]
 80093e2:	f000 f97f 	bl	80096e4 <USBD_CoreFindEP>
 80093e6:	4603      	mov	r3, r0
 80093e8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80093ea:	7dfb      	ldrb	r3, [r7, #23]
 80093ec:	2bff      	cmp	r3, #255	; 0xff
 80093ee:	d025      	beq.n	800943c <USBD_LL_DataInStage+0x15a>
 80093f0:	7dfb      	ldrb	r3, [r7, #23]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d122      	bne.n	800943c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093fc:	b2db      	uxtb	r3, r3
 80093fe:	2b03      	cmp	r3, #3
 8009400:	d11c      	bne.n	800943c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8009402:	7dfa      	ldrb	r2, [r7, #23]
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	32ae      	adds	r2, #174	; 0xae
 8009408:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800940c:	695b      	ldr	r3, [r3, #20]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d014      	beq.n	800943c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8009412:	7dfa      	ldrb	r2, [r7, #23]
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800941a:	7dfa      	ldrb	r2, [r7, #23]
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	32ae      	adds	r2, #174	; 0xae
 8009420:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009424:	695b      	ldr	r3, [r3, #20]
 8009426:	7afa      	ldrb	r2, [r7, #11]
 8009428:	4611      	mov	r1, r2
 800942a:	68f8      	ldr	r0, [r7, #12]
 800942c:	4798      	blx	r3
 800942e:	4603      	mov	r3, r0
 8009430:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8009432:	7dbb      	ldrb	r3, [r7, #22]
 8009434:	2b00      	cmp	r3, #0
 8009436:	d001      	beq.n	800943c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8009438:	7dbb      	ldrb	r3, [r7, #22]
 800943a:	e000      	b.n	800943e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800943c:	2300      	movs	r3, #0
}
 800943e:	4618      	mov	r0, r3
 8009440:	3718      	adds	r7, #24
 8009442:	46bd      	mov	sp, r7
 8009444:	bd80      	pop	{r7, pc}

08009446 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009446:	b580      	push	{r7, lr}
 8009448:	b084      	sub	sp, #16
 800944a:	af00      	add	r7, sp, #0
 800944c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800944e:	2300      	movs	r3, #0
 8009450:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	2201      	movs	r2, #1
 8009456:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	2200      	movs	r2, #0
 800945e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	2200      	movs	r2, #0
 8009466:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	2200      	movs	r2, #0
 800946c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	2200      	movs	r2, #0
 8009474:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800947e:	2b00      	cmp	r3, #0
 8009480:	d014      	beq.n	80094ac <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009488:	685b      	ldr	r3, [r3, #4]
 800948a:	2b00      	cmp	r3, #0
 800948c:	d00e      	beq.n	80094ac <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009494:	685b      	ldr	r3, [r3, #4]
 8009496:	687a      	ldr	r2, [r7, #4]
 8009498:	6852      	ldr	r2, [r2, #4]
 800949a:	b2d2      	uxtb	r2, r2
 800949c:	4611      	mov	r1, r2
 800949e:	6878      	ldr	r0, [r7, #4]
 80094a0:	4798      	blx	r3
 80094a2:	4603      	mov	r3, r0
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d001      	beq.n	80094ac <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80094a8:	2303      	movs	r3, #3
 80094aa:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80094ac:	2340      	movs	r3, #64	; 0x40
 80094ae:	2200      	movs	r2, #0
 80094b0:	2100      	movs	r1, #0
 80094b2:	6878      	ldr	r0, [r7, #4]
 80094b4:	f004 fd75 	bl	800dfa2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	2201      	movs	r2, #1
 80094bc:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	2240      	movs	r2, #64	; 0x40
 80094c4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80094c8:	2340      	movs	r3, #64	; 0x40
 80094ca:	2200      	movs	r2, #0
 80094cc:	2180      	movs	r1, #128	; 0x80
 80094ce:	6878      	ldr	r0, [r7, #4]
 80094d0:	f004 fd67 	bl	800dfa2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	2201      	movs	r2, #1
 80094d8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	2240      	movs	r2, #64	; 0x40
 80094de:	621a      	str	r2, [r3, #32]

  return ret;
 80094e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80094e2:	4618      	mov	r0, r3
 80094e4:	3710      	adds	r7, #16
 80094e6:	46bd      	mov	sp, r7
 80094e8:	bd80      	pop	{r7, pc}

080094ea <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80094ea:	b480      	push	{r7}
 80094ec:	b083      	sub	sp, #12
 80094ee:	af00      	add	r7, sp, #0
 80094f0:	6078      	str	r0, [r7, #4]
 80094f2:	460b      	mov	r3, r1
 80094f4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	78fa      	ldrb	r2, [r7, #3]
 80094fa:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80094fc:	2300      	movs	r3, #0
}
 80094fe:	4618      	mov	r0, r3
 8009500:	370c      	adds	r7, #12
 8009502:	46bd      	mov	sp, r7
 8009504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009508:	4770      	bx	lr

0800950a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800950a:	b480      	push	{r7}
 800950c:	b083      	sub	sp, #12
 800950e:	af00      	add	r7, sp, #0
 8009510:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009518:	b2da      	uxtb	r2, r3
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	2204      	movs	r2, #4
 8009524:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009528:	2300      	movs	r3, #0
}
 800952a:	4618      	mov	r0, r3
 800952c:	370c      	adds	r7, #12
 800952e:	46bd      	mov	sp, r7
 8009530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009534:	4770      	bx	lr

08009536 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009536:	b480      	push	{r7}
 8009538:	b083      	sub	sp, #12
 800953a:	af00      	add	r7, sp, #0
 800953c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009544:	b2db      	uxtb	r3, r3
 8009546:	2b04      	cmp	r3, #4
 8009548:	d106      	bne.n	8009558 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8009550:	b2da      	uxtb	r2, r3
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009558:	2300      	movs	r3, #0
}
 800955a:	4618      	mov	r0, r3
 800955c:	370c      	adds	r7, #12
 800955e:	46bd      	mov	sp, r7
 8009560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009564:	4770      	bx	lr

08009566 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009566:	b580      	push	{r7, lr}
 8009568:	b082      	sub	sp, #8
 800956a:	af00      	add	r7, sp, #0
 800956c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009574:	b2db      	uxtb	r3, r3
 8009576:	2b03      	cmp	r3, #3
 8009578:	d110      	bne.n	800959c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009580:	2b00      	cmp	r3, #0
 8009582:	d00b      	beq.n	800959c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800958a:	69db      	ldr	r3, [r3, #28]
 800958c:	2b00      	cmp	r3, #0
 800958e:	d005      	beq.n	800959c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009596:	69db      	ldr	r3, [r3, #28]
 8009598:	6878      	ldr	r0, [r7, #4]
 800959a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800959c:	2300      	movs	r3, #0
}
 800959e:	4618      	mov	r0, r3
 80095a0:	3708      	adds	r7, #8
 80095a2:	46bd      	mov	sp, r7
 80095a4:	bd80      	pop	{r7, pc}

080095a6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80095a6:	b580      	push	{r7, lr}
 80095a8:	b082      	sub	sp, #8
 80095aa:	af00      	add	r7, sp, #0
 80095ac:	6078      	str	r0, [r7, #4]
 80095ae:	460b      	mov	r3, r1
 80095b0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	32ae      	adds	r2, #174	; 0xae
 80095bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d101      	bne.n	80095c8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80095c4:	2303      	movs	r3, #3
 80095c6:	e01c      	b.n	8009602 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095ce:	b2db      	uxtb	r3, r3
 80095d0:	2b03      	cmp	r3, #3
 80095d2:	d115      	bne.n	8009600 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	32ae      	adds	r2, #174	; 0xae
 80095de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095e2:	6a1b      	ldr	r3, [r3, #32]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d00b      	beq.n	8009600 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	32ae      	adds	r2, #174	; 0xae
 80095f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095f6:	6a1b      	ldr	r3, [r3, #32]
 80095f8:	78fa      	ldrb	r2, [r7, #3]
 80095fa:	4611      	mov	r1, r2
 80095fc:	6878      	ldr	r0, [r7, #4]
 80095fe:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009600:	2300      	movs	r3, #0
}
 8009602:	4618      	mov	r0, r3
 8009604:	3708      	adds	r7, #8
 8009606:	46bd      	mov	sp, r7
 8009608:	bd80      	pop	{r7, pc}

0800960a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800960a:	b580      	push	{r7, lr}
 800960c:	b082      	sub	sp, #8
 800960e:	af00      	add	r7, sp, #0
 8009610:	6078      	str	r0, [r7, #4]
 8009612:	460b      	mov	r3, r1
 8009614:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	32ae      	adds	r2, #174	; 0xae
 8009620:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009624:	2b00      	cmp	r3, #0
 8009626:	d101      	bne.n	800962c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8009628:	2303      	movs	r3, #3
 800962a:	e01c      	b.n	8009666 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009632:	b2db      	uxtb	r3, r3
 8009634:	2b03      	cmp	r3, #3
 8009636:	d115      	bne.n	8009664 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	32ae      	adds	r2, #174	; 0xae
 8009642:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009648:	2b00      	cmp	r3, #0
 800964a:	d00b      	beq.n	8009664 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	32ae      	adds	r2, #174	; 0xae
 8009656:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800965a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800965c:	78fa      	ldrb	r2, [r7, #3]
 800965e:	4611      	mov	r1, r2
 8009660:	6878      	ldr	r0, [r7, #4]
 8009662:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009664:	2300      	movs	r3, #0
}
 8009666:	4618      	mov	r0, r3
 8009668:	3708      	adds	r7, #8
 800966a:	46bd      	mov	sp, r7
 800966c:	bd80      	pop	{r7, pc}

0800966e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800966e:	b480      	push	{r7}
 8009670:	b083      	sub	sp, #12
 8009672:	af00      	add	r7, sp, #0
 8009674:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009676:	2300      	movs	r3, #0
}
 8009678:	4618      	mov	r0, r3
 800967a:	370c      	adds	r7, #12
 800967c:	46bd      	mov	sp, r7
 800967e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009682:	4770      	bx	lr

08009684 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009684:	b580      	push	{r7, lr}
 8009686:	b084      	sub	sp, #16
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800968c:	2300      	movs	r3, #0
 800968e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	2201      	movs	r2, #1
 8009694:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d00e      	beq.n	80096c0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096a8:	685b      	ldr	r3, [r3, #4]
 80096aa:	687a      	ldr	r2, [r7, #4]
 80096ac:	6852      	ldr	r2, [r2, #4]
 80096ae:	b2d2      	uxtb	r2, r2
 80096b0:	4611      	mov	r1, r2
 80096b2:	6878      	ldr	r0, [r7, #4]
 80096b4:	4798      	blx	r3
 80096b6:	4603      	mov	r3, r0
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d001      	beq.n	80096c0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80096bc:	2303      	movs	r3, #3
 80096be:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80096c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80096c2:	4618      	mov	r0, r3
 80096c4:	3710      	adds	r7, #16
 80096c6:	46bd      	mov	sp, r7
 80096c8:	bd80      	pop	{r7, pc}

080096ca <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80096ca:	b480      	push	{r7}
 80096cc:	b083      	sub	sp, #12
 80096ce:	af00      	add	r7, sp, #0
 80096d0:	6078      	str	r0, [r7, #4]
 80096d2:	460b      	mov	r3, r1
 80096d4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80096d6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80096d8:	4618      	mov	r0, r3
 80096da:	370c      	adds	r7, #12
 80096dc:	46bd      	mov	sp, r7
 80096de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e2:	4770      	bx	lr

080096e4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80096e4:	b480      	push	{r7}
 80096e6:	b083      	sub	sp, #12
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
 80096ec:	460b      	mov	r3, r1
 80096ee:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80096f0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80096f2:	4618      	mov	r0, r3
 80096f4:	370c      	adds	r7, #12
 80096f6:	46bd      	mov	sp, r7
 80096f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fc:	4770      	bx	lr

080096fe <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80096fe:	b580      	push	{r7, lr}
 8009700:	b086      	sub	sp, #24
 8009702:	af00      	add	r7, sp, #0
 8009704:	6078      	str	r0, [r7, #4]
 8009706:	460b      	mov	r3, r1
 8009708:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8009712:	2300      	movs	r3, #0
 8009714:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	885b      	ldrh	r3, [r3, #2]
 800971a:	b29a      	uxth	r2, r3
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	781b      	ldrb	r3, [r3, #0]
 8009720:	b29b      	uxth	r3, r3
 8009722:	429a      	cmp	r2, r3
 8009724:	d920      	bls.n	8009768 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	781b      	ldrb	r3, [r3, #0]
 800972a:	b29b      	uxth	r3, r3
 800972c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800972e:	e013      	b.n	8009758 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8009730:	f107 030a 	add.w	r3, r7, #10
 8009734:	4619      	mov	r1, r3
 8009736:	6978      	ldr	r0, [r7, #20]
 8009738:	f000 f81b 	bl	8009772 <USBD_GetNextDesc>
 800973c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800973e:	697b      	ldr	r3, [r7, #20]
 8009740:	785b      	ldrb	r3, [r3, #1]
 8009742:	2b05      	cmp	r3, #5
 8009744:	d108      	bne.n	8009758 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8009746:	697b      	ldr	r3, [r7, #20]
 8009748:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800974a:	693b      	ldr	r3, [r7, #16]
 800974c:	789b      	ldrb	r3, [r3, #2]
 800974e:	78fa      	ldrb	r2, [r7, #3]
 8009750:	429a      	cmp	r2, r3
 8009752:	d008      	beq.n	8009766 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8009754:	2300      	movs	r3, #0
 8009756:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	885b      	ldrh	r3, [r3, #2]
 800975c:	b29a      	uxth	r2, r3
 800975e:	897b      	ldrh	r3, [r7, #10]
 8009760:	429a      	cmp	r2, r3
 8009762:	d8e5      	bhi.n	8009730 <USBD_GetEpDesc+0x32>
 8009764:	e000      	b.n	8009768 <USBD_GetEpDesc+0x6a>
          break;
 8009766:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8009768:	693b      	ldr	r3, [r7, #16]
}
 800976a:	4618      	mov	r0, r3
 800976c:	3718      	adds	r7, #24
 800976e:	46bd      	mov	sp, r7
 8009770:	bd80      	pop	{r7, pc}

08009772 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009772:	b480      	push	{r7}
 8009774:	b085      	sub	sp, #20
 8009776:	af00      	add	r7, sp, #0
 8009778:	6078      	str	r0, [r7, #4]
 800977a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8009780:	683b      	ldr	r3, [r7, #0]
 8009782:	881a      	ldrh	r2, [r3, #0]
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	781b      	ldrb	r3, [r3, #0]
 8009788:	b29b      	uxth	r3, r3
 800978a:	4413      	add	r3, r2
 800978c:	b29a      	uxth	r2, r3
 800978e:	683b      	ldr	r3, [r7, #0]
 8009790:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	781b      	ldrb	r3, [r3, #0]
 8009796:	461a      	mov	r2, r3
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	4413      	add	r3, r2
 800979c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800979e:	68fb      	ldr	r3, [r7, #12]
}
 80097a0:	4618      	mov	r0, r3
 80097a2:	3714      	adds	r7, #20
 80097a4:	46bd      	mov	sp, r7
 80097a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097aa:	4770      	bx	lr

080097ac <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80097ac:	b480      	push	{r7}
 80097ae:	b087      	sub	sp, #28
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80097b8:	697b      	ldr	r3, [r7, #20]
 80097ba:	781b      	ldrb	r3, [r3, #0]
 80097bc:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80097be:	697b      	ldr	r3, [r7, #20]
 80097c0:	3301      	adds	r3, #1
 80097c2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80097c4:	697b      	ldr	r3, [r7, #20]
 80097c6:	781b      	ldrb	r3, [r3, #0]
 80097c8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80097ca:	8a3b      	ldrh	r3, [r7, #16]
 80097cc:	021b      	lsls	r3, r3, #8
 80097ce:	b21a      	sxth	r2, r3
 80097d0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80097d4:	4313      	orrs	r3, r2
 80097d6:	b21b      	sxth	r3, r3
 80097d8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80097da:	89fb      	ldrh	r3, [r7, #14]
}
 80097dc:	4618      	mov	r0, r3
 80097de:	371c      	adds	r7, #28
 80097e0:	46bd      	mov	sp, r7
 80097e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e6:	4770      	bx	lr

080097e8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b084      	sub	sp, #16
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
 80097f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80097f2:	2300      	movs	r3, #0
 80097f4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80097f6:	683b      	ldr	r3, [r7, #0]
 80097f8:	781b      	ldrb	r3, [r3, #0]
 80097fa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80097fe:	2b40      	cmp	r3, #64	; 0x40
 8009800:	d005      	beq.n	800980e <USBD_StdDevReq+0x26>
 8009802:	2b40      	cmp	r3, #64	; 0x40
 8009804:	d857      	bhi.n	80098b6 <USBD_StdDevReq+0xce>
 8009806:	2b00      	cmp	r3, #0
 8009808:	d00f      	beq.n	800982a <USBD_StdDevReq+0x42>
 800980a:	2b20      	cmp	r3, #32
 800980c:	d153      	bne.n	80098b6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	32ae      	adds	r2, #174	; 0xae
 8009818:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800981c:	689b      	ldr	r3, [r3, #8]
 800981e:	6839      	ldr	r1, [r7, #0]
 8009820:	6878      	ldr	r0, [r7, #4]
 8009822:	4798      	blx	r3
 8009824:	4603      	mov	r3, r0
 8009826:	73fb      	strb	r3, [r7, #15]
      break;
 8009828:	e04a      	b.n	80098c0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800982a:	683b      	ldr	r3, [r7, #0]
 800982c:	785b      	ldrb	r3, [r3, #1]
 800982e:	2b09      	cmp	r3, #9
 8009830:	d83b      	bhi.n	80098aa <USBD_StdDevReq+0xc2>
 8009832:	a201      	add	r2, pc, #4	; (adr r2, 8009838 <USBD_StdDevReq+0x50>)
 8009834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009838:	0800988d 	.word	0x0800988d
 800983c:	080098a1 	.word	0x080098a1
 8009840:	080098ab 	.word	0x080098ab
 8009844:	08009897 	.word	0x08009897
 8009848:	080098ab 	.word	0x080098ab
 800984c:	0800986b 	.word	0x0800986b
 8009850:	08009861 	.word	0x08009861
 8009854:	080098ab 	.word	0x080098ab
 8009858:	08009883 	.word	0x08009883
 800985c:	08009875 	.word	0x08009875
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009860:	6839      	ldr	r1, [r7, #0]
 8009862:	6878      	ldr	r0, [r7, #4]
 8009864:	f000 fa3c 	bl	8009ce0 <USBD_GetDescriptor>
          break;
 8009868:	e024      	b.n	80098b4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800986a:	6839      	ldr	r1, [r7, #0]
 800986c:	6878      	ldr	r0, [r7, #4]
 800986e:	f000 fba1 	bl	8009fb4 <USBD_SetAddress>
          break;
 8009872:	e01f      	b.n	80098b4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009874:	6839      	ldr	r1, [r7, #0]
 8009876:	6878      	ldr	r0, [r7, #4]
 8009878:	f000 fbe0 	bl	800a03c <USBD_SetConfig>
 800987c:	4603      	mov	r3, r0
 800987e:	73fb      	strb	r3, [r7, #15]
          break;
 8009880:	e018      	b.n	80098b4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009882:	6839      	ldr	r1, [r7, #0]
 8009884:	6878      	ldr	r0, [r7, #4]
 8009886:	f000 fc83 	bl	800a190 <USBD_GetConfig>
          break;
 800988a:	e013      	b.n	80098b4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800988c:	6839      	ldr	r1, [r7, #0]
 800988e:	6878      	ldr	r0, [r7, #4]
 8009890:	f000 fcb4 	bl	800a1fc <USBD_GetStatus>
          break;
 8009894:	e00e      	b.n	80098b4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009896:	6839      	ldr	r1, [r7, #0]
 8009898:	6878      	ldr	r0, [r7, #4]
 800989a:	f000 fce3 	bl	800a264 <USBD_SetFeature>
          break;
 800989e:	e009      	b.n	80098b4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80098a0:	6839      	ldr	r1, [r7, #0]
 80098a2:	6878      	ldr	r0, [r7, #4]
 80098a4:	f000 fd07 	bl	800a2b6 <USBD_ClrFeature>
          break;
 80098a8:	e004      	b.n	80098b4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80098aa:	6839      	ldr	r1, [r7, #0]
 80098ac:	6878      	ldr	r0, [r7, #4]
 80098ae:	f000 fd5e 	bl	800a36e <USBD_CtlError>
          break;
 80098b2:	bf00      	nop
      }
      break;
 80098b4:	e004      	b.n	80098c0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80098b6:	6839      	ldr	r1, [r7, #0]
 80098b8:	6878      	ldr	r0, [r7, #4]
 80098ba:	f000 fd58 	bl	800a36e <USBD_CtlError>
      break;
 80098be:	bf00      	nop
  }

  return ret;
 80098c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80098c2:	4618      	mov	r0, r3
 80098c4:	3710      	adds	r7, #16
 80098c6:	46bd      	mov	sp, r7
 80098c8:	bd80      	pop	{r7, pc}
 80098ca:	bf00      	nop

080098cc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80098cc:	b580      	push	{r7, lr}
 80098ce:	b084      	sub	sp, #16
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
 80098d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80098d6:	2300      	movs	r3, #0
 80098d8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80098da:	683b      	ldr	r3, [r7, #0]
 80098dc:	781b      	ldrb	r3, [r3, #0]
 80098de:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80098e2:	2b40      	cmp	r3, #64	; 0x40
 80098e4:	d005      	beq.n	80098f2 <USBD_StdItfReq+0x26>
 80098e6:	2b40      	cmp	r3, #64	; 0x40
 80098e8:	d852      	bhi.n	8009990 <USBD_StdItfReq+0xc4>
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d001      	beq.n	80098f2 <USBD_StdItfReq+0x26>
 80098ee:	2b20      	cmp	r3, #32
 80098f0:	d14e      	bne.n	8009990 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80098f8:	b2db      	uxtb	r3, r3
 80098fa:	3b01      	subs	r3, #1
 80098fc:	2b02      	cmp	r3, #2
 80098fe:	d840      	bhi.n	8009982 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009900:	683b      	ldr	r3, [r7, #0]
 8009902:	889b      	ldrh	r3, [r3, #4]
 8009904:	b2db      	uxtb	r3, r3
 8009906:	2b01      	cmp	r3, #1
 8009908:	d836      	bhi.n	8009978 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800990a:	683b      	ldr	r3, [r7, #0]
 800990c:	889b      	ldrh	r3, [r3, #4]
 800990e:	b2db      	uxtb	r3, r3
 8009910:	4619      	mov	r1, r3
 8009912:	6878      	ldr	r0, [r7, #4]
 8009914:	f7ff fed9 	bl	80096ca <USBD_CoreFindIF>
 8009918:	4603      	mov	r3, r0
 800991a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800991c:	7bbb      	ldrb	r3, [r7, #14]
 800991e:	2bff      	cmp	r3, #255	; 0xff
 8009920:	d01d      	beq.n	800995e <USBD_StdItfReq+0x92>
 8009922:	7bbb      	ldrb	r3, [r7, #14]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d11a      	bne.n	800995e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009928:	7bba      	ldrb	r2, [r7, #14]
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	32ae      	adds	r2, #174	; 0xae
 800992e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009932:	689b      	ldr	r3, [r3, #8]
 8009934:	2b00      	cmp	r3, #0
 8009936:	d00f      	beq.n	8009958 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009938:	7bba      	ldrb	r2, [r7, #14]
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009940:	7bba      	ldrb	r2, [r7, #14]
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	32ae      	adds	r2, #174	; 0xae
 8009946:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800994a:	689b      	ldr	r3, [r3, #8]
 800994c:	6839      	ldr	r1, [r7, #0]
 800994e:	6878      	ldr	r0, [r7, #4]
 8009950:	4798      	blx	r3
 8009952:	4603      	mov	r3, r0
 8009954:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009956:	e004      	b.n	8009962 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009958:	2303      	movs	r3, #3
 800995a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800995c:	e001      	b.n	8009962 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800995e:	2303      	movs	r3, #3
 8009960:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009962:	683b      	ldr	r3, [r7, #0]
 8009964:	88db      	ldrh	r3, [r3, #6]
 8009966:	2b00      	cmp	r3, #0
 8009968:	d110      	bne.n	800998c <USBD_StdItfReq+0xc0>
 800996a:	7bfb      	ldrb	r3, [r7, #15]
 800996c:	2b00      	cmp	r3, #0
 800996e:	d10d      	bne.n	800998c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009970:	6878      	ldr	r0, [r7, #4]
 8009972:	f000 fdc7 	bl	800a504 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009976:	e009      	b.n	800998c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009978:	6839      	ldr	r1, [r7, #0]
 800997a:	6878      	ldr	r0, [r7, #4]
 800997c:	f000 fcf7 	bl	800a36e <USBD_CtlError>
          break;
 8009980:	e004      	b.n	800998c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8009982:	6839      	ldr	r1, [r7, #0]
 8009984:	6878      	ldr	r0, [r7, #4]
 8009986:	f000 fcf2 	bl	800a36e <USBD_CtlError>
          break;
 800998a:	e000      	b.n	800998e <USBD_StdItfReq+0xc2>
          break;
 800998c:	bf00      	nop
      }
      break;
 800998e:	e004      	b.n	800999a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009990:	6839      	ldr	r1, [r7, #0]
 8009992:	6878      	ldr	r0, [r7, #4]
 8009994:	f000 fceb 	bl	800a36e <USBD_CtlError>
      break;
 8009998:	bf00      	nop
  }

  return ret;
 800999a:	7bfb      	ldrb	r3, [r7, #15]
}
 800999c:	4618      	mov	r0, r3
 800999e:	3710      	adds	r7, #16
 80099a0:	46bd      	mov	sp, r7
 80099a2:	bd80      	pop	{r7, pc}

080099a4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	b084      	sub	sp, #16
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	6078      	str	r0, [r7, #4]
 80099ac:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80099ae:	2300      	movs	r3, #0
 80099b0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80099b2:	683b      	ldr	r3, [r7, #0]
 80099b4:	889b      	ldrh	r3, [r3, #4]
 80099b6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80099b8:	683b      	ldr	r3, [r7, #0]
 80099ba:	781b      	ldrb	r3, [r3, #0]
 80099bc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80099c0:	2b40      	cmp	r3, #64	; 0x40
 80099c2:	d007      	beq.n	80099d4 <USBD_StdEPReq+0x30>
 80099c4:	2b40      	cmp	r3, #64	; 0x40
 80099c6:	f200 817f 	bhi.w	8009cc8 <USBD_StdEPReq+0x324>
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d02a      	beq.n	8009a24 <USBD_StdEPReq+0x80>
 80099ce:	2b20      	cmp	r3, #32
 80099d0:	f040 817a 	bne.w	8009cc8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80099d4:	7bbb      	ldrb	r3, [r7, #14]
 80099d6:	4619      	mov	r1, r3
 80099d8:	6878      	ldr	r0, [r7, #4]
 80099da:	f7ff fe83 	bl	80096e4 <USBD_CoreFindEP>
 80099de:	4603      	mov	r3, r0
 80099e0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80099e2:	7b7b      	ldrb	r3, [r7, #13]
 80099e4:	2bff      	cmp	r3, #255	; 0xff
 80099e6:	f000 8174 	beq.w	8009cd2 <USBD_StdEPReq+0x32e>
 80099ea:	7b7b      	ldrb	r3, [r7, #13]
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	f040 8170 	bne.w	8009cd2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80099f2:	7b7a      	ldrb	r2, [r7, #13]
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80099fa:	7b7a      	ldrb	r2, [r7, #13]
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	32ae      	adds	r2, #174	; 0xae
 8009a00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a04:	689b      	ldr	r3, [r3, #8]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	f000 8163 	beq.w	8009cd2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009a0c:	7b7a      	ldrb	r2, [r7, #13]
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	32ae      	adds	r2, #174	; 0xae
 8009a12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a16:	689b      	ldr	r3, [r3, #8]
 8009a18:	6839      	ldr	r1, [r7, #0]
 8009a1a:	6878      	ldr	r0, [r7, #4]
 8009a1c:	4798      	blx	r3
 8009a1e:	4603      	mov	r3, r0
 8009a20:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009a22:	e156      	b.n	8009cd2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009a24:	683b      	ldr	r3, [r7, #0]
 8009a26:	785b      	ldrb	r3, [r3, #1]
 8009a28:	2b03      	cmp	r3, #3
 8009a2a:	d008      	beq.n	8009a3e <USBD_StdEPReq+0x9a>
 8009a2c:	2b03      	cmp	r3, #3
 8009a2e:	f300 8145 	bgt.w	8009cbc <USBD_StdEPReq+0x318>
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	f000 809b 	beq.w	8009b6e <USBD_StdEPReq+0x1ca>
 8009a38:	2b01      	cmp	r3, #1
 8009a3a:	d03c      	beq.n	8009ab6 <USBD_StdEPReq+0x112>
 8009a3c:	e13e      	b.n	8009cbc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a44:	b2db      	uxtb	r3, r3
 8009a46:	2b02      	cmp	r3, #2
 8009a48:	d002      	beq.n	8009a50 <USBD_StdEPReq+0xac>
 8009a4a:	2b03      	cmp	r3, #3
 8009a4c:	d016      	beq.n	8009a7c <USBD_StdEPReq+0xd8>
 8009a4e:	e02c      	b.n	8009aaa <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009a50:	7bbb      	ldrb	r3, [r7, #14]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d00d      	beq.n	8009a72 <USBD_StdEPReq+0xce>
 8009a56:	7bbb      	ldrb	r3, [r7, #14]
 8009a58:	2b80      	cmp	r3, #128	; 0x80
 8009a5a:	d00a      	beq.n	8009a72 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009a5c:	7bbb      	ldrb	r3, [r7, #14]
 8009a5e:	4619      	mov	r1, r3
 8009a60:	6878      	ldr	r0, [r7, #4]
 8009a62:	f004 fae3 	bl	800e02c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009a66:	2180      	movs	r1, #128	; 0x80
 8009a68:	6878      	ldr	r0, [r7, #4]
 8009a6a:	f004 fadf 	bl	800e02c <USBD_LL_StallEP>
 8009a6e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009a70:	e020      	b.n	8009ab4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8009a72:	6839      	ldr	r1, [r7, #0]
 8009a74:	6878      	ldr	r0, [r7, #4]
 8009a76:	f000 fc7a 	bl	800a36e <USBD_CtlError>
              break;
 8009a7a:	e01b      	b.n	8009ab4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009a7c:	683b      	ldr	r3, [r7, #0]
 8009a7e:	885b      	ldrh	r3, [r3, #2]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d10e      	bne.n	8009aa2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009a84:	7bbb      	ldrb	r3, [r7, #14]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d00b      	beq.n	8009aa2 <USBD_StdEPReq+0xfe>
 8009a8a:	7bbb      	ldrb	r3, [r7, #14]
 8009a8c:	2b80      	cmp	r3, #128	; 0x80
 8009a8e:	d008      	beq.n	8009aa2 <USBD_StdEPReq+0xfe>
 8009a90:	683b      	ldr	r3, [r7, #0]
 8009a92:	88db      	ldrh	r3, [r3, #6]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d104      	bne.n	8009aa2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009a98:	7bbb      	ldrb	r3, [r7, #14]
 8009a9a:	4619      	mov	r1, r3
 8009a9c:	6878      	ldr	r0, [r7, #4]
 8009a9e:	f004 fac5 	bl	800e02c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009aa2:	6878      	ldr	r0, [r7, #4]
 8009aa4:	f000 fd2e 	bl	800a504 <USBD_CtlSendStatus>

              break;
 8009aa8:	e004      	b.n	8009ab4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009aaa:	6839      	ldr	r1, [r7, #0]
 8009aac:	6878      	ldr	r0, [r7, #4]
 8009aae:	f000 fc5e 	bl	800a36e <USBD_CtlError>
              break;
 8009ab2:	bf00      	nop
          }
          break;
 8009ab4:	e107      	b.n	8009cc6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009abc:	b2db      	uxtb	r3, r3
 8009abe:	2b02      	cmp	r3, #2
 8009ac0:	d002      	beq.n	8009ac8 <USBD_StdEPReq+0x124>
 8009ac2:	2b03      	cmp	r3, #3
 8009ac4:	d016      	beq.n	8009af4 <USBD_StdEPReq+0x150>
 8009ac6:	e04b      	b.n	8009b60 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009ac8:	7bbb      	ldrb	r3, [r7, #14]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d00d      	beq.n	8009aea <USBD_StdEPReq+0x146>
 8009ace:	7bbb      	ldrb	r3, [r7, #14]
 8009ad0:	2b80      	cmp	r3, #128	; 0x80
 8009ad2:	d00a      	beq.n	8009aea <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009ad4:	7bbb      	ldrb	r3, [r7, #14]
 8009ad6:	4619      	mov	r1, r3
 8009ad8:	6878      	ldr	r0, [r7, #4]
 8009ada:	f004 faa7 	bl	800e02c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009ade:	2180      	movs	r1, #128	; 0x80
 8009ae0:	6878      	ldr	r0, [r7, #4]
 8009ae2:	f004 faa3 	bl	800e02c <USBD_LL_StallEP>
 8009ae6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009ae8:	e040      	b.n	8009b6c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009aea:	6839      	ldr	r1, [r7, #0]
 8009aec:	6878      	ldr	r0, [r7, #4]
 8009aee:	f000 fc3e 	bl	800a36e <USBD_CtlError>
              break;
 8009af2:	e03b      	b.n	8009b6c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009af4:	683b      	ldr	r3, [r7, #0]
 8009af6:	885b      	ldrh	r3, [r3, #2]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d136      	bne.n	8009b6a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009afc:	7bbb      	ldrb	r3, [r7, #14]
 8009afe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d004      	beq.n	8009b10 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009b06:	7bbb      	ldrb	r3, [r7, #14]
 8009b08:	4619      	mov	r1, r3
 8009b0a:	6878      	ldr	r0, [r7, #4]
 8009b0c:	f004 faad 	bl	800e06a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009b10:	6878      	ldr	r0, [r7, #4]
 8009b12:	f000 fcf7 	bl	800a504 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009b16:	7bbb      	ldrb	r3, [r7, #14]
 8009b18:	4619      	mov	r1, r3
 8009b1a:	6878      	ldr	r0, [r7, #4]
 8009b1c:	f7ff fde2 	bl	80096e4 <USBD_CoreFindEP>
 8009b20:	4603      	mov	r3, r0
 8009b22:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009b24:	7b7b      	ldrb	r3, [r7, #13]
 8009b26:	2bff      	cmp	r3, #255	; 0xff
 8009b28:	d01f      	beq.n	8009b6a <USBD_StdEPReq+0x1c6>
 8009b2a:	7b7b      	ldrb	r3, [r7, #13]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d11c      	bne.n	8009b6a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009b30:	7b7a      	ldrb	r2, [r7, #13]
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009b38:	7b7a      	ldrb	r2, [r7, #13]
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	32ae      	adds	r2, #174	; 0xae
 8009b3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b42:	689b      	ldr	r3, [r3, #8]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d010      	beq.n	8009b6a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009b48:	7b7a      	ldrb	r2, [r7, #13]
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	32ae      	adds	r2, #174	; 0xae
 8009b4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b52:	689b      	ldr	r3, [r3, #8]
 8009b54:	6839      	ldr	r1, [r7, #0]
 8009b56:	6878      	ldr	r0, [r7, #4]
 8009b58:	4798      	blx	r3
 8009b5a:	4603      	mov	r3, r0
 8009b5c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009b5e:	e004      	b.n	8009b6a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009b60:	6839      	ldr	r1, [r7, #0]
 8009b62:	6878      	ldr	r0, [r7, #4]
 8009b64:	f000 fc03 	bl	800a36e <USBD_CtlError>
              break;
 8009b68:	e000      	b.n	8009b6c <USBD_StdEPReq+0x1c8>
              break;
 8009b6a:	bf00      	nop
          }
          break;
 8009b6c:	e0ab      	b.n	8009cc6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b74:	b2db      	uxtb	r3, r3
 8009b76:	2b02      	cmp	r3, #2
 8009b78:	d002      	beq.n	8009b80 <USBD_StdEPReq+0x1dc>
 8009b7a:	2b03      	cmp	r3, #3
 8009b7c:	d032      	beq.n	8009be4 <USBD_StdEPReq+0x240>
 8009b7e:	e097      	b.n	8009cb0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009b80:	7bbb      	ldrb	r3, [r7, #14]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d007      	beq.n	8009b96 <USBD_StdEPReq+0x1f2>
 8009b86:	7bbb      	ldrb	r3, [r7, #14]
 8009b88:	2b80      	cmp	r3, #128	; 0x80
 8009b8a:	d004      	beq.n	8009b96 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009b8c:	6839      	ldr	r1, [r7, #0]
 8009b8e:	6878      	ldr	r0, [r7, #4]
 8009b90:	f000 fbed 	bl	800a36e <USBD_CtlError>
                break;
 8009b94:	e091      	b.n	8009cba <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009b96:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	da0b      	bge.n	8009bb6 <USBD_StdEPReq+0x212>
 8009b9e:	7bbb      	ldrb	r3, [r7, #14]
 8009ba0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009ba4:	4613      	mov	r3, r2
 8009ba6:	009b      	lsls	r3, r3, #2
 8009ba8:	4413      	add	r3, r2
 8009baa:	009b      	lsls	r3, r3, #2
 8009bac:	3310      	adds	r3, #16
 8009bae:	687a      	ldr	r2, [r7, #4]
 8009bb0:	4413      	add	r3, r2
 8009bb2:	3304      	adds	r3, #4
 8009bb4:	e00b      	b.n	8009bce <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009bb6:	7bbb      	ldrb	r3, [r7, #14]
 8009bb8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009bbc:	4613      	mov	r3, r2
 8009bbe:	009b      	lsls	r3, r3, #2
 8009bc0:	4413      	add	r3, r2
 8009bc2:	009b      	lsls	r3, r3, #2
 8009bc4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009bc8:	687a      	ldr	r2, [r7, #4]
 8009bca:	4413      	add	r3, r2
 8009bcc:	3304      	adds	r3, #4
 8009bce:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009bd0:	68bb      	ldr	r3, [r7, #8]
 8009bd2:	2200      	movs	r2, #0
 8009bd4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009bd6:	68bb      	ldr	r3, [r7, #8]
 8009bd8:	2202      	movs	r2, #2
 8009bda:	4619      	mov	r1, r3
 8009bdc:	6878      	ldr	r0, [r7, #4]
 8009bde:	f000 fc37 	bl	800a450 <USBD_CtlSendData>
              break;
 8009be2:	e06a      	b.n	8009cba <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009be4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	da11      	bge.n	8009c10 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009bec:	7bbb      	ldrb	r3, [r7, #14]
 8009bee:	f003 020f 	and.w	r2, r3, #15
 8009bf2:	6879      	ldr	r1, [r7, #4]
 8009bf4:	4613      	mov	r3, r2
 8009bf6:	009b      	lsls	r3, r3, #2
 8009bf8:	4413      	add	r3, r2
 8009bfa:	009b      	lsls	r3, r3, #2
 8009bfc:	440b      	add	r3, r1
 8009bfe:	3324      	adds	r3, #36	; 0x24
 8009c00:	881b      	ldrh	r3, [r3, #0]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d117      	bne.n	8009c36 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009c06:	6839      	ldr	r1, [r7, #0]
 8009c08:	6878      	ldr	r0, [r7, #4]
 8009c0a:	f000 fbb0 	bl	800a36e <USBD_CtlError>
                  break;
 8009c0e:	e054      	b.n	8009cba <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009c10:	7bbb      	ldrb	r3, [r7, #14]
 8009c12:	f003 020f 	and.w	r2, r3, #15
 8009c16:	6879      	ldr	r1, [r7, #4]
 8009c18:	4613      	mov	r3, r2
 8009c1a:	009b      	lsls	r3, r3, #2
 8009c1c:	4413      	add	r3, r2
 8009c1e:	009b      	lsls	r3, r3, #2
 8009c20:	440b      	add	r3, r1
 8009c22:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009c26:	881b      	ldrh	r3, [r3, #0]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d104      	bne.n	8009c36 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009c2c:	6839      	ldr	r1, [r7, #0]
 8009c2e:	6878      	ldr	r0, [r7, #4]
 8009c30:	f000 fb9d 	bl	800a36e <USBD_CtlError>
                  break;
 8009c34:	e041      	b.n	8009cba <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009c36:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	da0b      	bge.n	8009c56 <USBD_StdEPReq+0x2b2>
 8009c3e:	7bbb      	ldrb	r3, [r7, #14]
 8009c40:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009c44:	4613      	mov	r3, r2
 8009c46:	009b      	lsls	r3, r3, #2
 8009c48:	4413      	add	r3, r2
 8009c4a:	009b      	lsls	r3, r3, #2
 8009c4c:	3310      	adds	r3, #16
 8009c4e:	687a      	ldr	r2, [r7, #4]
 8009c50:	4413      	add	r3, r2
 8009c52:	3304      	adds	r3, #4
 8009c54:	e00b      	b.n	8009c6e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009c56:	7bbb      	ldrb	r3, [r7, #14]
 8009c58:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009c5c:	4613      	mov	r3, r2
 8009c5e:	009b      	lsls	r3, r3, #2
 8009c60:	4413      	add	r3, r2
 8009c62:	009b      	lsls	r3, r3, #2
 8009c64:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009c68:	687a      	ldr	r2, [r7, #4]
 8009c6a:	4413      	add	r3, r2
 8009c6c:	3304      	adds	r3, #4
 8009c6e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009c70:	7bbb      	ldrb	r3, [r7, #14]
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d002      	beq.n	8009c7c <USBD_StdEPReq+0x2d8>
 8009c76:	7bbb      	ldrb	r3, [r7, #14]
 8009c78:	2b80      	cmp	r3, #128	; 0x80
 8009c7a:	d103      	bne.n	8009c84 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009c7c:	68bb      	ldr	r3, [r7, #8]
 8009c7e:	2200      	movs	r2, #0
 8009c80:	601a      	str	r2, [r3, #0]
 8009c82:	e00e      	b.n	8009ca2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009c84:	7bbb      	ldrb	r3, [r7, #14]
 8009c86:	4619      	mov	r1, r3
 8009c88:	6878      	ldr	r0, [r7, #4]
 8009c8a:	f004 fa0d 	bl	800e0a8 <USBD_LL_IsStallEP>
 8009c8e:	4603      	mov	r3, r0
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d003      	beq.n	8009c9c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009c94:	68bb      	ldr	r3, [r7, #8]
 8009c96:	2201      	movs	r2, #1
 8009c98:	601a      	str	r2, [r3, #0]
 8009c9a:	e002      	b.n	8009ca2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009c9c:	68bb      	ldr	r3, [r7, #8]
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009ca2:	68bb      	ldr	r3, [r7, #8]
 8009ca4:	2202      	movs	r2, #2
 8009ca6:	4619      	mov	r1, r3
 8009ca8:	6878      	ldr	r0, [r7, #4]
 8009caa:	f000 fbd1 	bl	800a450 <USBD_CtlSendData>
              break;
 8009cae:	e004      	b.n	8009cba <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009cb0:	6839      	ldr	r1, [r7, #0]
 8009cb2:	6878      	ldr	r0, [r7, #4]
 8009cb4:	f000 fb5b 	bl	800a36e <USBD_CtlError>
              break;
 8009cb8:	bf00      	nop
          }
          break;
 8009cba:	e004      	b.n	8009cc6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009cbc:	6839      	ldr	r1, [r7, #0]
 8009cbe:	6878      	ldr	r0, [r7, #4]
 8009cc0:	f000 fb55 	bl	800a36e <USBD_CtlError>
          break;
 8009cc4:	bf00      	nop
      }
      break;
 8009cc6:	e005      	b.n	8009cd4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009cc8:	6839      	ldr	r1, [r7, #0]
 8009cca:	6878      	ldr	r0, [r7, #4]
 8009ccc:	f000 fb4f 	bl	800a36e <USBD_CtlError>
      break;
 8009cd0:	e000      	b.n	8009cd4 <USBD_StdEPReq+0x330>
      break;
 8009cd2:	bf00      	nop
  }

  return ret;
 8009cd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	3710      	adds	r7, #16
 8009cda:	46bd      	mov	sp, r7
 8009cdc:	bd80      	pop	{r7, pc}
	...

08009ce0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ce0:	b580      	push	{r7, lr}
 8009ce2:	b084      	sub	sp, #16
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	6078      	str	r0, [r7, #4]
 8009ce8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009cea:	2300      	movs	r3, #0
 8009cec:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009cee:	2300      	movs	r3, #0
 8009cf0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009cf6:	683b      	ldr	r3, [r7, #0]
 8009cf8:	885b      	ldrh	r3, [r3, #2]
 8009cfa:	0a1b      	lsrs	r3, r3, #8
 8009cfc:	b29b      	uxth	r3, r3
 8009cfe:	3b01      	subs	r3, #1
 8009d00:	2b06      	cmp	r3, #6
 8009d02:	f200 8128 	bhi.w	8009f56 <USBD_GetDescriptor+0x276>
 8009d06:	a201      	add	r2, pc, #4	; (adr r2, 8009d0c <USBD_GetDescriptor+0x2c>)
 8009d08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d0c:	08009d29 	.word	0x08009d29
 8009d10:	08009d41 	.word	0x08009d41
 8009d14:	08009d81 	.word	0x08009d81
 8009d18:	08009f57 	.word	0x08009f57
 8009d1c:	08009f57 	.word	0x08009f57
 8009d20:	08009ef7 	.word	0x08009ef7
 8009d24:	08009f23 	.word	0x08009f23
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	687a      	ldr	r2, [r7, #4]
 8009d32:	7c12      	ldrb	r2, [r2, #16]
 8009d34:	f107 0108 	add.w	r1, r7, #8
 8009d38:	4610      	mov	r0, r2
 8009d3a:	4798      	blx	r3
 8009d3c:	60f8      	str	r0, [r7, #12]
      break;
 8009d3e:	e112      	b.n	8009f66 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	7c1b      	ldrb	r3, [r3, #16]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d10d      	bne.n	8009d64 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d50:	f107 0208 	add.w	r2, r7, #8
 8009d54:	4610      	mov	r0, r2
 8009d56:	4798      	blx	r3
 8009d58:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	3301      	adds	r3, #1
 8009d5e:	2202      	movs	r2, #2
 8009d60:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009d62:	e100      	b.n	8009f66 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d6c:	f107 0208 	add.w	r2, r7, #8
 8009d70:	4610      	mov	r0, r2
 8009d72:	4798      	blx	r3
 8009d74:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	3301      	adds	r3, #1
 8009d7a:	2202      	movs	r2, #2
 8009d7c:	701a      	strb	r2, [r3, #0]
      break;
 8009d7e:	e0f2      	b.n	8009f66 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009d80:	683b      	ldr	r3, [r7, #0]
 8009d82:	885b      	ldrh	r3, [r3, #2]
 8009d84:	b2db      	uxtb	r3, r3
 8009d86:	2b05      	cmp	r3, #5
 8009d88:	f200 80ac 	bhi.w	8009ee4 <USBD_GetDescriptor+0x204>
 8009d8c:	a201      	add	r2, pc, #4	; (adr r2, 8009d94 <USBD_GetDescriptor+0xb4>)
 8009d8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d92:	bf00      	nop
 8009d94:	08009dad 	.word	0x08009dad
 8009d98:	08009de1 	.word	0x08009de1
 8009d9c:	08009e15 	.word	0x08009e15
 8009da0:	08009e49 	.word	0x08009e49
 8009da4:	08009e7d 	.word	0x08009e7d
 8009da8:	08009eb1 	.word	0x08009eb1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009db2:	685b      	ldr	r3, [r3, #4]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d00b      	beq.n	8009dd0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009dbe:	685b      	ldr	r3, [r3, #4]
 8009dc0:	687a      	ldr	r2, [r7, #4]
 8009dc2:	7c12      	ldrb	r2, [r2, #16]
 8009dc4:	f107 0108 	add.w	r1, r7, #8
 8009dc8:	4610      	mov	r0, r2
 8009dca:	4798      	blx	r3
 8009dcc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009dce:	e091      	b.n	8009ef4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009dd0:	6839      	ldr	r1, [r7, #0]
 8009dd2:	6878      	ldr	r0, [r7, #4]
 8009dd4:	f000 facb 	bl	800a36e <USBD_CtlError>
            err++;
 8009dd8:	7afb      	ldrb	r3, [r7, #11]
 8009dda:	3301      	adds	r3, #1
 8009ddc:	72fb      	strb	r3, [r7, #11]
          break;
 8009dde:	e089      	b.n	8009ef4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009de6:	689b      	ldr	r3, [r3, #8]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d00b      	beq.n	8009e04 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009df2:	689b      	ldr	r3, [r3, #8]
 8009df4:	687a      	ldr	r2, [r7, #4]
 8009df6:	7c12      	ldrb	r2, [r2, #16]
 8009df8:	f107 0108 	add.w	r1, r7, #8
 8009dfc:	4610      	mov	r0, r2
 8009dfe:	4798      	blx	r3
 8009e00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e02:	e077      	b.n	8009ef4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009e04:	6839      	ldr	r1, [r7, #0]
 8009e06:	6878      	ldr	r0, [r7, #4]
 8009e08:	f000 fab1 	bl	800a36e <USBD_CtlError>
            err++;
 8009e0c:	7afb      	ldrb	r3, [r7, #11]
 8009e0e:	3301      	adds	r3, #1
 8009e10:	72fb      	strb	r3, [r7, #11]
          break;
 8009e12:	e06f      	b.n	8009ef4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e1a:	68db      	ldr	r3, [r3, #12]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d00b      	beq.n	8009e38 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e26:	68db      	ldr	r3, [r3, #12]
 8009e28:	687a      	ldr	r2, [r7, #4]
 8009e2a:	7c12      	ldrb	r2, [r2, #16]
 8009e2c:	f107 0108 	add.w	r1, r7, #8
 8009e30:	4610      	mov	r0, r2
 8009e32:	4798      	blx	r3
 8009e34:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e36:	e05d      	b.n	8009ef4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009e38:	6839      	ldr	r1, [r7, #0]
 8009e3a:	6878      	ldr	r0, [r7, #4]
 8009e3c:	f000 fa97 	bl	800a36e <USBD_CtlError>
            err++;
 8009e40:	7afb      	ldrb	r3, [r7, #11]
 8009e42:	3301      	adds	r3, #1
 8009e44:	72fb      	strb	r3, [r7, #11]
          break;
 8009e46:	e055      	b.n	8009ef4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e4e:	691b      	ldr	r3, [r3, #16]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d00b      	beq.n	8009e6c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e5a:	691b      	ldr	r3, [r3, #16]
 8009e5c:	687a      	ldr	r2, [r7, #4]
 8009e5e:	7c12      	ldrb	r2, [r2, #16]
 8009e60:	f107 0108 	add.w	r1, r7, #8
 8009e64:	4610      	mov	r0, r2
 8009e66:	4798      	blx	r3
 8009e68:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e6a:	e043      	b.n	8009ef4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009e6c:	6839      	ldr	r1, [r7, #0]
 8009e6e:	6878      	ldr	r0, [r7, #4]
 8009e70:	f000 fa7d 	bl	800a36e <USBD_CtlError>
            err++;
 8009e74:	7afb      	ldrb	r3, [r7, #11]
 8009e76:	3301      	adds	r3, #1
 8009e78:	72fb      	strb	r3, [r7, #11]
          break;
 8009e7a:	e03b      	b.n	8009ef4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e82:	695b      	ldr	r3, [r3, #20]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d00b      	beq.n	8009ea0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e8e:	695b      	ldr	r3, [r3, #20]
 8009e90:	687a      	ldr	r2, [r7, #4]
 8009e92:	7c12      	ldrb	r2, [r2, #16]
 8009e94:	f107 0108 	add.w	r1, r7, #8
 8009e98:	4610      	mov	r0, r2
 8009e9a:	4798      	blx	r3
 8009e9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e9e:	e029      	b.n	8009ef4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009ea0:	6839      	ldr	r1, [r7, #0]
 8009ea2:	6878      	ldr	r0, [r7, #4]
 8009ea4:	f000 fa63 	bl	800a36e <USBD_CtlError>
            err++;
 8009ea8:	7afb      	ldrb	r3, [r7, #11]
 8009eaa:	3301      	adds	r3, #1
 8009eac:	72fb      	strb	r3, [r7, #11]
          break;
 8009eae:	e021      	b.n	8009ef4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009eb6:	699b      	ldr	r3, [r3, #24]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d00b      	beq.n	8009ed4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ec2:	699b      	ldr	r3, [r3, #24]
 8009ec4:	687a      	ldr	r2, [r7, #4]
 8009ec6:	7c12      	ldrb	r2, [r2, #16]
 8009ec8:	f107 0108 	add.w	r1, r7, #8
 8009ecc:	4610      	mov	r0, r2
 8009ece:	4798      	blx	r3
 8009ed0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009ed2:	e00f      	b.n	8009ef4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009ed4:	6839      	ldr	r1, [r7, #0]
 8009ed6:	6878      	ldr	r0, [r7, #4]
 8009ed8:	f000 fa49 	bl	800a36e <USBD_CtlError>
            err++;
 8009edc:	7afb      	ldrb	r3, [r7, #11]
 8009ede:	3301      	adds	r3, #1
 8009ee0:	72fb      	strb	r3, [r7, #11]
          break;
 8009ee2:	e007      	b.n	8009ef4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009ee4:	6839      	ldr	r1, [r7, #0]
 8009ee6:	6878      	ldr	r0, [r7, #4]
 8009ee8:	f000 fa41 	bl	800a36e <USBD_CtlError>
          err++;
 8009eec:	7afb      	ldrb	r3, [r7, #11]
 8009eee:	3301      	adds	r3, #1
 8009ef0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009ef2:	bf00      	nop
      }
      break;
 8009ef4:	e037      	b.n	8009f66 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	7c1b      	ldrb	r3, [r3, #16]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d109      	bne.n	8009f12 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f06:	f107 0208 	add.w	r2, r7, #8
 8009f0a:	4610      	mov	r0, r2
 8009f0c:	4798      	blx	r3
 8009f0e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009f10:	e029      	b.n	8009f66 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009f12:	6839      	ldr	r1, [r7, #0]
 8009f14:	6878      	ldr	r0, [r7, #4]
 8009f16:	f000 fa2a 	bl	800a36e <USBD_CtlError>
        err++;
 8009f1a:	7afb      	ldrb	r3, [r7, #11]
 8009f1c:	3301      	adds	r3, #1
 8009f1e:	72fb      	strb	r3, [r7, #11]
      break;
 8009f20:	e021      	b.n	8009f66 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	7c1b      	ldrb	r3, [r3, #16]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d10d      	bne.n	8009f46 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f32:	f107 0208 	add.w	r2, r7, #8
 8009f36:	4610      	mov	r0, r2
 8009f38:	4798      	blx	r3
 8009f3a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	3301      	adds	r3, #1
 8009f40:	2207      	movs	r2, #7
 8009f42:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009f44:	e00f      	b.n	8009f66 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009f46:	6839      	ldr	r1, [r7, #0]
 8009f48:	6878      	ldr	r0, [r7, #4]
 8009f4a:	f000 fa10 	bl	800a36e <USBD_CtlError>
        err++;
 8009f4e:	7afb      	ldrb	r3, [r7, #11]
 8009f50:	3301      	adds	r3, #1
 8009f52:	72fb      	strb	r3, [r7, #11]
      break;
 8009f54:	e007      	b.n	8009f66 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009f56:	6839      	ldr	r1, [r7, #0]
 8009f58:	6878      	ldr	r0, [r7, #4]
 8009f5a:	f000 fa08 	bl	800a36e <USBD_CtlError>
      err++;
 8009f5e:	7afb      	ldrb	r3, [r7, #11]
 8009f60:	3301      	adds	r3, #1
 8009f62:	72fb      	strb	r3, [r7, #11]
      break;
 8009f64:	bf00      	nop
  }

  if (err != 0U)
 8009f66:	7afb      	ldrb	r3, [r7, #11]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d11e      	bne.n	8009faa <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009f6c:	683b      	ldr	r3, [r7, #0]
 8009f6e:	88db      	ldrh	r3, [r3, #6]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d016      	beq.n	8009fa2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009f74:	893b      	ldrh	r3, [r7, #8]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d00e      	beq.n	8009f98 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8009f7a:	683b      	ldr	r3, [r7, #0]
 8009f7c:	88da      	ldrh	r2, [r3, #6]
 8009f7e:	893b      	ldrh	r3, [r7, #8]
 8009f80:	4293      	cmp	r3, r2
 8009f82:	bf28      	it	cs
 8009f84:	4613      	movcs	r3, r2
 8009f86:	b29b      	uxth	r3, r3
 8009f88:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009f8a:	893b      	ldrh	r3, [r7, #8]
 8009f8c:	461a      	mov	r2, r3
 8009f8e:	68f9      	ldr	r1, [r7, #12]
 8009f90:	6878      	ldr	r0, [r7, #4]
 8009f92:	f000 fa5d 	bl	800a450 <USBD_CtlSendData>
 8009f96:	e009      	b.n	8009fac <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009f98:	6839      	ldr	r1, [r7, #0]
 8009f9a:	6878      	ldr	r0, [r7, #4]
 8009f9c:	f000 f9e7 	bl	800a36e <USBD_CtlError>
 8009fa0:	e004      	b.n	8009fac <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009fa2:	6878      	ldr	r0, [r7, #4]
 8009fa4:	f000 faae 	bl	800a504 <USBD_CtlSendStatus>
 8009fa8:	e000      	b.n	8009fac <USBD_GetDescriptor+0x2cc>
    return;
 8009faa:	bf00      	nop
  }
}
 8009fac:	3710      	adds	r7, #16
 8009fae:	46bd      	mov	sp, r7
 8009fb0:	bd80      	pop	{r7, pc}
 8009fb2:	bf00      	nop

08009fb4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	b084      	sub	sp, #16
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
 8009fbc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009fbe:	683b      	ldr	r3, [r7, #0]
 8009fc0:	889b      	ldrh	r3, [r3, #4]
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d131      	bne.n	800a02a <USBD_SetAddress+0x76>
 8009fc6:	683b      	ldr	r3, [r7, #0]
 8009fc8:	88db      	ldrh	r3, [r3, #6]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d12d      	bne.n	800a02a <USBD_SetAddress+0x76>
 8009fce:	683b      	ldr	r3, [r7, #0]
 8009fd0:	885b      	ldrh	r3, [r3, #2]
 8009fd2:	2b7f      	cmp	r3, #127	; 0x7f
 8009fd4:	d829      	bhi.n	800a02a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009fd6:	683b      	ldr	r3, [r7, #0]
 8009fd8:	885b      	ldrh	r3, [r3, #2]
 8009fda:	b2db      	uxtb	r3, r3
 8009fdc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009fe0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009fe8:	b2db      	uxtb	r3, r3
 8009fea:	2b03      	cmp	r3, #3
 8009fec:	d104      	bne.n	8009ff8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009fee:	6839      	ldr	r1, [r7, #0]
 8009ff0:	6878      	ldr	r0, [r7, #4]
 8009ff2:	f000 f9bc 	bl	800a36e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ff6:	e01d      	b.n	800a034 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	7bfa      	ldrb	r2, [r7, #15]
 8009ffc:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a000:	7bfb      	ldrb	r3, [r7, #15]
 800a002:	4619      	mov	r1, r3
 800a004:	6878      	ldr	r0, [r7, #4]
 800a006:	f004 f87b 	bl	800e100 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a00a:	6878      	ldr	r0, [r7, #4]
 800a00c:	f000 fa7a 	bl	800a504 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a010:	7bfb      	ldrb	r3, [r7, #15]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d004      	beq.n	800a020 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	2202      	movs	r2, #2
 800a01a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a01e:	e009      	b.n	800a034 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	2201      	movs	r2, #1
 800a024:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a028:	e004      	b.n	800a034 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a02a:	6839      	ldr	r1, [r7, #0]
 800a02c:	6878      	ldr	r0, [r7, #4]
 800a02e:	f000 f99e 	bl	800a36e <USBD_CtlError>
  }
}
 800a032:	bf00      	nop
 800a034:	bf00      	nop
 800a036:	3710      	adds	r7, #16
 800a038:	46bd      	mov	sp, r7
 800a03a:	bd80      	pop	{r7, pc}

0800a03c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b084      	sub	sp, #16
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
 800a044:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a046:	2300      	movs	r3, #0
 800a048:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a04a:	683b      	ldr	r3, [r7, #0]
 800a04c:	885b      	ldrh	r3, [r3, #2]
 800a04e:	b2da      	uxtb	r2, r3
 800a050:	4b4e      	ldr	r3, [pc, #312]	; (800a18c <USBD_SetConfig+0x150>)
 800a052:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a054:	4b4d      	ldr	r3, [pc, #308]	; (800a18c <USBD_SetConfig+0x150>)
 800a056:	781b      	ldrb	r3, [r3, #0]
 800a058:	2b01      	cmp	r3, #1
 800a05a:	d905      	bls.n	800a068 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a05c:	6839      	ldr	r1, [r7, #0]
 800a05e:	6878      	ldr	r0, [r7, #4]
 800a060:	f000 f985 	bl	800a36e <USBD_CtlError>
    return USBD_FAIL;
 800a064:	2303      	movs	r3, #3
 800a066:	e08c      	b.n	800a182 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a06e:	b2db      	uxtb	r3, r3
 800a070:	2b02      	cmp	r3, #2
 800a072:	d002      	beq.n	800a07a <USBD_SetConfig+0x3e>
 800a074:	2b03      	cmp	r3, #3
 800a076:	d029      	beq.n	800a0cc <USBD_SetConfig+0x90>
 800a078:	e075      	b.n	800a166 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a07a:	4b44      	ldr	r3, [pc, #272]	; (800a18c <USBD_SetConfig+0x150>)
 800a07c:	781b      	ldrb	r3, [r3, #0]
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d020      	beq.n	800a0c4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800a082:	4b42      	ldr	r3, [pc, #264]	; (800a18c <USBD_SetConfig+0x150>)
 800a084:	781b      	ldrb	r3, [r3, #0]
 800a086:	461a      	mov	r2, r3
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a08c:	4b3f      	ldr	r3, [pc, #252]	; (800a18c <USBD_SetConfig+0x150>)
 800a08e:	781b      	ldrb	r3, [r3, #0]
 800a090:	4619      	mov	r1, r3
 800a092:	6878      	ldr	r0, [r7, #4]
 800a094:	f7fe ffe7 	bl	8009066 <USBD_SetClassConfig>
 800a098:	4603      	mov	r3, r0
 800a09a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a09c:	7bfb      	ldrb	r3, [r7, #15]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d008      	beq.n	800a0b4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800a0a2:	6839      	ldr	r1, [r7, #0]
 800a0a4:	6878      	ldr	r0, [r7, #4]
 800a0a6:	f000 f962 	bl	800a36e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	2202      	movs	r2, #2
 800a0ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a0b2:	e065      	b.n	800a180 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a0b4:	6878      	ldr	r0, [r7, #4]
 800a0b6:	f000 fa25 	bl	800a504 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	2203      	movs	r2, #3
 800a0be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a0c2:	e05d      	b.n	800a180 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a0c4:	6878      	ldr	r0, [r7, #4]
 800a0c6:	f000 fa1d 	bl	800a504 <USBD_CtlSendStatus>
      break;
 800a0ca:	e059      	b.n	800a180 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a0cc:	4b2f      	ldr	r3, [pc, #188]	; (800a18c <USBD_SetConfig+0x150>)
 800a0ce:	781b      	ldrb	r3, [r3, #0]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d112      	bne.n	800a0fa <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	2202      	movs	r2, #2
 800a0d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800a0dc:	4b2b      	ldr	r3, [pc, #172]	; (800a18c <USBD_SetConfig+0x150>)
 800a0de:	781b      	ldrb	r3, [r3, #0]
 800a0e0:	461a      	mov	r2, r3
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a0e6:	4b29      	ldr	r3, [pc, #164]	; (800a18c <USBD_SetConfig+0x150>)
 800a0e8:	781b      	ldrb	r3, [r3, #0]
 800a0ea:	4619      	mov	r1, r3
 800a0ec:	6878      	ldr	r0, [r7, #4]
 800a0ee:	f7fe ffd6 	bl	800909e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a0f2:	6878      	ldr	r0, [r7, #4]
 800a0f4:	f000 fa06 	bl	800a504 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a0f8:	e042      	b.n	800a180 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800a0fa:	4b24      	ldr	r3, [pc, #144]	; (800a18c <USBD_SetConfig+0x150>)
 800a0fc:	781b      	ldrb	r3, [r3, #0]
 800a0fe:	461a      	mov	r2, r3
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	685b      	ldr	r3, [r3, #4]
 800a104:	429a      	cmp	r2, r3
 800a106:	d02a      	beq.n	800a15e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	685b      	ldr	r3, [r3, #4]
 800a10c:	b2db      	uxtb	r3, r3
 800a10e:	4619      	mov	r1, r3
 800a110:	6878      	ldr	r0, [r7, #4]
 800a112:	f7fe ffc4 	bl	800909e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a116:	4b1d      	ldr	r3, [pc, #116]	; (800a18c <USBD_SetConfig+0x150>)
 800a118:	781b      	ldrb	r3, [r3, #0]
 800a11a:	461a      	mov	r2, r3
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a120:	4b1a      	ldr	r3, [pc, #104]	; (800a18c <USBD_SetConfig+0x150>)
 800a122:	781b      	ldrb	r3, [r3, #0]
 800a124:	4619      	mov	r1, r3
 800a126:	6878      	ldr	r0, [r7, #4]
 800a128:	f7fe ff9d 	bl	8009066 <USBD_SetClassConfig>
 800a12c:	4603      	mov	r3, r0
 800a12e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a130:	7bfb      	ldrb	r3, [r7, #15]
 800a132:	2b00      	cmp	r3, #0
 800a134:	d00f      	beq.n	800a156 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800a136:	6839      	ldr	r1, [r7, #0]
 800a138:	6878      	ldr	r0, [r7, #4]
 800a13a:	f000 f918 	bl	800a36e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	685b      	ldr	r3, [r3, #4]
 800a142:	b2db      	uxtb	r3, r3
 800a144:	4619      	mov	r1, r3
 800a146:	6878      	ldr	r0, [r7, #4]
 800a148:	f7fe ffa9 	bl	800909e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	2202      	movs	r2, #2
 800a150:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a154:	e014      	b.n	800a180 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a156:	6878      	ldr	r0, [r7, #4]
 800a158:	f000 f9d4 	bl	800a504 <USBD_CtlSendStatus>
      break;
 800a15c:	e010      	b.n	800a180 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a15e:	6878      	ldr	r0, [r7, #4]
 800a160:	f000 f9d0 	bl	800a504 <USBD_CtlSendStatus>
      break;
 800a164:	e00c      	b.n	800a180 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800a166:	6839      	ldr	r1, [r7, #0]
 800a168:	6878      	ldr	r0, [r7, #4]
 800a16a:	f000 f900 	bl	800a36e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a16e:	4b07      	ldr	r3, [pc, #28]	; (800a18c <USBD_SetConfig+0x150>)
 800a170:	781b      	ldrb	r3, [r3, #0]
 800a172:	4619      	mov	r1, r3
 800a174:	6878      	ldr	r0, [r7, #4]
 800a176:	f7fe ff92 	bl	800909e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a17a:	2303      	movs	r3, #3
 800a17c:	73fb      	strb	r3, [r7, #15]
      break;
 800a17e:	bf00      	nop
  }

  return ret;
 800a180:	7bfb      	ldrb	r3, [r7, #15]
}
 800a182:	4618      	mov	r0, r3
 800a184:	3710      	adds	r7, #16
 800a186:	46bd      	mov	sp, r7
 800a188:	bd80      	pop	{r7, pc}
 800a18a:	bf00      	nop
 800a18c:	200002bc 	.word	0x200002bc

0800a190 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a190:	b580      	push	{r7, lr}
 800a192:	b082      	sub	sp, #8
 800a194:	af00      	add	r7, sp, #0
 800a196:	6078      	str	r0, [r7, #4]
 800a198:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a19a:	683b      	ldr	r3, [r7, #0]
 800a19c:	88db      	ldrh	r3, [r3, #6]
 800a19e:	2b01      	cmp	r3, #1
 800a1a0:	d004      	beq.n	800a1ac <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a1a2:	6839      	ldr	r1, [r7, #0]
 800a1a4:	6878      	ldr	r0, [r7, #4]
 800a1a6:	f000 f8e2 	bl	800a36e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a1aa:	e023      	b.n	800a1f4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a1b2:	b2db      	uxtb	r3, r3
 800a1b4:	2b02      	cmp	r3, #2
 800a1b6:	dc02      	bgt.n	800a1be <USBD_GetConfig+0x2e>
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	dc03      	bgt.n	800a1c4 <USBD_GetConfig+0x34>
 800a1bc:	e015      	b.n	800a1ea <USBD_GetConfig+0x5a>
 800a1be:	2b03      	cmp	r3, #3
 800a1c0:	d00b      	beq.n	800a1da <USBD_GetConfig+0x4a>
 800a1c2:	e012      	b.n	800a1ea <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	2200      	movs	r2, #0
 800a1c8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	3308      	adds	r3, #8
 800a1ce:	2201      	movs	r2, #1
 800a1d0:	4619      	mov	r1, r3
 800a1d2:	6878      	ldr	r0, [r7, #4]
 800a1d4:	f000 f93c 	bl	800a450 <USBD_CtlSendData>
        break;
 800a1d8:	e00c      	b.n	800a1f4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	3304      	adds	r3, #4
 800a1de:	2201      	movs	r2, #1
 800a1e0:	4619      	mov	r1, r3
 800a1e2:	6878      	ldr	r0, [r7, #4]
 800a1e4:	f000 f934 	bl	800a450 <USBD_CtlSendData>
        break;
 800a1e8:	e004      	b.n	800a1f4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a1ea:	6839      	ldr	r1, [r7, #0]
 800a1ec:	6878      	ldr	r0, [r7, #4]
 800a1ee:	f000 f8be 	bl	800a36e <USBD_CtlError>
        break;
 800a1f2:	bf00      	nop
}
 800a1f4:	bf00      	nop
 800a1f6:	3708      	adds	r7, #8
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	bd80      	pop	{r7, pc}

0800a1fc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a1fc:	b580      	push	{r7, lr}
 800a1fe:	b082      	sub	sp, #8
 800a200:	af00      	add	r7, sp, #0
 800a202:	6078      	str	r0, [r7, #4]
 800a204:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a20c:	b2db      	uxtb	r3, r3
 800a20e:	3b01      	subs	r3, #1
 800a210:	2b02      	cmp	r3, #2
 800a212:	d81e      	bhi.n	800a252 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a214:	683b      	ldr	r3, [r7, #0]
 800a216:	88db      	ldrh	r3, [r3, #6]
 800a218:	2b02      	cmp	r3, #2
 800a21a:	d004      	beq.n	800a226 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a21c:	6839      	ldr	r1, [r7, #0]
 800a21e:	6878      	ldr	r0, [r7, #4]
 800a220:	f000 f8a5 	bl	800a36e <USBD_CtlError>
        break;
 800a224:	e01a      	b.n	800a25c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	2201      	movs	r2, #1
 800a22a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a232:	2b00      	cmp	r3, #0
 800a234:	d005      	beq.n	800a242 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	68db      	ldr	r3, [r3, #12]
 800a23a:	f043 0202 	orr.w	r2, r3, #2
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	330c      	adds	r3, #12
 800a246:	2202      	movs	r2, #2
 800a248:	4619      	mov	r1, r3
 800a24a:	6878      	ldr	r0, [r7, #4]
 800a24c:	f000 f900 	bl	800a450 <USBD_CtlSendData>
      break;
 800a250:	e004      	b.n	800a25c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a252:	6839      	ldr	r1, [r7, #0]
 800a254:	6878      	ldr	r0, [r7, #4]
 800a256:	f000 f88a 	bl	800a36e <USBD_CtlError>
      break;
 800a25a:	bf00      	nop
  }
}
 800a25c:	bf00      	nop
 800a25e:	3708      	adds	r7, #8
 800a260:	46bd      	mov	sp, r7
 800a262:	bd80      	pop	{r7, pc}

0800a264 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a264:	b580      	push	{r7, lr}
 800a266:	b082      	sub	sp, #8
 800a268:	af00      	add	r7, sp, #0
 800a26a:	6078      	str	r0, [r7, #4]
 800a26c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a26e:	683b      	ldr	r3, [r7, #0]
 800a270:	885b      	ldrh	r3, [r3, #2]
 800a272:	2b01      	cmp	r3, #1
 800a274:	d107      	bne.n	800a286 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	2201      	movs	r2, #1
 800a27a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a27e:	6878      	ldr	r0, [r7, #4]
 800a280:	f000 f940 	bl	800a504 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800a284:	e013      	b.n	800a2ae <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a286:	683b      	ldr	r3, [r7, #0]
 800a288:	885b      	ldrh	r3, [r3, #2]
 800a28a:	2b02      	cmp	r3, #2
 800a28c:	d10b      	bne.n	800a2a6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800a28e:	683b      	ldr	r3, [r7, #0]
 800a290:	889b      	ldrh	r3, [r3, #4]
 800a292:	0a1b      	lsrs	r3, r3, #8
 800a294:	b29b      	uxth	r3, r3
 800a296:	b2da      	uxtb	r2, r3
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800a29e:	6878      	ldr	r0, [r7, #4]
 800a2a0:	f000 f930 	bl	800a504 <USBD_CtlSendStatus>
}
 800a2a4:	e003      	b.n	800a2ae <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800a2a6:	6839      	ldr	r1, [r7, #0]
 800a2a8:	6878      	ldr	r0, [r7, #4]
 800a2aa:	f000 f860 	bl	800a36e <USBD_CtlError>
}
 800a2ae:	bf00      	nop
 800a2b0:	3708      	adds	r7, #8
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	bd80      	pop	{r7, pc}

0800a2b6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a2b6:	b580      	push	{r7, lr}
 800a2b8:	b082      	sub	sp, #8
 800a2ba:	af00      	add	r7, sp, #0
 800a2bc:	6078      	str	r0, [r7, #4]
 800a2be:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a2c6:	b2db      	uxtb	r3, r3
 800a2c8:	3b01      	subs	r3, #1
 800a2ca:	2b02      	cmp	r3, #2
 800a2cc:	d80b      	bhi.n	800a2e6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a2ce:	683b      	ldr	r3, [r7, #0]
 800a2d0:	885b      	ldrh	r3, [r3, #2]
 800a2d2:	2b01      	cmp	r3, #1
 800a2d4:	d10c      	bne.n	800a2f0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	2200      	movs	r2, #0
 800a2da:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a2de:	6878      	ldr	r0, [r7, #4]
 800a2e0:	f000 f910 	bl	800a504 <USBD_CtlSendStatus>
      }
      break;
 800a2e4:	e004      	b.n	800a2f0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a2e6:	6839      	ldr	r1, [r7, #0]
 800a2e8:	6878      	ldr	r0, [r7, #4]
 800a2ea:	f000 f840 	bl	800a36e <USBD_CtlError>
      break;
 800a2ee:	e000      	b.n	800a2f2 <USBD_ClrFeature+0x3c>
      break;
 800a2f0:	bf00      	nop
  }
}
 800a2f2:	bf00      	nop
 800a2f4:	3708      	adds	r7, #8
 800a2f6:	46bd      	mov	sp, r7
 800a2f8:	bd80      	pop	{r7, pc}

0800a2fa <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a2fa:	b580      	push	{r7, lr}
 800a2fc:	b084      	sub	sp, #16
 800a2fe:	af00      	add	r7, sp, #0
 800a300:	6078      	str	r0, [r7, #4]
 800a302:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a304:	683b      	ldr	r3, [r7, #0]
 800a306:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	781a      	ldrb	r2, [r3, #0]
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	3301      	adds	r3, #1
 800a314:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	781a      	ldrb	r2, [r3, #0]
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	3301      	adds	r3, #1
 800a322:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a324:	68f8      	ldr	r0, [r7, #12]
 800a326:	f7ff fa41 	bl	80097ac <SWAPBYTE>
 800a32a:	4603      	mov	r3, r0
 800a32c:	461a      	mov	r2, r3
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	3301      	adds	r3, #1
 800a336:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	3301      	adds	r3, #1
 800a33c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a33e:	68f8      	ldr	r0, [r7, #12]
 800a340:	f7ff fa34 	bl	80097ac <SWAPBYTE>
 800a344:	4603      	mov	r3, r0
 800a346:	461a      	mov	r2, r3
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	3301      	adds	r3, #1
 800a350:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	3301      	adds	r3, #1
 800a356:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a358:	68f8      	ldr	r0, [r7, #12]
 800a35a:	f7ff fa27 	bl	80097ac <SWAPBYTE>
 800a35e:	4603      	mov	r3, r0
 800a360:	461a      	mov	r2, r3
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	80da      	strh	r2, [r3, #6]
}
 800a366:	bf00      	nop
 800a368:	3710      	adds	r7, #16
 800a36a:	46bd      	mov	sp, r7
 800a36c:	bd80      	pop	{r7, pc}

0800a36e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a36e:	b580      	push	{r7, lr}
 800a370:	b082      	sub	sp, #8
 800a372:	af00      	add	r7, sp, #0
 800a374:	6078      	str	r0, [r7, #4]
 800a376:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a378:	2180      	movs	r1, #128	; 0x80
 800a37a:	6878      	ldr	r0, [r7, #4]
 800a37c:	f003 fe56 	bl	800e02c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a380:	2100      	movs	r1, #0
 800a382:	6878      	ldr	r0, [r7, #4]
 800a384:	f003 fe52 	bl	800e02c <USBD_LL_StallEP>
}
 800a388:	bf00      	nop
 800a38a:	3708      	adds	r7, #8
 800a38c:	46bd      	mov	sp, r7
 800a38e:	bd80      	pop	{r7, pc}

0800a390 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a390:	b580      	push	{r7, lr}
 800a392:	b086      	sub	sp, #24
 800a394:	af00      	add	r7, sp, #0
 800a396:	60f8      	str	r0, [r7, #12]
 800a398:	60b9      	str	r1, [r7, #8]
 800a39a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a39c:	2300      	movs	r3, #0
 800a39e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d036      	beq.n	800a414 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a3aa:	6938      	ldr	r0, [r7, #16]
 800a3ac:	f000 f836 	bl	800a41c <USBD_GetLen>
 800a3b0:	4603      	mov	r3, r0
 800a3b2:	3301      	adds	r3, #1
 800a3b4:	b29b      	uxth	r3, r3
 800a3b6:	005b      	lsls	r3, r3, #1
 800a3b8:	b29a      	uxth	r2, r3
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a3be:	7dfb      	ldrb	r3, [r7, #23]
 800a3c0:	68ba      	ldr	r2, [r7, #8]
 800a3c2:	4413      	add	r3, r2
 800a3c4:	687a      	ldr	r2, [r7, #4]
 800a3c6:	7812      	ldrb	r2, [r2, #0]
 800a3c8:	701a      	strb	r2, [r3, #0]
  idx++;
 800a3ca:	7dfb      	ldrb	r3, [r7, #23]
 800a3cc:	3301      	adds	r3, #1
 800a3ce:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a3d0:	7dfb      	ldrb	r3, [r7, #23]
 800a3d2:	68ba      	ldr	r2, [r7, #8]
 800a3d4:	4413      	add	r3, r2
 800a3d6:	2203      	movs	r2, #3
 800a3d8:	701a      	strb	r2, [r3, #0]
  idx++;
 800a3da:	7dfb      	ldrb	r3, [r7, #23]
 800a3dc:	3301      	adds	r3, #1
 800a3de:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a3e0:	e013      	b.n	800a40a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a3e2:	7dfb      	ldrb	r3, [r7, #23]
 800a3e4:	68ba      	ldr	r2, [r7, #8]
 800a3e6:	4413      	add	r3, r2
 800a3e8:	693a      	ldr	r2, [r7, #16]
 800a3ea:	7812      	ldrb	r2, [r2, #0]
 800a3ec:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a3ee:	693b      	ldr	r3, [r7, #16]
 800a3f0:	3301      	adds	r3, #1
 800a3f2:	613b      	str	r3, [r7, #16]
    idx++;
 800a3f4:	7dfb      	ldrb	r3, [r7, #23]
 800a3f6:	3301      	adds	r3, #1
 800a3f8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a3fa:	7dfb      	ldrb	r3, [r7, #23]
 800a3fc:	68ba      	ldr	r2, [r7, #8]
 800a3fe:	4413      	add	r3, r2
 800a400:	2200      	movs	r2, #0
 800a402:	701a      	strb	r2, [r3, #0]
    idx++;
 800a404:	7dfb      	ldrb	r3, [r7, #23]
 800a406:	3301      	adds	r3, #1
 800a408:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a40a:	693b      	ldr	r3, [r7, #16]
 800a40c:	781b      	ldrb	r3, [r3, #0]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d1e7      	bne.n	800a3e2 <USBD_GetString+0x52>
 800a412:	e000      	b.n	800a416 <USBD_GetString+0x86>
    return;
 800a414:	bf00      	nop
  }
}
 800a416:	3718      	adds	r7, #24
 800a418:	46bd      	mov	sp, r7
 800a41a:	bd80      	pop	{r7, pc}

0800a41c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a41c:	b480      	push	{r7}
 800a41e:	b085      	sub	sp, #20
 800a420:	af00      	add	r7, sp, #0
 800a422:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a424:	2300      	movs	r3, #0
 800a426:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a42c:	e005      	b.n	800a43a <USBD_GetLen+0x1e>
  {
    len++;
 800a42e:	7bfb      	ldrb	r3, [r7, #15]
 800a430:	3301      	adds	r3, #1
 800a432:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a434:	68bb      	ldr	r3, [r7, #8]
 800a436:	3301      	adds	r3, #1
 800a438:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a43a:	68bb      	ldr	r3, [r7, #8]
 800a43c:	781b      	ldrb	r3, [r3, #0]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d1f5      	bne.n	800a42e <USBD_GetLen+0x12>
  }

  return len;
 800a442:	7bfb      	ldrb	r3, [r7, #15]
}
 800a444:	4618      	mov	r0, r3
 800a446:	3714      	adds	r7, #20
 800a448:	46bd      	mov	sp, r7
 800a44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44e:	4770      	bx	lr

0800a450 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a450:	b580      	push	{r7, lr}
 800a452:	b084      	sub	sp, #16
 800a454:	af00      	add	r7, sp, #0
 800a456:	60f8      	str	r0, [r7, #12]
 800a458:	60b9      	str	r1, [r7, #8]
 800a45a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	2202      	movs	r2, #2
 800a460:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	687a      	ldr	r2, [r7, #4]
 800a468:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	687a      	ldr	r2, [r7, #4]
 800a46e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	68ba      	ldr	r2, [r7, #8]
 800a474:	2100      	movs	r1, #0
 800a476:	68f8      	ldr	r0, [r7, #12]
 800a478:	f003 fe61 	bl	800e13e <USBD_LL_Transmit>

  return USBD_OK;
 800a47c:	2300      	movs	r3, #0
}
 800a47e:	4618      	mov	r0, r3
 800a480:	3710      	adds	r7, #16
 800a482:	46bd      	mov	sp, r7
 800a484:	bd80      	pop	{r7, pc}

0800a486 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a486:	b580      	push	{r7, lr}
 800a488:	b084      	sub	sp, #16
 800a48a:	af00      	add	r7, sp, #0
 800a48c:	60f8      	str	r0, [r7, #12]
 800a48e:	60b9      	str	r1, [r7, #8]
 800a490:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	68ba      	ldr	r2, [r7, #8]
 800a496:	2100      	movs	r1, #0
 800a498:	68f8      	ldr	r0, [r7, #12]
 800a49a:	f003 fe50 	bl	800e13e <USBD_LL_Transmit>

  return USBD_OK;
 800a49e:	2300      	movs	r3, #0
}
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	3710      	adds	r7, #16
 800a4a4:	46bd      	mov	sp, r7
 800a4a6:	bd80      	pop	{r7, pc}

0800a4a8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a4a8:	b580      	push	{r7, lr}
 800a4aa:	b084      	sub	sp, #16
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	60f8      	str	r0, [r7, #12]
 800a4b0:	60b9      	str	r1, [r7, #8]
 800a4b2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	2203      	movs	r2, #3
 800a4b8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	687a      	ldr	r2, [r7, #4]
 800a4c0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	687a      	ldr	r2, [r7, #4]
 800a4c8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	68ba      	ldr	r2, [r7, #8]
 800a4d0:	2100      	movs	r1, #0
 800a4d2:	68f8      	ldr	r0, [r7, #12]
 800a4d4:	f003 fe54 	bl	800e180 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a4d8:	2300      	movs	r3, #0
}
 800a4da:	4618      	mov	r0, r3
 800a4dc:	3710      	adds	r7, #16
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	bd80      	pop	{r7, pc}

0800a4e2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a4e2:	b580      	push	{r7, lr}
 800a4e4:	b084      	sub	sp, #16
 800a4e6:	af00      	add	r7, sp, #0
 800a4e8:	60f8      	str	r0, [r7, #12]
 800a4ea:	60b9      	str	r1, [r7, #8]
 800a4ec:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	68ba      	ldr	r2, [r7, #8]
 800a4f2:	2100      	movs	r1, #0
 800a4f4:	68f8      	ldr	r0, [r7, #12]
 800a4f6:	f003 fe43 	bl	800e180 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a4fa:	2300      	movs	r3, #0
}
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	3710      	adds	r7, #16
 800a500:	46bd      	mov	sp, r7
 800a502:	bd80      	pop	{r7, pc}

0800a504 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a504:	b580      	push	{r7, lr}
 800a506:	b082      	sub	sp, #8
 800a508:	af00      	add	r7, sp, #0
 800a50a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	2204      	movs	r2, #4
 800a510:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a514:	2300      	movs	r3, #0
 800a516:	2200      	movs	r2, #0
 800a518:	2100      	movs	r1, #0
 800a51a:	6878      	ldr	r0, [r7, #4]
 800a51c:	f003 fe0f 	bl	800e13e <USBD_LL_Transmit>

  return USBD_OK;
 800a520:	2300      	movs	r3, #0
}
 800a522:	4618      	mov	r0, r3
 800a524:	3708      	adds	r7, #8
 800a526:	46bd      	mov	sp, r7
 800a528:	bd80      	pop	{r7, pc}

0800a52a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a52a:	b580      	push	{r7, lr}
 800a52c:	b082      	sub	sp, #8
 800a52e:	af00      	add	r7, sp, #0
 800a530:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	2205      	movs	r2, #5
 800a536:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a53a:	2300      	movs	r3, #0
 800a53c:	2200      	movs	r2, #0
 800a53e:	2100      	movs	r1, #0
 800a540:	6878      	ldr	r0, [r7, #4]
 800a542:	f003 fe1d 	bl	800e180 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a546:	2300      	movs	r3, #0
}
 800a548:	4618      	mov	r0, r3
 800a54a:	3708      	adds	r7, #8
 800a54c:	46bd      	mov	sp, r7
 800a54e:	bd80      	pop	{r7, pc}

0800a550 <__NVIC_SetPriority>:
{
 800a550:	b480      	push	{r7}
 800a552:	b083      	sub	sp, #12
 800a554:	af00      	add	r7, sp, #0
 800a556:	4603      	mov	r3, r0
 800a558:	6039      	str	r1, [r7, #0]
 800a55a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a55c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a560:	2b00      	cmp	r3, #0
 800a562:	db0a      	blt.n	800a57a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a564:	683b      	ldr	r3, [r7, #0]
 800a566:	b2da      	uxtb	r2, r3
 800a568:	490c      	ldr	r1, [pc, #48]	; (800a59c <__NVIC_SetPriority+0x4c>)
 800a56a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a56e:	0112      	lsls	r2, r2, #4
 800a570:	b2d2      	uxtb	r2, r2
 800a572:	440b      	add	r3, r1
 800a574:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800a578:	e00a      	b.n	800a590 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a57a:	683b      	ldr	r3, [r7, #0]
 800a57c:	b2da      	uxtb	r2, r3
 800a57e:	4908      	ldr	r1, [pc, #32]	; (800a5a0 <__NVIC_SetPriority+0x50>)
 800a580:	79fb      	ldrb	r3, [r7, #7]
 800a582:	f003 030f 	and.w	r3, r3, #15
 800a586:	3b04      	subs	r3, #4
 800a588:	0112      	lsls	r2, r2, #4
 800a58a:	b2d2      	uxtb	r2, r2
 800a58c:	440b      	add	r3, r1
 800a58e:	761a      	strb	r2, [r3, #24]
}
 800a590:	bf00      	nop
 800a592:	370c      	adds	r7, #12
 800a594:	46bd      	mov	sp, r7
 800a596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a59a:	4770      	bx	lr
 800a59c:	e000e100 	.word	0xe000e100
 800a5a0:	e000ed00 	.word	0xe000ed00

0800a5a4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800a5a4:	b580      	push	{r7, lr}
 800a5a6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800a5a8:	4b05      	ldr	r3, [pc, #20]	; (800a5c0 <SysTick_Handler+0x1c>)
 800a5aa:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800a5ac:	f001 ff96 	bl	800c4dc <xTaskGetSchedulerState>
 800a5b0:	4603      	mov	r3, r0
 800a5b2:	2b01      	cmp	r3, #1
 800a5b4:	d001      	beq.n	800a5ba <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800a5b6:	f002 fe77 	bl	800d2a8 <xPortSysTickHandler>
  }
}
 800a5ba:	bf00      	nop
 800a5bc:	bd80      	pop	{r7, pc}
 800a5be:	bf00      	nop
 800a5c0:	e000e010 	.word	0xe000e010

0800a5c4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a5c4:	b580      	push	{r7, lr}
 800a5c6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800a5c8:	2100      	movs	r1, #0
 800a5ca:	f06f 0004 	mvn.w	r0, #4
 800a5ce:	f7ff ffbf 	bl	800a550 <__NVIC_SetPriority>
#endif
}
 800a5d2:	bf00      	nop
 800a5d4:	bd80      	pop	{r7, pc}
	...

0800a5d8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a5d8:	b480      	push	{r7}
 800a5da:	b083      	sub	sp, #12
 800a5dc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a5de:	f3ef 8305 	mrs	r3, IPSR
 800a5e2:	603b      	str	r3, [r7, #0]
  return(result);
 800a5e4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d003      	beq.n	800a5f2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800a5ea:	f06f 0305 	mvn.w	r3, #5
 800a5ee:	607b      	str	r3, [r7, #4]
 800a5f0:	e00c      	b.n	800a60c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a5f2:	4b0a      	ldr	r3, [pc, #40]	; (800a61c <osKernelInitialize+0x44>)
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d105      	bne.n	800a606 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a5fa:	4b08      	ldr	r3, [pc, #32]	; (800a61c <osKernelInitialize+0x44>)
 800a5fc:	2201      	movs	r2, #1
 800a5fe:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a600:	2300      	movs	r3, #0
 800a602:	607b      	str	r3, [r7, #4]
 800a604:	e002      	b.n	800a60c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800a606:	f04f 33ff 	mov.w	r3, #4294967295
 800a60a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a60c:	687b      	ldr	r3, [r7, #4]
}
 800a60e:	4618      	mov	r0, r3
 800a610:	370c      	adds	r7, #12
 800a612:	46bd      	mov	sp, r7
 800a614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a618:	4770      	bx	lr
 800a61a:	bf00      	nop
 800a61c:	200002c0 	.word	0x200002c0

0800a620 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a620:	b580      	push	{r7, lr}
 800a622:	b082      	sub	sp, #8
 800a624:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a626:	f3ef 8305 	mrs	r3, IPSR
 800a62a:	603b      	str	r3, [r7, #0]
  return(result);
 800a62c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d003      	beq.n	800a63a <osKernelStart+0x1a>
    stat = osErrorISR;
 800a632:	f06f 0305 	mvn.w	r3, #5
 800a636:	607b      	str	r3, [r7, #4]
 800a638:	e010      	b.n	800a65c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a63a:	4b0b      	ldr	r3, [pc, #44]	; (800a668 <osKernelStart+0x48>)
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	2b01      	cmp	r3, #1
 800a640:	d109      	bne.n	800a656 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a642:	f7ff ffbf 	bl	800a5c4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a646:	4b08      	ldr	r3, [pc, #32]	; (800a668 <osKernelStart+0x48>)
 800a648:	2202      	movs	r2, #2
 800a64a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a64c:	f001 fa4c 	bl	800bae8 <vTaskStartScheduler>
      stat = osOK;
 800a650:	2300      	movs	r3, #0
 800a652:	607b      	str	r3, [r7, #4]
 800a654:	e002      	b.n	800a65c <osKernelStart+0x3c>
    } else {
      stat = osError;
 800a656:	f04f 33ff 	mov.w	r3, #4294967295
 800a65a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a65c:	687b      	ldr	r3, [r7, #4]
}
 800a65e:	4618      	mov	r0, r3
 800a660:	3708      	adds	r7, #8
 800a662:	46bd      	mov	sp, r7
 800a664:	bd80      	pop	{r7, pc}
 800a666:	bf00      	nop
 800a668:	200002c0 	.word	0x200002c0

0800a66c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a66c:	b580      	push	{r7, lr}
 800a66e:	b08e      	sub	sp, #56	; 0x38
 800a670:	af04      	add	r7, sp, #16
 800a672:	60f8      	str	r0, [r7, #12]
 800a674:	60b9      	str	r1, [r7, #8]
 800a676:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a678:	2300      	movs	r3, #0
 800a67a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a67c:	f3ef 8305 	mrs	r3, IPSR
 800a680:	617b      	str	r3, [r7, #20]
  return(result);
 800a682:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800a684:	2b00      	cmp	r3, #0
 800a686:	d17e      	bne.n	800a786 <osThreadNew+0x11a>
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d07b      	beq.n	800a786 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800a68e:	2380      	movs	r3, #128	; 0x80
 800a690:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800a692:	2318      	movs	r3, #24
 800a694:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800a696:	2300      	movs	r3, #0
 800a698:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800a69a:	f04f 33ff 	mov.w	r3, #4294967295
 800a69e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d045      	beq.n	800a732 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d002      	beq.n	800a6b4 <osThreadNew+0x48>
        name = attr->name;
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	699b      	ldr	r3, [r3, #24]
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d002      	beq.n	800a6c2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	699b      	ldr	r3, [r3, #24]
 800a6c0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a6c2:	69fb      	ldr	r3, [r7, #28]
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d008      	beq.n	800a6da <osThreadNew+0x6e>
 800a6c8:	69fb      	ldr	r3, [r7, #28]
 800a6ca:	2b38      	cmp	r3, #56	; 0x38
 800a6cc:	d805      	bhi.n	800a6da <osThreadNew+0x6e>
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	685b      	ldr	r3, [r3, #4]
 800a6d2:	f003 0301 	and.w	r3, r3, #1
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d001      	beq.n	800a6de <osThreadNew+0x72>
        return (NULL);
 800a6da:	2300      	movs	r3, #0
 800a6dc:	e054      	b.n	800a788 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	695b      	ldr	r3, [r3, #20]
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d003      	beq.n	800a6ee <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	695b      	ldr	r3, [r3, #20]
 800a6ea:	089b      	lsrs	r3, r3, #2
 800a6ec:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	689b      	ldr	r3, [r3, #8]
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d00e      	beq.n	800a714 <osThreadNew+0xa8>
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	68db      	ldr	r3, [r3, #12]
 800a6fa:	2ba7      	cmp	r3, #167	; 0xa7
 800a6fc:	d90a      	bls.n	800a714 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a702:	2b00      	cmp	r3, #0
 800a704:	d006      	beq.n	800a714 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	695b      	ldr	r3, [r3, #20]
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d002      	beq.n	800a714 <osThreadNew+0xa8>
        mem = 1;
 800a70e:	2301      	movs	r3, #1
 800a710:	61bb      	str	r3, [r7, #24]
 800a712:	e010      	b.n	800a736 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	689b      	ldr	r3, [r3, #8]
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d10c      	bne.n	800a736 <osThreadNew+0xca>
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	68db      	ldr	r3, [r3, #12]
 800a720:	2b00      	cmp	r3, #0
 800a722:	d108      	bne.n	800a736 <osThreadNew+0xca>
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	691b      	ldr	r3, [r3, #16]
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d104      	bne.n	800a736 <osThreadNew+0xca>
          mem = 0;
 800a72c:	2300      	movs	r3, #0
 800a72e:	61bb      	str	r3, [r7, #24]
 800a730:	e001      	b.n	800a736 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800a732:	2300      	movs	r3, #0
 800a734:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a736:	69bb      	ldr	r3, [r7, #24]
 800a738:	2b01      	cmp	r3, #1
 800a73a:	d110      	bne.n	800a75e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800a740:	687a      	ldr	r2, [r7, #4]
 800a742:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a744:	9202      	str	r2, [sp, #8]
 800a746:	9301      	str	r3, [sp, #4]
 800a748:	69fb      	ldr	r3, [r7, #28]
 800a74a:	9300      	str	r3, [sp, #0]
 800a74c:	68bb      	ldr	r3, [r7, #8]
 800a74e:	6a3a      	ldr	r2, [r7, #32]
 800a750:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a752:	68f8      	ldr	r0, [r7, #12]
 800a754:	f000 ffdc 	bl	800b710 <xTaskCreateStatic>
 800a758:	4603      	mov	r3, r0
 800a75a:	613b      	str	r3, [r7, #16]
 800a75c:	e013      	b.n	800a786 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800a75e:	69bb      	ldr	r3, [r7, #24]
 800a760:	2b00      	cmp	r3, #0
 800a762:	d110      	bne.n	800a786 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a764:	6a3b      	ldr	r3, [r7, #32]
 800a766:	b29a      	uxth	r2, r3
 800a768:	f107 0310 	add.w	r3, r7, #16
 800a76c:	9301      	str	r3, [sp, #4]
 800a76e:	69fb      	ldr	r3, [r7, #28]
 800a770:	9300      	str	r3, [sp, #0]
 800a772:	68bb      	ldr	r3, [r7, #8]
 800a774:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a776:	68f8      	ldr	r0, [r7, #12]
 800a778:	f001 f827 	bl	800b7ca <xTaskCreate>
 800a77c:	4603      	mov	r3, r0
 800a77e:	2b01      	cmp	r3, #1
 800a780:	d001      	beq.n	800a786 <osThreadNew+0x11a>
            hTask = NULL;
 800a782:	2300      	movs	r3, #0
 800a784:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a786:	693b      	ldr	r3, [r7, #16]
}
 800a788:	4618      	mov	r0, r3
 800a78a:	3728      	adds	r7, #40	; 0x28
 800a78c:	46bd      	mov	sp, r7
 800a78e:	bd80      	pop	{r7, pc}

0800a790 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800a790:	b580      	push	{r7, lr}
 800a792:	b084      	sub	sp, #16
 800a794:	af00      	add	r7, sp, #0
 800a796:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a798:	f3ef 8305 	mrs	r3, IPSR
 800a79c:	60bb      	str	r3, [r7, #8]
  return(result);
 800a79e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d003      	beq.n	800a7ac <osDelay+0x1c>
    stat = osErrorISR;
 800a7a4:	f06f 0305 	mvn.w	r3, #5
 800a7a8:	60fb      	str	r3, [r7, #12]
 800a7aa:	e007      	b.n	800a7bc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800a7ac:	2300      	movs	r3, #0
 800a7ae:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d002      	beq.n	800a7bc <osDelay+0x2c>
      vTaskDelay(ticks);
 800a7b6:	6878      	ldr	r0, [r7, #4]
 800a7b8:	f001 f962 	bl	800ba80 <vTaskDelay>
    }
  }

  return (stat);
 800a7bc:	68fb      	ldr	r3, [r7, #12]
}
 800a7be:	4618      	mov	r0, r3
 800a7c0:	3710      	adds	r7, #16
 800a7c2:	46bd      	mov	sp, r7
 800a7c4:	bd80      	pop	{r7, pc}
	...

0800a7c8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a7c8:	b480      	push	{r7}
 800a7ca:	b085      	sub	sp, #20
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	60f8      	str	r0, [r7, #12]
 800a7d0:	60b9      	str	r1, [r7, #8]
 800a7d2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	4a07      	ldr	r2, [pc, #28]	; (800a7f4 <vApplicationGetIdleTaskMemory+0x2c>)
 800a7d8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a7da:	68bb      	ldr	r3, [r7, #8]
 800a7dc:	4a06      	ldr	r2, [pc, #24]	; (800a7f8 <vApplicationGetIdleTaskMemory+0x30>)
 800a7de:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	2280      	movs	r2, #128	; 0x80
 800a7e4:	601a      	str	r2, [r3, #0]
}
 800a7e6:	bf00      	nop
 800a7e8:	3714      	adds	r7, #20
 800a7ea:	46bd      	mov	sp, r7
 800a7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f0:	4770      	bx	lr
 800a7f2:	bf00      	nop
 800a7f4:	200002c4 	.word	0x200002c4
 800a7f8:	2000036c 	.word	0x2000036c

0800a7fc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a7fc:	b480      	push	{r7}
 800a7fe:	b085      	sub	sp, #20
 800a800:	af00      	add	r7, sp, #0
 800a802:	60f8      	str	r0, [r7, #12]
 800a804:	60b9      	str	r1, [r7, #8]
 800a806:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	4a07      	ldr	r2, [pc, #28]	; (800a828 <vApplicationGetTimerTaskMemory+0x2c>)
 800a80c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a80e:	68bb      	ldr	r3, [r7, #8]
 800a810:	4a06      	ldr	r2, [pc, #24]	; (800a82c <vApplicationGetTimerTaskMemory+0x30>)
 800a812:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a81a:	601a      	str	r2, [r3, #0]
}
 800a81c:	bf00      	nop
 800a81e:	3714      	adds	r7, #20
 800a820:	46bd      	mov	sp, r7
 800a822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a826:	4770      	bx	lr
 800a828:	2000056c 	.word	0x2000056c
 800a82c:	20000614 	.word	0x20000614

0800a830 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800a830:	b580      	push	{r7, lr}
 800a832:	b082      	sub	sp, #8
 800a834:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800a836:	2020      	movs	r0, #32
 800a838:	f002 fdc6 	bl	800d3c8 <pvPortMalloc>
 800a83c:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	2b00      	cmp	r3, #0
 800a842:	d00a      	beq.n	800a85a <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	2200      	movs	r2, #0
 800a848:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	3304      	adds	r3, #4
 800a84e:	4618      	mov	r0, r3
 800a850:	f000 f983 	bl	800ab5a <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	2200      	movs	r2, #0
 800a858:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 800a85a:	687b      	ldr	r3, [r7, #4]
	}
 800a85c:	4618      	mov	r0, r3
 800a85e:	3708      	adds	r7, #8
 800a860:	46bd      	mov	sp, r7
 800a862:	bd80      	pop	{r7, pc}

0800a864 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 800a864:	b580      	push	{r7, lr}
 800a866:	b090      	sub	sp, #64	; 0x40
 800a868:	af00      	add	r7, sp, #0
 800a86a:	60f8      	str	r0, [r7, #12]
 800a86c:	60b9      	str	r1, [r7, #8]
 800a86e:	607a      	str	r2, [r7, #4]
 800a870:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800a876:	2300      	movs	r3, #0
 800a878:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800a87a:	2300      	movs	r3, #0
 800a87c:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	2b00      	cmp	r3, #0
 800a882:	d10a      	bne.n	800a89a <xEventGroupWaitBits+0x36>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a884:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a888:	f383 8811 	msr	BASEPRI, r3
 800a88c:	f3bf 8f6f 	isb	sy
 800a890:	f3bf 8f4f 	dsb	sy
 800a894:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a896:	bf00      	nop
 800a898:	e7fe      	b.n	800a898 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800a89a:	68bb      	ldr	r3, [r7, #8]
 800a89c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d00a      	beq.n	800a8ba <xEventGroupWaitBits+0x56>
	__asm volatile
 800a8a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8a8:	f383 8811 	msr	BASEPRI, r3
 800a8ac:	f3bf 8f6f 	isb	sy
 800a8b0:	f3bf 8f4f 	dsb	sy
 800a8b4:	61fb      	str	r3, [r7, #28]
}
 800a8b6:	bf00      	nop
 800a8b8:	e7fe      	b.n	800a8b8 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 800a8ba:	68bb      	ldr	r3, [r7, #8]
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d10a      	bne.n	800a8d6 <xEventGroupWaitBits+0x72>
	__asm volatile
 800a8c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8c4:	f383 8811 	msr	BASEPRI, r3
 800a8c8:	f3bf 8f6f 	isb	sy
 800a8cc:	f3bf 8f4f 	dsb	sy
 800a8d0:	61bb      	str	r3, [r7, #24]
}
 800a8d2:	bf00      	nop
 800a8d4:	e7fe      	b.n	800a8d4 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a8d6:	f001 fe01 	bl	800c4dc <xTaskGetSchedulerState>
 800a8da:	4603      	mov	r3, r0
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d102      	bne.n	800a8e6 <xEventGroupWaitBits+0x82>
 800a8e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d101      	bne.n	800a8ea <xEventGroupWaitBits+0x86>
 800a8e6:	2301      	movs	r3, #1
 800a8e8:	e000      	b.n	800a8ec <xEventGroupWaitBits+0x88>
 800a8ea:	2300      	movs	r3, #0
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d10a      	bne.n	800a906 <xEventGroupWaitBits+0xa2>
	__asm volatile
 800a8f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8f4:	f383 8811 	msr	BASEPRI, r3
 800a8f8:	f3bf 8f6f 	isb	sy
 800a8fc:	f3bf 8f4f 	dsb	sy
 800a900:	617b      	str	r3, [r7, #20]
}
 800a902:	bf00      	nop
 800a904:	e7fe      	b.n	800a904 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 800a906:	f001 f95f 	bl	800bbc8 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800a90a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 800a910:	683a      	ldr	r2, [r7, #0]
 800a912:	68b9      	ldr	r1, [r7, #8]
 800a914:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a916:	f000 f8fe 	bl	800ab16 <prvTestWaitCondition>
 800a91a:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 800a91c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d00e      	beq.n	800a940 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800a922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a924:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 800a926:	2300      	movs	r3, #0
 800a928:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d028      	beq.n	800a982 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800a930:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a932:	681a      	ldr	r2, [r3, #0]
 800a934:	68bb      	ldr	r3, [r7, #8]
 800a936:	43db      	mvns	r3, r3
 800a938:	401a      	ands	r2, r3
 800a93a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a93c:	601a      	str	r2, [r3, #0]
 800a93e:	e020      	b.n	800a982 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 800a940:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a942:	2b00      	cmp	r3, #0
 800a944:	d104      	bne.n	800a950 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 800a946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a948:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 800a94a:	2301      	movs	r3, #1
 800a94c:	633b      	str	r3, [r7, #48]	; 0x30
 800a94e:	e018      	b.n	800a982 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	2b00      	cmp	r3, #0
 800a954:	d003      	beq.n	800a95e <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800a956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a958:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a95c:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 800a95e:	683b      	ldr	r3, [r7, #0]
 800a960:	2b00      	cmp	r3, #0
 800a962:	d003      	beq.n	800a96c <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800a964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a966:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a96a:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 800a96c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a96e:	1d18      	adds	r0, r3, #4
 800a970:	68ba      	ldr	r2, [r7, #8]
 800a972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a974:	4313      	orrs	r3, r2
 800a976:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a978:	4619      	mov	r1, r3
 800a97a:	f001 fb23 	bl	800bfc4 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800a97e:	2300      	movs	r3, #0
 800a980:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800a982:	f001 f92f 	bl	800bbe4 <xTaskResumeAll>
 800a986:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 800a988:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d031      	beq.n	800a9f2 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 800a98e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a990:	2b00      	cmp	r3, #0
 800a992:	d107      	bne.n	800a9a4 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 800a994:	4b19      	ldr	r3, [pc, #100]	; (800a9fc <xEventGroupWaitBits+0x198>)
 800a996:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a99a:	601a      	str	r2, [r3, #0]
 800a99c:	f3bf 8f4f 	dsb	sy
 800a9a0:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 800a9a4:	f001 fe26 	bl	800c5f4 <uxTaskResetEventItemValue>
 800a9a8:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800a9aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a9ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d11a      	bne.n	800a9ea <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 800a9b4:	f002 fbe6 	bl	800d184 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 800a9b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800a9be:	683a      	ldr	r2, [r7, #0]
 800a9c0:	68b9      	ldr	r1, [r7, #8]
 800a9c2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800a9c4:	f000 f8a7 	bl	800ab16 <prvTestWaitCondition>
 800a9c8:	4603      	mov	r3, r0
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d009      	beq.n	800a9e2 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d006      	beq.n	800a9e2 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800a9d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9d6:	681a      	ldr	r2, [r3, #0]
 800a9d8:	68bb      	ldr	r3, [r7, #8]
 800a9da:	43db      	mvns	r3, r3
 800a9dc:	401a      	ands	r2, r3
 800a9de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9e0:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 800a9e2:	2301      	movs	r3, #1
 800a9e4:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 800a9e6:	f002 fbfd 	bl	800d1e4 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800a9ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a9ec:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a9f0:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 800a9f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a9f4:	4618      	mov	r0, r3
 800a9f6:	3740      	adds	r7, #64	; 0x40
 800a9f8:	46bd      	mov	sp, r7
 800a9fa:	bd80      	pop	{r7, pc}
 800a9fc:	e000ed04 	.word	0xe000ed04

0800aa00 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 800aa00:	b580      	push	{r7, lr}
 800aa02:	b08e      	sub	sp, #56	; 0x38
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	6078      	str	r0, [r7, #4]
 800aa08:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 800aa12:	2300      	movs	r3, #0
 800aa14:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d10a      	bne.n	800aa32 <xEventGroupSetBits+0x32>
	__asm volatile
 800aa1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa20:	f383 8811 	msr	BASEPRI, r3
 800aa24:	f3bf 8f6f 	isb	sy
 800aa28:	f3bf 8f4f 	dsb	sy
 800aa2c:	613b      	str	r3, [r7, #16]
}
 800aa2e:	bf00      	nop
 800aa30:	e7fe      	b.n	800aa30 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800aa32:	683b      	ldr	r3, [r7, #0]
 800aa34:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d00a      	beq.n	800aa52 <xEventGroupSetBits+0x52>
	__asm volatile
 800aa3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa40:	f383 8811 	msr	BASEPRI, r3
 800aa44:	f3bf 8f6f 	isb	sy
 800aa48:	f3bf 8f4f 	dsb	sy
 800aa4c:	60fb      	str	r3, [r7, #12]
}
 800aa4e:	bf00      	nop
 800aa50:	e7fe      	b.n	800aa50 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 800aa52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa54:	3304      	adds	r3, #4
 800aa56:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aa58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa5a:	3308      	adds	r3, #8
 800aa5c:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 800aa5e:	f001 f8b3 	bl	800bbc8 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 800aa62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa64:	68db      	ldr	r3, [r3, #12]
 800aa66:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 800aa68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa6a:	681a      	ldr	r2, [r3, #0]
 800aa6c:	683b      	ldr	r3, [r7, #0]
 800aa6e:	431a      	orrs	r2, r3
 800aa70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa72:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 800aa74:	e03c      	b.n	800aaf0 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 800aa76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa78:	685b      	ldr	r3, [r3, #4]
 800aa7a:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 800aa7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 800aa82:	2300      	movs	r3, #0
 800aa84:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800aa86:	69bb      	ldr	r3, [r7, #24]
 800aa88:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800aa8c:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800aa8e:	69bb      	ldr	r3, [r7, #24]
 800aa90:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800aa94:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800aa96:	697b      	ldr	r3, [r7, #20]
 800aa98:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d108      	bne.n	800aab2 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 800aaa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaa2:	681a      	ldr	r2, [r3, #0]
 800aaa4:	69bb      	ldr	r3, [r7, #24]
 800aaa6:	4013      	ands	r3, r2
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d00b      	beq.n	800aac4 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 800aaac:	2301      	movs	r3, #1
 800aaae:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aab0:	e008      	b.n	800aac4 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800aab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aab4:	681a      	ldr	r2, [r3, #0]
 800aab6:	69bb      	ldr	r3, [r7, #24]
 800aab8:	4013      	ands	r3, r2
 800aaba:	69ba      	ldr	r2, [r7, #24]
 800aabc:	429a      	cmp	r2, r3
 800aabe:	d101      	bne.n	800aac4 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 800aac0:	2301      	movs	r3, #1
 800aac2:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 800aac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d010      	beq.n	800aaec <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800aaca:	697b      	ldr	r3, [r7, #20]
 800aacc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d003      	beq.n	800aadc <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 800aad4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aad6:	69bb      	ldr	r3, [r7, #24]
 800aad8:	4313      	orrs	r3, r2
 800aada:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800aadc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800aae4:	4619      	mov	r1, r3
 800aae6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800aae8:	f001 fb38 	bl	800c15c <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 800aaec:	69fb      	ldr	r3, [r7, #28]
 800aaee:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 800aaf0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aaf2:	6a3b      	ldr	r3, [r7, #32]
 800aaf4:	429a      	cmp	r2, r3
 800aaf6:	d1be      	bne.n	800aa76 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800aaf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aafa:	681a      	ldr	r2, [r3, #0]
 800aafc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aafe:	43db      	mvns	r3, r3
 800ab00:	401a      	ands	r2, r3
 800ab02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab04:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800ab06:	f001 f86d 	bl	800bbe4 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800ab0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab0c:	681b      	ldr	r3, [r3, #0]
}
 800ab0e:	4618      	mov	r0, r3
 800ab10:	3738      	adds	r7, #56	; 0x38
 800ab12:	46bd      	mov	sp, r7
 800ab14:	bd80      	pop	{r7, pc}

0800ab16 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 800ab16:	b480      	push	{r7}
 800ab18:	b087      	sub	sp, #28
 800ab1a:	af00      	add	r7, sp, #0
 800ab1c:	60f8      	str	r0, [r7, #12]
 800ab1e:	60b9      	str	r1, [r7, #8]
 800ab20:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 800ab22:	2300      	movs	r3, #0
 800ab24:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d107      	bne.n	800ab3c <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800ab2c:	68fa      	ldr	r2, [r7, #12]
 800ab2e:	68bb      	ldr	r3, [r7, #8]
 800ab30:	4013      	ands	r3, r2
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d00a      	beq.n	800ab4c <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800ab36:	2301      	movs	r3, #1
 800ab38:	617b      	str	r3, [r7, #20]
 800ab3a:	e007      	b.n	800ab4c <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800ab3c:	68fa      	ldr	r2, [r7, #12]
 800ab3e:	68bb      	ldr	r3, [r7, #8]
 800ab40:	4013      	ands	r3, r2
 800ab42:	68ba      	ldr	r2, [r7, #8]
 800ab44:	429a      	cmp	r2, r3
 800ab46:	d101      	bne.n	800ab4c <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800ab48:	2301      	movs	r3, #1
 800ab4a:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 800ab4c:	697b      	ldr	r3, [r7, #20]
}
 800ab4e:	4618      	mov	r0, r3
 800ab50:	371c      	adds	r7, #28
 800ab52:	46bd      	mov	sp, r7
 800ab54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab58:	4770      	bx	lr

0800ab5a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ab5a:	b480      	push	{r7}
 800ab5c:	b083      	sub	sp, #12
 800ab5e:	af00      	add	r7, sp, #0
 800ab60:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	f103 0208 	add.w	r2, r3, #8
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	f04f 32ff 	mov.w	r2, #4294967295
 800ab72:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	f103 0208 	add.w	r2, r3, #8
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	f103 0208 	add.w	r2, r3, #8
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	2200      	movs	r2, #0
 800ab8c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ab8e:	bf00      	nop
 800ab90:	370c      	adds	r7, #12
 800ab92:	46bd      	mov	sp, r7
 800ab94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab98:	4770      	bx	lr

0800ab9a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ab9a:	b480      	push	{r7}
 800ab9c:	b083      	sub	sp, #12
 800ab9e:	af00      	add	r7, sp, #0
 800aba0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	2200      	movs	r2, #0
 800aba6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800aba8:	bf00      	nop
 800abaa:	370c      	adds	r7, #12
 800abac:	46bd      	mov	sp, r7
 800abae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb2:	4770      	bx	lr

0800abb4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800abb4:	b480      	push	{r7}
 800abb6:	b085      	sub	sp, #20
 800abb8:	af00      	add	r7, sp, #0
 800abba:	6078      	str	r0, [r7, #4]
 800abbc:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	685b      	ldr	r3, [r3, #4]
 800abc2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800abc4:	683b      	ldr	r3, [r7, #0]
 800abc6:	68fa      	ldr	r2, [r7, #12]
 800abc8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	689a      	ldr	r2, [r3, #8]
 800abce:	683b      	ldr	r3, [r7, #0]
 800abd0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	689b      	ldr	r3, [r3, #8]
 800abd6:	683a      	ldr	r2, [r7, #0]
 800abd8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	683a      	ldr	r2, [r7, #0]
 800abde:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800abe0:	683b      	ldr	r3, [r7, #0]
 800abe2:	687a      	ldr	r2, [r7, #4]
 800abe4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	1c5a      	adds	r2, r3, #1
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	601a      	str	r2, [r3, #0]
}
 800abf0:	bf00      	nop
 800abf2:	3714      	adds	r7, #20
 800abf4:	46bd      	mov	sp, r7
 800abf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfa:	4770      	bx	lr

0800abfc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800abfc:	b480      	push	{r7}
 800abfe:	b085      	sub	sp, #20
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	6078      	str	r0, [r7, #4]
 800ac04:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ac06:	683b      	ldr	r3, [r7, #0]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ac0c:	68bb      	ldr	r3, [r7, #8]
 800ac0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac12:	d103      	bne.n	800ac1c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	691b      	ldr	r3, [r3, #16]
 800ac18:	60fb      	str	r3, [r7, #12]
 800ac1a:	e00c      	b.n	800ac36 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	3308      	adds	r3, #8
 800ac20:	60fb      	str	r3, [r7, #12]
 800ac22:	e002      	b.n	800ac2a <vListInsert+0x2e>
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	685b      	ldr	r3, [r3, #4]
 800ac28:	60fb      	str	r3, [r7, #12]
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	685b      	ldr	r3, [r3, #4]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	68ba      	ldr	r2, [r7, #8]
 800ac32:	429a      	cmp	r2, r3
 800ac34:	d2f6      	bcs.n	800ac24 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	685a      	ldr	r2, [r3, #4]
 800ac3a:	683b      	ldr	r3, [r7, #0]
 800ac3c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ac3e:	683b      	ldr	r3, [r7, #0]
 800ac40:	685b      	ldr	r3, [r3, #4]
 800ac42:	683a      	ldr	r2, [r7, #0]
 800ac44:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ac46:	683b      	ldr	r3, [r7, #0]
 800ac48:	68fa      	ldr	r2, [r7, #12]
 800ac4a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	683a      	ldr	r2, [r7, #0]
 800ac50:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ac52:	683b      	ldr	r3, [r7, #0]
 800ac54:	687a      	ldr	r2, [r7, #4]
 800ac56:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	1c5a      	adds	r2, r3, #1
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	601a      	str	r2, [r3, #0]
}
 800ac62:	bf00      	nop
 800ac64:	3714      	adds	r7, #20
 800ac66:	46bd      	mov	sp, r7
 800ac68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6c:	4770      	bx	lr

0800ac6e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ac6e:	b480      	push	{r7}
 800ac70:	b085      	sub	sp, #20
 800ac72:	af00      	add	r7, sp, #0
 800ac74:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	691b      	ldr	r3, [r3, #16]
 800ac7a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	685b      	ldr	r3, [r3, #4]
 800ac80:	687a      	ldr	r2, [r7, #4]
 800ac82:	6892      	ldr	r2, [r2, #8]
 800ac84:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	689b      	ldr	r3, [r3, #8]
 800ac8a:	687a      	ldr	r2, [r7, #4]
 800ac8c:	6852      	ldr	r2, [r2, #4]
 800ac8e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	685b      	ldr	r3, [r3, #4]
 800ac94:	687a      	ldr	r2, [r7, #4]
 800ac96:	429a      	cmp	r2, r3
 800ac98:	d103      	bne.n	800aca2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	689a      	ldr	r2, [r3, #8]
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	2200      	movs	r2, #0
 800aca6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	1e5a      	subs	r2, r3, #1
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	681b      	ldr	r3, [r3, #0]
}
 800acb6:	4618      	mov	r0, r3
 800acb8:	3714      	adds	r7, #20
 800acba:	46bd      	mov	sp, r7
 800acbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc0:	4770      	bx	lr
	...

0800acc4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800acc4:	b580      	push	{r7, lr}
 800acc6:	b084      	sub	sp, #16
 800acc8:	af00      	add	r7, sp, #0
 800acca:	6078      	str	r0, [r7, #4]
 800accc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d10a      	bne.n	800acee <xQueueGenericReset+0x2a>
	__asm volatile
 800acd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acdc:	f383 8811 	msr	BASEPRI, r3
 800ace0:	f3bf 8f6f 	isb	sy
 800ace4:	f3bf 8f4f 	dsb	sy
 800ace8:	60bb      	str	r3, [r7, #8]
}
 800acea:	bf00      	nop
 800acec:	e7fe      	b.n	800acec <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800acee:	f002 fa49 	bl	800d184 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	681a      	ldr	r2, [r3, #0]
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800acfa:	68f9      	ldr	r1, [r7, #12]
 800acfc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800acfe:	fb01 f303 	mul.w	r3, r1, r3
 800ad02:	441a      	add	r2, r3
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	2200      	movs	r2, #0
 800ad0c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	681a      	ldr	r2, [r3, #0]
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	681a      	ldr	r2, [r3, #0]
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad1e:	3b01      	subs	r3, #1
 800ad20:	68f9      	ldr	r1, [r7, #12]
 800ad22:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ad24:	fb01 f303 	mul.w	r3, r1, r3
 800ad28:	441a      	add	r2, r3
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	22ff      	movs	r2, #255	; 0xff
 800ad32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	22ff      	movs	r2, #255	; 0xff
 800ad3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800ad3e:	683b      	ldr	r3, [r7, #0]
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d114      	bne.n	800ad6e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	691b      	ldr	r3, [r3, #16]
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d01a      	beq.n	800ad82 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	3310      	adds	r3, #16
 800ad50:	4618      	mov	r0, r3
 800ad52:	f001 f99f 	bl	800c094 <xTaskRemoveFromEventList>
 800ad56:	4603      	mov	r3, r0
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d012      	beq.n	800ad82 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ad5c:	4b0c      	ldr	r3, [pc, #48]	; (800ad90 <xQueueGenericReset+0xcc>)
 800ad5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad62:	601a      	str	r2, [r3, #0]
 800ad64:	f3bf 8f4f 	dsb	sy
 800ad68:	f3bf 8f6f 	isb	sy
 800ad6c:	e009      	b.n	800ad82 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	3310      	adds	r3, #16
 800ad72:	4618      	mov	r0, r3
 800ad74:	f7ff fef1 	bl	800ab5a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	3324      	adds	r3, #36	; 0x24
 800ad7c:	4618      	mov	r0, r3
 800ad7e:	f7ff feec 	bl	800ab5a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ad82:	f002 fa2f 	bl	800d1e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ad86:	2301      	movs	r3, #1
}
 800ad88:	4618      	mov	r0, r3
 800ad8a:	3710      	adds	r7, #16
 800ad8c:	46bd      	mov	sp, r7
 800ad8e:	bd80      	pop	{r7, pc}
 800ad90:	e000ed04 	.word	0xe000ed04

0800ad94 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800ad94:	b580      	push	{r7, lr}
 800ad96:	b08e      	sub	sp, #56	; 0x38
 800ad98:	af02      	add	r7, sp, #8
 800ad9a:	60f8      	str	r0, [r7, #12]
 800ad9c:	60b9      	str	r1, [r7, #8]
 800ad9e:	607a      	str	r2, [r7, #4]
 800ada0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d10a      	bne.n	800adbe <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800ada8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adac:	f383 8811 	msr	BASEPRI, r3
 800adb0:	f3bf 8f6f 	isb	sy
 800adb4:	f3bf 8f4f 	dsb	sy
 800adb8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800adba:	bf00      	nop
 800adbc:	e7fe      	b.n	800adbc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800adbe:	683b      	ldr	r3, [r7, #0]
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d10a      	bne.n	800adda <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800adc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adc8:	f383 8811 	msr	BASEPRI, r3
 800adcc:	f3bf 8f6f 	isb	sy
 800add0:	f3bf 8f4f 	dsb	sy
 800add4:	627b      	str	r3, [r7, #36]	; 0x24
}
 800add6:	bf00      	nop
 800add8:	e7fe      	b.n	800add8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	2b00      	cmp	r3, #0
 800adde:	d002      	beq.n	800ade6 <xQueueGenericCreateStatic+0x52>
 800ade0:	68bb      	ldr	r3, [r7, #8]
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d001      	beq.n	800adea <xQueueGenericCreateStatic+0x56>
 800ade6:	2301      	movs	r3, #1
 800ade8:	e000      	b.n	800adec <xQueueGenericCreateStatic+0x58>
 800adea:	2300      	movs	r3, #0
 800adec:	2b00      	cmp	r3, #0
 800adee:	d10a      	bne.n	800ae06 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800adf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adf4:	f383 8811 	msr	BASEPRI, r3
 800adf8:	f3bf 8f6f 	isb	sy
 800adfc:	f3bf 8f4f 	dsb	sy
 800ae00:	623b      	str	r3, [r7, #32]
}
 800ae02:	bf00      	nop
 800ae04:	e7fe      	b.n	800ae04 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d102      	bne.n	800ae12 <xQueueGenericCreateStatic+0x7e>
 800ae0c:	68bb      	ldr	r3, [r7, #8]
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d101      	bne.n	800ae16 <xQueueGenericCreateStatic+0x82>
 800ae12:	2301      	movs	r3, #1
 800ae14:	e000      	b.n	800ae18 <xQueueGenericCreateStatic+0x84>
 800ae16:	2300      	movs	r3, #0
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d10a      	bne.n	800ae32 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800ae1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae20:	f383 8811 	msr	BASEPRI, r3
 800ae24:	f3bf 8f6f 	isb	sy
 800ae28:	f3bf 8f4f 	dsb	sy
 800ae2c:	61fb      	str	r3, [r7, #28]
}
 800ae2e:	bf00      	nop
 800ae30:	e7fe      	b.n	800ae30 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ae32:	2350      	movs	r3, #80	; 0x50
 800ae34:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ae36:	697b      	ldr	r3, [r7, #20]
 800ae38:	2b50      	cmp	r3, #80	; 0x50
 800ae3a:	d00a      	beq.n	800ae52 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800ae3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae40:	f383 8811 	msr	BASEPRI, r3
 800ae44:	f3bf 8f6f 	isb	sy
 800ae48:	f3bf 8f4f 	dsb	sy
 800ae4c:	61bb      	str	r3, [r7, #24]
}
 800ae4e:	bf00      	nop
 800ae50:	e7fe      	b.n	800ae50 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ae52:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ae54:	683b      	ldr	r3, [r7, #0]
 800ae56:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800ae58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d00d      	beq.n	800ae7a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ae5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae60:	2201      	movs	r2, #1
 800ae62:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ae66:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800ae6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae6c:	9300      	str	r3, [sp, #0]
 800ae6e:	4613      	mov	r3, r2
 800ae70:	687a      	ldr	r2, [r7, #4]
 800ae72:	68b9      	ldr	r1, [r7, #8]
 800ae74:	68f8      	ldr	r0, [r7, #12]
 800ae76:	f000 f83f 	bl	800aef8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ae7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800ae7c:	4618      	mov	r0, r3
 800ae7e:	3730      	adds	r7, #48	; 0x30
 800ae80:	46bd      	mov	sp, r7
 800ae82:	bd80      	pop	{r7, pc}

0800ae84 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ae84:	b580      	push	{r7, lr}
 800ae86:	b08a      	sub	sp, #40	; 0x28
 800ae88:	af02      	add	r7, sp, #8
 800ae8a:	60f8      	str	r0, [r7, #12]
 800ae8c:	60b9      	str	r1, [r7, #8]
 800ae8e:	4613      	mov	r3, r2
 800ae90:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d10a      	bne.n	800aeae <xQueueGenericCreate+0x2a>
	__asm volatile
 800ae98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae9c:	f383 8811 	msr	BASEPRI, r3
 800aea0:	f3bf 8f6f 	isb	sy
 800aea4:	f3bf 8f4f 	dsb	sy
 800aea8:	613b      	str	r3, [r7, #16]
}
 800aeaa:	bf00      	nop
 800aeac:	e7fe      	b.n	800aeac <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	68ba      	ldr	r2, [r7, #8]
 800aeb2:	fb02 f303 	mul.w	r3, r2, r3
 800aeb6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800aeb8:	69fb      	ldr	r3, [r7, #28]
 800aeba:	3350      	adds	r3, #80	; 0x50
 800aebc:	4618      	mov	r0, r3
 800aebe:	f002 fa83 	bl	800d3c8 <pvPortMalloc>
 800aec2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800aec4:	69bb      	ldr	r3, [r7, #24]
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d011      	beq.n	800aeee <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800aeca:	69bb      	ldr	r3, [r7, #24]
 800aecc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800aece:	697b      	ldr	r3, [r7, #20]
 800aed0:	3350      	adds	r3, #80	; 0x50
 800aed2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800aed4:	69bb      	ldr	r3, [r7, #24]
 800aed6:	2200      	movs	r2, #0
 800aed8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800aedc:	79fa      	ldrb	r2, [r7, #7]
 800aede:	69bb      	ldr	r3, [r7, #24]
 800aee0:	9300      	str	r3, [sp, #0]
 800aee2:	4613      	mov	r3, r2
 800aee4:	697a      	ldr	r2, [r7, #20]
 800aee6:	68b9      	ldr	r1, [r7, #8]
 800aee8:	68f8      	ldr	r0, [r7, #12]
 800aeea:	f000 f805 	bl	800aef8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800aeee:	69bb      	ldr	r3, [r7, #24]
	}
 800aef0:	4618      	mov	r0, r3
 800aef2:	3720      	adds	r7, #32
 800aef4:	46bd      	mov	sp, r7
 800aef6:	bd80      	pop	{r7, pc}

0800aef8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800aef8:	b580      	push	{r7, lr}
 800aefa:	b084      	sub	sp, #16
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	60f8      	str	r0, [r7, #12]
 800af00:	60b9      	str	r1, [r7, #8]
 800af02:	607a      	str	r2, [r7, #4]
 800af04:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800af06:	68bb      	ldr	r3, [r7, #8]
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d103      	bne.n	800af14 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800af0c:	69bb      	ldr	r3, [r7, #24]
 800af0e:	69ba      	ldr	r2, [r7, #24]
 800af10:	601a      	str	r2, [r3, #0]
 800af12:	e002      	b.n	800af1a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800af14:	69bb      	ldr	r3, [r7, #24]
 800af16:	687a      	ldr	r2, [r7, #4]
 800af18:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800af1a:	69bb      	ldr	r3, [r7, #24]
 800af1c:	68fa      	ldr	r2, [r7, #12]
 800af1e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800af20:	69bb      	ldr	r3, [r7, #24]
 800af22:	68ba      	ldr	r2, [r7, #8]
 800af24:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800af26:	2101      	movs	r1, #1
 800af28:	69b8      	ldr	r0, [r7, #24]
 800af2a:	f7ff fecb 	bl	800acc4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800af2e:	69bb      	ldr	r3, [r7, #24]
 800af30:	78fa      	ldrb	r2, [r7, #3]
 800af32:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800af36:	bf00      	nop
 800af38:	3710      	adds	r7, #16
 800af3a:	46bd      	mov	sp, r7
 800af3c:	bd80      	pop	{r7, pc}
	...

0800af40 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800af40:	b580      	push	{r7, lr}
 800af42:	b08e      	sub	sp, #56	; 0x38
 800af44:	af00      	add	r7, sp, #0
 800af46:	60f8      	str	r0, [r7, #12]
 800af48:	60b9      	str	r1, [r7, #8]
 800af4a:	607a      	str	r2, [r7, #4]
 800af4c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800af4e:	2300      	movs	r3, #0
 800af50:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800af56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d10a      	bne.n	800af72 <xQueueGenericSend+0x32>
	__asm volatile
 800af5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af60:	f383 8811 	msr	BASEPRI, r3
 800af64:	f3bf 8f6f 	isb	sy
 800af68:	f3bf 8f4f 	dsb	sy
 800af6c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800af6e:	bf00      	nop
 800af70:	e7fe      	b.n	800af70 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800af72:	68bb      	ldr	r3, [r7, #8]
 800af74:	2b00      	cmp	r3, #0
 800af76:	d103      	bne.n	800af80 <xQueueGenericSend+0x40>
 800af78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d101      	bne.n	800af84 <xQueueGenericSend+0x44>
 800af80:	2301      	movs	r3, #1
 800af82:	e000      	b.n	800af86 <xQueueGenericSend+0x46>
 800af84:	2300      	movs	r3, #0
 800af86:	2b00      	cmp	r3, #0
 800af88:	d10a      	bne.n	800afa0 <xQueueGenericSend+0x60>
	__asm volatile
 800af8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af8e:	f383 8811 	msr	BASEPRI, r3
 800af92:	f3bf 8f6f 	isb	sy
 800af96:	f3bf 8f4f 	dsb	sy
 800af9a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800af9c:	bf00      	nop
 800af9e:	e7fe      	b.n	800af9e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800afa0:	683b      	ldr	r3, [r7, #0]
 800afa2:	2b02      	cmp	r3, #2
 800afa4:	d103      	bne.n	800afae <xQueueGenericSend+0x6e>
 800afa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800afaa:	2b01      	cmp	r3, #1
 800afac:	d101      	bne.n	800afb2 <xQueueGenericSend+0x72>
 800afae:	2301      	movs	r3, #1
 800afb0:	e000      	b.n	800afb4 <xQueueGenericSend+0x74>
 800afb2:	2300      	movs	r3, #0
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d10a      	bne.n	800afce <xQueueGenericSend+0x8e>
	__asm volatile
 800afb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afbc:	f383 8811 	msr	BASEPRI, r3
 800afc0:	f3bf 8f6f 	isb	sy
 800afc4:	f3bf 8f4f 	dsb	sy
 800afc8:	623b      	str	r3, [r7, #32]
}
 800afca:	bf00      	nop
 800afcc:	e7fe      	b.n	800afcc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800afce:	f001 fa85 	bl	800c4dc <xTaskGetSchedulerState>
 800afd2:	4603      	mov	r3, r0
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d102      	bne.n	800afde <xQueueGenericSend+0x9e>
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d101      	bne.n	800afe2 <xQueueGenericSend+0xa2>
 800afde:	2301      	movs	r3, #1
 800afe0:	e000      	b.n	800afe4 <xQueueGenericSend+0xa4>
 800afe2:	2300      	movs	r3, #0
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d10a      	bne.n	800affe <xQueueGenericSend+0xbe>
	__asm volatile
 800afe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afec:	f383 8811 	msr	BASEPRI, r3
 800aff0:	f3bf 8f6f 	isb	sy
 800aff4:	f3bf 8f4f 	dsb	sy
 800aff8:	61fb      	str	r3, [r7, #28]
}
 800affa:	bf00      	nop
 800affc:	e7fe      	b.n	800affc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800affe:	f002 f8c1 	bl	800d184 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b004:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b008:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b00a:	429a      	cmp	r2, r3
 800b00c:	d302      	bcc.n	800b014 <xQueueGenericSend+0xd4>
 800b00e:	683b      	ldr	r3, [r7, #0]
 800b010:	2b02      	cmp	r3, #2
 800b012:	d129      	bne.n	800b068 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b014:	683a      	ldr	r2, [r7, #0]
 800b016:	68b9      	ldr	r1, [r7, #8]
 800b018:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b01a:	f000 fa0b 	bl	800b434 <prvCopyDataToQueue>
 800b01e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b024:	2b00      	cmp	r3, #0
 800b026:	d010      	beq.n	800b04a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b02a:	3324      	adds	r3, #36	; 0x24
 800b02c:	4618      	mov	r0, r3
 800b02e:	f001 f831 	bl	800c094 <xTaskRemoveFromEventList>
 800b032:	4603      	mov	r3, r0
 800b034:	2b00      	cmp	r3, #0
 800b036:	d013      	beq.n	800b060 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b038:	4b3f      	ldr	r3, [pc, #252]	; (800b138 <xQueueGenericSend+0x1f8>)
 800b03a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b03e:	601a      	str	r2, [r3, #0]
 800b040:	f3bf 8f4f 	dsb	sy
 800b044:	f3bf 8f6f 	isb	sy
 800b048:	e00a      	b.n	800b060 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b04a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d007      	beq.n	800b060 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b050:	4b39      	ldr	r3, [pc, #228]	; (800b138 <xQueueGenericSend+0x1f8>)
 800b052:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b056:	601a      	str	r2, [r3, #0]
 800b058:	f3bf 8f4f 	dsb	sy
 800b05c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b060:	f002 f8c0 	bl	800d1e4 <vPortExitCritical>
				return pdPASS;
 800b064:	2301      	movs	r3, #1
 800b066:	e063      	b.n	800b130 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d103      	bne.n	800b076 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b06e:	f002 f8b9 	bl	800d1e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b072:	2300      	movs	r3, #0
 800b074:	e05c      	b.n	800b130 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b076:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d106      	bne.n	800b08a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b07c:	f107 0314 	add.w	r3, r7, #20
 800b080:	4618      	mov	r0, r3
 800b082:	f001 f8cd 	bl	800c220 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b086:	2301      	movs	r3, #1
 800b088:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b08a:	f002 f8ab 	bl	800d1e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b08e:	f000 fd9b 	bl	800bbc8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b092:	f002 f877 	bl	800d184 <vPortEnterCritical>
 800b096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b098:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b09c:	b25b      	sxtb	r3, r3
 800b09e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0a2:	d103      	bne.n	800b0ac <xQueueGenericSend+0x16c>
 800b0a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0a6:	2200      	movs	r2, #0
 800b0a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b0ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b0b2:	b25b      	sxtb	r3, r3
 800b0b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0b8:	d103      	bne.n	800b0c2 <xQueueGenericSend+0x182>
 800b0ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0bc:	2200      	movs	r2, #0
 800b0be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b0c2:	f002 f88f 	bl	800d1e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b0c6:	1d3a      	adds	r2, r7, #4
 800b0c8:	f107 0314 	add.w	r3, r7, #20
 800b0cc:	4611      	mov	r1, r2
 800b0ce:	4618      	mov	r0, r3
 800b0d0:	f001 f8bc 	bl	800c24c <xTaskCheckForTimeOut>
 800b0d4:	4603      	mov	r3, r0
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d124      	bne.n	800b124 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b0da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b0dc:	f000 faa2 	bl	800b624 <prvIsQueueFull>
 800b0e0:	4603      	mov	r3, r0
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d018      	beq.n	800b118 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b0e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0e8:	3310      	adds	r3, #16
 800b0ea:	687a      	ldr	r2, [r7, #4]
 800b0ec:	4611      	mov	r1, r2
 800b0ee:	4618      	mov	r0, r3
 800b0f0:	f000 ff44 	bl	800bf7c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b0f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b0f6:	f000 fa2d 	bl	800b554 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b0fa:	f000 fd73 	bl	800bbe4 <xTaskResumeAll>
 800b0fe:	4603      	mov	r3, r0
 800b100:	2b00      	cmp	r3, #0
 800b102:	f47f af7c 	bne.w	800affe <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800b106:	4b0c      	ldr	r3, [pc, #48]	; (800b138 <xQueueGenericSend+0x1f8>)
 800b108:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b10c:	601a      	str	r2, [r3, #0]
 800b10e:	f3bf 8f4f 	dsb	sy
 800b112:	f3bf 8f6f 	isb	sy
 800b116:	e772      	b.n	800affe <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b118:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b11a:	f000 fa1b 	bl	800b554 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b11e:	f000 fd61 	bl	800bbe4 <xTaskResumeAll>
 800b122:	e76c      	b.n	800affe <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b124:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b126:	f000 fa15 	bl	800b554 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b12a:	f000 fd5b 	bl	800bbe4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b12e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b130:	4618      	mov	r0, r3
 800b132:	3738      	adds	r7, #56	; 0x38
 800b134:	46bd      	mov	sp, r7
 800b136:	bd80      	pop	{r7, pc}
 800b138:	e000ed04 	.word	0xe000ed04

0800b13c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b13c:	b580      	push	{r7, lr}
 800b13e:	b090      	sub	sp, #64	; 0x40
 800b140:	af00      	add	r7, sp, #0
 800b142:	60f8      	str	r0, [r7, #12]
 800b144:	60b9      	str	r1, [r7, #8]
 800b146:	607a      	str	r2, [r7, #4]
 800b148:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800b14e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b150:	2b00      	cmp	r3, #0
 800b152:	d10a      	bne.n	800b16a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800b154:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b158:	f383 8811 	msr	BASEPRI, r3
 800b15c:	f3bf 8f6f 	isb	sy
 800b160:	f3bf 8f4f 	dsb	sy
 800b164:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b166:	bf00      	nop
 800b168:	e7fe      	b.n	800b168 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b16a:	68bb      	ldr	r3, [r7, #8]
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d103      	bne.n	800b178 <xQueueGenericSendFromISR+0x3c>
 800b170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b174:	2b00      	cmp	r3, #0
 800b176:	d101      	bne.n	800b17c <xQueueGenericSendFromISR+0x40>
 800b178:	2301      	movs	r3, #1
 800b17a:	e000      	b.n	800b17e <xQueueGenericSendFromISR+0x42>
 800b17c:	2300      	movs	r3, #0
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d10a      	bne.n	800b198 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800b182:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b186:	f383 8811 	msr	BASEPRI, r3
 800b18a:	f3bf 8f6f 	isb	sy
 800b18e:	f3bf 8f4f 	dsb	sy
 800b192:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b194:	bf00      	nop
 800b196:	e7fe      	b.n	800b196 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b198:	683b      	ldr	r3, [r7, #0]
 800b19a:	2b02      	cmp	r3, #2
 800b19c:	d103      	bne.n	800b1a6 <xQueueGenericSendFromISR+0x6a>
 800b19e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b1a2:	2b01      	cmp	r3, #1
 800b1a4:	d101      	bne.n	800b1aa <xQueueGenericSendFromISR+0x6e>
 800b1a6:	2301      	movs	r3, #1
 800b1a8:	e000      	b.n	800b1ac <xQueueGenericSendFromISR+0x70>
 800b1aa:	2300      	movs	r3, #0
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d10a      	bne.n	800b1c6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800b1b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1b4:	f383 8811 	msr	BASEPRI, r3
 800b1b8:	f3bf 8f6f 	isb	sy
 800b1bc:	f3bf 8f4f 	dsb	sy
 800b1c0:	623b      	str	r3, [r7, #32]
}
 800b1c2:	bf00      	nop
 800b1c4:	e7fe      	b.n	800b1c4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b1c6:	f002 f8bf 	bl	800d348 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b1ca:	f3ef 8211 	mrs	r2, BASEPRI
 800b1ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1d2:	f383 8811 	msr	BASEPRI, r3
 800b1d6:	f3bf 8f6f 	isb	sy
 800b1da:	f3bf 8f4f 	dsb	sy
 800b1de:	61fa      	str	r2, [r7, #28]
 800b1e0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b1e2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b1e4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b1e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b1ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b1ee:	429a      	cmp	r2, r3
 800b1f0:	d302      	bcc.n	800b1f8 <xQueueGenericSendFromISR+0xbc>
 800b1f2:	683b      	ldr	r3, [r7, #0]
 800b1f4:	2b02      	cmp	r3, #2
 800b1f6:	d12f      	bne.n	800b258 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b1f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b1fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b206:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b208:	683a      	ldr	r2, [r7, #0]
 800b20a:	68b9      	ldr	r1, [r7, #8]
 800b20c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b20e:	f000 f911 	bl	800b434 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b212:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800b216:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b21a:	d112      	bne.n	800b242 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b21c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b21e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b220:	2b00      	cmp	r3, #0
 800b222:	d016      	beq.n	800b252 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b226:	3324      	adds	r3, #36	; 0x24
 800b228:	4618      	mov	r0, r3
 800b22a:	f000 ff33 	bl	800c094 <xTaskRemoveFromEventList>
 800b22e:	4603      	mov	r3, r0
 800b230:	2b00      	cmp	r3, #0
 800b232:	d00e      	beq.n	800b252 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	2b00      	cmp	r3, #0
 800b238:	d00b      	beq.n	800b252 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	2201      	movs	r2, #1
 800b23e:	601a      	str	r2, [r3, #0]
 800b240:	e007      	b.n	800b252 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b242:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b246:	3301      	adds	r3, #1
 800b248:	b2db      	uxtb	r3, r3
 800b24a:	b25a      	sxtb	r2, r3
 800b24c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b24e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b252:	2301      	movs	r3, #1
 800b254:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800b256:	e001      	b.n	800b25c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b258:	2300      	movs	r3, #0
 800b25a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b25c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b25e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b260:	697b      	ldr	r3, [r7, #20]
 800b262:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b266:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b268:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b26a:	4618      	mov	r0, r3
 800b26c:	3740      	adds	r7, #64	; 0x40
 800b26e:	46bd      	mov	sp, r7
 800b270:	bd80      	pop	{r7, pc}
	...

0800b274 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b274:	b580      	push	{r7, lr}
 800b276:	b08c      	sub	sp, #48	; 0x30
 800b278:	af00      	add	r7, sp, #0
 800b27a:	60f8      	str	r0, [r7, #12]
 800b27c:	60b9      	str	r1, [r7, #8]
 800b27e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b280:	2300      	movs	r3, #0
 800b282:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d10a      	bne.n	800b2a4 <xQueueReceive+0x30>
	__asm volatile
 800b28e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b292:	f383 8811 	msr	BASEPRI, r3
 800b296:	f3bf 8f6f 	isb	sy
 800b29a:	f3bf 8f4f 	dsb	sy
 800b29e:	623b      	str	r3, [r7, #32]
}
 800b2a0:	bf00      	nop
 800b2a2:	e7fe      	b.n	800b2a2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b2a4:	68bb      	ldr	r3, [r7, #8]
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d103      	bne.n	800b2b2 <xQueueReceive+0x3e>
 800b2aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d101      	bne.n	800b2b6 <xQueueReceive+0x42>
 800b2b2:	2301      	movs	r3, #1
 800b2b4:	e000      	b.n	800b2b8 <xQueueReceive+0x44>
 800b2b6:	2300      	movs	r3, #0
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d10a      	bne.n	800b2d2 <xQueueReceive+0x5e>
	__asm volatile
 800b2bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2c0:	f383 8811 	msr	BASEPRI, r3
 800b2c4:	f3bf 8f6f 	isb	sy
 800b2c8:	f3bf 8f4f 	dsb	sy
 800b2cc:	61fb      	str	r3, [r7, #28]
}
 800b2ce:	bf00      	nop
 800b2d0:	e7fe      	b.n	800b2d0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b2d2:	f001 f903 	bl	800c4dc <xTaskGetSchedulerState>
 800b2d6:	4603      	mov	r3, r0
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d102      	bne.n	800b2e2 <xQueueReceive+0x6e>
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d101      	bne.n	800b2e6 <xQueueReceive+0x72>
 800b2e2:	2301      	movs	r3, #1
 800b2e4:	e000      	b.n	800b2e8 <xQueueReceive+0x74>
 800b2e6:	2300      	movs	r3, #0
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d10a      	bne.n	800b302 <xQueueReceive+0x8e>
	__asm volatile
 800b2ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2f0:	f383 8811 	msr	BASEPRI, r3
 800b2f4:	f3bf 8f6f 	isb	sy
 800b2f8:	f3bf 8f4f 	dsb	sy
 800b2fc:	61bb      	str	r3, [r7, #24]
}
 800b2fe:	bf00      	nop
 800b300:	e7fe      	b.n	800b300 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b302:	f001 ff3f 	bl	800d184 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b30a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b30c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d01f      	beq.n	800b352 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b312:	68b9      	ldr	r1, [r7, #8]
 800b314:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b316:	f000 f8f7 	bl	800b508 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b31a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b31c:	1e5a      	subs	r2, r3, #1
 800b31e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b320:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b324:	691b      	ldr	r3, [r3, #16]
 800b326:	2b00      	cmp	r3, #0
 800b328:	d00f      	beq.n	800b34a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b32a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b32c:	3310      	adds	r3, #16
 800b32e:	4618      	mov	r0, r3
 800b330:	f000 feb0 	bl	800c094 <xTaskRemoveFromEventList>
 800b334:	4603      	mov	r3, r0
 800b336:	2b00      	cmp	r3, #0
 800b338:	d007      	beq.n	800b34a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b33a:	4b3d      	ldr	r3, [pc, #244]	; (800b430 <xQueueReceive+0x1bc>)
 800b33c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b340:	601a      	str	r2, [r3, #0]
 800b342:	f3bf 8f4f 	dsb	sy
 800b346:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b34a:	f001 ff4b 	bl	800d1e4 <vPortExitCritical>
				return pdPASS;
 800b34e:	2301      	movs	r3, #1
 800b350:	e069      	b.n	800b426 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	2b00      	cmp	r3, #0
 800b356:	d103      	bne.n	800b360 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b358:	f001 ff44 	bl	800d1e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b35c:	2300      	movs	r3, #0
 800b35e:	e062      	b.n	800b426 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b362:	2b00      	cmp	r3, #0
 800b364:	d106      	bne.n	800b374 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b366:	f107 0310 	add.w	r3, r7, #16
 800b36a:	4618      	mov	r0, r3
 800b36c:	f000 ff58 	bl	800c220 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b370:	2301      	movs	r3, #1
 800b372:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b374:	f001 ff36 	bl	800d1e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b378:	f000 fc26 	bl	800bbc8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b37c:	f001 ff02 	bl	800d184 <vPortEnterCritical>
 800b380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b382:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b386:	b25b      	sxtb	r3, r3
 800b388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b38c:	d103      	bne.n	800b396 <xQueueReceive+0x122>
 800b38e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b390:	2200      	movs	r2, #0
 800b392:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b398:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b39c:	b25b      	sxtb	r3, r3
 800b39e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3a2:	d103      	bne.n	800b3ac <xQueueReceive+0x138>
 800b3a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3a6:	2200      	movs	r2, #0
 800b3a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b3ac:	f001 ff1a 	bl	800d1e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b3b0:	1d3a      	adds	r2, r7, #4
 800b3b2:	f107 0310 	add.w	r3, r7, #16
 800b3b6:	4611      	mov	r1, r2
 800b3b8:	4618      	mov	r0, r3
 800b3ba:	f000 ff47 	bl	800c24c <xTaskCheckForTimeOut>
 800b3be:	4603      	mov	r3, r0
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d123      	bne.n	800b40c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b3c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b3c6:	f000 f917 	bl	800b5f8 <prvIsQueueEmpty>
 800b3ca:	4603      	mov	r3, r0
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d017      	beq.n	800b400 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b3d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3d2:	3324      	adds	r3, #36	; 0x24
 800b3d4:	687a      	ldr	r2, [r7, #4]
 800b3d6:	4611      	mov	r1, r2
 800b3d8:	4618      	mov	r0, r3
 800b3da:	f000 fdcf 	bl	800bf7c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b3de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b3e0:	f000 f8b8 	bl	800b554 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b3e4:	f000 fbfe 	bl	800bbe4 <xTaskResumeAll>
 800b3e8:	4603      	mov	r3, r0
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d189      	bne.n	800b302 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800b3ee:	4b10      	ldr	r3, [pc, #64]	; (800b430 <xQueueReceive+0x1bc>)
 800b3f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b3f4:	601a      	str	r2, [r3, #0]
 800b3f6:	f3bf 8f4f 	dsb	sy
 800b3fa:	f3bf 8f6f 	isb	sy
 800b3fe:	e780      	b.n	800b302 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b400:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b402:	f000 f8a7 	bl	800b554 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b406:	f000 fbed 	bl	800bbe4 <xTaskResumeAll>
 800b40a:	e77a      	b.n	800b302 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b40c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b40e:	f000 f8a1 	bl	800b554 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b412:	f000 fbe7 	bl	800bbe4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b416:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b418:	f000 f8ee 	bl	800b5f8 <prvIsQueueEmpty>
 800b41c:	4603      	mov	r3, r0
 800b41e:	2b00      	cmp	r3, #0
 800b420:	f43f af6f 	beq.w	800b302 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b424:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b426:	4618      	mov	r0, r3
 800b428:	3730      	adds	r7, #48	; 0x30
 800b42a:	46bd      	mov	sp, r7
 800b42c:	bd80      	pop	{r7, pc}
 800b42e:	bf00      	nop
 800b430:	e000ed04 	.word	0xe000ed04

0800b434 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b434:	b580      	push	{r7, lr}
 800b436:	b086      	sub	sp, #24
 800b438:	af00      	add	r7, sp, #0
 800b43a:	60f8      	str	r0, [r7, #12]
 800b43c:	60b9      	str	r1, [r7, #8]
 800b43e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b440:	2300      	movs	r3, #0
 800b442:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b448:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d10d      	bne.n	800b46e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	2b00      	cmp	r3, #0
 800b458:	d14d      	bne.n	800b4f6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	689b      	ldr	r3, [r3, #8]
 800b45e:	4618      	mov	r0, r3
 800b460:	f001 f85a 	bl	800c518 <xTaskPriorityDisinherit>
 800b464:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	2200      	movs	r2, #0
 800b46a:	609a      	str	r2, [r3, #8]
 800b46c:	e043      	b.n	800b4f6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	2b00      	cmp	r3, #0
 800b472:	d119      	bne.n	800b4a8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	6858      	ldr	r0, [r3, #4]
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b47c:	461a      	mov	r2, r3
 800b47e:	68b9      	ldr	r1, [r7, #8]
 800b480:	f002 ff7a 	bl	800e378 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	685a      	ldr	r2, [r3, #4]
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b48c:	441a      	add	r2, r3
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	685a      	ldr	r2, [r3, #4]
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	689b      	ldr	r3, [r3, #8]
 800b49a:	429a      	cmp	r2, r3
 800b49c:	d32b      	bcc.n	800b4f6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	681a      	ldr	r2, [r3, #0]
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	605a      	str	r2, [r3, #4]
 800b4a6:	e026      	b.n	800b4f6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	68d8      	ldr	r0, [r3, #12]
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4b0:	461a      	mov	r2, r3
 800b4b2:	68b9      	ldr	r1, [r7, #8]
 800b4b4:	f002 ff60 	bl	800e378 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	68da      	ldr	r2, [r3, #12]
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4c0:	425b      	negs	r3, r3
 800b4c2:	441a      	add	r2, r3
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	68da      	ldr	r2, [r3, #12]
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	429a      	cmp	r2, r3
 800b4d2:	d207      	bcs.n	800b4e4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	689a      	ldr	r2, [r3, #8]
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4dc:	425b      	negs	r3, r3
 800b4de:	441a      	add	r2, r3
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	2b02      	cmp	r3, #2
 800b4e8:	d105      	bne.n	800b4f6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b4ea:	693b      	ldr	r3, [r7, #16]
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d002      	beq.n	800b4f6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b4f0:	693b      	ldr	r3, [r7, #16]
 800b4f2:	3b01      	subs	r3, #1
 800b4f4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b4f6:	693b      	ldr	r3, [r7, #16]
 800b4f8:	1c5a      	adds	r2, r3, #1
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b4fe:	697b      	ldr	r3, [r7, #20]
}
 800b500:	4618      	mov	r0, r3
 800b502:	3718      	adds	r7, #24
 800b504:	46bd      	mov	sp, r7
 800b506:	bd80      	pop	{r7, pc}

0800b508 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b508:	b580      	push	{r7, lr}
 800b50a:	b082      	sub	sp, #8
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	6078      	str	r0, [r7, #4]
 800b510:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b516:	2b00      	cmp	r3, #0
 800b518:	d018      	beq.n	800b54c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	68da      	ldr	r2, [r3, #12]
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b522:	441a      	add	r2, r3
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	68da      	ldr	r2, [r3, #12]
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	689b      	ldr	r3, [r3, #8]
 800b530:	429a      	cmp	r2, r3
 800b532:	d303      	bcc.n	800b53c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	681a      	ldr	r2, [r3, #0]
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	68d9      	ldr	r1, [r3, #12]
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b544:	461a      	mov	r2, r3
 800b546:	6838      	ldr	r0, [r7, #0]
 800b548:	f002 ff16 	bl	800e378 <memcpy>
	}
}
 800b54c:	bf00      	nop
 800b54e:	3708      	adds	r7, #8
 800b550:	46bd      	mov	sp, r7
 800b552:	bd80      	pop	{r7, pc}

0800b554 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b554:	b580      	push	{r7, lr}
 800b556:	b084      	sub	sp, #16
 800b558:	af00      	add	r7, sp, #0
 800b55a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b55c:	f001 fe12 	bl	800d184 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b566:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b568:	e011      	b.n	800b58e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d012      	beq.n	800b598 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	3324      	adds	r3, #36	; 0x24
 800b576:	4618      	mov	r0, r3
 800b578:	f000 fd8c 	bl	800c094 <xTaskRemoveFromEventList>
 800b57c:	4603      	mov	r3, r0
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d001      	beq.n	800b586 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b582:	f000 fec5 	bl	800c310 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b586:	7bfb      	ldrb	r3, [r7, #15]
 800b588:	3b01      	subs	r3, #1
 800b58a:	b2db      	uxtb	r3, r3
 800b58c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b58e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b592:	2b00      	cmp	r3, #0
 800b594:	dce9      	bgt.n	800b56a <prvUnlockQueue+0x16>
 800b596:	e000      	b.n	800b59a <prvUnlockQueue+0x46>
					break;
 800b598:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	22ff      	movs	r2, #255	; 0xff
 800b59e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b5a2:	f001 fe1f 	bl	800d1e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b5a6:	f001 fded 	bl	800d184 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b5b0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b5b2:	e011      	b.n	800b5d8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	691b      	ldr	r3, [r3, #16]
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d012      	beq.n	800b5e2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	3310      	adds	r3, #16
 800b5c0:	4618      	mov	r0, r3
 800b5c2:	f000 fd67 	bl	800c094 <xTaskRemoveFromEventList>
 800b5c6:	4603      	mov	r3, r0
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d001      	beq.n	800b5d0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b5cc:	f000 fea0 	bl	800c310 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b5d0:	7bbb      	ldrb	r3, [r7, #14]
 800b5d2:	3b01      	subs	r3, #1
 800b5d4:	b2db      	uxtb	r3, r3
 800b5d6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b5d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	dce9      	bgt.n	800b5b4 <prvUnlockQueue+0x60>
 800b5e0:	e000      	b.n	800b5e4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b5e2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	22ff      	movs	r2, #255	; 0xff
 800b5e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b5ec:	f001 fdfa 	bl	800d1e4 <vPortExitCritical>
}
 800b5f0:	bf00      	nop
 800b5f2:	3710      	adds	r7, #16
 800b5f4:	46bd      	mov	sp, r7
 800b5f6:	bd80      	pop	{r7, pc}

0800b5f8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b5f8:	b580      	push	{r7, lr}
 800b5fa:	b084      	sub	sp, #16
 800b5fc:	af00      	add	r7, sp, #0
 800b5fe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b600:	f001 fdc0 	bl	800d184 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d102      	bne.n	800b612 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b60c:	2301      	movs	r3, #1
 800b60e:	60fb      	str	r3, [r7, #12]
 800b610:	e001      	b.n	800b616 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b612:	2300      	movs	r3, #0
 800b614:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b616:	f001 fde5 	bl	800d1e4 <vPortExitCritical>

	return xReturn;
 800b61a:	68fb      	ldr	r3, [r7, #12]
}
 800b61c:	4618      	mov	r0, r3
 800b61e:	3710      	adds	r7, #16
 800b620:	46bd      	mov	sp, r7
 800b622:	bd80      	pop	{r7, pc}

0800b624 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b624:	b580      	push	{r7, lr}
 800b626:	b084      	sub	sp, #16
 800b628:	af00      	add	r7, sp, #0
 800b62a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b62c:	f001 fdaa 	bl	800d184 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b638:	429a      	cmp	r2, r3
 800b63a:	d102      	bne.n	800b642 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b63c:	2301      	movs	r3, #1
 800b63e:	60fb      	str	r3, [r7, #12]
 800b640:	e001      	b.n	800b646 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b642:	2300      	movs	r3, #0
 800b644:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b646:	f001 fdcd 	bl	800d1e4 <vPortExitCritical>

	return xReturn;
 800b64a:	68fb      	ldr	r3, [r7, #12]
}
 800b64c:	4618      	mov	r0, r3
 800b64e:	3710      	adds	r7, #16
 800b650:	46bd      	mov	sp, r7
 800b652:	bd80      	pop	{r7, pc}

0800b654 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b654:	b480      	push	{r7}
 800b656:	b085      	sub	sp, #20
 800b658:	af00      	add	r7, sp, #0
 800b65a:	6078      	str	r0, [r7, #4]
 800b65c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b65e:	2300      	movs	r3, #0
 800b660:	60fb      	str	r3, [r7, #12]
 800b662:	e014      	b.n	800b68e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b664:	4a0f      	ldr	r2, [pc, #60]	; (800b6a4 <vQueueAddToRegistry+0x50>)
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d10b      	bne.n	800b688 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b670:	490c      	ldr	r1, [pc, #48]	; (800b6a4 <vQueueAddToRegistry+0x50>)
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	683a      	ldr	r2, [r7, #0]
 800b676:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b67a:	4a0a      	ldr	r2, [pc, #40]	; (800b6a4 <vQueueAddToRegistry+0x50>)
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	00db      	lsls	r3, r3, #3
 800b680:	4413      	add	r3, r2
 800b682:	687a      	ldr	r2, [r7, #4]
 800b684:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b686:	e006      	b.n	800b696 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	3301      	adds	r3, #1
 800b68c:	60fb      	str	r3, [r7, #12]
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	2b07      	cmp	r3, #7
 800b692:	d9e7      	bls.n	800b664 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b694:	bf00      	nop
 800b696:	bf00      	nop
 800b698:	3714      	adds	r7, #20
 800b69a:	46bd      	mov	sp, r7
 800b69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a0:	4770      	bx	lr
 800b6a2:	bf00      	nop
 800b6a4:	20000a14 	.word	0x20000a14

0800b6a8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b6a8:	b580      	push	{r7, lr}
 800b6aa:	b086      	sub	sp, #24
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	60f8      	str	r0, [r7, #12]
 800b6b0:	60b9      	str	r1, [r7, #8]
 800b6b2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b6b8:	f001 fd64 	bl	800d184 <vPortEnterCritical>
 800b6bc:	697b      	ldr	r3, [r7, #20]
 800b6be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b6c2:	b25b      	sxtb	r3, r3
 800b6c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6c8:	d103      	bne.n	800b6d2 <vQueueWaitForMessageRestricted+0x2a>
 800b6ca:	697b      	ldr	r3, [r7, #20]
 800b6cc:	2200      	movs	r2, #0
 800b6ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b6d2:	697b      	ldr	r3, [r7, #20]
 800b6d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b6d8:	b25b      	sxtb	r3, r3
 800b6da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6de:	d103      	bne.n	800b6e8 <vQueueWaitForMessageRestricted+0x40>
 800b6e0:	697b      	ldr	r3, [r7, #20]
 800b6e2:	2200      	movs	r2, #0
 800b6e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b6e8:	f001 fd7c 	bl	800d1e4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b6ec:	697b      	ldr	r3, [r7, #20]
 800b6ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d106      	bne.n	800b702 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b6f4:	697b      	ldr	r3, [r7, #20]
 800b6f6:	3324      	adds	r3, #36	; 0x24
 800b6f8:	687a      	ldr	r2, [r7, #4]
 800b6fa:	68b9      	ldr	r1, [r7, #8]
 800b6fc:	4618      	mov	r0, r3
 800b6fe:	f000 fc9d 	bl	800c03c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b702:	6978      	ldr	r0, [r7, #20]
 800b704:	f7ff ff26 	bl	800b554 <prvUnlockQueue>
	}
 800b708:	bf00      	nop
 800b70a:	3718      	adds	r7, #24
 800b70c:	46bd      	mov	sp, r7
 800b70e:	bd80      	pop	{r7, pc}

0800b710 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b710:	b580      	push	{r7, lr}
 800b712:	b08e      	sub	sp, #56	; 0x38
 800b714:	af04      	add	r7, sp, #16
 800b716:	60f8      	str	r0, [r7, #12]
 800b718:	60b9      	str	r1, [r7, #8]
 800b71a:	607a      	str	r2, [r7, #4]
 800b71c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b71e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b720:	2b00      	cmp	r3, #0
 800b722:	d10a      	bne.n	800b73a <xTaskCreateStatic+0x2a>
	__asm volatile
 800b724:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b728:	f383 8811 	msr	BASEPRI, r3
 800b72c:	f3bf 8f6f 	isb	sy
 800b730:	f3bf 8f4f 	dsb	sy
 800b734:	623b      	str	r3, [r7, #32]
}
 800b736:	bf00      	nop
 800b738:	e7fe      	b.n	800b738 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b73a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d10a      	bne.n	800b756 <xTaskCreateStatic+0x46>
	__asm volatile
 800b740:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b744:	f383 8811 	msr	BASEPRI, r3
 800b748:	f3bf 8f6f 	isb	sy
 800b74c:	f3bf 8f4f 	dsb	sy
 800b750:	61fb      	str	r3, [r7, #28]
}
 800b752:	bf00      	nop
 800b754:	e7fe      	b.n	800b754 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b756:	23a8      	movs	r3, #168	; 0xa8
 800b758:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b75a:	693b      	ldr	r3, [r7, #16]
 800b75c:	2ba8      	cmp	r3, #168	; 0xa8
 800b75e:	d00a      	beq.n	800b776 <xTaskCreateStatic+0x66>
	__asm volatile
 800b760:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b764:	f383 8811 	msr	BASEPRI, r3
 800b768:	f3bf 8f6f 	isb	sy
 800b76c:	f3bf 8f4f 	dsb	sy
 800b770:	61bb      	str	r3, [r7, #24]
}
 800b772:	bf00      	nop
 800b774:	e7fe      	b.n	800b774 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b776:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d01e      	beq.n	800b7bc <xTaskCreateStatic+0xac>
 800b77e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b780:	2b00      	cmp	r3, #0
 800b782:	d01b      	beq.n	800b7bc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b786:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b78a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b78c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b78e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b790:	2202      	movs	r2, #2
 800b792:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b796:	2300      	movs	r3, #0
 800b798:	9303      	str	r3, [sp, #12]
 800b79a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b79c:	9302      	str	r3, [sp, #8]
 800b79e:	f107 0314 	add.w	r3, r7, #20
 800b7a2:	9301      	str	r3, [sp, #4]
 800b7a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7a6:	9300      	str	r3, [sp, #0]
 800b7a8:	683b      	ldr	r3, [r7, #0]
 800b7aa:	687a      	ldr	r2, [r7, #4]
 800b7ac:	68b9      	ldr	r1, [r7, #8]
 800b7ae:	68f8      	ldr	r0, [r7, #12]
 800b7b0:	f000 f850 	bl	800b854 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b7b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b7b6:	f000 f8f3 	bl	800b9a0 <prvAddNewTaskToReadyList>
 800b7ba:	e001      	b.n	800b7c0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800b7bc:	2300      	movs	r3, #0
 800b7be:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b7c0:	697b      	ldr	r3, [r7, #20]
	}
 800b7c2:	4618      	mov	r0, r3
 800b7c4:	3728      	adds	r7, #40	; 0x28
 800b7c6:	46bd      	mov	sp, r7
 800b7c8:	bd80      	pop	{r7, pc}

0800b7ca <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b7ca:	b580      	push	{r7, lr}
 800b7cc:	b08c      	sub	sp, #48	; 0x30
 800b7ce:	af04      	add	r7, sp, #16
 800b7d0:	60f8      	str	r0, [r7, #12]
 800b7d2:	60b9      	str	r1, [r7, #8]
 800b7d4:	603b      	str	r3, [r7, #0]
 800b7d6:	4613      	mov	r3, r2
 800b7d8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b7da:	88fb      	ldrh	r3, [r7, #6]
 800b7dc:	009b      	lsls	r3, r3, #2
 800b7de:	4618      	mov	r0, r3
 800b7e0:	f001 fdf2 	bl	800d3c8 <pvPortMalloc>
 800b7e4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b7e6:	697b      	ldr	r3, [r7, #20]
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d00e      	beq.n	800b80a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b7ec:	20a8      	movs	r0, #168	; 0xa8
 800b7ee:	f001 fdeb 	bl	800d3c8 <pvPortMalloc>
 800b7f2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b7f4:	69fb      	ldr	r3, [r7, #28]
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d003      	beq.n	800b802 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b7fa:	69fb      	ldr	r3, [r7, #28]
 800b7fc:	697a      	ldr	r2, [r7, #20]
 800b7fe:	631a      	str	r2, [r3, #48]	; 0x30
 800b800:	e005      	b.n	800b80e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b802:	6978      	ldr	r0, [r7, #20]
 800b804:	f001 feac 	bl	800d560 <vPortFree>
 800b808:	e001      	b.n	800b80e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b80a:	2300      	movs	r3, #0
 800b80c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b80e:	69fb      	ldr	r3, [r7, #28]
 800b810:	2b00      	cmp	r3, #0
 800b812:	d017      	beq.n	800b844 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b814:	69fb      	ldr	r3, [r7, #28]
 800b816:	2200      	movs	r2, #0
 800b818:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b81c:	88fa      	ldrh	r2, [r7, #6]
 800b81e:	2300      	movs	r3, #0
 800b820:	9303      	str	r3, [sp, #12]
 800b822:	69fb      	ldr	r3, [r7, #28]
 800b824:	9302      	str	r3, [sp, #8]
 800b826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b828:	9301      	str	r3, [sp, #4]
 800b82a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b82c:	9300      	str	r3, [sp, #0]
 800b82e:	683b      	ldr	r3, [r7, #0]
 800b830:	68b9      	ldr	r1, [r7, #8]
 800b832:	68f8      	ldr	r0, [r7, #12]
 800b834:	f000 f80e 	bl	800b854 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b838:	69f8      	ldr	r0, [r7, #28]
 800b83a:	f000 f8b1 	bl	800b9a0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b83e:	2301      	movs	r3, #1
 800b840:	61bb      	str	r3, [r7, #24]
 800b842:	e002      	b.n	800b84a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b844:	f04f 33ff 	mov.w	r3, #4294967295
 800b848:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b84a:	69bb      	ldr	r3, [r7, #24]
	}
 800b84c:	4618      	mov	r0, r3
 800b84e:	3720      	adds	r7, #32
 800b850:	46bd      	mov	sp, r7
 800b852:	bd80      	pop	{r7, pc}

0800b854 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b854:	b580      	push	{r7, lr}
 800b856:	b088      	sub	sp, #32
 800b858:	af00      	add	r7, sp, #0
 800b85a:	60f8      	str	r0, [r7, #12]
 800b85c:	60b9      	str	r1, [r7, #8]
 800b85e:	607a      	str	r2, [r7, #4]
 800b860:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b864:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	009b      	lsls	r3, r3, #2
 800b86a:	461a      	mov	r2, r3
 800b86c:	21a5      	movs	r1, #165	; 0xa5
 800b86e:	f002 fcff 	bl	800e270 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b874:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b87c:	3b01      	subs	r3, #1
 800b87e:	009b      	lsls	r3, r3, #2
 800b880:	4413      	add	r3, r2
 800b882:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b884:	69bb      	ldr	r3, [r7, #24]
 800b886:	f023 0307 	bic.w	r3, r3, #7
 800b88a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b88c:	69bb      	ldr	r3, [r7, #24]
 800b88e:	f003 0307 	and.w	r3, r3, #7
 800b892:	2b00      	cmp	r3, #0
 800b894:	d00a      	beq.n	800b8ac <prvInitialiseNewTask+0x58>
	__asm volatile
 800b896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b89a:	f383 8811 	msr	BASEPRI, r3
 800b89e:	f3bf 8f6f 	isb	sy
 800b8a2:	f3bf 8f4f 	dsb	sy
 800b8a6:	617b      	str	r3, [r7, #20]
}
 800b8a8:	bf00      	nop
 800b8aa:	e7fe      	b.n	800b8aa <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b8ac:	68bb      	ldr	r3, [r7, #8]
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d01f      	beq.n	800b8f2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b8b2:	2300      	movs	r3, #0
 800b8b4:	61fb      	str	r3, [r7, #28]
 800b8b6:	e012      	b.n	800b8de <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b8b8:	68ba      	ldr	r2, [r7, #8]
 800b8ba:	69fb      	ldr	r3, [r7, #28]
 800b8bc:	4413      	add	r3, r2
 800b8be:	7819      	ldrb	r1, [r3, #0]
 800b8c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b8c2:	69fb      	ldr	r3, [r7, #28]
 800b8c4:	4413      	add	r3, r2
 800b8c6:	3334      	adds	r3, #52	; 0x34
 800b8c8:	460a      	mov	r2, r1
 800b8ca:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b8cc:	68ba      	ldr	r2, [r7, #8]
 800b8ce:	69fb      	ldr	r3, [r7, #28]
 800b8d0:	4413      	add	r3, r2
 800b8d2:	781b      	ldrb	r3, [r3, #0]
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d006      	beq.n	800b8e6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b8d8:	69fb      	ldr	r3, [r7, #28]
 800b8da:	3301      	adds	r3, #1
 800b8dc:	61fb      	str	r3, [r7, #28]
 800b8de:	69fb      	ldr	r3, [r7, #28]
 800b8e0:	2b0f      	cmp	r3, #15
 800b8e2:	d9e9      	bls.n	800b8b8 <prvInitialiseNewTask+0x64>
 800b8e4:	e000      	b.n	800b8e8 <prvInitialiseNewTask+0x94>
			{
				break;
 800b8e6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b8e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8ea:	2200      	movs	r2, #0
 800b8ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b8f0:	e003      	b.n	800b8fa <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b8f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8f4:	2200      	movs	r2, #0
 800b8f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b8fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8fc:	2b37      	cmp	r3, #55	; 0x37
 800b8fe:	d901      	bls.n	800b904 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b900:	2337      	movs	r3, #55	; 0x37
 800b902:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b906:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b908:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b90a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b90c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b90e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b912:	2200      	movs	r2, #0
 800b914:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b918:	3304      	adds	r3, #4
 800b91a:	4618      	mov	r0, r3
 800b91c:	f7ff f93d 	bl	800ab9a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b922:	3318      	adds	r3, #24
 800b924:	4618      	mov	r0, r3
 800b926:	f7ff f938 	bl	800ab9a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b92a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b92c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b92e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b932:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b938:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b93a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b93c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b93e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b942:	2200      	movs	r2, #0
 800b944:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b94a:	2200      	movs	r2, #0
 800b94c:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800b950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b952:	3354      	adds	r3, #84	; 0x54
 800b954:	224c      	movs	r2, #76	; 0x4c
 800b956:	2100      	movs	r1, #0
 800b958:	4618      	mov	r0, r3
 800b95a:	f002 fc89 	bl	800e270 <memset>
 800b95e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b960:	4a0c      	ldr	r2, [pc, #48]	; (800b994 <prvInitialiseNewTask+0x140>)
 800b962:	659a      	str	r2, [r3, #88]	; 0x58
 800b964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b966:	4a0c      	ldr	r2, [pc, #48]	; (800b998 <prvInitialiseNewTask+0x144>)
 800b968:	65da      	str	r2, [r3, #92]	; 0x5c
 800b96a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b96c:	4a0b      	ldr	r2, [pc, #44]	; (800b99c <prvInitialiseNewTask+0x148>)
 800b96e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b970:	683a      	ldr	r2, [r7, #0]
 800b972:	68f9      	ldr	r1, [r7, #12]
 800b974:	69b8      	ldr	r0, [r7, #24]
 800b976:	f001 fadb 	bl	800cf30 <pxPortInitialiseStack>
 800b97a:	4602      	mov	r2, r0
 800b97c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b97e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b982:	2b00      	cmp	r3, #0
 800b984:	d002      	beq.n	800b98c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b988:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b98a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b98c:	bf00      	nop
 800b98e:	3720      	adds	r7, #32
 800b990:	46bd      	mov	sp, r7
 800b992:	bd80      	pop	{r7, pc}
 800b994:	20006cb8 	.word	0x20006cb8
 800b998:	20006d20 	.word	0x20006d20
 800b99c:	20006d88 	.word	0x20006d88

0800b9a0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b9a0:	b580      	push	{r7, lr}
 800b9a2:	b082      	sub	sp, #8
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b9a8:	f001 fbec 	bl	800d184 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b9ac:	4b2d      	ldr	r3, [pc, #180]	; (800ba64 <prvAddNewTaskToReadyList+0xc4>)
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	3301      	adds	r3, #1
 800b9b2:	4a2c      	ldr	r2, [pc, #176]	; (800ba64 <prvAddNewTaskToReadyList+0xc4>)
 800b9b4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b9b6:	4b2c      	ldr	r3, [pc, #176]	; (800ba68 <prvAddNewTaskToReadyList+0xc8>)
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d109      	bne.n	800b9d2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b9be:	4a2a      	ldr	r2, [pc, #168]	; (800ba68 <prvAddNewTaskToReadyList+0xc8>)
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b9c4:	4b27      	ldr	r3, [pc, #156]	; (800ba64 <prvAddNewTaskToReadyList+0xc4>)
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	2b01      	cmp	r3, #1
 800b9ca:	d110      	bne.n	800b9ee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b9cc:	f000 fcc4 	bl	800c358 <prvInitialiseTaskLists>
 800b9d0:	e00d      	b.n	800b9ee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b9d2:	4b26      	ldr	r3, [pc, #152]	; (800ba6c <prvAddNewTaskToReadyList+0xcc>)
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d109      	bne.n	800b9ee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b9da:	4b23      	ldr	r3, [pc, #140]	; (800ba68 <prvAddNewTaskToReadyList+0xc8>)
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9e4:	429a      	cmp	r2, r3
 800b9e6:	d802      	bhi.n	800b9ee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b9e8:	4a1f      	ldr	r2, [pc, #124]	; (800ba68 <prvAddNewTaskToReadyList+0xc8>)
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b9ee:	4b20      	ldr	r3, [pc, #128]	; (800ba70 <prvAddNewTaskToReadyList+0xd0>)
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	3301      	adds	r3, #1
 800b9f4:	4a1e      	ldr	r2, [pc, #120]	; (800ba70 <prvAddNewTaskToReadyList+0xd0>)
 800b9f6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b9f8:	4b1d      	ldr	r3, [pc, #116]	; (800ba70 <prvAddNewTaskToReadyList+0xd0>)
 800b9fa:	681a      	ldr	r2, [r3, #0]
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba04:	4b1b      	ldr	r3, [pc, #108]	; (800ba74 <prvAddNewTaskToReadyList+0xd4>)
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	429a      	cmp	r2, r3
 800ba0a:	d903      	bls.n	800ba14 <prvAddNewTaskToReadyList+0x74>
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba10:	4a18      	ldr	r2, [pc, #96]	; (800ba74 <prvAddNewTaskToReadyList+0xd4>)
 800ba12:	6013      	str	r3, [r2, #0]
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba18:	4613      	mov	r3, r2
 800ba1a:	009b      	lsls	r3, r3, #2
 800ba1c:	4413      	add	r3, r2
 800ba1e:	009b      	lsls	r3, r3, #2
 800ba20:	4a15      	ldr	r2, [pc, #84]	; (800ba78 <prvAddNewTaskToReadyList+0xd8>)
 800ba22:	441a      	add	r2, r3
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	3304      	adds	r3, #4
 800ba28:	4619      	mov	r1, r3
 800ba2a:	4610      	mov	r0, r2
 800ba2c:	f7ff f8c2 	bl	800abb4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ba30:	f001 fbd8 	bl	800d1e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ba34:	4b0d      	ldr	r3, [pc, #52]	; (800ba6c <prvAddNewTaskToReadyList+0xcc>)
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d00e      	beq.n	800ba5a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ba3c:	4b0a      	ldr	r3, [pc, #40]	; (800ba68 <prvAddNewTaskToReadyList+0xc8>)
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba46:	429a      	cmp	r2, r3
 800ba48:	d207      	bcs.n	800ba5a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ba4a:	4b0c      	ldr	r3, [pc, #48]	; (800ba7c <prvAddNewTaskToReadyList+0xdc>)
 800ba4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba50:	601a      	str	r2, [r3, #0]
 800ba52:	f3bf 8f4f 	dsb	sy
 800ba56:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ba5a:	bf00      	nop
 800ba5c:	3708      	adds	r7, #8
 800ba5e:	46bd      	mov	sp, r7
 800ba60:	bd80      	pop	{r7, pc}
 800ba62:	bf00      	nop
 800ba64:	20000f28 	.word	0x20000f28
 800ba68:	20000a54 	.word	0x20000a54
 800ba6c:	20000f34 	.word	0x20000f34
 800ba70:	20000f44 	.word	0x20000f44
 800ba74:	20000f30 	.word	0x20000f30
 800ba78:	20000a58 	.word	0x20000a58
 800ba7c:	e000ed04 	.word	0xe000ed04

0800ba80 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ba80:	b580      	push	{r7, lr}
 800ba82:	b084      	sub	sp, #16
 800ba84:	af00      	add	r7, sp, #0
 800ba86:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ba88:	2300      	movs	r3, #0
 800ba8a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d017      	beq.n	800bac2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ba92:	4b13      	ldr	r3, [pc, #76]	; (800bae0 <vTaskDelay+0x60>)
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d00a      	beq.n	800bab0 <vTaskDelay+0x30>
	__asm volatile
 800ba9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba9e:	f383 8811 	msr	BASEPRI, r3
 800baa2:	f3bf 8f6f 	isb	sy
 800baa6:	f3bf 8f4f 	dsb	sy
 800baaa:	60bb      	str	r3, [r7, #8]
}
 800baac:	bf00      	nop
 800baae:	e7fe      	b.n	800baae <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800bab0:	f000 f88a 	bl	800bbc8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800bab4:	2100      	movs	r1, #0
 800bab6:	6878      	ldr	r0, [r7, #4]
 800bab8:	f000 fe98 	bl	800c7ec <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800babc:	f000 f892 	bl	800bbe4 <xTaskResumeAll>
 800bac0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d107      	bne.n	800bad8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800bac8:	4b06      	ldr	r3, [pc, #24]	; (800bae4 <vTaskDelay+0x64>)
 800baca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bace:	601a      	str	r2, [r3, #0]
 800bad0:	f3bf 8f4f 	dsb	sy
 800bad4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bad8:	bf00      	nop
 800bada:	3710      	adds	r7, #16
 800badc:	46bd      	mov	sp, r7
 800bade:	bd80      	pop	{r7, pc}
 800bae0:	20000f50 	.word	0x20000f50
 800bae4:	e000ed04 	.word	0xe000ed04

0800bae8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800bae8:	b580      	push	{r7, lr}
 800baea:	b08a      	sub	sp, #40	; 0x28
 800baec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800baee:	2300      	movs	r3, #0
 800baf0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800baf2:	2300      	movs	r3, #0
 800baf4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800baf6:	463a      	mov	r2, r7
 800baf8:	1d39      	adds	r1, r7, #4
 800bafa:	f107 0308 	add.w	r3, r7, #8
 800bafe:	4618      	mov	r0, r3
 800bb00:	f7fe fe62 	bl	800a7c8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800bb04:	6839      	ldr	r1, [r7, #0]
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	68ba      	ldr	r2, [r7, #8]
 800bb0a:	9202      	str	r2, [sp, #8]
 800bb0c:	9301      	str	r3, [sp, #4]
 800bb0e:	2300      	movs	r3, #0
 800bb10:	9300      	str	r3, [sp, #0]
 800bb12:	2300      	movs	r3, #0
 800bb14:	460a      	mov	r2, r1
 800bb16:	4924      	ldr	r1, [pc, #144]	; (800bba8 <vTaskStartScheduler+0xc0>)
 800bb18:	4824      	ldr	r0, [pc, #144]	; (800bbac <vTaskStartScheduler+0xc4>)
 800bb1a:	f7ff fdf9 	bl	800b710 <xTaskCreateStatic>
 800bb1e:	4603      	mov	r3, r0
 800bb20:	4a23      	ldr	r2, [pc, #140]	; (800bbb0 <vTaskStartScheduler+0xc8>)
 800bb22:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800bb24:	4b22      	ldr	r3, [pc, #136]	; (800bbb0 <vTaskStartScheduler+0xc8>)
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d002      	beq.n	800bb32 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800bb2c:	2301      	movs	r3, #1
 800bb2e:	617b      	str	r3, [r7, #20]
 800bb30:	e001      	b.n	800bb36 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800bb32:	2300      	movs	r3, #0
 800bb34:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800bb36:	697b      	ldr	r3, [r7, #20]
 800bb38:	2b01      	cmp	r3, #1
 800bb3a:	d102      	bne.n	800bb42 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800bb3c:	f000 feaa 	bl	800c894 <xTimerCreateTimerTask>
 800bb40:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800bb42:	697b      	ldr	r3, [r7, #20]
 800bb44:	2b01      	cmp	r3, #1
 800bb46:	d11b      	bne.n	800bb80 <vTaskStartScheduler+0x98>
	__asm volatile
 800bb48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb4c:	f383 8811 	msr	BASEPRI, r3
 800bb50:	f3bf 8f6f 	isb	sy
 800bb54:	f3bf 8f4f 	dsb	sy
 800bb58:	613b      	str	r3, [r7, #16]
}
 800bb5a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800bb5c:	4b15      	ldr	r3, [pc, #84]	; (800bbb4 <vTaskStartScheduler+0xcc>)
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	3354      	adds	r3, #84	; 0x54
 800bb62:	4a15      	ldr	r2, [pc, #84]	; (800bbb8 <vTaskStartScheduler+0xd0>)
 800bb64:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800bb66:	4b15      	ldr	r3, [pc, #84]	; (800bbbc <vTaskStartScheduler+0xd4>)
 800bb68:	f04f 32ff 	mov.w	r2, #4294967295
 800bb6c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800bb6e:	4b14      	ldr	r3, [pc, #80]	; (800bbc0 <vTaskStartScheduler+0xd8>)
 800bb70:	2201      	movs	r2, #1
 800bb72:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800bb74:	4b13      	ldr	r3, [pc, #76]	; (800bbc4 <vTaskStartScheduler+0xdc>)
 800bb76:	2200      	movs	r2, #0
 800bb78:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800bb7a:	f001 fa61 	bl	800d040 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800bb7e:	e00e      	b.n	800bb9e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800bb80:	697b      	ldr	r3, [r7, #20]
 800bb82:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb86:	d10a      	bne.n	800bb9e <vTaskStartScheduler+0xb6>
	__asm volatile
 800bb88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb8c:	f383 8811 	msr	BASEPRI, r3
 800bb90:	f3bf 8f6f 	isb	sy
 800bb94:	f3bf 8f4f 	dsb	sy
 800bb98:	60fb      	str	r3, [r7, #12]
}
 800bb9a:	bf00      	nop
 800bb9c:	e7fe      	b.n	800bb9c <vTaskStartScheduler+0xb4>
}
 800bb9e:	bf00      	nop
 800bba0:	3718      	adds	r7, #24
 800bba2:	46bd      	mov	sp, r7
 800bba4:	bd80      	pop	{r7, pc}
 800bba6:	bf00      	nop
 800bba8:	0800e4f0 	.word	0x0800e4f0
 800bbac:	0800c329 	.word	0x0800c329
 800bbb0:	20000f4c 	.word	0x20000f4c
 800bbb4:	20000a54 	.word	0x20000a54
 800bbb8:	2000014c 	.word	0x2000014c
 800bbbc:	20000f48 	.word	0x20000f48
 800bbc0:	20000f34 	.word	0x20000f34
 800bbc4:	20000f2c 	.word	0x20000f2c

0800bbc8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800bbc8:	b480      	push	{r7}
 800bbca:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800bbcc:	4b04      	ldr	r3, [pc, #16]	; (800bbe0 <vTaskSuspendAll+0x18>)
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	3301      	adds	r3, #1
 800bbd2:	4a03      	ldr	r2, [pc, #12]	; (800bbe0 <vTaskSuspendAll+0x18>)
 800bbd4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800bbd6:	bf00      	nop
 800bbd8:	46bd      	mov	sp, r7
 800bbda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbde:	4770      	bx	lr
 800bbe0:	20000f50 	.word	0x20000f50

0800bbe4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800bbe4:	b580      	push	{r7, lr}
 800bbe6:	b084      	sub	sp, #16
 800bbe8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800bbea:	2300      	movs	r3, #0
 800bbec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800bbee:	2300      	movs	r3, #0
 800bbf0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800bbf2:	4b42      	ldr	r3, [pc, #264]	; (800bcfc <xTaskResumeAll+0x118>)
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d10a      	bne.n	800bc10 <xTaskResumeAll+0x2c>
	__asm volatile
 800bbfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbfe:	f383 8811 	msr	BASEPRI, r3
 800bc02:	f3bf 8f6f 	isb	sy
 800bc06:	f3bf 8f4f 	dsb	sy
 800bc0a:	603b      	str	r3, [r7, #0]
}
 800bc0c:	bf00      	nop
 800bc0e:	e7fe      	b.n	800bc0e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800bc10:	f001 fab8 	bl	800d184 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800bc14:	4b39      	ldr	r3, [pc, #228]	; (800bcfc <xTaskResumeAll+0x118>)
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	3b01      	subs	r3, #1
 800bc1a:	4a38      	ldr	r2, [pc, #224]	; (800bcfc <xTaskResumeAll+0x118>)
 800bc1c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bc1e:	4b37      	ldr	r3, [pc, #220]	; (800bcfc <xTaskResumeAll+0x118>)
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d162      	bne.n	800bcec <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800bc26:	4b36      	ldr	r3, [pc, #216]	; (800bd00 <xTaskResumeAll+0x11c>)
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d05e      	beq.n	800bcec <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bc2e:	e02f      	b.n	800bc90 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc30:	4b34      	ldr	r3, [pc, #208]	; (800bd04 <xTaskResumeAll+0x120>)
 800bc32:	68db      	ldr	r3, [r3, #12]
 800bc34:	68db      	ldr	r3, [r3, #12]
 800bc36:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	3318      	adds	r3, #24
 800bc3c:	4618      	mov	r0, r3
 800bc3e:	f7ff f816 	bl	800ac6e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	3304      	adds	r3, #4
 800bc46:	4618      	mov	r0, r3
 800bc48:	f7ff f811 	bl	800ac6e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc50:	4b2d      	ldr	r3, [pc, #180]	; (800bd08 <xTaskResumeAll+0x124>)
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	429a      	cmp	r2, r3
 800bc56:	d903      	bls.n	800bc60 <xTaskResumeAll+0x7c>
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc5c:	4a2a      	ldr	r2, [pc, #168]	; (800bd08 <xTaskResumeAll+0x124>)
 800bc5e:	6013      	str	r3, [r2, #0]
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc64:	4613      	mov	r3, r2
 800bc66:	009b      	lsls	r3, r3, #2
 800bc68:	4413      	add	r3, r2
 800bc6a:	009b      	lsls	r3, r3, #2
 800bc6c:	4a27      	ldr	r2, [pc, #156]	; (800bd0c <xTaskResumeAll+0x128>)
 800bc6e:	441a      	add	r2, r3
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	3304      	adds	r3, #4
 800bc74:	4619      	mov	r1, r3
 800bc76:	4610      	mov	r0, r2
 800bc78:	f7fe ff9c 	bl	800abb4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc80:	4b23      	ldr	r3, [pc, #140]	; (800bd10 <xTaskResumeAll+0x12c>)
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc86:	429a      	cmp	r2, r3
 800bc88:	d302      	bcc.n	800bc90 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800bc8a:	4b22      	ldr	r3, [pc, #136]	; (800bd14 <xTaskResumeAll+0x130>)
 800bc8c:	2201      	movs	r2, #1
 800bc8e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bc90:	4b1c      	ldr	r3, [pc, #112]	; (800bd04 <xTaskResumeAll+0x120>)
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d1cb      	bne.n	800bc30 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d001      	beq.n	800bca2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800bc9e:	f000 fbfd 	bl	800c49c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800bca2:	4b1d      	ldr	r3, [pc, #116]	; (800bd18 <xTaskResumeAll+0x134>)
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d010      	beq.n	800bcd0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800bcae:	f000 f847 	bl	800bd40 <xTaskIncrementTick>
 800bcb2:	4603      	mov	r3, r0
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d002      	beq.n	800bcbe <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800bcb8:	4b16      	ldr	r3, [pc, #88]	; (800bd14 <xTaskResumeAll+0x130>)
 800bcba:	2201      	movs	r2, #1
 800bcbc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	3b01      	subs	r3, #1
 800bcc2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d1f1      	bne.n	800bcae <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800bcca:	4b13      	ldr	r3, [pc, #76]	; (800bd18 <xTaskResumeAll+0x134>)
 800bccc:	2200      	movs	r2, #0
 800bcce:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800bcd0:	4b10      	ldr	r3, [pc, #64]	; (800bd14 <xTaskResumeAll+0x130>)
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d009      	beq.n	800bcec <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800bcd8:	2301      	movs	r3, #1
 800bcda:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800bcdc:	4b0f      	ldr	r3, [pc, #60]	; (800bd1c <xTaskResumeAll+0x138>)
 800bcde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bce2:	601a      	str	r2, [r3, #0]
 800bce4:	f3bf 8f4f 	dsb	sy
 800bce8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bcec:	f001 fa7a 	bl	800d1e4 <vPortExitCritical>

	return xAlreadyYielded;
 800bcf0:	68bb      	ldr	r3, [r7, #8]
}
 800bcf2:	4618      	mov	r0, r3
 800bcf4:	3710      	adds	r7, #16
 800bcf6:	46bd      	mov	sp, r7
 800bcf8:	bd80      	pop	{r7, pc}
 800bcfa:	bf00      	nop
 800bcfc:	20000f50 	.word	0x20000f50
 800bd00:	20000f28 	.word	0x20000f28
 800bd04:	20000ee8 	.word	0x20000ee8
 800bd08:	20000f30 	.word	0x20000f30
 800bd0c:	20000a58 	.word	0x20000a58
 800bd10:	20000a54 	.word	0x20000a54
 800bd14:	20000f3c 	.word	0x20000f3c
 800bd18:	20000f38 	.word	0x20000f38
 800bd1c:	e000ed04 	.word	0xe000ed04

0800bd20 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800bd20:	b480      	push	{r7}
 800bd22:	b083      	sub	sp, #12
 800bd24:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800bd26:	4b05      	ldr	r3, [pc, #20]	; (800bd3c <xTaskGetTickCount+0x1c>)
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800bd2c:	687b      	ldr	r3, [r7, #4]
}
 800bd2e:	4618      	mov	r0, r3
 800bd30:	370c      	adds	r7, #12
 800bd32:	46bd      	mov	sp, r7
 800bd34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd38:	4770      	bx	lr
 800bd3a:	bf00      	nop
 800bd3c:	20000f2c 	.word	0x20000f2c

0800bd40 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800bd40:	b580      	push	{r7, lr}
 800bd42:	b086      	sub	sp, #24
 800bd44:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800bd46:	2300      	movs	r3, #0
 800bd48:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bd4a:	4b4f      	ldr	r3, [pc, #316]	; (800be88 <xTaskIncrementTick+0x148>)
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	f040 808f 	bne.w	800be72 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800bd54:	4b4d      	ldr	r3, [pc, #308]	; (800be8c <xTaskIncrementTick+0x14c>)
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	3301      	adds	r3, #1
 800bd5a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800bd5c:	4a4b      	ldr	r2, [pc, #300]	; (800be8c <xTaskIncrementTick+0x14c>)
 800bd5e:	693b      	ldr	r3, [r7, #16]
 800bd60:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800bd62:	693b      	ldr	r3, [r7, #16]
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d120      	bne.n	800bdaa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800bd68:	4b49      	ldr	r3, [pc, #292]	; (800be90 <xTaskIncrementTick+0x150>)
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d00a      	beq.n	800bd88 <xTaskIncrementTick+0x48>
	__asm volatile
 800bd72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd76:	f383 8811 	msr	BASEPRI, r3
 800bd7a:	f3bf 8f6f 	isb	sy
 800bd7e:	f3bf 8f4f 	dsb	sy
 800bd82:	603b      	str	r3, [r7, #0]
}
 800bd84:	bf00      	nop
 800bd86:	e7fe      	b.n	800bd86 <xTaskIncrementTick+0x46>
 800bd88:	4b41      	ldr	r3, [pc, #260]	; (800be90 <xTaskIncrementTick+0x150>)
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	60fb      	str	r3, [r7, #12]
 800bd8e:	4b41      	ldr	r3, [pc, #260]	; (800be94 <xTaskIncrementTick+0x154>)
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	4a3f      	ldr	r2, [pc, #252]	; (800be90 <xTaskIncrementTick+0x150>)
 800bd94:	6013      	str	r3, [r2, #0]
 800bd96:	4a3f      	ldr	r2, [pc, #252]	; (800be94 <xTaskIncrementTick+0x154>)
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	6013      	str	r3, [r2, #0]
 800bd9c:	4b3e      	ldr	r3, [pc, #248]	; (800be98 <xTaskIncrementTick+0x158>)
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	3301      	adds	r3, #1
 800bda2:	4a3d      	ldr	r2, [pc, #244]	; (800be98 <xTaskIncrementTick+0x158>)
 800bda4:	6013      	str	r3, [r2, #0]
 800bda6:	f000 fb79 	bl	800c49c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800bdaa:	4b3c      	ldr	r3, [pc, #240]	; (800be9c <xTaskIncrementTick+0x15c>)
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	693a      	ldr	r2, [r7, #16]
 800bdb0:	429a      	cmp	r2, r3
 800bdb2:	d349      	bcc.n	800be48 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bdb4:	4b36      	ldr	r3, [pc, #216]	; (800be90 <xTaskIncrementTick+0x150>)
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d104      	bne.n	800bdc8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bdbe:	4b37      	ldr	r3, [pc, #220]	; (800be9c <xTaskIncrementTick+0x15c>)
 800bdc0:	f04f 32ff 	mov.w	r2, #4294967295
 800bdc4:	601a      	str	r2, [r3, #0]
					break;
 800bdc6:	e03f      	b.n	800be48 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bdc8:	4b31      	ldr	r3, [pc, #196]	; (800be90 <xTaskIncrementTick+0x150>)
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	68db      	ldr	r3, [r3, #12]
 800bdce:	68db      	ldr	r3, [r3, #12]
 800bdd0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800bdd2:	68bb      	ldr	r3, [r7, #8]
 800bdd4:	685b      	ldr	r3, [r3, #4]
 800bdd6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800bdd8:	693a      	ldr	r2, [r7, #16]
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	429a      	cmp	r2, r3
 800bdde:	d203      	bcs.n	800bde8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800bde0:	4a2e      	ldr	r2, [pc, #184]	; (800be9c <xTaskIncrementTick+0x15c>)
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800bde6:	e02f      	b.n	800be48 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bde8:	68bb      	ldr	r3, [r7, #8]
 800bdea:	3304      	adds	r3, #4
 800bdec:	4618      	mov	r0, r3
 800bdee:	f7fe ff3e 	bl	800ac6e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bdf2:	68bb      	ldr	r3, [r7, #8]
 800bdf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d004      	beq.n	800be04 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bdfa:	68bb      	ldr	r3, [r7, #8]
 800bdfc:	3318      	adds	r3, #24
 800bdfe:	4618      	mov	r0, r3
 800be00:	f7fe ff35 	bl	800ac6e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800be04:	68bb      	ldr	r3, [r7, #8]
 800be06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be08:	4b25      	ldr	r3, [pc, #148]	; (800bea0 <xTaskIncrementTick+0x160>)
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	429a      	cmp	r2, r3
 800be0e:	d903      	bls.n	800be18 <xTaskIncrementTick+0xd8>
 800be10:	68bb      	ldr	r3, [r7, #8]
 800be12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be14:	4a22      	ldr	r2, [pc, #136]	; (800bea0 <xTaskIncrementTick+0x160>)
 800be16:	6013      	str	r3, [r2, #0]
 800be18:	68bb      	ldr	r3, [r7, #8]
 800be1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be1c:	4613      	mov	r3, r2
 800be1e:	009b      	lsls	r3, r3, #2
 800be20:	4413      	add	r3, r2
 800be22:	009b      	lsls	r3, r3, #2
 800be24:	4a1f      	ldr	r2, [pc, #124]	; (800bea4 <xTaskIncrementTick+0x164>)
 800be26:	441a      	add	r2, r3
 800be28:	68bb      	ldr	r3, [r7, #8]
 800be2a:	3304      	adds	r3, #4
 800be2c:	4619      	mov	r1, r3
 800be2e:	4610      	mov	r0, r2
 800be30:	f7fe fec0 	bl	800abb4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800be34:	68bb      	ldr	r3, [r7, #8]
 800be36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be38:	4b1b      	ldr	r3, [pc, #108]	; (800bea8 <xTaskIncrementTick+0x168>)
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be3e:	429a      	cmp	r2, r3
 800be40:	d3b8      	bcc.n	800bdb4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800be42:	2301      	movs	r3, #1
 800be44:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800be46:	e7b5      	b.n	800bdb4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800be48:	4b17      	ldr	r3, [pc, #92]	; (800bea8 <xTaskIncrementTick+0x168>)
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be4e:	4915      	ldr	r1, [pc, #84]	; (800bea4 <xTaskIncrementTick+0x164>)
 800be50:	4613      	mov	r3, r2
 800be52:	009b      	lsls	r3, r3, #2
 800be54:	4413      	add	r3, r2
 800be56:	009b      	lsls	r3, r3, #2
 800be58:	440b      	add	r3, r1
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	2b01      	cmp	r3, #1
 800be5e:	d901      	bls.n	800be64 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800be60:	2301      	movs	r3, #1
 800be62:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800be64:	4b11      	ldr	r3, [pc, #68]	; (800beac <xTaskIncrementTick+0x16c>)
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d007      	beq.n	800be7c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800be6c:	2301      	movs	r3, #1
 800be6e:	617b      	str	r3, [r7, #20]
 800be70:	e004      	b.n	800be7c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800be72:	4b0f      	ldr	r3, [pc, #60]	; (800beb0 <xTaskIncrementTick+0x170>)
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	3301      	adds	r3, #1
 800be78:	4a0d      	ldr	r2, [pc, #52]	; (800beb0 <xTaskIncrementTick+0x170>)
 800be7a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800be7c:	697b      	ldr	r3, [r7, #20]
}
 800be7e:	4618      	mov	r0, r3
 800be80:	3718      	adds	r7, #24
 800be82:	46bd      	mov	sp, r7
 800be84:	bd80      	pop	{r7, pc}
 800be86:	bf00      	nop
 800be88:	20000f50 	.word	0x20000f50
 800be8c:	20000f2c 	.word	0x20000f2c
 800be90:	20000ee0 	.word	0x20000ee0
 800be94:	20000ee4 	.word	0x20000ee4
 800be98:	20000f40 	.word	0x20000f40
 800be9c:	20000f48 	.word	0x20000f48
 800bea0:	20000f30 	.word	0x20000f30
 800bea4:	20000a58 	.word	0x20000a58
 800bea8:	20000a54 	.word	0x20000a54
 800beac:	20000f3c 	.word	0x20000f3c
 800beb0:	20000f38 	.word	0x20000f38

0800beb4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800beb4:	b480      	push	{r7}
 800beb6:	b085      	sub	sp, #20
 800beb8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800beba:	4b2a      	ldr	r3, [pc, #168]	; (800bf64 <vTaskSwitchContext+0xb0>)
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d003      	beq.n	800beca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800bec2:	4b29      	ldr	r3, [pc, #164]	; (800bf68 <vTaskSwitchContext+0xb4>)
 800bec4:	2201      	movs	r2, #1
 800bec6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800bec8:	e046      	b.n	800bf58 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800beca:	4b27      	ldr	r3, [pc, #156]	; (800bf68 <vTaskSwitchContext+0xb4>)
 800becc:	2200      	movs	r2, #0
 800bece:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bed0:	4b26      	ldr	r3, [pc, #152]	; (800bf6c <vTaskSwitchContext+0xb8>)
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	60fb      	str	r3, [r7, #12]
 800bed6:	e010      	b.n	800befa <vTaskSwitchContext+0x46>
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d10a      	bne.n	800bef4 <vTaskSwitchContext+0x40>
	__asm volatile
 800bede:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bee2:	f383 8811 	msr	BASEPRI, r3
 800bee6:	f3bf 8f6f 	isb	sy
 800beea:	f3bf 8f4f 	dsb	sy
 800beee:	607b      	str	r3, [r7, #4]
}
 800bef0:	bf00      	nop
 800bef2:	e7fe      	b.n	800bef2 <vTaskSwitchContext+0x3e>
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	3b01      	subs	r3, #1
 800bef8:	60fb      	str	r3, [r7, #12]
 800befa:	491d      	ldr	r1, [pc, #116]	; (800bf70 <vTaskSwitchContext+0xbc>)
 800befc:	68fa      	ldr	r2, [r7, #12]
 800befe:	4613      	mov	r3, r2
 800bf00:	009b      	lsls	r3, r3, #2
 800bf02:	4413      	add	r3, r2
 800bf04:	009b      	lsls	r3, r3, #2
 800bf06:	440b      	add	r3, r1
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d0e4      	beq.n	800bed8 <vTaskSwitchContext+0x24>
 800bf0e:	68fa      	ldr	r2, [r7, #12]
 800bf10:	4613      	mov	r3, r2
 800bf12:	009b      	lsls	r3, r3, #2
 800bf14:	4413      	add	r3, r2
 800bf16:	009b      	lsls	r3, r3, #2
 800bf18:	4a15      	ldr	r2, [pc, #84]	; (800bf70 <vTaskSwitchContext+0xbc>)
 800bf1a:	4413      	add	r3, r2
 800bf1c:	60bb      	str	r3, [r7, #8]
 800bf1e:	68bb      	ldr	r3, [r7, #8]
 800bf20:	685b      	ldr	r3, [r3, #4]
 800bf22:	685a      	ldr	r2, [r3, #4]
 800bf24:	68bb      	ldr	r3, [r7, #8]
 800bf26:	605a      	str	r2, [r3, #4]
 800bf28:	68bb      	ldr	r3, [r7, #8]
 800bf2a:	685a      	ldr	r2, [r3, #4]
 800bf2c:	68bb      	ldr	r3, [r7, #8]
 800bf2e:	3308      	adds	r3, #8
 800bf30:	429a      	cmp	r2, r3
 800bf32:	d104      	bne.n	800bf3e <vTaskSwitchContext+0x8a>
 800bf34:	68bb      	ldr	r3, [r7, #8]
 800bf36:	685b      	ldr	r3, [r3, #4]
 800bf38:	685a      	ldr	r2, [r3, #4]
 800bf3a:	68bb      	ldr	r3, [r7, #8]
 800bf3c:	605a      	str	r2, [r3, #4]
 800bf3e:	68bb      	ldr	r3, [r7, #8]
 800bf40:	685b      	ldr	r3, [r3, #4]
 800bf42:	68db      	ldr	r3, [r3, #12]
 800bf44:	4a0b      	ldr	r2, [pc, #44]	; (800bf74 <vTaskSwitchContext+0xc0>)
 800bf46:	6013      	str	r3, [r2, #0]
 800bf48:	4a08      	ldr	r2, [pc, #32]	; (800bf6c <vTaskSwitchContext+0xb8>)
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800bf4e:	4b09      	ldr	r3, [pc, #36]	; (800bf74 <vTaskSwitchContext+0xc0>)
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	3354      	adds	r3, #84	; 0x54
 800bf54:	4a08      	ldr	r2, [pc, #32]	; (800bf78 <vTaskSwitchContext+0xc4>)
 800bf56:	6013      	str	r3, [r2, #0]
}
 800bf58:	bf00      	nop
 800bf5a:	3714      	adds	r7, #20
 800bf5c:	46bd      	mov	sp, r7
 800bf5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf62:	4770      	bx	lr
 800bf64:	20000f50 	.word	0x20000f50
 800bf68:	20000f3c 	.word	0x20000f3c
 800bf6c:	20000f30 	.word	0x20000f30
 800bf70:	20000a58 	.word	0x20000a58
 800bf74:	20000a54 	.word	0x20000a54
 800bf78:	2000014c 	.word	0x2000014c

0800bf7c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800bf7c:	b580      	push	{r7, lr}
 800bf7e:	b084      	sub	sp, #16
 800bf80:	af00      	add	r7, sp, #0
 800bf82:	6078      	str	r0, [r7, #4]
 800bf84:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d10a      	bne.n	800bfa2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800bf8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf90:	f383 8811 	msr	BASEPRI, r3
 800bf94:	f3bf 8f6f 	isb	sy
 800bf98:	f3bf 8f4f 	dsb	sy
 800bf9c:	60fb      	str	r3, [r7, #12]
}
 800bf9e:	bf00      	nop
 800bfa0:	e7fe      	b.n	800bfa0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bfa2:	4b07      	ldr	r3, [pc, #28]	; (800bfc0 <vTaskPlaceOnEventList+0x44>)
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	3318      	adds	r3, #24
 800bfa8:	4619      	mov	r1, r3
 800bfaa:	6878      	ldr	r0, [r7, #4]
 800bfac:	f7fe fe26 	bl	800abfc <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bfb0:	2101      	movs	r1, #1
 800bfb2:	6838      	ldr	r0, [r7, #0]
 800bfb4:	f000 fc1a 	bl	800c7ec <prvAddCurrentTaskToDelayedList>
}
 800bfb8:	bf00      	nop
 800bfba:	3710      	adds	r7, #16
 800bfbc:	46bd      	mov	sp, r7
 800bfbe:	bd80      	pop	{r7, pc}
 800bfc0:	20000a54 	.word	0x20000a54

0800bfc4 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 800bfc4:	b580      	push	{r7, lr}
 800bfc6:	b086      	sub	sp, #24
 800bfc8:	af00      	add	r7, sp, #0
 800bfca:	60f8      	str	r0, [r7, #12]
 800bfcc:	60b9      	str	r1, [r7, #8]
 800bfce:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d10a      	bne.n	800bfec <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 800bfd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfda:	f383 8811 	msr	BASEPRI, r3
 800bfde:	f3bf 8f6f 	isb	sy
 800bfe2:	f3bf 8f4f 	dsb	sy
 800bfe6:	617b      	str	r3, [r7, #20]
}
 800bfe8:	bf00      	nop
 800bfea:	e7fe      	b.n	800bfea <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 800bfec:	4b11      	ldr	r3, [pc, #68]	; (800c034 <vTaskPlaceOnUnorderedEventList+0x70>)
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d10a      	bne.n	800c00a <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 800bff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bff8:	f383 8811 	msr	BASEPRI, r3
 800bffc:	f3bf 8f6f 	isb	sy
 800c000:	f3bf 8f4f 	dsb	sy
 800c004:	613b      	str	r3, [r7, #16]
}
 800c006:	bf00      	nop
 800c008:	e7fe      	b.n	800c008 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800c00a:	4b0b      	ldr	r3, [pc, #44]	; (800c038 <vTaskPlaceOnUnorderedEventList+0x74>)
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	68ba      	ldr	r2, [r7, #8]
 800c010:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800c014:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c016:	4b08      	ldr	r3, [pc, #32]	; (800c038 <vTaskPlaceOnUnorderedEventList+0x74>)
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	3318      	adds	r3, #24
 800c01c:	4619      	mov	r1, r3
 800c01e:	68f8      	ldr	r0, [r7, #12]
 800c020:	f7fe fdc8 	bl	800abb4 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c024:	2101      	movs	r1, #1
 800c026:	6878      	ldr	r0, [r7, #4]
 800c028:	f000 fbe0 	bl	800c7ec <prvAddCurrentTaskToDelayedList>
}
 800c02c:	bf00      	nop
 800c02e:	3718      	adds	r7, #24
 800c030:	46bd      	mov	sp, r7
 800c032:	bd80      	pop	{r7, pc}
 800c034:	20000f50 	.word	0x20000f50
 800c038:	20000a54 	.word	0x20000a54

0800c03c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c03c:	b580      	push	{r7, lr}
 800c03e:	b086      	sub	sp, #24
 800c040:	af00      	add	r7, sp, #0
 800c042:	60f8      	str	r0, [r7, #12]
 800c044:	60b9      	str	r1, [r7, #8]
 800c046:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d10a      	bne.n	800c064 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800c04e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c052:	f383 8811 	msr	BASEPRI, r3
 800c056:	f3bf 8f6f 	isb	sy
 800c05a:	f3bf 8f4f 	dsb	sy
 800c05e:	617b      	str	r3, [r7, #20]
}
 800c060:	bf00      	nop
 800c062:	e7fe      	b.n	800c062 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c064:	4b0a      	ldr	r3, [pc, #40]	; (800c090 <vTaskPlaceOnEventListRestricted+0x54>)
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	3318      	adds	r3, #24
 800c06a:	4619      	mov	r1, r3
 800c06c:	68f8      	ldr	r0, [r7, #12]
 800c06e:	f7fe fda1 	bl	800abb4 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	2b00      	cmp	r3, #0
 800c076:	d002      	beq.n	800c07e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800c078:	f04f 33ff 	mov.w	r3, #4294967295
 800c07c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c07e:	6879      	ldr	r1, [r7, #4]
 800c080:	68b8      	ldr	r0, [r7, #8]
 800c082:	f000 fbb3 	bl	800c7ec <prvAddCurrentTaskToDelayedList>
	}
 800c086:	bf00      	nop
 800c088:	3718      	adds	r7, #24
 800c08a:	46bd      	mov	sp, r7
 800c08c:	bd80      	pop	{r7, pc}
 800c08e:	bf00      	nop
 800c090:	20000a54 	.word	0x20000a54

0800c094 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c094:	b580      	push	{r7, lr}
 800c096:	b086      	sub	sp, #24
 800c098:	af00      	add	r7, sp, #0
 800c09a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	68db      	ldr	r3, [r3, #12]
 800c0a0:	68db      	ldr	r3, [r3, #12]
 800c0a2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c0a4:	693b      	ldr	r3, [r7, #16]
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d10a      	bne.n	800c0c0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800c0aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0ae:	f383 8811 	msr	BASEPRI, r3
 800c0b2:	f3bf 8f6f 	isb	sy
 800c0b6:	f3bf 8f4f 	dsb	sy
 800c0ba:	60fb      	str	r3, [r7, #12]
}
 800c0bc:	bf00      	nop
 800c0be:	e7fe      	b.n	800c0be <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c0c0:	693b      	ldr	r3, [r7, #16]
 800c0c2:	3318      	adds	r3, #24
 800c0c4:	4618      	mov	r0, r3
 800c0c6:	f7fe fdd2 	bl	800ac6e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c0ca:	4b1e      	ldr	r3, [pc, #120]	; (800c144 <xTaskRemoveFromEventList+0xb0>)
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d11d      	bne.n	800c10e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c0d2:	693b      	ldr	r3, [r7, #16]
 800c0d4:	3304      	adds	r3, #4
 800c0d6:	4618      	mov	r0, r3
 800c0d8:	f7fe fdc9 	bl	800ac6e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c0dc:	693b      	ldr	r3, [r7, #16]
 800c0de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0e0:	4b19      	ldr	r3, [pc, #100]	; (800c148 <xTaskRemoveFromEventList+0xb4>)
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	429a      	cmp	r2, r3
 800c0e6:	d903      	bls.n	800c0f0 <xTaskRemoveFromEventList+0x5c>
 800c0e8:	693b      	ldr	r3, [r7, #16]
 800c0ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0ec:	4a16      	ldr	r2, [pc, #88]	; (800c148 <xTaskRemoveFromEventList+0xb4>)
 800c0ee:	6013      	str	r3, [r2, #0]
 800c0f0:	693b      	ldr	r3, [r7, #16]
 800c0f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0f4:	4613      	mov	r3, r2
 800c0f6:	009b      	lsls	r3, r3, #2
 800c0f8:	4413      	add	r3, r2
 800c0fa:	009b      	lsls	r3, r3, #2
 800c0fc:	4a13      	ldr	r2, [pc, #76]	; (800c14c <xTaskRemoveFromEventList+0xb8>)
 800c0fe:	441a      	add	r2, r3
 800c100:	693b      	ldr	r3, [r7, #16]
 800c102:	3304      	adds	r3, #4
 800c104:	4619      	mov	r1, r3
 800c106:	4610      	mov	r0, r2
 800c108:	f7fe fd54 	bl	800abb4 <vListInsertEnd>
 800c10c:	e005      	b.n	800c11a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c10e:	693b      	ldr	r3, [r7, #16]
 800c110:	3318      	adds	r3, #24
 800c112:	4619      	mov	r1, r3
 800c114:	480e      	ldr	r0, [pc, #56]	; (800c150 <xTaskRemoveFromEventList+0xbc>)
 800c116:	f7fe fd4d 	bl	800abb4 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c11a:	693b      	ldr	r3, [r7, #16]
 800c11c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c11e:	4b0d      	ldr	r3, [pc, #52]	; (800c154 <xTaskRemoveFromEventList+0xc0>)
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c124:	429a      	cmp	r2, r3
 800c126:	d905      	bls.n	800c134 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c128:	2301      	movs	r3, #1
 800c12a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c12c:	4b0a      	ldr	r3, [pc, #40]	; (800c158 <xTaskRemoveFromEventList+0xc4>)
 800c12e:	2201      	movs	r2, #1
 800c130:	601a      	str	r2, [r3, #0]
 800c132:	e001      	b.n	800c138 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800c134:	2300      	movs	r3, #0
 800c136:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c138:	697b      	ldr	r3, [r7, #20]
}
 800c13a:	4618      	mov	r0, r3
 800c13c:	3718      	adds	r7, #24
 800c13e:	46bd      	mov	sp, r7
 800c140:	bd80      	pop	{r7, pc}
 800c142:	bf00      	nop
 800c144:	20000f50 	.word	0x20000f50
 800c148:	20000f30 	.word	0x20000f30
 800c14c:	20000a58 	.word	0x20000a58
 800c150:	20000ee8 	.word	0x20000ee8
 800c154:	20000a54 	.word	0x20000a54
 800c158:	20000f3c 	.word	0x20000f3c

0800c15c <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 800c15c:	b580      	push	{r7, lr}
 800c15e:	b086      	sub	sp, #24
 800c160:	af00      	add	r7, sp, #0
 800c162:	6078      	str	r0, [r7, #4]
 800c164:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800c166:	4b29      	ldr	r3, [pc, #164]	; (800c20c <vTaskRemoveFromUnorderedEventList+0xb0>)
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d10a      	bne.n	800c184 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 800c16e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c172:	f383 8811 	msr	BASEPRI, r3
 800c176:	f3bf 8f6f 	isb	sy
 800c17a:	f3bf 8f4f 	dsb	sy
 800c17e:	613b      	str	r3, [r7, #16]
}
 800c180:	bf00      	nop
 800c182:	e7fe      	b.n	800c182 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800c184:	683b      	ldr	r3, [r7, #0]
 800c186:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	68db      	ldr	r3, [r3, #12]
 800c192:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800c194:	697b      	ldr	r3, [r7, #20]
 800c196:	2b00      	cmp	r3, #0
 800c198:	d10a      	bne.n	800c1b0 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 800c19a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c19e:	f383 8811 	msr	BASEPRI, r3
 800c1a2:	f3bf 8f6f 	isb	sy
 800c1a6:	f3bf 8f4f 	dsb	sy
 800c1aa:	60fb      	str	r3, [r7, #12]
}
 800c1ac:	bf00      	nop
 800c1ae:	e7fe      	b.n	800c1ae <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 800c1b0:	6878      	ldr	r0, [r7, #4]
 800c1b2:	f7fe fd5c 	bl	800ac6e <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c1b6:	697b      	ldr	r3, [r7, #20]
 800c1b8:	3304      	adds	r3, #4
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	f7fe fd57 	bl	800ac6e <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800c1c0:	697b      	ldr	r3, [r7, #20]
 800c1c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1c4:	4b12      	ldr	r3, [pc, #72]	; (800c210 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	429a      	cmp	r2, r3
 800c1ca:	d903      	bls.n	800c1d4 <vTaskRemoveFromUnorderedEventList+0x78>
 800c1cc:	697b      	ldr	r3, [r7, #20]
 800c1ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1d0:	4a0f      	ldr	r2, [pc, #60]	; (800c210 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800c1d2:	6013      	str	r3, [r2, #0]
 800c1d4:	697b      	ldr	r3, [r7, #20]
 800c1d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1d8:	4613      	mov	r3, r2
 800c1da:	009b      	lsls	r3, r3, #2
 800c1dc:	4413      	add	r3, r2
 800c1de:	009b      	lsls	r3, r3, #2
 800c1e0:	4a0c      	ldr	r2, [pc, #48]	; (800c214 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800c1e2:	441a      	add	r2, r3
 800c1e4:	697b      	ldr	r3, [r7, #20]
 800c1e6:	3304      	adds	r3, #4
 800c1e8:	4619      	mov	r1, r3
 800c1ea:	4610      	mov	r0, r2
 800c1ec:	f7fe fce2 	bl	800abb4 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c1f0:	697b      	ldr	r3, [r7, #20]
 800c1f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1f4:	4b08      	ldr	r3, [pc, #32]	; (800c218 <vTaskRemoveFromUnorderedEventList+0xbc>)
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1fa:	429a      	cmp	r2, r3
 800c1fc:	d902      	bls.n	800c204 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800c1fe:	4b07      	ldr	r3, [pc, #28]	; (800c21c <vTaskRemoveFromUnorderedEventList+0xc0>)
 800c200:	2201      	movs	r2, #1
 800c202:	601a      	str	r2, [r3, #0]
	}
}
 800c204:	bf00      	nop
 800c206:	3718      	adds	r7, #24
 800c208:	46bd      	mov	sp, r7
 800c20a:	bd80      	pop	{r7, pc}
 800c20c:	20000f50 	.word	0x20000f50
 800c210:	20000f30 	.word	0x20000f30
 800c214:	20000a58 	.word	0x20000a58
 800c218:	20000a54 	.word	0x20000a54
 800c21c:	20000f3c 	.word	0x20000f3c

0800c220 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c220:	b480      	push	{r7}
 800c222:	b083      	sub	sp, #12
 800c224:	af00      	add	r7, sp, #0
 800c226:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c228:	4b06      	ldr	r3, [pc, #24]	; (800c244 <vTaskInternalSetTimeOutState+0x24>)
 800c22a:	681a      	ldr	r2, [r3, #0]
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c230:	4b05      	ldr	r3, [pc, #20]	; (800c248 <vTaskInternalSetTimeOutState+0x28>)
 800c232:	681a      	ldr	r2, [r3, #0]
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	605a      	str	r2, [r3, #4]
}
 800c238:	bf00      	nop
 800c23a:	370c      	adds	r7, #12
 800c23c:	46bd      	mov	sp, r7
 800c23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c242:	4770      	bx	lr
 800c244:	20000f40 	.word	0x20000f40
 800c248:	20000f2c 	.word	0x20000f2c

0800c24c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c24c:	b580      	push	{r7, lr}
 800c24e:	b088      	sub	sp, #32
 800c250:	af00      	add	r7, sp, #0
 800c252:	6078      	str	r0, [r7, #4]
 800c254:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d10a      	bne.n	800c272 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800c25c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c260:	f383 8811 	msr	BASEPRI, r3
 800c264:	f3bf 8f6f 	isb	sy
 800c268:	f3bf 8f4f 	dsb	sy
 800c26c:	613b      	str	r3, [r7, #16]
}
 800c26e:	bf00      	nop
 800c270:	e7fe      	b.n	800c270 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c272:	683b      	ldr	r3, [r7, #0]
 800c274:	2b00      	cmp	r3, #0
 800c276:	d10a      	bne.n	800c28e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800c278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c27c:	f383 8811 	msr	BASEPRI, r3
 800c280:	f3bf 8f6f 	isb	sy
 800c284:	f3bf 8f4f 	dsb	sy
 800c288:	60fb      	str	r3, [r7, #12]
}
 800c28a:	bf00      	nop
 800c28c:	e7fe      	b.n	800c28c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800c28e:	f000 ff79 	bl	800d184 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c292:	4b1d      	ldr	r3, [pc, #116]	; (800c308 <xTaskCheckForTimeOut+0xbc>)
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	685b      	ldr	r3, [r3, #4]
 800c29c:	69ba      	ldr	r2, [r7, #24]
 800c29e:	1ad3      	subs	r3, r2, r3
 800c2a0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c2a2:	683b      	ldr	r3, [r7, #0]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2aa:	d102      	bne.n	800c2b2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c2ac:	2300      	movs	r3, #0
 800c2ae:	61fb      	str	r3, [r7, #28]
 800c2b0:	e023      	b.n	800c2fa <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	681a      	ldr	r2, [r3, #0]
 800c2b6:	4b15      	ldr	r3, [pc, #84]	; (800c30c <xTaskCheckForTimeOut+0xc0>)
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	429a      	cmp	r2, r3
 800c2bc:	d007      	beq.n	800c2ce <xTaskCheckForTimeOut+0x82>
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	685b      	ldr	r3, [r3, #4]
 800c2c2:	69ba      	ldr	r2, [r7, #24]
 800c2c4:	429a      	cmp	r2, r3
 800c2c6:	d302      	bcc.n	800c2ce <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c2c8:	2301      	movs	r3, #1
 800c2ca:	61fb      	str	r3, [r7, #28]
 800c2cc:	e015      	b.n	800c2fa <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c2ce:	683b      	ldr	r3, [r7, #0]
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	697a      	ldr	r2, [r7, #20]
 800c2d4:	429a      	cmp	r2, r3
 800c2d6:	d20b      	bcs.n	800c2f0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c2d8:	683b      	ldr	r3, [r7, #0]
 800c2da:	681a      	ldr	r2, [r3, #0]
 800c2dc:	697b      	ldr	r3, [r7, #20]
 800c2de:	1ad2      	subs	r2, r2, r3
 800c2e0:	683b      	ldr	r3, [r7, #0]
 800c2e2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c2e4:	6878      	ldr	r0, [r7, #4]
 800c2e6:	f7ff ff9b 	bl	800c220 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c2ea:	2300      	movs	r3, #0
 800c2ec:	61fb      	str	r3, [r7, #28]
 800c2ee:	e004      	b.n	800c2fa <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800c2f0:	683b      	ldr	r3, [r7, #0]
 800c2f2:	2200      	movs	r2, #0
 800c2f4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c2f6:	2301      	movs	r3, #1
 800c2f8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c2fa:	f000 ff73 	bl	800d1e4 <vPortExitCritical>

	return xReturn;
 800c2fe:	69fb      	ldr	r3, [r7, #28]
}
 800c300:	4618      	mov	r0, r3
 800c302:	3720      	adds	r7, #32
 800c304:	46bd      	mov	sp, r7
 800c306:	bd80      	pop	{r7, pc}
 800c308:	20000f2c 	.word	0x20000f2c
 800c30c:	20000f40 	.word	0x20000f40

0800c310 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c310:	b480      	push	{r7}
 800c312:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c314:	4b03      	ldr	r3, [pc, #12]	; (800c324 <vTaskMissedYield+0x14>)
 800c316:	2201      	movs	r2, #1
 800c318:	601a      	str	r2, [r3, #0]
}
 800c31a:	bf00      	nop
 800c31c:	46bd      	mov	sp, r7
 800c31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c322:	4770      	bx	lr
 800c324:	20000f3c 	.word	0x20000f3c

0800c328 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c328:	b580      	push	{r7, lr}
 800c32a:	b082      	sub	sp, #8
 800c32c:	af00      	add	r7, sp, #0
 800c32e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c330:	f000 f852 	bl	800c3d8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c334:	4b06      	ldr	r3, [pc, #24]	; (800c350 <prvIdleTask+0x28>)
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	2b01      	cmp	r3, #1
 800c33a:	d9f9      	bls.n	800c330 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c33c:	4b05      	ldr	r3, [pc, #20]	; (800c354 <prvIdleTask+0x2c>)
 800c33e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c342:	601a      	str	r2, [r3, #0]
 800c344:	f3bf 8f4f 	dsb	sy
 800c348:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c34c:	e7f0      	b.n	800c330 <prvIdleTask+0x8>
 800c34e:	bf00      	nop
 800c350:	20000a58 	.word	0x20000a58
 800c354:	e000ed04 	.word	0xe000ed04

0800c358 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c358:	b580      	push	{r7, lr}
 800c35a:	b082      	sub	sp, #8
 800c35c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c35e:	2300      	movs	r3, #0
 800c360:	607b      	str	r3, [r7, #4]
 800c362:	e00c      	b.n	800c37e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c364:	687a      	ldr	r2, [r7, #4]
 800c366:	4613      	mov	r3, r2
 800c368:	009b      	lsls	r3, r3, #2
 800c36a:	4413      	add	r3, r2
 800c36c:	009b      	lsls	r3, r3, #2
 800c36e:	4a12      	ldr	r2, [pc, #72]	; (800c3b8 <prvInitialiseTaskLists+0x60>)
 800c370:	4413      	add	r3, r2
 800c372:	4618      	mov	r0, r3
 800c374:	f7fe fbf1 	bl	800ab5a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	3301      	adds	r3, #1
 800c37c:	607b      	str	r3, [r7, #4]
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	2b37      	cmp	r3, #55	; 0x37
 800c382:	d9ef      	bls.n	800c364 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c384:	480d      	ldr	r0, [pc, #52]	; (800c3bc <prvInitialiseTaskLists+0x64>)
 800c386:	f7fe fbe8 	bl	800ab5a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c38a:	480d      	ldr	r0, [pc, #52]	; (800c3c0 <prvInitialiseTaskLists+0x68>)
 800c38c:	f7fe fbe5 	bl	800ab5a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c390:	480c      	ldr	r0, [pc, #48]	; (800c3c4 <prvInitialiseTaskLists+0x6c>)
 800c392:	f7fe fbe2 	bl	800ab5a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c396:	480c      	ldr	r0, [pc, #48]	; (800c3c8 <prvInitialiseTaskLists+0x70>)
 800c398:	f7fe fbdf 	bl	800ab5a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c39c:	480b      	ldr	r0, [pc, #44]	; (800c3cc <prvInitialiseTaskLists+0x74>)
 800c39e:	f7fe fbdc 	bl	800ab5a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c3a2:	4b0b      	ldr	r3, [pc, #44]	; (800c3d0 <prvInitialiseTaskLists+0x78>)
 800c3a4:	4a05      	ldr	r2, [pc, #20]	; (800c3bc <prvInitialiseTaskLists+0x64>)
 800c3a6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c3a8:	4b0a      	ldr	r3, [pc, #40]	; (800c3d4 <prvInitialiseTaskLists+0x7c>)
 800c3aa:	4a05      	ldr	r2, [pc, #20]	; (800c3c0 <prvInitialiseTaskLists+0x68>)
 800c3ac:	601a      	str	r2, [r3, #0]
}
 800c3ae:	bf00      	nop
 800c3b0:	3708      	adds	r7, #8
 800c3b2:	46bd      	mov	sp, r7
 800c3b4:	bd80      	pop	{r7, pc}
 800c3b6:	bf00      	nop
 800c3b8:	20000a58 	.word	0x20000a58
 800c3bc:	20000eb8 	.word	0x20000eb8
 800c3c0:	20000ecc 	.word	0x20000ecc
 800c3c4:	20000ee8 	.word	0x20000ee8
 800c3c8:	20000efc 	.word	0x20000efc
 800c3cc:	20000f14 	.word	0x20000f14
 800c3d0:	20000ee0 	.word	0x20000ee0
 800c3d4:	20000ee4 	.word	0x20000ee4

0800c3d8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c3d8:	b580      	push	{r7, lr}
 800c3da:	b082      	sub	sp, #8
 800c3dc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c3de:	e019      	b.n	800c414 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c3e0:	f000 fed0 	bl	800d184 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c3e4:	4b10      	ldr	r3, [pc, #64]	; (800c428 <prvCheckTasksWaitingTermination+0x50>)
 800c3e6:	68db      	ldr	r3, [r3, #12]
 800c3e8:	68db      	ldr	r3, [r3, #12]
 800c3ea:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	3304      	adds	r3, #4
 800c3f0:	4618      	mov	r0, r3
 800c3f2:	f7fe fc3c 	bl	800ac6e <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c3f6:	4b0d      	ldr	r3, [pc, #52]	; (800c42c <prvCheckTasksWaitingTermination+0x54>)
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	3b01      	subs	r3, #1
 800c3fc:	4a0b      	ldr	r2, [pc, #44]	; (800c42c <prvCheckTasksWaitingTermination+0x54>)
 800c3fe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c400:	4b0b      	ldr	r3, [pc, #44]	; (800c430 <prvCheckTasksWaitingTermination+0x58>)
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	3b01      	subs	r3, #1
 800c406:	4a0a      	ldr	r2, [pc, #40]	; (800c430 <prvCheckTasksWaitingTermination+0x58>)
 800c408:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c40a:	f000 feeb 	bl	800d1e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c40e:	6878      	ldr	r0, [r7, #4]
 800c410:	f000 f810 	bl	800c434 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c414:	4b06      	ldr	r3, [pc, #24]	; (800c430 <prvCheckTasksWaitingTermination+0x58>)
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d1e1      	bne.n	800c3e0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c41c:	bf00      	nop
 800c41e:	bf00      	nop
 800c420:	3708      	adds	r7, #8
 800c422:	46bd      	mov	sp, r7
 800c424:	bd80      	pop	{r7, pc}
 800c426:	bf00      	nop
 800c428:	20000efc 	.word	0x20000efc
 800c42c:	20000f28 	.word	0x20000f28
 800c430:	20000f10 	.word	0x20000f10

0800c434 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c434:	b580      	push	{r7, lr}
 800c436:	b084      	sub	sp, #16
 800c438:	af00      	add	r7, sp, #0
 800c43a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	3354      	adds	r3, #84	; 0x54
 800c440:	4618      	mov	r0, r3
 800c442:	f001 ff1d 	bl	800e280 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d108      	bne.n	800c462 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c454:	4618      	mov	r0, r3
 800c456:	f001 f883 	bl	800d560 <vPortFree>
				vPortFree( pxTCB );
 800c45a:	6878      	ldr	r0, [r7, #4]
 800c45c:	f001 f880 	bl	800d560 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c460:	e018      	b.n	800c494 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800c468:	2b01      	cmp	r3, #1
 800c46a:	d103      	bne.n	800c474 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800c46c:	6878      	ldr	r0, [r7, #4]
 800c46e:	f001 f877 	bl	800d560 <vPortFree>
	}
 800c472:	e00f      	b.n	800c494 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800c47a:	2b02      	cmp	r3, #2
 800c47c:	d00a      	beq.n	800c494 <prvDeleteTCB+0x60>
	__asm volatile
 800c47e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c482:	f383 8811 	msr	BASEPRI, r3
 800c486:	f3bf 8f6f 	isb	sy
 800c48a:	f3bf 8f4f 	dsb	sy
 800c48e:	60fb      	str	r3, [r7, #12]
}
 800c490:	bf00      	nop
 800c492:	e7fe      	b.n	800c492 <prvDeleteTCB+0x5e>
	}
 800c494:	bf00      	nop
 800c496:	3710      	adds	r7, #16
 800c498:	46bd      	mov	sp, r7
 800c49a:	bd80      	pop	{r7, pc}

0800c49c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c49c:	b480      	push	{r7}
 800c49e:	b083      	sub	sp, #12
 800c4a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c4a2:	4b0c      	ldr	r3, [pc, #48]	; (800c4d4 <prvResetNextTaskUnblockTime+0x38>)
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d104      	bne.n	800c4b6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c4ac:	4b0a      	ldr	r3, [pc, #40]	; (800c4d8 <prvResetNextTaskUnblockTime+0x3c>)
 800c4ae:	f04f 32ff 	mov.w	r2, #4294967295
 800c4b2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c4b4:	e008      	b.n	800c4c8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c4b6:	4b07      	ldr	r3, [pc, #28]	; (800c4d4 <prvResetNextTaskUnblockTime+0x38>)
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	68db      	ldr	r3, [r3, #12]
 800c4bc:	68db      	ldr	r3, [r3, #12]
 800c4be:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	685b      	ldr	r3, [r3, #4]
 800c4c4:	4a04      	ldr	r2, [pc, #16]	; (800c4d8 <prvResetNextTaskUnblockTime+0x3c>)
 800c4c6:	6013      	str	r3, [r2, #0]
}
 800c4c8:	bf00      	nop
 800c4ca:	370c      	adds	r7, #12
 800c4cc:	46bd      	mov	sp, r7
 800c4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d2:	4770      	bx	lr
 800c4d4:	20000ee0 	.word	0x20000ee0
 800c4d8:	20000f48 	.word	0x20000f48

0800c4dc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c4dc:	b480      	push	{r7}
 800c4de:	b083      	sub	sp, #12
 800c4e0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c4e2:	4b0b      	ldr	r3, [pc, #44]	; (800c510 <xTaskGetSchedulerState+0x34>)
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d102      	bne.n	800c4f0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c4ea:	2301      	movs	r3, #1
 800c4ec:	607b      	str	r3, [r7, #4]
 800c4ee:	e008      	b.n	800c502 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c4f0:	4b08      	ldr	r3, [pc, #32]	; (800c514 <xTaskGetSchedulerState+0x38>)
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d102      	bne.n	800c4fe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c4f8:	2302      	movs	r3, #2
 800c4fa:	607b      	str	r3, [r7, #4]
 800c4fc:	e001      	b.n	800c502 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c4fe:	2300      	movs	r3, #0
 800c500:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c502:	687b      	ldr	r3, [r7, #4]
	}
 800c504:	4618      	mov	r0, r3
 800c506:	370c      	adds	r7, #12
 800c508:	46bd      	mov	sp, r7
 800c50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c50e:	4770      	bx	lr
 800c510:	20000f34 	.word	0x20000f34
 800c514:	20000f50 	.word	0x20000f50

0800c518 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c518:	b580      	push	{r7, lr}
 800c51a:	b086      	sub	sp, #24
 800c51c:	af00      	add	r7, sp, #0
 800c51e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c524:	2300      	movs	r3, #0
 800c526:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d056      	beq.n	800c5dc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c52e:	4b2e      	ldr	r3, [pc, #184]	; (800c5e8 <xTaskPriorityDisinherit+0xd0>)
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	693a      	ldr	r2, [r7, #16]
 800c534:	429a      	cmp	r2, r3
 800c536:	d00a      	beq.n	800c54e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800c538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c53c:	f383 8811 	msr	BASEPRI, r3
 800c540:	f3bf 8f6f 	isb	sy
 800c544:	f3bf 8f4f 	dsb	sy
 800c548:	60fb      	str	r3, [r7, #12]
}
 800c54a:	bf00      	nop
 800c54c:	e7fe      	b.n	800c54c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c54e:	693b      	ldr	r3, [r7, #16]
 800c550:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c552:	2b00      	cmp	r3, #0
 800c554:	d10a      	bne.n	800c56c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800c556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c55a:	f383 8811 	msr	BASEPRI, r3
 800c55e:	f3bf 8f6f 	isb	sy
 800c562:	f3bf 8f4f 	dsb	sy
 800c566:	60bb      	str	r3, [r7, #8]
}
 800c568:	bf00      	nop
 800c56a:	e7fe      	b.n	800c56a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800c56c:	693b      	ldr	r3, [r7, #16]
 800c56e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c570:	1e5a      	subs	r2, r3, #1
 800c572:	693b      	ldr	r3, [r7, #16]
 800c574:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c576:	693b      	ldr	r3, [r7, #16]
 800c578:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c57a:	693b      	ldr	r3, [r7, #16]
 800c57c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c57e:	429a      	cmp	r2, r3
 800c580:	d02c      	beq.n	800c5dc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c582:	693b      	ldr	r3, [r7, #16]
 800c584:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c586:	2b00      	cmp	r3, #0
 800c588:	d128      	bne.n	800c5dc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c58a:	693b      	ldr	r3, [r7, #16]
 800c58c:	3304      	adds	r3, #4
 800c58e:	4618      	mov	r0, r3
 800c590:	f7fe fb6d 	bl	800ac6e <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c594:	693b      	ldr	r3, [r7, #16]
 800c596:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c598:	693b      	ldr	r3, [r7, #16]
 800c59a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c59c:	693b      	ldr	r3, [r7, #16]
 800c59e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5a0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c5a4:	693b      	ldr	r3, [r7, #16]
 800c5a6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c5a8:	693b      	ldr	r3, [r7, #16]
 800c5aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5ac:	4b0f      	ldr	r3, [pc, #60]	; (800c5ec <xTaskPriorityDisinherit+0xd4>)
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	429a      	cmp	r2, r3
 800c5b2:	d903      	bls.n	800c5bc <xTaskPriorityDisinherit+0xa4>
 800c5b4:	693b      	ldr	r3, [r7, #16]
 800c5b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5b8:	4a0c      	ldr	r2, [pc, #48]	; (800c5ec <xTaskPriorityDisinherit+0xd4>)
 800c5ba:	6013      	str	r3, [r2, #0]
 800c5bc:	693b      	ldr	r3, [r7, #16]
 800c5be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5c0:	4613      	mov	r3, r2
 800c5c2:	009b      	lsls	r3, r3, #2
 800c5c4:	4413      	add	r3, r2
 800c5c6:	009b      	lsls	r3, r3, #2
 800c5c8:	4a09      	ldr	r2, [pc, #36]	; (800c5f0 <xTaskPriorityDisinherit+0xd8>)
 800c5ca:	441a      	add	r2, r3
 800c5cc:	693b      	ldr	r3, [r7, #16]
 800c5ce:	3304      	adds	r3, #4
 800c5d0:	4619      	mov	r1, r3
 800c5d2:	4610      	mov	r0, r2
 800c5d4:	f7fe faee 	bl	800abb4 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c5d8:	2301      	movs	r3, #1
 800c5da:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c5dc:	697b      	ldr	r3, [r7, #20]
	}
 800c5de:	4618      	mov	r0, r3
 800c5e0:	3718      	adds	r7, #24
 800c5e2:	46bd      	mov	sp, r7
 800c5e4:	bd80      	pop	{r7, pc}
 800c5e6:	bf00      	nop
 800c5e8:	20000a54 	.word	0x20000a54
 800c5ec:	20000f30 	.word	0x20000f30
 800c5f0:	20000a58 	.word	0x20000a58

0800c5f4 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800c5f4:	b480      	push	{r7}
 800c5f6:	b083      	sub	sp, #12
 800c5f8:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800c5fa:	4b09      	ldr	r3, [pc, #36]	; (800c620 <uxTaskResetEventItemValue+0x2c>)
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	699b      	ldr	r3, [r3, #24]
 800c600:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c602:	4b07      	ldr	r3, [pc, #28]	; (800c620 <uxTaskResetEventItemValue+0x2c>)
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c608:	4b05      	ldr	r3, [pc, #20]	; (800c620 <uxTaskResetEventItemValue+0x2c>)
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800c610:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800c612:	687b      	ldr	r3, [r7, #4]
}
 800c614:	4618      	mov	r0, r3
 800c616:	370c      	adds	r7, #12
 800c618:	46bd      	mov	sp, r7
 800c61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c61e:	4770      	bx	lr
 800c620:	20000a54 	.word	0x20000a54

0800c624 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800c624:	b580      	push	{r7, lr}
 800c626:	b08e      	sub	sp, #56	; 0x38
 800c628:	af00      	add	r7, sp, #0
 800c62a:	60f8      	str	r0, [r7, #12]
 800c62c:	60b9      	str	r1, [r7, #8]
 800c62e:	603b      	str	r3, [r7, #0]
 800c630:	4613      	mov	r3, r2
 800c632:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800c634:	2301      	movs	r3, #1
 800c636:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d10a      	bne.n	800c654 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 800c63e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c642:	f383 8811 	msr	BASEPRI, r3
 800c646:	f3bf 8f6f 	isb	sy
 800c64a:	f3bf 8f4f 	dsb	sy
 800c64e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c650:	bf00      	nop
 800c652:	e7fe      	b.n	800c652 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c654:	f000 fe78 	bl	800d348 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800c65c:	f3ef 8211 	mrs	r2, BASEPRI
 800c660:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c664:	f383 8811 	msr	BASEPRI, r3
 800c668:	f3bf 8f6f 	isb	sy
 800c66c:	f3bf 8f4f 	dsb	sy
 800c670:	623a      	str	r2, [r7, #32]
 800c672:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800c674:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c676:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800c678:	683b      	ldr	r3, [r7, #0]
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d004      	beq.n	800c688 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800c67e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c680:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800c684:	683b      	ldr	r3, [r7, #0]
 800c686:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800c688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c68a:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 800c68e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800c692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c694:	2202      	movs	r2, #2
 800c696:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4

			switch( eAction )
 800c69a:	79fb      	ldrb	r3, [r7, #7]
 800c69c:	2b04      	cmp	r3, #4
 800c69e:	d82f      	bhi.n	800c700 <xTaskGenericNotifyFromISR+0xdc>
 800c6a0:	a201      	add	r2, pc, #4	; (adr r2, 800c6a8 <xTaskGenericNotifyFromISR+0x84>)
 800c6a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6a6:	bf00      	nop
 800c6a8:	0800c723 	.word	0x0800c723
 800c6ac:	0800c6bd 	.word	0x0800c6bd
 800c6b0:	0800c6cf 	.word	0x0800c6cf
 800c6b4:	0800c6df 	.word	0x0800c6df
 800c6b8:	0800c6e9 	.word	0x0800c6e9
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800c6bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6be:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800c6c2:	68bb      	ldr	r3, [r7, #8]
 800c6c4:	431a      	orrs	r2, r3
 800c6c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6c8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					break;
 800c6cc:	e02c      	b.n	800c728 <xTaskGenericNotifyFromISR+0x104>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800c6ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6d0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c6d4:	1c5a      	adds	r2, r3, #1
 800c6d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6d8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					break;
 800c6dc:	e024      	b.n	800c728 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800c6de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6e0:	68ba      	ldr	r2, [r7, #8]
 800c6e2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					break;
 800c6e6:	e01f      	b.n	800c728 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800c6e8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c6ec:	2b02      	cmp	r3, #2
 800c6ee:	d004      	beq.n	800c6fa <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800c6f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6f2:	68ba      	ldr	r2, [r7, #8]
 800c6f4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800c6f8:	e016      	b.n	800c728 <xTaskGenericNotifyFromISR+0x104>
						xReturn = pdFAIL;
 800c6fa:	2300      	movs	r3, #0
 800c6fc:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800c6fe:	e013      	b.n	800c728 <xTaskGenericNotifyFromISR+0x104>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800c700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c702:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c706:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c70a:	d00c      	beq.n	800c726 <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 800c70c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c710:	f383 8811 	msr	BASEPRI, r3
 800c714:	f3bf 8f6f 	isb	sy
 800c718:	f3bf 8f4f 	dsb	sy
 800c71c:	61bb      	str	r3, [r7, #24]
}
 800c71e:	bf00      	nop
 800c720:	e7fe      	b.n	800c720 <xTaskGenericNotifyFromISR+0xfc>
					break;
 800c722:	bf00      	nop
 800c724:	e000      	b.n	800c728 <xTaskGenericNotifyFromISR+0x104>
					break;
 800c726:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800c728:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c72c:	2b01      	cmp	r3, #1
 800c72e:	d146      	bne.n	800c7be <xTaskGenericNotifyFromISR+0x19a>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800c730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c734:	2b00      	cmp	r3, #0
 800c736:	d00a      	beq.n	800c74e <xTaskGenericNotifyFromISR+0x12a>
	__asm volatile
 800c738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c73c:	f383 8811 	msr	BASEPRI, r3
 800c740:	f3bf 8f6f 	isb	sy
 800c744:	f3bf 8f4f 	dsb	sy
 800c748:	617b      	str	r3, [r7, #20]
}
 800c74a:	bf00      	nop
 800c74c:	e7fe      	b.n	800c74c <xTaskGenericNotifyFromISR+0x128>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c74e:	4b21      	ldr	r3, [pc, #132]	; (800c7d4 <xTaskGenericNotifyFromISR+0x1b0>)
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	2b00      	cmp	r3, #0
 800c754:	d11d      	bne.n	800c792 <xTaskGenericNotifyFromISR+0x16e>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c758:	3304      	adds	r3, #4
 800c75a:	4618      	mov	r0, r3
 800c75c:	f7fe fa87 	bl	800ac6e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c764:	4b1c      	ldr	r3, [pc, #112]	; (800c7d8 <xTaskGenericNotifyFromISR+0x1b4>)
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	429a      	cmp	r2, r3
 800c76a:	d903      	bls.n	800c774 <xTaskGenericNotifyFromISR+0x150>
 800c76c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c76e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c770:	4a19      	ldr	r2, [pc, #100]	; (800c7d8 <xTaskGenericNotifyFromISR+0x1b4>)
 800c772:	6013      	str	r3, [r2, #0]
 800c774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c776:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c778:	4613      	mov	r3, r2
 800c77a:	009b      	lsls	r3, r3, #2
 800c77c:	4413      	add	r3, r2
 800c77e:	009b      	lsls	r3, r3, #2
 800c780:	4a16      	ldr	r2, [pc, #88]	; (800c7dc <xTaskGenericNotifyFromISR+0x1b8>)
 800c782:	441a      	add	r2, r3
 800c784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c786:	3304      	adds	r3, #4
 800c788:	4619      	mov	r1, r3
 800c78a:	4610      	mov	r0, r2
 800c78c:	f7fe fa12 	bl	800abb4 <vListInsertEnd>
 800c790:	e005      	b.n	800c79e <xTaskGenericNotifyFromISR+0x17a>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800c792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c794:	3318      	adds	r3, #24
 800c796:	4619      	mov	r1, r3
 800c798:	4811      	ldr	r0, [pc, #68]	; (800c7e0 <xTaskGenericNotifyFromISR+0x1bc>)
 800c79a:	f7fe fa0b 	bl	800abb4 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c79e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7a2:	4b10      	ldr	r3, [pc, #64]	; (800c7e4 <xTaskGenericNotifyFromISR+0x1c0>)
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7a8:	429a      	cmp	r2, r3
 800c7aa:	d908      	bls.n	800c7be <xTaskGenericNotifyFromISR+0x19a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800c7ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d002      	beq.n	800c7b8 <xTaskGenericNotifyFromISR+0x194>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800c7b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c7b4:	2201      	movs	r2, #1
 800c7b6:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800c7b8:	4b0b      	ldr	r3, [pc, #44]	; (800c7e8 <xTaskGenericNotifyFromISR+0x1c4>)
 800c7ba:	2201      	movs	r2, #1
 800c7bc:	601a      	str	r2, [r3, #0]
 800c7be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7c0:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c7c2:	693b      	ldr	r3, [r7, #16]
 800c7c4:	f383 8811 	msr	BASEPRI, r3
}
 800c7c8:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800c7ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800c7cc:	4618      	mov	r0, r3
 800c7ce:	3738      	adds	r7, #56	; 0x38
 800c7d0:	46bd      	mov	sp, r7
 800c7d2:	bd80      	pop	{r7, pc}
 800c7d4:	20000f50 	.word	0x20000f50
 800c7d8:	20000f30 	.word	0x20000f30
 800c7dc:	20000a58 	.word	0x20000a58
 800c7e0:	20000ee8 	.word	0x20000ee8
 800c7e4:	20000a54 	.word	0x20000a54
 800c7e8:	20000f3c 	.word	0x20000f3c

0800c7ec <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c7ec:	b580      	push	{r7, lr}
 800c7ee:	b084      	sub	sp, #16
 800c7f0:	af00      	add	r7, sp, #0
 800c7f2:	6078      	str	r0, [r7, #4]
 800c7f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c7f6:	4b21      	ldr	r3, [pc, #132]	; (800c87c <prvAddCurrentTaskToDelayedList+0x90>)
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c7fc:	4b20      	ldr	r3, [pc, #128]	; (800c880 <prvAddCurrentTaskToDelayedList+0x94>)
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	3304      	adds	r3, #4
 800c802:	4618      	mov	r0, r3
 800c804:	f7fe fa33 	bl	800ac6e <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c80e:	d10a      	bne.n	800c826 <prvAddCurrentTaskToDelayedList+0x3a>
 800c810:	683b      	ldr	r3, [r7, #0]
 800c812:	2b00      	cmp	r3, #0
 800c814:	d007      	beq.n	800c826 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c816:	4b1a      	ldr	r3, [pc, #104]	; (800c880 <prvAddCurrentTaskToDelayedList+0x94>)
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	3304      	adds	r3, #4
 800c81c:	4619      	mov	r1, r3
 800c81e:	4819      	ldr	r0, [pc, #100]	; (800c884 <prvAddCurrentTaskToDelayedList+0x98>)
 800c820:	f7fe f9c8 	bl	800abb4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c824:	e026      	b.n	800c874 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c826:	68fa      	ldr	r2, [r7, #12]
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	4413      	add	r3, r2
 800c82c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c82e:	4b14      	ldr	r3, [pc, #80]	; (800c880 <prvAddCurrentTaskToDelayedList+0x94>)
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	68ba      	ldr	r2, [r7, #8]
 800c834:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c836:	68ba      	ldr	r2, [r7, #8]
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	429a      	cmp	r2, r3
 800c83c:	d209      	bcs.n	800c852 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c83e:	4b12      	ldr	r3, [pc, #72]	; (800c888 <prvAddCurrentTaskToDelayedList+0x9c>)
 800c840:	681a      	ldr	r2, [r3, #0]
 800c842:	4b0f      	ldr	r3, [pc, #60]	; (800c880 <prvAddCurrentTaskToDelayedList+0x94>)
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	3304      	adds	r3, #4
 800c848:	4619      	mov	r1, r3
 800c84a:	4610      	mov	r0, r2
 800c84c:	f7fe f9d6 	bl	800abfc <vListInsert>
}
 800c850:	e010      	b.n	800c874 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c852:	4b0e      	ldr	r3, [pc, #56]	; (800c88c <prvAddCurrentTaskToDelayedList+0xa0>)
 800c854:	681a      	ldr	r2, [r3, #0]
 800c856:	4b0a      	ldr	r3, [pc, #40]	; (800c880 <prvAddCurrentTaskToDelayedList+0x94>)
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	3304      	adds	r3, #4
 800c85c:	4619      	mov	r1, r3
 800c85e:	4610      	mov	r0, r2
 800c860:	f7fe f9cc 	bl	800abfc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c864:	4b0a      	ldr	r3, [pc, #40]	; (800c890 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	68ba      	ldr	r2, [r7, #8]
 800c86a:	429a      	cmp	r2, r3
 800c86c:	d202      	bcs.n	800c874 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c86e:	4a08      	ldr	r2, [pc, #32]	; (800c890 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c870:	68bb      	ldr	r3, [r7, #8]
 800c872:	6013      	str	r3, [r2, #0]
}
 800c874:	bf00      	nop
 800c876:	3710      	adds	r7, #16
 800c878:	46bd      	mov	sp, r7
 800c87a:	bd80      	pop	{r7, pc}
 800c87c:	20000f2c 	.word	0x20000f2c
 800c880:	20000a54 	.word	0x20000a54
 800c884:	20000f14 	.word	0x20000f14
 800c888:	20000ee4 	.word	0x20000ee4
 800c88c:	20000ee0 	.word	0x20000ee0
 800c890:	20000f48 	.word	0x20000f48

0800c894 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c894:	b580      	push	{r7, lr}
 800c896:	b08a      	sub	sp, #40	; 0x28
 800c898:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c89a:	2300      	movs	r3, #0
 800c89c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c89e:	f000 fb07 	bl	800ceb0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c8a2:	4b1c      	ldr	r3, [pc, #112]	; (800c914 <xTimerCreateTimerTask+0x80>)
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d021      	beq.n	800c8ee <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c8aa:	2300      	movs	r3, #0
 800c8ac:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c8ae:	2300      	movs	r3, #0
 800c8b0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c8b2:	1d3a      	adds	r2, r7, #4
 800c8b4:	f107 0108 	add.w	r1, r7, #8
 800c8b8:	f107 030c 	add.w	r3, r7, #12
 800c8bc:	4618      	mov	r0, r3
 800c8be:	f7fd ff9d 	bl	800a7fc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c8c2:	6879      	ldr	r1, [r7, #4]
 800c8c4:	68bb      	ldr	r3, [r7, #8]
 800c8c6:	68fa      	ldr	r2, [r7, #12]
 800c8c8:	9202      	str	r2, [sp, #8]
 800c8ca:	9301      	str	r3, [sp, #4]
 800c8cc:	2302      	movs	r3, #2
 800c8ce:	9300      	str	r3, [sp, #0]
 800c8d0:	2300      	movs	r3, #0
 800c8d2:	460a      	mov	r2, r1
 800c8d4:	4910      	ldr	r1, [pc, #64]	; (800c918 <xTimerCreateTimerTask+0x84>)
 800c8d6:	4811      	ldr	r0, [pc, #68]	; (800c91c <xTimerCreateTimerTask+0x88>)
 800c8d8:	f7fe ff1a 	bl	800b710 <xTaskCreateStatic>
 800c8dc:	4603      	mov	r3, r0
 800c8de:	4a10      	ldr	r2, [pc, #64]	; (800c920 <xTimerCreateTimerTask+0x8c>)
 800c8e0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c8e2:	4b0f      	ldr	r3, [pc, #60]	; (800c920 <xTimerCreateTimerTask+0x8c>)
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d001      	beq.n	800c8ee <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c8ea:	2301      	movs	r3, #1
 800c8ec:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c8ee:	697b      	ldr	r3, [r7, #20]
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d10a      	bne.n	800c90a <xTimerCreateTimerTask+0x76>
	__asm volatile
 800c8f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8f8:	f383 8811 	msr	BASEPRI, r3
 800c8fc:	f3bf 8f6f 	isb	sy
 800c900:	f3bf 8f4f 	dsb	sy
 800c904:	613b      	str	r3, [r7, #16]
}
 800c906:	bf00      	nop
 800c908:	e7fe      	b.n	800c908 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c90a:	697b      	ldr	r3, [r7, #20]
}
 800c90c:	4618      	mov	r0, r3
 800c90e:	3718      	adds	r7, #24
 800c910:	46bd      	mov	sp, r7
 800c912:	bd80      	pop	{r7, pc}
 800c914:	20000f84 	.word	0x20000f84
 800c918:	0800e4f8 	.word	0x0800e4f8
 800c91c:	0800ca59 	.word	0x0800ca59
 800c920:	20000f88 	.word	0x20000f88

0800c924 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c924:	b580      	push	{r7, lr}
 800c926:	b08a      	sub	sp, #40	; 0x28
 800c928:	af00      	add	r7, sp, #0
 800c92a:	60f8      	str	r0, [r7, #12]
 800c92c:	60b9      	str	r1, [r7, #8]
 800c92e:	607a      	str	r2, [r7, #4]
 800c930:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c932:	2300      	movs	r3, #0
 800c934:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d10a      	bne.n	800c952 <xTimerGenericCommand+0x2e>
	__asm volatile
 800c93c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c940:	f383 8811 	msr	BASEPRI, r3
 800c944:	f3bf 8f6f 	isb	sy
 800c948:	f3bf 8f4f 	dsb	sy
 800c94c:	623b      	str	r3, [r7, #32]
}
 800c94e:	bf00      	nop
 800c950:	e7fe      	b.n	800c950 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c952:	4b1a      	ldr	r3, [pc, #104]	; (800c9bc <xTimerGenericCommand+0x98>)
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	2b00      	cmp	r3, #0
 800c958:	d02a      	beq.n	800c9b0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c95a:	68bb      	ldr	r3, [r7, #8]
 800c95c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c966:	68bb      	ldr	r3, [r7, #8]
 800c968:	2b05      	cmp	r3, #5
 800c96a:	dc18      	bgt.n	800c99e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c96c:	f7ff fdb6 	bl	800c4dc <xTaskGetSchedulerState>
 800c970:	4603      	mov	r3, r0
 800c972:	2b02      	cmp	r3, #2
 800c974:	d109      	bne.n	800c98a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c976:	4b11      	ldr	r3, [pc, #68]	; (800c9bc <xTimerGenericCommand+0x98>)
 800c978:	6818      	ldr	r0, [r3, #0]
 800c97a:	f107 0110 	add.w	r1, r7, #16
 800c97e:	2300      	movs	r3, #0
 800c980:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c982:	f7fe fadd 	bl	800af40 <xQueueGenericSend>
 800c986:	6278      	str	r0, [r7, #36]	; 0x24
 800c988:	e012      	b.n	800c9b0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c98a:	4b0c      	ldr	r3, [pc, #48]	; (800c9bc <xTimerGenericCommand+0x98>)
 800c98c:	6818      	ldr	r0, [r3, #0]
 800c98e:	f107 0110 	add.w	r1, r7, #16
 800c992:	2300      	movs	r3, #0
 800c994:	2200      	movs	r2, #0
 800c996:	f7fe fad3 	bl	800af40 <xQueueGenericSend>
 800c99a:	6278      	str	r0, [r7, #36]	; 0x24
 800c99c:	e008      	b.n	800c9b0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c99e:	4b07      	ldr	r3, [pc, #28]	; (800c9bc <xTimerGenericCommand+0x98>)
 800c9a0:	6818      	ldr	r0, [r3, #0]
 800c9a2:	f107 0110 	add.w	r1, r7, #16
 800c9a6:	2300      	movs	r3, #0
 800c9a8:	683a      	ldr	r2, [r7, #0]
 800c9aa:	f7fe fbc7 	bl	800b13c <xQueueGenericSendFromISR>
 800c9ae:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c9b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c9b2:	4618      	mov	r0, r3
 800c9b4:	3728      	adds	r7, #40	; 0x28
 800c9b6:	46bd      	mov	sp, r7
 800c9b8:	bd80      	pop	{r7, pc}
 800c9ba:	bf00      	nop
 800c9bc:	20000f84 	.word	0x20000f84

0800c9c0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c9c0:	b580      	push	{r7, lr}
 800c9c2:	b088      	sub	sp, #32
 800c9c4:	af02      	add	r7, sp, #8
 800c9c6:	6078      	str	r0, [r7, #4]
 800c9c8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c9ca:	4b22      	ldr	r3, [pc, #136]	; (800ca54 <prvProcessExpiredTimer+0x94>)
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	68db      	ldr	r3, [r3, #12]
 800c9d0:	68db      	ldr	r3, [r3, #12]
 800c9d2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c9d4:	697b      	ldr	r3, [r7, #20]
 800c9d6:	3304      	adds	r3, #4
 800c9d8:	4618      	mov	r0, r3
 800c9da:	f7fe f948 	bl	800ac6e <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c9de:	697b      	ldr	r3, [r7, #20]
 800c9e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c9e4:	f003 0304 	and.w	r3, r3, #4
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d022      	beq.n	800ca32 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c9ec:	697b      	ldr	r3, [r7, #20]
 800c9ee:	699a      	ldr	r2, [r3, #24]
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	18d1      	adds	r1, r2, r3
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	683a      	ldr	r2, [r7, #0]
 800c9f8:	6978      	ldr	r0, [r7, #20]
 800c9fa:	f000 f8d1 	bl	800cba0 <prvInsertTimerInActiveList>
 800c9fe:	4603      	mov	r3, r0
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d01f      	beq.n	800ca44 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ca04:	2300      	movs	r3, #0
 800ca06:	9300      	str	r3, [sp, #0]
 800ca08:	2300      	movs	r3, #0
 800ca0a:	687a      	ldr	r2, [r7, #4]
 800ca0c:	2100      	movs	r1, #0
 800ca0e:	6978      	ldr	r0, [r7, #20]
 800ca10:	f7ff ff88 	bl	800c924 <xTimerGenericCommand>
 800ca14:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ca16:	693b      	ldr	r3, [r7, #16]
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d113      	bne.n	800ca44 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800ca1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca20:	f383 8811 	msr	BASEPRI, r3
 800ca24:	f3bf 8f6f 	isb	sy
 800ca28:	f3bf 8f4f 	dsb	sy
 800ca2c:	60fb      	str	r3, [r7, #12]
}
 800ca2e:	bf00      	nop
 800ca30:	e7fe      	b.n	800ca30 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ca32:	697b      	ldr	r3, [r7, #20]
 800ca34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ca38:	f023 0301 	bic.w	r3, r3, #1
 800ca3c:	b2da      	uxtb	r2, r3
 800ca3e:	697b      	ldr	r3, [r7, #20]
 800ca40:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ca44:	697b      	ldr	r3, [r7, #20]
 800ca46:	6a1b      	ldr	r3, [r3, #32]
 800ca48:	6978      	ldr	r0, [r7, #20]
 800ca4a:	4798      	blx	r3
}
 800ca4c:	bf00      	nop
 800ca4e:	3718      	adds	r7, #24
 800ca50:	46bd      	mov	sp, r7
 800ca52:	bd80      	pop	{r7, pc}
 800ca54:	20000f7c 	.word	0x20000f7c

0800ca58 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ca58:	b580      	push	{r7, lr}
 800ca5a:	b084      	sub	sp, #16
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ca60:	f107 0308 	add.w	r3, r7, #8
 800ca64:	4618      	mov	r0, r3
 800ca66:	f000 f857 	bl	800cb18 <prvGetNextExpireTime>
 800ca6a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ca6c:	68bb      	ldr	r3, [r7, #8]
 800ca6e:	4619      	mov	r1, r3
 800ca70:	68f8      	ldr	r0, [r7, #12]
 800ca72:	f000 f803 	bl	800ca7c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ca76:	f000 f8d5 	bl	800cc24 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ca7a:	e7f1      	b.n	800ca60 <prvTimerTask+0x8>

0800ca7c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ca7c:	b580      	push	{r7, lr}
 800ca7e:	b084      	sub	sp, #16
 800ca80:	af00      	add	r7, sp, #0
 800ca82:	6078      	str	r0, [r7, #4]
 800ca84:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ca86:	f7ff f89f 	bl	800bbc8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ca8a:	f107 0308 	add.w	r3, r7, #8
 800ca8e:	4618      	mov	r0, r3
 800ca90:	f000 f866 	bl	800cb60 <prvSampleTimeNow>
 800ca94:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ca96:	68bb      	ldr	r3, [r7, #8]
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d130      	bne.n	800cafe <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ca9c:	683b      	ldr	r3, [r7, #0]
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d10a      	bne.n	800cab8 <prvProcessTimerOrBlockTask+0x3c>
 800caa2:	687a      	ldr	r2, [r7, #4]
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	429a      	cmp	r2, r3
 800caa8:	d806      	bhi.n	800cab8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800caaa:	f7ff f89b 	bl	800bbe4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800caae:	68f9      	ldr	r1, [r7, #12]
 800cab0:	6878      	ldr	r0, [r7, #4]
 800cab2:	f7ff ff85 	bl	800c9c0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800cab6:	e024      	b.n	800cb02 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800cab8:	683b      	ldr	r3, [r7, #0]
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d008      	beq.n	800cad0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800cabe:	4b13      	ldr	r3, [pc, #76]	; (800cb0c <prvProcessTimerOrBlockTask+0x90>)
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d101      	bne.n	800cacc <prvProcessTimerOrBlockTask+0x50>
 800cac8:	2301      	movs	r3, #1
 800caca:	e000      	b.n	800cace <prvProcessTimerOrBlockTask+0x52>
 800cacc:	2300      	movs	r3, #0
 800cace:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800cad0:	4b0f      	ldr	r3, [pc, #60]	; (800cb10 <prvProcessTimerOrBlockTask+0x94>)
 800cad2:	6818      	ldr	r0, [r3, #0]
 800cad4:	687a      	ldr	r2, [r7, #4]
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	1ad3      	subs	r3, r2, r3
 800cada:	683a      	ldr	r2, [r7, #0]
 800cadc:	4619      	mov	r1, r3
 800cade:	f7fe fde3 	bl	800b6a8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800cae2:	f7ff f87f 	bl	800bbe4 <xTaskResumeAll>
 800cae6:	4603      	mov	r3, r0
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d10a      	bne.n	800cb02 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800caec:	4b09      	ldr	r3, [pc, #36]	; (800cb14 <prvProcessTimerOrBlockTask+0x98>)
 800caee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800caf2:	601a      	str	r2, [r3, #0]
 800caf4:	f3bf 8f4f 	dsb	sy
 800caf8:	f3bf 8f6f 	isb	sy
}
 800cafc:	e001      	b.n	800cb02 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800cafe:	f7ff f871 	bl	800bbe4 <xTaskResumeAll>
}
 800cb02:	bf00      	nop
 800cb04:	3710      	adds	r7, #16
 800cb06:	46bd      	mov	sp, r7
 800cb08:	bd80      	pop	{r7, pc}
 800cb0a:	bf00      	nop
 800cb0c:	20000f80 	.word	0x20000f80
 800cb10:	20000f84 	.word	0x20000f84
 800cb14:	e000ed04 	.word	0xe000ed04

0800cb18 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800cb18:	b480      	push	{r7}
 800cb1a:	b085      	sub	sp, #20
 800cb1c:	af00      	add	r7, sp, #0
 800cb1e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800cb20:	4b0e      	ldr	r3, [pc, #56]	; (800cb5c <prvGetNextExpireTime+0x44>)
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d101      	bne.n	800cb2e <prvGetNextExpireTime+0x16>
 800cb2a:	2201      	movs	r2, #1
 800cb2c:	e000      	b.n	800cb30 <prvGetNextExpireTime+0x18>
 800cb2e:	2200      	movs	r2, #0
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d105      	bne.n	800cb48 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cb3c:	4b07      	ldr	r3, [pc, #28]	; (800cb5c <prvGetNextExpireTime+0x44>)
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	68db      	ldr	r3, [r3, #12]
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	60fb      	str	r3, [r7, #12]
 800cb46:	e001      	b.n	800cb4c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800cb48:	2300      	movs	r3, #0
 800cb4a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800cb4c:	68fb      	ldr	r3, [r7, #12]
}
 800cb4e:	4618      	mov	r0, r3
 800cb50:	3714      	adds	r7, #20
 800cb52:	46bd      	mov	sp, r7
 800cb54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb58:	4770      	bx	lr
 800cb5a:	bf00      	nop
 800cb5c:	20000f7c 	.word	0x20000f7c

0800cb60 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800cb60:	b580      	push	{r7, lr}
 800cb62:	b084      	sub	sp, #16
 800cb64:	af00      	add	r7, sp, #0
 800cb66:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800cb68:	f7ff f8da 	bl	800bd20 <xTaskGetTickCount>
 800cb6c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800cb6e:	4b0b      	ldr	r3, [pc, #44]	; (800cb9c <prvSampleTimeNow+0x3c>)
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	68fa      	ldr	r2, [r7, #12]
 800cb74:	429a      	cmp	r2, r3
 800cb76:	d205      	bcs.n	800cb84 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800cb78:	f000 f936 	bl	800cde8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	2201      	movs	r2, #1
 800cb80:	601a      	str	r2, [r3, #0]
 800cb82:	e002      	b.n	800cb8a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	2200      	movs	r2, #0
 800cb88:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800cb8a:	4a04      	ldr	r2, [pc, #16]	; (800cb9c <prvSampleTimeNow+0x3c>)
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800cb90:	68fb      	ldr	r3, [r7, #12]
}
 800cb92:	4618      	mov	r0, r3
 800cb94:	3710      	adds	r7, #16
 800cb96:	46bd      	mov	sp, r7
 800cb98:	bd80      	pop	{r7, pc}
 800cb9a:	bf00      	nop
 800cb9c:	20000f8c 	.word	0x20000f8c

0800cba0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800cba0:	b580      	push	{r7, lr}
 800cba2:	b086      	sub	sp, #24
 800cba4:	af00      	add	r7, sp, #0
 800cba6:	60f8      	str	r0, [r7, #12]
 800cba8:	60b9      	str	r1, [r7, #8]
 800cbaa:	607a      	str	r2, [r7, #4]
 800cbac:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800cbae:	2300      	movs	r3, #0
 800cbb0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	68ba      	ldr	r2, [r7, #8]
 800cbb6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	68fa      	ldr	r2, [r7, #12]
 800cbbc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800cbbe:	68ba      	ldr	r2, [r7, #8]
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	429a      	cmp	r2, r3
 800cbc4:	d812      	bhi.n	800cbec <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cbc6:	687a      	ldr	r2, [r7, #4]
 800cbc8:	683b      	ldr	r3, [r7, #0]
 800cbca:	1ad2      	subs	r2, r2, r3
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	699b      	ldr	r3, [r3, #24]
 800cbd0:	429a      	cmp	r2, r3
 800cbd2:	d302      	bcc.n	800cbda <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800cbd4:	2301      	movs	r3, #1
 800cbd6:	617b      	str	r3, [r7, #20]
 800cbd8:	e01b      	b.n	800cc12 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800cbda:	4b10      	ldr	r3, [pc, #64]	; (800cc1c <prvInsertTimerInActiveList+0x7c>)
 800cbdc:	681a      	ldr	r2, [r3, #0]
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	3304      	adds	r3, #4
 800cbe2:	4619      	mov	r1, r3
 800cbe4:	4610      	mov	r0, r2
 800cbe6:	f7fe f809 	bl	800abfc <vListInsert>
 800cbea:	e012      	b.n	800cc12 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800cbec:	687a      	ldr	r2, [r7, #4]
 800cbee:	683b      	ldr	r3, [r7, #0]
 800cbf0:	429a      	cmp	r2, r3
 800cbf2:	d206      	bcs.n	800cc02 <prvInsertTimerInActiveList+0x62>
 800cbf4:	68ba      	ldr	r2, [r7, #8]
 800cbf6:	683b      	ldr	r3, [r7, #0]
 800cbf8:	429a      	cmp	r2, r3
 800cbfa:	d302      	bcc.n	800cc02 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800cbfc:	2301      	movs	r3, #1
 800cbfe:	617b      	str	r3, [r7, #20]
 800cc00:	e007      	b.n	800cc12 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cc02:	4b07      	ldr	r3, [pc, #28]	; (800cc20 <prvInsertTimerInActiveList+0x80>)
 800cc04:	681a      	ldr	r2, [r3, #0]
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	3304      	adds	r3, #4
 800cc0a:	4619      	mov	r1, r3
 800cc0c:	4610      	mov	r0, r2
 800cc0e:	f7fd fff5 	bl	800abfc <vListInsert>
		}
	}

	return xProcessTimerNow;
 800cc12:	697b      	ldr	r3, [r7, #20]
}
 800cc14:	4618      	mov	r0, r3
 800cc16:	3718      	adds	r7, #24
 800cc18:	46bd      	mov	sp, r7
 800cc1a:	bd80      	pop	{r7, pc}
 800cc1c:	20000f80 	.word	0x20000f80
 800cc20:	20000f7c 	.word	0x20000f7c

0800cc24 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800cc24:	b580      	push	{r7, lr}
 800cc26:	b08e      	sub	sp, #56	; 0x38
 800cc28:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800cc2a:	e0ca      	b.n	800cdc2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	da18      	bge.n	800cc64 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800cc32:	1d3b      	adds	r3, r7, #4
 800cc34:	3304      	adds	r3, #4
 800cc36:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800cc38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d10a      	bne.n	800cc54 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800cc3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc42:	f383 8811 	msr	BASEPRI, r3
 800cc46:	f3bf 8f6f 	isb	sy
 800cc4a:	f3bf 8f4f 	dsb	sy
 800cc4e:	61fb      	str	r3, [r7, #28]
}
 800cc50:	bf00      	nop
 800cc52:	e7fe      	b.n	800cc52 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800cc54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cc5a:	6850      	ldr	r0, [r2, #4]
 800cc5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cc5e:	6892      	ldr	r2, [r2, #8]
 800cc60:	4611      	mov	r1, r2
 800cc62:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	f2c0 80ab 	blt.w	800cdc2 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800cc70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc72:	695b      	ldr	r3, [r3, #20]
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d004      	beq.n	800cc82 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cc78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc7a:	3304      	adds	r3, #4
 800cc7c:	4618      	mov	r0, r3
 800cc7e:	f7fd fff6 	bl	800ac6e <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cc82:	463b      	mov	r3, r7
 800cc84:	4618      	mov	r0, r3
 800cc86:	f7ff ff6b 	bl	800cb60 <prvSampleTimeNow>
 800cc8a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	2b09      	cmp	r3, #9
 800cc90:	f200 8096 	bhi.w	800cdc0 <prvProcessReceivedCommands+0x19c>
 800cc94:	a201      	add	r2, pc, #4	; (adr r2, 800cc9c <prvProcessReceivedCommands+0x78>)
 800cc96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc9a:	bf00      	nop
 800cc9c:	0800ccc5 	.word	0x0800ccc5
 800cca0:	0800ccc5 	.word	0x0800ccc5
 800cca4:	0800ccc5 	.word	0x0800ccc5
 800cca8:	0800cd39 	.word	0x0800cd39
 800ccac:	0800cd4d 	.word	0x0800cd4d
 800ccb0:	0800cd97 	.word	0x0800cd97
 800ccb4:	0800ccc5 	.word	0x0800ccc5
 800ccb8:	0800ccc5 	.word	0x0800ccc5
 800ccbc:	0800cd39 	.word	0x0800cd39
 800ccc0:	0800cd4d 	.word	0x0800cd4d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ccc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccc6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ccca:	f043 0301 	orr.w	r3, r3, #1
 800ccce:	b2da      	uxtb	r2, r3
 800ccd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccd2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ccd6:	68ba      	ldr	r2, [r7, #8]
 800ccd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccda:	699b      	ldr	r3, [r3, #24]
 800ccdc:	18d1      	adds	r1, r2, r3
 800ccde:	68bb      	ldr	r3, [r7, #8]
 800cce0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cce2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cce4:	f7ff ff5c 	bl	800cba0 <prvInsertTimerInActiveList>
 800cce8:	4603      	mov	r3, r0
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d069      	beq.n	800cdc2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ccee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccf0:	6a1b      	ldr	r3, [r3, #32]
 800ccf2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ccf4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ccf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccf8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ccfc:	f003 0304 	and.w	r3, r3, #4
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d05e      	beq.n	800cdc2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800cd04:	68ba      	ldr	r2, [r7, #8]
 800cd06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd08:	699b      	ldr	r3, [r3, #24]
 800cd0a:	441a      	add	r2, r3
 800cd0c:	2300      	movs	r3, #0
 800cd0e:	9300      	str	r3, [sp, #0]
 800cd10:	2300      	movs	r3, #0
 800cd12:	2100      	movs	r1, #0
 800cd14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cd16:	f7ff fe05 	bl	800c924 <xTimerGenericCommand>
 800cd1a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800cd1c:	6a3b      	ldr	r3, [r7, #32]
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d14f      	bne.n	800cdc2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800cd22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd26:	f383 8811 	msr	BASEPRI, r3
 800cd2a:	f3bf 8f6f 	isb	sy
 800cd2e:	f3bf 8f4f 	dsb	sy
 800cd32:	61bb      	str	r3, [r7, #24]
}
 800cd34:	bf00      	nop
 800cd36:	e7fe      	b.n	800cd36 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cd38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd3a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cd3e:	f023 0301 	bic.w	r3, r3, #1
 800cd42:	b2da      	uxtb	r2, r3
 800cd44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd46:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800cd4a:	e03a      	b.n	800cdc2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800cd4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd4e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cd52:	f043 0301 	orr.w	r3, r3, #1
 800cd56:	b2da      	uxtb	r2, r3
 800cd58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd5a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800cd5e:	68ba      	ldr	r2, [r7, #8]
 800cd60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd62:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800cd64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd66:	699b      	ldr	r3, [r3, #24]
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d10a      	bne.n	800cd82 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800cd6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd70:	f383 8811 	msr	BASEPRI, r3
 800cd74:	f3bf 8f6f 	isb	sy
 800cd78:	f3bf 8f4f 	dsb	sy
 800cd7c:	617b      	str	r3, [r7, #20]
}
 800cd7e:	bf00      	nop
 800cd80:	e7fe      	b.n	800cd80 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800cd82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd84:	699a      	ldr	r2, [r3, #24]
 800cd86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd88:	18d1      	adds	r1, r2, r3
 800cd8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cd8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cd90:	f7ff ff06 	bl	800cba0 <prvInsertTimerInActiveList>
					break;
 800cd94:	e015      	b.n	800cdc2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800cd96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cd9c:	f003 0302 	and.w	r3, r3, #2
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d103      	bne.n	800cdac <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800cda4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cda6:	f000 fbdb 	bl	800d560 <vPortFree>
 800cdaa:	e00a      	b.n	800cdc2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cdac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cdb2:	f023 0301 	bic.w	r3, r3, #1
 800cdb6:	b2da      	uxtb	r2, r3
 800cdb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800cdbe:	e000      	b.n	800cdc2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800cdc0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800cdc2:	4b08      	ldr	r3, [pc, #32]	; (800cde4 <prvProcessReceivedCommands+0x1c0>)
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	1d39      	adds	r1, r7, #4
 800cdc8:	2200      	movs	r2, #0
 800cdca:	4618      	mov	r0, r3
 800cdcc:	f7fe fa52 	bl	800b274 <xQueueReceive>
 800cdd0:	4603      	mov	r3, r0
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	f47f af2a 	bne.w	800cc2c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800cdd8:	bf00      	nop
 800cdda:	bf00      	nop
 800cddc:	3730      	adds	r7, #48	; 0x30
 800cdde:	46bd      	mov	sp, r7
 800cde0:	bd80      	pop	{r7, pc}
 800cde2:	bf00      	nop
 800cde4:	20000f84 	.word	0x20000f84

0800cde8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800cde8:	b580      	push	{r7, lr}
 800cdea:	b088      	sub	sp, #32
 800cdec:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cdee:	e048      	b.n	800ce82 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cdf0:	4b2d      	ldr	r3, [pc, #180]	; (800cea8 <prvSwitchTimerLists+0xc0>)
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	68db      	ldr	r3, [r3, #12]
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cdfa:	4b2b      	ldr	r3, [pc, #172]	; (800cea8 <prvSwitchTimerLists+0xc0>)
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	68db      	ldr	r3, [r3, #12]
 800ce00:	68db      	ldr	r3, [r3, #12]
 800ce02:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	3304      	adds	r3, #4
 800ce08:	4618      	mov	r0, r3
 800ce0a:	f7fd ff30 	bl	800ac6e <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ce0e:	68fb      	ldr	r3, [r7, #12]
 800ce10:	6a1b      	ldr	r3, [r3, #32]
 800ce12:	68f8      	ldr	r0, [r7, #12]
 800ce14:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ce1c:	f003 0304 	and.w	r3, r3, #4
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d02e      	beq.n	800ce82 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	699b      	ldr	r3, [r3, #24]
 800ce28:	693a      	ldr	r2, [r7, #16]
 800ce2a:	4413      	add	r3, r2
 800ce2c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ce2e:	68ba      	ldr	r2, [r7, #8]
 800ce30:	693b      	ldr	r3, [r7, #16]
 800ce32:	429a      	cmp	r2, r3
 800ce34:	d90e      	bls.n	800ce54 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	68ba      	ldr	r2, [r7, #8]
 800ce3a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	68fa      	ldr	r2, [r7, #12]
 800ce40:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ce42:	4b19      	ldr	r3, [pc, #100]	; (800cea8 <prvSwitchTimerLists+0xc0>)
 800ce44:	681a      	ldr	r2, [r3, #0]
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	3304      	adds	r3, #4
 800ce4a:	4619      	mov	r1, r3
 800ce4c:	4610      	mov	r0, r2
 800ce4e:	f7fd fed5 	bl	800abfc <vListInsert>
 800ce52:	e016      	b.n	800ce82 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ce54:	2300      	movs	r3, #0
 800ce56:	9300      	str	r3, [sp, #0]
 800ce58:	2300      	movs	r3, #0
 800ce5a:	693a      	ldr	r2, [r7, #16]
 800ce5c:	2100      	movs	r1, #0
 800ce5e:	68f8      	ldr	r0, [r7, #12]
 800ce60:	f7ff fd60 	bl	800c924 <xTimerGenericCommand>
 800ce64:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d10a      	bne.n	800ce82 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800ce6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce70:	f383 8811 	msr	BASEPRI, r3
 800ce74:	f3bf 8f6f 	isb	sy
 800ce78:	f3bf 8f4f 	dsb	sy
 800ce7c:	603b      	str	r3, [r7, #0]
}
 800ce7e:	bf00      	nop
 800ce80:	e7fe      	b.n	800ce80 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ce82:	4b09      	ldr	r3, [pc, #36]	; (800cea8 <prvSwitchTimerLists+0xc0>)
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d1b1      	bne.n	800cdf0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ce8c:	4b06      	ldr	r3, [pc, #24]	; (800cea8 <prvSwitchTimerLists+0xc0>)
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ce92:	4b06      	ldr	r3, [pc, #24]	; (800ceac <prvSwitchTimerLists+0xc4>)
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	4a04      	ldr	r2, [pc, #16]	; (800cea8 <prvSwitchTimerLists+0xc0>)
 800ce98:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ce9a:	4a04      	ldr	r2, [pc, #16]	; (800ceac <prvSwitchTimerLists+0xc4>)
 800ce9c:	697b      	ldr	r3, [r7, #20]
 800ce9e:	6013      	str	r3, [r2, #0]
}
 800cea0:	bf00      	nop
 800cea2:	3718      	adds	r7, #24
 800cea4:	46bd      	mov	sp, r7
 800cea6:	bd80      	pop	{r7, pc}
 800cea8:	20000f7c 	.word	0x20000f7c
 800ceac:	20000f80 	.word	0x20000f80

0800ceb0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ceb0:	b580      	push	{r7, lr}
 800ceb2:	b082      	sub	sp, #8
 800ceb4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ceb6:	f000 f965 	bl	800d184 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ceba:	4b15      	ldr	r3, [pc, #84]	; (800cf10 <prvCheckForValidListAndQueue+0x60>)
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d120      	bne.n	800cf04 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800cec2:	4814      	ldr	r0, [pc, #80]	; (800cf14 <prvCheckForValidListAndQueue+0x64>)
 800cec4:	f7fd fe49 	bl	800ab5a <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800cec8:	4813      	ldr	r0, [pc, #76]	; (800cf18 <prvCheckForValidListAndQueue+0x68>)
 800ceca:	f7fd fe46 	bl	800ab5a <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800cece:	4b13      	ldr	r3, [pc, #76]	; (800cf1c <prvCheckForValidListAndQueue+0x6c>)
 800ced0:	4a10      	ldr	r2, [pc, #64]	; (800cf14 <prvCheckForValidListAndQueue+0x64>)
 800ced2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ced4:	4b12      	ldr	r3, [pc, #72]	; (800cf20 <prvCheckForValidListAndQueue+0x70>)
 800ced6:	4a10      	ldr	r2, [pc, #64]	; (800cf18 <prvCheckForValidListAndQueue+0x68>)
 800ced8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ceda:	2300      	movs	r3, #0
 800cedc:	9300      	str	r3, [sp, #0]
 800cede:	4b11      	ldr	r3, [pc, #68]	; (800cf24 <prvCheckForValidListAndQueue+0x74>)
 800cee0:	4a11      	ldr	r2, [pc, #68]	; (800cf28 <prvCheckForValidListAndQueue+0x78>)
 800cee2:	2110      	movs	r1, #16
 800cee4:	200a      	movs	r0, #10
 800cee6:	f7fd ff55 	bl	800ad94 <xQueueGenericCreateStatic>
 800ceea:	4603      	mov	r3, r0
 800ceec:	4a08      	ldr	r2, [pc, #32]	; (800cf10 <prvCheckForValidListAndQueue+0x60>)
 800ceee:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800cef0:	4b07      	ldr	r3, [pc, #28]	; (800cf10 <prvCheckForValidListAndQueue+0x60>)
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d005      	beq.n	800cf04 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800cef8:	4b05      	ldr	r3, [pc, #20]	; (800cf10 <prvCheckForValidListAndQueue+0x60>)
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	490b      	ldr	r1, [pc, #44]	; (800cf2c <prvCheckForValidListAndQueue+0x7c>)
 800cefe:	4618      	mov	r0, r3
 800cf00:	f7fe fba8 	bl	800b654 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cf04:	f000 f96e 	bl	800d1e4 <vPortExitCritical>
}
 800cf08:	bf00      	nop
 800cf0a:	46bd      	mov	sp, r7
 800cf0c:	bd80      	pop	{r7, pc}
 800cf0e:	bf00      	nop
 800cf10:	20000f84 	.word	0x20000f84
 800cf14:	20000f54 	.word	0x20000f54
 800cf18:	20000f68 	.word	0x20000f68
 800cf1c:	20000f7c 	.word	0x20000f7c
 800cf20:	20000f80 	.word	0x20000f80
 800cf24:	20001030 	.word	0x20001030
 800cf28:	20000f90 	.word	0x20000f90
 800cf2c:	0800e500 	.word	0x0800e500

0800cf30 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800cf30:	b480      	push	{r7}
 800cf32:	b085      	sub	sp, #20
 800cf34:	af00      	add	r7, sp, #0
 800cf36:	60f8      	str	r0, [r7, #12]
 800cf38:	60b9      	str	r1, [r7, #8]
 800cf3a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	3b04      	subs	r3, #4
 800cf40:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800cf48:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	3b04      	subs	r3, #4
 800cf4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800cf50:	68bb      	ldr	r3, [r7, #8]
 800cf52:	f023 0201 	bic.w	r2, r3, #1
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cf5a:	68fb      	ldr	r3, [r7, #12]
 800cf5c:	3b04      	subs	r3, #4
 800cf5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800cf60:	4a0c      	ldr	r2, [pc, #48]	; (800cf94 <pxPortInitialiseStack+0x64>)
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	3b14      	subs	r3, #20
 800cf6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800cf6c:	687a      	ldr	r2, [r7, #4]
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	3b04      	subs	r3, #4
 800cf76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800cf78:	68fb      	ldr	r3, [r7, #12]
 800cf7a:	f06f 0202 	mvn.w	r2, #2
 800cf7e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	3b20      	subs	r3, #32
 800cf84:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800cf86:	68fb      	ldr	r3, [r7, #12]
}
 800cf88:	4618      	mov	r0, r3
 800cf8a:	3714      	adds	r7, #20
 800cf8c:	46bd      	mov	sp, r7
 800cf8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf92:	4770      	bx	lr
 800cf94:	0800cf99 	.word	0x0800cf99

0800cf98 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800cf98:	b480      	push	{r7}
 800cf9a:	b085      	sub	sp, #20
 800cf9c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800cf9e:	2300      	movs	r3, #0
 800cfa0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800cfa2:	4b12      	ldr	r3, [pc, #72]	; (800cfec <prvTaskExitError+0x54>)
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfaa:	d00a      	beq.n	800cfc2 <prvTaskExitError+0x2a>
	__asm volatile
 800cfac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfb0:	f383 8811 	msr	BASEPRI, r3
 800cfb4:	f3bf 8f6f 	isb	sy
 800cfb8:	f3bf 8f4f 	dsb	sy
 800cfbc:	60fb      	str	r3, [r7, #12]
}
 800cfbe:	bf00      	nop
 800cfc0:	e7fe      	b.n	800cfc0 <prvTaskExitError+0x28>
	__asm volatile
 800cfc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfc6:	f383 8811 	msr	BASEPRI, r3
 800cfca:	f3bf 8f6f 	isb	sy
 800cfce:	f3bf 8f4f 	dsb	sy
 800cfd2:	60bb      	str	r3, [r7, #8]
}
 800cfd4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800cfd6:	bf00      	nop
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d0fc      	beq.n	800cfd8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800cfde:	bf00      	nop
 800cfe0:	bf00      	nop
 800cfe2:	3714      	adds	r7, #20
 800cfe4:	46bd      	mov	sp, r7
 800cfe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfea:	4770      	bx	lr
 800cfec:	20000098 	.word	0x20000098

0800cff0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800cff0:	4b07      	ldr	r3, [pc, #28]	; (800d010 <pxCurrentTCBConst2>)
 800cff2:	6819      	ldr	r1, [r3, #0]
 800cff4:	6808      	ldr	r0, [r1, #0]
 800cff6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cffa:	f380 8809 	msr	PSP, r0
 800cffe:	f3bf 8f6f 	isb	sy
 800d002:	f04f 0000 	mov.w	r0, #0
 800d006:	f380 8811 	msr	BASEPRI, r0
 800d00a:	4770      	bx	lr
 800d00c:	f3af 8000 	nop.w

0800d010 <pxCurrentTCBConst2>:
 800d010:	20000a54 	.word	0x20000a54
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d014:	bf00      	nop
 800d016:	bf00      	nop

0800d018 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d018:	4808      	ldr	r0, [pc, #32]	; (800d03c <prvPortStartFirstTask+0x24>)
 800d01a:	6800      	ldr	r0, [r0, #0]
 800d01c:	6800      	ldr	r0, [r0, #0]
 800d01e:	f380 8808 	msr	MSP, r0
 800d022:	f04f 0000 	mov.w	r0, #0
 800d026:	f380 8814 	msr	CONTROL, r0
 800d02a:	b662      	cpsie	i
 800d02c:	b661      	cpsie	f
 800d02e:	f3bf 8f4f 	dsb	sy
 800d032:	f3bf 8f6f 	isb	sy
 800d036:	df00      	svc	0
 800d038:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d03a:	bf00      	nop
 800d03c:	e000ed08 	.word	0xe000ed08

0800d040 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d040:	b580      	push	{r7, lr}
 800d042:	b086      	sub	sp, #24
 800d044:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d046:	4b46      	ldr	r3, [pc, #280]	; (800d160 <xPortStartScheduler+0x120>)
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	4a46      	ldr	r2, [pc, #280]	; (800d164 <xPortStartScheduler+0x124>)
 800d04c:	4293      	cmp	r3, r2
 800d04e:	d10a      	bne.n	800d066 <xPortStartScheduler+0x26>
	__asm volatile
 800d050:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d054:	f383 8811 	msr	BASEPRI, r3
 800d058:	f3bf 8f6f 	isb	sy
 800d05c:	f3bf 8f4f 	dsb	sy
 800d060:	613b      	str	r3, [r7, #16]
}
 800d062:	bf00      	nop
 800d064:	e7fe      	b.n	800d064 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d066:	4b3e      	ldr	r3, [pc, #248]	; (800d160 <xPortStartScheduler+0x120>)
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	4a3f      	ldr	r2, [pc, #252]	; (800d168 <xPortStartScheduler+0x128>)
 800d06c:	4293      	cmp	r3, r2
 800d06e:	d10a      	bne.n	800d086 <xPortStartScheduler+0x46>
	__asm volatile
 800d070:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d074:	f383 8811 	msr	BASEPRI, r3
 800d078:	f3bf 8f6f 	isb	sy
 800d07c:	f3bf 8f4f 	dsb	sy
 800d080:	60fb      	str	r3, [r7, #12]
}
 800d082:	bf00      	nop
 800d084:	e7fe      	b.n	800d084 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d086:	4b39      	ldr	r3, [pc, #228]	; (800d16c <xPortStartScheduler+0x12c>)
 800d088:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d08a:	697b      	ldr	r3, [r7, #20]
 800d08c:	781b      	ldrb	r3, [r3, #0]
 800d08e:	b2db      	uxtb	r3, r3
 800d090:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d092:	697b      	ldr	r3, [r7, #20]
 800d094:	22ff      	movs	r2, #255	; 0xff
 800d096:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d098:	697b      	ldr	r3, [r7, #20]
 800d09a:	781b      	ldrb	r3, [r3, #0]
 800d09c:	b2db      	uxtb	r3, r3
 800d09e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d0a0:	78fb      	ldrb	r3, [r7, #3]
 800d0a2:	b2db      	uxtb	r3, r3
 800d0a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d0a8:	b2da      	uxtb	r2, r3
 800d0aa:	4b31      	ldr	r3, [pc, #196]	; (800d170 <xPortStartScheduler+0x130>)
 800d0ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d0ae:	4b31      	ldr	r3, [pc, #196]	; (800d174 <xPortStartScheduler+0x134>)
 800d0b0:	2207      	movs	r2, #7
 800d0b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d0b4:	e009      	b.n	800d0ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800d0b6:	4b2f      	ldr	r3, [pc, #188]	; (800d174 <xPortStartScheduler+0x134>)
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	3b01      	subs	r3, #1
 800d0bc:	4a2d      	ldr	r2, [pc, #180]	; (800d174 <xPortStartScheduler+0x134>)
 800d0be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d0c0:	78fb      	ldrb	r3, [r7, #3]
 800d0c2:	b2db      	uxtb	r3, r3
 800d0c4:	005b      	lsls	r3, r3, #1
 800d0c6:	b2db      	uxtb	r3, r3
 800d0c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d0ca:	78fb      	ldrb	r3, [r7, #3]
 800d0cc:	b2db      	uxtb	r3, r3
 800d0ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d0d2:	2b80      	cmp	r3, #128	; 0x80
 800d0d4:	d0ef      	beq.n	800d0b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d0d6:	4b27      	ldr	r3, [pc, #156]	; (800d174 <xPortStartScheduler+0x134>)
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	f1c3 0307 	rsb	r3, r3, #7
 800d0de:	2b04      	cmp	r3, #4
 800d0e0:	d00a      	beq.n	800d0f8 <xPortStartScheduler+0xb8>
	__asm volatile
 800d0e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0e6:	f383 8811 	msr	BASEPRI, r3
 800d0ea:	f3bf 8f6f 	isb	sy
 800d0ee:	f3bf 8f4f 	dsb	sy
 800d0f2:	60bb      	str	r3, [r7, #8]
}
 800d0f4:	bf00      	nop
 800d0f6:	e7fe      	b.n	800d0f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d0f8:	4b1e      	ldr	r3, [pc, #120]	; (800d174 <xPortStartScheduler+0x134>)
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	021b      	lsls	r3, r3, #8
 800d0fe:	4a1d      	ldr	r2, [pc, #116]	; (800d174 <xPortStartScheduler+0x134>)
 800d100:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d102:	4b1c      	ldr	r3, [pc, #112]	; (800d174 <xPortStartScheduler+0x134>)
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d10a:	4a1a      	ldr	r2, [pc, #104]	; (800d174 <xPortStartScheduler+0x134>)
 800d10c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	b2da      	uxtb	r2, r3
 800d112:	697b      	ldr	r3, [r7, #20]
 800d114:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d116:	4b18      	ldr	r3, [pc, #96]	; (800d178 <xPortStartScheduler+0x138>)
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	4a17      	ldr	r2, [pc, #92]	; (800d178 <xPortStartScheduler+0x138>)
 800d11c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d120:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d122:	4b15      	ldr	r3, [pc, #84]	; (800d178 <xPortStartScheduler+0x138>)
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	4a14      	ldr	r2, [pc, #80]	; (800d178 <xPortStartScheduler+0x138>)
 800d128:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d12c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d12e:	f000 f8dd 	bl	800d2ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d132:	4b12      	ldr	r3, [pc, #72]	; (800d17c <xPortStartScheduler+0x13c>)
 800d134:	2200      	movs	r2, #0
 800d136:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d138:	f000 f8fc 	bl	800d334 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d13c:	4b10      	ldr	r3, [pc, #64]	; (800d180 <xPortStartScheduler+0x140>)
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	4a0f      	ldr	r2, [pc, #60]	; (800d180 <xPortStartScheduler+0x140>)
 800d142:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d146:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d148:	f7ff ff66 	bl	800d018 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d14c:	f7fe feb2 	bl	800beb4 <vTaskSwitchContext>
	prvTaskExitError();
 800d150:	f7ff ff22 	bl	800cf98 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d154:	2300      	movs	r3, #0
}
 800d156:	4618      	mov	r0, r3
 800d158:	3718      	adds	r7, #24
 800d15a:	46bd      	mov	sp, r7
 800d15c:	bd80      	pop	{r7, pc}
 800d15e:	bf00      	nop
 800d160:	e000ed00 	.word	0xe000ed00
 800d164:	410fc271 	.word	0x410fc271
 800d168:	410fc270 	.word	0x410fc270
 800d16c:	e000e400 	.word	0xe000e400
 800d170:	20001080 	.word	0x20001080
 800d174:	20001084 	.word	0x20001084
 800d178:	e000ed20 	.word	0xe000ed20
 800d17c:	20000098 	.word	0x20000098
 800d180:	e000ef34 	.word	0xe000ef34

0800d184 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d184:	b480      	push	{r7}
 800d186:	b083      	sub	sp, #12
 800d188:	af00      	add	r7, sp, #0
	__asm volatile
 800d18a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d18e:	f383 8811 	msr	BASEPRI, r3
 800d192:	f3bf 8f6f 	isb	sy
 800d196:	f3bf 8f4f 	dsb	sy
 800d19a:	607b      	str	r3, [r7, #4]
}
 800d19c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d19e:	4b0f      	ldr	r3, [pc, #60]	; (800d1dc <vPortEnterCritical+0x58>)
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	3301      	adds	r3, #1
 800d1a4:	4a0d      	ldr	r2, [pc, #52]	; (800d1dc <vPortEnterCritical+0x58>)
 800d1a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d1a8:	4b0c      	ldr	r3, [pc, #48]	; (800d1dc <vPortEnterCritical+0x58>)
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	2b01      	cmp	r3, #1
 800d1ae:	d10f      	bne.n	800d1d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d1b0:	4b0b      	ldr	r3, [pc, #44]	; (800d1e0 <vPortEnterCritical+0x5c>)
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	b2db      	uxtb	r3, r3
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d00a      	beq.n	800d1d0 <vPortEnterCritical+0x4c>
	__asm volatile
 800d1ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1be:	f383 8811 	msr	BASEPRI, r3
 800d1c2:	f3bf 8f6f 	isb	sy
 800d1c6:	f3bf 8f4f 	dsb	sy
 800d1ca:	603b      	str	r3, [r7, #0]
}
 800d1cc:	bf00      	nop
 800d1ce:	e7fe      	b.n	800d1ce <vPortEnterCritical+0x4a>
	}
}
 800d1d0:	bf00      	nop
 800d1d2:	370c      	adds	r7, #12
 800d1d4:	46bd      	mov	sp, r7
 800d1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1da:	4770      	bx	lr
 800d1dc:	20000098 	.word	0x20000098
 800d1e0:	e000ed04 	.word	0xe000ed04

0800d1e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d1e4:	b480      	push	{r7}
 800d1e6:	b083      	sub	sp, #12
 800d1e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d1ea:	4b12      	ldr	r3, [pc, #72]	; (800d234 <vPortExitCritical+0x50>)
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d10a      	bne.n	800d208 <vPortExitCritical+0x24>
	__asm volatile
 800d1f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1f6:	f383 8811 	msr	BASEPRI, r3
 800d1fa:	f3bf 8f6f 	isb	sy
 800d1fe:	f3bf 8f4f 	dsb	sy
 800d202:	607b      	str	r3, [r7, #4]
}
 800d204:	bf00      	nop
 800d206:	e7fe      	b.n	800d206 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d208:	4b0a      	ldr	r3, [pc, #40]	; (800d234 <vPortExitCritical+0x50>)
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	3b01      	subs	r3, #1
 800d20e:	4a09      	ldr	r2, [pc, #36]	; (800d234 <vPortExitCritical+0x50>)
 800d210:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d212:	4b08      	ldr	r3, [pc, #32]	; (800d234 <vPortExitCritical+0x50>)
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	2b00      	cmp	r3, #0
 800d218:	d105      	bne.n	800d226 <vPortExitCritical+0x42>
 800d21a:	2300      	movs	r3, #0
 800d21c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d21e:	683b      	ldr	r3, [r7, #0]
 800d220:	f383 8811 	msr	BASEPRI, r3
}
 800d224:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d226:	bf00      	nop
 800d228:	370c      	adds	r7, #12
 800d22a:	46bd      	mov	sp, r7
 800d22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d230:	4770      	bx	lr
 800d232:	bf00      	nop
 800d234:	20000098 	.word	0x20000098
	...

0800d240 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d240:	f3ef 8009 	mrs	r0, PSP
 800d244:	f3bf 8f6f 	isb	sy
 800d248:	4b15      	ldr	r3, [pc, #84]	; (800d2a0 <pxCurrentTCBConst>)
 800d24a:	681a      	ldr	r2, [r3, #0]
 800d24c:	f01e 0f10 	tst.w	lr, #16
 800d250:	bf08      	it	eq
 800d252:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d256:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d25a:	6010      	str	r0, [r2, #0]
 800d25c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d260:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d264:	f380 8811 	msr	BASEPRI, r0
 800d268:	f3bf 8f4f 	dsb	sy
 800d26c:	f3bf 8f6f 	isb	sy
 800d270:	f7fe fe20 	bl	800beb4 <vTaskSwitchContext>
 800d274:	f04f 0000 	mov.w	r0, #0
 800d278:	f380 8811 	msr	BASEPRI, r0
 800d27c:	bc09      	pop	{r0, r3}
 800d27e:	6819      	ldr	r1, [r3, #0]
 800d280:	6808      	ldr	r0, [r1, #0]
 800d282:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d286:	f01e 0f10 	tst.w	lr, #16
 800d28a:	bf08      	it	eq
 800d28c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d290:	f380 8809 	msr	PSP, r0
 800d294:	f3bf 8f6f 	isb	sy
 800d298:	4770      	bx	lr
 800d29a:	bf00      	nop
 800d29c:	f3af 8000 	nop.w

0800d2a0 <pxCurrentTCBConst>:
 800d2a0:	20000a54 	.word	0x20000a54
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d2a4:	bf00      	nop
 800d2a6:	bf00      	nop

0800d2a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d2a8:	b580      	push	{r7, lr}
 800d2aa:	b082      	sub	sp, #8
 800d2ac:	af00      	add	r7, sp, #0
	__asm volatile
 800d2ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2b2:	f383 8811 	msr	BASEPRI, r3
 800d2b6:	f3bf 8f6f 	isb	sy
 800d2ba:	f3bf 8f4f 	dsb	sy
 800d2be:	607b      	str	r3, [r7, #4]
}
 800d2c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d2c2:	f7fe fd3d 	bl	800bd40 <xTaskIncrementTick>
 800d2c6:	4603      	mov	r3, r0
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d003      	beq.n	800d2d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d2cc:	4b06      	ldr	r3, [pc, #24]	; (800d2e8 <xPortSysTickHandler+0x40>)
 800d2ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d2d2:	601a      	str	r2, [r3, #0]
 800d2d4:	2300      	movs	r3, #0
 800d2d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d2d8:	683b      	ldr	r3, [r7, #0]
 800d2da:	f383 8811 	msr	BASEPRI, r3
}
 800d2de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d2e0:	bf00      	nop
 800d2e2:	3708      	adds	r7, #8
 800d2e4:	46bd      	mov	sp, r7
 800d2e6:	bd80      	pop	{r7, pc}
 800d2e8:	e000ed04 	.word	0xe000ed04

0800d2ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d2ec:	b480      	push	{r7}
 800d2ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d2f0:	4b0b      	ldr	r3, [pc, #44]	; (800d320 <vPortSetupTimerInterrupt+0x34>)
 800d2f2:	2200      	movs	r2, #0
 800d2f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d2f6:	4b0b      	ldr	r3, [pc, #44]	; (800d324 <vPortSetupTimerInterrupt+0x38>)
 800d2f8:	2200      	movs	r2, #0
 800d2fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d2fc:	4b0a      	ldr	r3, [pc, #40]	; (800d328 <vPortSetupTimerInterrupt+0x3c>)
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	4a0a      	ldr	r2, [pc, #40]	; (800d32c <vPortSetupTimerInterrupt+0x40>)
 800d302:	fba2 2303 	umull	r2, r3, r2, r3
 800d306:	099b      	lsrs	r3, r3, #6
 800d308:	4a09      	ldr	r2, [pc, #36]	; (800d330 <vPortSetupTimerInterrupt+0x44>)
 800d30a:	3b01      	subs	r3, #1
 800d30c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d30e:	4b04      	ldr	r3, [pc, #16]	; (800d320 <vPortSetupTimerInterrupt+0x34>)
 800d310:	2207      	movs	r2, #7
 800d312:	601a      	str	r2, [r3, #0]
}
 800d314:	bf00      	nop
 800d316:	46bd      	mov	sp, r7
 800d318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d31c:	4770      	bx	lr
 800d31e:	bf00      	nop
 800d320:	e000e010 	.word	0xe000e010
 800d324:	e000e018 	.word	0xe000e018
 800d328:	20000000 	.word	0x20000000
 800d32c:	10624dd3 	.word	0x10624dd3
 800d330:	e000e014 	.word	0xe000e014

0800d334 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d334:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d344 <vPortEnableVFP+0x10>
 800d338:	6801      	ldr	r1, [r0, #0]
 800d33a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d33e:	6001      	str	r1, [r0, #0]
 800d340:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d342:	bf00      	nop
 800d344:	e000ed88 	.word	0xe000ed88

0800d348 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d348:	b480      	push	{r7}
 800d34a:	b085      	sub	sp, #20
 800d34c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d34e:	f3ef 8305 	mrs	r3, IPSR
 800d352:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	2b0f      	cmp	r3, #15
 800d358:	d914      	bls.n	800d384 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d35a:	4a17      	ldr	r2, [pc, #92]	; (800d3b8 <vPortValidateInterruptPriority+0x70>)
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	4413      	add	r3, r2
 800d360:	781b      	ldrb	r3, [r3, #0]
 800d362:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d364:	4b15      	ldr	r3, [pc, #84]	; (800d3bc <vPortValidateInterruptPriority+0x74>)
 800d366:	781b      	ldrb	r3, [r3, #0]
 800d368:	7afa      	ldrb	r2, [r7, #11]
 800d36a:	429a      	cmp	r2, r3
 800d36c:	d20a      	bcs.n	800d384 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800d36e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d372:	f383 8811 	msr	BASEPRI, r3
 800d376:	f3bf 8f6f 	isb	sy
 800d37a:	f3bf 8f4f 	dsb	sy
 800d37e:	607b      	str	r3, [r7, #4]
}
 800d380:	bf00      	nop
 800d382:	e7fe      	b.n	800d382 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d384:	4b0e      	ldr	r3, [pc, #56]	; (800d3c0 <vPortValidateInterruptPriority+0x78>)
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d38c:	4b0d      	ldr	r3, [pc, #52]	; (800d3c4 <vPortValidateInterruptPriority+0x7c>)
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	429a      	cmp	r2, r3
 800d392:	d90a      	bls.n	800d3aa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800d394:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d398:	f383 8811 	msr	BASEPRI, r3
 800d39c:	f3bf 8f6f 	isb	sy
 800d3a0:	f3bf 8f4f 	dsb	sy
 800d3a4:	603b      	str	r3, [r7, #0]
}
 800d3a6:	bf00      	nop
 800d3a8:	e7fe      	b.n	800d3a8 <vPortValidateInterruptPriority+0x60>
	}
 800d3aa:	bf00      	nop
 800d3ac:	3714      	adds	r7, #20
 800d3ae:	46bd      	mov	sp, r7
 800d3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3b4:	4770      	bx	lr
 800d3b6:	bf00      	nop
 800d3b8:	e000e3f0 	.word	0xe000e3f0
 800d3bc:	20001080 	.word	0x20001080
 800d3c0:	e000ed0c 	.word	0xe000ed0c
 800d3c4:	20001084 	.word	0x20001084

0800d3c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d3c8:	b580      	push	{r7, lr}
 800d3ca:	b08a      	sub	sp, #40	; 0x28
 800d3cc:	af00      	add	r7, sp, #0
 800d3ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d3d0:	2300      	movs	r3, #0
 800d3d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d3d4:	f7fe fbf8 	bl	800bbc8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d3d8:	4b5b      	ldr	r3, [pc, #364]	; (800d548 <pvPortMalloc+0x180>)
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d101      	bne.n	800d3e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d3e0:	f000 f920 	bl	800d624 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d3e4:	4b59      	ldr	r3, [pc, #356]	; (800d54c <pvPortMalloc+0x184>)
 800d3e6:	681a      	ldr	r2, [r3, #0]
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	4013      	ands	r3, r2
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	f040 8093 	bne.w	800d518 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d01d      	beq.n	800d434 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800d3f8:	2208      	movs	r2, #8
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	4413      	add	r3, r2
 800d3fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	f003 0307 	and.w	r3, r3, #7
 800d406:	2b00      	cmp	r3, #0
 800d408:	d014      	beq.n	800d434 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	f023 0307 	bic.w	r3, r3, #7
 800d410:	3308      	adds	r3, #8
 800d412:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	f003 0307 	and.w	r3, r3, #7
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d00a      	beq.n	800d434 <pvPortMalloc+0x6c>
	__asm volatile
 800d41e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d422:	f383 8811 	msr	BASEPRI, r3
 800d426:	f3bf 8f6f 	isb	sy
 800d42a:	f3bf 8f4f 	dsb	sy
 800d42e:	617b      	str	r3, [r7, #20]
}
 800d430:	bf00      	nop
 800d432:	e7fe      	b.n	800d432 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	2b00      	cmp	r3, #0
 800d438:	d06e      	beq.n	800d518 <pvPortMalloc+0x150>
 800d43a:	4b45      	ldr	r3, [pc, #276]	; (800d550 <pvPortMalloc+0x188>)
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	687a      	ldr	r2, [r7, #4]
 800d440:	429a      	cmp	r2, r3
 800d442:	d869      	bhi.n	800d518 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d444:	4b43      	ldr	r3, [pc, #268]	; (800d554 <pvPortMalloc+0x18c>)
 800d446:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d448:	4b42      	ldr	r3, [pc, #264]	; (800d554 <pvPortMalloc+0x18c>)
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d44e:	e004      	b.n	800d45a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800d450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d452:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d45a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d45c:	685b      	ldr	r3, [r3, #4]
 800d45e:	687a      	ldr	r2, [r7, #4]
 800d460:	429a      	cmp	r2, r3
 800d462:	d903      	bls.n	800d46c <pvPortMalloc+0xa4>
 800d464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d1f1      	bne.n	800d450 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d46c:	4b36      	ldr	r3, [pc, #216]	; (800d548 <pvPortMalloc+0x180>)
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d472:	429a      	cmp	r2, r3
 800d474:	d050      	beq.n	800d518 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d476:	6a3b      	ldr	r3, [r7, #32]
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	2208      	movs	r2, #8
 800d47c:	4413      	add	r3, r2
 800d47e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d482:	681a      	ldr	r2, [r3, #0]
 800d484:	6a3b      	ldr	r3, [r7, #32]
 800d486:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d48a:	685a      	ldr	r2, [r3, #4]
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	1ad2      	subs	r2, r2, r3
 800d490:	2308      	movs	r3, #8
 800d492:	005b      	lsls	r3, r3, #1
 800d494:	429a      	cmp	r2, r3
 800d496:	d91f      	bls.n	800d4d8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d498:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	4413      	add	r3, r2
 800d49e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d4a0:	69bb      	ldr	r3, [r7, #24]
 800d4a2:	f003 0307 	and.w	r3, r3, #7
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d00a      	beq.n	800d4c0 <pvPortMalloc+0xf8>
	__asm volatile
 800d4aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4ae:	f383 8811 	msr	BASEPRI, r3
 800d4b2:	f3bf 8f6f 	isb	sy
 800d4b6:	f3bf 8f4f 	dsb	sy
 800d4ba:	613b      	str	r3, [r7, #16]
}
 800d4bc:	bf00      	nop
 800d4be:	e7fe      	b.n	800d4be <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d4c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4c2:	685a      	ldr	r2, [r3, #4]
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	1ad2      	subs	r2, r2, r3
 800d4c8:	69bb      	ldr	r3, [r7, #24]
 800d4ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d4cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4ce:	687a      	ldr	r2, [r7, #4]
 800d4d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d4d2:	69b8      	ldr	r0, [r7, #24]
 800d4d4:	f000 f908 	bl	800d6e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d4d8:	4b1d      	ldr	r3, [pc, #116]	; (800d550 <pvPortMalloc+0x188>)
 800d4da:	681a      	ldr	r2, [r3, #0]
 800d4dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4de:	685b      	ldr	r3, [r3, #4]
 800d4e0:	1ad3      	subs	r3, r2, r3
 800d4e2:	4a1b      	ldr	r2, [pc, #108]	; (800d550 <pvPortMalloc+0x188>)
 800d4e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d4e6:	4b1a      	ldr	r3, [pc, #104]	; (800d550 <pvPortMalloc+0x188>)
 800d4e8:	681a      	ldr	r2, [r3, #0]
 800d4ea:	4b1b      	ldr	r3, [pc, #108]	; (800d558 <pvPortMalloc+0x190>)
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	429a      	cmp	r2, r3
 800d4f0:	d203      	bcs.n	800d4fa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d4f2:	4b17      	ldr	r3, [pc, #92]	; (800d550 <pvPortMalloc+0x188>)
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	4a18      	ldr	r2, [pc, #96]	; (800d558 <pvPortMalloc+0x190>)
 800d4f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d4fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4fc:	685a      	ldr	r2, [r3, #4]
 800d4fe:	4b13      	ldr	r3, [pc, #76]	; (800d54c <pvPortMalloc+0x184>)
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	431a      	orrs	r2, r3
 800d504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d506:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d50a:	2200      	movs	r2, #0
 800d50c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d50e:	4b13      	ldr	r3, [pc, #76]	; (800d55c <pvPortMalloc+0x194>)
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	3301      	adds	r3, #1
 800d514:	4a11      	ldr	r2, [pc, #68]	; (800d55c <pvPortMalloc+0x194>)
 800d516:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d518:	f7fe fb64 	bl	800bbe4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d51c:	69fb      	ldr	r3, [r7, #28]
 800d51e:	f003 0307 	and.w	r3, r3, #7
 800d522:	2b00      	cmp	r3, #0
 800d524:	d00a      	beq.n	800d53c <pvPortMalloc+0x174>
	__asm volatile
 800d526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d52a:	f383 8811 	msr	BASEPRI, r3
 800d52e:	f3bf 8f6f 	isb	sy
 800d532:	f3bf 8f4f 	dsb	sy
 800d536:	60fb      	str	r3, [r7, #12]
}
 800d538:	bf00      	nop
 800d53a:	e7fe      	b.n	800d53a <pvPortMalloc+0x172>
	return pvReturn;
 800d53c:	69fb      	ldr	r3, [r7, #28]
}
 800d53e:	4618      	mov	r0, r3
 800d540:	3728      	adds	r7, #40	; 0x28
 800d542:	46bd      	mov	sp, r7
 800d544:	bd80      	pop	{r7, pc}
 800d546:	bf00      	nop
 800d548:	20004c90 	.word	0x20004c90
 800d54c:	20004ca4 	.word	0x20004ca4
 800d550:	20004c94 	.word	0x20004c94
 800d554:	20004c88 	.word	0x20004c88
 800d558:	20004c98 	.word	0x20004c98
 800d55c:	20004c9c 	.word	0x20004c9c

0800d560 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d560:	b580      	push	{r7, lr}
 800d562:	b086      	sub	sp, #24
 800d564:	af00      	add	r7, sp, #0
 800d566:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d04d      	beq.n	800d60e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d572:	2308      	movs	r3, #8
 800d574:	425b      	negs	r3, r3
 800d576:	697a      	ldr	r2, [r7, #20]
 800d578:	4413      	add	r3, r2
 800d57a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d57c:	697b      	ldr	r3, [r7, #20]
 800d57e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d580:	693b      	ldr	r3, [r7, #16]
 800d582:	685a      	ldr	r2, [r3, #4]
 800d584:	4b24      	ldr	r3, [pc, #144]	; (800d618 <vPortFree+0xb8>)
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	4013      	ands	r3, r2
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d10a      	bne.n	800d5a4 <vPortFree+0x44>
	__asm volatile
 800d58e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d592:	f383 8811 	msr	BASEPRI, r3
 800d596:	f3bf 8f6f 	isb	sy
 800d59a:	f3bf 8f4f 	dsb	sy
 800d59e:	60fb      	str	r3, [r7, #12]
}
 800d5a0:	bf00      	nop
 800d5a2:	e7fe      	b.n	800d5a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d5a4:	693b      	ldr	r3, [r7, #16]
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d00a      	beq.n	800d5c2 <vPortFree+0x62>
	__asm volatile
 800d5ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5b0:	f383 8811 	msr	BASEPRI, r3
 800d5b4:	f3bf 8f6f 	isb	sy
 800d5b8:	f3bf 8f4f 	dsb	sy
 800d5bc:	60bb      	str	r3, [r7, #8]
}
 800d5be:	bf00      	nop
 800d5c0:	e7fe      	b.n	800d5c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d5c2:	693b      	ldr	r3, [r7, #16]
 800d5c4:	685a      	ldr	r2, [r3, #4]
 800d5c6:	4b14      	ldr	r3, [pc, #80]	; (800d618 <vPortFree+0xb8>)
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	4013      	ands	r3, r2
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d01e      	beq.n	800d60e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d5d0:	693b      	ldr	r3, [r7, #16]
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d11a      	bne.n	800d60e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d5d8:	693b      	ldr	r3, [r7, #16]
 800d5da:	685a      	ldr	r2, [r3, #4]
 800d5dc:	4b0e      	ldr	r3, [pc, #56]	; (800d618 <vPortFree+0xb8>)
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	43db      	mvns	r3, r3
 800d5e2:	401a      	ands	r2, r3
 800d5e4:	693b      	ldr	r3, [r7, #16]
 800d5e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d5e8:	f7fe faee 	bl	800bbc8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d5ec:	693b      	ldr	r3, [r7, #16]
 800d5ee:	685a      	ldr	r2, [r3, #4]
 800d5f0:	4b0a      	ldr	r3, [pc, #40]	; (800d61c <vPortFree+0xbc>)
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	4413      	add	r3, r2
 800d5f6:	4a09      	ldr	r2, [pc, #36]	; (800d61c <vPortFree+0xbc>)
 800d5f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d5fa:	6938      	ldr	r0, [r7, #16]
 800d5fc:	f000 f874 	bl	800d6e8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d600:	4b07      	ldr	r3, [pc, #28]	; (800d620 <vPortFree+0xc0>)
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	3301      	adds	r3, #1
 800d606:	4a06      	ldr	r2, [pc, #24]	; (800d620 <vPortFree+0xc0>)
 800d608:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d60a:	f7fe faeb 	bl	800bbe4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d60e:	bf00      	nop
 800d610:	3718      	adds	r7, #24
 800d612:	46bd      	mov	sp, r7
 800d614:	bd80      	pop	{r7, pc}
 800d616:	bf00      	nop
 800d618:	20004ca4 	.word	0x20004ca4
 800d61c:	20004c94 	.word	0x20004c94
 800d620:	20004ca0 	.word	0x20004ca0

0800d624 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d624:	b480      	push	{r7}
 800d626:	b085      	sub	sp, #20
 800d628:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d62a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800d62e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d630:	4b27      	ldr	r3, [pc, #156]	; (800d6d0 <prvHeapInit+0xac>)
 800d632:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	f003 0307 	and.w	r3, r3, #7
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d00c      	beq.n	800d658 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	3307      	adds	r3, #7
 800d642:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d644:	68fb      	ldr	r3, [r7, #12]
 800d646:	f023 0307 	bic.w	r3, r3, #7
 800d64a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d64c:	68ba      	ldr	r2, [r7, #8]
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	1ad3      	subs	r3, r2, r3
 800d652:	4a1f      	ldr	r2, [pc, #124]	; (800d6d0 <prvHeapInit+0xac>)
 800d654:	4413      	add	r3, r2
 800d656:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d65c:	4a1d      	ldr	r2, [pc, #116]	; (800d6d4 <prvHeapInit+0xb0>)
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d662:	4b1c      	ldr	r3, [pc, #112]	; (800d6d4 <prvHeapInit+0xb0>)
 800d664:	2200      	movs	r2, #0
 800d666:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	68ba      	ldr	r2, [r7, #8]
 800d66c:	4413      	add	r3, r2
 800d66e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d670:	2208      	movs	r2, #8
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	1a9b      	subs	r3, r3, r2
 800d676:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d678:	68fb      	ldr	r3, [r7, #12]
 800d67a:	f023 0307 	bic.w	r3, r3, #7
 800d67e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	4a15      	ldr	r2, [pc, #84]	; (800d6d8 <prvHeapInit+0xb4>)
 800d684:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d686:	4b14      	ldr	r3, [pc, #80]	; (800d6d8 <prvHeapInit+0xb4>)
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	2200      	movs	r2, #0
 800d68c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d68e:	4b12      	ldr	r3, [pc, #72]	; (800d6d8 <prvHeapInit+0xb4>)
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	2200      	movs	r2, #0
 800d694:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d69a:	683b      	ldr	r3, [r7, #0]
 800d69c:	68fa      	ldr	r2, [r7, #12]
 800d69e:	1ad2      	subs	r2, r2, r3
 800d6a0:	683b      	ldr	r3, [r7, #0]
 800d6a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d6a4:	4b0c      	ldr	r3, [pc, #48]	; (800d6d8 <prvHeapInit+0xb4>)
 800d6a6:	681a      	ldr	r2, [r3, #0]
 800d6a8:	683b      	ldr	r3, [r7, #0]
 800d6aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d6ac:	683b      	ldr	r3, [r7, #0]
 800d6ae:	685b      	ldr	r3, [r3, #4]
 800d6b0:	4a0a      	ldr	r2, [pc, #40]	; (800d6dc <prvHeapInit+0xb8>)
 800d6b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d6b4:	683b      	ldr	r3, [r7, #0]
 800d6b6:	685b      	ldr	r3, [r3, #4]
 800d6b8:	4a09      	ldr	r2, [pc, #36]	; (800d6e0 <prvHeapInit+0xbc>)
 800d6ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d6bc:	4b09      	ldr	r3, [pc, #36]	; (800d6e4 <prvHeapInit+0xc0>)
 800d6be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d6c2:	601a      	str	r2, [r3, #0]
}
 800d6c4:	bf00      	nop
 800d6c6:	3714      	adds	r7, #20
 800d6c8:	46bd      	mov	sp, r7
 800d6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ce:	4770      	bx	lr
 800d6d0:	20001088 	.word	0x20001088
 800d6d4:	20004c88 	.word	0x20004c88
 800d6d8:	20004c90 	.word	0x20004c90
 800d6dc:	20004c98 	.word	0x20004c98
 800d6e0:	20004c94 	.word	0x20004c94
 800d6e4:	20004ca4 	.word	0x20004ca4

0800d6e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d6e8:	b480      	push	{r7}
 800d6ea:	b085      	sub	sp, #20
 800d6ec:	af00      	add	r7, sp, #0
 800d6ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d6f0:	4b28      	ldr	r3, [pc, #160]	; (800d794 <prvInsertBlockIntoFreeList+0xac>)
 800d6f2:	60fb      	str	r3, [r7, #12]
 800d6f4:	e002      	b.n	800d6fc <prvInsertBlockIntoFreeList+0x14>
 800d6f6:	68fb      	ldr	r3, [r7, #12]
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	60fb      	str	r3, [r7, #12]
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	687a      	ldr	r2, [r7, #4]
 800d702:	429a      	cmp	r2, r3
 800d704:	d8f7      	bhi.n	800d6f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d706:	68fb      	ldr	r3, [r7, #12]
 800d708:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d70a:	68fb      	ldr	r3, [r7, #12]
 800d70c:	685b      	ldr	r3, [r3, #4]
 800d70e:	68ba      	ldr	r2, [r7, #8]
 800d710:	4413      	add	r3, r2
 800d712:	687a      	ldr	r2, [r7, #4]
 800d714:	429a      	cmp	r2, r3
 800d716:	d108      	bne.n	800d72a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d718:	68fb      	ldr	r3, [r7, #12]
 800d71a:	685a      	ldr	r2, [r3, #4]
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	685b      	ldr	r3, [r3, #4]
 800d720:	441a      	add	r2, r3
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	685b      	ldr	r3, [r3, #4]
 800d732:	68ba      	ldr	r2, [r7, #8]
 800d734:	441a      	add	r2, r3
 800d736:	68fb      	ldr	r3, [r7, #12]
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	429a      	cmp	r2, r3
 800d73c:	d118      	bne.n	800d770 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	681a      	ldr	r2, [r3, #0]
 800d742:	4b15      	ldr	r3, [pc, #84]	; (800d798 <prvInsertBlockIntoFreeList+0xb0>)
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	429a      	cmp	r2, r3
 800d748:	d00d      	beq.n	800d766 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	685a      	ldr	r2, [r3, #4]
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	685b      	ldr	r3, [r3, #4]
 800d754:	441a      	add	r2, r3
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	681a      	ldr	r2, [r3, #0]
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	601a      	str	r2, [r3, #0]
 800d764:	e008      	b.n	800d778 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d766:	4b0c      	ldr	r3, [pc, #48]	; (800d798 <prvInsertBlockIntoFreeList+0xb0>)
 800d768:	681a      	ldr	r2, [r3, #0]
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	601a      	str	r2, [r3, #0]
 800d76e:	e003      	b.n	800d778 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d770:	68fb      	ldr	r3, [r7, #12]
 800d772:	681a      	ldr	r2, [r3, #0]
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d778:	68fa      	ldr	r2, [r7, #12]
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	429a      	cmp	r2, r3
 800d77e:	d002      	beq.n	800d786 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	687a      	ldr	r2, [r7, #4]
 800d784:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d786:	bf00      	nop
 800d788:	3714      	adds	r7, #20
 800d78a:	46bd      	mov	sp, r7
 800d78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d790:	4770      	bx	lr
 800d792:	bf00      	nop
 800d794:	20004c88 	.word	0x20004c88
 800d798:	20004c90 	.word	0x20004c90

0800d79c <rx_queue_put>:
static uint32_t wr_i = 0;

extern TaskHandle_t RxTask_handle;


inline void rx_queue_put(uint8_t data){
 800d79c:	b480      	push	{r7}
 800d79e:	b083      	sub	sp, #12
 800d7a0:	af00      	add	r7, sp, #0
 800d7a2:	4603      	mov	r3, r0
 800d7a4:	71fb      	strb	r3, [r7, #7]
	rx_buffer[wr_i] = data;
 800d7a6:	4b0c      	ldr	r3, [pc, #48]	; (800d7d8 <rx_queue_put+0x3c>)
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	490c      	ldr	r1, [pc, #48]	; (800d7dc <rx_queue_put+0x40>)
 800d7ac:	79fa      	ldrb	r2, [r7, #7]
 800d7ae:	54ca      	strb	r2, [r1, r3]
	INCREMENT_CLAMP(wr_i, RX_BUFFER_SIZE);
 800d7b0:	4b09      	ldr	r3, [pc, #36]	; (800d7d8 <rx_queue_put+0x3c>)
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	3301      	adds	r3, #1
 800d7b6:	4a08      	ldr	r2, [pc, #32]	; (800d7d8 <rx_queue_put+0x3c>)
 800d7b8:	6013      	str	r3, [r2, #0]
 800d7ba:	4b07      	ldr	r3, [pc, #28]	; (800d7d8 <rx_queue_put+0x3c>)
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d7c2:	d302      	bcc.n	800d7ca <rx_queue_put+0x2e>
 800d7c4:	4b04      	ldr	r3, [pc, #16]	; (800d7d8 <rx_queue_put+0x3c>)
 800d7c6:	2200      	movs	r2, #0
 800d7c8:	601a      	str	r2, [r3, #0]
}
 800d7ca:	bf00      	nop
 800d7cc:	370c      	adds	r7, #12
 800d7ce:	46bd      	mov	sp, r7
 800d7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7d4:	4770      	bx	lr
 800d7d6:	bf00      	nop
 800d7d8:	200050ac 	.word	0x200050ac
 800d7dc:	20004ca8 	.word	0x20004ca8

0800d7e0 <count>:
	*out = rx_buffer[rd_i];
	INCREMENT_CLAMP(rd_i, RX_BUFFER_SIZE);
	return 1;
}

inline uint32_t count(){
 800d7e0:	b480      	push	{r7}
 800d7e2:	af00      	add	r7, sp, #0
	if(rd_i > wr_i) return wr_i - rd_i + RX_BUFFER_SIZE;
 800d7e4:	4b0b      	ldr	r3, [pc, #44]	; (800d814 <count+0x34>)
 800d7e6:	681a      	ldr	r2, [r3, #0]
 800d7e8:	4b0b      	ldr	r3, [pc, #44]	; (800d818 <count+0x38>)
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	429a      	cmp	r2, r3
 800d7ee:	d907      	bls.n	800d800 <count+0x20>
 800d7f0:	4b09      	ldr	r3, [pc, #36]	; (800d818 <count+0x38>)
 800d7f2:	681a      	ldr	r2, [r3, #0]
 800d7f4:	4b07      	ldr	r3, [pc, #28]	; (800d814 <count+0x34>)
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	1ad3      	subs	r3, r2, r3
 800d7fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d7fe:	e004      	b.n	800d80a <count+0x2a>
	return wr_i - rd_i;
 800d800:	4b05      	ldr	r3, [pc, #20]	; (800d818 <count+0x38>)
 800d802:	681a      	ldr	r2, [r3, #0]
 800d804:	4b03      	ldr	r3, [pc, #12]	; (800d814 <count+0x34>)
 800d806:	681b      	ldr	r3, [r3, #0]
 800d808:	1ad3      	subs	r3, r2, r3
}
 800d80a:	4618      	mov	r0, r3
 800d80c:	46bd      	mov	sp, r7
 800d80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d812:	4770      	bx	lr
 800d814:	200050a8 	.word	0x200050a8
 800d818:	200050ac 	.word	0x200050ac

0800d81c <getTaskHandle>:

inline TaskHandle_t getTaskHandle(){
 800d81c:	b480      	push	{r7}
 800d81e:	af00      	add	r7, sp, #0
	return RxTask_handle;
 800d820:	4b03      	ldr	r3, [pc, #12]	; (800d830 <getTaskHandle+0x14>)
 800d822:	681b      	ldr	r3, [r3, #0]
}
 800d824:	4618      	mov	r0, r3
 800d826:	46bd      	mov	sp, r7
 800d828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d82c:	4770      	bx	lr
 800d82e:	bf00      	nop
 800d830:	20000260 	.word	0x20000260

0800d834 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d834:	b580      	push	{r7, lr}
 800d836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800d838:	2200      	movs	r2, #0
 800d83a:	4912      	ldr	r1, [pc, #72]	; (800d884 <MX_USB_DEVICE_Init+0x50>)
 800d83c:	4812      	ldr	r0, [pc, #72]	; (800d888 <MX_USB_DEVICE_Init+0x54>)
 800d83e:	f7fb fb95 	bl	8008f6c <USBD_Init>
 800d842:	4603      	mov	r3, r0
 800d844:	2b00      	cmp	r3, #0
 800d846:	d001      	beq.n	800d84c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800d848:	f7f3 fe82 	bl	8001550 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800d84c:	490f      	ldr	r1, [pc, #60]	; (800d88c <MX_USB_DEVICE_Init+0x58>)
 800d84e:	480e      	ldr	r0, [pc, #56]	; (800d888 <MX_USB_DEVICE_Init+0x54>)
 800d850:	f7fb fbbc 	bl	8008fcc <USBD_RegisterClass>
 800d854:	4603      	mov	r3, r0
 800d856:	2b00      	cmp	r3, #0
 800d858:	d001      	beq.n	800d85e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800d85a:	f7f3 fe79 	bl	8001550 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800d85e:	490c      	ldr	r1, [pc, #48]	; (800d890 <MX_USB_DEVICE_Init+0x5c>)
 800d860:	4809      	ldr	r0, [pc, #36]	; (800d888 <MX_USB_DEVICE_Init+0x54>)
 800d862:	f7fb faad 	bl	8008dc0 <USBD_CDC_RegisterInterface>
 800d866:	4603      	mov	r3, r0
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d001      	beq.n	800d870 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800d86c:	f7f3 fe70 	bl	8001550 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d870:	4805      	ldr	r0, [pc, #20]	; (800d888 <MX_USB_DEVICE_Init+0x54>)
 800d872:	f7fb fbe1 	bl	8009038 <USBD_Start>
 800d876:	4603      	mov	r3, r0
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d001      	beq.n	800d880 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800d87c:	f7f3 fe68 	bl	8001550 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d880:	bf00      	nop
 800d882:	bd80      	pop	{r7, pc}
 800d884:	200000b0 	.word	0x200000b0
 800d888:	200050b0 	.word	0x200050b0
 800d88c:	20000018 	.word	0x20000018
 800d890:	2000009c 	.word	0x2000009c

0800d894 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d894:	b580      	push	{r7, lr}
 800d896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d898:	2200      	movs	r2, #0
 800d89a:	4905      	ldr	r1, [pc, #20]	; (800d8b0 <CDC_Init_FS+0x1c>)
 800d89c:	4805      	ldr	r0, [pc, #20]	; (800d8b4 <CDC_Init_FS+0x20>)
 800d89e:	f7fb faa9 	bl	8008df4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d8a2:	4905      	ldr	r1, [pc, #20]	; (800d8b8 <CDC_Init_FS+0x24>)
 800d8a4:	4803      	ldr	r0, [pc, #12]	; (800d8b4 <CDC_Init_FS+0x20>)
 800d8a6:	f7fb fac7 	bl	8008e38 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d8aa:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d8ac:	4618      	mov	r0, r3
 800d8ae:	bd80      	pop	{r7, pc}
 800d8b0:	20005b8c 	.word	0x20005b8c
 800d8b4:	200050b0 	.word	0x200050b0
 800d8b8:	2000538c 	.word	0x2000538c

0800d8bc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d8bc:	b480      	push	{r7}
 800d8be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d8c0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d8c2:	4618      	mov	r0, r3
 800d8c4:	46bd      	mov	sp, r7
 800d8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ca:	4770      	bx	lr

0800d8cc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d8cc:	b480      	push	{r7}
 800d8ce:	b083      	sub	sp, #12
 800d8d0:	af00      	add	r7, sp, #0
 800d8d2:	4603      	mov	r3, r0
 800d8d4:	6039      	str	r1, [r7, #0]
 800d8d6:	71fb      	strb	r3, [r7, #7]
 800d8d8:	4613      	mov	r3, r2
 800d8da:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800d8dc:	79fb      	ldrb	r3, [r7, #7]
 800d8de:	2b23      	cmp	r3, #35	; 0x23
 800d8e0:	d84a      	bhi.n	800d978 <CDC_Control_FS+0xac>
 800d8e2:	a201      	add	r2, pc, #4	; (adr r2, 800d8e8 <CDC_Control_FS+0x1c>)
 800d8e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8e8:	0800d979 	.word	0x0800d979
 800d8ec:	0800d979 	.word	0x0800d979
 800d8f0:	0800d979 	.word	0x0800d979
 800d8f4:	0800d979 	.word	0x0800d979
 800d8f8:	0800d979 	.word	0x0800d979
 800d8fc:	0800d979 	.word	0x0800d979
 800d900:	0800d979 	.word	0x0800d979
 800d904:	0800d979 	.word	0x0800d979
 800d908:	0800d979 	.word	0x0800d979
 800d90c:	0800d979 	.word	0x0800d979
 800d910:	0800d979 	.word	0x0800d979
 800d914:	0800d979 	.word	0x0800d979
 800d918:	0800d979 	.word	0x0800d979
 800d91c:	0800d979 	.word	0x0800d979
 800d920:	0800d979 	.word	0x0800d979
 800d924:	0800d979 	.word	0x0800d979
 800d928:	0800d979 	.word	0x0800d979
 800d92c:	0800d979 	.word	0x0800d979
 800d930:	0800d979 	.word	0x0800d979
 800d934:	0800d979 	.word	0x0800d979
 800d938:	0800d979 	.word	0x0800d979
 800d93c:	0800d979 	.word	0x0800d979
 800d940:	0800d979 	.word	0x0800d979
 800d944:	0800d979 	.word	0x0800d979
 800d948:	0800d979 	.word	0x0800d979
 800d94c:	0800d979 	.word	0x0800d979
 800d950:	0800d979 	.word	0x0800d979
 800d954:	0800d979 	.word	0x0800d979
 800d958:	0800d979 	.word	0x0800d979
 800d95c:	0800d979 	.word	0x0800d979
 800d960:	0800d979 	.word	0x0800d979
 800d964:	0800d979 	.word	0x0800d979
 800d968:	0800d979 	.word	0x0800d979
 800d96c:	0800d979 	.word	0x0800d979
 800d970:	0800d979 	.word	0x0800d979
 800d974:	0800d979 	.word	0x0800d979
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d978:	bf00      	nop
  }

  return (USBD_OK);
 800d97a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d97c:	4618      	mov	r0, r3
 800d97e:	370c      	adds	r7, #12
 800d980:	46bd      	mov	sp, r7
 800d982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d986:	4770      	bx	lr

0800d988 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d988:	b580      	push	{r7, lr}
 800d98a:	b082      	sub	sp, #8
 800d98c:	af00      	add	r7, sp, #0
 800d98e:	6078      	str	r0, [r7, #4]
 800d990:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d992:	6879      	ldr	r1, [r7, #4]
 800d994:	4805      	ldr	r0, [pc, #20]	; (800d9ac <CDC_Receive_FS+0x24>)
 800d996:	f7fb fa4f 	bl	8008e38 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d99a:	4804      	ldr	r0, [pc, #16]	; (800d9ac <CDC_Receive_FS+0x24>)
 800d99c:	f7fb fab0 	bl	8008f00 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800d9a0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d9a2:	4618      	mov	r0, r3
 800d9a4:	3708      	adds	r7, #8
 800d9a6:	46bd      	mov	sp, r7
 800d9a8:	bd80      	pop	{r7, pc}
 800d9aa:	bf00      	nop
 800d9ac:	200050b0 	.word	0x200050b0

0800d9b0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800d9b0:	b580      	push	{r7, lr}
 800d9b2:	b084      	sub	sp, #16
 800d9b4:	af00      	add	r7, sp, #0
 800d9b6:	6078      	str	r0, [r7, #4]
 800d9b8:	460b      	mov	r3, r1
 800d9ba:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800d9bc:	2300      	movs	r3, #0
 800d9be:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800d9c0:	4b0d      	ldr	r3, [pc, #52]	; (800d9f8 <CDC_Transmit_FS+0x48>)
 800d9c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d9c6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800d9c8:	68bb      	ldr	r3, [r7, #8]
 800d9ca:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d001      	beq.n	800d9d6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800d9d2:	2301      	movs	r3, #1
 800d9d4:	e00b      	b.n	800d9ee <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800d9d6:	887b      	ldrh	r3, [r7, #2]
 800d9d8:	461a      	mov	r2, r3
 800d9da:	6879      	ldr	r1, [r7, #4]
 800d9dc:	4806      	ldr	r0, [pc, #24]	; (800d9f8 <CDC_Transmit_FS+0x48>)
 800d9de:	f7fb fa09 	bl	8008df4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800d9e2:	4805      	ldr	r0, [pc, #20]	; (800d9f8 <CDC_Transmit_FS+0x48>)
 800d9e4:	f7fb fa46 	bl	8008e74 <USBD_CDC_TransmitPacket>
 800d9e8:	4603      	mov	r3, r0
 800d9ea:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800d9ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800d9ee:	4618      	mov	r0, r3
 800d9f0:	3710      	adds	r7, #16
 800d9f2:	46bd      	mov	sp, r7
 800d9f4:	bd80      	pop	{r7, pc}
 800d9f6:	bf00      	nop
 800d9f8:	200050b0 	.word	0x200050b0

0800d9fc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800d9fc:	b480      	push	{r7}
 800d9fe:	b087      	sub	sp, #28
 800da00:	af00      	add	r7, sp, #0
 800da02:	60f8      	str	r0, [r7, #12]
 800da04:	60b9      	str	r1, [r7, #8]
 800da06:	4613      	mov	r3, r2
 800da08:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800da0a:	2300      	movs	r3, #0
 800da0c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800da0e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800da12:	4618      	mov	r0, r3
 800da14:	371c      	adds	r7, #28
 800da16:	46bd      	mov	sp, r7
 800da18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da1c:	4770      	bx	lr
	...

0800da20 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800da20:	b480      	push	{r7}
 800da22:	b083      	sub	sp, #12
 800da24:	af00      	add	r7, sp, #0
 800da26:	4603      	mov	r3, r0
 800da28:	6039      	str	r1, [r7, #0]
 800da2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800da2c:	683b      	ldr	r3, [r7, #0]
 800da2e:	2212      	movs	r2, #18
 800da30:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800da32:	4b03      	ldr	r3, [pc, #12]	; (800da40 <USBD_FS_DeviceDescriptor+0x20>)
}
 800da34:	4618      	mov	r0, r3
 800da36:	370c      	adds	r7, #12
 800da38:	46bd      	mov	sp, r7
 800da3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da3e:	4770      	bx	lr
 800da40:	200000cc 	.word	0x200000cc

0800da44 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800da44:	b480      	push	{r7}
 800da46:	b083      	sub	sp, #12
 800da48:	af00      	add	r7, sp, #0
 800da4a:	4603      	mov	r3, r0
 800da4c:	6039      	str	r1, [r7, #0]
 800da4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800da50:	683b      	ldr	r3, [r7, #0]
 800da52:	2204      	movs	r2, #4
 800da54:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800da56:	4b03      	ldr	r3, [pc, #12]	; (800da64 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800da58:	4618      	mov	r0, r3
 800da5a:	370c      	adds	r7, #12
 800da5c:	46bd      	mov	sp, r7
 800da5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da62:	4770      	bx	lr
 800da64:	200000e0 	.word	0x200000e0

0800da68 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800da68:	b580      	push	{r7, lr}
 800da6a:	b082      	sub	sp, #8
 800da6c:	af00      	add	r7, sp, #0
 800da6e:	4603      	mov	r3, r0
 800da70:	6039      	str	r1, [r7, #0]
 800da72:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800da74:	79fb      	ldrb	r3, [r7, #7]
 800da76:	2b00      	cmp	r3, #0
 800da78:	d105      	bne.n	800da86 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800da7a:	683a      	ldr	r2, [r7, #0]
 800da7c:	4907      	ldr	r1, [pc, #28]	; (800da9c <USBD_FS_ProductStrDescriptor+0x34>)
 800da7e:	4808      	ldr	r0, [pc, #32]	; (800daa0 <USBD_FS_ProductStrDescriptor+0x38>)
 800da80:	f7fc fc86 	bl	800a390 <USBD_GetString>
 800da84:	e004      	b.n	800da90 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800da86:	683a      	ldr	r2, [r7, #0]
 800da88:	4904      	ldr	r1, [pc, #16]	; (800da9c <USBD_FS_ProductStrDescriptor+0x34>)
 800da8a:	4805      	ldr	r0, [pc, #20]	; (800daa0 <USBD_FS_ProductStrDescriptor+0x38>)
 800da8c:	f7fc fc80 	bl	800a390 <USBD_GetString>
  }
  return USBD_StrDesc;
 800da90:	4b02      	ldr	r3, [pc, #8]	; (800da9c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800da92:	4618      	mov	r0, r3
 800da94:	3708      	adds	r7, #8
 800da96:	46bd      	mov	sp, r7
 800da98:	bd80      	pop	{r7, pc}
 800da9a:	bf00      	nop
 800da9c:	2000638c 	.word	0x2000638c
 800daa0:	0800e508 	.word	0x0800e508

0800daa4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800daa4:	b580      	push	{r7, lr}
 800daa6:	b082      	sub	sp, #8
 800daa8:	af00      	add	r7, sp, #0
 800daaa:	4603      	mov	r3, r0
 800daac:	6039      	str	r1, [r7, #0]
 800daae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800dab0:	683a      	ldr	r2, [r7, #0]
 800dab2:	4904      	ldr	r1, [pc, #16]	; (800dac4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800dab4:	4804      	ldr	r0, [pc, #16]	; (800dac8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800dab6:	f7fc fc6b 	bl	800a390 <USBD_GetString>
  return USBD_StrDesc;
 800daba:	4b02      	ldr	r3, [pc, #8]	; (800dac4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800dabc:	4618      	mov	r0, r3
 800dabe:	3708      	adds	r7, #8
 800dac0:	46bd      	mov	sp, r7
 800dac2:	bd80      	pop	{r7, pc}
 800dac4:	2000638c 	.word	0x2000638c
 800dac8:	0800e520 	.word	0x0800e520

0800dacc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dacc:	b580      	push	{r7, lr}
 800dace:	b082      	sub	sp, #8
 800dad0:	af00      	add	r7, sp, #0
 800dad2:	4603      	mov	r3, r0
 800dad4:	6039      	str	r1, [r7, #0]
 800dad6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800dad8:	683b      	ldr	r3, [r7, #0]
 800dada:	221a      	movs	r2, #26
 800dadc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800dade:	f000 f843 	bl	800db68 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800dae2:	4b02      	ldr	r3, [pc, #8]	; (800daec <USBD_FS_SerialStrDescriptor+0x20>)
}
 800dae4:	4618      	mov	r0, r3
 800dae6:	3708      	adds	r7, #8
 800dae8:	46bd      	mov	sp, r7
 800daea:	bd80      	pop	{r7, pc}
 800daec:	200000e4 	.word	0x200000e4

0800daf0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800daf0:	b580      	push	{r7, lr}
 800daf2:	b082      	sub	sp, #8
 800daf4:	af00      	add	r7, sp, #0
 800daf6:	4603      	mov	r3, r0
 800daf8:	6039      	str	r1, [r7, #0]
 800dafa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800dafc:	79fb      	ldrb	r3, [r7, #7]
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d105      	bne.n	800db0e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800db02:	683a      	ldr	r2, [r7, #0]
 800db04:	4907      	ldr	r1, [pc, #28]	; (800db24 <USBD_FS_ConfigStrDescriptor+0x34>)
 800db06:	4808      	ldr	r0, [pc, #32]	; (800db28 <USBD_FS_ConfigStrDescriptor+0x38>)
 800db08:	f7fc fc42 	bl	800a390 <USBD_GetString>
 800db0c:	e004      	b.n	800db18 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800db0e:	683a      	ldr	r2, [r7, #0]
 800db10:	4904      	ldr	r1, [pc, #16]	; (800db24 <USBD_FS_ConfigStrDescriptor+0x34>)
 800db12:	4805      	ldr	r0, [pc, #20]	; (800db28 <USBD_FS_ConfigStrDescriptor+0x38>)
 800db14:	f7fc fc3c 	bl	800a390 <USBD_GetString>
  }
  return USBD_StrDesc;
 800db18:	4b02      	ldr	r3, [pc, #8]	; (800db24 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800db1a:	4618      	mov	r0, r3
 800db1c:	3708      	adds	r7, #8
 800db1e:	46bd      	mov	sp, r7
 800db20:	bd80      	pop	{r7, pc}
 800db22:	bf00      	nop
 800db24:	2000638c 	.word	0x2000638c
 800db28:	0800e534 	.word	0x0800e534

0800db2c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800db2c:	b580      	push	{r7, lr}
 800db2e:	b082      	sub	sp, #8
 800db30:	af00      	add	r7, sp, #0
 800db32:	4603      	mov	r3, r0
 800db34:	6039      	str	r1, [r7, #0]
 800db36:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800db38:	79fb      	ldrb	r3, [r7, #7]
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d105      	bne.n	800db4a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800db3e:	683a      	ldr	r2, [r7, #0]
 800db40:	4907      	ldr	r1, [pc, #28]	; (800db60 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800db42:	4808      	ldr	r0, [pc, #32]	; (800db64 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800db44:	f7fc fc24 	bl	800a390 <USBD_GetString>
 800db48:	e004      	b.n	800db54 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800db4a:	683a      	ldr	r2, [r7, #0]
 800db4c:	4904      	ldr	r1, [pc, #16]	; (800db60 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800db4e:	4805      	ldr	r0, [pc, #20]	; (800db64 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800db50:	f7fc fc1e 	bl	800a390 <USBD_GetString>
  }
  return USBD_StrDesc;
 800db54:	4b02      	ldr	r3, [pc, #8]	; (800db60 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800db56:	4618      	mov	r0, r3
 800db58:	3708      	adds	r7, #8
 800db5a:	46bd      	mov	sp, r7
 800db5c:	bd80      	pop	{r7, pc}
 800db5e:	bf00      	nop
 800db60:	2000638c 	.word	0x2000638c
 800db64:	0800e540 	.word	0x0800e540

0800db68 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800db68:	b580      	push	{r7, lr}
 800db6a:	b084      	sub	sp, #16
 800db6c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800db6e:	4b0f      	ldr	r3, [pc, #60]	; (800dbac <Get_SerialNum+0x44>)
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800db74:	4b0e      	ldr	r3, [pc, #56]	; (800dbb0 <Get_SerialNum+0x48>)
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800db7a:	4b0e      	ldr	r3, [pc, #56]	; (800dbb4 <Get_SerialNum+0x4c>)
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800db80:	68fa      	ldr	r2, [r7, #12]
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	4413      	add	r3, r2
 800db86:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800db88:	68fb      	ldr	r3, [r7, #12]
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d009      	beq.n	800dba2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800db8e:	2208      	movs	r2, #8
 800db90:	4909      	ldr	r1, [pc, #36]	; (800dbb8 <Get_SerialNum+0x50>)
 800db92:	68f8      	ldr	r0, [r7, #12]
 800db94:	f000 f814 	bl	800dbc0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800db98:	2204      	movs	r2, #4
 800db9a:	4908      	ldr	r1, [pc, #32]	; (800dbbc <Get_SerialNum+0x54>)
 800db9c:	68b8      	ldr	r0, [r7, #8]
 800db9e:	f000 f80f 	bl	800dbc0 <IntToUnicode>
  }
}
 800dba2:	bf00      	nop
 800dba4:	3710      	adds	r7, #16
 800dba6:	46bd      	mov	sp, r7
 800dba8:	bd80      	pop	{r7, pc}
 800dbaa:	bf00      	nop
 800dbac:	1fff7a10 	.word	0x1fff7a10
 800dbb0:	1fff7a14 	.word	0x1fff7a14
 800dbb4:	1fff7a18 	.word	0x1fff7a18
 800dbb8:	200000e6 	.word	0x200000e6
 800dbbc:	200000f6 	.word	0x200000f6

0800dbc0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800dbc0:	b480      	push	{r7}
 800dbc2:	b087      	sub	sp, #28
 800dbc4:	af00      	add	r7, sp, #0
 800dbc6:	60f8      	str	r0, [r7, #12]
 800dbc8:	60b9      	str	r1, [r7, #8]
 800dbca:	4613      	mov	r3, r2
 800dbcc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800dbce:	2300      	movs	r3, #0
 800dbd0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800dbd2:	2300      	movs	r3, #0
 800dbd4:	75fb      	strb	r3, [r7, #23]
 800dbd6:	e027      	b.n	800dc28 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	0f1b      	lsrs	r3, r3, #28
 800dbdc:	2b09      	cmp	r3, #9
 800dbde:	d80b      	bhi.n	800dbf8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	0f1b      	lsrs	r3, r3, #28
 800dbe4:	b2da      	uxtb	r2, r3
 800dbe6:	7dfb      	ldrb	r3, [r7, #23]
 800dbe8:	005b      	lsls	r3, r3, #1
 800dbea:	4619      	mov	r1, r3
 800dbec:	68bb      	ldr	r3, [r7, #8]
 800dbee:	440b      	add	r3, r1
 800dbf0:	3230      	adds	r2, #48	; 0x30
 800dbf2:	b2d2      	uxtb	r2, r2
 800dbf4:	701a      	strb	r2, [r3, #0]
 800dbf6:	e00a      	b.n	800dc0e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	0f1b      	lsrs	r3, r3, #28
 800dbfc:	b2da      	uxtb	r2, r3
 800dbfe:	7dfb      	ldrb	r3, [r7, #23]
 800dc00:	005b      	lsls	r3, r3, #1
 800dc02:	4619      	mov	r1, r3
 800dc04:	68bb      	ldr	r3, [r7, #8]
 800dc06:	440b      	add	r3, r1
 800dc08:	3237      	adds	r2, #55	; 0x37
 800dc0a:	b2d2      	uxtb	r2, r2
 800dc0c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800dc0e:	68fb      	ldr	r3, [r7, #12]
 800dc10:	011b      	lsls	r3, r3, #4
 800dc12:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800dc14:	7dfb      	ldrb	r3, [r7, #23]
 800dc16:	005b      	lsls	r3, r3, #1
 800dc18:	3301      	adds	r3, #1
 800dc1a:	68ba      	ldr	r2, [r7, #8]
 800dc1c:	4413      	add	r3, r2
 800dc1e:	2200      	movs	r2, #0
 800dc20:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800dc22:	7dfb      	ldrb	r3, [r7, #23]
 800dc24:	3301      	adds	r3, #1
 800dc26:	75fb      	strb	r3, [r7, #23]
 800dc28:	7dfa      	ldrb	r2, [r7, #23]
 800dc2a:	79fb      	ldrb	r3, [r7, #7]
 800dc2c:	429a      	cmp	r2, r3
 800dc2e:	d3d3      	bcc.n	800dbd8 <IntToUnicode+0x18>
  }
}
 800dc30:	bf00      	nop
 800dc32:	bf00      	nop
 800dc34:	371c      	adds	r7, #28
 800dc36:	46bd      	mov	sp, r7
 800dc38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc3c:	4770      	bx	lr
	...

0800dc40 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800dc40:	b580      	push	{r7, lr}
 800dc42:	b08a      	sub	sp, #40	; 0x28
 800dc44:	af00      	add	r7, sp, #0
 800dc46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800dc48:	f107 0314 	add.w	r3, r7, #20
 800dc4c:	2200      	movs	r2, #0
 800dc4e:	601a      	str	r2, [r3, #0]
 800dc50:	605a      	str	r2, [r3, #4]
 800dc52:	609a      	str	r2, [r3, #8]
 800dc54:	60da      	str	r2, [r3, #12]
 800dc56:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800dc60:	d147      	bne.n	800dcf2 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800dc62:	2300      	movs	r3, #0
 800dc64:	613b      	str	r3, [r7, #16]
 800dc66:	4b25      	ldr	r3, [pc, #148]	; (800dcfc <HAL_PCD_MspInit+0xbc>)
 800dc68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc6a:	4a24      	ldr	r2, [pc, #144]	; (800dcfc <HAL_PCD_MspInit+0xbc>)
 800dc6c:	f043 0301 	orr.w	r3, r3, #1
 800dc70:	6313      	str	r3, [r2, #48]	; 0x30
 800dc72:	4b22      	ldr	r3, [pc, #136]	; (800dcfc <HAL_PCD_MspInit+0xbc>)
 800dc74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc76:	f003 0301 	and.w	r3, r3, #1
 800dc7a:	613b      	str	r3, [r7, #16]
 800dc7c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800dc7e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dc82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800dc84:	2300      	movs	r3, #0
 800dc86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dc88:	2300      	movs	r3, #0
 800dc8a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800dc8c:	f107 0314 	add.w	r3, r7, #20
 800dc90:	4619      	mov	r1, r3
 800dc92:	481b      	ldr	r0, [pc, #108]	; (800dd00 <HAL_PCD_MspInit+0xc0>)
 800dc94:	f7f4 f866 	bl	8001d64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800dc98:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800dc9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dc9e:	2302      	movs	r3, #2
 800dca0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dca2:	2300      	movs	r3, #0
 800dca4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800dca6:	2303      	movs	r3, #3
 800dca8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800dcaa:	230a      	movs	r3, #10
 800dcac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800dcae:	f107 0314 	add.w	r3, r7, #20
 800dcb2:	4619      	mov	r1, r3
 800dcb4:	4812      	ldr	r0, [pc, #72]	; (800dd00 <HAL_PCD_MspInit+0xc0>)
 800dcb6:	f7f4 f855 	bl	8001d64 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800dcba:	4b10      	ldr	r3, [pc, #64]	; (800dcfc <HAL_PCD_MspInit+0xbc>)
 800dcbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dcbe:	4a0f      	ldr	r2, [pc, #60]	; (800dcfc <HAL_PCD_MspInit+0xbc>)
 800dcc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dcc4:	6353      	str	r3, [r2, #52]	; 0x34
 800dcc6:	2300      	movs	r3, #0
 800dcc8:	60fb      	str	r3, [r7, #12]
 800dcca:	4b0c      	ldr	r3, [pc, #48]	; (800dcfc <HAL_PCD_MspInit+0xbc>)
 800dccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dcce:	4a0b      	ldr	r2, [pc, #44]	; (800dcfc <HAL_PCD_MspInit+0xbc>)
 800dcd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800dcd4:	6453      	str	r3, [r2, #68]	; 0x44
 800dcd6:	4b09      	ldr	r3, [pc, #36]	; (800dcfc <HAL_PCD_MspInit+0xbc>)
 800dcd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dcda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800dcde:	60fb      	str	r3, [r7, #12]
 800dce0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800dce2:	2200      	movs	r2, #0
 800dce4:	2105      	movs	r1, #5
 800dce6:	2043      	movs	r0, #67	; 0x43
 800dce8:	f7f3 ff80 	bl	8001bec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800dcec:	2043      	movs	r0, #67	; 0x43
 800dcee:	f7f3 ff99 	bl	8001c24 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800dcf2:	bf00      	nop
 800dcf4:	3728      	adds	r7, #40	; 0x28
 800dcf6:	46bd      	mov	sp, r7
 800dcf8:	bd80      	pop	{r7, pc}
 800dcfa:	bf00      	nop
 800dcfc:	40023800 	.word	0x40023800
 800dd00:	40020000 	.word	0x40020000

0800dd04 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dd04:	b580      	push	{r7, lr}
 800dd06:	b082      	sub	sp, #8
 800dd08:	af00      	add	r7, sp, #0
 800dd0a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800dd18:	4619      	mov	r1, r3
 800dd1a:	4610      	mov	r0, r2
 800dd1c:	f7fb f9d9 	bl	80090d2 <USBD_LL_SetupStage>
}
 800dd20:	bf00      	nop
 800dd22:	3708      	adds	r7, #8
 800dd24:	46bd      	mov	sp, r7
 800dd26:	bd80      	pop	{r7, pc}

0800dd28 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dd28:	b580      	push	{r7, lr}
 800dd2a:	b082      	sub	sp, #8
 800dd2c:	af00      	add	r7, sp, #0
 800dd2e:	6078      	str	r0, [r7, #4]
 800dd30:	460b      	mov	r3, r1
 800dd32:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800dd3a:	78fa      	ldrb	r2, [r7, #3]
 800dd3c:	6879      	ldr	r1, [r7, #4]
 800dd3e:	4613      	mov	r3, r2
 800dd40:	00db      	lsls	r3, r3, #3
 800dd42:	4413      	add	r3, r2
 800dd44:	009b      	lsls	r3, r3, #2
 800dd46:	440b      	add	r3, r1
 800dd48:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800dd4c:	681a      	ldr	r2, [r3, #0]
 800dd4e:	78fb      	ldrb	r3, [r7, #3]
 800dd50:	4619      	mov	r1, r3
 800dd52:	f7fb fa13 	bl	800917c <USBD_LL_DataOutStage>
}
 800dd56:	bf00      	nop
 800dd58:	3708      	adds	r7, #8
 800dd5a:	46bd      	mov	sp, r7
 800dd5c:	bd80      	pop	{r7, pc}

0800dd5e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dd5e:	b580      	push	{r7, lr}
 800dd60:	b082      	sub	sp, #8
 800dd62:	af00      	add	r7, sp, #0
 800dd64:	6078      	str	r0, [r7, #4]
 800dd66:	460b      	mov	r3, r1
 800dd68:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800dd70:	78fa      	ldrb	r2, [r7, #3]
 800dd72:	6879      	ldr	r1, [r7, #4]
 800dd74:	4613      	mov	r3, r2
 800dd76:	00db      	lsls	r3, r3, #3
 800dd78:	4413      	add	r3, r2
 800dd7a:	009b      	lsls	r3, r3, #2
 800dd7c:	440b      	add	r3, r1
 800dd7e:	334c      	adds	r3, #76	; 0x4c
 800dd80:	681a      	ldr	r2, [r3, #0]
 800dd82:	78fb      	ldrb	r3, [r7, #3]
 800dd84:	4619      	mov	r1, r3
 800dd86:	f7fb faac 	bl	80092e2 <USBD_LL_DataInStage>
}
 800dd8a:	bf00      	nop
 800dd8c:	3708      	adds	r7, #8
 800dd8e:	46bd      	mov	sp, r7
 800dd90:	bd80      	pop	{r7, pc}

0800dd92 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dd92:	b580      	push	{r7, lr}
 800dd94:	b082      	sub	sp, #8
 800dd96:	af00      	add	r7, sp, #0
 800dd98:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800dda0:	4618      	mov	r0, r3
 800dda2:	f7fb fbe0 	bl	8009566 <USBD_LL_SOF>
}
 800dda6:	bf00      	nop
 800dda8:	3708      	adds	r7, #8
 800ddaa:	46bd      	mov	sp, r7
 800ddac:	bd80      	pop	{r7, pc}

0800ddae <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ddae:	b580      	push	{r7, lr}
 800ddb0:	b084      	sub	sp, #16
 800ddb2:	af00      	add	r7, sp, #0
 800ddb4:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ddb6:	2301      	movs	r3, #1
 800ddb8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	68db      	ldr	r3, [r3, #12]
 800ddbe:	2b02      	cmp	r3, #2
 800ddc0:	d001      	beq.n	800ddc6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800ddc2:	f7f3 fbc5 	bl	8001550 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ddcc:	7bfa      	ldrb	r2, [r7, #15]
 800ddce:	4611      	mov	r1, r2
 800ddd0:	4618      	mov	r0, r3
 800ddd2:	f7fb fb8a 	bl	80094ea <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800dddc:	4618      	mov	r0, r3
 800ddde:	f7fb fb32 	bl	8009446 <USBD_LL_Reset>
}
 800dde2:	bf00      	nop
 800dde4:	3710      	adds	r7, #16
 800dde6:	46bd      	mov	sp, r7
 800dde8:	bd80      	pop	{r7, pc}
	...

0800ddec <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ddec:	b580      	push	{r7, lr}
 800ddee:	b082      	sub	sp, #8
 800ddf0:	af00      	add	r7, sp, #0
 800ddf2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ddfa:	4618      	mov	r0, r3
 800ddfc:	f7fb fb85 	bl	800950a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	681b      	ldr	r3, [r3, #0]
 800de04:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	687a      	ldr	r2, [r7, #4]
 800de0c:	6812      	ldr	r2, [r2, #0]
 800de0e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800de12:	f043 0301 	orr.w	r3, r3, #1
 800de16:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	6a1b      	ldr	r3, [r3, #32]
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d005      	beq.n	800de2c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800de20:	4b04      	ldr	r3, [pc, #16]	; (800de34 <HAL_PCD_SuspendCallback+0x48>)
 800de22:	691b      	ldr	r3, [r3, #16]
 800de24:	4a03      	ldr	r2, [pc, #12]	; (800de34 <HAL_PCD_SuspendCallback+0x48>)
 800de26:	f043 0306 	orr.w	r3, r3, #6
 800de2a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800de2c:	bf00      	nop
 800de2e:	3708      	adds	r7, #8
 800de30:	46bd      	mov	sp, r7
 800de32:	bd80      	pop	{r7, pc}
 800de34:	e000ed00 	.word	0xe000ed00

0800de38 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800de38:	b580      	push	{r7, lr}
 800de3a:	b082      	sub	sp, #8
 800de3c:	af00      	add	r7, sp, #0
 800de3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800de46:	4618      	mov	r0, r3
 800de48:	f7fb fb75 	bl	8009536 <USBD_LL_Resume>
}
 800de4c:	bf00      	nop
 800de4e:	3708      	adds	r7, #8
 800de50:	46bd      	mov	sp, r7
 800de52:	bd80      	pop	{r7, pc}

0800de54 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800de54:	b580      	push	{r7, lr}
 800de56:	b082      	sub	sp, #8
 800de58:	af00      	add	r7, sp, #0
 800de5a:	6078      	str	r0, [r7, #4]
 800de5c:	460b      	mov	r3, r1
 800de5e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800de66:	78fa      	ldrb	r2, [r7, #3]
 800de68:	4611      	mov	r1, r2
 800de6a:	4618      	mov	r0, r3
 800de6c:	f7fb fbcd 	bl	800960a <USBD_LL_IsoOUTIncomplete>
}
 800de70:	bf00      	nop
 800de72:	3708      	adds	r7, #8
 800de74:	46bd      	mov	sp, r7
 800de76:	bd80      	pop	{r7, pc}

0800de78 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800de78:	b580      	push	{r7, lr}
 800de7a:	b082      	sub	sp, #8
 800de7c:	af00      	add	r7, sp, #0
 800de7e:	6078      	str	r0, [r7, #4]
 800de80:	460b      	mov	r3, r1
 800de82:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800de8a:	78fa      	ldrb	r2, [r7, #3]
 800de8c:	4611      	mov	r1, r2
 800de8e:	4618      	mov	r0, r3
 800de90:	f7fb fb89 	bl	80095a6 <USBD_LL_IsoINIncomplete>
}
 800de94:	bf00      	nop
 800de96:	3708      	adds	r7, #8
 800de98:	46bd      	mov	sp, r7
 800de9a:	bd80      	pop	{r7, pc}

0800de9c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800de9c:	b580      	push	{r7, lr}
 800de9e:	b082      	sub	sp, #8
 800dea0:	af00      	add	r7, sp, #0
 800dea2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800deaa:	4618      	mov	r0, r3
 800deac:	f7fb fbdf 	bl	800966e <USBD_LL_DevConnected>
}
 800deb0:	bf00      	nop
 800deb2:	3708      	adds	r7, #8
 800deb4:	46bd      	mov	sp, r7
 800deb6:	bd80      	pop	{r7, pc}

0800deb8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800deb8:	b580      	push	{r7, lr}
 800deba:	b082      	sub	sp, #8
 800debc:	af00      	add	r7, sp, #0
 800debe:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800dec6:	4618      	mov	r0, r3
 800dec8:	f7fb fbdc 	bl	8009684 <USBD_LL_DevDisconnected>
}
 800decc:	bf00      	nop
 800dece:	3708      	adds	r7, #8
 800ded0:	46bd      	mov	sp, r7
 800ded2:	bd80      	pop	{r7, pc}

0800ded4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ded4:	b580      	push	{r7, lr}
 800ded6:	b082      	sub	sp, #8
 800ded8:	af00      	add	r7, sp, #0
 800deda:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	781b      	ldrb	r3, [r3, #0]
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d13c      	bne.n	800df5e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800dee4:	4a20      	ldr	r2, [pc, #128]	; (800df68 <USBD_LL_Init+0x94>)
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	4a1e      	ldr	r2, [pc, #120]	; (800df68 <USBD_LL_Init+0x94>)
 800def0:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800def4:	4b1c      	ldr	r3, [pc, #112]	; (800df68 <USBD_LL_Init+0x94>)
 800def6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800defa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800defc:	4b1a      	ldr	r3, [pc, #104]	; (800df68 <USBD_LL_Init+0x94>)
 800defe:	2204      	movs	r2, #4
 800df00:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800df02:	4b19      	ldr	r3, [pc, #100]	; (800df68 <USBD_LL_Init+0x94>)
 800df04:	2202      	movs	r2, #2
 800df06:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800df08:	4b17      	ldr	r3, [pc, #92]	; (800df68 <USBD_LL_Init+0x94>)
 800df0a:	2200      	movs	r2, #0
 800df0c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800df0e:	4b16      	ldr	r3, [pc, #88]	; (800df68 <USBD_LL_Init+0x94>)
 800df10:	2202      	movs	r2, #2
 800df12:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800df14:	4b14      	ldr	r3, [pc, #80]	; (800df68 <USBD_LL_Init+0x94>)
 800df16:	2200      	movs	r2, #0
 800df18:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800df1a:	4b13      	ldr	r3, [pc, #76]	; (800df68 <USBD_LL_Init+0x94>)
 800df1c:	2200      	movs	r2, #0
 800df1e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800df20:	4b11      	ldr	r3, [pc, #68]	; (800df68 <USBD_LL_Init+0x94>)
 800df22:	2200      	movs	r2, #0
 800df24:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800df26:	4b10      	ldr	r3, [pc, #64]	; (800df68 <USBD_LL_Init+0x94>)
 800df28:	2200      	movs	r2, #0
 800df2a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800df2c:	4b0e      	ldr	r3, [pc, #56]	; (800df68 <USBD_LL_Init+0x94>)
 800df2e:	2200      	movs	r2, #0
 800df30:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800df32:	480d      	ldr	r0, [pc, #52]	; (800df68 <USBD_LL_Init+0x94>)
 800df34:	f7f5 f873 	bl	800301e <HAL_PCD_Init>
 800df38:	4603      	mov	r3, r0
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	d001      	beq.n	800df42 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800df3e:	f7f3 fb07 	bl	8001550 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800df42:	2180      	movs	r1, #128	; 0x80
 800df44:	4808      	ldr	r0, [pc, #32]	; (800df68 <USBD_LL_Init+0x94>)
 800df46:	f7f6 faca 	bl	80044de <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800df4a:	2240      	movs	r2, #64	; 0x40
 800df4c:	2100      	movs	r1, #0
 800df4e:	4806      	ldr	r0, [pc, #24]	; (800df68 <USBD_LL_Init+0x94>)
 800df50:	f7f6 fa7e 	bl	8004450 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800df54:	2280      	movs	r2, #128	; 0x80
 800df56:	2101      	movs	r1, #1
 800df58:	4803      	ldr	r0, [pc, #12]	; (800df68 <USBD_LL_Init+0x94>)
 800df5a:	f7f6 fa79 	bl	8004450 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800df5e:	2300      	movs	r3, #0
}
 800df60:	4618      	mov	r0, r3
 800df62:	3708      	adds	r7, #8
 800df64:	46bd      	mov	sp, r7
 800df66:	bd80      	pop	{r7, pc}
 800df68:	2000658c 	.word	0x2000658c

0800df6c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800df6c:	b580      	push	{r7, lr}
 800df6e:	b084      	sub	sp, #16
 800df70:	af00      	add	r7, sp, #0
 800df72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800df74:	2300      	movs	r3, #0
 800df76:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800df78:	2300      	movs	r3, #0
 800df7a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800df82:	4618      	mov	r0, r3
 800df84:	f7f5 f968 	bl	8003258 <HAL_PCD_Start>
 800df88:	4603      	mov	r3, r0
 800df8a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800df8c:	7bfb      	ldrb	r3, [r7, #15]
 800df8e:	4618      	mov	r0, r3
 800df90:	f000 f942 	bl	800e218 <USBD_Get_USB_Status>
 800df94:	4603      	mov	r3, r0
 800df96:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800df98:	7bbb      	ldrb	r3, [r7, #14]
}
 800df9a:	4618      	mov	r0, r3
 800df9c:	3710      	adds	r7, #16
 800df9e:	46bd      	mov	sp, r7
 800dfa0:	bd80      	pop	{r7, pc}

0800dfa2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800dfa2:	b580      	push	{r7, lr}
 800dfa4:	b084      	sub	sp, #16
 800dfa6:	af00      	add	r7, sp, #0
 800dfa8:	6078      	str	r0, [r7, #4]
 800dfaa:	4608      	mov	r0, r1
 800dfac:	4611      	mov	r1, r2
 800dfae:	461a      	mov	r2, r3
 800dfb0:	4603      	mov	r3, r0
 800dfb2:	70fb      	strb	r3, [r7, #3]
 800dfb4:	460b      	mov	r3, r1
 800dfb6:	70bb      	strb	r3, [r7, #2]
 800dfb8:	4613      	mov	r3, r2
 800dfba:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dfbc:	2300      	movs	r3, #0
 800dfbe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dfc0:	2300      	movs	r3, #0
 800dfc2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800dfca:	78bb      	ldrb	r3, [r7, #2]
 800dfcc:	883a      	ldrh	r2, [r7, #0]
 800dfce:	78f9      	ldrb	r1, [r7, #3]
 800dfd0:	f7f5 fe39 	bl	8003c46 <HAL_PCD_EP_Open>
 800dfd4:	4603      	mov	r3, r0
 800dfd6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dfd8:	7bfb      	ldrb	r3, [r7, #15]
 800dfda:	4618      	mov	r0, r3
 800dfdc:	f000 f91c 	bl	800e218 <USBD_Get_USB_Status>
 800dfe0:	4603      	mov	r3, r0
 800dfe2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dfe4:	7bbb      	ldrb	r3, [r7, #14]
}
 800dfe6:	4618      	mov	r0, r3
 800dfe8:	3710      	adds	r7, #16
 800dfea:	46bd      	mov	sp, r7
 800dfec:	bd80      	pop	{r7, pc}

0800dfee <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dfee:	b580      	push	{r7, lr}
 800dff0:	b084      	sub	sp, #16
 800dff2:	af00      	add	r7, sp, #0
 800dff4:	6078      	str	r0, [r7, #4]
 800dff6:	460b      	mov	r3, r1
 800dff8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dffa:	2300      	movs	r3, #0
 800dffc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dffe:	2300      	movs	r3, #0
 800e000:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e008:	78fa      	ldrb	r2, [r7, #3]
 800e00a:	4611      	mov	r1, r2
 800e00c:	4618      	mov	r0, r3
 800e00e:	f7f5 fe82 	bl	8003d16 <HAL_PCD_EP_Close>
 800e012:	4603      	mov	r3, r0
 800e014:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e016:	7bfb      	ldrb	r3, [r7, #15]
 800e018:	4618      	mov	r0, r3
 800e01a:	f000 f8fd 	bl	800e218 <USBD_Get_USB_Status>
 800e01e:	4603      	mov	r3, r0
 800e020:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e022:	7bbb      	ldrb	r3, [r7, #14]
}
 800e024:	4618      	mov	r0, r3
 800e026:	3710      	adds	r7, #16
 800e028:	46bd      	mov	sp, r7
 800e02a:	bd80      	pop	{r7, pc}

0800e02c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e02c:	b580      	push	{r7, lr}
 800e02e:	b084      	sub	sp, #16
 800e030:	af00      	add	r7, sp, #0
 800e032:	6078      	str	r0, [r7, #4]
 800e034:	460b      	mov	r3, r1
 800e036:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e038:	2300      	movs	r3, #0
 800e03a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e03c:	2300      	movs	r3, #0
 800e03e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e046:	78fa      	ldrb	r2, [r7, #3]
 800e048:	4611      	mov	r1, r2
 800e04a:	4618      	mov	r0, r3
 800e04c:	f7f5 ff5a 	bl	8003f04 <HAL_PCD_EP_SetStall>
 800e050:	4603      	mov	r3, r0
 800e052:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e054:	7bfb      	ldrb	r3, [r7, #15]
 800e056:	4618      	mov	r0, r3
 800e058:	f000 f8de 	bl	800e218 <USBD_Get_USB_Status>
 800e05c:	4603      	mov	r3, r0
 800e05e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e060:	7bbb      	ldrb	r3, [r7, #14]
}
 800e062:	4618      	mov	r0, r3
 800e064:	3710      	adds	r7, #16
 800e066:	46bd      	mov	sp, r7
 800e068:	bd80      	pop	{r7, pc}

0800e06a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e06a:	b580      	push	{r7, lr}
 800e06c:	b084      	sub	sp, #16
 800e06e:	af00      	add	r7, sp, #0
 800e070:	6078      	str	r0, [r7, #4]
 800e072:	460b      	mov	r3, r1
 800e074:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e076:	2300      	movs	r3, #0
 800e078:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e07a:	2300      	movs	r3, #0
 800e07c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e084:	78fa      	ldrb	r2, [r7, #3]
 800e086:	4611      	mov	r1, r2
 800e088:	4618      	mov	r0, r3
 800e08a:	f7f5 ff9f 	bl	8003fcc <HAL_PCD_EP_ClrStall>
 800e08e:	4603      	mov	r3, r0
 800e090:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e092:	7bfb      	ldrb	r3, [r7, #15]
 800e094:	4618      	mov	r0, r3
 800e096:	f000 f8bf 	bl	800e218 <USBD_Get_USB_Status>
 800e09a:	4603      	mov	r3, r0
 800e09c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e09e:	7bbb      	ldrb	r3, [r7, #14]
}
 800e0a0:	4618      	mov	r0, r3
 800e0a2:	3710      	adds	r7, #16
 800e0a4:	46bd      	mov	sp, r7
 800e0a6:	bd80      	pop	{r7, pc}

0800e0a8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e0a8:	b480      	push	{r7}
 800e0aa:	b085      	sub	sp, #20
 800e0ac:	af00      	add	r7, sp, #0
 800e0ae:	6078      	str	r0, [r7, #4]
 800e0b0:	460b      	mov	r3, r1
 800e0b2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e0ba:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e0bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	da0b      	bge.n	800e0dc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e0c4:	78fb      	ldrb	r3, [r7, #3]
 800e0c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e0ca:	68f9      	ldr	r1, [r7, #12]
 800e0cc:	4613      	mov	r3, r2
 800e0ce:	00db      	lsls	r3, r3, #3
 800e0d0:	4413      	add	r3, r2
 800e0d2:	009b      	lsls	r3, r3, #2
 800e0d4:	440b      	add	r3, r1
 800e0d6:	333e      	adds	r3, #62	; 0x3e
 800e0d8:	781b      	ldrb	r3, [r3, #0]
 800e0da:	e00b      	b.n	800e0f4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e0dc:	78fb      	ldrb	r3, [r7, #3]
 800e0de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e0e2:	68f9      	ldr	r1, [r7, #12]
 800e0e4:	4613      	mov	r3, r2
 800e0e6:	00db      	lsls	r3, r3, #3
 800e0e8:	4413      	add	r3, r2
 800e0ea:	009b      	lsls	r3, r3, #2
 800e0ec:	440b      	add	r3, r1
 800e0ee:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800e0f2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e0f4:	4618      	mov	r0, r3
 800e0f6:	3714      	adds	r7, #20
 800e0f8:	46bd      	mov	sp, r7
 800e0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0fe:	4770      	bx	lr

0800e100 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e100:	b580      	push	{r7, lr}
 800e102:	b084      	sub	sp, #16
 800e104:	af00      	add	r7, sp, #0
 800e106:	6078      	str	r0, [r7, #4]
 800e108:	460b      	mov	r3, r1
 800e10a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e10c:	2300      	movs	r3, #0
 800e10e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e110:	2300      	movs	r3, #0
 800e112:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e11a:	78fa      	ldrb	r2, [r7, #3]
 800e11c:	4611      	mov	r1, r2
 800e11e:	4618      	mov	r0, r3
 800e120:	f7f5 fd6c 	bl	8003bfc <HAL_PCD_SetAddress>
 800e124:	4603      	mov	r3, r0
 800e126:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e128:	7bfb      	ldrb	r3, [r7, #15]
 800e12a:	4618      	mov	r0, r3
 800e12c:	f000 f874 	bl	800e218 <USBD_Get_USB_Status>
 800e130:	4603      	mov	r3, r0
 800e132:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e134:	7bbb      	ldrb	r3, [r7, #14]
}
 800e136:	4618      	mov	r0, r3
 800e138:	3710      	adds	r7, #16
 800e13a:	46bd      	mov	sp, r7
 800e13c:	bd80      	pop	{r7, pc}

0800e13e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e13e:	b580      	push	{r7, lr}
 800e140:	b086      	sub	sp, #24
 800e142:	af00      	add	r7, sp, #0
 800e144:	60f8      	str	r0, [r7, #12]
 800e146:	607a      	str	r2, [r7, #4]
 800e148:	603b      	str	r3, [r7, #0]
 800e14a:	460b      	mov	r3, r1
 800e14c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e14e:	2300      	movs	r3, #0
 800e150:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e152:	2300      	movs	r3, #0
 800e154:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e15c:	7af9      	ldrb	r1, [r7, #11]
 800e15e:	683b      	ldr	r3, [r7, #0]
 800e160:	687a      	ldr	r2, [r7, #4]
 800e162:	f7f5 fe85 	bl	8003e70 <HAL_PCD_EP_Transmit>
 800e166:	4603      	mov	r3, r0
 800e168:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e16a:	7dfb      	ldrb	r3, [r7, #23]
 800e16c:	4618      	mov	r0, r3
 800e16e:	f000 f853 	bl	800e218 <USBD_Get_USB_Status>
 800e172:	4603      	mov	r3, r0
 800e174:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e176:	7dbb      	ldrb	r3, [r7, #22]
}
 800e178:	4618      	mov	r0, r3
 800e17a:	3718      	adds	r7, #24
 800e17c:	46bd      	mov	sp, r7
 800e17e:	bd80      	pop	{r7, pc}

0800e180 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e180:	b580      	push	{r7, lr}
 800e182:	b086      	sub	sp, #24
 800e184:	af00      	add	r7, sp, #0
 800e186:	60f8      	str	r0, [r7, #12]
 800e188:	607a      	str	r2, [r7, #4]
 800e18a:	603b      	str	r3, [r7, #0]
 800e18c:	460b      	mov	r3, r1
 800e18e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e190:	2300      	movs	r3, #0
 800e192:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e194:	2300      	movs	r3, #0
 800e196:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e198:	68fb      	ldr	r3, [r7, #12]
 800e19a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e19e:	7af9      	ldrb	r1, [r7, #11]
 800e1a0:	683b      	ldr	r3, [r7, #0]
 800e1a2:	687a      	ldr	r2, [r7, #4]
 800e1a4:	f7f5 fe01 	bl	8003daa <HAL_PCD_EP_Receive>
 800e1a8:	4603      	mov	r3, r0
 800e1aa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e1ac:	7dfb      	ldrb	r3, [r7, #23]
 800e1ae:	4618      	mov	r0, r3
 800e1b0:	f000 f832 	bl	800e218 <USBD_Get_USB_Status>
 800e1b4:	4603      	mov	r3, r0
 800e1b6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e1b8:	7dbb      	ldrb	r3, [r7, #22]
}
 800e1ba:	4618      	mov	r0, r3
 800e1bc:	3718      	adds	r7, #24
 800e1be:	46bd      	mov	sp, r7
 800e1c0:	bd80      	pop	{r7, pc}

0800e1c2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e1c2:	b580      	push	{r7, lr}
 800e1c4:	b082      	sub	sp, #8
 800e1c6:	af00      	add	r7, sp, #0
 800e1c8:	6078      	str	r0, [r7, #4]
 800e1ca:	460b      	mov	r3, r1
 800e1cc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e1d4:	78fa      	ldrb	r2, [r7, #3]
 800e1d6:	4611      	mov	r1, r2
 800e1d8:	4618      	mov	r0, r3
 800e1da:	f7f5 fe31 	bl	8003e40 <HAL_PCD_EP_GetRxCount>
 800e1de:	4603      	mov	r3, r0
}
 800e1e0:	4618      	mov	r0, r3
 800e1e2:	3708      	adds	r7, #8
 800e1e4:	46bd      	mov	sp, r7
 800e1e6:	bd80      	pop	{r7, pc}

0800e1e8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800e1e8:	b480      	push	{r7}
 800e1ea:	b083      	sub	sp, #12
 800e1ec:	af00      	add	r7, sp, #0
 800e1ee:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800e1f0:	4b03      	ldr	r3, [pc, #12]	; (800e200 <USBD_static_malloc+0x18>)
}
 800e1f2:	4618      	mov	r0, r3
 800e1f4:	370c      	adds	r7, #12
 800e1f6:	46bd      	mov	sp, r7
 800e1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1fc:	4770      	bx	lr
 800e1fe:	bf00      	nop
 800e200:	20006a98 	.word	0x20006a98

0800e204 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800e204:	b480      	push	{r7}
 800e206:	b083      	sub	sp, #12
 800e208:	af00      	add	r7, sp, #0
 800e20a:	6078      	str	r0, [r7, #4]

}
 800e20c:	bf00      	nop
 800e20e:	370c      	adds	r7, #12
 800e210:	46bd      	mov	sp, r7
 800e212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e216:	4770      	bx	lr

0800e218 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e218:	b480      	push	{r7}
 800e21a:	b085      	sub	sp, #20
 800e21c:	af00      	add	r7, sp, #0
 800e21e:	4603      	mov	r3, r0
 800e220:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e222:	2300      	movs	r3, #0
 800e224:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e226:	79fb      	ldrb	r3, [r7, #7]
 800e228:	2b03      	cmp	r3, #3
 800e22a:	d817      	bhi.n	800e25c <USBD_Get_USB_Status+0x44>
 800e22c:	a201      	add	r2, pc, #4	; (adr r2, 800e234 <USBD_Get_USB_Status+0x1c>)
 800e22e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e232:	bf00      	nop
 800e234:	0800e245 	.word	0x0800e245
 800e238:	0800e24b 	.word	0x0800e24b
 800e23c:	0800e251 	.word	0x0800e251
 800e240:	0800e257 	.word	0x0800e257
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800e244:	2300      	movs	r3, #0
 800e246:	73fb      	strb	r3, [r7, #15]
    break;
 800e248:	e00b      	b.n	800e262 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e24a:	2303      	movs	r3, #3
 800e24c:	73fb      	strb	r3, [r7, #15]
    break;
 800e24e:	e008      	b.n	800e262 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e250:	2301      	movs	r3, #1
 800e252:	73fb      	strb	r3, [r7, #15]
    break;
 800e254:	e005      	b.n	800e262 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e256:	2303      	movs	r3, #3
 800e258:	73fb      	strb	r3, [r7, #15]
    break;
 800e25a:	e002      	b.n	800e262 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800e25c:	2303      	movs	r3, #3
 800e25e:	73fb      	strb	r3, [r7, #15]
    break;
 800e260:	bf00      	nop
  }
  return usb_status;
 800e262:	7bfb      	ldrb	r3, [r7, #15]
}
 800e264:	4618      	mov	r0, r3
 800e266:	3714      	adds	r7, #20
 800e268:	46bd      	mov	sp, r7
 800e26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e26e:	4770      	bx	lr

0800e270 <memset>:
 800e270:	4402      	add	r2, r0
 800e272:	4603      	mov	r3, r0
 800e274:	4293      	cmp	r3, r2
 800e276:	d100      	bne.n	800e27a <memset+0xa>
 800e278:	4770      	bx	lr
 800e27a:	f803 1b01 	strb.w	r1, [r3], #1
 800e27e:	e7f9      	b.n	800e274 <memset+0x4>

0800e280 <_reclaim_reent>:
 800e280:	4b29      	ldr	r3, [pc, #164]	; (800e328 <_reclaim_reent+0xa8>)
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	4283      	cmp	r3, r0
 800e286:	b570      	push	{r4, r5, r6, lr}
 800e288:	4604      	mov	r4, r0
 800e28a:	d04b      	beq.n	800e324 <_reclaim_reent+0xa4>
 800e28c:	69c3      	ldr	r3, [r0, #28]
 800e28e:	b143      	cbz	r3, 800e2a2 <_reclaim_reent+0x22>
 800e290:	68db      	ldr	r3, [r3, #12]
 800e292:	2b00      	cmp	r3, #0
 800e294:	d144      	bne.n	800e320 <_reclaim_reent+0xa0>
 800e296:	69e3      	ldr	r3, [r4, #28]
 800e298:	6819      	ldr	r1, [r3, #0]
 800e29a:	b111      	cbz	r1, 800e2a2 <_reclaim_reent+0x22>
 800e29c:	4620      	mov	r0, r4
 800e29e:	f000 f879 	bl	800e394 <_free_r>
 800e2a2:	6961      	ldr	r1, [r4, #20]
 800e2a4:	b111      	cbz	r1, 800e2ac <_reclaim_reent+0x2c>
 800e2a6:	4620      	mov	r0, r4
 800e2a8:	f000 f874 	bl	800e394 <_free_r>
 800e2ac:	69e1      	ldr	r1, [r4, #28]
 800e2ae:	b111      	cbz	r1, 800e2b6 <_reclaim_reent+0x36>
 800e2b0:	4620      	mov	r0, r4
 800e2b2:	f000 f86f 	bl	800e394 <_free_r>
 800e2b6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800e2b8:	b111      	cbz	r1, 800e2c0 <_reclaim_reent+0x40>
 800e2ba:	4620      	mov	r0, r4
 800e2bc:	f000 f86a 	bl	800e394 <_free_r>
 800e2c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e2c2:	b111      	cbz	r1, 800e2ca <_reclaim_reent+0x4a>
 800e2c4:	4620      	mov	r0, r4
 800e2c6:	f000 f865 	bl	800e394 <_free_r>
 800e2ca:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800e2cc:	b111      	cbz	r1, 800e2d4 <_reclaim_reent+0x54>
 800e2ce:	4620      	mov	r0, r4
 800e2d0:	f000 f860 	bl	800e394 <_free_r>
 800e2d4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800e2d6:	b111      	cbz	r1, 800e2de <_reclaim_reent+0x5e>
 800e2d8:	4620      	mov	r0, r4
 800e2da:	f000 f85b 	bl	800e394 <_free_r>
 800e2de:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800e2e0:	b111      	cbz	r1, 800e2e8 <_reclaim_reent+0x68>
 800e2e2:	4620      	mov	r0, r4
 800e2e4:	f000 f856 	bl	800e394 <_free_r>
 800e2e8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800e2ea:	b111      	cbz	r1, 800e2f2 <_reclaim_reent+0x72>
 800e2ec:	4620      	mov	r0, r4
 800e2ee:	f000 f851 	bl	800e394 <_free_r>
 800e2f2:	6a23      	ldr	r3, [r4, #32]
 800e2f4:	b1b3      	cbz	r3, 800e324 <_reclaim_reent+0xa4>
 800e2f6:	4620      	mov	r0, r4
 800e2f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e2fc:	4718      	bx	r3
 800e2fe:	5949      	ldr	r1, [r1, r5]
 800e300:	b941      	cbnz	r1, 800e314 <_reclaim_reent+0x94>
 800e302:	3504      	adds	r5, #4
 800e304:	69e3      	ldr	r3, [r4, #28]
 800e306:	2d80      	cmp	r5, #128	; 0x80
 800e308:	68d9      	ldr	r1, [r3, #12]
 800e30a:	d1f8      	bne.n	800e2fe <_reclaim_reent+0x7e>
 800e30c:	4620      	mov	r0, r4
 800e30e:	f000 f841 	bl	800e394 <_free_r>
 800e312:	e7c0      	b.n	800e296 <_reclaim_reent+0x16>
 800e314:	680e      	ldr	r6, [r1, #0]
 800e316:	4620      	mov	r0, r4
 800e318:	f000 f83c 	bl	800e394 <_free_r>
 800e31c:	4631      	mov	r1, r6
 800e31e:	e7ef      	b.n	800e300 <_reclaim_reent+0x80>
 800e320:	2500      	movs	r5, #0
 800e322:	e7ef      	b.n	800e304 <_reclaim_reent+0x84>
 800e324:	bd70      	pop	{r4, r5, r6, pc}
 800e326:	bf00      	nop
 800e328:	2000014c 	.word	0x2000014c

0800e32c <__libc_init_array>:
 800e32c:	b570      	push	{r4, r5, r6, lr}
 800e32e:	4d0d      	ldr	r5, [pc, #52]	; (800e364 <__libc_init_array+0x38>)
 800e330:	4c0d      	ldr	r4, [pc, #52]	; (800e368 <__libc_init_array+0x3c>)
 800e332:	1b64      	subs	r4, r4, r5
 800e334:	10a4      	asrs	r4, r4, #2
 800e336:	2600      	movs	r6, #0
 800e338:	42a6      	cmp	r6, r4
 800e33a:	d109      	bne.n	800e350 <__libc_init_array+0x24>
 800e33c:	4d0b      	ldr	r5, [pc, #44]	; (800e36c <__libc_init_array+0x40>)
 800e33e:	4c0c      	ldr	r4, [pc, #48]	; (800e370 <__libc_init_array+0x44>)
 800e340:	f000 f880 	bl	800e444 <_init>
 800e344:	1b64      	subs	r4, r4, r5
 800e346:	10a4      	asrs	r4, r4, #2
 800e348:	2600      	movs	r6, #0
 800e34a:	42a6      	cmp	r6, r4
 800e34c:	d105      	bne.n	800e35a <__libc_init_array+0x2e>
 800e34e:	bd70      	pop	{r4, r5, r6, pc}
 800e350:	f855 3b04 	ldr.w	r3, [r5], #4
 800e354:	4798      	blx	r3
 800e356:	3601      	adds	r6, #1
 800e358:	e7ee      	b.n	800e338 <__libc_init_array+0xc>
 800e35a:	f855 3b04 	ldr.w	r3, [r5], #4
 800e35e:	4798      	blx	r3
 800e360:	3601      	adds	r6, #1
 800e362:	e7f2      	b.n	800e34a <__libc_init_array+0x1e>
 800e364:	0800e594 	.word	0x0800e594
 800e368:	0800e594 	.word	0x0800e594
 800e36c:	0800e594 	.word	0x0800e594
 800e370:	0800e598 	.word	0x0800e598

0800e374 <__retarget_lock_acquire_recursive>:
 800e374:	4770      	bx	lr

0800e376 <__retarget_lock_release_recursive>:
 800e376:	4770      	bx	lr

0800e378 <memcpy>:
 800e378:	440a      	add	r2, r1
 800e37a:	4291      	cmp	r1, r2
 800e37c:	f100 33ff 	add.w	r3, r0, #4294967295
 800e380:	d100      	bne.n	800e384 <memcpy+0xc>
 800e382:	4770      	bx	lr
 800e384:	b510      	push	{r4, lr}
 800e386:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e38a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e38e:	4291      	cmp	r1, r2
 800e390:	d1f9      	bne.n	800e386 <memcpy+0xe>
 800e392:	bd10      	pop	{r4, pc}

0800e394 <_free_r>:
 800e394:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e396:	2900      	cmp	r1, #0
 800e398:	d044      	beq.n	800e424 <_free_r+0x90>
 800e39a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e39e:	9001      	str	r0, [sp, #4]
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	f1a1 0404 	sub.w	r4, r1, #4
 800e3a6:	bfb8      	it	lt
 800e3a8:	18e4      	addlt	r4, r4, r3
 800e3aa:	f000 f83f 	bl	800e42c <__malloc_lock>
 800e3ae:	4a1e      	ldr	r2, [pc, #120]	; (800e428 <_free_r+0x94>)
 800e3b0:	9801      	ldr	r0, [sp, #4]
 800e3b2:	6813      	ldr	r3, [r2, #0]
 800e3b4:	b933      	cbnz	r3, 800e3c4 <_free_r+0x30>
 800e3b6:	6063      	str	r3, [r4, #4]
 800e3b8:	6014      	str	r4, [r2, #0]
 800e3ba:	b003      	add	sp, #12
 800e3bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e3c0:	f000 b83a 	b.w	800e438 <__malloc_unlock>
 800e3c4:	42a3      	cmp	r3, r4
 800e3c6:	d908      	bls.n	800e3da <_free_r+0x46>
 800e3c8:	6825      	ldr	r5, [r4, #0]
 800e3ca:	1961      	adds	r1, r4, r5
 800e3cc:	428b      	cmp	r3, r1
 800e3ce:	bf01      	itttt	eq
 800e3d0:	6819      	ldreq	r1, [r3, #0]
 800e3d2:	685b      	ldreq	r3, [r3, #4]
 800e3d4:	1949      	addeq	r1, r1, r5
 800e3d6:	6021      	streq	r1, [r4, #0]
 800e3d8:	e7ed      	b.n	800e3b6 <_free_r+0x22>
 800e3da:	461a      	mov	r2, r3
 800e3dc:	685b      	ldr	r3, [r3, #4]
 800e3de:	b10b      	cbz	r3, 800e3e4 <_free_r+0x50>
 800e3e0:	42a3      	cmp	r3, r4
 800e3e2:	d9fa      	bls.n	800e3da <_free_r+0x46>
 800e3e4:	6811      	ldr	r1, [r2, #0]
 800e3e6:	1855      	adds	r5, r2, r1
 800e3e8:	42a5      	cmp	r5, r4
 800e3ea:	d10b      	bne.n	800e404 <_free_r+0x70>
 800e3ec:	6824      	ldr	r4, [r4, #0]
 800e3ee:	4421      	add	r1, r4
 800e3f0:	1854      	adds	r4, r2, r1
 800e3f2:	42a3      	cmp	r3, r4
 800e3f4:	6011      	str	r1, [r2, #0]
 800e3f6:	d1e0      	bne.n	800e3ba <_free_r+0x26>
 800e3f8:	681c      	ldr	r4, [r3, #0]
 800e3fa:	685b      	ldr	r3, [r3, #4]
 800e3fc:	6053      	str	r3, [r2, #4]
 800e3fe:	440c      	add	r4, r1
 800e400:	6014      	str	r4, [r2, #0]
 800e402:	e7da      	b.n	800e3ba <_free_r+0x26>
 800e404:	d902      	bls.n	800e40c <_free_r+0x78>
 800e406:	230c      	movs	r3, #12
 800e408:	6003      	str	r3, [r0, #0]
 800e40a:	e7d6      	b.n	800e3ba <_free_r+0x26>
 800e40c:	6825      	ldr	r5, [r4, #0]
 800e40e:	1961      	adds	r1, r4, r5
 800e410:	428b      	cmp	r3, r1
 800e412:	bf04      	itt	eq
 800e414:	6819      	ldreq	r1, [r3, #0]
 800e416:	685b      	ldreq	r3, [r3, #4]
 800e418:	6063      	str	r3, [r4, #4]
 800e41a:	bf04      	itt	eq
 800e41c:	1949      	addeq	r1, r1, r5
 800e41e:	6021      	streq	r1, [r4, #0]
 800e420:	6054      	str	r4, [r2, #4]
 800e422:	e7ca      	b.n	800e3ba <_free_r+0x26>
 800e424:	b003      	add	sp, #12
 800e426:	bd30      	pop	{r4, r5, pc}
 800e428:	20006df4 	.word	0x20006df4

0800e42c <__malloc_lock>:
 800e42c:	4801      	ldr	r0, [pc, #4]	; (800e434 <__malloc_lock+0x8>)
 800e42e:	f7ff bfa1 	b.w	800e374 <__retarget_lock_acquire_recursive>
 800e432:	bf00      	nop
 800e434:	20006df0 	.word	0x20006df0

0800e438 <__malloc_unlock>:
 800e438:	4801      	ldr	r0, [pc, #4]	; (800e440 <__malloc_unlock+0x8>)
 800e43a:	f7ff bf9c 	b.w	800e376 <__retarget_lock_release_recursive>
 800e43e:	bf00      	nop
 800e440:	20006df0 	.word	0x20006df0

0800e444 <_init>:
 800e444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e446:	bf00      	nop
 800e448:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e44a:	bc08      	pop	{r3}
 800e44c:	469e      	mov	lr, r3
 800e44e:	4770      	bx	lr

0800e450 <_fini>:
 800e450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e452:	bf00      	nop
 800e454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e456:	bc08      	pop	{r3}
 800e458:	469e      	mov	lr, r3
 800e45a:	4770      	bx	lr
