
FreeRTOS downloaded.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004140  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080042e0  080042e0  000142e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004318  08004318  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08004318  08004318  00014318  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004320  08004320  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004320  08004320  00014320  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004324  08004324  00014324  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08004328  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012e14  20000014  0800433c  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20012e28  0800433c  00022e28  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e51a  00000000  00000000  00020087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002699  00000000  00000000  0002e5a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ea0  00000000  00000000  00030c40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b41  00000000  00000000  00031ae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016c58  00000000  00000000  00032621  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010583  00000000  00000000  00049279  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00094577  00000000  00000000  000597fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003c94  00000000  00000000  000edd74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000f1a08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000014 	.word	0x20000014
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080042c8 	.word	0x080042c8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000018 	.word	0x20000018
 80001dc:	080042c8 	.word	0x080042c8

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b970 	b.w	80004d8 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	460d      	mov	r5, r1
 8000218:	4604      	mov	r4, r0
 800021a:	460f      	mov	r7, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14a      	bne.n	80002b6 <__udivmoddi4+0xa6>
 8000220:	428a      	cmp	r2, r1
 8000222:	4694      	mov	ip, r2
 8000224:	d965      	bls.n	80002f2 <__udivmoddi4+0xe2>
 8000226:	fab2 f382 	clz	r3, r2
 800022a:	b143      	cbz	r3, 800023e <__udivmoddi4+0x2e>
 800022c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000230:	f1c3 0220 	rsb	r2, r3, #32
 8000234:	409f      	lsls	r7, r3
 8000236:	fa20 f202 	lsr.w	r2, r0, r2
 800023a:	4317      	orrs	r7, r2
 800023c:	409c      	lsls	r4, r3
 800023e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000242:	fa1f f58c 	uxth.w	r5, ip
 8000246:	fbb7 f1fe 	udiv	r1, r7, lr
 800024a:	0c22      	lsrs	r2, r4, #16
 800024c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000250:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000254:	fb01 f005 	mul.w	r0, r1, r5
 8000258:	4290      	cmp	r0, r2
 800025a:	d90a      	bls.n	8000272 <__udivmoddi4+0x62>
 800025c:	eb1c 0202 	adds.w	r2, ip, r2
 8000260:	f101 37ff 	add.w	r7, r1, #4294967295
 8000264:	f080 811c 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000268:	4290      	cmp	r0, r2
 800026a:	f240 8119 	bls.w	80004a0 <__udivmoddi4+0x290>
 800026e:	3902      	subs	r1, #2
 8000270:	4462      	add	r2, ip
 8000272:	1a12      	subs	r2, r2, r0
 8000274:	b2a4      	uxth	r4, r4
 8000276:	fbb2 f0fe 	udiv	r0, r2, lr
 800027a:	fb0e 2210 	mls	r2, lr, r0, r2
 800027e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000282:	fb00 f505 	mul.w	r5, r0, r5
 8000286:	42a5      	cmp	r5, r4
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x90>
 800028a:	eb1c 0404 	adds.w	r4, ip, r4
 800028e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000292:	f080 8107 	bcs.w	80004a4 <__udivmoddi4+0x294>
 8000296:	42a5      	cmp	r5, r4
 8000298:	f240 8104 	bls.w	80004a4 <__udivmoddi4+0x294>
 800029c:	4464      	add	r4, ip
 800029e:	3802      	subs	r0, #2
 80002a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a4:	1b64      	subs	r4, r4, r5
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11e      	cbz	r6, 80002b2 <__udivmoddi4+0xa2>
 80002aa:	40dc      	lsrs	r4, r3
 80002ac:	2300      	movs	r3, #0
 80002ae:	e9c6 4300 	strd	r4, r3, [r6]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d908      	bls.n	80002cc <__udivmoddi4+0xbc>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80ed 	beq.w	800049a <__udivmoddi4+0x28a>
 80002c0:	2100      	movs	r1, #0
 80002c2:	e9c6 0500 	strd	r0, r5, [r6]
 80002c6:	4608      	mov	r0, r1
 80002c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002cc:	fab3 f183 	clz	r1, r3
 80002d0:	2900      	cmp	r1, #0
 80002d2:	d149      	bne.n	8000368 <__udivmoddi4+0x158>
 80002d4:	42ab      	cmp	r3, r5
 80002d6:	d302      	bcc.n	80002de <__udivmoddi4+0xce>
 80002d8:	4282      	cmp	r2, r0
 80002da:	f200 80f8 	bhi.w	80004ce <__udivmoddi4+0x2be>
 80002de:	1a84      	subs	r4, r0, r2
 80002e0:	eb65 0203 	sbc.w	r2, r5, r3
 80002e4:	2001      	movs	r0, #1
 80002e6:	4617      	mov	r7, r2
 80002e8:	2e00      	cmp	r6, #0
 80002ea:	d0e2      	beq.n	80002b2 <__udivmoddi4+0xa2>
 80002ec:	e9c6 4700 	strd	r4, r7, [r6]
 80002f0:	e7df      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002f2:	b902      	cbnz	r2, 80002f6 <__udivmoddi4+0xe6>
 80002f4:	deff      	udf	#255	; 0xff
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x210>
 8000300:	1a8a      	subs	r2, r1, r2
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2101      	movs	r1, #1
 800030c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000310:	fb07 2015 	mls	r0, r7, r5, r2
 8000314:	0c22      	lsrs	r2, r4, #16
 8000316:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800031a:	fb0e f005 	mul.w	r0, lr, r5
 800031e:	4290      	cmp	r0, r2
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x124>
 8000322:	eb1c 0202 	adds.w	r2, ip, r2
 8000326:	f105 38ff 	add.w	r8, r5, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4290      	cmp	r0, r2
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2b8>
 8000332:	4645      	mov	r5, r8
 8000334:	1a12      	subs	r2, r2, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb2 f0f7 	udiv	r0, r2, r7
 800033c:	fb07 2210 	mls	r2, r7, r0, r2
 8000340:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x14e>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 32ff 	add.w	r2, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x14c>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2c2>
 800035c:	4610      	mov	r0, r2
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000366:	e79f      	b.n	80002a8 <__udivmoddi4+0x98>
 8000368:	f1c1 0720 	rsb	r7, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa05 f401 	lsl.w	r4, r5, r1
 800037a:	fa20 f307 	lsr.w	r3, r0, r7
 800037e:	40fd      	lsrs	r5, r7
 8000380:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fbb5 f8f9 	udiv	r8, r5, r9
 800038a:	fa1f fe8c 	uxth.w	lr, ip
 800038e:	fb09 5518 	mls	r5, r9, r8, r5
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000398:	fb08 f50e 	mul.w	r5, r8, lr
 800039c:	42a5      	cmp	r5, r4
 800039e:	fa02 f201 	lsl.w	r2, r2, r1
 80003a2:	fa00 f001 	lsl.w	r0, r0, r1
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2b4>
 80003b4:	42a5      	cmp	r5, r4
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2b4>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4464      	add	r4, ip
 80003c0:	1b64      	subs	r4, r4, r5
 80003c2:	b29d      	uxth	r5, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2ac>
 80003e2:	45a6      	cmp	lr, r4
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2ac>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	4464      	add	r4, ip
 80003ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003ee:	fba3 9502 	umull	r9, r5, r3, r2
 80003f2:	eba4 040e 	sub.w	r4, r4, lr
 80003f6:	42ac      	cmp	r4, r5
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46ae      	mov	lr, r5
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x29c>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x298>
 8000400:	b156      	cbz	r6, 8000418 <__udivmoddi4+0x208>
 8000402:	ebb0 0208 	subs.w	r2, r0, r8
 8000406:	eb64 040e 	sbc.w	r4, r4, lr
 800040a:	fa04 f707 	lsl.w	r7, r4, r7
 800040e:	40ca      	lsrs	r2, r1
 8000410:	40cc      	lsrs	r4, r1
 8000412:	4317      	orrs	r7, r2
 8000414:	e9c6 7400 	strd	r7, r4, [r6]
 8000418:	4618      	mov	r0, r3
 800041a:	2100      	movs	r1, #0
 800041c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000420:	f1c3 0120 	rsb	r1, r3, #32
 8000424:	fa02 fc03 	lsl.w	ip, r2, r3
 8000428:	fa20 f201 	lsr.w	r2, r0, r1
 800042c:	fa25 f101 	lsr.w	r1, r5, r1
 8000430:	409d      	lsls	r5, r3
 8000432:	432a      	orrs	r2, r5
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000440:	fb07 1510 	mls	r5, r7, r0, r1
 8000444:	0c11      	lsrs	r1, r2, #16
 8000446:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800044a:	fb00 f50e 	mul.w	r5, r0, lr
 800044e:	428d      	cmp	r5, r1
 8000450:	fa04 f403 	lsl.w	r4, r4, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x258>
 8000456:	eb1c 0101 	adds.w	r1, ip, r1
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000460:	428d      	cmp	r5, r1
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000464:	3802      	subs	r0, #2
 8000466:	4461      	add	r1, ip
 8000468:	1b49      	subs	r1, r1, r5
 800046a:	b292      	uxth	r2, r2
 800046c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000470:	fb07 1115 	mls	r1, r7, r5, r1
 8000474:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000478:	fb05 f10e 	mul.w	r1, r5, lr
 800047c:	4291      	cmp	r1, r2
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x282>
 8000480:	eb1c 0202 	adds.w	r2, ip, r2
 8000484:	f105 38ff 	add.w	r8, r5, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 800048a:	4291      	cmp	r1, r2
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800048e:	3d02      	subs	r5, #2
 8000490:	4462      	add	r2, ip
 8000492:	1a52      	subs	r2, r2, r1
 8000494:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0xfc>
 800049a:	4631      	mov	r1, r6
 800049c:	4630      	mov	r0, r6
 800049e:	e708      	b.n	80002b2 <__udivmoddi4+0xa2>
 80004a0:	4639      	mov	r1, r7
 80004a2:	e6e6      	b.n	8000272 <__udivmoddi4+0x62>
 80004a4:	4610      	mov	r0, r2
 80004a6:	e6fb      	b.n	80002a0 <__udivmoddi4+0x90>
 80004a8:	4548      	cmp	r0, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004b4:	3b01      	subs	r3, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b8:	4645      	mov	r5, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x282>
 80004bc:	462b      	mov	r3, r5
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1da>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x258>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c8:	3d02      	subs	r5, #2
 80004ca:	4462      	add	r2, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x124>
 80004ce:	4608      	mov	r0, r1
 80004d0:	e70a      	b.n	80002e8 <__udivmoddi4+0xd8>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x14e>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <TaskTestA>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void TaskTestA(void *pvParameters)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
	while(1)
	{
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 80004e4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80004e8:	4806      	ldr	r0, [pc, #24]	; (8000504 <TaskTestA+0x28>)
 80004ea:	f000 fdee 	bl	80010ca <HAL_GPIO_TogglePin>
		counter++;
 80004ee:	4b06      	ldr	r3, [pc, #24]	; (8000508 <TaskTestA+0x2c>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	3301      	adds	r3, #1
 80004f4:	4a04      	ldr	r2, [pc, #16]	; (8000508 <TaskTestA+0x2c>)
 80004f6:	6013      	str	r3, [r2, #0]
		vTaskDelay(1000);
 80004f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004fc:	f002 fa22 	bl	8002944 <vTaskDelay>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8000500:	e7f0      	b.n	80004e4 <TaskTestA+0x8>
 8000502:	bf00      	nop
 8000504:	40020c00 	.word	0x40020c00
 8000508:	20000030 	.word	0x20000030

0800050c <TaskTestB>:
	}
}


void TaskTestB(void *pvParameters)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
	while(1)
	{
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8000514:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000518:	4806      	ldr	r0, [pc, #24]	; (8000534 <TaskTestB+0x28>)
 800051a:	f000 fdd6 	bl	80010ca <HAL_GPIO_TogglePin>
		counter2++;
 800051e:	4b06      	ldr	r3, [pc, #24]	; (8000538 <TaskTestB+0x2c>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	3301      	adds	r3, #1
 8000524:	4a04      	ldr	r2, [pc, #16]	; (8000538 <TaskTestB+0x2c>)
 8000526:	6013      	str	r3, [r2, #0]
		vTaskDelay(3000);
 8000528:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800052c:	f002 fa0a 	bl	8002944 <vTaskDelay>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8000530:	e7f0      	b.n	8000514 <TaskTestB+0x8>
 8000532:	bf00      	nop
 8000534:	40020c00 	.word	0x40020c00
 8000538:	20000034 	.word	0x20000034

0800053c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000542:	f000 fb01 	bl	8000b48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000546:	f000 f821 	bl	800058c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800054a:	f000 f887 	bl	800065c <MX_GPIO_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
  //HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
  xTaskCreate(TaskTestA, "T1", 200, NULL, 1, NULL);
 800054e:	2300      	movs	r3, #0
 8000550:	9301      	str	r3, [sp, #4]
 8000552:	2301      	movs	r3, #1
 8000554:	9300      	str	r3, [sp, #0]
 8000556:	2300      	movs	r3, #0
 8000558:	22c8      	movs	r2, #200	; 0xc8
 800055a:	4908      	ldr	r1, [pc, #32]	; (800057c <main+0x40>)
 800055c:	4808      	ldr	r0, [pc, #32]	; (8000580 <main+0x44>)
 800055e:	f002 f887 	bl	8002670 <xTaskCreate>
  xTaskCreate(TaskTestB, "T2", 200, NULL, 1, NULL);
 8000562:	2300      	movs	r3, #0
 8000564:	9301      	str	r3, [sp, #4]
 8000566:	2301      	movs	r3, #1
 8000568:	9300      	str	r3, [sp, #0]
 800056a:	2300      	movs	r3, #0
 800056c:	22c8      	movs	r2, #200	; 0xc8
 800056e:	4905      	ldr	r1, [pc, #20]	; (8000584 <main+0x48>)
 8000570:	4805      	ldr	r0, [pc, #20]	; (8000588 <main+0x4c>)
 8000572:	f002 f87d 	bl	8002670 <xTaskCreate>
  vTaskStartScheduler();
 8000576:	f002 fa19 	bl	80029ac <vTaskStartScheduler>
  while (1)
 800057a:	e7fe      	b.n	800057a <main+0x3e>
 800057c:	080042e0 	.word	0x080042e0
 8000580:	080004dd 	.word	0x080004dd
 8000584:	080042e4 	.word	0x080042e4
 8000588:	0800050d 	.word	0x0800050d

0800058c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b094      	sub	sp, #80	; 0x50
 8000590:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000592:	f107 0320 	add.w	r3, r7, #32
 8000596:	2230      	movs	r2, #48	; 0x30
 8000598:	2100      	movs	r1, #0
 800059a:	4618      	mov	r0, r3
 800059c:	f003 fe5a 	bl	8004254 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a0:	f107 030c 	add.w	r3, r7, #12
 80005a4:	2200      	movs	r2, #0
 80005a6:	601a      	str	r2, [r3, #0]
 80005a8:	605a      	str	r2, [r3, #4]
 80005aa:	609a      	str	r2, [r3, #8]
 80005ac:	60da      	str	r2, [r3, #12]
 80005ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005b0:	2300      	movs	r3, #0
 80005b2:	60bb      	str	r3, [r7, #8]
 80005b4:	4b27      	ldr	r3, [pc, #156]	; (8000654 <SystemClock_Config+0xc8>)
 80005b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b8:	4a26      	ldr	r2, [pc, #152]	; (8000654 <SystemClock_Config+0xc8>)
 80005ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005be:	6413      	str	r3, [r2, #64]	; 0x40
 80005c0:	4b24      	ldr	r3, [pc, #144]	; (8000654 <SystemClock_Config+0xc8>)
 80005c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005c8:	60bb      	str	r3, [r7, #8]
 80005ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005cc:	2300      	movs	r3, #0
 80005ce:	607b      	str	r3, [r7, #4]
 80005d0:	4b21      	ldr	r3, [pc, #132]	; (8000658 <SystemClock_Config+0xcc>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	4a20      	ldr	r2, [pc, #128]	; (8000658 <SystemClock_Config+0xcc>)
 80005d6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005da:	6013      	str	r3, [r2, #0]
 80005dc:	4b1e      	ldr	r3, [pc, #120]	; (8000658 <SystemClock_Config+0xcc>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005e4:	607b      	str	r3, [r7, #4]
 80005e6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005e8:	2301      	movs	r3, #1
 80005ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005f0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005f2:	2302      	movs	r3, #2
 80005f4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005f6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005fc:	2304      	movs	r3, #4
 80005fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000600:	23c0      	movs	r3, #192	; 0xc0
 8000602:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000604:	2304      	movs	r3, #4
 8000606:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000608:	2308      	movs	r3, #8
 800060a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800060c:	f107 0320 	add.w	r3, r7, #32
 8000610:	4618      	mov	r0, r3
 8000612:	f000 fd75 	bl	8001100 <HAL_RCC_OscConfig>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800061c:	f000 f98e 	bl	800093c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000620:	230f      	movs	r3, #15
 8000622:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000624:	2302      	movs	r3, #2
 8000626:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000628:	2300      	movs	r3, #0
 800062a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800062c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000630:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000632:	2300      	movs	r3, #0
 8000634:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000636:	f107 030c 	add.w	r3, r7, #12
 800063a:	2103      	movs	r1, #3
 800063c:	4618      	mov	r0, r3
 800063e:	f000 ffd7 	bl	80015f0 <HAL_RCC_ClockConfig>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000648:	f000 f978 	bl	800093c <Error_Handler>
  }
}
 800064c:	bf00      	nop
 800064e:	3750      	adds	r7, #80	; 0x50
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	40023800 	.word	0x40023800
 8000658:	40007000 	.word	0x40007000

0800065c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b08c      	sub	sp, #48	; 0x30
 8000660:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000662:	f107 031c 	add.w	r3, r7, #28
 8000666:	2200      	movs	r2, #0
 8000668:	601a      	str	r2, [r3, #0]
 800066a:	605a      	str	r2, [r3, #4]
 800066c:	609a      	str	r2, [r3, #8]
 800066e:	60da      	str	r2, [r3, #12]
 8000670:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000672:	2300      	movs	r3, #0
 8000674:	61bb      	str	r3, [r7, #24]
 8000676:	4ba2      	ldr	r3, [pc, #648]	; (8000900 <MX_GPIO_Init+0x2a4>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067a:	4aa1      	ldr	r2, [pc, #644]	; (8000900 <MX_GPIO_Init+0x2a4>)
 800067c:	f043 0310 	orr.w	r3, r3, #16
 8000680:	6313      	str	r3, [r2, #48]	; 0x30
 8000682:	4b9f      	ldr	r3, [pc, #636]	; (8000900 <MX_GPIO_Init+0x2a4>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000686:	f003 0310 	and.w	r3, r3, #16
 800068a:	61bb      	str	r3, [r7, #24]
 800068c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800068e:	2300      	movs	r3, #0
 8000690:	617b      	str	r3, [r7, #20]
 8000692:	4b9b      	ldr	r3, [pc, #620]	; (8000900 <MX_GPIO_Init+0x2a4>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000696:	4a9a      	ldr	r2, [pc, #616]	; (8000900 <MX_GPIO_Init+0x2a4>)
 8000698:	f043 0304 	orr.w	r3, r3, #4
 800069c:	6313      	str	r3, [r2, #48]	; 0x30
 800069e:	4b98      	ldr	r3, [pc, #608]	; (8000900 <MX_GPIO_Init+0x2a4>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a2:	f003 0304 	and.w	r3, r3, #4
 80006a6:	617b      	str	r3, [r7, #20]
 80006a8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006aa:	2300      	movs	r3, #0
 80006ac:	613b      	str	r3, [r7, #16]
 80006ae:	4b94      	ldr	r3, [pc, #592]	; (8000900 <MX_GPIO_Init+0x2a4>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b2:	4a93      	ldr	r2, [pc, #588]	; (8000900 <MX_GPIO_Init+0x2a4>)
 80006b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006b8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ba:	4b91      	ldr	r3, [pc, #580]	; (8000900 <MX_GPIO_Init+0x2a4>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006c2:	613b      	str	r3, [r7, #16]
 80006c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006c6:	2300      	movs	r3, #0
 80006c8:	60fb      	str	r3, [r7, #12]
 80006ca:	4b8d      	ldr	r3, [pc, #564]	; (8000900 <MX_GPIO_Init+0x2a4>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ce:	4a8c      	ldr	r2, [pc, #560]	; (8000900 <MX_GPIO_Init+0x2a4>)
 80006d0:	f043 0301 	orr.w	r3, r3, #1
 80006d4:	6313      	str	r3, [r2, #48]	; 0x30
 80006d6:	4b8a      	ldr	r3, [pc, #552]	; (8000900 <MX_GPIO_Init+0x2a4>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006da:	f003 0301 	and.w	r3, r3, #1
 80006de:	60fb      	str	r3, [r7, #12]
 80006e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006e2:	2300      	movs	r3, #0
 80006e4:	60bb      	str	r3, [r7, #8]
 80006e6:	4b86      	ldr	r3, [pc, #536]	; (8000900 <MX_GPIO_Init+0x2a4>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	4a85      	ldr	r2, [pc, #532]	; (8000900 <MX_GPIO_Init+0x2a4>)
 80006ec:	f043 0302 	orr.w	r3, r3, #2
 80006f0:	6313      	str	r3, [r2, #48]	; 0x30
 80006f2:	4b83      	ldr	r3, [pc, #524]	; (8000900 <MX_GPIO_Init+0x2a4>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	f003 0302 	and.w	r3, r3, #2
 80006fa:	60bb      	str	r3, [r7, #8]
 80006fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006fe:	2300      	movs	r3, #0
 8000700:	607b      	str	r3, [r7, #4]
 8000702:	4b7f      	ldr	r3, [pc, #508]	; (8000900 <MX_GPIO_Init+0x2a4>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	4a7e      	ldr	r2, [pc, #504]	; (8000900 <MX_GPIO_Init+0x2a4>)
 8000708:	f043 0308 	orr.w	r3, r3, #8
 800070c:	6313      	str	r3, [r2, #48]	; 0x30
 800070e:	4b7c      	ldr	r3, [pc, #496]	; (8000900 <MX_GPIO_Init+0x2a4>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	f003 0308 	and.w	r3, r3, #8
 8000716:	607b      	str	r3, [r7, #4]
 8000718:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800071a:	2200      	movs	r2, #0
 800071c:	2108      	movs	r1, #8
 800071e:	4879      	ldr	r0, [pc, #484]	; (8000904 <MX_GPIO_Init+0x2a8>)
 8000720:	f000 fcba 	bl	8001098 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000724:	2201      	movs	r2, #1
 8000726:	2101      	movs	r1, #1
 8000728:	4877      	ldr	r0, [pc, #476]	; (8000908 <MX_GPIO_Init+0x2ac>)
 800072a:	f000 fcb5 	bl	8001098 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800072e:	2200      	movs	r2, #0
 8000730:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000734:	4875      	ldr	r0, [pc, #468]	; (800090c <MX_GPIO_Init+0x2b0>)
 8000736:	f000 fcaf 	bl	8001098 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 800073a:	2304      	movs	r3, #4
 800073c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800073e:	2300      	movs	r3, #0
 8000740:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000742:	2300      	movs	r3, #0
 8000744:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 8000746:	f107 031c 	add.w	r3, r7, #28
 800074a:	4619      	mov	r1, r3
 800074c:	486d      	ldr	r0, [pc, #436]	; (8000904 <MX_GPIO_Init+0x2a8>)
 800074e:	f000 fb1f 	bl	8000d90 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000752:	2308      	movs	r3, #8
 8000754:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000756:	2301      	movs	r3, #1
 8000758:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075a:	2300      	movs	r3, #0
 800075c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800075e:	2300      	movs	r3, #0
 8000760:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000762:	f107 031c 	add.w	r3, r7, #28
 8000766:	4619      	mov	r1, r3
 8000768:	4866      	ldr	r0, [pc, #408]	; (8000904 <MX_GPIO_Init+0x2a8>)
 800076a:	f000 fb11 	bl	8000d90 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 800076e:	2332      	movs	r3, #50	; 0x32
 8000770:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000772:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000776:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000778:	2300      	movs	r3, #0
 800077a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800077c:	f107 031c 	add.w	r3, r7, #28
 8000780:	4619      	mov	r1, r3
 8000782:	4860      	ldr	r0, [pc, #384]	; (8000904 <MX_GPIO_Init+0x2a8>)
 8000784:	f000 fb04 	bl	8000d90 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000788:	2301      	movs	r3, #1
 800078a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800078c:	2301      	movs	r3, #1
 800078e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000790:	2300      	movs	r3, #0
 8000792:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000794:	2300      	movs	r3, #0
 8000796:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000798:	f107 031c 	add.w	r3, r7, #28
 800079c:	4619      	mov	r1, r3
 800079e:	485a      	ldr	r0, [pc, #360]	; (8000908 <MX_GPIO_Init+0x2ac>)
 80007a0:	f000 faf6 	bl	8000d90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80007a4:	2308      	movs	r3, #8
 80007a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a8:	2302      	movs	r3, #2
 80007aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ac:	2300      	movs	r3, #0
 80007ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b0:	2300      	movs	r3, #0
 80007b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80007b4:	2305      	movs	r3, #5
 80007b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80007b8:	f107 031c 	add.w	r3, r7, #28
 80007bc:	4619      	mov	r1, r3
 80007be:	4852      	ldr	r0, [pc, #328]	; (8000908 <MX_GPIO_Init+0x2ac>)
 80007c0:	f000 fae6 	bl	8000d90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007c4:	2301      	movs	r3, #1
 80007c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80007c8:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80007cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ce:	2300      	movs	r3, #0
 80007d0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d2:	f107 031c 	add.w	r3, r7, #28
 80007d6:	4619      	mov	r1, r3
 80007d8:	484d      	ldr	r0, [pc, #308]	; (8000910 <MX_GPIO_Init+0x2b4>)
 80007da:	f000 fad9 	bl	8000d90 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80007de:	2310      	movs	r3, #16
 80007e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e2:	2302      	movs	r3, #2
 80007e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e6:	2300      	movs	r3, #0
 80007e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ea:	2300      	movs	r3, #0
 80007ec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80007ee:	2306      	movs	r3, #6
 80007f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80007f2:	f107 031c 	add.w	r3, r7, #28
 80007f6:	4619      	mov	r1, r3
 80007f8:	4845      	ldr	r0, [pc, #276]	; (8000910 <MX_GPIO_Init+0x2b4>)
 80007fa:	f000 fac9 	bl	8000d90 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80007fe:	23e0      	movs	r3, #224	; 0xe0
 8000800:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000802:	2302      	movs	r3, #2
 8000804:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000806:	2300      	movs	r3, #0
 8000808:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800080a:	2303      	movs	r3, #3
 800080c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800080e:	2305      	movs	r3, #5
 8000810:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000812:	f107 031c 	add.w	r3, r7, #28
 8000816:	4619      	mov	r1, r3
 8000818:	483d      	ldr	r0, [pc, #244]	; (8000910 <MX_GPIO_Init+0x2b4>)
 800081a:	f000 fab9 	bl	8000d90 <HAL_GPIO_Init>

  /*Configure GPIO pins : CLK_IN_Pin PB12 */
  GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 800081e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000822:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000824:	2302      	movs	r3, #2
 8000826:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000828:	2300      	movs	r3, #0
 800082a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082c:	2300      	movs	r3, #0
 800082e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000830:	2305      	movs	r3, #5
 8000832:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000834:	f107 031c 	add.w	r3, r7, #28
 8000838:	4619      	mov	r1, r3
 800083a:	4836      	ldr	r0, [pc, #216]	; (8000914 <MX_GPIO_Init+0x2b8>)
 800083c:	f000 faa8 	bl	8000d90 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000840:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000844:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000846:	2301      	movs	r3, #1
 8000848:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084a:	2300      	movs	r3, #0
 800084c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084e:	2300      	movs	r3, #0
 8000850:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000852:	f107 031c 	add.w	r3, r7, #28
 8000856:	4619      	mov	r1, r3
 8000858:	482c      	ldr	r0, [pc, #176]	; (800090c <MX_GPIO_Init+0x2b0>)
 800085a:	f000 fa99 	bl	8000d90 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800085e:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000862:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000864:	2302      	movs	r3, #2
 8000866:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000868:	2300      	movs	r3, #0
 800086a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086c:	2300      	movs	r3, #0
 800086e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000870:	2306      	movs	r3, #6
 8000872:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000874:	f107 031c 	add.w	r3, r7, #28
 8000878:	4619      	mov	r1, r3
 800087a:	4823      	ldr	r0, [pc, #140]	; (8000908 <MX_GPIO_Init+0x2ac>)
 800087c:	f000 fa88 	bl	8000d90 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000880:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000884:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000886:	2300      	movs	r3, #0
 8000888:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088a:	2300      	movs	r3, #0
 800088c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800088e:	f107 031c 	add.w	r3, r7, #28
 8000892:	4619      	mov	r1, r3
 8000894:	481e      	ldr	r0, [pc, #120]	; (8000910 <MX_GPIO_Init+0x2b4>)
 8000896:	f000 fa7b 	bl	8000d90 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800089a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800089e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a0:	2302      	movs	r3, #2
 80008a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a4:	2300      	movs	r3, #0
 80008a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008a8:	2303      	movs	r3, #3
 80008aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80008ac:	230a      	movs	r3, #10
 80008ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b0:	f107 031c 	add.w	r3, r7, #28
 80008b4:	4619      	mov	r1, r3
 80008b6:	4816      	ldr	r0, [pc, #88]	; (8000910 <MX_GPIO_Init+0x2b4>)
 80008b8:	f000 fa6a 	bl	8000d90 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80008bc:	2320      	movs	r3, #32
 80008be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008c0:	2300      	movs	r3, #0
 80008c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c4:	2300      	movs	r3, #0
 80008c6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008c8:	f107 031c 	add.w	r3, r7, #28
 80008cc:	4619      	mov	r1, r3
 80008ce:	480f      	ldr	r0, [pc, #60]	; (800090c <MX_GPIO_Init+0x2b0>)
 80008d0:	f000 fa5e 	bl	8000d90 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80008d4:	f44f 7310 	mov.w	r3, #576	; 0x240
 80008d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008da:	2312      	movs	r3, #18
 80008dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008de:	2301      	movs	r3, #1
 80008e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e2:	2300      	movs	r3, #0
 80008e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008e6:	2304      	movs	r3, #4
 80008e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ea:	f107 031c 	add.w	r3, r7, #28
 80008ee:	4619      	mov	r1, r3
 80008f0:	4808      	ldr	r0, [pc, #32]	; (8000914 <MX_GPIO_Init+0x2b8>)
 80008f2:	f000 fa4d 	bl	8000d90 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008f6:	bf00      	nop
 80008f8:	3730      	adds	r7, #48	; 0x30
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	40023800 	.word	0x40023800
 8000904:	40021000 	.word	0x40021000
 8000908:	40020800 	.word	0x40020800
 800090c:	40020c00 	.word	0x40020c00
 8000910:	40020000 	.word	0x40020000
 8000914:	40020400 	.word	0x40020400

08000918 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4a04      	ldr	r2, [pc, #16]	; (8000938 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000926:	4293      	cmp	r3, r2
 8000928:	d101      	bne.n	800092e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800092a:	f000 f92f 	bl	8000b8c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800092e:	bf00      	nop
 8000930:	3708      	adds	r7, #8
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	40000c00 	.word	0x40000c00

0800093c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000940:	b672      	cpsid	i
}
 8000942:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000944:	e7fe      	b.n	8000944 <Error_Handler+0x8>
	...

08000948 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000948:	b480      	push	{r7}
 800094a:	b083      	sub	sp, #12
 800094c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	607b      	str	r3, [r7, #4]
 8000952:	4b10      	ldr	r3, [pc, #64]	; (8000994 <HAL_MspInit+0x4c>)
 8000954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000956:	4a0f      	ldr	r2, [pc, #60]	; (8000994 <HAL_MspInit+0x4c>)
 8000958:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800095c:	6453      	str	r3, [r2, #68]	; 0x44
 800095e:	4b0d      	ldr	r3, [pc, #52]	; (8000994 <HAL_MspInit+0x4c>)
 8000960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000962:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000966:	607b      	str	r3, [r7, #4]
 8000968:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	603b      	str	r3, [r7, #0]
 800096e:	4b09      	ldr	r3, [pc, #36]	; (8000994 <HAL_MspInit+0x4c>)
 8000970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000972:	4a08      	ldr	r2, [pc, #32]	; (8000994 <HAL_MspInit+0x4c>)
 8000974:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000978:	6413      	str	r3, [r2, #64]	; 0x40
 800097a:	4b06      	ldr	r3, [pc, #24]	; (8000994 <HAL_MspInit+0x4c>)
 800097c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000982:	603b      	str	r3, [r7, #0]
 8000984:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000986:	bf00      	nop
 8000988:	370c      	adds	r7, #12
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop
 8000994:	40023800 	.word	0x40023800

08000998 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b08e      	sub	sp, #56	; 0x38
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80009a0:	2300      	movs	r3, #0
 80009a2:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80009a4:	2300      	movs	r3, #0
 80009a6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 80009a8:	2300      	movs	r3, #0
 80009aa:	60fb      	str	r3, [r7, #12]
 80009ac:	4b33      	ldr	r3, [pc, #204]	; (8000a7c <HAL_InitTick+0xe4>)
 80009ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b0:	4a32      	ldr	r2, [pc, #200]	; (8000a7c <HAL_InitTick+0xe4>)
 80009b2:	f043 0308 	orr.w	r3, r3, #8
 80009b6:	6413      	str	r3, [r2, #64]	; 0x40
 80009b8:	4b30      	ldr	r3, [pc, #192]	; (8000a7c <HAL_InitTick+0xe4>)
 80009ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009bc:	f003 0308 	and.w	r3, r3, #8
 80009c0:	60fb      	str	r3, [r7, #12]
 80009c2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009c4:	f107 0210 	add.w	r2, r7, #16
 80009c8:	f107 0314 	add.w	r3, r7, #20
 80009cc:	4611      	mov	r1, r2
 80009ce:	4618      	mov	r0, r3
 80009d0:	f001 f81a 	bl	8001a08 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80009d4:	6a3b      	ldr	r3, [r7, #32]
 80009d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80009d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d103      	bne.n	80009e6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80009de:	f000 ffff 	bl	80019e0 <HAL_RCC_GetPCLK1Freq>
 80009e2:	6378      	str	r0, [r7, #52]	; 0x34
 80009e4:	e004      	b.n	80009f0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80009e6:	f000 fffb 	bl	80019e0 <HAL_RCC_GetPCLK1Freq>
 80009ea:	4603      	mov	r3, r0
 80009ec:	005b      	lsls	r3, r3, #1
 80009ee:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009f2:	4a23      	ldr	r2, [pc, #140]	; (8000a80 <HAL_InitTick+0xe8>)
 80009f4:	fba2 2303 	umull	r2, r3, r2, r3
 80009f8:	0c9b      	lsrs	r3, r3, #18
 80009fa:	3b01      	subs	r3, #1
 80009fc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 80009fe:	4b21      	ldr	r3, [pc, #132]	; (8000a84 <HAL_InitTick+0xec>)
 8000a00:	4a21      	ldr	r2, [pc, #132]	; (8000a88 <HAL_InitTick+0xf0>)
 8000a02:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8000a04:	4b1f      	ldr	r3, [pc, #124]	; (8000a84 <HAL_InitTick+0xec>)
 8000a06:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a0a:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8000a0c:	4a1d      	ldr	r2, [pc, #116]	; (8000a84 <HAL_InitTick+0xec>)
 8000a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a10:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8000a12:	4b1c      	ldr	r3, [pc, #112]	; (8000a84 <HAL_InitTick+0xec>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a18:	4b1a      	ldr	r3, [pc, #104]	; (8000a84 <HAL_InitTick+0xec>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a1e:	4b19      	ldr	r3, [pc, #100]	; (8000a84 <HAL_InitTick+0xec>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 8000a24:	4817      	ldr	r0, [pc, #92]	; (8000a84 <HAL_InitTick+0xec>)
 8000a26:	f001 f821 	bl	8001a6c <HAL_TIM_Base_Init>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000a30:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d11b      	bne.n	8000a70 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 8000a38:	4812      	ldr	r0, [pc, #72]	; (8000a84 <HAL_InitTick+0xec>)
 8000a3a:	f001 f871 	bl	8001b20 <HAL_TIM_Base_Start_IT>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000a44:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d111      	bne.n	8000a70 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000a4c:	2032      	movs	r0, #50	; 0x32
 8000a4e:	f000 f991 	bl	8000d74 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	2b0f      	cmp	r3, #15
 8000a56:	d808      	bhi.n	8000a6a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8000a58:	2200      	movs	r2, #0
 8000a5a:	6879      	ldr	r1, [r7, #4]
 8000a5c:	2032      	movs	r0, #50	; 0x32
 8000a5e:	f000 f96d 	bl	8000d3c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a62:	4a0a      	ldr	r2, [pc, #40]	; (8000a8c <HAL_InitTick+0xf4>)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	6013      	str	r3, [r2, #0]
 8000a68:	e002      	b.n	8000a70 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000a70:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000a74:	4618      	mov	r0, r3
 8000a76:	3738      	adds	r7, #56	; 0x38
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	40023800 	.word	0x40023800
 8000a80:	431bde83 	.word	0x431bde83
 8000a84:	20000038 	.word	0x20000038
 8000a88:	40000c00 	.word	0x40000c00
 8000a8c:	20000004 	.word	0x20000004

08000a90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a94:	e7fe      	b.n	8000a94 <NMI_Handler+0x4>

08000a96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a96:	b480      	push	{r7}
 8000a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a9a:	e7fe      	b.n	8000a9a <HardFault_Handler+0x4>

08000a9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aa0:	e7fe      	b.n	8000aa0 <MemManage_Handler+0x4>

08000aa2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aa2:	b480      	push	{r7}
 8000aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aa6:	e7fe      	b.n	8000aa6 <BusFault_Handler+0x4>

08000aa8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000aac:	e7fe      	b.n	8000aac <UsageFault_Handler+0x4>

08000aae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aae:	b480      	push	{r7}
 8000ab0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ab2:	bf00      	nop
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr

08000abc <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000ac0:	4802      	ldr	r0, [pc, #8]	; (8000acc <TIM5_IRQHandler+0x10>)
 8000ac2:	f001 f88f 	bl	8001be4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000ac6:	bf00      	nop
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	20000038 	.word	0x20000038

08000ad0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ad4:	4b06      	ldr	r3, [pc, #24]	; (8000af0 <SystemInit+0x20>)
 8000ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ada:	4a05      	ldr	r2, [pc, #20]	; (8000af0 <SystemInit+0x20>)
 8000adc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ae0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ae4:	bf00      	nop
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	e000ed00 	.word	0xe000ed00

08000af4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000af4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b2c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000af8:	480d      	ldr	r0, [pc, #52]	; (8000b30 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000afa:	490e      	ldr	r1, [pc, #56]	; (8000b34 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000afc:	4a0e      	ldr	r2, [pc, #56]	; (8000b38 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000afe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b00:	e002      	b.n	8000b08 <LoopCopyDataInit>

08000b02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b06:	3304      	adds	r3, #4

08000b08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b0c:	d3f9      	bcc.n	8000b02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b0e:	4a0b      	ldr	r2, [pc, #44]	; (8000b3c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b10:	4c0b      	ldr	r4, [pc, #44]	; (8000b40 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b14:	e001      	b.n	8000b1a <LoopFillZerobss>

08000b16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b18:	3204      	adds	r2, #4

08000b1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b1c:	d3fb      	bcc.n	8000b16 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b1e:	f7ff ffd7 	bl	8000ad0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b22:	f003 fb9f 	bl	8004264 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b26:	f7ff fd09 	bl	800053c <main>
  bx  lr    
 8000b2a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b2c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b34:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000b38:	08004328 	.word	0x08004328
  ldr r2, =_sbss
 8000b3c:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000b40:	20012e28 	.word	0x20012e28

08000b44 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b44:	e7fe      	b.n	8000b44 <ADC_IRQHandler>
	...

08000b48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b4c:	4b0e      	ldr	r3, [pc, #56]	; (8000b88 <HAL_Init+0x40>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a0d      	ldr	r2, [pc, #52]	; (8000b88 <HAL_Init+0x40>)
 8000b52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b56:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b58:	4b0b      	ldr	r3, [pc, #44]	; (8000b88 <HAL_Init+0x40>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a0a      	ldr	r2, [pc, #40]	; (8000b88 <HAL_Init+0x40>)
 8000b5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b62:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b64:	4b08      	ldr	r3, [pc, #32]	; (8000b88 <HAL_Init+0x40>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a07      	ldr	r2, [pc, #28]	; (8000b88 <HAL_Init+0x40>)
 8000b6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b6e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b70:	2003      	movs	r0, #3
 8000b72:	f000 f8d8 	bl	8000d26 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b76:	2000      	movs	r0, #0
 8000b78:	f7ff ff0e 	bl	8000998 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b7c:	f7ff fee4 	bl	8000948 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b80:	2300      	movs	r3, #0
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	40023c00 	.word	0x40023c00

08000b8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b90:	4b06      	ldr	r3, [pc, #24]	; (8000bac <HAL_IncTick+0x20>)
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	461a      	mov	r2, r3
 8000b96:	4b06      	ldr	r3, [pc, #24]	; (8000bb0 <HAL_IncTick+0x24>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	4413      	add	r3, r2
 8000b9c:	4a04      	ldr	r2, [pc, #16]	; (8000bb0 <HAL_IncTick+0x24>)
 8000b9e:	6013      	str	r3, [r2, #0]
}
 8000ba0:	bf00      	nop
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	20000008 	.word	0x20000008
 8000bb0:	20000080 	.word	0x20000080

08000bb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  return uwTick;
 8000bb8:	4b03      	ldr	r3, [pc, #12]	; (8000bc8 <HAL_GetTick+0x14>)
 8000bba:	681b      	ldr	r3, [r3, #0]
}
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	20000080 	.word	0x20000080

08000bcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b085      	sub	sp, #20
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	f003 0307 	and.w	r3, r3, #7
 8000bda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bdc:	4b0c      	ldr	r3, [pc, #48]	; (8000c10 <__NVIC_SetPriorityGrouping+0x44>)
 8000bde:	68db      	ldr	r3, [r3, #12]
 8000be0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000be2:	68ba      	ldr	r2, [r7, #8]
 8000be4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000be8:	4013      	ands	r3, r2
 8000bea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bf0:	68bb      	ldr	r3, [r7, #8]
 8000bf2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bf4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bfe:	4a04      	ldr	r2, [pc, #16]	; (8000c10 <__NVIC_SetPriorityGrouping+0x44>)
 8000c00:	68bb      	ldr	r3, [r7, #8]
 8000c02:	60d3      	str	r3, [r2, #12]
}
 8000c04:	bf00      	nop
 8000c06:	3714      	adds	r7, #20
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr
 8000c10:	e000ed00 	.word	0xe000ed00

08000c14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c18:	4b04      	ldr	r3, [pc, #16]	; (8000c2c <__NVIC_GetPriorityGrouping+0x18>)
 8000c1a:	68db      	ldr	r3, [r3, #12]
 8000c1c:	0a1b      	lsrs	r3, r3, #8
 8000c1e:	f003 0307 	and.w	r3, r3, #7
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr
 8000c2c:	e000ed00 	.word	0xe000ed00

08000c30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b083      	sub	sp, #12
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	4603      	mov	r3, r0
 8000c38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	db0b      	blt.n	8000c5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c42:	79fb      	ldrb	r3, [r7, #7]
 8000c44:	f003 021f 	and.w	r2, r3, #31
 8000c48:	4907      	ldr	r1, [pc, #28]	; (8000c68 <__NVIC_EnableIRQ+0x38>)
 8000c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c4e:	095b      	lsrs	r3, r3, #5
 8000c50:	2001      	movs	r0, #1
 8000c52:	fa00 f202 	lsl.w	r2, r0, r2
 8000c56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c5a:	bf00      	nop
 8000c5c:	370c      	adds	r7, #12
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	e000e100 	.word	0xe000e100

08000c6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b083      	sub	sp, #12
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	4603      	mov	r3, r0
 8000c74:	6039      	str	r1, [r7, #0]
 8000c76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	db0a      	blt.n	8000c96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	b2da      	uxtb	r2, r3
 8000c84:	490c      	ldr	r1, [pc, #48]	; (8000cb8 <__NVIC_SetPriority+0x4c>)
 8000c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8a:	0112      	lsls	r2, r2, #4
 8000c8c:	b2d2      	uxtb	r2, r2
 8000c8e:	440b      	add	r3, r1
 8000c90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c94:	e00a      	b.n	8000cac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	b2da      	uxtb	r2, r3
 8000c9a:	4908      	ldr	r1, [pc, #32]	; (8000cbc <__NVIC_SetPriority+0x50>)
 8000c9c:	79fb      	ldrb	r3, [r7, #7]
 8000c9e:	f003 030f 	and.w	r3, r3, #15
 8000ca2:	3b04      	subs	r3, #4
 8000ca4:	0112      	lsls	r2, r2, #4
 8000ca6:	b2d2      	uxtb	r2, r2
 8000ca8:	440b      	add	r3, r1
 8000caa:	761a      	strb	r2, [r3, #24]
}
 8000cac:	bf00      	nop
 8000cae:	370c      	adds	r7, #12
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr
 8000cb8:	e000e100 	.word	0xe000e100
 8000cbc:	e000ed00 	.word	0xe000ed00

08000cc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b089      	sub	sp, #36	; 0x24
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	60f8      	str	r0, [r7, #12]
 8000cc8:	60b9      	str	r1, [r7, #8]
 8000cca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	f003 0307 	and.w	r3, r3, #7
 8000cd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cd4:	69fb      	ldr	r3, [r7, #28]
 8000cd6:	f1c3 0307 	rsb	r3, r3, #7
 8000cda:	2b04      	cmp	r3, #4
 8000cdc:	bf28      	it	cs
 8000cde:	2304      	movcs	r3, #4
 8000ce0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ce2:	69fb      	ldr	r3, [r7, #28]
 8000ce4:	3304      	adds	r3, #4
 8000ce6:	2b06      	cmp	r3, #6
 8000ce8:	d902      	bls.n	8000cf0 <NVIC_EncodePriority+0x30>
 8000cea:	69fb      	ldr	r3, [r7, #28]
 8000cec:	3b03      	subs	r3, #3
 8000cee:	e000      	b.n	8000cf2 <NVIC_EncodePriority+0x32>
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cf4:	f04f 32ff 	mov.w	r2, #4294967295
 8000cf8:	69bb      	ldr	r3, [r7, #24]
 8000cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfe:	43da      	mvns	r2, r3
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	401a      	ands	r2, r3
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d08:	f04f 31ff 	mov.w	r1, #4294967295
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d12:	43d9      	mvns	r1, r3
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d18:	4313      	orrs	r3, r2
         );
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	3724      	adds	r7, #36	; 0x24
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr

08000d26 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d26:	b580      	push	{r7, lr}
 8000d28:	b082      	sub	sp, #8
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d2e:	6878      	ldr	r0, [r7, #4]
 8000d30:	f7ff ff4c 	bl	8000bcc <__NVIC_SetPriorityGrouping>
}
 8000d34:	bf00      	nop
 8000d36:	3708      	adds	r7, #8
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}

08000d3c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b086      	sub	sp, #24
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4603      	mov	r3, r0
 8000d44:	60b9      	str	r1, [r7, #8]
 8000d46:	607a      	str	r2, [r7, #4]
 8000d48:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d4e:	f7ff ff61 	bl	8000c14 <__NVIC_GetPriorityGrouping>
 8000d52:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d54:	687a      	ldr	r2, [r7, #4]
 8000d56:	68b9      	ldr	r1, [r7, #8]
 8000d58:	6978      	ldr	r0, [r7, #20]
 8000d5a:	f7ff ffb1 	bl	8000cc0 <NVIC_EncodePriority>
 8000d5e:	4602      	mov	r2, r0
 8000d60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d64:	4611      	mov	r1, r2
 8000d66:	4618      	mov	r0, r3
 8000d68:	f7ff ff80 	bl	8000c6c <__NVIC_SetPriority>
}
 8000d6c:	bf00      	nop
 8000d6e:	3718      	adds	r7, #24
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}

08000d74 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d82:	4618      	mov	r0, r3
 8000d84:	f7ff ff54 	bl	8000c30 <__NVIC_EnableIRQ>
}
 8000d88:	bf00      	nop
 8000d8a:	3708      	adds	r7, #8
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}

08000d90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b089      	sub	sp, #36	; 0x24
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
 8000d98:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000da2:	2300      	movs	r3, #0
 8000da4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000da6:	2300      	movs	r3, #0
 8000da8:	61fb      	str	r3, [r7, #28]
 8000daa:	e159      	b.n	8001060 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000dac:	2201      	movs	r2, #1
 8000dae:	69fb      	ldr	r3, [r7, #28]
 8000db0:	fa02 f303 	lsl.w	r3, r2, r3
 8000db4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	697a      	ldr	r2, [r7, #20]
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000dc0:	693a      	ldr	r2, [r7, #16]
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	429a      	cmp	r2, r3
 8000dc6:	f040 8148 	bne.w	800105a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	f003 0303 	and.w	r3, r3, #3
 8000dd2:	2b01      	cmp	r3, #1
 8000dd4:	d005      	beq.n	8000de2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	685b      	ldr	r3, [r3, #4]
 8000dda:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dde:	2b02      	cmp	r3, #2
 8000de0:	d130      	bne.n	8000e44 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	689b      	ldr	r3, [r3, #8]
 8000de6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000de8:	69fb      	ldr	r3, [r7, #28]
 8000dea:	005b      	lsls	r3, r3, #1
 8000dec:	2203      	movs	r2, #3
 8000dee:	fa02 f303 	lsl.w	r3, r2, r3
 8000df2:	43db      	mvns	r3, r3
 8000df4:	69ba      	ldr	r2, [r7, #24]
 8000df6:	4013      	ands	r3, r2
 8000df8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	68da      	ldr	r2, [r3, #12]
 8000dfe:	69fb      	ldr	r3, [r7, #28]
 8000e00:	005b      	lsls	r3, r3, #1
 8000e02:	fa02 f303 	lsl.w	r3, r2, r3
 8000e06:	69ba      	ldr	r2, [r7, #24]
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	69ba      	ldr	r2, [r7, #24]
 8000e10:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e18:	2201      	movs	r2, #1
 8000e1a:	69fb      	ldr	r3, [r7, #28]
 8000e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e20:	43db      	mvns	r3, r3
 8000e22:	69ba      	ldr	r2, [r7, #24]
 8000e24:	4013      	ands	r3, r2
 8000e26:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	091b      	lsrs	r3, r3, #4
 8000e2e:	f003 0201 	and.w	r2, r3, #1
 8000e32:	69fb      	ldr	r3, [r7, #28]
 8000e34:	fa02 f303 	lsl.w	r3, r2, r3
 8000e38:	69ba      	ldr	r2, [r7, #24]
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	69ba      	ldr	r2, [r7, #24]
 8000e42:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	f003 0303 	and.w	r3, r3, #3
 8000e4c:	2b03      	cmp	r3, #3
 8000e4e:	d017      	beq.n	8000e80 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	68db      	ldr	r3, [r3, #12]
 8000e54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e56:	69fb      	ldr	r3, [r7, #28]
 8000e58:	005b      	lsls	r3, r3, #1
 8000e5a:	2203      	movs	r2, #3
 8000e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e60:	43db      	mvns	r3, r3
 8000e62:	69ba      	ldr	r2, [r7, #24]
 8000e64:	4013      	ands	r3, r2
 8000e66:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	689a      	ldr	r2, [r3, #8]
 8000e6c:	69fb      	ldr	r3, [r7, #28]
 8000e6e:	005b      	lsls	r3, r3, #1
 8000e70:	fa02 f303 	lsl.w	r3, r2, r3
 8000e74:	69ba      	ldr	r2, [r7, #24]
 8000e76:	4313      	orrs	r3, r2
 8000e78:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	69ba      	ldr	r2, [r7, #24]
 8000e7e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	f003 0303 	and.w	r3, r3, #3
 8000e88:	2b02      	cmp	r3, #2
 8000e8a:	d123      	bne.n	8000ed4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e8c:	69fb      	ldr	r3, [r7, #28]
 8000e8e:	08da      	lsrs	r2, r3, #3
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	3208      	adds	r2, #8
 8000e94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e98:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e9a:	69fb      	ldr	r3, [r7, #28]
 8000e9c:	f003 0307 	and.w	r3, r3, #7
 8000ea0:	009b      	lsls	r3, r3, #2
 8000ea2:	220f      	movs	r2, #15
 8000ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea8:	43db      	mvns	r3, r3
 8000eaa:	69ba      	ldr	r2, [r7, #24]
 8000eac:	4013      	ands	r3, r2
 8000eae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	691a      	ldr	r2, [r3, #16]
 8000eb4:	69fb      	ldr	r3, [r7, #28]
 8000eb6:	f003 0307 	and.w	r3, r3, #7
 8000eba:	009b      	lsls	r3, r3, #2
 8000ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec0:	69ba      	ldr	r2, [r7, #24]
 8000ec2:	4313      	orrs	r3, r2
 8000ec4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ec6:	69fb      	ldr	r3, [r7, #28]
 8000ec8:	08da      	lsrs	r2, r3, #3
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	3208      	adds	r2, #8
 8000ece:	69b9      	ldr	r1, [r7, #24]
 8000ed0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	005b      	lsls	r3, r3, #1
 8000ede:	2203      	movs	r2, #3
 8000ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee4:	43db      	mvns	r3, r3
 8000ee6:	69ba      	ldr	r2, [r7, #24]
 8000ee8:	4013      	ands	r3, r2
 8000eea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	f003 0203 	and.w	r2, r3, #3
 8000ef4:	69fb      	ldr	r3, [r7, #28]
 8000ef6:	005b      	lsls	r3, r3, #1
 8000ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8000efc:	69ba      	ldr	r2, [r7, #24]
 8000efe:	4313      	orrs	r3, r2
 8000f00:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	69ba      	ldr	r2, [r7, #24]
 8000f06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	f000 80a2 	beq.w	800105a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f16:	2300      	movs	r3, #0
 8000f18:	60fb      	str	r3, [r7, #12]
 8000f1a:	4b57      	ldr	r3, [pc, #348]	; (8001078 <HAL_GPIO_Init+0x2e8>)
 8000f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f1e:	4a56      	ldr	r2, [pc, #344]	; (8001078 <HAL_GPIO_Init+0x2e8>)
 8000f20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f24:	6453      	str	r3, [r2, #68]	; 0x44
 8000f26:	4b54      	ldr	r3, [pc, #336]	; (8001078 <HAL_GPIO_Init+0x2e8>)
 8000f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f2e:	60fb      	str	r3, [r7, #12]
 8000f30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f32:	4a52      	ldr	r2, [pc, #328]	; (800107c <HAL_GPIO_Init+0x2ec>)
 8000f34:	69fb      	ldr	r3, [r7, #28]
 8000f36:	089b      	lsrs	r3, r3, #2
 8000f38:	3302      	adds	r3, #2
 8000f3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f40:	69fb      	ldr	r3, [r7, #28]
 8000f42:	f003 0303 	and.w	r3, r3, #3
 8000f46:	009b      	lsls	r3, r3, #2
 8000f48:	220f      	movs	r2, #15
 8000f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4e:	43db      	mvns	r3, r3
 8000f50:	69ba      	ldr	r2, [r7, #24]
 8000f52:	4013      	ands	r3, r2
 8000f54:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4a49      	ldr	r2, [pc, #292]	; (8001080 <HAL_GPIO_Init+0x2f0>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d019      	beq.n	8000f92 <HAL_GPIO_Init+0x202>
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4a48      	ldr	r2, [pc, #288]	; (8001084 <HAL_GPIO_Init+0x2f4>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d013      	beq.n	8000f8e <HAL_GPIO_Init+0x1fe>
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	4a47      	ldr	r2, [pc, #284]	; (8001088 <HAL_GPIO_Init+0x2f8>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d00d      	beq.n	8000f8a <HAL_GPIO_Init+0x1fa>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4a46      	ldr	r2, [pc, #280]	; (800108c <HAL_GPIO_Init+0x2fc>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d007      	beq.n	8000f86 <HAL_GPIO_Init+0x1f6>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4a45      	ldr	r2, [pc, #276]	; (8001090 <HAL_GPIO_Init+0x300>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d101      	bne.n	8000f82 <HAL_GPIO_Init+0x1f2>
 8000f7e:	2304      	movs	r3, #4
 8000f80:	e008      	b.n	8000f94 <HAL_GPIO_Init+0x204>
 8000f82:	2307      	movs	r3, #7
 8000f84:	e006      	b.n	8000f94 <HAL_GPIO_Init+0x204>
 8000f86:	2303      	movs	r3, #3
 8000f88:	e004      	b.n	8000f94 <HAL_GPIO_Init+0x204>
 8000f8a:	2302      	movs	r3, #2
 8000f8c:	e002      	b.n	8000f94 <HAL_GPIO_Init+0x204>
 8000f8e:	2301      	movs	r3, #1
 8000f90:	e000      	b.n	8000f94 <HAL_GPIO_Init+0x204>
 8000f92:	2300      	movs	r3, #0
 8000f94:	69fa      	ldr	r2, [r7, #28]
 8000f96:	f002 0203 	and.w	r2, r2, #3
 8000f9a:	0092      	lsls	r2, r2, #2
 8000f9c:	4093      	lsls	r3, r2
 8000f9e:	69ba      	ldr	r2, [r7, #24]
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fa4:	4935      	ldr	r1, [pc, #212]	; (800107c <HAL_GPIO_Init+0x2ec>)
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	089b      	lsrs	r3, r3, #2
 8000faa:	3302      	adds	r3, #2
 8000fac:	69ba      	ldr	r2, [r7, #24]
 8000fae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fb2:	4b38      	ldr	r3, [pc, #224]	; (8001094 <HAL_GPIO_Init+0x304>)
 8000fb4:	689b      	ldr	r3, [r3, #8]
 8000fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fb8:	693b      	ldr	r3, [r7, #16]
 8000fba:	43db      	mvns	r3, r3
 8000fbc:	69ba      	ldr	r2, [r7, #24]
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d003      	beq.n	8000fd6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000fce:	69ba      	ldr	r2, [r7, #24]
 8000fd0:	693b      	ldr	r3, [r7, #16]
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000fd6:	4a2f      	ldr	r2, [pc, #188]	; (8001094 <HAL_GPIO_Init+0x304>)
 8000fd8:	69bb      	ldr	r3, [r7, #24]
 8000fda:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fdc:	4b2d      	ldr	r3, [pc, #180]	; (8001094 <HAL_GPIO_Init+0x304>)
 8000fde:	68db      	ldr	r3, [r3, #12]
 8000fe0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fe2:	693b      	ldr	r3, [r7, #16]
 8000fe4:	43db      	mvns	r3, r3
 8000fe6:	69ba      	ldr	r2, [r7, #24]
 8000fe8:	4013      	ands	r3, r2
 8000fea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d003      	beq.n	8001000 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000ff8:	69ba      	ldr	r2, [r7, #24]
 8000ffa:	693b      	ldr	r3, [r7, #16]
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001000:	4a24      	ldr	r2, [pc, #144]	; (8001094 <HAL_GPIO_Init+0x304>)
 8001002:	69bb      	ldr	r3, [r7, #24]
 8001004:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001006:	4b23      	ldr	r3, [pc, #140]	; (8001094 <HAL_GPIO_Init+0x304>)
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800100c:	693b      	ldr	r3, [r7, #16]
 800100e:	43db      	mvns	r3, r3
 8001010:	69ba      	ldr	r2, [r7, #24]
 8001012:	4013      	ands	r3, r2
 8001014:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800101e:	2b00      	cmp	r3, #0
 8001020:	d003      	beq.n	800102a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001022:	69ba      	ldr	r2, [r7, #24]
 8001024:	693b      	ldr	r3, [r7, #16]
 8001026:	4313      	orrs	r3, r2
 8001028:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800102a:	4a1a      	ldr	r2, [pc, #104]	; (8001094 <HAL_GPIO_Init+0x304>)
 800102c:	69bb      	ldr	r3, [r7, #24]
 800102e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001030:	4b18      	ldr	r3, [pc, #96]	; (8001094 <HAL_GPIO_Init+0x304>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001036:	693b      	ldr	r3, [r7, #16]
 8001038:	43db      	mvns	r3, r3
 800103a:	69ba      	ldr	r2, [r7, #24]
 800103c:	4013      	ands	r3, r2
 800103e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001048:	2b00      	cmp	r3, #0
 800104a:	d003      	beq.n	8001054 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800104c:	69ba      	ldr	r2, [r7, #24]
 800104e:	693b      	ldr	r3, [r7, #16]
 8001050:	4313      	orrs	r3, r2
 8001052:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001054:	4a0f      	ldr	r2, [pc, #60]	; (8001094 <HAL_GPIO_Init+0x304>)
 8001056:	69bb      	ldr	r3, [r7, #24]
 8001058:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	3301      	adds	r3, #1
 800105e:	61fb      	str	r3, [r7, #28]
 8001060:	69fb      	ldr	r3, [r7, #28]
 8001062:	2b0f      	cmp	r3, #15
 8001064:	f67f aea2 	bls.w	8000dac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001068:	bf00      	nop
 800106a:	bf00      	nop
 800106c:	3724      	adds	r7, #36	; 0x24
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	40023800 	.word	0x40023800
 800107c:	40013800 	.word	0x40013800
 8001080:	40020000 	.word	0x40020000
 8001084:	40020400 	.word	0x40020400
 8001088:	40020800 	.word	0x40020800
 800108c:	40020c00 	.word	0x40020c00
 8001090:	40021000 	.word	0x40021000
 8001094:	40013c00 	.word	0x40013c00

08001098 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	460b      	mov	r3, r1
 80010a2:	807b      	strh	r3, [r7, #2]
 80010a4:	4613      	mov	r3, r2
 80010a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010a8:	787b      	ldrb	r3, [r7, #1]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d003      	beq.n	80010b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010ae:	887a      	ldrh	r2, [r7, #2]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80010b4:	e003      	b.n	80010be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010b6:	887b      	ldrh	r3, [r7, #2]
 80010b8:	041a      	lsls	r2, r3, #16
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	619a      	str	r2, [r3, #24]
}
 80010be:	bf00      	nop
 80010c0:	370c      	adds	r7, #12
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr

080010ca <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80010ca:	b480      	push	{r7}
 80010cc:	b085      	sub	sp, #20
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	6078      	str	r0, [r7, #4]
 80010d2:	460b      	mov	r3, r1
 80010d4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	695b      	ldr	r3, [r3, #20]
 80010da:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80010dc:	887a      	ldrh	r2, [r7, #2]
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	4013      	ands	r3, r2
 80010e2:	041a      	lsls	r2, r3, #16
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	43d9      	mvns	r1, r3
 80010e8:	887b      	ldrh	r3, [r7, #2]
 80010ea:	400b      	ands	r3, r1
 80010ec:	431a      	orrs	r2, r3
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	619a      	str	r2, [r3, #24]
}
 80010f2:	bf00      	nop
 80010f4:	3714      	adds	r7, #20
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
	...

08001100 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b086      	sub	sp, #24
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d101      	bne.n	8001112 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800110e:	2301      	movs	r3, #1
 8001110:	e267      	b.n	80015e2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f003 0301 	and.w	r3, r3, #1
 800111a:	2b00      	cmp	r3, #0
 800111c:	d075      	beq.n	800120a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800111e:	4b88      	ldr	r3, [pc, #544]	; (8001340 <HAL_RCC_OscConfig+0x240>)
 8001120:	689b      	ldr	r3, [r3, #8]
 8001122:	f003 030c 	and.w	r3, r3, #12
 8001126:	2b04      	cmp	r3, #4
 8001128:	d00c      	beq.n	8001144 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800112a:	4b85      	ldr	r3, [pc, #532]	; (8001340 <HAL_RCC_OscConfig+0x240>)
 800112c:	689b      	ldr	r3, [r3, #8]
 800112e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001132:	2b08      	cmp	r3, #8
 8001134:	d112      	bne.n	800115c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001136:	4b82      	ldr	r3, [pc, #520]	; (8001340 <HAL_RCC_OscConfig+0x240>)
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800113e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001142:	d10b      	bne.n	800115c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001144:	4b7e      	ldr	r3, [pc, #504]	; (8001340 <HAL_RCC_OscConfig+0x240>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800114c:	2b00      	cmp	r3, #0
 800114e:	d05b      	beq.n	8001208 <HAL_RCC_OscConfig+0x108>
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d157      	bne.n	8001208 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001158:	2301      	movs	r3, #1
 800115a:	e242      	b.n	80015e2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001164:	d106      	bne.n	8001174 <HAL_RCC_OscConfig+0x74>
 8001166:	4b76      	ldr	r3, [pc, #472]	; (8001340 <HAL_RCC_OscConfig+0x240>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4a75      	ldr	r2, [pc, #468]	; (8001340 <HAL_RCC_OscConfig+0x240>)
 800116c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001170:	6013      	str	r3, [r2, #0]
 8001172:	e01d      	b.n	80011b0 <HAL_RCC_OscConfig+0xb0>
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800117c:	d10c      	bne.n	8001198 <HAL_RCC_OscConfig+0x98>
 800117e:	4b70      	ldr	r3, [pc, #448]	; (8001340 <HAL_RCC_OscConfig+0x240>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4a6f      	ldr	r2, [pc, #444]	; (8001340 <HAL_RCC_OscConfig+0x240>)
 8001184:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001188:	6013      	str	r3, [r2, #0]
 800118a:	4b6d      	ldr	r3, [pc, #436]	; (8001340 <HAL_RCC_OscConfig+0x240>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a6c      	ldr	r2, [pc, #432]	; (8001340 <HAL_RCC_OscConfig+0x240>)
 8001190:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001194:	6013      	str	r3, [r2, #0]
 8001196:	e00b      	b.n	80011b0 <HAL_RCC_OscConfig+0xb0>
 8001198:	4b69      	ldr	r3, [pc, #420]	; (8001340 <HAL_RCC_OscConfig+0x240>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a68      	ldr	r2, [pc, #416]	; (8001340 <HAL_RCC_OscConfig+0x240>)
 800119e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011a2:	6013      	str	r3, [r2, #0]
 80011a4:	4b66      	ldr	r3, [pc, #408]	; (8001340 <HAL_RCC_OscConfig+0x240>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a65      	ldr	r2, [pc, #404]	; (8001340 <HAL_RCC_OscConfig+0x240>)
 80011aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d013      	beq.n	80011e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011b8:	f7ff fcfc 	bl	8000bb4 <HAL_GetTick>
 80011bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011be:	e008      	b.n	80011d2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011c0:	f7ff fcf8 	bl	8000bb4 <HAL_GetTick>
 80011c4:	4602      	mov	r2, r0
 80011c6:	693b      	ldr	r3, [r7, #16]
 80011c8:	1ad3      	subs	r3, r2, r3
 80011ca:	2b64      	cmp	r3, #100	; 0x64
 80011cc:	d901      	bls.n	80011d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80011ce:	2303      	movs	r3, #3
 80011d0:	e207      	b.n	80015e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011d2:	4b5b      	ldr	r3, [pc, #364]	; (8001340 <HAL_RCC_OscConfig+0x240>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d0f0      	beq.n	80011c0 <HAL_RCC_OscConfig+0xc0>
 80011de:	e014      	b.n	800120a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011e0:	f7ff fce8 	bl	8000bb4 <HAL_GetTick>
 80011e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011e6:	e008      	b.n	80011fa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011e8:	f7ff fce4 	bl	8000bb4 <HAL_GetTick>
 80011ec:	4602      	mov	r2, r0
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	1ad3      	subs	r3, r2, r3
 80011f2:	2b64      	cmp	r3, #100	; 0x64
 80011f4:	d901      	bls.n	80011fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80011f6:	2303      	movs	r3, #3
 80011f8:	e1f3      	b.n	80015e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011fa:	4b51      	ldr	r3, [pc, #324]	; (8001340 <HAL_RCC_OscConfig+0x240>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001202:	2b00      	cmp	r3, #0
 8001204:	d1f0      	bne.n	80011e8 <HAL_RCC_OscConfig+0xe8>
 8001206:	e000      	b.n	800120a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001208:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f003 0302 	and.w	r3, r3, #2
 8001212:	2b00      	cmp	r3, #0
 8001214:	d063      	beq.n	80012de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001216:	4b4a      	ldr	r3, [pc, #296]	; (8001340 <HAL_RCC_OscConfig+0x240>)
 8001218:	689b      	ldr	r3, [r3, #8]
 800121a:	f003 030c 	and.w	r3, r3, #12
 800121e:	2b00      	cmp	r3, #0
 8001220:	d00b      	beq.n	800123a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001222:	4b47      	ldr	r3, [pc, #284]	; (8001340 <HAL_RCC_OscConfig+0x240>)
 8001224:	689b      	ldr	r3, [r3, #8]
 8001226:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800122a:	2b08      	cmp	r3, #8
 800122c:	d11c      	bne.n	8001268 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800122e:	4b44      	ldr	r3, [pc, #272]	; (8001340 <HAL_RCC_OscConfig+0x240>)
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001236:	2b00      	cmp	r3, #0
 8001238:	d116      	bne.n	8001268 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800123a:	4b41      	ldr	r3, [pc, #260]	; (8001340 <HAL_RCC_OscConfig+0x240>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f003 0302 	and.w	r3, r3, #2
 8001242:	2b00      	cmp	r3, #0
 8001244:	d005      	beq.n	8001252 <HAL_RCC_OscConfig+0x152>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	68db      	ldr	r3, [r3, #12]
 800124a:	2b01      	cmp	r3, #1
 800124c:	d001      	beq.n	8001252 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800124e:	2301      	movs	r3, #1
 8001250:	e1c7      	b.n	80015e2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001252:	4b3b      	ldr	r3, [pc, #236]	; (8001340 <HAL_RCC_OscConfig+0x240>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	691b      	ldr	r3, [r3, #16]
 800125e:	00db      	lsls	r3, r3, #3
 8001260:	4937      	ldr	r1, [pc, #220]	; (8001340 <HAL_RCC_OscConfig+0x240>)
 8001262:	4313      	orrs	r3, r2
 8001264:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001266:	e03a      	b.n	80012de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d020      	beq.n	80012b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001270:	4b34      	ldr	r3, [pc, #208]	; (8001344 <HAL_RCC_OscConfig+0x244>)
 8001272:	2201      	movs	r2, #1
 8001274:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001276:	f7ff fc9d 	bl	8000bb4 <HAL_GetTick>
 800127a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800127c:	e008      	b.n	8001290 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800127e:	f7ff fc99 	bl	8000bb4 <HAL_GetTick>
 8001282:	4602      	mov	r2, r0
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	1ad3      	subs	r3, r2, r3
 8001288:	2b02      	cmp	r3, #2
 800128a:	d901      	bls.n	8001290 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800128c:	2303      	movs	r3, #3
 800128e:	e1a8      	b.n	80015e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001290:	4b2b      	ldr	r3, [pc, #172]	; (8001340 <HAL_RCC_OscConfig+0x240>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f003 0302 	and.w	r3, r3, #2
 8001298:	2b00      	cmp	r3, #0
 800129a:	d0f0      	beq.n	800127e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800129c:	4b28      	ldr	r3, [pc, #160]	; (8001340 <HAL_RCC_OscConfig+0x240>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	691b      	ldr	r3, [r3, #16]
 80012a8:	00db      	lsls	r3, r3, #3
 80012aa:	4925      	ldr	r1, [pc, #148]	; (8001340 <HAL_RCC_OscConfig+0x240>)
 80012ac:	4313      	orrs	r3, r2
 80012ae:	600b      	str	r3, [r1, #0]
 80012b0:	e015      	b.n	80012de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012b2:	4b24      	ldr	r3, [pc, #144]	; (8001344 <HAL_RCC_OscConfig+0x244>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012b8:	f7ff fc7c 	bl	8000bb4 <HAL_GetTick>
 80012bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012be:	e008      	b.n	80012d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012c0:	f7ff fc78 	bl	8000bb4 <HAL_GetTick>
 80012c4:	4602      	mov	r2, r0
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	1ad3      	subs	r3, r2, r3
 80012ca:	2b02      	cmp	r3, #2
 80012cc:	d901      	bls.n	80012d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80012ce:	2303      	movs	r3, #3
 80012d0:	e187      	b.n	80015e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012d2:	4b1b      	ldr	r3, [pc, #108]	; (8001340 <HAL_RCC_OscConfig+0x240>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f003 0302 	and.w	r3, r3, #2
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d1f0      	bne.n	80012c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f003 0308 	and.w	r3, r3, #8
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d036      	beq.n	8001358 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	695b      	ldr	r3, [r3, #20]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d016      	beq.n	8001320 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012f2:	4b15      	ldr	r3, [pc, #84]	; (8001348 <HAL_RCC_OscConfig+0x248>)
 80012f4:	2201      	movs	r2, #1
 80012f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012f8:	f7ff fc5c 	bl	8000bb4 <HAL_GetTick>
 80012fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012fe:	e008      	b.n	8001312 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001300:	f7ff fc58 	bl	8000bb4 <HAL_GetTick>
 8001304:	4602      	mov	r2, r0
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	2b02      	cmp	r3, #2
 800130c:	d901      	bls.n	8001312 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800130e:	2303      	movs	r3, #3
 8001310:	e167      	b.n	80015e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001312:	4b0b      	ldr	r3, [pc, #44]	; (8001340 <HAL_RCC_OscConfig+0x240>)
 8001314:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001316:	f003 0302 	and.w	r3, r3, #2
 800131a:	2b00      	cmp	r3, #0
 800131c:	d0f0      	beq.n	8001300 <HAL_RCC_OscConfig+0x200>
 800131e:	e01b      	b.n	8001358 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001320:	4b09      	ldr	r3, [pc, #36]	; (8001348 <HAL_RCC_OscConfig+0x248>)
 8001322:	2200      	movs	r2, #0
 8001324:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001326:	f7ff fc45 	bl	8000bb4 <HAL_GetTick>
 800132a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800132c:	e00e      	b.n	800134c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800132e:	f7ff fc41 	bl	8000bb4 <HAL_GetTick>
 8001332:	4602      	mov	r2, r0
 8001334:	693b      	ldr	r3, [r7, #16]
 8001336:	1ad3      	subs	r3, r2, r3
 8001338:	2b02      	cmp	r3, #2
 800133a:	d907      	bls.n	800134c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800133c:	2303      	movs	r3, #3
 800133e:	e150      	b.n	80015e2 <HAL_RCC_OscConfig+0x4e2>
 8001340:	40023800 	.word	0x40023800
 8001344:	42470000 	.word	0x42470000
 8001348:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800134c:	4b88      	ldr	r3, [pc, #544]	; (8001570 <HAL_RCC_OscConfig+0x470>)
 800134e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001350:	f003 0302 	and.w	r3, r3, #2
 8001354:	2b00      	cmp	r3, #0
 8001356:	d1ea      	bne.n	800132e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f003 0304 	and.w	r3, r3, #4
 8001360:	2b00      	cmp	r3, #0
 8001362:	f000 8097 	beq.w	8001494 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001366:	2300      	movs	r3, #0
 8001368:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800136a:	4b81      	ldr	r3, [pc, #516]	; (8001570 <HAL_RCC_OscConfig+0x470>)
 800136c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001372:	2b00      	cmp	r3, #0
 8001374:	d10f      	bne.n	8001396 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001376:	2300      	movs	r3, #0
 8001378:	60bb      	str	r3, [r7, #8]
 800137a:	4b7d      	ldr	r3, [pc, #500]	; (8001570 <HAL_RCC_OscConfig+0x470>)
 800137c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137e:	4a7c      	ldr	r2, [pc, #496]	; (8001570 <HAL_RCC_OscConfig+0x470>)
 8001380:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001384:	6413      	str	r3, [r2, #64]	; 0x40
 8001386:	4b7a      	ldr	r3, [pc, #488]	; (8001570 <HAL_RCC_OscConfig+0x470>)
 8001388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800138e:	60bb      	str	r3, [r7, #8]
 8001390:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001392:	2301      	movs	r3, #1
 8001394:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001396:	4b77      	ldr	r3, [pc, #476]	; (8001574 <HAL_RCC_OscConfig+0x474>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d118      	bne.n	80013d4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013a2:	4b74      	ldr	r3, [pc, #464]	; (8001574 <HAL_RCC_OscConfig+0x474>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a73      	ldr	r2, [pc, #460]	; (8001574 <HAL_RCC_OscConfig+0x474>)
 80013a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013ae:	f7ff fc01 	bl	8000bb4 <HAL_GetTick>
 80013b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013b4:	e008      	b.n	80013c8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013b6:	f7ff fbfd 	bl	8000bb4 <HAL_GetTick>
 80013ba:	4602      	mov	r2, r0
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	1ad3      	subs	r3, r2, r3
 80013c0:	2b02      	cmp	r3, #2
 80013c2:	d901      	bls.n	80013c8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80013c4:	2303      	movs	r3, #3
 80013c6:	e10c      	b.n	80015e2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013c8:	4b6a      	ldr	r3, [pc, #424]	; (8001574 <HAL_RCC_OscConfig+0x474>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d0f0      	beq.n	80013b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	689b      	ldr	r3, [r3, #8]
 80013d8:	2b01      	cmp	r3, #1
 80013da:	d106      	bne.n	80013ea <HAL_RCC_OscConfig+0x2ea>
 80013dc:	4b64      	ldr	r3, [pc, #400]	; (8001570 <HAL_RCC_OscConfig+0x470>)
 80013de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013e0:	4a63      	ldr	r2, [pc, #396]	; (8001570 <HAL_RCC_OscConfig+0x470>)
 80013e2:	f043 0301 	orr.w	r3, r3, #1
 80013e6:	6713      	str	r3, [r2, #112]	; 0x70
 80013e8:	e01c      	b.n	8001424 <HAL_RCC_OscConfig+0x324>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	2b05      	cmp	r3, #5
 80013f0:	d10c      	bne.n	800140c <HAL_RCC_OscConfig+0x30c>
 80013f2:	4b5f      	ldr	r3, [pc, #380]	; (8001570 <HAL_RCC_OscConfig+0x470>)
 80013f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013f6:	4a5e      	ldr	r2, [pc, #376]	; (8001570 <HAL_RCC_OscConfig+0x470>)
 80013f8:	f043 0304 	orr.w	r3, r3, #4
 80013fc:	6713      	str	r3, [r2, #112]	; 0x70
 80013fe:	4b5c      	ldr	r3, [pc, #368]	; (8001570 <HAL_RCC_OscConfig+0x470>)
 8001400:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001402:	4a5b      	ldr	r2, [pc, #364]	; (8001570 <HAL_RCC_OscConfig+0x470>)
 8001404:	f043 0301 	orr.w	r3, r3, #1
 8001408:	6713      	str	r3, [r2, #112]	; 0x70
 800140a:	e00b      	b.n	8001424 <HAL_RCC_OscConfig+0x324>
 800140c:	4b58      	ldr	r3, [pc, #352]	; (8001570 <HAL_RCC_OscConfig+0x470>)
 800140e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001410:	4a57      	ldr	r2, [pc, #348]	; (8001570 <HAL_RCC_OscConfig+0x470>)
 8001412:	f023 0301 	bic.w	r3, r3, #1
 8001416:	6713      	str	r3, [r2, #112]	; 0x70
 8001418:	4b55      	ldr	r3, [pc, #340]	; (8001570 <HAL_RCC_OscConfig+0x470>)
 800141a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800141c:	4a54      	ldr	r2, [pc, #336]	; (8001570 <HAL_RCC_OscConfig+0x470>)
 800141e:	f023 0304 	bic.w	r3, r3, #4
 8001422:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	689b      	ldr	r3, [r3, #8]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d015      	beq.n	8001458 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800142c:	f7ff fbc2 	bl	8000bb4 <HAL_GetTick>
 8001430:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001432:	e00a      	b.n	800144a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001434:	f7ff fbbe 	bl	8000bb4 <HAL_GetTick>
 8001438:	4602      	mov	r2, r0
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001442:	4293      	cmp	r3, r2
 8001444:	d901      	bls.n	800144a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001446:	2303      	movs	r3, #3
 8001448:	e0cb      	b.n	80015e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800144a:	4b49      	ldr	r3, [pc, #292]	; (8001570 <HAL_RCC_OscConfig+0x470>)
 800144c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800144e:	f003 0302 	and.w	r3, r3, #2
 8001452:	2b00      	cmp	r3, #0
 8001454:	d0ee      	beq.n	8001434 <HAL_RCC_OscConfig+0x334>
 8001456:	e014      	b.n	8001482 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001458:	f7ff fbac 	bl	8000bb4 <HAL_GetTick>
 800145c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800145e:	e00a      	b.n	8001476 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001460:	f7ff fba8 	bl	8000bb4 <HAL_GetTick>
 8001464:	4602      	mov	r2, r0
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	f241 3288 	movw	r2, #5000	; 0x1388
 800146e:	4293      	cmp	r3, r2
 8001470:	d901      	bls.n	8001476 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001472:	2303      	movs	r3, #3
 8001474:	e0b5      	b.n	80015e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001476:	4b3e      	ldr	r3, [pc, #248]	; (8001570 <HAL_RCC_OscConfig+0x470>)
 8001478:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800147a:	f003 0302 	and.w	r3, r3, #2
 800147e:	2b00      	cmp	r3, #0
 8001480:	d1ee      	bne.n	8001460 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001482:	7dfb      	ldrb	r3, [r7, #23]
 8001484:	2b01      	cmp	r3, #1
 8001486:	d105      	bne.n	8001494 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001488:	4b39      	ldr	r3, [pc, #228]	; (8001570 <HAL_RCC_OscConfig+0x470>)
 800148a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148c:	4a38      	ldr	r2, [pc, #224]	; (8001570 <HAL_RCC_OscConfig+0x470>)
 800148e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001492:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	699b      	ldr	r3, [r3, #24]
 8001498:	2b00      	cmp	r3, #0
 800149a:	f000 80a1 	beq.w	80015e0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800149e:	4b34      	ldr	r3, [pc, #208]	; (8001570 <HAL_RCC_OscConfig+0x470>)
 80014a0:	689b      	ldr	r3, [r3, #8]
 80014a2:	f003 030c 	and.w	r3, r3, #12
 80014a6:	2b08      	cmp	r3, #8
 80014a8:	d05c      	beq.n	8001564 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	699b      	ldr	r3, [r3, #24]
 80014ae:	2b02      	cmp	r3, #2
 80014b0:	d141      	bne.n	8001536 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014b2:	4b31      	ldr	r3, [pc, #196]	; (8001578 <HAL_RCC_OscConfig+0x478>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014b8:	f7ff fb7c 	bl	8000bb4 <HAL_GetTick>
 80014bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014be:	e008      	b.n	80014d2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014c0:	f7ff fb78 	bl	8000bb4 <HAL_GetTick>
 80014c4:	4602      	mov	r2, r0
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	2b02      	cmp	r3, #2
 80014cc:	d901      	bls.n	80014d2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80014ce:	2303      	movs	r3, #3
 80014d0:	e087      	b.n	80015e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014d2:	4b27      	ldr	r3, [pc, #156]	; (8001570 <HAL_RCC_OscConfig+0x470>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d1f0      	bne.n	80014c0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	69da      	ldr	r2, [r3, #28]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6a1b      	ldr	r3, [r3, #32]
 80014e6:	431a      	orrs	r2, r3
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ec:	019b      	lsls	r3, r3, #6
 80014ee:	431a      	orrs	r2, r3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014f4:	085b      	lsrs	r3, r3, #1
 80014f6:	3b01      	subs	r3, #1
 80014f8:	041b      	lsls	r3, r3, #16
 80014fa:	431a      	orrs	r2, r3
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001500:	061b      	lsls	r3, r3, #24
 8001502:	491b      	ldr	r1, [pc, #108]	; (8001570 <HAL_RCC_OscConfig+0x470>)
 8001504:	4313      	orrs	r3, r2
 8001506:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001508:	4b1b      	ldr	r3, [pc, #108]	; (8001578 <HAL_RCC_OscConfig+0x478>)
 800150a:	2201      	movs	r2, #1
 800150c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800150e:	f7ff fb51 	bl	8000bb4 <HAL_GetTick>
 8001512:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001514:	e008      	b.n	8001528 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001516:	f7ff fb4d 	bl	8000bb4 <HAL_GetTick>
 800151a:	4602      	mov	r2, r0
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	1ad3      	subs	r3, r2, r3
 8001520:	2b02      	cmp	r3, #2
 8001522:	d901      	bls.n	8001528 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001524:	2303      	movs	r3, #3
 8001526:	e05c      	b.n	80015e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001528:	4b11      	ldr	r3, [pc, #68]	; (8001570 <HAL_RCC_OscConfig+0x470>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001530:	2b00      	cmp	r3, #0
 8001532:	d0f0      	beq.n	8001516 <HAL_RCC_OscConfig+0x416>
 8001534:	e054      	b.n	80015e0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001536:	4b10      	ldr	r3, [pc, #64]	; (8001578 <HAL_RCC_OscConfig+0x478>)
 8001538:	2200      	movs	r2, #0
 800153a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800153c:	f7ff fb3a 	bl	8000bb4 <HAL_GetTick>
 8001540:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001542:	e008      	b.n	8001556 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001544:	f7ff fb36 	bl	8000bb4 <HAL_GetTick>
 8001548:	4602      	mov	r2, r0
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	2b02      	cmp	r3, #2
 8001550:	d901      	bls.n	8001556 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001552:	2303      	movs	r3, #3
 8001554:	e045      	b.n	80015e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001556:	4b06      	ldr	r3, [pc, #24]	; (8001570 <HAL_RCC_OscConfig+0x470>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800155e:	2b00      	cmp	r3, #0
 8001560:	d1f0      	bne.n	8001544 <HAL_RCC_OscConfig+0x444>
 8001562:	e03d      	b.n	80015e0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	699b      	ldr	r3, [r3, #24]
 8001568:	2b01      	cmp	r3, #1
 800156a:	d107      	bne.n	800157c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800156c:	2301      	movs	r3, #1
 800156e:	e038      	b.n	80015e2 <HAL_RCC_OscConfig+0x4e2>
 8001570:	40023800 	.word	0x40023800
 8001574:	40007000 	.word	0x40007000
 8001578:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800157c:	4b1b      	ldr	r3, [pc, #108]	; (80015ec <HAL_RCC_OscConfig+0x4ec>)
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	699b      	ldr	r3, [r3, #24]
 8001586:	2b01      	cmp	r3, #1
 8001588:	d028      	beq.n	80015dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001594:	429a      	cmp	r2, r3
 8001596:	d121      	bne.n	80015dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015a2:	429a      	cmp	r2, r3
 80015a4:	d11a      	bne.n	80015dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80015a6:	68fa      	ldr	r2, [r7, #12]
 80015a8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80015ac:	4013      	ands	r3, r2
 80015ae:	687a      	ldr	r2, [r7, #4]
 80015b0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80015b2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d111      	bne.n	80015dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015c2:	085b      	lsrs	r3, r3, #1
 80015c4:	3b01      	subs	r3, #1
 80015c6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d107      	bne.n	80015dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015d6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015d8:	429a      	cmp	r2, r3
 80015da:	d001      	beq.n	80015e0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80015dc:	2301      	movs	r3, #1
 80015de:	e000      	b.n	80015e2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80015e0:	2300      	movs	r3, #0
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3718      	adds	r7, #24
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	40023800 	.word	0x40023800

080015f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b084      	sub	sp, #16
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d101      	bne.n	8001604 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001600:	2301      	movs	r3, #1
 8001602:	e0cc      	b.n	800179e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001604:	4b68      	ldr	r3, [pc, #416]	; (80017a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f003 0307 	and.w	r3, r3, #7
 800160c:	683a      	ldr	r2, [r7, #0]
 800160e:	429a      	cmp	r2, r3
 8001610:	d90c      	bls.n	800162c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001612:	4b65      	ldr	r3, [pc, #404]	; (80017a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001614:	683a      	ldr	r2, [r7, #0]
 8001616:	b2d2      	uxtb	r2, r2
 8001618:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800161a:	4b63      	ldr	r3, [pc, #396]	; (80017a8 <HAL_RCC_ClockConfig+0x1b8>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f003 0307 	and.w	r3, r3, #7
 8001622:	683a      	ldr	r2, [r7, #0]
 8001624:	429a      	cmp	r2, r3
 8001626:	d001      	beq.n	800162c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001628:	2301      	movs	r3, #1
 800162a:	e0b8      	b.n	800179e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f003 0302 	and.w	r3, r3, #2
 8001634:	2b00      	cmp	r3, #0
 8001636:	d020      	beq.n	800167a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f003 0304 	and.w	r3, r3, #4
 8001640:	2b00      	cmp	r3, #0
 8001642:	d005      	beq.n	8001650 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001644:	4b59      	ldr	r3, [pc, #356]	; (80017ac <HAL_RCC_ClockConfig+0x1bc>)
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	4a58      	ldr	r2, [pc, #352]	; (80017ac <HAL_RCC_ClockConfig+0x1bc>)
 800164a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800164e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f003 0308 	and.w	r3, r3, #8
 8001658:	2b00      	cmp	r3, #0
 800165a:	d005      	beq.n	8001668 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800165c:	4b53      	ldr	r3, [pc, #332]	; (80017ac <HAL_RCC_ClockConfig+0x1bc>)
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	4a52      	ldr	r2, [pc, #328]	; (80017ac <HAL_RCC_ClockConfig+0x1bc>)
 8001662:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001666:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001668:	4b50      	ldr	r3, [pc, #320]	; (80017ac <HAL_RCC_ClockConfig+0x1bc>)
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	494d      	ldr	r1, [pc, #308]	; (80017ac <HAL_RCC_ClockConfig+0x1bc>)
 8001676:	4313      	orrs	r3, r2
 8001678:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f003 0301 	and.w	r3, r3, #1
 8001682:	2b00      	cmp	r3, #0
 8001684:	d044      	beq.n	8001710 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	2b01      	cmp	r3, #1
 800168c:	d107      	bne.n	800169e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800168e:	4b47      	ldr	r3, [pc, #284]	; (80017ac <HAL_RCC_ClockConfig+0x1bc>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d119      	bne.n	80016ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	e07f      	b.n	800179e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	2b02      	cmp	r3, #2
 80016a4:	d003      	beq.n	80016ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016aa:	2b03      	cmp	r3, #3
 80016ac:	d107      	bne.n	80016be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016ae:	4b3f      	ldr	r3, [pc, #252]	; (80017ac <HAL_RCC_ClockConfig+0x1bc>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d109      	bne.n	80016ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	e06f      	b.n	800179e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016be:	4b3b      	ldr	r3, [pc, #236]	; (80017ac <HAL_RCC_ClockConfig+0x1bc>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 0302 	and.w	r3, r3, #2
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d101      	bne.n	80016ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e067      	b.n	800179e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016ce:	4b37      	ldr	r3, [pc, #220]	; (80017ac <HAL_RCC_ClockConfig+0x1bc>)
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	f023 0203 	bic.w	r2, r3, #3
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	4934      	ldr	r1, [pc, #208]	; (80017ac <HAL_RCC_ClockConfig+0x1bc>)
 80016dc:	4313      	orrs	r3, r2
 80016de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016e0:	f7ff fa68 	bl	8000bb4 <HAL_GetTick>
 80016e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016e6:	e00a      	b.n	80016fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016e8:	f7ff fa64 	bl	8000bb4 <HAL_GetTick>
 80016ec:	4602      	mov	r2, r0
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d901      	bls.n	80016fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016fa:	2303      	movs	r3, #3
 80016fc:	e04f      	b.n	800179e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016fe:	4b2b      	ldr	r3, [pc, #172]	; (80017ac <HAL_RCC_ClockConfig+0x1bc>)
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	f003 020c 	and.w	r2, r3, #12
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	429a      	cmp	r2, r3
 800170e:	d1eb      	bne.n	80016e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001710:	4b25      	ldr	r3, [pc, #148]	; (80017a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f003 0307 	and.w	r3, r3, #7
 8001718:	683a      	ldr	r2, [r7, #0]
 800171a:	429a      	cmp	r2, r3
 800171c:	d20c      	bcs.n	8001738 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800171e:	4b22      	ldr	r3, [pc, #136]	; (80017a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001720:	683a      	ldr	r2, [r7, #0]
 8001722:	b2d2      	uxtb	r2, r2
 8001724:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001726:	4b20      	ldr	r3, [pc, #128]	; (80017a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f003 0307 	and.w	r3, r3, #7
 800172e:	683a      	ldr	r2, [r7, #0]
 8001730:	429a      	cmp	r2, r3
 8001732:	d001      	beq.n	8001738 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001734:	2301      	movs	r3, #1
 8001736:	e032      	b.n	800179e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f003 0304 	and.w	r3, r3, #4
 8001740:	2b00      	cmp	r3, #0
 8001742:	d008      	beq.n	8001756 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001744:	4b19      	ldr	r3, [pc, #100]	; (80017ac <HAL_RCC_ClockConfig+0x1bc>)
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	68db      	ldr	r3, [r3, #12]
 8001750:	4916      	ldr	r1, [pc, #88]	; (80017ac <HAL_RCC_ClockConfig+0x1bc>)
 8001752:	4313      	orrs	r3, r2
 8001754:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 0308 	and.w	r3, r3, #8
 800175e:	2b00      	cmp	r3, #0
 8001760:	d009      	beq.n	8001776 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001762:	4b12      	ldr	r3, [pc, #72]	; (80017ac <HAL_RCC_ClockConfig+0x1bc>)
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	691b      	ldr	r3, [r3, #16]
 800176e:	00db      	lsls	r3, r3, #3
 8001770:	490e      	ldr	r1, [pc, #56]	; (80017ac <HAL_RCC_ClockConfig+0x1bc>)
 8001772:	4313      	orrs	r3, r2
 8001774:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001776:	f000 f821 	bl	80017bc <HAL_RCC_GetSysClockFreq>
 800177a:	4602      	mov	r2, r0
 800177c:	4b0b      	ldr	r3, [pc, #44]	; (80017ac <HAL_RCC_ClockConfig+0x1bc>)
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	091b      	lsrs	r3, r3, #4
 8001782:	f003 030f 	and.w	r3, r3, #15
 8001786:	490a      	ldr	r1, [pc, #40]	; (80017b0 <HAL_RCC_ClockConfig+0x1c0>)
 8001788:	5ccb      	ldrb	r3, [r1, r3]
 800178a:	fa22 f303 	lsr.w	r3, r2, r3
 800178e:	4a09      	ldr	r2, [pc, #36]	; (80017b4 <HAL_RCC_ClockConfig+0x1c4>)
 8001790:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001792:	4b09      	ldr	r3, [pc, #36]	; (80017b8 <HAL_RCC_ClockConfig+0x1c8>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4618      	mov	r0, r3
 8001798:	f7ff f8fe 	bl	8000998 <HAL_InitTick>

  return HAL_OK;
 800179c:	2300      	movs	r3, #0
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3710      	adds	r7, #16
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	40023c00 	.word	0x40023c00
 80017ac:	40023800 	.word	0x40023800
 80017b0:	08004300 	.word	0x08004300
 80017b4:	20000000 	.word	0x20000000
 80017b8:	20000004 	.word	0x20000004

080017bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80017c0:	b094      	sub	sp, #80	; 0x50
 80017c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80017c4:	2300      	movs	r3, #0
 80017c6:	647b      	str	r3, [r7, #68]	; 0x44
 80017c8:	2300      	movs	r3, #0
 80017ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80017cc:	2300      	movs	r3, #0
 80017ce:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80017d0:	2300      	movs	r3, #0
 80017d2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017d4:	4b79      	ldr	r3, [pc, #484]	; (80019bc <HAL_RCC_GetSysClockFreq+0x200>)
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	f003 030c 	and.w	r3, r3, #12
 80017dc:	2b08      	cmp	r3, #8
 80017de:	d00d      	beq.n	80017fc <HAL_RCC_GetSysClockFreq+0x40>
 80017e0:	2b08      	cmp	r3, #8
 80017e2:	f200 80e1 	bhi.w	80019a8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d002      	beq.n	80017f0 <HAL_RCC_GetSysClockFreq+0x34>
 80017ea:	2b04      	cmp	r3, #4
 80017ec:	d003      	beq.n	80017f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80017ee:	e0db      	b.n	80019a8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80017f0:	4b73      	ldr	r3, [pc, #460]	; (80019c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80017f2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80017f4:	e0db      	b.n	80019ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80017f6:	4b73      	ldr	r3, [pc, #460]	; (80019c4 <HAL_RCC_GetSysClockFreq+0x208>)
 80017f8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80017fa:	e0d8      	b.n	80019ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017fc:	4b6f      	ldr	r3, [pc, #444]	; (80019bc <HAL_RCC_GetSysClockFreq+0x200>)
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001804:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001806:	4b6d      	ldr	r3, [pc, #436]	; (80019bc <HAL_RCC_GetSysClockFreq+0x200>)
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800180e:	2b00      	cmp	r3, #0
 8001810:	d063      	beq.n	80018da <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001812:	4b6a      	ldr	r3, [pc, #424]	; (80019bc <HAL_RCC_GetSysClockFreq+0x200>)
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	099b      	lsrs	r3, r3, #6
 8001818:	2200      	movs	r2, #0
 800181a:	63bb      	str	r3, [r7, #56]	; 0x38
 800181c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800181e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001820:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001824:	633b      	str	r3, [r7, #48]	; 0x30
 8001826:	2300      	movs	r3, #0
 8001828:	637b      	str	r3, [r7, #52]	; 0x34
 800182a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800182e:	4622      	mov	r2, r4
 8001830:	462b      	mov	r3, r5
 8001832:	f04f 0000 	mov.w	r0, #0
 8001836:	f04f 0100 	mov.w	r1, #0
 800183a:	0159      	lsls	r1, r3, #5
 800183c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001840:	0150      	lsls	r0, r2, #5
 8001842:	4602      	mov	r2, r0
 8001844:	460b      	mov	r3, r1
 8001846:	4621      	mov	r1, r4
 8001848:	1a51      	subs	r1, r2, r1
 800184a:	6139      	str	r1, [r7, #16]
 800184c:	4629      	mov	r1, r5
 800184e:	eb63 0301 	sbc.w	r3, r3, r1
 8001852:	617b      	str	r3, [r7, #20]
 8001854:	f04f 0200 	mov.w	r2, #0
 8001858:	f04f 0300 	mov.w	r3, #0
 800185c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001860:	4659      	mov	r1, fp
 8001862:	018b      	lsls	r3, r1, #6
 8001864:	4651      	mov	r1, sl
 8001866:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800186a:	4651      	mov	r1, sl
 800186c:	018a      	lsls	r2, r1, #6
 800186e:	4651      	mov	r1, sl
 8001870:	ebb2 0801 	subs.w	r8, r2, r1
 8001874:	4659      	mov	r1, fp
 8001876:	eb63 0901 	sbc.w	r9, r3, r1
 800187a:	f04f 0200 	mov.w	r2, #0
 800187e:	f04f 0300 	mov.w	r3, #0
 8001882:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001886:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800188a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800188e:	4690      	mov	r8, r2
 8001890:	4699      	mov	r9, r3
 8001892:	4623      	mov	r3, r4
 8001894:	eb18 0303 	adds.w	r3, r8, r3
 8001898:	60bb      	str	r3, [r7, #8]
 800189a:	462b      	mov	r3, r5
 800189c:	eb49 0303 	adc.w	r3, r9, r3
 80018a0:	60fb      	str	r3, [r7, #12]
 80018a2:	f04f 0200 	mov.w	r2, #0
 80018a6:	f04f 0300 	mov.w	r3, #0
 80018aa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80018ae:	4629      	mov	r1, r5
 80018b0:	024b      	lsls	r3, r1, #9
 80018b2:	4621      	mov	r1, r4
 80018b4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80018b8:	4621      	mov	r1, r4
 80018ba:	024a      	lsls	r2, r1, #9
 80018bc:	4610      	mov	r0, r2
 80018be:	4619      	mov	r1, r3
 80018c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018c2:	2200      	movs	r2, #0
 80018c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80018c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80018c8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80018cc:	f7fe fc88 	bl	80001e0 <__aeabi_uldivmod>
 80018d0:	4602      	mov	r2, r0
 80018d2:	460b      	mov	r3, r1
 80018d4:	4613      	mov	r3, r2
 80018d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80018d8:	e058      	b.n	800198c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018da:	4b38      	ldr	r3, [pc, #224]	; (80019bc <HAL_RCC_GetSysClockFreq+0x200>)
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	099b      	lsrs	r3, r3, #6
 80018e0:	2200      	movs	r2, #0
 80018e2:	4618      	mov	r0, r3
 80018e4:	4611      	mov	r1, r2
 80018e6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80018ea:	623b      	str	r3, [r7, #32]
 80018ec:	2300      	movs	r3, #0
 80018ee:	627b      	str	r3, [r7, #36]	; 0x24
 80018f0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80018f4:	4642      	mov	r2, r8
 80018f6:	464b      	mov	r3, r9
 80018f8:	f04f 0000 	mov.w	r0, #0
 80018fc:	f04f 0100 	mov.w	r1, #0
 8001900:	0159      	lsls	r1, r3, #5
 8001902:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001906:	0150      	lsls	r0, r2, #5
 8001908:	4602      	mov	r2, r0
 800190a:	460b      	mov	r3, r1
 800190c:	4641      	mov	r1, r8
 800190e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001912:	4649      	mov	r1, r9
 8001914:	eb63 0b01 	sbc.w	fp, r3, r1
 8001918:	f04f 0200 	mov.w	r2, #0
 800191c:	f04f 0300 	mov.w	r3, #0
 8001920:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001924:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001928:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800192c:	ebb2 040a 	subs.w	r4, r2, sl
 8001930:	eb63 050b 	sbc.w	r5, r3, fp
 8001934:	f04f 0200 	mov.w	r2, #0
 8001938:	f04f 0300 	mov.w	r3, #0
 800193c:	00eb      	lsls	r3, r5, #3
 800193e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001942:	00e2      	lsls	r2, r4, #3
 8001944:	4614      	mov	r4, r2
 8001946:	461d      	mov	r5, r3
 8001948:	4643      	mov	r3, r8
 800194a:	18e3      	adds	r3, r4, r3
 800194c:	603b      	str	r3, [r7, #0]
 800194e:	464b      	mov	r3, r9
 8001950:	eb45 0303 	adc.w	r3, r5, r3
 8001954:	607b      	str	r3, [r7, #4]
 8001956:	f04f 0200 	mov.w	r2, #0
 800195a:	f04f 0300 	mov.w	r3, #0
 800195e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001962:	4629      	mov	r1, r5
 8001964:	028b      	lsls	r3, r1, #10
 8001966:	4621      	mov	r1, r4
 8001968:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800196c:	4621      	mov	r1, r4
 800196e:	028a      	lsls	r2, r1, #10
 8001970:	4610      	mov	r0, r2
 8001972:	4619      	mov	r1, r3
 8001974:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001976:	2200      	movs	r2, #0
 8001978:	61bb      	str	r3, [r7, #24]
 800197a:	61fa      	str	r2, [r7, #28]
 800197c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001980:	f7fe fc2e 	bl	80001e0 <__aeabi_uldivmod>
 8001984:	4602      	mov	r2, r0
 8001986:	460b      	mov	r3, r1
 8001988:	4613      	mov	r3, r2
 800198a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800198c:	4b0b      	ldr	r3, [pc, #44]	; (80019bc <HAL_RCC_GetSysClockFreq+0x200>)
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	0c1b      	lsrs	r3, r3, #16
 8001992:	f003 0303 	and.w	r3, r3, #3
 8001996:	3301      	adds	r3, #1
 8001998:	005b      	lsls	r3, r3, #1
 800199a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800199c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800199e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80019a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80019a4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80019a6:	e002      	b.n	80019ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80019a8:	4b05      	ldr	r3, [pc, #20]	; (80019c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80019aa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80019ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	3750      	adds	r7, #80	; 0x50
 80019b4:	46bd      	mov	sp, r7
 80019b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80019ba:	bf00      	nop
 80019bc:	40023800 	.word	0x40023800
 80019c0:	00f42400 	.word	0x00f42400
 80019c4:	007a1200 	.word	0x007a1200

080019c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019cc:	4b03      	ldr	r3, [pc, #12]	; (80019dc <HAL_RCC_GetHCLKFreq+0x14>)
 80019ce:	681b      	ldr	r3, [r3, #0]
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
 80019da:	bf00      	nop
 80019dc:	20000000 	.word	0x20000000

080019e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80019e4:	f7ff fff0 	bl	80019c8 <HAL_RCC_GetHCLKFreq>
 80019e8:	4602      	mov	r2, r0
 80019ea:	4b05      	ldr	r3, [pc, #20]	; (8001a00 <HAL_RCC_GetPCLK1Freq+0x20>)
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	0a9b      	lsrs	r3, r3, #10
 80019f0:	f003 0307 	and.w	r3, r3, #7
 80019f4:	4903      	ldr	r1, [pc, #12]	; (8001a04 <HAL_RCC_GetPCLK1Freq+0x24>)
 80019f6:	5ccb      	ldrb	r3, [r1, r3]
 80019f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	40023800 	.word	0x40023800
 8001a04:	08004310 	.word	0x08004310

08001a08 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
 8001a10:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	220f      	movs	r2, #15
 8001a16:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001a18:	4b12      	ldr	r3, [pc, #72]	; (8001a64 <HAL_RCC_GetClockConfig+0x5c>)
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	f003 0203 	and.w	r2, r3, #3
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001a24:	4b0f      	ldr	r3, [pc, #60]	; (8001a64 <HAL_RCC_GetClockConfig+0x5c>)
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001a30:	4b0c      	ldr	r3, [pc, #48]	; (8001a64 <HAL_RCC_GetClockConfig+0x5c>)
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001a3c:	4b09      	ldr	r3, [pc, #36]	; (8001a64 <HAL_RCC_GetClockConfig+0x5c>)
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	08db      	lsrs	r3, r3, #3
 8001a42:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001a4a:	4b07      	ldr	r3, [pc, #28]	; (8001a68 <HAL_RCC_GetClockConfig+0x60>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 0207 	and.w	r2, r3, #7
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	601a      	str	r2, [r3, #0]
}
 8001a56:	bf00      	nop
 8001a58:	370c      	adds	r7, #12
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	40023800 	.word	0x40023800
 8001a68:	40023c00 	.word	0x40023c00

08001a6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d101      	bne.n	8001a7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e041      	b.n	8001b02 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d106      	bne.n	8001a98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a92:	6878      	ldr	r0, [r7, #4]
 8001a94:	f000 f839 	bl	8001b0a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2202      	movs	r2, #2
 8001a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	3304      	adds	r3, #4
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	4610      	mov	r0, r2
 8001aac:	f000 f9ca 	bl	8001e44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2201      	movs	r2, #1
 8001abc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2201      	movs	r2, #1
 8001acc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2201      	movs	r2, #1
 8001adc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2201      	movs	r2, #1
 8001aec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2201      	movs	r2, #1
 8001af4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2201      	movs	r2, #1
 8001afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b00:	2300      	movs	r3, #0
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3708      	adds	r7, #8
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}

08001b0a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001b0a:	b480      	push	{r7}
 8001b0c:	b083      	sub	sp, #12
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001b12:	bf00      	nop
 8001b14:	370c      	adds	r7, #12
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
	...

08001b20 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b085      	sub	sp, #20
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b2e:	b2db      	uxtb	r3, r3
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d001      	beq.n	8001b38 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e044      	b.n	8001bc2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2202      	movs	r2, #2
 8001b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	68da      	ldr	r2, [r3, #12]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f042 0201 	orr.w	r2, r2, #1
 8001b4e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a1e      	ldr	r2, [pc, #120]	; (8001bd0 <HAL_TIM_Base_Start_IT+0xb0>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d018      	beq.n	8001b8c <HAL_TIM_Base_Start_IT+0x6c>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b62:	d013      	beq.n	8001b8c <HAL_TIM_Base_Start_IT+0x6c>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a1a      	ldr	r2, [pc, #104]	; (8001bd4 <HAL_TIM_Base_Start_IT+0xb4>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d00e      	beq.n	8001b8c <HAL_TIM_Base_Start_IT+0x6c>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a19      	ldr	r2, [pc, #100]	; (8001bd8 <HAL_TIM_Base_Start_IT+0xb8>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d009      	beq.n	8001b8c <HAL_TIM_Base_Start_IT+0x6c>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a17      	ldr	r2, [pc, #92]	; (8001bdc <HAL_TIM_Base_Start_IT+0xbc>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d004      	beq.n	8001b8c <HAL_TIM_Base_Start_IT+0x6c>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a16      	ldr	r2, [pc, #88]	; (8001be0 <HAL_TIM_Base_Start_IT+0xc0>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d111      	bne.n	8001bb0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	f003 0307 	and.w	r3, r3, #7
 8001b96:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	2b06      	cmp	r3, #6
 8001b9c:	d010      	beq.n	8001bc0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f042 0201 	orr.w	r2, r2, #1
 8001bac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bae:	e007      	b.n	8001bc0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f042 0201 	orr.w	r2, r2, #1
 8001bbe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001bc0:	2300      	movs	r3, #0
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3714      	adds	r7, #20
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr
 8001bce:	bf00      	nop
 8001bd0:	40010000 	.word	0x40010000
 8001bd4:	40000400 	.word	0x40000400
 8001bd8:	40000800 	.word	0x40000800
 8001bdc:	40000c00 	.word	0x40000c00
 8001be0:	40014000 	.word	0x40014000

08001be4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	691b      	ldr	r3, [r3, #16]
 8001bf2:	f003 0302 	and.w	r3, r3, #2
 8001bf6:	2b02      	cmp	r3, #2
 8001bf8:	d122      	bne.n	8001c40 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	f003 0302 	and.w	r3, r3, #2
 8001c04:	2b02      	cmp	r3, #2
 8001c06:	d11b      	bne.n	8001c40 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f06f 0202 	mvn.w	r2, #2
 8001c10:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2201      	movs	r2, #1
 8001c16:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	699b      	ldr	r3, [r3, #24]
 8001c1e:	f003 0303 	and.w	r3, r3, #3
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d003      	beq.n	8001c2e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	f000 f8ee 	bl	8001e08 <HAL_TIM_IC_CaptureCallback>
 8001c2c:	e005      	b.n	8001c3a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f000 f8e0 	bl	8001df4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c34:	6878      	ldr	r0, [r7, #4]
 8001c36:	f000 f8f1 	bl	8001e1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	691b      	ldr	r3, [r3, #16]
 8001c46:	f003 0304 	and.w	r3, r3, #4
 8001c4a:	2b04      	cmp	r3, #4
 8001c4c:	d122      	bne.n	8001c94 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	f003 0304 	and.w	r3, r3, #4
 8001c58:	2b04      	cmp	r3, #4
 8001c5a:	d11b      	bne.n	8001c94 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f06f 0204 	mvn.w	r2, #4
 8001c64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2202      	movs	r2, #2
 8001c6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	699b      	ldr	r3, [r3, #24]
 8001c72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d003      	beq.n	8001c82 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f000 f8c4 	bl	8001e08 <HAL_TIM_IC_CaptureCallback>
 8001c80:	e005      	b.n	8001c8e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	f000 f8b6 	bl	8001df4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c88:	6878      	ldr	r0, [r7, #4]
 8001c8a:	f000 f8c7 	bl	8001e1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2200      	movs	r2, #0
 8001c92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	691b      	ldr	r3, [r3, #16]
 8001c9a:	f003 0308 	and.w	r3, r3, #8
 8001c9e:	2b08      	cmp	r3, #8
 8001ca0:	d122      	bne.n	8001ce8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	f003 0308 	and.w	r3, r3, #8
 8001cac:	2b08      	cmp	r3, #8
 8001cae:	d11b      	bne.n	8001ce8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f06f 0208 	mvn.w	r2, #8
 8001cb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2204      	movs	r2, #4
 8001cbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	69db      	ldr	r3, [r3, #28]
 8001cc6:	f003 0303 	and.w	r3, r3, #3
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d003      	beq.n	8001cd6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f000 f89a 	bl	8001e08 <HAL_TIM_IC_CaptureCallback>
 8001cd4:	e005      	b.n	8001ce2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f000 f88c 	bl	8001df4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cdc:	6878      	ldr	r0, [r7, #4]
 8001cde:	f000 f89d 	bl	8001e1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	691b      	ldr	r3, [r3, #16]
 8001cee:	f003 0310 	and.w	r3, r3, #16
 8001cf2:	2b10      	cmp	r3, #16
 8001cf4:	d122      	bne.n	8001d3c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	f003 0310 	and.w	r3, r3, #16
 8001d00:	2b10      	cmp	r3, #16
 8001d02:	d11b      	bne.n	8001d3c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f06f 0210 	mvn.w	r2, #16
 8001d0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2208      	movs	r2, #8
 8001d12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	69db      	ldr	r3, [r3, #28]
 8001d1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d003      	beq.n	8001d2a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f000 f870 	bl	8001e08 <HAL_TIM_IC_CaptureCallback>
 8001d28:	e005      	b.n	8001d36 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f000 f862 	bl	8001df4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	f000 f873 	bl	8001e1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	691b      	ldr	r3, [r3, #16]
 8001d42:	f003 0301 	and.w	r3, r3, #1
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d10e      	bne.n	8001d68 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	f003 0301 	and.w	r3, r3, #1
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d107      	bne.n	8001d68 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f06f 0201 	mvn.w	r2, #1
 8001d60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f7fe fdd8 	bl	8000918 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	691b      	ldr	r3, [r3, #16]
 8001d6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d72:	2b80      	cmp	r3, #128	; 0x80
 8001d74:	d10e      	bne.n	8001d94 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d80:	2b80      	cmp	r3, #128	; 0x80
 8001d82:	d107      	bne.n	8001d94 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001d8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f000 f8e2 	bl	8001f58 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	691b      	ldr	r3, [r3, #16]
 8001d9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d9e:	2b40      	cmp	r3, #64	; 0x40
 8001da0:	d10e      	bne.n	8001dc0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dac:	2b40      	cmp	r3, #64	; 0x40
 8001dae:	d107      	bne.n	8001dc0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001db8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f000 f838 	bl	8001e30 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	691b      	ldr	r3, [r3, #16]
 8001dc6:	f003 0320 	and.w	r3, r3, #32
 8001dca:	2b20      	cmp	r3, #32
 8001dcc:	d10e      	bne.n	8001dec <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	f003 0320 	and.w	r3, r3, #32
 8001dd8:	2b20      	cmp	r3, #32
 8001dda:	d107      	bne.n	8001dec <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f06f 0220 	mvn.w	r2, #32
 8001de4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f000 f8ac 	bl	8001f44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001dec:	bf00      	nop
 8001dee:	3708      	adds	r7, #8
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}

08001df4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001dfc:	bf00      	nop
 8001dfe:	370c      	adds	r7, #12
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr

08001e08 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001e10:	bf00      	nop
 8001e12:	370c      	adds	r7, #12
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr

08001e1c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001e24:	bf00      	nop
 8001e26:	370c      	adds	r7, #12
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr

08001e30 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001e38:	bf00      	nop
 8001e3a:	370c      	adds	r7, #12
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr

08001e44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b085      	sub	sp, #20
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	4a34      	ldr	r2, [pc, #208]	; (8001f28 <TIM_Base_SetConfig+0xe4>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d00f      	beq.n	8001e7c <TIM_Base_SetConfig+0x38>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e62:	d00b      	beq.n	8001e7c <TIM_Base_SetConfig+0x38>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	4a31      	ldr	r2, [pc, #196]	; (8001f2c <TIM_Base_SetConfig+0xe8>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d007      	beq.n	8001e7c <TIM_Base_SetConfig+0x38>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	4a30      	ldr	r2, [pc, #192]	; (8001f30 <TIM_Base_SetConfig+0xec>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d003      	beq.n	8001e7c <TIM_Base_SetConfig+0x38>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	4a2f      	ldr	r2, [pc, #188]	; (8001f34 <TIM_Base_SetConfig+0xf0>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d108      	bne.n	8001e8e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	68fa      	ldr	r2, [r7, #12]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4a25      	ldr	r2, [pc, #148]	; (8001f28 <TIM_Base_SetConfig+0xe4>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d01b      	beq.n	8001ece <TIM_Base_SetConfig+0x8a>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e9c:	d017      	beq.n	8001ece <TIM_Base_SetConfig+0x8a>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4a22      	ldr	r2, [pc, #136]	; (8001f2c <TIM_Base_SetConfig+0xe8>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d013      	beq.n	8001ece <TIM_Base_SetConfig+0x8a>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4a21      	ldr	r2, [pc, #132]	; (8001f30 <TIM_Base_SetConfig+0xec>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d00f      	beq.n	8001ece <TIM_Base_SetConfig+0x8a>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4a20      	ldr	r2, [pc, #128]	; (8001f34 <TIM_Base_SetConfig+0xf0>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d00b      	beq.n	8001ece <TIM_Base_SetConfig+0x8a>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4a1f      	ldr	r2, [pc, #124]	; (8001f38 <TIM_Base_SetConfig+0xf4>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d007      	beq.n	8001ece <TIM_Base_SetConfig+0x8a>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4a1e      	ldr	r2, [pc, #120]	; (8001f3c <TIM_Base_SetConfig+0xf8>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d003      	beq.n	8001ece <TIM_Base_SetConfig+0x8a>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4a1d      	ldr	r2, [pc, #116]	; (8001f40 <TIM_Base_SetConfig+0xfc>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d108      	bne.n	8001ee0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ed4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	68db      	ldr	r3, [r3, #12]
 8001eda:	68fa      	ldr	r2, [r7, #12]
 8001edc:	4313      	orrs	r3, r2
 8001ede:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	695b      	ldr	r3, [r3, #20]
 8001eea:	4313      	orrs	r3, r2
 8001eec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	68fa      	ldr	r2, [r7, #12]
 8001ef2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	689a      	ldr	r2, [r3, #8]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	4a08      	ldr	r2, [pc, #32]	; (8001f28 <TIM_Base_SetConfig+0xe4>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d103      	bne.n	8001f14 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	691a      	ldr	r2, [r3, #16]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2201      	movs	r2, #1
 8001f18:	615a      	str	r2, [r3, #20]
}
 8001f1a:	bf00      	nop
 8001f1c:	3714      	adds	r7, #20
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop
 8001f28:	40010000 	.word	0x40010000
 8001f2c:	40000400 	.word	0x40000400
 8001f30:	40000800 	.word	0x40000800
 8001f34:	40000c00 	.word	0x40000c00
 8001f38:	40014000 	.word	0x40014000
 8001f3c:	40014400 	.word	0x40014400
 8001f40:	40014800 	.word	0x40014800

08001f44 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001f4c:	bf00      	nop
 8001f4e:	370c      	adds	r7, #12
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr

08001f58 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001f60:	bf00      	nop
 8001f62:	370c      	adds	r7, #12
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr

08001f6c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	f103 0208 	add.w	r2, r3, #8
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	f04f 32ff 	mov.w	r2, #4294967295
 8001f84:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	f103 0208 	add.w	r2, r3, #8
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	f103 0208 	add.w	r2, r3, #8
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001fa0:	bf00      	nop
 8001fa2:	370c      	adds	r7, #12
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr

08001fac <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001fba:	bf00      	nop
 8001fbc:	370c      	adds	r7, #12
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr

08001fc6 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8001fc6:	b480      	push	{r7}
 8001fc8:	b085      	sub	sp, #20
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	6078      	str	r0, [r7, #4]
 8001fce:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fdc:	d103      	bne.n	8001fe6 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	691b      	ldr	r3, [r3, #16]
 8001fe2:	60fb      	str	r3, [r7, #12]
 8001fe4:	e00c      	b.n	8002000 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	3308      	adds	r3, #8
 8001fea:	60fb      	str	r3, [r7, #12]
 8001fec:	e002      	b.n	8001ff4 <vListInsert+0x2e>
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	60fb      	str	r3, [r7, #12]
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	68ba      	ldr	r2, [r7, #8]
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d2f6      	bcs.n	8001fee <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	685a      	ldr	r2, [r3, #4]
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	683a      	ldr	r2, [r7, #0]
 800200e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	68fa      	ldr	r2, [r7, #12]
 8002014:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	683a      	ldr	r2, [r7, #0]
 800201a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	687a      	ldr	r2, [r7, #4]
 8002020:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	1c5a      	adds	r2, r3, #1
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	601a      	str	r2, [r3, #0]
}
 800202c:	bf00      	nop
 800202e:	3714      	adds	r7, #20
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr

08002038 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002038:	b480      	push	{r7}
 800203a:	b085      	sub	sp, #20
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	691b      	ldr	r3, [r3, #16]
 8002044:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	687a      	ldr	r2, [r7, #4]
 800204c:	6892      	ldr	r2, [r2, #8]
 800204e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	687a      	ldr	r2, [r7, #4]
 8002056:	6852      	ldr	r2, [r2, #4]
 8002058:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	687a      	ldr	r2, [r7, #4]
 8002060:	429a      	cmp	r2, r3
 8002062:	d103      	bne.n	800206c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	689a      	ldr	r2, [r3, #8]
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2200      	movs	r2, #0
 8002070:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	1e5a      	subs	r2, r3, #1
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
}
 8002080:	4618      	mov	r0, r3
 8002082:	3714      	adds	r7, #20
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr

0800208c <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b086      	sub	sp, #24
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8002096:	2301      	movs	r3, #1
 8002098:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d10a      	bne.n	80020ba <xQueueGenericReset+0x2e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80020a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020a8:	f383 8811 	msr	BASEPRI, r3
 80020ac:	f3bf 8f6f 	isb	sy
 80020b0:	f3bf 8f4f 	dsb	sy
 80020b4:	60fb      	str	r3, [r7, #12]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80020b6:	bf00      	nop
 80020b8:	e7fe      	b.n	80020b8 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d05d      	beq.n	800217c <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d059      	beq.n	800217c <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020d0:	2100      	movs	r1, #0
 80020d2:	fba3 2302 	umull	r2, r3, r3, r2
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d000      	beq.n	80020dc <xQueueGenericReset+0x50>
 80020da:	2101      	movs	r1, #1
 80020dc:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d14c      	bne.n	800217c <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 80020e2:	f001 fe09 	bl	8003cf8 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020ee:	6939      	ldr	r1, [r7, #16]
 80020f0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80020f2:	fb01 f303 	mul.w	r3, r1, r3
 80020f6:	441a      	add	r2, r3
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	2200      	movs	r2, #0
 8002100:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002112:	3b01      	subs	r3, #1
 8002114:	6939      	ldr	r1, [r7, #16]
 8002116:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002118:	fb01 f303 	mul.w	r3, r1, r3
 800211c:	441a      	add	r2, r3
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	22ff      	movs	r2, #255	; 0xff
 8002126:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	22ff      	movs	r2, #255	; 0xff
 800212e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d114      	bne.n	8002162 <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	691b      	ldr	r3, [r3, #16]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d01a      	beq.n	8002176 <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	3310      	adds	r3, #16
 8002144:	4618      	mov	r0, r3
 8002146:	f000 ff79 	bl	800303c <xTaskRemoveFromEventList>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d012      	beq.n	8002176 <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002150:	4b15      	ldr	r3, [pc, #84]	; (80021a8 <xQueueGenericReset+0x11c>)
 8002152:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002156:	601a      	str	r2, [r3, #0]
 8002158:	f3bf 8f4f 	dsb	sy
 800215c:	f3bf 8f6f 	isb	sy
 8002160:	e009      	b.n	8002176 <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	3310      	adds	r3, #16
 8002166:	4618      	mov	r0, r3
 8002168:	f7ff ff00 	bl	8001f6c <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	3324      	adds	r3, #36	; 0x24
 8002170:	4618      	mov	r0, r3
 8002172:	f7ff fefb 	bl	8001f6c <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8002176:	f001 fdef 	bl	8003d58 <vPortExitCritical>
 800217a:	e001      	b.n	8002180 <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 800217c:	2300      	movs	r3, #0
 800217e:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d10a      	bne.n	800219c <xQueueGenericReset+0x110>
        __asm volatile
 8002186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800218a:	f383 8811 	msr	BASEPRI, r3
 800218e:	f3bf 8f6f 	isb	sy
 8002192:	f3bf 8f4f 	dsb	sy
 8002196:	60bb      	str	r3, [r7, #8]
    }
 8002198:	bf00      	nop
 800219a:	e7fe      	b.n	800219a <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 800219c:	697b      	ldr	r3, [r7, #20]
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3718      	adds	r7, #24
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	e000ed04 	.word	0xe000ed04

080021ac <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b08a      	sub	sp, #40	; 0x28
 80021b0:	af02      	add	r7, sp, #8
 80021b2:	60f8      	str	r0, [r7, #12]
 80021b4:	60b9      	str	r1, [r7, #8]
 80021b6:	4613      	mov	r3, r2
 80021b8:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 80021ba:	2300      	movs	r3, #0
 80021bc:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d02e      	beq.n	8002222 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80021c4:	2100      	movs	r1, #0
 80021c6:	68ba      	ldr	r2, [r7, #8]
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	fba3 2302 	umull	r2, r3, r3, r2
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d000      	beq.n	80021d4 <xQueueGenericCreate+0x28>
 80021d2:	2101      	movs	r1, #1
 80021d4:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d123      	bne.n	8002222 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	68ba      	ldr	r2, [r7, #8]
 80021de:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80021e2:	f113 0f51 	cmn.w	r3, #81	; 0x51
 80021e6:	d81c      	bhi.n	8002222 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	68ba      	ldr	r2, [r7, #8]
 80021ec:	fb02 f303 	mul.w	r3, r2, r3
 80021f0:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80021f2:	69bb      	ldr	r3, [r7, #24]
 80021f4:	3350      	adds	r3, #80	; 0x50
 80021f6:	4618      	mov	r0, r3
 80021f8:	f001 fe60 	bl	8003ebc <pvPortMalloc>
 80021fc:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d01c      	beq.n	800223e <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002204:	69fb      	ldr	r3, [r7, #28]
 8002206:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	3350      	adds	r3, #80	; 0x50
 800220c:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800220e:	79fa      	ldrb	r2, [r7, #7]
 8002210:	69fb      	ldr	r3, [r7, #28]
 8002212:	9300      	str	r3, [sp, #0]
 8002214:	4613      	mov	r3, r2
 8002216:	697a      	ldr	r2, [r7, #20]
 8002218:	68b9      	ldr	r1, [r7, #8]
 800221a:	68f8      	ldr	r0, [r7, #12]
 800221c:	f000 f814 	bl	8002248 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8002220:	e00d      	b.n	800223e <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d10a      	bne.n	800223e <xQueueGenericCreate+0x92>
        __asm volatile
 8002228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800222c:	f383 8811 	msr	BASEPRI, r3
 8002230:	f3bf 8f6f 	isb	sy
 8002234:	f3bf 8f4f 	dsb	sy
 8002238:	613b      	str	r3, [r7, #16]
    }
 800223a:	bf00      	nop
 800223c:	e7fe      	b.n	800223c <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800223e:	69fb      	ldr	r3, [r7, #28]
    }
 8002240:	4618      	mov	r0, r3
 8002242:	3720      	adds	r7, #32
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}

08002248 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b084      	sub	sp, #16
 800224c:	af00      	add	r7, sp, #0
 800224e:	60f8      	str	r0, [r7, #12]
 8002250:	60b9      	str	r1, [r7, #8]
 8002252:	607a      	str	r2, [r7, #4]
 8002254:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d103      	bne.n	8002264 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800225c:	69bb      	ldr	r3, [r7, #24]
 800225e:	69ba      	ldr	r2, [r7, #24]
 8002260:	601a      	str	r2, [r3, #0]
 8002262:	e002      	b.n	800226a <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002264:	69bb      	ldr	r3, [r7, #24]
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800226a:	69bb      	ldr	r3, [r7, #24]
 800226c:	68fa      	ldr	r2, [r7, #12]
 800226e:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002270:	69bb      	ldr	r3, [r7, #24]
 8002272:	68ba      	ldr	r2, [r7, #8]
 8002274:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002276:	2101      	movs	r1, #1
 8002278:	69b8      	ldr	r0, [r7, #24]
 800227a:	f7ff ff07 	bl	800208c <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 800227e:	69bb      	ldr	r3, [r7, #24]
 8002280:	78fa      	ldrb	r2, [r7, #3]
 8002282:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8002286:	bf00      	nop
 8002288:	3710      	adds	r7, #16
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
	...

08002290 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b08c      	sub	sp, #48	; 0x30
 8002294:	af00      	add	r7, sp, #0
 8002296:	60f8      	str	r0, [r7, #12]
 8002298:	60b9      	str	r1, [r7, #8]
 800229a:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 800229c:	2300      	movs	r3, #0
 800229e:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80022a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d10a      	bne.n	80022c0 <xQueueReceive+0x30>
        __asm volatile
 80022aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022ae:	f383 8811 	msr	BASEPRI, r3
 80022b2:	f3bf 8f6f 	isb	sy
 80022b6:	f3bf 8f4f 	dsb	sy
 80022ba:	623b      	str	r3, [r7, #32]
    }
 80022bc:	bf00      	nop
 80022be:	e7fe      	b.n	80022be <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d103      	bne.n	80022ce <xQueueReceive+0x3e>
 80022c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d101      	bne.n	80022d2 <xQueueReceive+0x42>
 80022ce:	2301      	movs	r3, #1
 80022d0:	e000      	b.n	80022d4 <xQueueReceive+0x44>
 80022d2:	2300      	movs	r3, #0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d10a      	bne.n	80022ee <xQueueReceive+0x5e>
        __asm volatile
 80022d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022dc:	f383 8811 	msr	BASEPRI, r3
 80022e0:	f3bf 8f6f 	isb	sy
 80022e4:	f3bf 8f4f 	dsb	sy
 80022e8:	61fb      	str	r3, [r7, #28]
    }
 80022ea:	bf00      	nop
 80022ec:	e7fe      	b.n	80022ec <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80022ee:	f001 f8b5 	bl	800345c <xTaskGetSchedulerState>
 80022f2:	4603      	mov	r3, r0
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d102      	bne.n	80022fe <xQueueReceive+0x6e>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d101      	bne.n	8002302 <xQueueReceive+0x72>
 80022fe:	2301      	movs	r3, #1
 8002300:	e000      	b.n	8002304 <xQueueReceive+0x74>
 8002302:	2300      	movs	r3, #0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d10a      	bne.n	800231e <xQueueReceive+0x8e>
        __asm volatile
 8002308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800230c:	f383 8811 	msr	BASEPRI, r3
 8002310:	f3bf 8f6f 	isb	sy
 8002314:	f3bf 8f4f 	dsb	sy
 8002318:	61bb      	str	r3, [r7, #24]
    }
 800231a:	bf00      	nop
 800231c:	e7fe      	b.n	800231c <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800231e:	f001 fceb 	bl	8003cf8 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002326:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232a:	2b00      	cmp	r3, #0
 800232c:	d01f      	beq.n	800236e <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800232e:	68b9      	ldr	r1, [r7, #8]
 8002330:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002332:	f000 f88d 	bl	8002450 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002338:	1e5a      	subs	r2, r3, #1
 800233a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800233c:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800233e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002340:	691b      	ldr	r3, [r3, #16]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d00f      	beq.n	8002366 <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002348:	3310      	adds	r3, #16
 800234a:	4618      	mov	r0, r3
 800234c:	f000 fe76 	bl	800303c <xTaskRemoveFromEventList>
 8002350:	4603      	mov	r3, r0
 8002352:	2b00      	cmp	r3, #0
 8002354:	d007      	beq.n	8002366 <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002356:	4b3d      	ldr	r3, [pc, #244]	; (800244c <xQueueReceive+0x1bc>)
 8002358:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800235c:	601a      	str	r2, [r3, #0]
 800235e:	f3bf 8f4f 	dsb	sy
 8002362:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002366:	f001 fcf7 	bl	8003d58 <vPortExitCritical>
                return pdPASS;
 800236a:	2301      	movs	r3, #1
 800236c:	e069      	b.n	8002442 <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d103      	bne.n	800237c <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002374:	f001 fcf0 	bl	8003d58 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8002378:	2300      	movs	r3, #0
 800237a:	e062      	b.n	8002442 <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 800237c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800237e:	2b00      	cmp	r3, #0
 8002380:	d106      	bne.n	8002390 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002382:	f107 0310 	add.w	r3, r7, #16
 8002386:	4618      	mov	r0, r3
 8002388:	f000 ff2e 	bl	80031e8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800238c:	2301      	movs	r3, #1
 800238e:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002390:	f001 fce2 	bl	8003d58 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002394:	f000 fb5c 	bl	8002a50 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002398:	f001 fcae 	bl	8003cf8 <vPortEnterCritical>
 800239c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800239e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80023a2:	b25b      	sxtb	r3, r3
 80023a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023a8:	d103      	bne.n	80023b2 <xQueueReceive+0x122>
 80023aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023ac:	2200      	movs	r2, #0
 80023ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80023b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80023b8:	b25b      	sxtb	r3, r3
 80023ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023be:	d103      	bne.n	80023c8 <xQueueReceive+0x138>
 80023c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023c2:	2200      	movs	r2, #0
 80023c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80023c8:	f001 fcc6 	bl	8003d58 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80023cc:	1d3a      	adds	r2, r7, #4
 80023ce:	f107 0310 	add.w	r3, r7, #16
 80023d2:	4611      	mov	r1, r2
 80023d4:	4618      	mov	r0, r3
 80023d6:	f000 ff1d 	bl	8003214 <xTaskCheckForTimeOut>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d123      	bne.n	8002428 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80023e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80023e2:	f000 f8ad 	bl	8002540 <prvIsQueueEmpty>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d017      	beq.n	800241c <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80023ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023ee:	3324      	adds	r3, #36	; 0x24
 80023f0:	687a      	ldr	r2, [r7, #4]
 80023f2:	4611      	mov	r1, r2
 80023f4:	4618      	mov	r0, r3
 80023f6:	f000 fdb7 	bl	8002f68 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80023fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80023fc:	f000 f84e 	bl	800249c <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002400:	f000 fb34 	bl	8002a6c <xTaskResumeAll>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d189      	bne.n	800231e <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 800240a:	4b10      	ldr	r3, [pc, #64]	; (800244c <xQueueReceive+0x1bc>)
 800240c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002410:	601a      	str	r2, [r3, #0]
 8002412:	f3bf 8f4f 	dsb	sy
 8002416:	f3bf 8f6f 	isb	sy
 800241a:	e780      	b.n	800231e <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800241c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800241e:	f000 f83d 	bl	800249c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002422:	f000 fb23 	bl	8002a6c <xTaskResumeAll>
 8002426:	e77a      	b.n	800231e <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002428:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800242a:	f000 f837 	bl	800249c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800242e:	f000 fb1d 	bl	8002a6c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002432:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002434:	f000 f884 	bl	8002540 <prvIsQueueEmpty>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	f43f af6f 	beq.w	800231e <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8002440:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002442:	4618      	mov	r0, r3
 8002444:	3730      	adds	r7, #48	; 0x30
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	e000ed04 	.word	0xe000ed04

08002450 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245e:	2b00      	cmp	r3, #0
 8002460:	d018      	beq.n	8002494 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	68da      	ldr	r2, [r3, #12]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246a:	441a      	add	r2, r3
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	68da      	ldr	r2, [r3, #12]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	429a      	cmp	r2, r3
 800247a:	d303      	bcc.n	8002484 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	68d9      	ldr	r1, [r3, #12]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248c:	461a      	mov	r2, r3
 800248e:	6838      	ldr	r0, [r7, #0]
 8002490:	f001 ff0c 	bl	80042ac <memcpy>
    }
}
 8002494:	bf00      	nop
 8002496:	3708      	adds	r7, #8
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}

0800249c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b084      	sub	sp, #16
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80024a4:	f001 fc28 	bl	8003cf8 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80024ae:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80024b0:	e011      	b.n	80024d6 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d012      	beq.n	80024e0 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	3324      	adds	r3, #36	; 0x24
 80024be:	4618      	mov	r0, r3
 80024c0:	f000 fdbc 	bl	800303c <xTaskRemoveFromEventList>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d001      	beq.n	80024ce <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 80024ca:	f000 ff09 	bl	80032e0 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80024ce:	7bfb      	ldrb	r3, [r7, #15]
 80024d0:	3b01      	subs	r3, #1
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80024d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	dce9      	bgt.n	80024b2 <prvUnlockQueue+0x16>
 80024de:	e000      	b.n	80024e2 <prvUnlockQueue+0x46>
                    break;
 80024e0:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	22ff      	movs	r2, #255	; 0xff
 80024e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 80024ea:	f001 fc35 	bl	8003d58 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80024ee:	f001 fc03 	bl	8003cf8 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80024f8:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80024fa:	e011      	b.n	8002520 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	691b      	ldr	r3, [r3, #16]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d012      	beq.n	800252a <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	3310      	adds	r3, #16
 8002508:	4618      	mov	r0, r3
 800250a:	f000 fd97 	bl	800303c <xTaskRemoveFromEventList>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d001      	beq.n	8002518 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002514:	f000 fee4 	bl	80032e0 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002518:	7bbb      	ldrb	r3, [r7, #14]
 800251a:	3b01      	subs	r3, #1
 800251c:	b2db      	uxtb	r3, r3
 800251e:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002520:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002524:	2b00      	cmp	r3, #0
 8002526:	dce9      	bgt.n	80024fc <prvUnlockQueue+0x60>
 8002528:	e000      	b.n	800252c <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800252a:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	22ff      	movs	r2, #255	; 0xff
 8002530:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002534:	f001 fc10 	bl	8003d58 <vPortExitCritical>
}
 8002538:	bf00      	nop
 800253a:	3710      	adds	r7, #16
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}

08002540 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b084      	sub	sp, #16
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002548:	f001 fbd6 	bl	8003cf8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002550:	2b00      	cmp	r3, #0
 8002552:	d102      	bne.n	800255a <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002554:	2301      	movs	r3, #1
 8002556:	60fb      	str	r3, [r7, #12]
 8002558:	e001      	b.n	800255e <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800255a:	2300      	movs	r3, #0
 800255c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800255e:	f001 fbfb 	bl	8003d58 <vPortExitCritical>

    return xReturn;
 8002562:	68fb      	ldr	r3, [r7, #12]
}
 8002564:	4618      	mov	r0, r3
 8002566:	3710      	adds	r7, #16
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}

0800256c <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 800256c:	b480      	push	{r7}
 800256e:	b087      	sub	sp, #28
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
 8002574:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8002576:	2300      	movs	r3, #0
 8002578:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d10a      	bne.n	8002596 <vQueueAddToRegistry+0x2a>
        __asm volatile
 8002580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002584:	f383 8811 	msr	BASEPRI, r3
 8002588:	f3bf 8f6f 	isb	sy
 800258c:	f3bf 8f4f 	dsb	sy
 8002590:	60fb      	str	r3, [r7, #12]
    }
 8002592:	bf00      	nop
 8002594:	e7fe      	b.n	8002594 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d024      	beq.n	80025e6 <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800259c:	2300      	movs	r3, #0
 800259e:	617b      	str	r3, [r7, #20]
 80025a0:	e01e      	b.n	80025e0 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 80025a2:	4a18      	ldr	r2, [pc, #96]	; (8002604 <vQueueAddToRegistry+0x98>)
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	00db      	lsls	r3, r3, #3
 80025a8:	4413      	add	r3, r2
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	687a      	ldr	r2, [r7, #4]
 80025ae:	429a      	cmp	r2, r3
 80025b0:	d105      	bne.n	80025be <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	00db      	lsls	r3, r3, #3
 80025b6:	4a13      	ldr	r2, [pc, #76]	; (8002604 <vQueueAddToRegistry+0x98>)
 80025b8:	4413      	add	r3, r2
 80025ba:	613b      	str	r3, [r7, #16]
                    break;
 80025bc:	e013      	b.n	80025e6 <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d10a      	bne.n	80025da <vQueueAddToRegistry+0x6e>
 80025c4:	4a0f      	ldr	r2, [pc, #60]	; (8002604 <vQueueAddToRegistry+0x98>)
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d104      	bne.n	80025da <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	00db      	lsls	r3, r3, #3
 80025d4:	4a0b      	ldr	r2, [pc, #44]	; (8002604 <vQueueAddToRegistry+0x98>)
 80025d6:	4413      	add	r3, r2
 80025d8:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	3301      	adds	r3, #1
 80025de:	617b      	str	r3, [r7, #20]
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	2b07      	cmp	r3, #7
 80025e4:	d9dd      	bls.n	80025a2 <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d005      	beq.n	80025f8 <vQueueAddToRegistry+0x8c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	683a      	ldr	r2, [r7, #0]
 80025f0:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	687a      	ldr	r2, [r7, #4]
 80025f6:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 80025f8:	bf00      	nop
 80025fa:	371c      	adds	r7, #28
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr
 8002604:	20000084 	.word	0x20000084

08002608 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002608:	b580      	push	{r7, lr}
 800260a:	b086      	sub	sp, #24
 800260c:	af00      	add	r7, sp, #0
 800260e:	60f8      	str	r0, [r7, #12]
 8002610:	60b9      	str	r1, [r7, #8]
 8002612:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002618:	f001 fb6e 	bl	8003cf8 <vPortEnterCritical>
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002622:	b25b      	sxtb	r3, r3
 8002624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002628:	d103      	bne.n	8002632 <vQueueWaitForMessageRestricted+0x2a>
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	2200      	movs	r2, #0
 800262e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002638:	b25b      	sxtb	r3, r3
 800263a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800263e:	d103      	bne.n	8002648 <vQueueWaitForMessageRestricted+0x40>
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	2200      	movs	r2, #0
 8002644:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002648:	f001 fb86 	bl	8003d58 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002650:	2b00      	cmp	r3, #0
 8002652:	d106      	bne.n	8002662 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	3324      	adds	r3, #36	; 0x24
 8002658:	687a      	ldr	r2, [r7, #4]
 800265a:	68b9      	ldr	r1, [r7, #8]
 800265c:	4618      	mov	r0, r3
 800265e:	f000 fca7 	bl	8002fb0 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002662:	6978      	ldr	r0, [r7, #20]
 8002664:	f7ff ff1a 	bl	800249c <prvUnlockQueue>
    }
 8002668:	bf00      	nop
 800266a:	3718      	adds	r7, #24
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}

08002670 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002670:	b580      	push	{r7, lr}
 8002672:	b08c      	sub	sp, #48	; 0x30
 8002674:	af04      	add	r7, sp, #16
 8002676:	60f8      	str	r0, [r7, #12]
 8002678:	60b9      	str	r1, [r7, #8]
 800267a:	603b      	str	r3, [r7, #0]
 800267c:	4613      	mov	r3, r2
 800267e:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002680:	88fb      	ldrh	r3, [r7, #6]
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	4618      	mov	r0, r3
 8002686:	f001 fc19 	bl	8003ebc <pvPortMalloc>
 800268a:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d013      	beq.n	80026ba <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002692:	2058      	movs	r0, #88	; 0x58
 8002694:	f001 fc12 	bl	8003ebc <pvPortMalloc>
 8002698:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d008      	beq.n	80026b2 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80026a0:	2258      	movs	r2, #88	; 0x58
 80026a2:	2100      	movs	r1, #0
 80026a4:	69f8      	ldr	r0, [r7, #28]
 80026a6:	f001 fdd5 	bl	8004254 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	697a      	ldr	r2, [r7, #20]
 80026ae:	631a      	str	r2, [r3, #48]	; 0x30
 80026b0:	e005      	b.n	80026be <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80026b2:	6978      	ldr	r0, [r7, #20]
 80026b4:	f001 fcbc 	bl	8004030 <vPortFree>
 80026b8:	e001      	b.n	80026be <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 80026ba:	2300      	movs	r3, #0
 80026bc:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d013      	beq.n	80026ec <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80026c4:	88fa      	ldrh	r2, [r7, #6]
 80026c6:	2300      	movs	r3, #0
 80026c8:	9303      	str	r3, [sp, #12]
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	9302      	str	r3, [sp, #8]
 80026ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026d0:	9301      	str	r3, [sp, #4]
 80026d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026d4:	9300      	str	r3, [sp, #0]
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	68b9      	ldr	r1, [r7, #8]
 80026da:	68f8      	ldr	r0, [r7, #12]
 80026dc:	f000 f80e 	bl	80026fc <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80026e0:	69f8      	ldr	r0, [r7, #28]
 80026e2:	f000 f899 	bl	8002818 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80026e6:	2301      	movs	r3, #1
 80026e8:	61bb      	str	r3, [r7, #24]
 80026ea:	e002      	b.n	80026f2 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80026ec:	f04f 33ff 	mov.w	r3, #4294967295
 80026f0:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80026f2:	69bb      	ldr	r3, [r7, #24]
    }
 80026f4:	4618      	mov	r0, r3
 80026f6:	3720      	adds	r7, #32
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}

080026fc <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b088      	sub	sp, #32
 8002700:	af00      	add	r7, sp, #0
 8002702:	60f8      	str	r0, [r7, #12]
 8002704:	60b9      	str	r1, [r7, #8]
 8002706:	607a      	str	r2, [r7, #4]
 8002708:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800270a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800270c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	009b      	lsls	r3, r3, #2
 8002712:	461a      	mov	r2, r3
 8002714:	21a5      	movs	r1, #165	; 0xa5
 8002716:	f001 fd9d 	bl	8004254 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800271a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800271c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002724:	3b01      	subs	r3, #1
 8002726:	009b      	lsls	r3, r3, #2
 8002728:	4413      	add	r3, r2
 800272a:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800272c:	69bb      	ldr	r3, [r7, #24]
 800272e:	f023 0307 	bic.w	r3, r3, #7
 8002732:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002734:	69bb      	ldr	r3, [r7, #24]
 8002736:	f003 0307 	and.w	r3, r3, #7
 800273a:	2b00      	cmp	r3, #0
 800273c:	d00a      	beq.n	8002754 <prvInitialiseNewTask+0x58>
        __asm volatile
 800273e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002742:	f383 8811 	msr	BASEPRI, r3
 8002746:	f3bf 8f6f 	isb	sy
 800274a:	f3bf 8f4f 	dsb	sy
 800274e:	617b      	str	r3, [r7, #20]
    }
 8002750:	bf00      	nop
 8002752:	e7fe      	b.n	8002752 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d01e      	beq.n	8002798 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800275a:	2300      	movs	r3, #0
 800275c:	61fb      	str	r3, [r7, #28]
 800275e:	e012      	b.n	8002786 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002760:	68ba      	ldr	r2, [r7, #8]
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	4413      	add	r3, r2
 8002766:	7819      	ldrb	r1, [r3, #0]
 8002768:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	4413      	add	r3, r2
 800276e:	3334      	adds	r3, #52	; 0x34
 8002770:	460a      	mov	r2, r1
 8002772:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002774:	68ba      	ldr	r2, [r7, #8]
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	4413      	add	r3, r2
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d006      	beq.n	800278e <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002780:	69fb      	ldr	r3, [r7, #28]
 8002782:	3301      	adds	r3, #1
 8002784:	61fb      	str	r3, [r7, #28]
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	2b09      	cmp	r3, #9
 800278a:	d9e9      	bls.n	8002760 <prvInitialiseNewTask+0x64>
 800278c:	e000      	b.n	8002790 <prvInitialiseNewTask+0x94>
            {
                break;
 800278e:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002792:	2200      	movs	r2, #0
 8002794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8002798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800279a:	2b04      	cmp	r3, #4
 800279c:	d90a      	bls.n	80027b4 <prvInitialiseNewTask+0xb8>
        __asm volatile
 800279e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027a2:	f383 8811 	msr	BASEPRI, r3
 80027a6:	f3bf 8f6f 	isb	sy
 80027aa:	f3bf 8f4f 	dsb	sy
 80027ae:	613b      	str	r3, [r7, #16]
    }
 80027b0:	bf00      	nop
 80027b2:	e7fe      	b.n	80027b2 <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80027b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027b6:	2b04      	cmp	r3, #4
 80027b8:	d901      	bls.n	80027be <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80027ba:	2304      	movs	r3, #4
 80027bc:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80027be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80027c2:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 80027c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80027c8:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80027ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027cc:	3304      	adds	r3, #4
 80027ce:	4618      	mov	r0, r3
 80027d0:	f7ff fbec 	bl	8001fac <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80027d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027d6:	3318      	adds	r3, #24
 80027d8:	4618      	mov	r0, r3
 80027da:	f7ff fbe7 	bl	8001fac <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80027de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027e2:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80027e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027e6:	f1c3 0205 	rsb	r2, r3, #5
 80027ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027ec:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80027ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027f2:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80027f4:	683a      	ldr	r2, [r7, #0]
 80027f6:	68f9      	ldr	r1, [r7, #12]
 80027f8:	69b8      	ldr	r0, [r7, #24]
 80027fa:	f001 f951 	bl	8003aa0 <pxPortInitialiseStack>
 80027fe:	4602      	mov	r2, r0
 8002800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002802:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002806:	2b00      	cmp	r3, #0
 8002808:	d002      	beq.n	8002810 <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800280a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800280c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800280e:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002810:	bf00      	nop
 8002812:	3720      	adds	r7, #32
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}

08002818 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b084      	sub	sp, #16
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002820:	f001 fa6a 	bl	8003cf8 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002824:	4b40      	ldr	r3, [pc, #256]	; (8002928 <prvAddNewTaskToReadyList+0x110>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	3301      	adds	r3, #1
 800282a:	4a3f      	ldr	r2, [pc, #252]	; (8002928 <prvAddNewTaskToReadyList+0x110>)
 800282c:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800282e:	4b3f      	ldr	r3, [pc, #252]	; (800292c <prvAddNewTaskToReadyList+0x114>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d109      	bne.n	800284a <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002836:	4a3d      	ldr	r2, [pc, #244]	; (800292c <prvAddNewTaskToReadyList+0x114>)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800283c:	4b3a      	ldr	r3, [pc, #232]	; (8002928 <prvAddNewTaskToReadyList+0x110>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	2b01      	cmp	r3, #1
 8002842:	d110      	bne.n	8002866 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002844:	f000 fd70 	bl	8003328 <prvInitialiseTaskLists>
 8002848:	e00d      	b.n	8002866 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800284a:	4b39      	ldr	r3, [pc, #228]	; (8002930 <prvAddNewTaskToReadyList+0x118>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d109      	bne.n	8002866 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002852:	4b36      	ldr	r3, [pc, #216]	; (800292c <prvAddNewTaskToReadyList+0x114>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800285c:	429a      	cmp	r2, r3
 800285e:	d802      	bhi.n	8002866 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002860:	4a32      	ldr	r2, [pc, #200]	; (800292c <prvAddNewTaskToReadyList+0x114>)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002866:	4b33      	ldr	r3, [pc, #204]	; (8002934 <prvAddNewTaskToReadyList+0x11c>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	3301      	adds	r3, #1
 800286c:	4a31      	ldr	r2, [pc, #196]	; (8002934 <prvAddNewTaskToReadyList+0x11c>)
 800286e:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002870:	4b30      	ldr	r3, [pc, #192]	; (8002934 <prvAddNewTaskToReadyList+0x11c>)
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800287c:	2201      	movs	r2, #1
 800287e:	409a      	lsls	r2, r3
 8002880:	4b2d      	ldr	r3, [pc, #180]	; (8002938 <prvAddNewTaskToReadyList+0x120>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4313      	orrs	r3, r2
 8002886:	4a2c      	ldr	r2, [pc, #176]	; (8002938 <prvAddNewTaskToReadyList+0x120>)
 8002888:	6013      	str	r3, [r2, #0]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800288e:	492b      	ldr	r1, [pc, #172]	; (800293c <prvAddNewTaskToReadyList+0x124>)
 8002890:	4613      	mov	r3, r2
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	4413      	add	r3, r2
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	440b      	add	r3, r1
 800289a:	3304      	adds	r3, #4
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	60fb      	str	r3, [r7, #12]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	68fa      	ldr	r2, [r7, #12]
 80028a4:	609a      	str	r2, [r3, #8]
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	689a      	ldr	r2, [r3, #8]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	60da      	str	r2, [r3, #12]
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	3204      	adds	r2, #4
 80028b6:	605a      	str	r2, [r3, #4]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	1d1a      	adds	r2, r3, #4
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	609a      	str	r2, [r3, #8]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028c4:	4613      	mov	r3, r2
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	4413      	add	r3, r2
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	4a1b      	ldr	r2, [pc, #108]	; (800293c <prvAddNewTaskToReadyList+0x124>)
 80028ce:	441a      	add	r2, r3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	615a      	str	r2, [r3, #20]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028d8:	4918      	ldr	r1, [pc, #96]	; (800293c <prvAddNewTaskToReadyList+0x124>)
 80028da:	4613      	mov	r3, r2
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	4413      	add	r3, r2
 80028e0:	009b      	lsls	r3, r3, #2
 80028e2:	440b      	add	r3, r1
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	1c59      	adds	r1, r3, #1
 80028e8:	4814      	ldr	r0, [pc, #80]	; (800293c <prvAddNewTaskToReadyList+0x124>)
 80028ea:	4613      	mov	r3, r2
 80028ec:	009b      	lsls	r3, r3, #2
 80028ee:	4413      	add	r3, r2
 80028f0:	009b      	lsls	r3, r3, #2
 80028f2:	4403      	add	r3, r0
 80028f4:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80028f6:	f001 fa2f 	bl	8003d58 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80028fa:	4b0d      	ldr	r3, [pc, #52]	; (8002930 <prvAddNewTaskToReadyList+0x118>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d00e      	beq.n	8002920 <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002902:	4b0a      	ldr	r3, [pc, #40]	; (800292c <prvAddNewTaskToReadyList+0x114>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800290c:	429a      	cmp	r2, r3
 800290e:	d207      	bcs.n	8002920 <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002910:	4b0b      	ldr	r3, [pc, #44]	; (8002940 <prvAddNewTaskToReadyList+0x128>)
 8002912:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002916:	601a      	str	r2, [r3, #0]
 8002918:	f3bf 8f4f 	dsb	sy
 800291c:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002920:	bf00      	nop
 8002922:	3710      	adds	r7, #16
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}
 8002928:	2000019c 	.word	0x2000019c
 800292c:	200000c4 	.word	0x200000c4
 8002930:	200001a8 	.word	0x200001a8
 8002934:	200001b8 	.word	0x200001b8
 8002938:	200001a4 	.word	0x200001a4
 800293c:	200000c8 	.word	0x200000c8
 8002940:	e000ed04 	.word	0xe000ed04

08002944 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8002944:	b580      	push	{r7, lr}
 8002946:	b084      	sub	sp, #16
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 800294c:	2300      	movs	r3, #0
 800294e:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d017      	beq.n	8002986 <vTaskDelay+0x42>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8002956:	4b13      	ldr	r3, [pc, #76]	; (80029a4 <vTaskDelay+0x60>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d00a      	beq.n	8002974 <vTaskDelay+0x30>
        __asm volatile
 800295e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002962:	f383 8811 	msr	BASEPRI, r3
 8002966:	f3bf 8f6f 	isb	sy
 800296a:	f3bf 8f4f 	dsb	sy
 800296e:	60bb      	str	r3, [r7, #8]
    }
 8002970:	bf00      	nop
 8002972:	e7fe      	b.n	8002972 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8002974:	f000 f86c 	bl	8002a50 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002978:	2100      	movs	r1, #0
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	f000 fd8c 	bl	8003498 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8002980:	f000 f874 	bl	8002a6c <xTaskResumeAll>
 8002984:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d107      	bne.n	800299c <vTaskDelay+0x58>
        {
            portYIELD_WITHIN_API();
 800298c:	4b06      	ldr	r3, [pc, #24]	; (80029a8 <vTaskDelay+0x64>)
 800298e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002992:	601a      	str	r2, [r3, #0]
 8002994:	f3bf 8f4f 	dsb	sy
 8002998:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800299c:	bf00      	nop
 800299e:	3710      	adds	r7, #16
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	200001c4 	.word	0x200001c4
 80029a8:	e000ed04 	.word	0xe000ed04

080029ac <vTaskStartScheduler>:
         * configMINIMAL_STACK_SIZE is specified in words, not bytes. */
        *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
    }

void vTaskStartScheduler( void )
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b086      	sub	sp, #24
 80029b0:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 80029b2:	4b20      	ldr	r3, [pc, #128]	; (8002a34 <vTaskStartScheduler+0x88>)
 80029b4:	9301      	str	r3, [sp, #4]
 80029b6:	2300      	movs	r3, #0
 80029b8:	9300      	str	r3, [sp, #0]
 80029ba:	2300      	movs	r3, #0
 80029bc:	2282      	movs	r2, #130	; 0x82
 80029be:	491e      	ldr	r1, [pc, #120]	; (8002a38 <vTaskStartScheduler+0x8c>)
 80029c0:	481e      	ldr	r0, [pc, #120]	; (8002a3c <vTaskStartScheduler+0x90>)
 80029c2:	f7ff fe55 	bl	8002670 <xTaskCreate>
 80029c6:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d102      	bne.n	80029d4 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 80029ce:	f000 fde3 	bl	8003598 <xTimerCreateTimerTask>
 80029d2:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d116      	bne.n	8002a08 <vTaskStartScheduler+0x5c>
        __asm volatile
 80029da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029de:	f383 8811 	msr	BASEPRI, r3
 80029e2:	f3bf 8f6f 	isb	sy
 80029e6:	f3bf 8f4f 	dsb	sy
 80029ea:	60bb      	str	r3, [r7, #8]
    }
 80029ec:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 80029ee:	4b14      	ldr	r3, [pc, #80]	; (8002a40 <vTaskStartScheduler+0x94>)
 80029f0:	f04f 32ff 	mov.w	r2, #4294967295
 80029f4:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80029f6:	4b13      	ldr	r3, [pc, #76]	; (8002a44 <vTaskStartScheduler+0x98>)
 80029f8:	2201      	movs	r2, #1
 80029fa:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80029fc:	4b12      	ldr	r3, [pc, #72]	; (8002a48 <vTaskStartScheduler+0x9c>)
 80029fe:	2200      	movs	r2, #0
 8002a00:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8002a02:	f001 f8d7 	bl	8003bb4 <xPortStartScheduler>
 8002a06:	e00e      	b.n	8002a26 <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a0e:	d10a      	bne.n	8002a26 <vTaskStartScheduler+0x7a>
        __asm volatile
 8002a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a14:	f383 8811 	msr	BASEPRI, r3
 8002a18:	f3bf 8f6f 	isb	sy
 8002a1c:	f3bf 8f4f 	dsb	sy
 8002a20:	607b      	str	r3, [r7, #4]
    }
 8002a22:	bf00      	nop
 8002a24:	e7fe      	b.n	8002a24 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002a26:	4b09      	ldr	r3, [pc, #36]	; (8002a4c <vTaskStartScheduler+0xa0>)
 8002a28:	681b      	ldr	r3, [r3, #0]
}
 8002a2a:	bf00      	nop
 8002a2c:	3710      	adds	r7, #16
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	200001c0 	.word	0x200001c0
 8002a38:	080042e8 	.word	0x080042e8
 8002a3c:	080032f9 	.word	0x080032f9
 8002a40:	200001bc 	.word	0x200001bc
 8002a44:	200001a8 	.word	0x200001a8
 8002a48:	200001a0 	.word	0x200001a0
 8002a4c:	2000000c 	.word	0x2000000c

08002a50 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002a50:	b480      	push	{r7}
 8002a52:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002a54:	4b04      	ldr	r3, [pc, #16]	; (8002a68 <vTaskSuspendAll+0x18>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	3301      	adds	r3, #1
 8002a5a:	4a03      	ldr	r2, [pc, #12]	; (8002a68 <vTaskSuspendAll+0x18>)
 8002a5c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002a5e:	bf00      	nop
 8002a60:	46bd      	mov	sp, r7
 8002a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a66:	4770      	bx	lr
 8002a68:	200001c4 	.word	0x200001c4

08002a6c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b088      	sub	sp, #32
 8002a70:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002a72:	2300      	movs	r3, #0
 8002a74:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002a76:	2300      	movs	r3, #0
 8002a78:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002a7a:	4b71      	ldr	r3, [pc, #452]	; (8002c40 <xTaskResumeAll+0x1d4>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d10a      	bne.n	8002a98 <xTaskResumeAll+0x2c>
        __asm volatile
 8002a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a86:	f383 8811 	msr	BASEPRI, r3
 8002a8a:	f3bf 8f6f 	isb	sy
 8002a8e:	f3bf 8f4f 	dsb	sy
 8002a92:	607b      	str	r3, [r7, #4]
    }
 8002a94:	bf00      	nop
 8002a96:	e7fe      	b.n	8002a96 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002a98:	f001 f92e 	bl	8003cf8 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002a9c:	4b68      	ldr	r3, [pc, #416]	; (8002c40 <xTaskResumeAll+0x1d4>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	3b01      	subs	r3, #1
 8002aa2:	4a67      	ldr	r2, [pc, #412]	; (8002c40 <xTaskResumeAll+0x1d4>)
 8002aa4:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002aa6:	4b66      	ldr	r3, [pc, #408]	; (8002c40 <xTaskResumeAll+0x1d4>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	f040 80c0 	bne.w	8002c30 <xTaskResumeAll+0x1c4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002ab0:	4b64      	ldr	r3, [pc, #400]	; (8002c44 <xTaskResumeAll+0x1d8>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	f000 80bb 	beq.w	8002c30 <xTaskResumeAll+0x1c4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002aba:	e08a      	b.n	8002bd2 <xTaskResumeAll+0x166>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002abc:	4b62      	ldr	r3, [pc, #392]	; (8002c48 <xTaskResumeAll+0x1dc>)
 8002abe:	68db      	ldr	r3, [r3, #12]
 8002ac0:	68db      	ldr	r3, [r3, #12]
 8002ac2:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002ac4:	69fb      	ldr	r3, [r7, #28]
 8002ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ac8:	613b      	str	r3, [r7, #16]
 8002aca:	69fb      	ldr	r3, [r7, #28]
 8002acc:	69db      	ldr	r3, [r3, #28]
 8002ace:	69fa      	ldr	r2, [r7, #28]
 8002ad0:	6a12      	ldr	r2, [r2, #32]
 8002ad2:	609a      	str	r2, [r3, #8]
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	6a1b      	ldr	r3, [r3, #32]
 8002ad8:	69fa      	ldr	r2, [r7, #28]
 8002ada:	69d2      	ldr	r2, [r2, #28]
 8002adc:	605a      	str	r2, [r3, #4]
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	685a      	ldr	r2, [r3, #4]
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	3318      	adds	r3, #24
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d103      	bne.n	8002af2 <xTaskResumeAll+0x86>
 8002aea:	69fb      	ldr	r3, [r7, #28]
 8002aec:	6a1a      	ldr	r2, [r3, #32]
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	605a      	str	r2, [r3, #4]
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	2200      	movs	r2, #0
 8002af6:	629a      	str	r2, [r3, #40]	; 0x28
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	1e5a      	subs	r2, r3, #1
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002b02:	69fb      	ldr	r3, [r7, #28]
 8002b04:	695b      	ldr	r3, [r3, #20]
 8002b06:	60fb      	str	r3, [r7, #12]
 8002b08:	69fb      	ldr	r3, [r7, #28]
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	69fa      	ldr	r2, [r7, #28]
 8002b0e:	68d2      	ldr	r2, [r2, #12]
 8002b10:	609a      	str	r2, [r3, #8]
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	68db      	ldr	r3, [r3, #12]
 8002b16:	69fa      	ldr	r2, [r7, #28]
 8002b18:	6892      	ldr	r2, [r2, #8]
 8002b1a:	605a      	str	r2, [r3, #4]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	685a      	ldr	r2, [r3, #4]
 8002b20:	69fb      	ldr	r3, [r7, #28]
 8002b22:	3304      	adds	r3, #4
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d103      	bne.n	8002b30 <xTaskResumeAll+0xc4>
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	68da      	ldr	r2, [r3, #12]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	605a      	str	r2, [r3, #4]
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	2200      	movs	r2, #0
 8002b34:	615a      	str	r2, [r3, #20]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	1e5a      	subs	r2, r3, #1
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8002b40:	69fb      	ldr	r3, [r7, #28]
 8002b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b44:	2201      	movs	r2, #1
 8002b46:	409a      	lsls	r2, r3
 8002b48:	4b40      	ldr	r3, [pc, #256]	; (8002c4c <xTaskResumeAll+0x1e0>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	4a3f      	ldr	r2, [pc, #252]	; (8002c4c <xTaskResumeAll+0x1e0>)
 8002b50:	6013      	str	r3, [r2, #0]
 8002b52:	69fb      	ldr	r3, [r7, #28]
 8002b54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b56:	493e      	ldr	r1, [pc, #248]	; (8002c50 <xTaskResumeAll+0x1e4>)
 8002b58:	4613      	mov	r3, r2
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	4413      	add	r3, r2
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	440b      	add	r3, r1
 8002b62:	3304      	adds	r3, #4
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	60bb      	str	r3, [r7, #8]
 8002b68:	69fb      	ldr	r3, [r7, #28]
 8002b6a:	68ba      	ldr	r2, [r7, #8]
 8002b6c:	609a      	str	r2, [r3, #8]
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	689a      	ldr	r2, [r3, #8]
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	60da      	str	r2, [r3, #12]
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	69fa      	ldr	r2, [r7, #28]
 8002b7c:	3204      	adds	r2, #4
 8002b7e:	605a      	str	r2, [r3, #4]
 8002b80:	69fb      	ldr	r3, [r7, #28]
 8002b82:	1d1a      	adds	r2, r3, #4
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	609a      	str	r2, [r3, #8]
 8002b88:	69fb      	ldr	r3, [r7, #28]
 8002b8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b8c:	4613      	mov	r3, r2
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	4413      	add	r3, r2
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	4a2e      	ldr	r2, [pc, #184]	; (8002c50 <xTaskResumeAll+0x1e4>)
 8002b96:	441a      	add	r2, r3
 8002b98:	69fb      	ldr	r3, [r7, #28]
 8002b9a:	615a      	str	r2, [r3, #20]
 8002b9c:	69fb      	ldr	r3, [r7, #28]
 8002b9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ba0:	492b      	ldr	r1, [pc, #172]	; (8002c50 <xTaskResumeAll+0x1e4>)
 8002ba2:	4613      	mov	r3, r2
 8002ba4:	009b      	lsls	r3, r3, #2
 8002ba6:	4413      	add	r3, r2
 8002ba8:	009b      	lsls	r3, r3, #2
 8002baa:	440b      	add	r3, r1
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	1c59      	adds	r1, r3, #1
 8002bb0:	4827      	ldr	r0, [pc, #156]	; (8002c50 <xTaskResumeAll+0x1e4>)
 8002bb2:	4613      	mov	r3, r2
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	4413      	add	r3, r2
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	4403      	add	r3, r0
 8002bbc:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bc2:	4b24      	ldr	r3, [pc, #144]	; (8002c54 <xTaskResumeAll+0x1e8>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d302      	bcc.n	8002bd2 <xTaskResumeAll+0x166>
                    {
                        xYieldPending = pdTRUE;
 8002bcc:	4b22      	ldr	r3, [pc, #136]	; (8002c58 <xTaskResumeAll+0x1ec>)
 8002bce:	2201      	movs	r2, #1
 8002bd0:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002bd2:	4b1d      	ldr	r3, [pc, #116]	; (8002c48 <xTaskResumeAll+0x1dc>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	f47f af70 	bne.w	8002abc <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002bdc:	69fb      	ldr	r3, [r7, #28]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d001      	beq.n	8002be6 <xTaskResumeAll+0x17a>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002be2:	f000 fc1f 	bl	8003424 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002be6:	4b1d      	ldr	r3, [pc, #116]	; (8002c5c <xTaskResumeAll+0x1f0>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d010      	beq.n	8002c14 <xTaskResumeAll+0x1a8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002bf2:	f000 f847 	bl	8002c84 <xTaskIncrementTick>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d002      	beq.n	8002c02 <xTaskResumeAll+0x196>
                            {
                                xYieldPending = pdTRUE;
 8002bfc:	4b16      	ldr	r3, [pc, #88]	; (8002c58 <xTaskResumeAll+0x1ec>)
 8002bfe:	2201      	movs	r2, #1
 8002c00:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	3b01      	subs	r3, #1
 8002c06:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d1f1      	bne.n	8002bf2 <xTaskResumeAll+0x186>

                        xPendedTicks = 0;
 8002c0e:	4b13      	ldr	r3, [pc, #76]	; (8002c5c <xTaskResumeAll+0x1f0>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002c14:	4b10      	ldr	r3, [pc, #64]	; (8002c58 <xTaskResumeAll+0x1ec>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d009      	beq.n	8002c30 <xTaskResumeAll+0x1c4>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002c20:	4b0f      	ldr	r3, [pc, #60]	; (8002c60 <xTaskResumeAll+0x1f4>)
 8002c22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c26:	601a      	str	r2, [r3, #0]
 8002c28:	f3bf 8f4f 	dsb	sy
 8002c2c:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002c30:	f001 f892 	bl	8003d58 <vPortExitCritical>

    return xAlreadyYielded;
 8002c34:	69bb      	ldr	r3, [r7, #24]
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3720      	adds	r7, #32
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	200001c4 	.word	0x200001c4
 8002c44:	2000019c 	.word	0x2000019c
 8002c48:	2000015c 	.word	0x2000015c
 8002c4c:	200001a4 	.word	0x200001a4
 8002c50:	200000c8 	.word	0x200000c8
 8002c54:	200000c4 	.word	0x200000c4
 8002c58:	200001b0 	.word	0x200001b0
 8002c5c:	200001ac 	.word	0x200001ac
 8002c60:	e000ed04 	.word	0xe000ed04

08002c64 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002c64:	b480      	push	{r7}
 8002c66:	b083      	sub	sp, #12
 8002c68:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8002c6a:	4b05      	ldr	r3, [pc, #20]	; (8002c80 <xTaskGetTickCount+0x1c>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8002c70:	687b      	ldr	r3, [r7, #4]
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	370c      	adds	r7, #12
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr
 8002c7e:	bf00      	nop
 8002c80:	200001a0 	.word	0x200001a0

08002c84 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b08a      	sub	sp, #40	; 0x28
 8002c88:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002c8e:	4b7d      	ldr	r3, [pc, #500]	; (8002e84 <xTaskIncrementTick+0x200>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	f040 80ec 	bne.w	8002e70 <xTaskIncrementTick+0x1ec>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002c98:	4b7b      	ldr	r3, [pc, #492]	; (8002e88 <xTaskIncrementTick+0x204>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	3301      	adds	r3, #1
 8002c9e:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002ca0:	4a79      	ldr	r2, [pc, #484]	; (8002e88 <xTaskIncrementTick+0x204>)
 8002ca2:	6a3b      	ldr	r3, [r7, #32]
 8002ca4:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002ca6:	6a3b      	ldr	r3, [r7, #32]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d120      	bne.n	8002cee <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8002cac:	4b77      	ldr	r3, [pc, #476]	; (8002e8c <xTaskIncrementTick+0x208>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d00a      	beq.n	8002ccc <xTaskIncrementTick+0x48>
        __asm volatile
 8002cb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cba:	f383 8811 	msr	BASEPRI, r3
 8002cbe:	f3bf 8f6f 	isb	sy
 8002cc2:	f3bf 8f4f 	dsb	sy
 8002cc6:	607b      	str	r3, [r7, #4]
    }
 8002cc8:	bf00      	nop
 8002cca:	e7fe      	b.n	8002cca <xTaskIncrementTick+0x46>
 8002ccc:	4b6f      	ldr	r3, [pc, #444]	; (8002e8c <xTaskIncrementTick+0x208>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	61fb      	str	r3, [r7, #28]
 8002cd2:	4b6f      	ldr	r3, [pc, #444]	; (8002e90 <xTaskIncrementTick+0x20c>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a6d      	ldr	r2, [pc, #436]	; (8002e8c <xTaskIncrementTick+0x208>)
 8002cd8:	6013      	str	r3, [r2, #0]
 8002cda:	4a6d      	ldr	r2, [pc, #436]	; (8002e90 <xTaskIncrementTick+0x20c>)
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	6013      	str	r3, [r2, #0]
 8002ce0:	4b6c      	ldr	r3, [pc, #432]	; (8002e94 <xTaskIncrementTick+0x210>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	3301      	adds	r3, #1
 8002ce6:	4a6b      	ldr	r2, [pc, #428]	; (8002e94 <xTaskIncrementTick+0x210>)
 8002ce8:	6013      	str	r3, [r2, #0]
 8002cea:	f000 fb9b 	bl	8003424 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002cee:	4b6a      	ldr	r3, [pc, #424]	; (8002e98 <xTaskIncrementTick+0x214>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	6a3a      	ldr	r2, [r7, #32]
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	f0c0 80a6 	bcc.w	8002e46 <xTaskIncrementTick+0x1c2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002cfa:	4b64      	ldr	r3, [pc, #400]	; (8002e8c <xTaskIncrementTick+0x208>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d104      	bne.n	8002d0e <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d04:	4b64      	ldr	r3, [pc, #400]	; (8002e98 <xTaskIncrementTick+0x214>)
 8002d06:	f04f 32ff 	mov.w	r2, #4294967295
 8002d0a:	601a      	str	r2, [r3, #0]
                    break;
 8002d0c:	e09b      	b.n	8002e46 <xTaskIncrementTick+0x1c2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002d0e:	4b5f      	ldr	r3, [pc, #380]	; (8002e8c <xTaskIncrementTick+0x208>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	68db      	ldr	r3, [r3, #12]
 8002d16:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002d18:	69bb      	ldr	r3, [r7, #24]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8002d1e:	6a3a      	ldr	r2, [r7, #32]
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d203      	bcs.n	8002d2e <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002d26:	4a5c      	ldr	r2, [pc, #368]	; (8002e98 <xTaskIncrementTick+0x214>)
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8002d2c:	e08b      	b.n	8002e46 <xTaskIncrementTick+0x1c2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002d2e:	69bb      	ldr	r3, [r7, #24]
 8002d30:	695b      	ldr	r3, [r3, #20]
 8002d32:	613b      	str	r3, [r7, #16]
 8002d34:	69bb      	ldr	r3, [r7, #24]
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	69ba      	ldr	r2, [r7, #24]
 8002d3a:	68d2      	ldr	r2, [r2, #12]
 8002d3c:	609a      	str	r2, [r3, #8]
 8002d3e:	69bb      	ldr	r3, [r7, #24]
 8002d40:	68db      	ldr	r3, [r3, #12]
 8002d42:	69ba      	ldr	r2, [r7, #24]
 8002d44:	6892      	ldr	r2, [r2, #8]
 8002d46:	605a      	str	r2, [r3, #4]
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	685a      	ldr	r2, [r3, #4]
 8002d4c:	69bb      	ldr	r3, [r7, #24]
 8002d4e:	3304      	adds	r3, #4
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d103      	bne.n	8002d5c <xTaskIncrementTick+0xd8>
 8002d54:	69bb      	ldr	r3, [r7, #24]
 8002d56:	68da      	ldr	r2, [r3, #12]
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	605a      	str	r2, [r3, #4]
 8002d5c:	69bb      	ldr	r3, [r7, #24]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	615a      	str	r2, [r3, #20]
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	1e5a      	subs	r2, r3, #1
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002d6c:	69bb      	ldr	r3, [r7, #24]
 8002d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d01e      	beq.n	8002db2 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002d74:	69bb      	ldr	r3, [r7, #24]
 8002d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d78:	60fb      	str	r3, [r7, #12]
 8002d7a:	69bb      	ldr	r3, [r7, #24]
 8002d7c:	69db      	ldr	r3, [r3, #28]
 8002d7e:	69ba      	ldr	r2, [r7, #24]
 8002d80:	6a12      	ldr	r2, [r2, #32]
 8002d82:	609a      	str	r2, [r3, #8]
 8002d84:	69bb      	ldr	r3, [r7, #24]
 8002d86:	6a1b      	ldr	r3, [r3, #32]
 8002d88:	69ba      	ldr	r2, [r7, #24]
 8002d8a:	69d2      	ldr	r2, [r2, #28]
 8002d8c:	605a      	str	r2, [r3, #4]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	685a      	ldr	r2, [r3, #4]
 8002d92:	69bb      	ldr	r3, [r7, #24]
 8002d94:	3318      	adds	r3, #24
 8002d96:	429a      	cmp	r2, r3
 8002d98:	d103      	bne.n	8002da2 <xTaskIncrementTick+0x11e>
 8002d9a:	69bb      	ldr	r3, [r7, #24]
 8002d9c:	6a1a      	ldr	r2, [r3, #32]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	605a      	str	r2, [r3, #4]
 8002da2:	69bb      	ldr	r3, [r7, #24]
 8002da4:	2200      	movs	r2, #0
 8002da6:	629a      	str	r2, [r3, #40]	; 0x28
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	1e5a      	subs	r2, r3, #1
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002db2:	69bb      	ldr	r3, [r7, #24]
 8002db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002db6:	2201      	movs	r2, #1
 8002db8:	409a      	lsls	r2, r3
 8002dba:	4b38      	ldr	r3, [pc, #224]	; (8002e9c <xTaskIncrementTick+0x218>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	4a36      	ldr	r2, [pc, #216]	; (8002e9c <xTaskIncrementTick+0x218>)
 8002dc2:	6013      	str	r3, [r2, #0]
 8002dc4:	69bb      	ldr	r3, [r7, #24]
 8002dc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dc8:	4935      	ldr	r1, [pc, #212]	; (8002ea0 <xTaskIncrementTick+0x21c>)
 8002dca:	4613      	mov	r3, r2
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	4413      	add	r3, r2
 8002dd0:	009b      	lsls	r3, r3, #2
 8002dd2:	440b      	add	r3, r1
 8002dd4:	3304      	adds	r3, #4
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	60bb      	str	r3, [r7, #8]
 8002dda:	69bb      	ldr	r3, [r7, #24]
 8002ddc:	68ba      	ldr	r2, [r7, #8]
 8002dde:	609a      	str	r2, [r3, #8]
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	689a      	ldr	r2, [r3, #8]
 8002de4:	69bb      	ldr	r3, [r7, #24]
 8002de6:	60da      	str	r2, [r3, #12]
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	69ba      	ldr	r2, [r7, #24]
 8002dee:	3204      	adds	r2, #4
 8002df0:	605a      	str	r2, [r3, #4]
 8002df2:	69bb      	ldr	r3, [r7, #24]
 8002df4:	1d1a      	adds	r2, r3, #4
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	609a      	str	r2, [r3, #8]
 8002dfa:	69bb      	ldr	r3, [r7, #24]
 8002dfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dfe:	4613      	mov	r3, r2
 8002e00:	009b      	lsls	r3, r3, #2
 8002e02:	4413      	add	r3, r2
 8002e04:	009b      	lsls	r3, r3, #2
 8002e06:	4a26      	ldr	r2, [pc, #152]	; (8002ea0 <xTaskIncrementTick+0x21c>)
 8002e08:	441a      	add	r2, r3
 8002e0a:	69bb      	ldr	r3, [r7, #24]
 8002e0c:	615a      	str	r2, [r3, #20]
 8002e0e:	69bb      	ldr	r3, [r7, #24]
 8002e10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e12:	4923      	ldr	r1, [pc, #140]	; (8002ea0 <xTaskIncrementTick+0x21c>)
 8002e14:	4613      	mov	r3, r2
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	4413      	add	r3, r2
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	440b      	add	r3, r1
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	1c59      	adds	r1, r3, #1
 8002e22:	481f      	ldr	r0, [pc, #124]	; (8002ea0 <xTaskIncrementTick+0x21c>)
 8002e24:	4613      	mov	r3, r2
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	4413      	add	r3, r2
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	4403      	add	r3, r0
 8002e2e:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002e30:	69bb      	ldr	r3, [r7, #24]
 8002e32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e34:	4b1b      	ldr	r3, [pc, #108]	; (8002ea4 <xTaskIncrementTick+0x220>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	f67f af5d 	bls.w	8002cfa <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 8002e40:	2301      	movs	r3, #1
 8002e42:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002e44:	e759      	b.n	8002cfa <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002e46:	4b17      	ldr	r3, [pc, #92]	; (8002ea4 <xTaskIncrementTick+0x220>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e4c:	4914      	ldr	r1, [pc, #80]	; (8002ea0 <xTaskIncrementTick+0x21c>)
 8002e4e:	4613      	mov	r3, r2
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	4413      	add	r3, r2
 8002e54:	009b      	lsls	r3, r3, #2
 8002e56:	440b      	add	r3, r1
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d901      	bls.n	8002e62 <xTaskIncrementTick+0x1de>
            {
                xSwitchRequired = pdTRUE;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8002e62:	4b11      	ldr	r3, [pc, #68]	; (8002ea8 <xTaskIncrementTick+0x224>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d007      	beq.n	8002e7a <xTaskIncrementTick+0x1f6>
            {
                xSwitchRequired = pdTRUE;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	627b      	str	r3, [r7, #36]	; 0x24
 8002e6e:	e004      	b.n	8002e7a <xTaskIncrementTick+0x1f6>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002e70:	4b0e      	ldr	r3, [pc, #56]	; (8002eac <xTaskIncrementTick+0x228>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	3301      	adds	r3, #1
 8002e76:	4a0d      	ldr	r2, [pc, #52]	; (8002eac <xTaskIncrementTick+0x228>)
 8002e78:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8002e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3728      	adds	r7, #40	; 0x28
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}
 8002e84:	200001c4 	.word	0x200001c4
 8002e88:	200001a0 	.word	0x200001a0
 8002e8c:	20000154 	.word	0x20000154
 8002e90:	20000158 	.word	0x20000158
 8002e94:	200001b4 	.word	0x200001b4
 8002e98:	200001bc 	.word	0x200001bc
 8002e9c:	200001a4 	.word	0x200001a4
 8002ea0:	200000c8 	.word	0x200000c8
 8002ea4:	200000c4 	.word	0x200000c4
 8002ea8:	200001b0 	.word	0x200001b0
 8002eac:	200001ac 	.word	0x200001ac

08002eb0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b087      	sub	sp, #28
 8002eb4:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002eb6:	4b27      	ldr	r3, [pc, #156]	; (8002f54 <vTaskSwitchContext+0xa4>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d003      	beq.n	8002ec6 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002ebe:	4b26      	ldr	r3, [pc, #152]	; (8002f58 <vTaskSwitchContext+0xa8>)
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8002ec4:	e03f      	b.n	8002f46 <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8002ec6:	4b24      	ldr	r3, [pc, #144]	; (8002f58 <vTaskSwitchContext+0xa8>)
 8002ec8:	2200      	movs	r2, #0
 8002eca:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002ecc:	4b23      	ldr	r3, [pc, #140]	; (8002f5c <vTaskSwitchContext+0xac>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	fab3 f383 	clz	r3, r3
 8002ed8:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002eda:	7afb      	ldrb	r3, [r7, #11]
 8002edc:	f1c3 031f 	rsb	r3, r3, #31
 8002ee0:	617b      	str	r3, [r7, #20]
 8002ee2:	491f      	ldr	r1, [pc, #124]	; (8002f60 <vTaskSwitchContext+0xb0>)
 8002ee4:	697a      	ldr	r2, [r7, #20]
 8002ee6:	4613      	mov	r3, r2
 8002ee8:	009b      	lsls	r3, r3, #2
 8002eea:	4413      	add	r3, r2
 8002eec:	009b      	lsls	r3, r3, #2
 8002eee:	440b      	add	r3, r1
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d10a      	bne.n	8002f0c <vTaskSwitchContext+0x5c>
        __asm volatile
 8002ef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002efa:	f383 8811 	msr	BASEPRI, r3
 8002efe:	f3bf 8f6f 	isb	sy
 8002f02:	f3bf 8f4f 	dsb	sy
 8002f06:	607b      	str	r3, [r7, #4]
    }
 8002f08:	bf00      	nop
 8002f0a:	e7fe      	b.n	8002f0a <vTaskSwitchContext+0x5a>
 8002f0c:	697a      	ldr	r2, [r7, #20]
 8002f0e:	4613      	mov	r3, r2
 8002f10:	009b      	lsls	r3, r3, #2
 8002f12:	4413      	add	r3, r2
 8002f14:	009b      	lsls	r3, r3, #2
 8002f16:	4a12      	ldr	r2, [pc, #72]	; (8002f60 <vTaskSwitchContext+0xb0>)
 8002f18:	4413      	add	r3, r2
 8002f1a:	613b      	str	r3, [r7, #16]
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	685a      	ldr	r2, [r3, #4]
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	605a      	str	r2, [r3, #4]
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	685a      	ldr	r2, [r3, #4]
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	3308      	adds	r3, #8
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	d104      	bne.n	8002f3c <vTaskSwitchContext+0x8c>
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	685a      	ldr	r2, [r3, #4]
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	605a      	str	r2, [r3, #4]
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	68db      	ldr	r3, [r3, #12]
 8002f42:	4a08      	ldr	r2, [pc, #32]	; (8002f64 <vTaskSwitchContext+0xb4>)
 8002f44:	6013      	str	r3, [r2, #0]
}
 8002f46:	bf00      	nop
 8002f48:	371c      	adds	r7, #28
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr
 8002f52:	bf00      	nop
 8002f54:	200001c4 	.word	0x200001c4
 8002f58:	200001b0 	.word	0x200001b0
 8002f5c:	200001a4 	.word	0x200001a4
 8002f60:	200000c8 	.word	0x200000c8
 8002f64:	200000c4 	.word	0x200000c4

08002f68 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b084      	sub	sp, #16
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
 8002f70:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d10a      	bne.n	8002f8e <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8002f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f7c:	f383 8811 	msr	BASEPRI, r3
 8002f80:	f3bf 8f6f 	isb	sy
 8002f84:	f3bf 8f4f 	dsb	sy
 8002f88:	60fb      	str	r3, [r7, #12]
    }
 8002f8a:	bf00      	nop
 8002f8c:	e7fe      	b.n	8002f8c <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002f8e:	4b07      	ldr	r3, [pc, #28]	; (8002fac <vTaskPlaceOnEventList+0x44>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	3318      	adds	r3, #24
 8002f94:	4619      	mov	r1, r3
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f7ff f815 	bl	8001fc6 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002f9c:	2101      	movs	r1, #1
 8002f9e:	6838      	ldr	r0, [r7, #0]
 8002fa0:	f000 fa7a 	bl	8003498 <prvAddCurrentTaskToDelayedList>
}
 8002fa4:	bf00      	nop
 8002fa6:	3710      	adds	r7, #16
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}
 8002fac:	200000c4 	.word	0x200000c4

08002fb0 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b086      	sub	sp, #24
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	60f8      	str	r0, [r7, #12]
 8002fb8:	60b9      	str	r1, [r7, #8]
 8002fba:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d10a      	bne.n	8002fd8 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8002fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fc6:	f383 8811 	msr	BASEPRI, r3
 8002fca:	f3bf 8f6f 	isb	sy
 8002fce:	f3bf 8f4f 	dsb	sy
 8002fd2:	613b      	str	r3, [r7, #16]
    }
 8002fd4:	bf00      	nop
 8002fd6:	e7fe      	b.n	8002fd6 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	617b      	str	r3, [r7, #20]
 8002fde:	4b16      	ldr	r3, [pc, #88]	; (8003038 <vTaskPlaceOnEventListRestricted+0x88>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	697a      	ldr	r2, [r7, #20]
 8002fe4:	61da      	str	r2, [r3, #28]
 8002fe6:	4b14      	ldr	r3, [pc, #80]	; (8003038 <vTaskPlaceOnEventListRestricted+0x88>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	697a      	ldr	r2, [r7, #20]
 8002fec:	6892      	ldr	r2, [r2, #8]
 8002fee:	621a      	str	r2, [r3, #32]
 8002ff0:	4b11      	ldr	r3, [pc, #68]	; (8003038 <vTaskPlaceOnEventListRestricted+0x88>)
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	3218      	adds	r2, #24
 8002ffa:	605a      	str	r2, [r3, #4]
 8002ffc:	4b0e      	ldr	r3, [pc, #56]	; (8003038 <vTaskPlaceOnEventListRestricted+0x88>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f103 0218 	add.w	r2, r3, #24
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	609a      	str	r2, [r3, #8]
 8003008:	4b0b      	ldr	r3, [pc, #44]	; (8003038 <vTaskPlaceOnEventListRestricted+0x88>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	68fa      	ldr	r2, [r7, #12]
 800300e:	629a      	str	r2, [r3, #40]	; 0x28
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	1c5a      	adds	r2, r3, #1
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d002      	beq.n	8003026 <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 8003020:	f04f 33ff 	mov.w	r3, #4294967295
 8003024:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003026:	6879      	ldr	r1, [r7, #4]
 8003028:	68b8      	ldr	r0, [r7, #8]
 800302a:	f000 fa35 	bl	8003498 <prvAddCurrentTaskToDelayedList>
    }
 800302e:	bf00      	nop
 8003030:	3718      	adds	r7, #24
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}
 8003036:	bf00      	nop
 8003038:	200000c4 	.word	0x200000c4

0800303c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800303c:	b480      	push	{r7}
 800303e:	b08b      	sub	sp, #44	; 0x2c
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	68db      	ldr	r3, [r3, #12]
 800304a:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 800304c:	6a3b      	ldr	r3, [r7, #32]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d10a      	bne.n	8003068 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8003052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003056:	f383 8811 	msr	BASEPRI, r3
 800305a:	f3bf 8f6f 	isb	sy
 800305e:	f3bf 8f4f 	dsb	sy
 8003062:	60fb      	str	r3, [r7, #12]
    }
 8003064:	bf00      	nop
 8003066:	e7fe      	b.n	8003066 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8003068:	6a3b      	ldr	r3, [r7, #32]
 800306a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800306c:	61fb      	str	r3, [r7, #28]
 800306e:	6a3b      	ldr	r3, [r7, #32]
 8003070:	69db      	ldr	r3, [r3, #28]
 8003072:	6a3a      	ldr	r2, [r7, #32]
 8003074:	6a12      	ldr	r2, [r2, #32]
 8003076:	609a      	str	r2, [r3, #8]
 8003078:	6a3b      	ldr	r3, [r7, #32]
 800307a:	6a1b      	ldr	r3, [r3, #32]
 800307c:	6a3a      	ldr	r2, [r7, #32]
 800307e:	69d2      	ldr	r2, [r2, #28]
 8003080:	605a      	str	r2, [r3, #4]
 8003082:	69fb      	ldr	r3, [r7, #28]
 8003084:	685a      	ldr	r2, [r3, #4]
 8003086:	6a3b      	ldr	r3, [r7, #32]
 8003088:	3318      	adds	r3, #24
 800308a:	429a      	cmp	r2, r3
 800308c:	d103      	bne.n	8003096 <xTaskRemoveFromEventList+0x5a>
 800308e:	6a3b      	ldr	r3, [r7, #32]
 8003090:	6a1a      	ldr	r2, [r3, #32]
 8003092:	69fb      	ldr	r3, [r7, #28]
 8003094:	605a      	str	r2, [r3, #4]
 8003096:	6a3b      	ldr	r3, [r7, #32]
 8003098:	2200      	movs	r2, #0
 800309a:	629a      	str	r2, [r3, #40]	; 0x28
 800309c:	69fb      	ldr	r3, [r7, #28]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	1e5a      	subs	r2, r3, #1
 80030a2:	69fb      	ldr	r3, [r7, #28]
 80030a4:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80030a6:	4b4a      	ldr	r3, [pc, #296]	; (80031d0 <xTaskRemoveFromEventList+0x194>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d15e      	bne.n	800316c <xTaskRemoveFromEventList+0x130>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 80030ae:	6a3b      	ldr	r3, [r7, #32]
 80030b0:	695b      	ldr	r3, [r3, #20]
 80030b2:	617b      	str	r3, [r7, #20]
 80030b4:	6a3b      	ldr	r3, [r7, #32]
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	6a3a      	ldr	r2, [r7, #32]
 80030ba:	68d2      	ldr	r2, [r2, #12]
 80030bc:	609a      	str	r2, [r3, #8]
 80030be:	6a3b      	ldr	r3, [r7, #32]
 80030c0:	68db      	ldr	r3, [r3, #12]
 80030c2:	6a3a      	ldr	r2, [r7, #32]
 80030c4:	6892      	ldr	r2, [r2, #8]
 80030c6:	605a      	str	r2, [r3, #4]
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	685a      	ldr	r2, [r3, #4]
 80030cc:	6a3b      	ldr	r3, [r7, #32]
 80030ce:	3304      	adds	r3, #4
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d103      	bne.n	80030dc <xTaskRemoveFromEventList+0xa0>
 80030d4:	6a3b      	ldr	r3, [r7, #32]
 80030d6:	68da      	ldr	r2, [r3, #12]
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	605a      	str	r2, [r3, #4]
 80030dc:	6a3b      	ldr	r3, [r7, #32]
 80030de:	2200      	movs	r2, #0
 80030e0:	615a      	str	r2, [r3, #20]
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	1e5a      	subs	r2, r3, #1
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 80030ec:	6a3b      	ldr	r3, [r7, #32]
 80030ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030f0:	2201      	movs	r2, #1
 80030f2:	409a      	lsls	r2, r3
 80030f4:	4b37      	ldr	r3, [pc, #220]	; (80031d4 <xTaskRemoveFromEventList+0x198>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4313      	orrs	r3, r2
 80030fa:	4a36      	ldr	r2, [pc, #216]	; (80031d4 <xTaskRemoveFromEventList+0x198>)
 80030fc:	6013      	str	r3, [r2, #0]
 80030fe:	6a3b      	ldr	r3, [r7, #32]
 8003100:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003102:	4935      	ldr	r1, [pc, #212]	; (80031d8 <xTaskRemoveFromEventList+0x19c>)
 8003104:	4613      	mov	r3, r2
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	4413      	add	r3, r2
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	440b      	add	r3, r1
 800310e:	3304      	adds	r3, #4
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	613b      	str	r3, [r7, #16]
 8003114:	6a3b      	ldr	r3, [r7, #32]
 8003116:	693a      	ldr	r2, [r7, #16]
 8003118:	609a      	str	r2, [r3, #8]
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	689a      	ldr	r2, [r3, #8]
 800311e:	6a3b      	ldr	r3, [r7, #32]
 8003120:	60da      	str	r2, [r3, #12]
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	6a3a      	ldr	r2, [r7, #32]
 8003128:	3204      	adds	r2, #4
 800312a:	605a      	str	r2, [r3, #4]
 800312c:	6a3b      	ldr	r3, [r7, #32]
 800312e:	1d1a      	adds	r2, r3, #4
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	609a      	str	r2, [r3, #8]
 8003134:	6a3b      	ldr	r3, [r7, #32]
 8003136:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003138:	4613      	mov	r3, r2
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	4413      	add	r3, r2
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	4a25      	ldr	r2, [pc, #148]	; (80031d8 <xTaskRemoveFromEventList+0x19c>)
 8003142:	441a      	add	r2, r3
 8003144:	6a3b      	ldr	r3, [r7, #32]
 8003146:	615a      	str	r2, [r3, #20]
 8003148:	6a3b      	ldr	r3, [r7, #32]
 800314a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800314c:	4922      	ldr	r1, [pc, #136]	; (80031d8 <xTaskRemoveFromEventList+0x19c>)
 800314e:	4613      	mov	r3, r2
 8003150:	009b      	lsls	r3, r3, #2
 8003152:	4413      	add	r3, r2
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	440b      	add	r3, r1
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	1c59      	adds	r1, r3, #1
 800315c:	481e      	ldr	r0, [pc, #120]	; (80031d8 <xTaskRemoveFromEventList+0x19c>)
 800315e:	4613      	mov	r3, r2
 8003160:	009b      	lsls	r3, r3, #2
 8003162:	4413      	add	r3, r2
 8003164:	009b      	lsls	r3, r3, #2
 8003166:	4403      	add	r3, r0
 8003168:	6019      	str	r1, [r3, #0]
 800316a:	e01b      	b.n	80031a4 <xTaskRemoveFromEventList+0x168>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800316c:	4b1b      	ldr	r3, [pc, #108]	; (80031dc <xTaskRemoveFromEventList+0x1a0>)
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	61bb      	str	r3, [r7, #24]
 8003172:	6a3b      	ldr	r3, [r7, #32]
 8003174:	69ba      	ldr	r2, [r7, #24]
 8003176:	61da      	str	r2, [r3, #28]
 8003178:	69bb      	ldr	r3, [r7, #24]
 800317a:	689a      	ldr	r2, [r3, #8]
 800317c:	6a3b      	ldr	r3, [r7, #32]
 800317e:	621a      	str	r2, [r3, #32]
 8003180:	69bb      	ldr	r3, [r7, #24]
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	6a3a      	ldr	r2, [r7, #32]
 8003186:	3218      	adds	r2, #24
 8003188:	605a      	str	r2, [r3, #4]
 800318a:	6a3b      	ldr	r3, [r7, #32]
 800318c:	f103 0218 	add.w	r2, r3, #24
 8003190:	69bb      	ldr	r3, [r7, #24]
 8003192:	609a      	str	r2, [r3, #8]
 8003194:	6a3b      	ldr	r3, [r7, #32]
 8003196:	4a11      	ldr	r2, [pc, #68]	; (80031dc <xTaskRemoveFromEventList+0x1a0>)
 8003198:	629a      	str	r2, [r3, #40]	; 0x28
 800319a:	4b10      	ldr	r3, [pc, #64]	; (80031dc <xTaskRemoveFromEventList+0x1a0>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	3301      	adds	r3, #1
 80031a0:	4a0e      	ldr	r2, [pc, #56]	; (80031dc <xTaskRemoveFromEventList+0x1a0>)
 80031a2:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80031a4:	6a3b      	ldr	r3, [r7, #32]
 80031a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031a8:	4b0d      	ldr	r3, [pc, #52]	; (80031e0 <xTaskRemoveFromEventList+0x1a4>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d905      	bls.n	80031be <xTaskRemoveFromEventList+0x182>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80031b2:	2301      	movs	r3, #1
 80031b4:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80031b6:	4b0b      	ldr	r3, [pc, #44]	; (80031e4 <xTaskRemoveFromEventList+0x1a8>)
 80031b8:	2201      	movs	r2, #1
 80031ba:	601a      	str	r2, [r3, #0]
 80031bc:	e001      	b.n	80031c2 <xTaskRemoveFromEventList+0x186>
    }
    else
    {
        xReturn = pdFALSE;
 80031be:	2300      	movs	r3, #0
 80031c0:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 80031c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	372c      	adds	r7, #44	; 0x2c
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr
 80031d0:	200001c4 	.word	0x200001c4
 80031d4:	200001a4 	.word	0x200001a4
 80031d8:	200000c8 	.word	0x200000c8
 80031dc:	2000015c 	.word	0x2000015c
 80031e0:	200000c4 	.word	0x200000c4
 80031e4:	200001b0 	.word	0x200001b0

080031e8 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80031e8:	b480      	push	{r7}
 80031ea:	b083      	sub	sp, #12
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80031f0:	4b06      	ldr	r3, [pc, #24]	; (800320c <vTaskInternalSetTimeOutState+0x24>)
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80031f8:	4b05      	ldr	r3, [pc, #20]	; (8003210 <vTaskInternalSetTimeOutState+0x28>)
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	605a      	str	r2, [r3, #4]
}
 8003200:	bf00      	nop
 8003202:	370c      	adds	r7, #12
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr
 800320c:	200001b4 	.word	0x200001b4
 8003210:	200001a0 	.word	0x200001a0

08003214 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b088      	sub	sp, #32
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
 800321c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d10a      	bne.n	800323a <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8003224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003228:	f383 8811 	msr	BASEPRI, r3
 800322c:	f3bf 8f6f 	isb	sy
 8003230:	f3bf 8f4f 	dsb	sy
 8003234:	613b      	str	r3, [r7, #16]
    }
 8003236:	bf00      	nop
 8003238:	e7fe      	b.n	8003238 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d10a      	bne.n	8003256 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8003240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003244:	f383 8811 	msr	BASEPRI, r3
 8003248:	f3bf 8f6f 	isb	sy
 800324c:	f3bf 8f4f 	dsb	sy
 8003250:	60fb      	str	r3, [r7, #12]
    }
 8003252:	bf00      	nop
 8003254:	e7fe      	b.n	8003254 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8003256:	f000 fd4f 	bl	8003cf8 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800325a:	4b1f      	ldr	r3, [pc, #124]	; (80032d8 <xTaskCheckForTimeOut+0xc4>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	69ba      	ldr	r2, [r7, #24]
 8003266:	1ad3      	subs	r3, r2, r3
 8003268:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003272:	d102      	bne.n	800327a <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003274:	2300      	movs	r3, #0
 8003276:	61fb      	str	r3, [r7, #28]
 8003278:	e026      	b.n	80032c8 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	4b17      	ldr	r3, [pc, #92]	; (80032dc <xTaskCheckForTimeOut+0xc8>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	429a      	cmp	r2, r3
 8003284:	d00a      	beq.n	800329c <xTaskCheckForTimeOut+0x88>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	69ba      	ldr	r2, [r7, #24]
 800328c:	429a      	cmp	r2, r3
 800328e:	d305      	bcc.n	800329c <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003290:	2301      	movs	r3, #1
 8003292:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	2200      	movs	r2, #0
 8003298:	601a      	str	r2, [r3, #0]
 800329a:	e015      	b.n	80032c8 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	697a      	ldr	r2, [r7, #20]
 80032a2:	429a      	cmp	r2, r3
 80032a4:	d20b      	bcs.n	80032be <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	1ad2      	subs	r2, r2, r3
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f7ff ff98 	bl	80031e8 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80032b8:	2300      	movs	r3, #0
 80032ba:	61fb      	str	r3, [r7, #28]
 80032bc:	e004      	b.n	80032c8 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	2200      	movs	r2, #0
 80032c2:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80032c4:	2301      	movs	r3, #1
 80032c6:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80032c8:	f000 fd46 	bl	8003d58 <vPortExitCritical>

    return xReturn;
 80032cc:	69fb      	ldr	r3, [r7, #28]
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3720      	adds	r7, #32
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	bf00      	nop
 80032d8:	200001a0 	.word	0x200001a0
 80032dc:	200001b4 	.word	0x200001b4

080032e0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80032e0:	b480      	push	{r7}
 80032e2:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80032e4:	4b03      	ldr	r3, [pc, #12]	; (80032f4 <vTaskMissedYield+0x14>)
 80032e6:	2201      	movs	r2, #1
 80032e8:	601a      	str	r2, [r3, #0]
}
 80032ea:	bf00      	nop
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr
 80032f4:	200001b0 	.word	0x200001b0

080032f8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b082      	sub	sp, #8
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003300:	f000 f852 	bl	80033a8 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003304:	4b06      	ldr	r3, [pc, #24]	; (8003320 <prvIdleTask+0x28>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	2b01      	cmp	r3, #1
 800330a:	d9f9      	bls.n	8003300 <prvIdleTask+0x8>
            {
                taskYIELD();
 800330c:	4b05      	ldr	r3, [pc, #20]	; (8003324 <prvIdleTask+0x2c>)
 800330e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003312:	601a      	str	r2, [r3, #0]
 8003314:	f3bf 8f4f 	dsb	sy
 8003318:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 800331c:	e7f0      	b.n	8003300 <prvIdleTask+0x8>
 800331e:	bf00      	nop
 8003320:	200000c8 	.word	0x200000c8
 8003324:	e000ed04 	.word	0xe000ed04

08003328 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b082      	sub	sp, #8
 800332c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800332e:	2300      	movs	r3, #0
 8003330:	607b      	str	r3, [r7, #4]
 8003332:	e00c      	b.n	800334e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003334:	687a      	ldr	r2, [r7, #4]
 8003336:	4613      	mov	r3, r2
 8003338:	009b      	lsls	r3, r3, #2
 800333a:	4413      	add	r3, r2
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	4a12      	ldr	r2, [pc, #72]	; (8003388 <prvInitialiseTaskLists+0x60>)
 8003340:	4413      	add	r3, r2
 8003342:	4618      	mov	r0, r3
 8003344:	f7fe fe12 	bl	8001f6c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	3301      	adds	r3, #1
 800334c:	607b      	str	r3, [r7, #4]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2b04      	cmp	r3, #4
 8003352:	d9ef      	bls.n	8003334 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003354:	480d      	ldr	r0, [pc, #52]	; (800338c <prvInitialiseTaskLists+0x64>)
 8003356:	f7fe fe09 	bl	8001f6c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800335a:	480d      	ldr	r0, [pc, #52]	; (8003390 <prvInitialiseTaskLists+0x68>)
 800335c:	f7fe fe06 	bl	8001f6c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003360:	480c      	ldr	r0, [pc, #48]	; (8003394 <prvInitialiseTaskLists+0x6c>)
 8003362:	f7fe fe03 	bl	8001f6c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8003366:	480c      	ldr	r0, [pc, #48]	; (8003398 <prvInitialiseTaskLists+0x70>)
 8003368:	f7fe fe00 	bl	8001f6c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 800336c:	480b      	ldr	r0, [pc, #44]	; (800339c <prvInitialiseTaskLists+0x74>)
 800336e:	f7fe fdfd 	bl	8001f6c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003372:	4b0b      	ldr	r3, [pc, #44]	; (80033a0 <prvInitialiseTaskLists+0x78>)
 8003374:	4a05      	ldr	r2, [pc, #20]	; (800338c <prvInitialiseTaskLists+0x64>)
 8003376:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003378:	4b0a      	ldr	r3, [pc, #40]	; (80033a4 <prvInitialiseTaskLists+0x7c>)
 800337a:	4a05      	ldr	r2, [pc, #20]	; (8003390 <prvInitialiseTaskLists+0x68>)
 800337c:	601a      	str	r2, [r3, #0]
}
 800337e:	bf00      	nop
 8003380:	3708      	adds	r7, #8
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	200000c8 	.word	0x200000c8
 800338c:	2000012c 	.word	0x2000012c
 8003390:	20000140 	.word	0x20000140
 8003394:	2000015c 	.word	0x2000015c
 8003398:	20000170 	.word	0x20000170
 800339c:	20000188 	.word	0x20000188
 80033a0:	20000154 	.word	0x20000154
 80033a4:	20000158 	.word	0x20000158

080033a8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b082      	sub	sp, #8
 80033ac:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80033ae:	e019      	b.n	80033e4 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 80033b0:	f000 fca2 	bl	8003cf8 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80033b4:	4b10      	ldr	r3, [pc, #64]	; (80033f8 <prvCheckTasksWaitingTermination+0x50>)
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	68db      	ldr	r3, [r3, #12]
 80033ba:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	3304      	adds	r3, #4
 80033c0:	4618      	mov	r0, r3
 80033c2:	f7fe fe39 	bl	8002038 <uxListRemove>
                --uxCurrentNumberOfTasks;
 80033c6:	4b0d      	ldr	r3, [pc, #52]	; (80033fc <prvCheckTasksWaitingTermination+0x54>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	3b01      	subs	r3, #1
 80033cc:	4a0b      	ldr	r2, [pc, #44]	; (80033fc <prvCheckTasksWaitingTermination+0x54>)
 80033ce:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 80033d0:	4b0b      	ldr	r3, [pc, #44]	; (8003400 <prvCheckTasksWaitingTermination+0x58>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	3b01      	subs	r3, #1
 80033d6:	4a0a      	ldr	r2, [pc, #40]	; (8003400 <prvCheckTasksWaitingTermination+0x58>)
 80033d8:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 80033da:	f000 fcbd 	bl	8003d58 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f000 f810 	bl	8003404 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80033e4:	4b06      	ldr	r3, [pc, #24]	; (8003400 <prvCheckTasksWaitingTermination+0x58>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d1e1      	bne.n	80033b0 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 80033ec:	bf00      	nop
 80033ee:	bf00      	nop
 80033f0:	3708      	adds	r7, #8
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	bf00      	nop
 80033f8:	20000170 	.word	0x20000170
 80033fc:	2000019c 	.word	0x2000019c
 8003400:	20000184 	.word	0x20000184

08003404 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003404:	b580      	push	{r7, lr}
 8003406:	b082      	sub	sp, #8
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003410:	4618      	mov	r0, r3
 8003412:	f000 fe0d 	bl	8004030 <vPortFree>
            vPortFree( pxTCB );
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f000 fe0a 	bl	8004030 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800341c:	bf00      	nop
 800341e:	3708      	adds	r7, #8
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}

08003424 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003424:	b480      	push	{r7}
 8003426:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003428:	4b0a      	ldr	r3, [pc, #40]	; (8003454 <prvResetNextTaskUnblockTime+0x30>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d104      	bne.n	800343c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003432:	4b09      	ldr	r3, [pc, #36]	; (8003458 <prvResetNextTaskUnblockTime+0x34>)
 8003434:	f04f 32ff 	mov.w	r2, #4294967295
 8003438:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800343a:	e005      	b.n	8003448 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800343c:	4b05      	ldr	r3, [pc, #20]	; (8003454 <prvResetNextTaskUnblockTime+0x30>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	68db      	ldr	r3, [r3, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a04      	ldr	r2, [pc, #16]	; (8003458 <prvResetNextTaskUnblockTime+0x34>)
 8003446:	6013      	str	r3, [r2, #0]
}
 8003448:	bf00      	nop
 800344a:	46bd      	mov	sp, r7
 800344c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003450:	4770      	bx	lr
 8003452:	bf00      	nop
 8003454:	20000154 	.word	0x20000154
 8003458:	200001bc 	.word	0x200001bc

0800345c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 800345c:	b480      	push	{r7}
 800345e:	b083      	sub	sp, #12
 8003460:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003462:	4b0b      	ldr	r3, [pc, #44]	; (8003490 <xTaskGetSchedulerState+0x34>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d102      	bne.n	8003470 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800346a:	2301      	movs	r3, #1
 800346c:	607b      	str	r3, [r7, #4]
 800346e:	e008      	b.n	8003482 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003470:	4b08      	ldr	r3, [pc, #32]	; (8003494 <xTaskGetSchedulerState+0x38>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d102      	bne.n	800347e <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003478:	2302      	movs	r3, #2
 800347a:	607b      	str	r3, [r7, #4]
 800347c:	e001      	b.n	8003482 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800347e:	2300      	movs	r3, #0
 8003480:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003482:	687b      	ldr	r3, [r7, #4]
    }
 8003484:	4618      	mov	r0, r3
 8003486:	370c      	adds	r7, #12
 8003488:	46bd      	mov	sp, r7
 800348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348e:	4770      	bx	lr
 8003490:	200001a8 	.word	0x200001a8
 8003494:	200001c4 	.word	0x200001c4

08003498 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b086      	sub	sp, #24
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
 80034a0:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80034a2:	4b36      	ldr	r3, [pc, #216]	; (800357c <prvAddCurrentTaskToDelayedList+0xe4>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80034a8:	4b35      	ldr	r3, [pc, #212]	; (8003580 <prvAddCurrentTaskToDelayedList+0xe8>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	3304      	adds	r3, #4
 80034ae:	4618      	mov	r0, r3
 80034b0:	f7fe fdc2 	bl	8002038 <uxListRemove>
 80034b4:	4603      	mov	r3, r0
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d10b      	bne.n	80034d2 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80034ba:	4b31      	ldr	r3, [pc, #196]	; (8003580 <prvAddCurrentTaskToDelayedList+0xe8>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034c0:	2201      	movs	r2, #1
 80034c2:	fa02 f303 	lsl.w	r3, r2, r3
 80034c6:	43da      	mvns	r2, r3
 80034c8:	4b2e      	ldr	r3, [pc, #184]	; (8003584 <prvAddCurrentTaskToDelayedList+0xec>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4013      	ands	r3, r2
 80034ce:	4a2d      	ldr	r2, [pc, #180]	; (8003584 <prvAddCurrentTaskToDelayedList+0xec>)
 80034d0:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034d8:	d124      	bne.n	8003524 <prvAddCurrentTaskToDelayedList+0x8c>
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d021      	beq.n	8003524 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80034e0:	4b29      	ldr	r3, [pc, #164]	; (8003588 <prvAddCurrentTaskToDelayedList+0xf0>)
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	613b      	str	r3, [r7, #16]
 80034e6:	4b26      	ldr	r3, [pc, #152]	; (8003580 <prvAddCurrentTaskToDelayedList+0xe8>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	693a      	ldr	r2, [r7, #16]
 80034ec:	609a      	str	r2, [r3, #8]
 80034ee:	4b24      	ldr	r3, [pc, #144]	; (8003580 <prvAddCurrentTaskToDelayedList+0xe8>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	693a      	ldr	r2, [r7, #16]
 80034f4:	6892      	ldr	r2, [r2, #8]
 80034f6:	60da      	str	r2, [r3, #12]
 80034f8:	4b21      	ldr	r3, [pc, #132]	; (8003580 <prvAddCurrentTaskToDelayedList+0xe8>)
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	3204      	adds	r2, #4
 8003502:	605a      	str	r2, [r3, #4]
 8003504:	4b1e      	ldr	r3, [pc, #120]	; (8003580 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	1d1a      	adds	r2, r3, #4
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	609a      	str	r2, [r3, #8]
 800350e:	4b1c      	ldr	r3, [pc, #112]	; (8003580 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a1d      	ldr	r2, [pc, #116]	; (8003588 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003514:	615a      	str	r2, [r3, #20]
 8003516:	4b1c      	ldr	r3, [pc, #112]	; (8003588 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	3301      	adds	r3, #1
 800351c:	4a1a      	ldr	r2, [pc, #104]	; (8003588 <prvAddCurrentTaskToDelayedList+0xf0>)
 800351e:	6013      	str	r3, [r2, #0]
 8003520:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003522:	e026      	b.n	8003572 <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8003524:	697a      	ldr	r2, [r7, #20]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	4413      	add	r3, r2
 800352a:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800352c:	4b14      	ldr	r3, [pc, #80]	; (8003580 <prvAddCurrentTaskToDelayedList+0xe8>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	68fa      	ldr	r2, [r7, #12]
 8003532:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8003534:	68fa      	ldr	r2, [r7, #12]
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	429a      	cmp	r2, r3
 800353a:	d209      	bcs.n	8003550 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800353c:	4b13      	ldr	r3, [pc, #76]	; (800358c <prvAddCurrentTaskToDelayedList+0xf4>)
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	4b0f      	ldr	r3, [pc, #60]	; (8003580 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	3304      	adds	r3, #4
 8003546:	4619      	mov	r1, r3
 8003548:	4610      	mov	r0, r2
 800354a:	f7fe fd3c 	bl	8001fc6 <vListInsert>
}
 800354e:	e010      	b.n	8003572 <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003550:	4b0f      	ldr	r3, [pc, #60]	; (8003590 <prvAddCurrentTaskToDelayedList+0xf8>)
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	4b0a      	ldr	r3, [pc, #40]	; (8003580 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	3304      	adds	r3, #4
 800355a:	4619      	mov	r1, r3
 800355c:	4610      	mov	r0, r2
 800355e:	f7fe fd32 	bl	8001fc6 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8003562:	4b0c      	ldr	r3, [pc, #48]	; (8003594 <prvAddCurrentTaskToDelayedList+0xfc>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	68fa      	ldr	r2, [r7, #12]
 8003568:	429a      	cmp	r2, r3
 800356a:	d202      	bcs.n	8003572 <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 800356c:	4a09      	ldr	r2, [pc, #36]	; (8003594 <prvAddCurrentTaskToDelayedList+0xfc>)
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	6013      	str	r3, [r2, #0]
}
 8003572:	bf00      	nop
 8003574:	3718      	adds	r7, #24
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop
 800357c:	200001a0 	.word	0x200001a0
 8003580:	200000c4 	.word	0x200000c4
 8003584:	200001a4 	.word	0x200001a4
 8003588:	20000188 	.word	0x20000188
 800358c:	20000158 	.word	0x20000158
 8003590:	20000154 	.word	0x20000154
 8003594:	200001bc 	.word	0x200001bc

08003598 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003598:	b580      	push	{r7, lr}
 800359a:	b084      	sub	sp, #16
 800359c:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800359e:	2300      	movs	r3, #0
 80035a0:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80035a2:	f000 fa47 	bl	8003a34 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80035a6:	4b11      	ldr	r3, [pc, #68]	; (80035ec <xTimerCreateTimerTask+0x54>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d00b      	beq.n	80035c6 <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 80035ae:	4b10      	ldr	r3, [pc, #64]	; (80035f0 <xTimerCreateTimerTask+0x58>)
 80035b0:	9301      	str	r3, [sp, #4]
 80035b2:	2302      	movs	r3, #2
 80035b4:	9300      	str	r3, [sp, #0]
 80035b6:	2300      	movs	r3, #0
 80035b8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80035bc:	490d      	ldr	r1, [pc, #52]	; (80035f4 <xTimerCreateTimerTask+0x5c>)
 80035be:	480e      	ldr	r0, [pc, #56]	; (80035f8 <xTimerCreateTimerTask+0x60>)
 80035c0:	f7ff f856 	bl	8002670 <xTaskCreate>
 80035c4:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d10a      	bne.n	80035e2 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 80035cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035d0:	f383 8811 	msr	BASEPRI, r3
 80035d4:	f3bf 8f6f 	isb	sy
 80035d8:	f3bf 8f4f 	dsb	sy
 80035dc:	603b      	str	r3, [r7, #0]
    }
 80035de:	bf00      	nop
 80035e0:	e7fe      	b.n	80035e0 <xTimerCreateTimerTask+0x48>
        return xReturn;
 80035e2:	687b      	ldr	r3, [r7, #4]
    }
 80035e4:	4618      	mov	r0, r3
 80035e6:	3708      	adds	r7, #8
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}
 80035ec:	200001f8 	.word	0x200001f8
 80035f0:	200001fc 	.word	0x200001fc
 80035f4:	080042f0 	.word	0x080042f0
 80035f8:	080036a1 	.word	0x080036a1

080035fc <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b084      	sub	sp, #16
 8003600:	af00      	add	r7, sp, #0
 8003602:	60f8      	str	r0, [r7, #12]
 8003604:	60b9      	str	r1, [r7, #8]
 8003606:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003608:	e008      	b.n	800361c <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	699b      	ldr	r3, [r3, #24]
 800360e:	68ba      	ldr	r2, [r7, #8]
 8003610:	4413      	add	r3, r2
 8003612:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	6a1b      	ldr	r3, [r3, #32]
 8003618:	68f8      	ldr	r0, [r7, #12]
 800361a:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	699a      	ldr	r2, [r3, #24]
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	18d1      	adds	r1, r2, r3
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	687a      	ldr	r2, [r7, #4]
 8003628:	68f8      	ldr	r0, [r7, #12]
 800362a:	f000 f8dd 	bl	80037e8 <prvInsertTimerInActiveList>
 800362e:	4603      	mov	r3, r0
 8003630:	2b00      	cmp	r3, #0
 8003632:	d1ea      	bne.n	800360a <prvReloadTimer+0xe>
        }
    }
 8003634:	bf00      	nop
 8003636:	bf00      	nop
 8003638:	3710      	adds	r7, #16
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}
	...

08003640 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003640:	b580      	push	{r7, lr}
 8003642:	b084      	sub	sp, #16
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800364a:	4b14      	ldr	r3, [pc, #80]	; (800369c <prvProcessExpiredTimer+0x5c>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	68db      	ldr	r3, [r3, #12]
 8003652:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	3304      	adds	r3, #4
 8003658:	4618      	mov	r0, r3
 800365a:	f7fe fced 	bl	8002038 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003664:	f003 0304 	and.w	r3, r3, #4
 8003668:	2b00      	cmp	r3, #0
 800366a:	d005      	beq.n	8003678 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 800366c:	683a      	ldr	r2, [r7, #0]
 800366e:	6879      	ldr	r1, [r7, #4]
 8003670:	68f8      	ldr	r0, [r7, #12]
 8003672:	f7ff ffc3 	bl	80035fc <prvReloadTimer>
 8003676:	e008      	b.n	800368a <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800367e:	f023 0301 	bic.w	r3, r3, #1
 8003682:	b2da      	uxtb	r2, r3
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	6a1b      	ldr	r3, [r3, #32]
 800368e:	68f8      	ldr	r0, [r7, #12]
 8003690:	4798      	blx	r3
    }
 8003692:	bf00      	nop
 8003694:	3710      	adds	r7, #16
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}
 800369a:	bf00      	nop
 800369c:	200001f0 	.word	0x200001f0

080036a0 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b084      	sub	sp, #16
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80036a8:	f107 0308 	add.w	r3, r7, #8
 80036ac:	4618      	mov	r0, r3
 80036ae:	f000 f857 	bl	8003760 <prvGetNextExpireTime>
 80036b2:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	4619      	mov	r1, r3
 80036b8:	68f8      	ldr	r0, [r7, #12]
 80036ba:	f000 f803 	bl	80036c4 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80036be:	f000 f8d5 	bl	800386c <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80036c2:	e7f1      	b.n	80036a8 <prvTimerTask+0x8>

080036c4 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b084      	sub	sp, #16
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
 80036cc:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80036ce:	f7ff f9bf 	bl	8002a50 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80036d2:	f107 0308 	add.w	r3, r7, #8
 80036d6:	4618      	mov	r0, r3
 80036d8:	f000 f866 	bl	80037a8 <prvSampleTimeNow>
 80036dc:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d130      	bne.n	8003746 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d10a      	bne.n	8003700 <prvProcessTimerOrBlockTask+0x3c>
 80036ea:	687a      	ldr	r2, [r7, #4]
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d806      	bhi.n	8003700 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80036f2:	f7ff f9bb 	bl	8002a6c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80036f6:	68f9      	ldr	r1, [r7, #12]
 80036f8:	6878      	ldr	r0, [r7, #4]
 80036fa:	f7ff ffa1 	bl	8003640 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80036fe:	e024      	b.n	800374a <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d008      	beq.n	8003718 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003706:	4b13      	ldr	r3, [pc, #76]	; (8003754 <prvProcessTimerOrBlockTask+0x90>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d101      	bne.n	8003714 <prvProcessTimerOrBlockTask+0x50>
 8003710:	2301      	movs	r3, #1
 8003712:	e000      	b.n	8003716 <prvProcessTimerOrBlockTask+0x52>
 8003714:	2300      	movs	r3, #0
 8003716:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003718:	4b0f      	ldr	r3, [pc, #60]	; (8003758 <prvProcessTimerOrBlockTask+0x94>)
 800371a:	6818      	ldr	r0, [r3, #0]
 800371c:	687a      	ldr	r2, [r7, #4]
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	1ad3      	subs	r3, r2, r3
 8003722:	683a      	ldr	r2, [r7, #0]
 8003724:	4619      	mov	r1, r3
 8003726:	f7fe ff6f 	bl	8002608 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800372a:	f7ff f99f 	bl	8002a6c <xTaskResumeAll>
 800372e:	4603      	mov	r3, r0
 8003730:	2b00      	cmp	r3, #0
 8003732:	d10a      	bne.n	800374a <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003734:	4b09      	ldr	r3, [pc, #36]	; (800375c <prvProcessTimerOrBlockTask+0x98>)
 8003736:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800373a:	601a      	str	r2, [r3, #0]
 800373c:	f3bf 8f4f 	dsb	sy
 8003740:	f3bf 8f6f 	isb	sy
    }
 8003744:	e001      	b.n	800374a <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003746:	f7ff f991 	bl	8002a6c <xTaskResumeAll>
    }
 800374a:	bf00      	nop
 800374c:	3710      	adds	r7, #16
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}
 8003752:	bf00      	nop
 8003754:	200001f4 	.word	0x200001f4
 8003758:	200001f8 	.word	0x200001f8
 800375c:	e000ed04 	.word	0xe000ed04

08003760 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003760:	b480      	push	{r7}
 8003762:	b085      	sub	sp, #20
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003768:	4b0e      	ldr	r3, [pc, #56]	; (80037a4 <prvGetNextExpireTime+0x44>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d101      	bne.n	8003776 <prvGetNextExpireTime+0x16>
 8003772:	2201      	movs	r2, #1
 8003774:	e000      	b.n	8003778 <prvGetNextExpireTime+0x18>
 8003776:	2200      	movs	r2, #0
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d105      	bne.n	8003790 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003784:	4b07      	ldr	r3, [pc, #28]	; (80037a4 <prvGetNextExpireTime+0x44>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	68db      	ldr	r3, [r3, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	60fb      	str	r3, [r7, #12]
 800378e:	e001      	b.n	8003794 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003790:	2300      	movs	r3, #0
 8003792:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003794:	68fb      	ldr	r3, [r7, #12]
    }
 8003796:	4618      	mov	r0, r3
 8003798:	3714      	adds	r7, #20
 800379a:	46bd      	mov	sp, r7
 800379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a0:	4770      	bx	lr
 80037a2:	bf00      	nop
 80037a4:	200001f0 	.word	0x200001f0

080037a8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b084      	sub	sp, #16
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 80037b0:	f7ff fa58 	bl	8002c64 <xTaskGetTickCount>
 80037b4:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80037b6:	4b0b      	ldr	r3, [pc, #44]	; (80037e4 <prvSampleTimeNow+0x3c>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	68fa      	ldr	r2, [r7, #12]
 80037bc:	429a      	cmp	r2, r3
 80037be:	d205      	bcs.n	80037cc <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80037c0:	f000 f912 	bl	80039e8 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2201      	movs	r2, #1
 80037c8:	601a      	str	r2, [r3, #0]
 80037ca:	e002      	b.n	80037d2 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2200      	movs	r2, #0
 80037d0:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80037d2:	4a04      	ldr	r2, [pc, #16]	; (80037e4 <prvSampleTimeNow+0x3c>)
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80037d8:	68fb      	ldr	r3, [r7, #12]
    }
 80037da:	4618      	mov	r0, r3
 80037dc:	3710      	adds	r7, #16
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	bf00      	nop
 80037e4:	20000200 	.word	0x20000200

080037e8 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b086      	sub	sp, #24
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	60f8      	str	r0, [r7, #12]
 80037f0:	60b9      	str	r1, [r7, #8]
 80037f2:	607a      	str	r2, [r7, #4]
 80037f4:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80037f6:	2300      	movs	r3, #0
 80037f8:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	68ba      	ldr	r2, [r7, #8]
 80037fe:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	68fa      	ldr	r2, [r7, #12]
 8003804:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003806:	68ba      	ldr	r2, [r7, #8]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	429a      	cmp	r2, r3
 800380c:	d812      	bhi.n	8003834 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	1ad2      	subs	r2, r2, r3
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	699b      	ldr	r3, [r3, #24]
 8003818:	429a      	cmp	r2, r3
 800381a:	d302      	bcc.n	8003822 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 800381c:	2301      	movs	r3, #1
 800381e:	617b      	str	r3, [r7, #20]
 8003820:	e01b      	b.n	800385a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003822:	4b10      	ldr	r3, [pc, #64]	; (8003864 <prvInsertTimerInActiveList+0x7c>)
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	3304      	adds	r3, #4
 800382a:	4619      	mov	r1, r3
 800382c:	4610      	mov	r0, r2
 800382e:	f7fe fbca 	bl	8001fc6 <vListInsert>
 8003832:	e012      	b.n	800385a <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003834:	687a      	ldr	r2, [r7, #4]
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	429a      	cmp	r2, r3
 800383a:	d206      	bcs.n	800384a <prvInsertTimerInActiveList+0x62>
 800383c:	68ba      	ldr	r2, [r7, #8]
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	429a      	cmp	r2, r3
 8003842:	d302      	bcc.n	800384a <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003844:	2301      	movs	r3, #1
 8003846:	617b      	str	r3, [r7, #20]
 8003848:	e007      	b.n	800385a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800384a:	4b07      	ldr	r3, [pc, #28]	; (8003868 <prvInsertTimerInActiveList+0x80>)
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	3304      	adds	r3, #4
 8003852:	4619      	mov	r1, r3
 8003854:	4610      	mov	r0, r2
 8003856:	f7fe fbb6 	bl	8001fc6 <vListInsert>
            }
        }

        return xProcessTimerNow;
 800385a:	697b      	ldr	r3, [r7, #20]
    }
 800385c:	4618      	mov	r0, r3
 800385e:	3718      	adds	r7, #24
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}
 8003864:	200001f4 	.word	0x200001f4
 8003868:	200001f0 	.word	0x200001f0

0800386c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 800386c:	b580      	push	{r7, lr}
 800386e:	b088      	sub	sp, #32
 8003870:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003872:	e0a6      	b.n	80039c2 <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	2b00      	cmp	r3, #0
 8003878:	f2c0 80a3 	blt.w	80039c2 <prvProcessReceivedCommands+0x156>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003880:	69fb      	ldr	r3, [r7, #28]
 8003882:	695b      	ldr	r3, [r3, #20]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d004      	beq.n	8003892 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003888:	69fb      	ldr	r3, [r7, #28]
 800388a:	3304      	adds	r3, #4
 800388c:	4618      	mov	r0, r3
 800388e:	f7fe fbd3 	bl	8002038 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003892:	1d3b      	adds	r3, r7, #4
 8003894:	4618      	mov	r0, r3
 8003896:	f7ff ff87 	bl	80037a8 <prvSampleTimeNow>
 800389a:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	3b01      	subs	r3, #1
 80038a0:	2b08      	cmp	r3, #8
 80038a2:	f200 808d 	bhi.w	80039c0 <prvProcessReceivedCommands+0x154>
 80038a6:	a201      	add	r2, pc, #4	; (adr r2, 80038ac <prvProcessReceivedCommands+0x40>)
 80038a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038ac:	080038d1 	.word	0x080038d1
 80038b0:	080038d1 	.word	0x080038d1
 80038b4:	08003939 	.word	0x08003939
 80038b8:	0800394d 	.word	0x0800394d
 80038bc:	08003997 	.word	0x08003997
 80038c0:	080038d1 	.word	0x080038d1
 80038c4:	080038d1 	.word	0x080038d1
 80038c8:	08003939 	.word	0x08003939
 80038cc:	0800394d 	.word	0x0800394d
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80038d0:	69fb      	ldr	r3, [r7, #28]
 80038d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80038d6:	f043 0301 	orr.w	r3, r3, #1
 80038da:	b2da      	uxtb	r2, r3
 80038dc:	69fb      	ldr	r3, [r7, #28]
 80038de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80038e2:	68fa      	ldr	r2, [r7, #12]
 80038e4:	69fb      	ldr	r3, [r7, #28]
 80038e6:	699b      	ldr	r3, [r3, #24]
 80038e8:	18d1      	adds	r1, r2, r3
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	69ba      	ldr	r2, [r7, #24]
 80038ee:	69f8      	ldr	r0, [r7, #28]
 80038f0:	f7ff ff7a 	bl	80037e8 <prvInsertTimerInActiveList>
 80038f4:	4603      	mov	r3, r0
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d063      	beq.n	80039c2 <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80038fa:	69fb      	ldr	r3, [r7, #28]
 80038fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003900:	f003 0304 	and.w	r3, r3, #4
 8003904:	2b00      	cmp	r3, #0
 8003906:	d009      	beq.n	800391c <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8003908:	68fa      	ldr	r2, [r7, #12]
 800390a:	69fb      	ldr	r3, [r7, #28]
 800390c:	699b      	ldr	r3, [r3, #24]
 800390e:	4413      	add	r3, r2
 8003910:	69ba      	ldr	r2, [r7, #24]
 8003912:	4619      	mov	r1, r3
 8003914:	69f8      	ldr	r0, [r7, #28]
 8003916:	f7ff fe71 	bl	80035fc <prvReloadTimer>
 800391a:	e008      	b.n	800392e <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800391c:	69fb      	ldr	r3, [r7, #28]
 800391e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003922:	f023 0301 	bic.w	r3, r3, #1
 8003926:	b2da      	uxtb	r2, r3
 8003928:	69fb      	ldr	r3, [r7, #28]
 800392a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800392e:	69fb      	ldr	r3, [r7, #28]
 8003930:	6a1b      	ldr	r3, [r3, #32]
 8003932:	69f8      	ldr	r0, [r7, #28]
 8003934:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8003936:	e044      	b.n	80039c2 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003938:	69fb      	ldr	r3, [r7, #28]
 800393a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800393e:	f023 0301 	bic.w	r3, r3, #1
 8003942:	b2da      	uxtb	r2, r3
 8003944:	69fb      	ldr	r3, [r7, #28]
 8003946:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 800394a:	e03a      	b.n	80039c2 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800394c:	69fb      	ldr	r3, [r7, #28]
 800394e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003952:	f043 0301 	orr.w	r3, r3, #1
 8003956:	b2da      	uxtb	r2, r3
 8003958:	69fb      	ldr	r3, [r7, #28]
 800395a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800395e:	68fa      	ldr	r2, [r7, #12]
 8003960:	69fb      	ldr	r3, [r7, #28]
 8003962:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003964:	69fb      	ldr	r3, [r7, #28]
 8003966:	699b      	ldr	r3, [r3, #24]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d10a      	bne.n	8003982 <prvProcessReceivedCommands+0x116>
        __asm volatile
 800396c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003970:	f383 8811 	msr	BASEPRI, r3
 8003974:	f3bf 8f6f 	isb	sy
 8003978:	f3bf 8f4f 	dsb	sy
 800397c:	617b      	str	r3, [r7, #20]
    }
 800397e:	bf00      	nop
 8003980:	e7fe      	b.n	8003980 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003982:	69fb      	ldr	r3, [r7, #28]
 8003984:	699a      	ldr	r2, [r3, #24]
 8003986:	69bb      	ldr	r3, [r7, #24]
 8003988:	18d1      	adds	r1, r2, r3
 800398a:	69bb      	ldr	r3, [r7, #24]
 800398c:	69ba      	ldr	r2, [r7, #24]
 800398e:	69f8      	ldr	r0, [r7, #28]
 8003990:	f7ff ff2a 	bl	80037e8 <prvInsertTimerInActiveList>
                        break;
 8003994:	e015      	b.n	80039c2 <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003996:	69fb      	ldr	r3, [r7, #28]
 8003998:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800399c:	f003 0302 	and.w	r3, r3, #2
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d103      	bne.n	80039ac <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 80039a4:	69f8      	ldr	r0, [r7, #28]
 80039a6:	f000 fb43 	bl	8004030 <vPortFree>
 80039aa:	e00a      	b.n	80039c2 <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80039ac:	69fb      	ldr	r3, [r7, #28]
 80039ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80039b2:	f023 0301 	bic.w	r3, r3, #1
 80039b6:	b2da      	uxtb	r2, r3
 80039b8:	69fb      	ldr	r3, [r7, #28]
 80039ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80039be:	e000      	b.n	80039c2 <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
 80039c0:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80039c2:	4b08      	ldr	r3, [pc, #32]	; (80039e4 <prvProcessReceivedCommands+0x178>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f107 0108 	add.w	r1, r7, #8
 80039ca:	2200      	movs	r2, #0
 80039cc:	4618      	mov	r0, r3
 80039ce:	f7fe fc5f 	bl	8002290 <xQueueReceive>
 80039d2:	4603      	mov	r3, r0
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	f47f af4d 	bne.w	8003874 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 80039da:	bf00      	nop
 80039dc:	bf00      	nop
 80039de:	3720      	adds	r7, #32
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}
 80039e4:	200001f8 	.word	0x200001f8

080039e8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b082      	sub	sp, #8
 80039ec:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80039ee:	e009      	b.n	8003a04 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80039f0:	4b0e      	ldr	r3, [pc, #56]	; (8003a2c <prvSwitchTimerLists+0x44>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	68db      	ldr	r3, [r3, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 80039fa:	f04f 31ff 	mov.w	r1, #4294967295
 80039fe:	6838      	ldr	r0, [r7, #0]
 8003a00:	f7ff fe1e 	bl	8003640 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003a04:	4b09      	ldr	r3, [pc, #36]	; (8003a2c <prvSwitchTimerLists+0x44>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d1f0      	bne.n	80039f0 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8003a0e:	4b07      	ldr	r3, [pc, #28]	; (8003a2c <prvSwitchTimerLists+0x44>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8003a14:	4b06      	ldr	r3, [pc, #24]	; (8003a30 <prvSwitchTimerLists+0x48>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a04      	ldr	r2, [pc, #16]	; (8003a2c <prvSwitchTimerLists+0x44>)
 8003a1a:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8003a1c:	4a04      	ldr	r2, [pc, #16]	; (8003a30 <prvSwitchTimerLists+0x48>)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6013      	str	r3, [r2, #0]
    }
 8003a22:	bf00      	nop
 8003a24:	3708      	adds	r7, #8
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}
 8003a2a:	bf00      	nop
 8003a2c:	200001f0 	.word	0x200001f0
 8003a30:	200001f4 	.word	0x200001f4

08003a34 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8003a34:	b580      	push	{r7, lr}
 8003a36:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8003a38:	f000 f95e 	bl	8003cf8 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8003a3c:	4b12      	ldr	r3, [pc, #72]	; (8003a88 <prvCheckForValidListAndQueue+0x54>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d11d      	bne.n	8003a80 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8003a44:	4811      	ldr	r0, [pc, #68]	; (8003a8c <prvCheckForValidListAndQueue+0x58>)
 8003a46:	f7fe fa91 	bl	8001f6c <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8003a4a:	4811      	ldr	r0, [pc, #68]	; (8003a90 <prvCheckForValidListAndQueue+0x5c>)
 8003a4c:	f7fe fa8e 	bl	8001f6c <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8003a50:	4b10      	ldr	r3, [pc, #64]	; (8003a94 <prvCheckForValidListAndQueue+0x60>)
 8003a52:	4a0e      	ldr	r2, [pc, #56]	; (8003a8c <prvCheckForValidListAndQueue+0x58>)
 8003a54:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8003a56:	4b10      	ldr	r3, [pc, #64]	; (8003a98 <prvCheckForValidListAndQueue+0x64>)
 8003a58:	4a0d      	ldr	r2, [pc, #52]	; (8003a90 <prvCheckForValidListAndQueue+0x5c>)
 8003a5a:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	210c      	movs	r1, #12
 8003a60:	200a      	movs	r0, #10
 8003a62:	f7fe fba3 	bl	80021ac <xQueueGenericCreate>
 8003a66:	4603      	mov	r3, r0
 8003a68:	4a07      	ldr	r2, [pc, #28]	; (8003a88 <prvCheckForValidListAndQueue+0x54>)
 8003a6a:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8003a6c:	4b06      	ldr	r3, [pc, #24]	; (8003a88 <prvCheckForValidListAndQueue+0x54>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d005      	beq.n	8003a80 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003a74:	4b04      	ldr	r3, [pc, #16]	; (8003a88 <prvCheckForValidListAndQueue+0x54>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4908      	ldr	r1, [pc, #32]	; (8003a9c <prvCheckForValidListAndQueue+0x68>)
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f7fe fd76 	bl	800256c <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003a80:	f000 f96a 	bl	8003d58 <vPortExitCritical>
    }
 8003a84:	bf00      	nop
 8003a86:	bd80      	pop	{r7, pc}
 8003a88:	200001f8 	.word	0x200001f8
 8003a8c:	200001c8 	.word	0x200001c8
 8003a90:	200001dc 	.word	0x200001dc
 8003a94:	200001f0 	.word	0x200001f0
 8003a98:	200001f4 	.word	0x200001f4
 8003a9c:	080042f8 	.word	0x080042f8

08003aa0 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b085      	sub	sp, #20
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	60f8      	str	r0, [r7, #12]
 8003aa8:	60b9      	str	r1, [r7, #8]
 8003aaa:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	3b04      	subs	r3, #4
 8003ab0:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003ab8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	3b04      	subs	r3, #4
 8003abe:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	f023 0201 	bic.w	r2, r3, #1
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	3b04      	subs	r3, #4
 8003ace:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003ad0:	4a0c      	ldr	r2, [pc, #48]	; (8003b04 <pxPortInitialiseStack+0x64>)
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	3b14      	subs	r3, #20
 8003ada:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003adc:	687a      	ldr	r2, [r7, #4]
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	3b04      	subs	r3, #4
 8003ae6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f06f 0202 	mvn.w	r2, #2
 8003aee:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	3b20      	subs	r3, #32
 8003af4:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8003af6:	68fb      	ldr	r3, [r7, #12]
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	3714      	adds	r7, #20
 8003afc:	46bd      	mov	sp, r7
 8003afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b02:	4770      	bx	lr
 8003b04:	08003b09 	.word	0x08003b09

08003b08 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b085      	sub	sp, #20
 8003b0c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8003b12:	4b12      	ldr	r3, [pc, #72]	; (8003b5c <prvTaskExitError+0x54>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b1a:	d00a      	beq.n	8003b32 <prvTaskExitError+0x2a>
        __asm volatile
 8003b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b20:	f383 8811 	msr	BASEPRI, r3
 8003b24:	f3bf 8f6f 	isb	sy
 8003b28:	f3bf 8f4f 	dsb	sy
 8003b2c:	60fb      	str	r3, [r7, #12]
    }
 8003b2e:	bf00      	nop
 8003b30:	e7fe      	b.n	8003b30 <prvTaskExitError+0x28>
        __asm volatile
 8003b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b36:	f383 8811 	msr	BASEPRI, r3
 8003b3a:	f3bf 8f6f 	isb	sy
 8003b3e:	f3bf 8f4f 	dsb	sy
 8003b42:	60bb      	str	r3, [r7, #8]
    }
 8003b44:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8003b46:	bf00      	nop
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d0fc      	beq.n	8003b48 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003b4e:	bf00      	nop
 8003b50:	bf00      	nop
 8003b52:	3714      	adds	r7, #20
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr
 8003b5c:	20000010 	.word	0x20000010

08003b60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003b60:	4b07      	ldr	r3, [pc, #28]	; (8003b80 <pxCurrentTCBConst2>)
 8003b62:	6819      	ldr	r1, [r3, #0]
 8003b64:	6808      	ldr	r0, [r1, #0]
 8003b66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b6a:	f380 8809 	msr	PSP, r0
 8003b6e:	f3bf 8f6f 	isb	sy
 8003b72:	f04f 0000 	mov.w	r0, #0
 8003b76:	f380 8811 	msr	BASEPRI, r0
 8003b7a:	4770      	bx	lr
 8003b7c:	f3af 8000 	nop.w

08003b80 <pxCurrentTCBConst2>:
 8003b80:	200000c4 	.word	0x200000c4
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003b84:	bf00      	nop
 8003b86:	bf00      	nop

08003b88 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003b88:	4808      	ldr	r0, [pc, #32]	; (8003bac <prvPortStartFirstTask+0x24>)
 8003b8a:	6800      	ldr	r0, [r0, #0]
 8003b8c:	6800      	ldr	r0, [r0, #0]
 8003b8e:	f380 8808 	msr	MSP, r0
 8003b92:	f04f 0000 	mov.w	r0, #0
 8003b96:	f380 8814 	msr	CONTROL, r0
 8003b9a:	b662      	cpsie	i
 8003b9c:	b661      	cpsie	f
 8003b9e:	f3bf 8f4f 	dsb	sy
 8003ba2:	f3bf 8f6f 	isb	sy
 8003ba6:	df00      	svc	0
 8003ba8:	bf00      	nop
 8003baa:	0000      	.short	0x0000
 8003bac:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003bb0:	bf00      	nop
 8003bb2:	bf00      	nop

08003bb4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b086      	sub	sp, #24
 8003bb8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003bba:	4b46      	ldr	r3, [pc, #280]	; (8003cd4 <xPortStartScheduler+0x120>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a46      	ldr	r2, [pc, #280]	; (8003cd8 <xPortStartScheduler+0x124>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d10a      	bne.n	8003bda <xPortStartScheduler+0x26>
        __asm volatile
 8003bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bc8:	f383 8811 	msr	BASEPRI, r3
 8003bcc:	f3bf 8f6f 	isb	sy
 8003bd0:	f3bf 8f4f 	dsb	sy
 8003bd4:	613b      	str	r3, [r7, #16]
    }
 8003bd6:	bf00      	nop
 8003bd8:	e7fe      	b.n	8003bd8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003bda:	4b3e      	ldr	r3, [pc, #248]	; (8003cd4 <xPortStartScheduler+0x120>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a3f      	ldr	r2, [pc, #252]	; (8003cdc <xPortStartScheduler+0x128>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d10a      	bne.n	8003bfa <xPortStartScheduler+0x46>
        __asm volatile
 8003be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003be8:	f383 8811 	msr	BASEPRI, r3
 8003bec:	f3bf 8f6f 	isb	sy
 8003bf0:	f3bf 8f4f 	dsb	sy
 8003bf4:	60fb      	str	r3, [r7, #12]
    }
 8003bf6:	bf00      	nop
 8003bf8:	e7fe      	b.n	8003bf8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003bfa:	4b39      	ldr	r3, [pc, #228]	; (8003ce0 <xPortStartScheduler+0x12c>)
 8003bfc:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	781b      	ldrb	r3, [r3, #0]
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	22ff      	movs	r2, #255	; 0xff
 8003c0a:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	781b      	ldrb	r3, [r3, #0]
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003c14:	78fb      	ldrb	r3, [r7, #3]
 8003c16:	b2db      	uxtb	r3, r3
 8003c18:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003c1c:	b2da      	uxtb	r2, r3
 8003c1e:	4b31      	ldr	r3, [pc, #196]	; (8003ce4 <xPortStartScheduler+0x130>)
 8003c20:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003c22:	4b31      	ldr	r3, [pc, #196]	; (8003ce8 <xPortStartScheduler+0x134>)
 8003c24:	2207      	movs	r2, #7
 8003c26:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003c28:	e009      	b.n	8003c3e <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 8003c2a:	4b2f      	ldr	r3, [pc, #188]	; (8003ce8 <xPortStartScheduler+0x134>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	3b01      	subs	r3, #1
 8003c30:	4a2d      	ldr	r2, [pc, #180]	; (8003ce8 <xPortStartScheduler+0x134>)
 8003c32:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003c34:	78fb      	ldrb	r3, [r7, #3]
 8003c36:	b2db      	uxtb	r3, r3
 8003c38:	005b      	lsls	r3, r3, #1
 8003c3a:	b2db      	uxtb	r3, r3
 8003c3c:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003c3e:	78fb      	ldrb	r3, [r7, #3]
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c46:	2b80      	cmp	r3, #128	; 0x80
 8003c48:	d0ef      	beq.n	8003c2a <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003c4a:	4b27      	ldr	r3, [pc, #156]	; (8003ce8 <xPortStartScheduler+0x134>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f1c3 0307 	rsb	r3, r3, #7
 8003c52:	2b04      	cmp	r3, #4
 8003c54:	d00a      	beq.n	8003c6c <xPortStartScheduler+0xb8>
        __asm volatile
 8003c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c5a:	f383 8811 	msr	BASEPRI, r3
 8003c5e:	f3bf 8f6f 	isb	sy
 8003c62:	f3bf 8f4f 	dsb	sy
 8003c66:	60bb      	str	r3, [r7, #8]
    }
 8003c68:	bf00      	nop
 8003c6a:	e7fe      	b.n	8003c6a <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003c6c:	4b1e      	ldr	r3, [pc, #120]	; (8003ce8 <xPortStartScheduler+0x134>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	021b      	lsls	r3, r3, #8
 8003c72:	4a1d      	ldr	r2, [pc, #116]	; (8003ce8 <xPortStartScheduler+0x134>)
 8003c74:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003c76:	4b1c      	ldr	r3, [pc, #112]	; (8003ce8 <xPortStartScheduler+0x134>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003c7e:	4a1a      	ldr	r2, [pc, #104]	; (8003ce8 <xPortStartScheduler+0x134>)
 8003c80:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	b2da      	uxtb	r2, r3
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8003c8a:	4b18      	ldr	r3, [pc, #96]	; (8003cec <xPortStartScheduler+0x138>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a17      	ldr	r2, [pc, #92]	; (8003cec <xPortStartScheduler+0x138>)
 8003c90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003c94:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003c96:	4b15      	ldr	r3, [pc, #84]	; (8003cec <xPortStartScheduler+0x138>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a14      	ldr	r2, [pc, #80]	; (8003cec <xPortStartScheduler+0x138>)
 8003c9c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003ca0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003ca2:	f000 f8db 	bl	8003e5c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003ca6:	4b12      	ldr	r3, [pc, #72]	; (8003cf0 <xPortStartScheduler+0x13c>)
 8003ca8:	2200      	movs	r2, #0
 8003caa:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8003cac:	f000 f8fa 	bl	8003ea4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003cb0:	4b10      	ldr	r3, [pc, #64]	; (8003cf4 <xPortStartScheduler+0x140>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a0f      	ldr	r2, [pc, #60]	; (8003cf4 <xPortStartScheduler+0x140>)
 8003cb6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003cba:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8003cbc:	f7ff ff64 	bl	8003b88 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003cc0:	f7ff f8f6 	bl	8002eb0 <vTaskSwitchContext>
    prvTaskExitError();
 8003cc4:	f7ff ff20 	bl	8003b08 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003cc8:	2300      	movs	r3, #0
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3718      	adds	r7, #24
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}
 8003cd2:	bf00      	nop
 8003cd4:	e000ed00 	.word	0xe000ed00
 8003cd8:	410fc271 	.word	0x410fc271
 8003cdc:	410fc270 	.word	0x410fc270
 8003ce0:	e000e400 	.word	0xe000e400
 8003ce4:	20000204 	.word	0x20000204
 8003ce8:	20000208 	.word	0x20000208
 8003cec:	e000ed20 	.word	0xe000ed20
 8003cf0:	20000010 	.word	0x20000010
 8003cf4:	e000ef34 	.word	0xe000ef34

08003cf8 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b083      	sub	sp, #12
 8003cfc:	af00      	add	r7, sp, #0
        __asm volatile
 8003cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d02:	f383 8811 	msr	BASEPRI, r3
 8003d06:	f3bf 8f6f 	isb	sy
 8003d0a:	f3bf 8f4f 	dsb	sy
 8003d0e:	607b      	str	r3, [r7, #4]
    }
 8003d10:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8003d12:	4b0f      	ldr	r3, [pc, #60]	; (8003d50 <vPortEnterCritical+0x58>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	3301      	adds	r3, #1
 8003d18:	4a0d      	ldr	r2, [pc, #52]	; (8003d50 <vPortEnterCritical+0x58>)
 8003d1a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8003d1c:	4b0c      	ldr	r3, [pc, #48]	; (8003d50 <vPortEnterCritical+0x58>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d10f      	bne.n	8003d44 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003d24:	4b0b      	ldr	r3, [pc, #44]	; (8003d54 <vPortEnterCritical+0x5c>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d00a      	beq.n	8003d44 <vPortEnterCritical+0x4c>
        __asm volatile
 8003d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d32:	f383 8811 	msr	BASEPRI, r3
 8003d36:	f3bf 8f6f 	isb	sy
 8003d3a:	f3bf 8f4f 	dsb	sy
 8003d3e:	603b      	str	r3, [r7, #0]
    }
 8003d40:	bf00      	nop
 8003d42:	e7fe      	b.n	8003d42 <vPortEnterCritical+0x4a>
    }
}
 8003d44:	bf00      	nop
 8003d46:	370c      	adds	r7, #12
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4e:	4770      	bx	lr
 8003d50:	20000010 	.word	0x20000010
 8003d54:	e000ed04 	.word	0xe000ed04

08003d58 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b083      	sub	sp, #12
 8003d5c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8003d5e:	4b12      	ldr	r3, [pc, #72]	; (8003da8 <vPortExitCritical+0x50>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d10a      	bne.n	8003d7c <vPortExitCritical+0x24>
        __asm volatile
 8003d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d6a:	f383 8811 	msr	BASEPRI, r3
 8003d6e:	f3bf 8f6f 	isb	sy
 8003d72:	f3bf 8f4f 	dsb	sy
 8003d76:	607b      	str	r3, [r7, #4]
    }
 8003d78:	bf00      	nop
 8003d7a:	e7fe      	b.n	8003d7a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8003d7c:	4b0a      	ldr	r3, [pc, #40]	; (8003da8 <vPortExitCritical+0x50>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	3b01      	subs	r3, #1
 8003d82:	4a09      	ldr	r2, [pc, #36]	; (8003da8 <vPortExitCritical+0x50>)
 8003d84:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003d86:	4b08      	ldr	r3, [pc, #32]	; (8003da8 <vPortExitCritical+0x50>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d105      	bne.n	8003d9a <vPortExitCritical+0x42>
 8003d8e:	2300      	movs	r3, #0
 8003d90:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003d98:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8003d9a:	bf00      	nop
 8003d9c:	370c      	adds	r7, #12
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da4:	4770      	bx	lr
 8003da6:	bf00      	nop
 8003da8:	20000010 	.word	0x20000010
 8003dac:	00000000 	.word	0x00000000

08003db0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003db0:	f3ef 8009 	mrs	r0, PSP
 8003db4:	f3bf 8f6f 	isb	sy
 8003db8:	4b15      	ldr	r3, [pc, #84]	; (8003e10 <pxCurrentTCBConst>)
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	f01e 0f10 	tst.w	lr, #16
 8003dc0:	bf08      	it	eq
 8003dc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003dc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dca:	6010      	str	r0, [r2, #0]
 8003dcc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003dd0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003dd4:	f380 8811 	msr	BASEPRI, r0
 8003dd8:	f3bf 8f4f 	dsb	sy
 8003ddc:	f3bf 8f6f 	isb	sy
 8003de0:	f7ff f866 	bl	8002eb0 <vTaskSwitchContext>
 8003de4:	f04f 0000 	mov.w	r0, #0
 8003de8:	f380 8811 	msr	BASEPRI, r0
 8003dec:	bc09      	pop	{r0, r3}
 8003dee:	6819      	ldr	r1, [r3, #0]
 8003df0:	6808      	ldr	r0, [r1, #0]
 8003df2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003df6:	f01e 0f10 	tst.w	lr, #16
 8003dfa:	bf08      	it	eq
 8003dfc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003e00:	f380 8809 	msr	PSP, r0
 8003e04:	f3bf 8f6f 	isb	sy
 8003e08:	4770      	bx	lr
 8003e0a:	bf00      	nop
 8003e0c:	f3af 8000 	nop.w

08003e10 <pxCurrentTCBConst>:
 8003e10:	200000c4 	.word	0x200000c4
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003e14:	bf00      	nop
 8003e16:	bf00      	nop

08003e18 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b082      	sub	sp, #8
 8003e1c:	af00      	add	r7, sp, #0
        __asm volatile
 8003e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e22:	f383 8811 	msr	BASEPRI, r3
 8003e26:	f3bf 8f6f 	isb	sy
 8003e2a:	f3bf 8f4f 	dsb	sy
 8003e2e:	607b      	str	r3, [r7, #4]
    }
 8003e30:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003e32:	f7fe ff27 	bl	8002c84 <xTaskIncrementTick>
 8003e36:	4603      	mov	r3, r0
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d003      	beq.n	8003e44 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003e3c:	4b06      	ldr	r3, [pc, #24]	; (8003e58 <SysTick_Handler+0x40>)
 8003e3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e42:	601a      	str	r2, [r3, #0]
 8003e44:	2300      	movs	r3, #0
 8003e46:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	f383 8811 	msr	BASEPRI, r3
    }
 8003e4e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8003e50:	bf00      	nop
 8003e52:	3708      	adds	r7, #8
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}
 8003e58:	e000ed04 	.word	0xe000ed04

08003e5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003e60:	4b0b      	ldr	r3, [pc, #44]	; (8003e90 <vPortSetupTimerInterrupt+0x34>)
 8003e62:	2200      	movs	r2, #0
 8003e64:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003e66:	4b0b      	ldr	r3, [pc, #44]	; (8003e94 <vPortSetupTimerInterrupt+0x38>)
 8003e68:	2200      	movs	r2, #0
 8003e6a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003e6c:	4b0a      	ldr	r3, [pc, #40]	; (8003e98 <vPortSetupTimerInterrupt+0x3c>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a0a      	ldr	r2, [pc, #40]	; (8003e9c <vPortSetupTimerInterrupt+0x40>)
 8003e72:	fba2 2303 	umull	r2, r3, r2, r3
 8003e76:	099b      	lsrs	r3, r3, #6
 8003e78:	4a09      	ldr	r2, [pc, #36]	; (8003ea0 <vPortSetupTimerInterrupt+0x44>)
 8003e7a:	3b01      	subs	r3, #1
 8003e7c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003e7e:	4b04      	ldr	r3, [pc, #16]	; (8003e90 <vPortSetupTimerInterrupt+0x34>)
 8003e80:	2207      	movs	r2, #7
 8003e82:	601a      	str	r2, [r3, #0]
}
 8003e84:	bf00      	nop
 8003e86:	46bd      	mov	sp, r7
 8003e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8c:	4770      	bx	lr
 8003e8e:	bf00      	nop
 8003e90:	e000e010 	.word	0xe000e010
 8003e94:	e000e018 	.word	0xe000e018
 8003e98:	20000000 	.word	0x20000000
 8003e9c:	10624dd3 	.word	0x10624dd3
 8003ea0:	e000e014 	.word	0xe000e014

08003ea4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003ea4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003eb4 <vPortEnableVFP+0x10>
 8003ea8:	6801      	ldr	r1, [r0, #0]
 8003eaa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003eae:	6001      	str	r1, [r0, #0]
 8003eb0:	4770      	bx	lr
 8003eb2:	0000      	.short	0x0000
 8003eb4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8003eb8:	bf00      	nop
 8003eba:	bf00      	nop

08003ebc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b08a      	sub	sp, #40	; 0x28
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8003ec8:	f7fe fdc2 	bl	8002a50 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8003ecc:	4b53      	ldr	r3, [pc, #332]	; (800401c <pvPortMalloc+0x160>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d101      	bne.n	8003ed8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8003ed4:	f000 f908 	bl	80040e8 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d012      	beq.n	8003f04 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8003ede:	2208      	movs	r2, #8
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	f003 0307 	and.w	r3, r3, #7
 8003ee6:	1ad3      	subs	r3, r2, r3
 8003ee8:	3308      	adds	r3, #8
 8003eea:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8003eec:	69bb      	ldr	r3, [r7, #24]
 8003eee:	43db      	mvns	r3, r3
 8003ef0:	687a      	ldr	r2, [r7, #4]
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	d804      	bhi.n	8003f00 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	69bb      	ldr	r3, [r7, #24]
 8003efa:	4413      	add	r3, r2
 8003efc:	607b      	str	r3, [r7, #4]
 8003efe:	e001      	b.n	8003f04 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8003f00:	2300      	movs	r3, #0
 8003f02:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	db70      	blt.n	8003fec <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d06d      	beq.n	8003fec <pvPortMalloc+0x130>
 8003f10:	4b43      	ldr	r3, [pc, #268]	; (8004020 <pvPortMalloc+0x164>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	687a      	ldr	r2, [r7, #4]
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d868      	bhi.n	8003fec <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8003f1a:	4b42      	ldr	r3, [pc, #264]	; (8004024 <pvPortMalloc+0x168>)
 8003f1c:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8003f1e:	4b41      	ldr	r3, [pc, #260]	; (8004024 <pvPortMalloc+0x168>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003f24:	e004      	b.n	8003f30 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8003f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f28:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8003f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	687a      	ldr	r2, [r7, #4]
 8003f36:	429a      	cmp	r2, r3
 8003f38:	d903      	bls.n	8003f42 <pvPortMalloc+0x86>
 8003f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d1f1      	bne.n	8003f26 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8003f42:	4b36      	ldr	r3, [pc, #216]	; (800401c <pvPortMalloc+0x160>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	d04f      	beq.n	8003fec <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003f4c:	6a3b      	ldr	r3, [r7, #32]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	2208      	movs	r2, #8
 8003f52:	4413      	add	r3, r2
 8003f54:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	6a3b      	ldr	r3, [r7, #32]
 8003f5c:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f60:	685a      	ldr	r2, [r3, #4]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	1ad2      	subs	r2, r2, r3
 8003f66:	2308      	movs	r3, #8
 8003f68:	005b      	lsls	r3, r3, #1
 8003f6a:	429a      	cmp	r2, r3
 8003f6c:	d91f      	bls.n	8003fae <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003f6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	4413      	add	r3, r2
 8003f74:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	f003 0307 	and.w	r3, r3, #7
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d00a      	beq.n	8003f96 <pvPortMalloc+0xda>
        __asm volatile
 8003f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f84:	f383 8811 	msr	BASEPRI, r3
 8003f88:	f3bf 8f6f 	isb	sy
 8003f8c:	f3bf 8f4f 	dsb	sy
 8003f90:	613b      	str	r3, [r7, #16]
    }
 8003f92:	bf00      	nop
 8003f94:	e7fe      	b.n	8003f94 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f98:	685a      	ldr	r2, [r3, #4]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	1ad2      	subs	r2, r2, r3
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8003fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa4:	687a      	ldr	r2, [r7, #4]
 8003fa6:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003fa8:	6978      	ldr	r0, [r7, #20]
 8003faa:	f000 f8f9 	bl	80041a0 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003fae:	4b1c      	ldr	r3, [pc, #112]	; (8004020 <pvPortMalloc+0x164>)
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	1ad3      	subs	r3, r2, r3
 8003fb8:	4a19      	ldr	r2, [pc, #100]	; (8004020 <pvPortMalloc+0x164>)
 8003fba:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003fbc:	4b18      	ldr	r3, [pc, #96]	; (8004020 <pvPortMalloc+0x164>)
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	4b19      	ldr	r3, [pc, #100]	; (8004028 <pvPortMalloc+0x16c>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d203      	bcs.n	8003fd0 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003fc8:	4b15      	ldr	r3, [pc, #84]	; (8004020 <pvPortMalloc+0x164>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a16      	ldr	r2, [pc, #88]	; (8004028 <pvPortMalloc+0x16c>)
 8003fce:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8003fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fda:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8003fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fde:	2200      	movs	r2, #0
 8003fe0:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8003fe2:	4b12      	ldr	r3, [pc, #72]	; (800402c <pvPortMalloc+0x170>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	3301      	adds	r3, #1
 8003fe8:	4a10      	ldr	r2, [pc, #64]	; (800402c <pvPortMalloc+0x170>)
 8003fea:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8003fec:	f7fe fd3e 	bl	8002a6c <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003ff0:	69fb      	ldr	r3, [r7, #28]
 8003ff2:	f003 0307 	and.w	r3, r3, #7
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d00a      	beq.n	8004010 <pvPortMalloc+0x154>
        __asm volatile
 8003ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ffe:	f383 8811 	msr	BASEPRI, r3
 8004002:	f3bf 8f6f 	isb	sy
 8004006:	f3bf 8f4f 	dsb	sy
 800400a:	60fb      	str	r3, [r7, #12]
    }
 800400c:	bf00      	nop
 800400e:	e7fe      	b.n	800400e <pvPortMalloc+0x152>
    return pvReturn;
 8004010:	69fb      	ldr	r3, [r7, #28]
}
 8004012:	4618      	mov	r0, r3
 8004014:	3728      	adds	r7, #40	; 0x28
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}
 800401a:	bf00      	nop
 800401c:	20012e14 	.word	0x20012e14
 8004020:	20012e18 	.word	0x20012e18
 8004024:	20012e0c 	.word	0x20012e0c
 8004028:	20012e1c 	.word	0x20012e1c
 800402c:	20012e20 	.word	0x20012e20

08004030 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b086      	sub	sp, #24
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d049      	beq.n	80040d6 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8004042:	2308      	movs	r3, #8
 8004044:	425b      	negs	r3, r3
 8004046:	697a      	ldr	r2, [r7, #20]
 8004048:	4413      	add	r3, r2
 800404a:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	2b00      	cmp	r3, #0
 8004056:	db0a      	blt.n	800406e <vPortFree+0x3e>
        __asm volatile
 8004058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800405c:	f383 8811 	msr	BASEPRI, r3
 8004060:	f3bf 8f6f 	isb	sy
 8004064:	f3bf 8f4f 	dsb	sy
 8004068:	60fb      	str	r3, [r7, #12]
    }
 800406a:	bf00      	nop
 800406c:	e7fe      	b.n	800406c <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d00a      	beq.n	800408c <vPortFree+0x5c>
        __asm volatile
 8004076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800407a:	f383 8811 	msr	BASEPRI, r3
 800407e:	f3bf 8f6f 	isb	sy
 8004082:	f3bf 8f4f 	dsb	sy
 8004086:	60bb      	str	r3, [r7, #8]
    }
 8004088:	bf00      	nop
 800408a:	e7fe      	b.n	800408a <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	0fdb      	lsrs	r3, r3, #31
 8004092:	f003 0301 	and.w	r3, r3, #1
 8004096:	b2db      	uxtb	r3, r3
 8004098:	2b00      	cmp	r3, #0
 800409a:	d01c      	beq.n	80040d6 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d118      	bne.n	80040d6 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 80040b0:	f7fe fcce 	bl	8002a50 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	685a      	ldr	r2, [r3, #4]
 80040b8:	4b09      	ldr	r3, [pc, #36]	; (80040e0 <vPortFree+0xb0>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4413      	add	r3, r2
 80040be:	4a08      	ldr	r2, [pc, #32]	; (80040e0 <vPortFree+0xb0>)
 80040c0:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80040c2:	6938      	ldr	r0, [r7, #16]
 80040c4:	f000 f86c 	bl	80041a0 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80040c8:	4b06      	ldr	r3, [pc, #24]	; (80040e4 <vPortFree+0xb4>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	3301      	adds	r3, #1
 80040ce:	4a05      	ldr	r2, [pc, #20]	; (80040e4 <vPortFree+0xb4>)
 80040d0:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80040d2:	f7fe fccb 	bl	8002a6c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80040d6:	bf00      	nop
 80040d8:	3718      	adds	r7, #24
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}
 80040de:	bf00      	nop
 80040e0:	20012e18 	.word	0x20012e18
 80040e4:	20012e24 	.word	0x20012e24

080040e8 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80040e8:	b480      	push	{r7}
 80040ea:	b085      	sub	sp, #20
 80040ec:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80040ee:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80040f2:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 80040f4:	4b25      	ldr	r3, [pc, #148]	; (800418c <prvHeapInit+0xa4>)
 80040f6:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	f003 0307 	and.w	r3, r3, #7
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d00c      	beq.n	800411c <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	3307      	adds	r3, #7
 8004106:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	f023 0307 	bic.w	r3, r3, #7
 800410e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8004110:	68ba      	ldr	r2, [r7, #8]
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	1ad3      	subs	r3, r2, r3
 8004116:	4a1d      	ldr	r2, [pc, #116]	; (800418c <prvHeapInit+0xa4>)
 8004118:	4413      	add	r3, r2
 800411a:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004120:	4a1b      	ldr	r2, [pc, #108]	; (8004190 <prvHeapInit+0xa8>)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8004126:	4b1a      	ldr	r3, [pc, #104]	; (8004190 <prvHeapInit+0xa8>)
 8004128:	2200      	movs	r2, #0
 800412a:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	68ba      	ldr	r2, [r7, #8]
 8004130:	4413      	add	r3, r2
 8004132:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8004134:	2208      	movs	r2, #8
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	1a9b      	subs	r3, r3, r2
 800413a:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f023 0307 	bic.w	r3, r3, #7
 8004142:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	4a13      	ldr	r2, [pc, #76]	; (8004194 <prvHeapInit+0xac>)
 8004148:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800414a:	4b12      	ldr	r3, [pc, #72]	; (8004194 <prvHeapInit+0xac>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	2200      	movs	r2, #0
 8004150:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8004152:	4b10      	ldr	r3, [pc, #64]	; (8004194 <prvHeapInit+0xac>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	2200      	movs	r2, #0
 8004158:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	68fa      	ldr	r2, [r7, #12]
 8004162:	1ad2      	subs	r2, r2, r3
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004168:	4b0a      	ldr	r3, [pc, #40]	; (8004194 <prvHeapInit+0xac>)
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	4a08      	ldr	r2, [pc, #32]	; (8004198 <prvHeapInit+0xb0>)
 8004176:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	4a07      	ldr	r2, [pc, #28]	; (800419c <prvHeapInit+0xb4>)
 800417e:	6013      	str	r3, [r2, #0]
}
 8004180:	bf00      	nop
 8004182:	3714      	adds	r7, #20
 8004184:	46bd      	mov	sp, r7
 8004186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418a:	4770      	bx	lr
 800418c:	2000020c 	.word	0x2000020c
 8004190:	20012e0c 	.word	0x20012e0c
 8004194:	20012e14 	.word	0x20012e14
 8004198:	20012e1c 	.word	0x20012e1c
 800419c:	20012e18 	.word	0x20012e18

080041a0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80041a0:	b480      	push	{r7}
 80041a2:	b085      	sub	sp, #20
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80041a8:	4b28      	ldr	r3, [pc, #160]	; (800424c <prvInsertBlockIntoFreeList+0xac>)
 80041aa:	60fb      	str	r3, [r7, #12]
 80041ac:	e002      	b.n	80041b4 <prvInsertBlockIntoFreeList+0x14>
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	60fb      	str	r3, [r7, #12]
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	687a      	ldr	r2, [r7, #4]
 80041ba:	429a      	cmp	r2, r3
 80041bc:	d8f7      	bhi.n	80041ae <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	68ba      	ldr	r2, [r7, #8]
 80041c8:	4413      	add	r3, r2
 80041ca:	687a      	ldr	r2, [r7, #4]
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d108      	bne.n	80041e2 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	685a      	ldr	r2, [r3, #4]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	441a      	add	r2, r3
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	68ba      	ldr	r2, [r7, #8]
 80041ec:	441a      	add	r2, r3
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	429a      	cmp	r2, r3
 80041f4:	d118      	bne.n	8004228 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	4b15      	ldr	r3, [pc, #84]	; (8004250 <prvInsertBlockIntoFreeList+0xb0>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	429a      	cmp	r2, r3
 8004200:	d00d      	beq.n	800421e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	685a      	ldr	r2, [r3, #4]
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	441a      	add	r2, r3
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	601a      	str	r2, [r3, #0]
 800421c:	e008      	b.n	8004230 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800421e:	4b0c      	ldr	r3, [pc, #48]	; (8004250 <prvInsertBlockIntoFreeList+0xb0>)
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	601a      	str	r2, [r3, #0]
 8004226:	e003      	b.n	8004230 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004230:	68fa      	ldr	r2, [r7, #12]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	429a      	cmp	r2, r3
 8004236:	d002      	beq.n	800423e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	687a      	ldr	r2, [r7, #4]
 800423c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800423e:	bf00      	nop
 8004240:	3714      	adds	r7, #20
 8004242:	46bd      	mov	sp, r7
 8004244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004248:	4770      	bx	lr
 800424a:	bf00      	nop
 800424c:	20012e0c 	.word	0x20012e0c
 8004250:	20012e14 	.word	0x20012e14

08004254 <memset>:
 8004254:	4402      	add	r2, r0
 8004256:	4603      	mov	r3, r0
 8004258:	4293      	cmp	r3, r2
 800425a:	d100      	bne.n	800425e <memset+0xa>
 800425c:	4770      	bx	lr
 800425e:	f803 1b01 	strb.w	r1, [r3], #1
 8004262:	e7f9      	b.n	8004258 <memset+0x4>

08004264 <__libc_init_array>:
 8004264:	b570      	push	{r4, r5, r6, lr}
 8004266:	4d0d      	ldr	r5, [pc, #52]	; (800429c <__libc_init_array+0x38>)
 8004268:	4c0d      	ldr	r4, [pc, #52]	; (80042a0 <__libc_init_array+0x3c>)
 800426a:	1b64      	subs	r4, r4, r5
 800426c:	10a4      	asrs	r4, r4, #2
 800426e:	2600      	movs	r6, #0
 8004270:	42a6      	cmp	r6, r4
 8004272:	d109      	bne.n	8004288 <__libc_init_array+0x24>
 8004274:	4d0b      	ldr	r5, [pc, #44]	; (80042a4 <__libc_init_array+0x40>)
 8004276:	4c0c      	ldr	r4, [pc, #48]	; (80042a8 <__libc_init_array+0x44>)
 8004278:	f000 f826 	bl	80042c8 <_init>
 800427c:	1b64      	subs	r4, r4, r5
 800427e:	10a4      	asrs	r4, r4, #2
 8004280:	2600      	movs	r6, #0
 8004282:	42a6      	cmp	r6, r4
 8004284:	d105      	bne.n	8004292 <__libc_init_array+0x2e>
 8004286:	bd70      	pop	{r4, r5, r6, pc}
 8004288:	f855 3b04 	ldr.w	r3, [r5], #4
 800428c:	4798      	blx	r3
 800428e:	3601      	adds	r6, #1
 8004290:	e7ee      	b.n	8004270 <__libc_init_array+0xc>
 8004292:	f855 3b04 	ldr.w	r3, [r5], #4
 8004296:	4798      	blx	r3
 8004298:	3601      	adds	r6, #1
 800429a:	e7f2      	b.n	8004282 <__libc_init_array+0x1e>
 800429c:	08004320 	.word	0x08004320
 80042a0:	08004320 	.word	0x08004320
 80042a4:	08004320 	.word	0x08004320
 80042a8:	08004324 	.word	0x08004324

080042ac <memcpy>:
 80042ac:	440a      	add	r2, r1
 80042ae:	4291      	cmp	r1, r2
 80042b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80042b4:	d100      	bne.n	80042b8 <memcpy+0xc>
 80042b6:	4770      	bx	lr
 80042b8:	b510      	push	{r4, lr}
 80042ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80042be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80042c2:	4291      	cmp	r1, r2
 80042c4:	d1f9      	bne.n	80042ba <memcpy+0xe>
 80042c6:	bd10      	pop	{r4, pc}

080042c8 <_init>:
 80042c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042ca:	bf00      	nop
 80042cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042ce:	bc08      	pop	{r3}
 80042d0:	469e      	mov	lr, r3
 80042d2:	4770      	bx	lr

080042d4 <_fini>:
 80042d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042d6:	bf00      	nop
 80042d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042da:	bc08      	pop	{r3}
 80042dc:	469e      	mov	lr, r3
 80042de:	4770      	bx	lr
