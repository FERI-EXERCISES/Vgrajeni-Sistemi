
freeRTOS Projektna.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bf64  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000130  0800c104  0800c104  0001c104  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c234  0800c234  00020150  2**0
                  CONTENTS
  4 .ARM          00000008  0800c234  0800c234  0001c234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c23c  0800c23c  00020150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c23c  0800c23c  0001c23c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c240  0800c240  0001c240  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000150  20000000  0800c244  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006854  20000150  0800c394  00020150  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200069a4  0800c394  000269a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020150  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 13 .debug_info   00022729  00000000  00000000  000201c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004e69  00000000  00000000  000428ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001db0  00000000  00000000  00047758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000016ed  00000000  00000000  00049508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000677a  00000000  00000000  0004abf5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00023146  00000000  00000000  0005136f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009e80a  00000000  00000000  000744b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008104  00000000  00000000  00112cc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  0011adc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000150 	.word	0x20000150
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c0ec 	.word	0x0800c0ec

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000154 	.word	0x20000154
 80001dc:	0800c0ec 	.word	0x0800c0ec

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b970 	b.w	80004d8 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	460d      	mov	r5, r1
 8000218:	4604      	mov	r4, r0
 800021a:	460f      	mov	r7, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14a      	bne.n	80002b6 <__udivmoddi4+0xa6>
 8000220:	428a      	cmp	r2, r1
 8000222:	4694      	mov	ip, r2
 8000224:	d965      	bls.n	80002f2 <__udivmoddi4+0xe2>
 8000226:	fab2 f382 	clz	r3, r2
 800022a:	b143      	cbz	r3, 800023e <__udivmoddi4+0x2e>
 800022c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000230:	f1c3 0220 	rsb	r2, r3, #32
 8000234:	409f      	lsls	r7, r3
 8000236:	fa20 f202 	lsr.w	r2, r0, r2
 800023a:	4317      	orrs	r7, r2
 800023c:	409c      	lsls	r4, r3
 800023e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000242:	fa1f f58c 	uxth.w	r5, ip
 8000246:	fbb7 f1fe 	udiv	r1, r7, lr
 800024a:	0c22      	lsrs	r2, r4, #16
 800024c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000250:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000254:	fb01 f005 	mul.w	r0, r1, r5
 8000258:	4290      	cmp	r0, r2
 800025a:	d90a      	bls.n	8000272 <__udivmoddi4+0x62>
 800025c:	eb1c 0202 	adds.w	r2, ip, r2
 8000260:	f101 37ff 	add.w	r7, r1, #4294967295
 8000264:	f080 811c 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000268:	4290      	cmp	r0, r2
 800026a:	f240 8119 	bls.w	80004a0 <__udivmoddi4+0x290>
 800026e:	3902      	subs	r1, #2
 8000270:	4462      	add	r2, ip
 8000272:	1a12      	subs	r2, r2, r0
 8000274:	b2a4      	uxth	r4, r4
 8000276:	fbb2 f0fe 	udiv	r0, r2, lr
 800027a:	fb0e 2210 	mls	r2, lr, r0, r2
 800027e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000282:	fb00 f505 	mul.w	r5, r0, r5
 8000286:	42a5      	cmp	r5, r4
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x90>
 800028a:	eb1c 0404 	adds.w	r4, ip, r4
 800028e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000292:	f080 8107 	bcs.w	80004a4 <__udivmoddi4+0x294>
 8000296:	42a5      	cmp	r5, r4
 8000298:	f240 8104 	bls.w	80004a4 <__udivmoddi4+0x294>
 800029c:	4464      	add	r4, ip
 800029e:	3802      	subs	r0, #2
 80002a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a4:	1b64      	subs	r4, r4, r5
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11e      	cbz	r6, 80002b2 <__udivmoddi4+0xa2>
 80002aa:	40dc      	lsrs	r4, r3
 80002ac:	2300      	movs	r3, #0
 80002ae:	e9c6 4300 	strd	r4, r3, [r6]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d908      	bls.n	80002cc <__udivmoddi4+0xbc>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80ed 	beq.w	800049a <__udivmoddi4+0x28a>
 80002c0:	2100      	movs	r1, #0
 80002c2:	e9c6 0500 	strd	r0, r5, [r6]
 80002c6:	4608      	mov	r0, r1
 80002c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002cc:	fab3 f183 	clz	r1, r3
 80002d0:	2900      	cmp	r1, #0
 80002d2:	d149      	bne.n	8000368 <__udivmoddi4+0x158>
 80002d4:	42ab      	cmp	r3, r5
 80002d6:	d302      	bcc.n	80002de <__udivmoddi4+0xce>
 80002d8:	4282      	cmp	r2, r0
 80002da:	f200 80f8 	bhi.w	80004ce <__udivmoddi4+0x2be>
 80002de:	1a84      	subs	r4, r0, r2
 80002e0:	eb65 0203 	sbc.w	r2, r5, r3
 80002e4:	2001      	movs	r0, #1
 80002e6:	4617      	mov	r7, r2
 80002e8:	2e00      	cmp	r6, #0
 80002ea:	d0e2      	beq.n	80002b2 <__udivmoddi4+0xa2>
 80002ec:	e9c6 4700 	strd	r4, r7, [r6]
 80002f0:	e7df      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002f2:	b902      	cbnz	r2, 80002f6 <__udivmoddi4+0xe6>
 80002f4:	deff      	udf	#255	; 0xff
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x210>
 8000300:	1a8a      	subs	r2, r1, r2
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2101      	movs	r1, #1
 800030c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000310:	fb07 2015 	mls	r0, r7, r5, r2
 8000314:	0c22      	lsrs	r2, r4, #16
 8000316:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800031a:	fb0e f005 	mul.w	r0, lr, r5
 800031e:	4290      	cmp	r0, r2
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x124>
 8000322:	eb1c 0202 	adds.w	r2, ip, r2
 8000326:	f105 38ff 	add.w	r8, r5, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4290      	cmp	r0, r2
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2b8>
 8000332:	4645      	mov	r5, r8
 8000334:	1a12      	subs	r2, r2, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb2 f0f7 	udiv	r0, r2, r7
 800033c:	fb07 2210 	mls	r2, r7, r0, r2
 8000340:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x14e>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 32ff 	add.w	r2, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x14c>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2c2>
 800035c:	4610      	mov	r0, r2
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000366:	e79f      	b.n	80002a8 <__udivmoddi4+0x98>
 8000368:	f1c1 0720 	rsb	r7, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa05 f401 	lsl.w	r4, r5, r1
 800037a:	fa20 f307 	lsr.w	r3, r0, r7
 800037e:	40fd      	lsrs	r5, r7
 8000380:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fbb5 f8f9 	udiv	r8, r5, r9
 800038a:	fa1f fe8c 	uxth.w	lr, ip
 800038e:	fb09 5518 	mls	r5, r9, r8, r5
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000398:	fb08 f50e 	mul.w	r5, r8, lr
 800039c:	42a5      	cmp	r5, r4
 800039e:	fa02 f201 	lsl.w	r2, r2, r1
 80003a2:	fa00 f001 	lsl.w	r0, r0, r1
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2b4>
 80003b4:	42a5      	cmp	r5, r4
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2b4>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4464      	add	r4, ip
 80003c0:	1b64      	subs	r4, r4, r5
 80003c2:	b29d      	uxth	r5, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2ac>
 80003e2:	45a6      	cmp	lr, r4
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2ac>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	4464      	add	r4, ip
 80003ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003ee:	fba3 9502 	umull	r9, r5, r3, r2
 80003f2:	eba4 040e 	sub.w	r4, r4, lr
 80003f6:	42ac      	cmp	r4, r5
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46ae      	mov	lr, r5
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x29c>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x298>
 8000400:	b156      	cbz	r6, 8000418 <__udivmoddi4+0x208>
 8000402:	ebb0 0208 	subs.w	r2, r0, r8
 8000406:	eb64 040e 	sbc.w	r4, r4, lr
 800040a:	fa04 f707 	lsl.w	r7, r4, r7
 800040e:	40ca      	lsrs	r2, r1
 8000410:	40cc      	lsrs	r4, r1
 8000412:	4317      	orrs	r7, r2
 8000414:	e9c6 7400 	strd	r7, r4, [r6]
 8000418:	4618      	mov	r0, r3
 800041a:	2100      	movs	r1, #0
 800041c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000420:	f1c3 0120 	rsb	r1, r3, #32
 8000424:	fa02 fc03 	lsl.w	ip, r2, r3
 8000428:	fa20 f201 	lsr.w	r2, r0, r1
 800042c:	fa25 f101 	lsr.w	r1, r5, r1
 8000430:	409d      	lsls	r5, r3
 8000432:	432a      	orrs	r2, r5
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000440:	fb07 1510 	mls	r5, r7, r0, r1
 8000444:	0c11      	lsrs	r1, r2, #16
 8000446:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800044a:	fb00 f50e 	mul.w	r5, r0, lr
 800044e:	428d      	cmp	r5, r1
 8000450:	fa04 f403 	lsl.w	r4, r4, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x258>
 8000456:	eb1c 0101 	adds.w	r1, ip, r1
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000460:	428d      	cmp	r5, r1
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000464:	3802      	subs	r0, #2
 8000466:	4461      	add	r1, ip
 8000468:	1b49      	subs	r1, r1, r5
 800046a:	b292      	uxth	r2, r2
 800046c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000470:	fb07 1115 	mls	r1, r7, r5, r1
 8000474:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000478:	fb05 f10e 	mul.w	r1, r5, lr
 800047c:	4291      	cmp	r1, r2
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x282>
 8000480:	eb1c 0202 	adds.w	r2, ip, r2
 8000484:	f105 38ff 	add.w	r8, r5, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 800048a:	4291      	cmp	r1, r2
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800048e:	3d02      	subs	r5, #2
 8000490:	4462      	add	r2, ip
 8000492:	1a52      	subs	r2, r2, r1
 8000494:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0xfc>
 800049a:	4631      	mov	r1, r6
 800049c:	4630      	mov	r0, r6
 800049e:	e708      	b.n	80002b2 <__udivmoddi4+0xa2>
 80004a0:	4639      	mov	r1, r7
 80004a2:	e6e6      	b.n	8000272 <__udivmoddi4+0x62>
 80004a4:	4610      	mov	r0, r2
 80004a6:	e6fb      	b.n	80002a0 <__udivmoddi4+0x90>
 80004a8:	4548      	cmp	r0, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004b4:	3b01      	subs	r3, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b8:	4645      	mov	r5, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x282>
 80004bc:	462b      	mov	r3, r5
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1da>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x258>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c8:	3d02      	subs	r5, #2
 80004ca:	4462      	add	r2, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x124>
 80004ce:	4608      	mov	r0, r1
 80004d0:	e70a      	b.n	80002e8 <__udivmoddi4+0xd8>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x14e>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <spi1_beriRegister>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

uint8_t spi1_beriRegister(uint8_t reg) {
 80004dc:	b580      	push	{r7, lr}
 80004de:	b086      	sub	sp, #24
 80004e0:	af02      	add	r7, sp, #8
 80004e2:	4603      	mov	r3, r0
 80004e4:	71fb      	strb	r3, [r7, #7]
    uint16_t buf_out, buf_in;
    reg |= 0x80; // najpomembnejsi bit na 1
 80004e6:	79fb      	ldrb	r3, [r7, #7]
 80004e8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80004ec:	71fb      	strb	r3, [r7, #7]
    buf_out = reg; // little endian, se postavi na pravo mesto ....
 80004ee:	79fb      	ldrb	r3, [r7, #7]
 80004f0:	b29b      	uxth	r3, r3
 80004f2:	81fb      	strh	r3, [r7, #14]
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 80004f4:	2200      	movs	r2, #0
 80004f6:	2108      	movs	r1, #8
 80004f8:	480c      	ldr	r0, [pc, #48]	; (800052c <spi1_beriRegister+0x50>)
 80004fa:	f001 f87b 	bl	80015f4 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&buf_out, (uint8_t*)&buf_in, 2, 2); // blocking posiljanje ....
 80004fe:	f107 020c 	add.w	r2, r7, #12
 8000502:	f107 010e 	add.w	r1, r7, #14
 8000506:	2302      	movs	r3, #2
 8000508:	9300      	str	r3, [sp, #0]
 800050a:	2302      	movs	r3, #2
 800050c:	4808      	ldr	r0, [pc, #32]	; (8000530 <spi1_beriRegister+0x54>)
 800050e:	f004 f883 	bl	8004618 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 8000512:	2201      	movs	r2, #1
 8000514:	2108      	movs	r1, #8
 8000516:	4805      	ldr	r0, [pc, #20]	; (800052c <spi1_beriRegister+0x50>)
 8000518:	f001 f86c 	bl	80015f4 <HAL_GPIO_WritePin>
    return buf_in >> 8; // little endian...
 800051c:	89bb      	ldrh	r3, [r7, #12]
 800051e:	0a1b      	lsrs	r3, r3, #8
 8000520:	b29b      	uxth	r3, r3
 8000522:	b2db      	uxtb	r3, r3
}
 8000524:	4618      	mov	r0, r3
 8000526:	3710      	adds	r7, #16
 8000528:	46bd      	mov	sp, r7
 800052a:	bd80      	pop	{r7, pc}
 800052c:	40021000 	.word	0x40021000
 8000530:	200001c0 	.word	0x200001c0

08000534 <spi1_pisiRegister>:

void spi1_pisiRegister(uint8_t reg, uint8_t vrednost) {
 8000534:	b580      	push	{r7, lr}
 8000536:	b084      	sub	sp, #16
 8000538:	af00      	add	r7, sp, #0
 800053a:	4603      	mov	r3, r0
 800053c:	460a      	mov	r2, r1
 800053e:	71fb      	strb	r3, [r7, #7]
 8000540:	4613      	mov	r3, r2
 8000542:	71bb      	strb	r3, [r7, #6]
    uint16_t buf_out;
    buf_out = reg | (vrednost<<8); // little endian, se postavi na pravo mesto ....
 8000544:	79fb      	ldrb	r3, [r7, #7]
 8000546:	b21a      	sxth	r2, r3
 8000548:	79bb      	ldrb	r3, [r7, #6]
 800054a:	021b      	lsls	r3, r3, #8
 800054c:	b21b      	sxth	r3, r3
 800054e:	4313      	orrs	r3, r2
 8000550:	b21b      	sxth	r3, r3
 8000552:	b29b      	uxth	r3, r3
 8000554:	81fb      	strh	r3, [r7, #14]
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8000556:	2200      	movs	r2, #0
 8000558:	2108      	movs	r1, #8
 800055a:	4809      	ldr	r0, [pc, #36]	; (8000580 <spi1_pisiRegister+0x4c>)
 800055c:	f001 f84a 	bl	80015f4 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, (uint8_t*)&buf_out, 2, 2); // blocking posiljanje ....
 8000560:	f107 010e 	add.w	r1, r7, #14
 8000564:	2302      	movs	r3, #2
 8000566:	2202      	movs	r2, #2
 8000568:	4806      	ldr	r0, [pc, #24]	; (8000584 <spi1_pisiRegister+0x50>)
 800056a:	f003 fe08 	bl	800417e <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 800056e:	2201      	movs	r2, #1
 8000570:	2108      	movs	r1, #8
 8000572:	4803      	ldr	r0, [pc, #12]	; (8000580 <spi1_pisiRegister+0x4c>)
 8000574:	f001 f83e 	bl	80015f4 <HAL_GPIO_WritePin>
}
 8000578:	bf00      	nop
 800057a:	3710      	adds	r7, #16
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}
 8000580:	40021000 	.word	0x40021000
 8000584:	200001c0 	.word	0x200001c0

08000588 <spi1_beriRegistre>:

void spi1_beriRegistre(uint8_t reg, uint8_t* buffer, uint8_t velikost) {
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
 800058e:	4603      	mov	r3, r0
 8000590:	6039      	str	r1, [r7, #0]
 8000592:	71fb      	strb	r3, [r7, #7]
 8000594:	4613      	mov	r3, r2
 8000596:	71bb      	strb	r3, [r7, #6]
    reg |= 0xC0; // najpomembnejsa bita na 1
 8000598:	79fb      	ldrb	r3, [r7, #7]
 800059a:	f063 033f 	orn	r3, r3, #63	; 0x3f
 800059e:	b2db      	uxtb	r3, r3
 80005a0:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 80005a2:	2200      	movs	r2, #0
 80005a4:	2108      	movs	r1, #8
 80005a6:	480c      	ldr	r0, [pc, #48]	; (80005d8 <spi1_beriRegistre+0x50>)
 80005a8:	f001 f824 	bl	80015f4 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &reg, 1, 10); // blocking posiljanje....
 80005ac:	1df9      	adds	r1, r7, #7
 80005ae:	230a      	movs	r3, #10
 80005b0:	2201      	movs	r2, #1
 80005b2:	480a      	ldr	r0, [pc, #40]	; (80005dc <spi1_beriRegistre+0x54>)
 80005b4:	f003 fde3 	bl	800417e <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi1,  buffer, velikost, velikost); // blocking posiljanje....
 80005b8:	79bb      	ldrb	r3, [r7, #6]
 80005ba:	b29a      	uxth	r2, r3
 80005bc:	79bb      	ldrb	r3, [r7, #6]
 80005be:	6839      	ldr	r1, [r7, #0]
 80005c0:	4806      	ldr	r0, [pc, #24]	; (80005dc <spi1_beriRegistre+0x54>)
 80005c2:	f003 ff18 	bl	80043f6 <HAL_SPI_Receive>
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 80005c6:	2201      	movs	r2, #1
 80005c8:	2108      	movs	r1, #8
 80005ca:	4803      	ldr	r0, [pc, #12]	; (80005d8 <spi1_beriRegistre+0x50>)
 80005cc:	f001 f812 	bl	80015f4 <HAL_GPIO_WritePin>
}
 80005d0:	bf00      	nop
 80005d2:	3708      	adds	r7, #8
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	40021000 	.word	0x40021000
 80005dc:	200001c0 	.word	0x200001c0

080005e0 <initGyro>:

void initGyro() { // ne pozabit klicat te funkcije
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
    uint8_t cip = spi1_beriRegister(0x0F);
 80005e6:	200f      	movs	r0, #15
 80005e8:	f7ff ff78 	bl	80004dc <spi1_beriRegister>
 80005ec:	4603      	mov	r3, r0
 80005ee:	71fb      	strb	r3, [r7, #7]
    if (cip!=0xD4 && cip!=0xD3) {
 80005f0:	79fb      	ldrb	r3, [r7, #7]
 80005f2:	2bd4      	cmp	r3, #212	; 0xd4
 80005f4:	d003      	beq.n	80005fe <initGyro+0x1e>
 80005f6:	79fb      	ldrb	r3, [r7, #7]
 80005f8:	2bd3      	cmp	r3, #211	; 0xd3
 80005fa:	d000      	beq.n	80005fe <initGyro+0x1e>
        for (;;);
 80005fc:	e7fe      	b.n	80005fc <initGyro+0x1c>
    }
    spi1_pisiRegister(0x20, 0x4F); // CTRL_REG1 PD Zen Yen Xen 200hz
 80005fe:	214f      	movs	r1, #79	; 0x4f
 8000600:	2020      	movs	r0, #32
 8000602:	f7ff ff97 	bl	8000534 <spi1_pisiRegister>
    //TUKAJ NASTAVI Hz pa sensitivity +-500dps
    spi1_pisiRegister(0x22, 0x08); //DRDY
 8000606:	2108      	movs	r1, #8
 8000608:	2022      	movs	r0, #34	; 0x22
 800060a:	f7ff ff93 	bl	8000534 <spi1_pisiRegister>
    spi1_pisiRegister(0x23, 0x10);
 800060e:	2110      	movs	r1, #16
 8000610:	2023      	movs	r0, #35	; 0x23
 8000612:	f7ff ff8f 	bl	8000534 <spi1_pisiRegister>
}
 8000616:	bf00      	nop
 8000618:	3708      	adds	r7, #8
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
	...

08000620 <i2c1_beriRegistre>:
uint8_t i2c1_pisiRegister(uint8_t naprava, uint8_t reg, uint8_t podatek) {
    naprava <<= 1;
    return HAL_I2C_Mem_Write(&hi2c1, naprava, reg, I2C_MEMADD_SIZE_8BIT, &podatek, 1, 10);
}

void i2c1_beriRegistre(uint8_t naprava, uint8_t reg, uint8_t* podatek, uint8_t dolzina) {
 8000620:	b580      	push	{r7, lr}
 8000622:	b086      	sub	sp, #24
 8000624:	af04      	add	r7, sp, #16
 8000626:	603a      	str	r2, [r7, #0]
 8000628:	461a      	mov	r2, r3
 800062a:	4603      	mov	r3, r0
 800062c:	71fb      	strb	r3, [r7, #7]
 800062e:	460b      	mov	r3, r1
 8000630:	71bb      	strb	r3, [r7, #6]
 8000632:	4613      	mov	r3, r2
 8000634:	717b      	strb	r3, [r7, #5]
    if ((dolzina>1)&&(naprava==0x19))  // ce je naprava 0x19 moramo postaviti ta bit, ce zelimo brati vec zlogov
 8000636:	797b      	ldrb	r3, [r7, #5]
 8000638:	2b01      	cmp	r3, #1
 800063a:	d906      	bls.n	800064a <i2c1_beriRegistre+0x2a>
 800063c:	79fb      	ldrb	r3, [r7, #7]
 800063e:	2b19      	cmp	r3, #25
 8000640:	d103      	bne.n	800064a <i2c1_beriRegistre+0x2a>
        reg |= 0x80;
 8000642:	79bb      	ldrb	r3, [r7, #6]
 8000644:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000648:	71bb      	strb	r3, [r7, #6]
    naprava <<= 1;
 800064a:	79fb      	ldrb	r3, [r7, #7]
 800064c:	005b      	lsls	r3, r3, #1
 800064e:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Read(&hi2c1, naprava, reg, I2C_MEMADD_SIZE_8BIT, podatek, dolzina, dolzina);
 8000650:	79fb      	ldrb	r3, [r7, #7]
 8000652:	b299      	uxth	r1, r3
 8000654:	79bb      	ldrb	r3, [r7, #6]
 8000656:	b298      	uxth	r0, r3
 8000658:	797b      	ldrb	r3, [r7, #5]
 800065a:	b29b      	uxth	r3, r3
 800065c:	797a      	ldrb	r2, [r7, #5]
 800065e:	9202      	str	r2, [sp, #8]
 8000660:	9301      	str	r3, [sp, #4]
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	9300      	str	r3, [sp, #0]
 8000666:	2301      	movs	r3, #1
 8000668:	4602      	mov	r2, r0
 800066a:	4803      	ldr	r0, [pc, #12]	; (8000678 <i2c1_beriRegistre+0x58>)
 800066c:	f001 f920 	bl	80018b0 <HAL_I2C_Mem_Read>
}
 8000670:	bf00      	nop
 8000672:	3708      	adds	r7, #8
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	2000016c 	.word	0x2000016c

0800067c <TaskReadGyro>:
//	}
//
//
//}

void TaskReadGyro(void *pvParameters){
 800067c:	b580      	push	{r7, lr}
 800067e:	b084      	sub	sp, #16
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
	int16_t gyroX;
	int16_t gyroY;
	int16_t gyroZ;
	while(1){
		spi1_beriRegistre(0x28, (uint8_t*)&gyroX, 2);
 8000684:	f107 030e 	add.w	r3, r7, #14
 8000688:	2202      	movs	r2, #2
 800068a:	4619      	mov	r1, r3
 800068c:	2028      	movs	r0, #40	; 0x28
 800068e:	f7ff ff7b 	bl	8000588 <spi1_beriRegistre>
		spi1_beriRegistre(0x2A, (uint8_t*)&gyroY, 2);
 8000692:	f107 030c 	add.w	r3, r7, #12
 8000696:	2202      	movs	r2, #2
 8000698:	4619      	mov	r1, r3
 800069a:	202a      	movs	r0, #42	; 0x2a
 800069c:	f7ff ff74 	bl	8000588 <spi1_beriRegistre>
		spi1_beriRegistre(0x2C, (uint8_t*)&gyroZ, 2);
 80006a0:	f107 030a 	add.w	r3, r7, #10
 80006a4:	2202      	movs	r2, #2
 80006a6:	4619      	mov	r1, r3
 80006a8:	202c      	movs	r0, #44	; 0x2c
 80006aa:	f7ff ff6d 	bl	8000588 <spi1_beriRegistre>

		xQueueSendToBack(QueueGyro, &gyroX, 0);
 80006ae:	4b0c      	ldr	r3, [pc, #48]	; (80006e0 <TaskReadGyro+0x64>)
 80006b0:	6818      	ldr	r0, [r3, #0]
 80006b2:	f107 010e 	add.w	r1, r7, #14
 80006b6:	2300      	movs	r3, #0
 80006b8:	2200      	movs	r2, #0
 80006ba:	f008 fc77 	bl	8008fac <xQueueGenericSend>
		xQueueSendToBack(QueueGyro, &gyroY, 0);
 80006be:	4b08      	ldr	r3, [pc, #32]	; (80006e0 <TaskReadGyro+0x64>)
 80006c0:	6818      	ldr	r0, [r3, #0]
 80006c2:	f107 010c 	add.w	r1, r7, #12
 80006c6:	2300      	movs	r3, #0
 80006c8:	2200      	movs	r2, #0
 80006ca:	f008 fc6f 	bl	8008fac <xQueueGenericSend>
		xQueueSendToBack(QueueGyro, &gyroZ, 0);
 80006ce:	4b04      	ldr	r3, [pc, #16]	; (80006e0 <TaskReadGyro+0x64>)
 80006d0:	6818      	ldr	r0, [r3, #0]
 80006d2:	f107 010a 	add.w	r1, r7, #10
 80006d6:	2300      	movs	r3, #0
 80006d8:	2200      	movs	r2, #0
 80006da:	f008 fc67 	bl	8008fac <xQueueGenericSend>
		spi1_beriRegistre(0x28, (uint8_t*)&gyroX, 2);
 80006de:	e7d1      	b.n	8000684 <TaskReadGyro+0x8>
 80006e0:	2000021c 	.word	0x2000021c

080006e4 <TaskReadAccel>:
	}
}

void TaskReadAccel(void *pvParameters){
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b084      	sub	sp, #16
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
	int16_t accelX;
	int16_t accelY;
	int16_t accelZ;

	while(1){
		i2c1_beriRegistre(0x19, 0x28,(uint8_t*)&accelX, 2);
 80006ec:	f107 020e 	add.w	r2, r7, #14
 80006f0:	2302      	movs	r3, #2
 80006f2:	2128      	movs	r1, #40	; 0x28
 80006f4:	2019      	movs	r0, #25
 80006f6:	f7ff ff93 	bl	8000620 <i2c1_beriRegistre>
		i2c1_beriRegistre(0x19, 0x2A,(uint8_t*)&accelY, 2);
 80006fa:	f107 020c 	add.w	r2, r7, #12
 80006fe:	2302      	movs	r3, #2
 8000700:	212a      	movs	r1, #42	; 0x2a
 8000702:	2019      	movs	r0, #25
 8000704:	f7ff ff8c 	bl	8000620 <i2c1_beriRegistre>
		i2c1_beriRegistre(0x19, 0x2C,(uint8_t*)&accelZ, 2);
 8000708:	f107 020a 	add.w	r2, r7, #10
 800070c:	2302      	movs	r3, #2
 800070e:	212c      	movs	r1, #44	; 0x2c
 8000710:	2019      	movs	r0, #25
 8000712:	f7ff ff85 	bl	8000620 <i2c1_beriRegistre>

		xQueueSendToBack(QueueAccel, &accelX, 0);
 8000716:	4b0c      	ldr	r3, [pc, #48]	; (8000748 <TaskReadAccel+0x64>)
 8000718:	6818      	ldr	r0, [r3, #0]
 800071a:	f107 010e 	add.w	r1, r7, #14
 800071e:	2300      	movs	r3, #0
 8000720:	2200      	movs	r2, #0
 8000722:	f008 fc43 	bl	8008fac <xQueueGenericSend>
		xQueueSendToBack(QueueAccel, &accelY, 0);
 8000726:	4b08      	ldr	r3, [pc, #32]	; (8000748 <TaskReadAccel+0x64>)
 8000728:	6818      	ldr	r0, [r3, #0]
 800072a:	f107 010c 	add.w	r1, r7, #12
 800072e:	2300      	movs	r3, #0
 8000730:	2200      	movs	r2, #0
 8000732:	f008 fc3b 	bl	8008fac <xQueueGenericSend>
		xQueueSendToBack(QueueAccel, &accelZ, 0);
 8000736:	4b04      	ldr	r3, [pc, #16]	; (8000748 <TaskReadAccel+0x64>)
 8000738:	6818      	ldr	r0, [r3, #0]
 800073a:	f107 010a 	add.w	r1, r7, #10
 800073e:	2300      	movs	r3, #0
 8000740:	2200      	movs	r2, #0
 8000742:	f008 fc33 	bl	8008fac <xQueueGenericSend>
		i2c1_beriRegistre(0x19, 0x28,(uint8_t*)&accelX, 2);
 8000746:	e7d1      	b.n	80006ec <TaskReadAccel+0x8>
 8000748:	20000220 	.word	0x20000220

0800074c <TaskSendGyro>:
	}

}

void TaskSendGyro(void *pvParameters){
 800074c:	b580      	push	{r7, lr}
 800074e:	b086      	sub	sp, #24
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
	int16_t meritev[4];

	meritev[0] = 0xaaaa;
 8000754:	f64a 23aa 	movw	r3, #43690	; 0xaaaa
 8000758:	81bb      	strh	r3, [r7, #12]
	const TickType_t xTicksToWait = pdMS_TO_TICKS(100);
 800075a:	2364      	movs	r3, #100	; 0x64
 800075c:	617b      	str	r3, [r7, #20]
	while(1){
		xQueueReceive(QueueGyro, &meritev[1], xTicksToWait);
 800075e:	4b11      	ldr	r3, [pc, #68]	; (80007a4 <TaskSendGyro+0x58>)
 8000760:	6818      	ldr	r0, [r3, #0]
 8000762:	f107 030c 	add.w	r3, r7, #12
 8000766:	3302      	adds	r3, #2
 8000768:	697a      	ldr	r2, [r7, #20]
 800076a:	4619      	mov	r1, r3
 800076c:	f008 fdb8 	bl	80092e0 <xQueueReceive>
		xQueueReceive(QueueGyro, &meritev[2], xTicksToWait);
 8000770:	4b0c      	ldr	r3, [pc, #48]	; (80007a4 <TaskSendGyro+0x58>)
 8000772:	6818      	ldr	r0, [r3, #0]
 8000774:	f107 030c 	add.w	r3, r7, #12
 8000778:	3304      	adds	r3, #4
 800077a:	697a      	ldr	r2, [r7, #20]
 800077c:	4619      	mov	r1, r3
 800077e:	f008 fdaf 	bl	80092e0 <xQueueReceive>
		xQueueReceive(QueueGyro, &meritev[3], xTicksToWait);
 8000782:	4b08      	ldr	r3, [pc, #32]	; (80007a4 <TaskSendGyro+0x58>)
 8000784:	6818      	ldr	r0, [r3, #0]
 8000786:	f107 030c 	add.w	r3, r7, #12
 800078a:	3306      	adds	r3, #6
 800078c:	697a      	ldr	r2, [r7, #20]
 800078e:	4619      	mov	r1, r3
 8000790:	f008 fda6 	bl	80092e0 <xQueueReceive>
		//posli
		CDC_Transmit_FS((uint8_t*)&meritev, sizeof(meritev));
 8000794:	f107 030c 	add.w	r3, r7, #12
 8000798:	2108      	movs	r1, #8
 800079a:	4618      	mov	r0, r3
 800079c:	f00a ff5c 	bl	800b658 <CDC_Transmit_FS>
	while(1){
 80007a0:	e7dd      	b.n	800075e <TaskSendGyro+0x12>
 80007a2:	bf00      	nop
 80007a4:	2000021c 	.word	0x2000021c

080007a8 <TaskSendAccel>:

	}
}
void TaskSendAccel(void *pvParameters){
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b086      	sub	sp, #24
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
	int16_t meritev[4];

	meritev[0] = 0xbbbb;
 80007b0:	f64b 33bb 	movw	r3, #48059	; 0xbbbb
 80007b4:	81bb      	strh	r3, [r7, #12]
	const TickType_t xTicksToWait = pdMS_TO_TICKS(100);
 80007b6:	2364      	movs	r3, #100	; 0x64
 80007b8:	617b      	str	r3, [r7, #20]
	while(1){
		xQueueReceive(QueueAccel, &meritev[1], xTicksToWait);
 80007ba:	4b11      	ldr	r3, [pc, #68]	; (8000800 <TaskSendAccel+0x58>)
 80007bc:	6818      	ldr	r0, [r3, #0]
 80007be:	f107 030c 	add.w	r3, r7, #12
 80007c2:	3302      	adds	r3, #2
 80007c4:	697a      	ldr	r2, [r7, #20]
 80007c6:	4619      	mov	r1, r3
 80007c8:	f008 fd8a 	bl	80092e0 <xQueueReceive>
		xQueueReceive(QueueAccel, &meritev[2], xTicksToWait);
 80007cc:	4b0c      	ldr	r3, [pc, #48]	; (8000800 <TaskSendAccel+0x58>)
 80007ce:	6818      	ldr	r0, [r3, #0]
 80007d0:	f107 030c 	add.w	r3, r7, #12
 80007d4:	3304      	adds	r3, #4
 80007d6:	697a      	ldr	r2, [r7, #20]
 80007d8:	4619      	mov	r1, r3
 80007da:	f008 fd81 	bl	80092e0 <xQueueReceive>
		xQueueReceive(QueueAccel, &meritev[3], xTicksToWait);
 80007de:	4b08      	ldr	r3, [pc, #32]	; (8000800 <TaskSendAccel+0x58>)
 80007e0:	6818      	ldr	r0, [r3, #0]
 80007e2:	f107 030c 	add.w	r3, r7, #12
 80007e6:	3306      	adds	r3, #6
 80007e8:	697a      	ldr	r2, [r7, #20]
 80007ea:	4619      	mov	r1, r3
 80007ec:	f008 fd78 	bl	80092e0 <xQueueReceive>
		//posli
		CDC_Transmit_FS((uint8_t*)&meritev, sizeof(meritev));
 80007f0:	f107 030c 	add.w	r3, r7, #12
 80007f4:	2108      	movs	r1, #8
 80007f6:	4618      	mov	r0, r3
 80007f8:	f00a ff2e 	bl	800b658 <CDC_Transmit_FS>
	while(1){
 80007fc:	e7dd      	b.n	80007ba <TaskSendAccel+0x12>
 80007fe:	bf00      	nop
 8000800:	20000220 	.word	0x20000220

08000804 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800080a:	f000 fc27 	bl	800105c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800080e:	f000 f879 	bl	8000904 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000812:	f000 f945 	bl	8000aa0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000816:	f000 f8dd 	bl	80009d4 <MX_I2C1_Init>
  MX_SPI1_Init();
 800081a:	f000 f90b 	bl	8000a34 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  //__HAL_I2C_ENABLE(&hi2c1);
  __HAL_SPI_ENABLE(&hspi1);
 800081e:	4b2a      	ldr	r3, [pc, #168]	; (80008c8 <main+0xc4>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	681a      	ldr	r2, [r3, #0]
 8000824:	4b28      	ldr	r3, [pc, #160]	; (80008c8 <main+0xc4>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800082c:	601a      	str	r2, [r3, #0]
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 800082e:	2201      	movs	r2, #1
 8000830:	2108      	movs	r1, #8
 8000832:	4826      	ldr	r0, [pc, #152]	; (80008cc <main+0xc8>)
 8000834:	f000 fede 	bl	80015f4 <HAL_GPIO_WritePin>

  initGyro();
 8000838:	f7ff fed2 	bl	80005e0 <initGyro>
  //initAccel();
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800083c:	f008 f898 	bl	8008970 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  QueueGyro = xQueueCreate( 5, sizeof( int16_t ) );
 8000840:	2200      	movs	r2, #0
 8000842:	2102      	movs	r1, #2
 8000844:	2005      	movs	r0, #5
 8000846:	f008 fb53 	bl	8008ef0 <xQueueGenericCreate>
 800084a:	4603      	mov	r3, r0
 800084c:	4a20      	ldr	r2, [pc, #128]	; (80008d0 <main+0xcc>)
 800084e:	6013      	str	r3, [r2, #0]
  QueueAccel = xQueueCreate( 5, sizeof( int16_t ) );
 8000850:	2200      	movs	r2, #0
 8000852:	2102      	movs	r1, #2
 8000854:	2005      	movs	r0, #5
 8000856:	f008 fb4b 	bl	8008ef0 <xQueueGenericCreate>
 800085a:	4603      	mov	r3, r0
 800085c:	4a1d      	ldr	r2, [pc, #116]	; (80008d4 <main+0xd0>)
 800085e:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000860:	4a1d      	ldr	r2, [pc, #116]	; (80008d8 <main+0xd4>)
 8000862:	2100      	movs	r1, #0
 8000864:	481d      	ldr	r0, [pc, #116]	; (80008dc <main+0xd8>)
 8000866:	f008 f8cd 	bl	8008a04 <osThreadNew>
 800086a:	4603      	mov	r3, r0
 800086c:	4a1c      	ldr	r2, [pc, #112]	; (80008e0 <main+0xdc>)
 800086e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  xTaskCreate(TaskSendGyro, "running branje in posiljanje gyro", configMINIMAL_STACK_SIZE, NULL, 2, NULL);
 8000870:	2300      	movs	r3, #0
 8000872:	9301      	str	r3, [sp, #4]
 8000874:	2302      	movs	r3, #2
 8000876:	9300      	str	r3, [sp, #0]
 8000878:	2300      	movs	r3, #0
 800087a:	2280      	movs	r2, #128	; 0x80
 800087c:	4919      	ldr	r1, [pc, #100]	; (80008e4 <main+0xe0>)
 800087e:	481a      	ldr	r0, [pc, #104]	; (80008e8 <main+0xe4>)
 8000880:	f008 ffd9 	bl	8009836 <xTaskCreate>
  xTaskCreate(TaskSendAccel, "running branje in posiljanje accel", configMINIMAL_STACK_SIZE, NULL, 2, NULL);
 8000884:	2300      	movs	r3, #0
 8000886:	9301      	str	r3, [sp, #4]
 8000888:	2302      	movs	r3, #2
 800088a:	9300      	str	r3, [sp, #0]
 800088c:	2300      	movs	r3, #0
 800088e:	2280      	movs	r2, #128	; 0x80
 8000890:	4916      	ldr	r1, [pc, #88]	; (80008ec <main+0xe8>)
 8000892:	4817      	ldr	r0, [pc, #92]	; (80008f0 <main+0xec>)
 8000894:	f008 ffcf 	bl	8009836 <xTaskCreate>
  xTaskCreate(TaskReadGyro, "running branje in pisanje gyro", configMINIMAL_STACK_SIZE, NULL, 1, NULL);
 8000898:	2300      	movs	r3, #0
 800089a:	9301      	str	r3, [sp, #4]
 800089c:	2301      	movs	r3, #1
 800089e:	9300      	str	r3, [sp, #0]
 80008a0:	2300      	movs	r3, #0
 80008a2:	2280      	movs	r2, #128	; 0x80
 80008a4:	4913      	ldr	r1, [pc, #76]	; (80008f4 <main+0xf0>)
 80008a6:	4814      	ldr	r0, [pc, #80]	; (80008f8 <main+0xf4>)
 80008a8:	f008 ffc5 	bl	8009836 <xTaskCreate>
  xTaskCreate(TaskReadAccel, "running branje in pisanje accel", configMINIMAL_STACK_SIZE, NULL, 1, NULL);
 80008ac:	2300      	movs	r3, #0
 80008ae:	9301      	str	r3, [sp, #4]
 80008b0:	2301      	movs	r3, #1
 80008b2:	9300      	str	r3, [sp, #0]
 80008b4:	2300      	movs	r3, #0
 80008b6:	2280      	movs	r2, #128	; 0x80
 80008b8:	4910      	ldr	r1, [pc, #64]	; (80008fc <main+0xf8>)
 80008ba:	4811      	ldr	r0, [pc, #68]	; (8000900 <main+0xfc>)
 80008bc:	f008 ffbb 	bl	8009836 <xTaskCreate>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80008c0:	f008 f87a 	bl	80089b8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008c4:	e7fe      	b.n	80008c4 <main+0xc0>
 80008c6:	bf00      	nop
 80008c8:	200001c0 	.word	0x200001c0
 80008cc:	40021000 	.word	0x40021000
 80008d0:	2000021c 	.word	0x2000021c
 80008d4:	20000220 	.word	0x20000220
 80008d8:	0800c1f8 	.word	0x0800c1f8
 80008dc:	08000cdd 	.word	0x08000cdd
 80008e0:	20000218 	.word	0x20000218
 80008e4:	0800c110 	.word	0x0800c110
 80008e8:	0800074d 	.word	0x0800074d
 80008ec:	0800c134 	.word	0x0800c134
 80008f0:	080007a9 	.word	0x080007a9
 80008f4:	0800c158 	.word	0x0800c158
 80008f8:	0800067d 	.word	0x0800067d
 80008fc:	0800c178 	.word	0x0800c178
 8000900:	080006e5 	.word	0x080006e5

08000904 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b094      	sub	sp, #80	; 0x50
 8000908:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800090a:	f107 0320 	add.w	r3, r7, #32
 800090e:	2230      	movs	r2, #48	; 0x30
 8000910:	2100      	movs	r1, #0
 8000912:	4618      	mov	r0, r3
 8000914:	f00b fb00 	bl	800bf18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000918:	f107 030c 	add.w	r3, r7, #12
 800091c:	2200      	movs	r2, #0
 800091e:	601a      	str	r2, [r3, #0]
 8000920:	605a      	str	r2, [r3, #4]
 8000922:	609a      	str	r2, [r3, #8]
 8000924:	60da      	str	r2, [r3, #12]
 8000926:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000928:	2300      	movs	r3, #0
 800092a:	60bb      	str	r3, [r7, #8]
 800092c:	4b27      	ldr	r3, [pc, #156]	; (80009cc <SystemClock_Config+0xc8>)
 800092e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000930:	4a26      	ldr	r2, [pc, #152]	; (80009cc <SystemClock_Config+0xc8>)
 8000932:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000936:	6413      	str	r3, [r2, #64]	; 0x40
 8000938:	4b24      	ldr	r3, [pc, #144]	; (80009cc <SystemClock_Config+0xc8>)
 800093a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800093c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000940:	60bb      	str	r3, [r7, #8]
 8000942:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000944:	2300      	movs	r3, #0
 8000946:	607b      	str	r3, [r7, #4]
 8000948:	4b21      	ldr	r3, [pc, #132]	; (80009d0 <SystemClock_Config+0xcc>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4a20      	ldr	r2, [pc, #128]	; (80009d0 <SystemClock_Config+0xcc>)
 800094e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000952:	6013      	str	r3, [r2, #0]
 8000954:	4b1e      	ldr	r3, [pc, #120]	; (80009d0 <SystemClock_Config+0xcc>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800095c:	607b      	str	r3, [r7, #4]
 800095e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000960:	2301      	movs	r3, #1
 8000962:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000964:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000968:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800096a:	2302      	movs	r3, #2
 800096c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800096e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000972:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000974:	2304      	movs	r3, #4
 8000976:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000978:	2348      	movs	r3, #72	; 0x48
 800097a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800097c:	2302      	movs	r3, #2
 800097e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000980:	2303      	movs	r3, #3
 8000982:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000984:	f107 0320 	add.w	r3, r7, #32
 8000988:	4618      	mov	r0, r3
 800098a:	f002 feb9 	bl	8003700 <HAL_RCC_OscConfig>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000994:	f000 f9be 	bl	8000d14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000998:	230f      	movs	r3, #15
 800099a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800099c:	2302      	movs	r3, #2
 800099e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009a0:	2300      	movs	r3, #0
 80009a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009a8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009aa:	2300      	movs	r3, #0
 80009ac:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009ae:	f107 030c 	add.w	r3, r7, #12
 80009b2:	2102      	movs	r1, #2
 80009b4:	4618      	mov	r0, r3
 80009b6:	f003 f91b 	bl	8003bf0 <HAL_RCC_ClockConfig>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80009c0:	f000 f9a8 	bl	8000d14 <Error_Handler>
  }
}
 80009c4:	bf00      	nop
 80009c6:	3750      	adds	r7, #80	; 0x50
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	40023800 	.word	0x40023800
 80009d0:	40007000 	.word	0x40007000

080009d4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009d8:	4b13      	ldr	r3, [pc, #76]	; (8000a28 <MX_I2C1_Init+0x54>)
 80009da:	4a14      	ldr	r2, [pc, #80]	; (8000a2c <MX_I2C1_Init+0x58>)
 80009dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80009de:	4b12      	ldr	r3, [pc, #72]	; (8000a28 <MX_I2C1_Init+0x54>)
 80009e0:	4a13      	ldr	r2, [pc, #76]	; (8000a30 <MX_I2C1_Init+0x5c>)
 80009e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_16_9;
 80009e4:	4b10      	ldr	r3, [pc, #64]	; (8000a28 <MX_I2C1_Init+0x54>)
 80009e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009ea:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80009ec:	4b0e      	ldr	r3, [pc, #56]	; (8000a28 <MX_I2C1_Init+0x54>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009f2:	4b0d      	ldr	r3, [pc, #52]	; (8000a28 <MX_I2C1_Init+0x54>)
 80009f4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009f8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009fa:	4b0b      	ldr	r3, [pc, #44]	; (8000a28 <MX_I2C1_Init+0x54>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a00:	4b09      	ldr	r3, [pc, #36]	; (8000a28 <MX_I2C1_Init+0x54>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a06:	4b08      	ldr	r3, [pc, #32]	; (8000a28 <MX_I2C1_Init+0x54>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a0c:	4b06      	ldr	r3, [pc, #24]	; (8000a28 <MX_I2C1_Init+0x54>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a12:	4805      	ldr	r0, [pc, #20]	; (8000a28 <MX_I2C1_Init+0x54>)
 8000a14:	f000 fe08 	bl	8001628 <HAL_I2C_Init>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 8000a1e:	f000 f979 	bl	8000d14 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a22:	bf00      	nop
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	2000016c 	.word	0x2000016c
 8000a2c:	40005400 	.word	0x40005400
 8000a30:	00061a80 	.word	0x00061a80

08000a34 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000a38:	4b17      	ldr	r3, [pc, #92]	; (8000a98 <MX_SPI1_Init+0x64>)
 8000a3a:	4a18      	ldr	r2, [pc, #96]	; (8000a9c <MX_SPI1_Init+0x68>)
 8000a3c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a3e:	4b16      	ldr	r3, [pc, #88]	; (8000a98 <MX_SPI1_Init+0x64>)
 8000a40:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a44:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a46:	4b14      	ldr	r3, [pc, #80]	; (8000a98 <MX_SPI1_Init+0x64>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a4c:	4b12      	ldr	r3, [pc, #72]	; (8000a98 <MX_SPI1_Init+0x64>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000a52:	4b11      	ldr	r3, [pc, #68]	; (8000a98 <MX_SPI1_Init+0x64>)
 8000a54:	2202      	movs	r2, #2
 8000a56:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000a58:	4b0f      	ldr	r3, [pc, #60]	; (8000a98 <MX_SPI1_Init+0x64>)
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a5e:	4b0e      	ldr	r3, [pc, #56]	; (8000a98 <MX_SPI1_Init+0x64>)
 8000a60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a64:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000a66:	4b0c      	ldr	r3, [pc, #48]	; (8000a98 <MX_SPI1_Init+0x64>)
 8000a68:	2218      	movs	r2, #24
 8000a6a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a6c:	4b0a      	ldr	r3, [pc, #40]	; (8000a98 <MX_SPI1_Init+0x64>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a72:	4b09      	ldr	r3, [pc, #36]	; (8000a98 <MX_SPI1_Init+0x64>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a78:	4b07      	ldr	r3, [pc, #28]	; (8000a98 <MX_SPI1_Init+0x64>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000a7e:	4b06      	ldr	r3, [pc, #24]	; (8000a98 <MX_SPI1_Init+0x64>)
 8000a80:	220a      	movs	r2, #10
 8000a82:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a84:	4804      	ldr	r0, [pc, #16]	; (8000a98 <MX_SPI1_Init+0x64>)
 8000a86:	f003 faf1 	bl	800406c <HAL_SPI_Init>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000a90:	f000 f940 	bl	8000d14 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a94:	bf00      	nop
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	200001c0 	.word	0x200001c0
 8000a9c:	40013000 	.word	0x40013000

08000aa0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b08c      	sub	sp, #48	; 0x30
 8000aa4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa6:	f107 031c 	add.w	r3, r7, #28
 8000aaa:	2200      	movs	r2, #0
 8000aac:	601a      	str	r2, [r3, #0]
 8000aae:	605a      	str	r2, [r3, #4]
 8000ab0:	609a      	str	r2, [r3, #8]
 8000ab2:	60da      	str	r2, [r3, #12]
 8000ab4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	61bb      	str	r3, [r7, #24]
 8000aba:	4b82      	ldr	r3, [pc, #520]	; (8000cc4 <MX_GPIO_Init+0x224>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	4a81      	ldr	r2, [pc, #516]	; (8000cc4 <MX_GPIO_Init+0x224>)
 8000ac0:	f043 0310 	orr.w	r3, r3, #16
 8000ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac6:	4b7f      	ldr	r3, [pc, #508]	; (8000cc4 <MX_GPIO_Init+0x224>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	f003 0310 	and.w	r3, r3, #16
 8000ace:	61bb      	str	r3, [r7, #24]
 8000ad0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	617b      	str	r3, [r7, #20]
 8000ad6:	4b7b      	ldr	r3, [pc, #492]	; (8000cc4 <MX_GPIO_Init+0x224>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	4a7a      	ldr	r2, [pc, #488]	; (8000cc4 <MX_GPIO_Init+0x224>)
 8000adc:	f043 0304 	orr.w	r3, r3, #4
 8000ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae2:	4b78      	ldr	r3, [pc, #480]	; (8000cc4 <MX_GPIO_Init+0x224>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	f003 0304 	and.w	r3, r3, #4
 8000aea:	617b      	str	r3, [r7, #20]
 8000aec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	613b      	str	r3, [r7, #16]
 8000af2:	4b74      	ldr	r3, [pc, #464]	; (8000cc4 <MX_GPIO_Init+0x224>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	4a73      	ldr	r2, [pc, #460]	; (8000cc4 <MX_GPIO_Init+0x224>)
 8000af8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000afc:	6313      	str	r3, [r2, #48]	; 0x30
 8000afe:	4b71      	ldr	r3, [pc, #452]	; (8000cc4 <MX_GPIO_Init+0x224>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b06:	613b      	str	r3, [r7, #16]
 8000b08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	60fb      	str	r3, [r7, #12]
 8000b0e:	4b6d      	ldr	r3, [pc, #436]	; (8000cc4 <MX_GPIO_Init+0x224>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b12:	4a6c      	ldr	r2, [pc, #432]	; (8000cc4 <MX_GPIO_Init+0x224>)
 8000b14:	f043 0301 	orr.w	r3, r3, #1
 8000b18:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1a:	4b6a      	ldr	r3, [pc, #424]	; (8000cc4 <MX_GPIO_Init+0x224>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	f003 0301 	and.w	r3, r3, #1
 8000b22:	60fb      	str	r3, [r7, #12]
 8000b24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b26:	2300      	movs	r3, #0
 8000b28:	60bb      	str	r3, [r7, #8]
 8000b2a:	4b66      	ldr	r3, [pc, #408]	; (8000cc4 <MX_GPIO_Init+0x224>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	4a65      	ldr	r2, [pc, #404]	; (8000cc4 <MX_GPIO_Init+0x224>)
 8000b30:	f043 0302 	orr.w	r3, r3, #2
 8000b34:	6313      	str	r3, [r2, #48]	; 0x30
 8000b36:	4b63      	ldr	r3, [pc, #396]	; (8000cc4 <MX_GPIO_Init+0x224>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	f003 0302 	and.w	r3, r3, #2
 8000b3e:	60bb      	str	r3, [r7, #8]
 8000b40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b42:	2300      	movs	r3, #0
 8000b44:	607b      	str	r3, [r7, #4]
 8000b46:	4b5f      	ldr	r3, [pc, #380]	; (8000cc4 <MX_GPIO_Init+0x224>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	4a5e      	ldr	r2, [pc, #376]	; (8000cc4 <MX_GPIO_Init+0x224>)
 8000b4c:	f043 0308 	orr.w	r3, r3, #8
 8000b50:	6313      	str	r3, [r2, #48]	; 0x30
 8000b52:	4b5c      	ldr	r3, [pc, #368]	; (8000cc4 <MX_GPIO_Init+0x224>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	f003 0308 	and.w	r3, r3, #8
 8000b5a:	607b      	str	r3, [r7, #4]
 8000b5c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000b5e:	2200      	movs	r2, #0
 8000b60:	2108      	movs	r1, #8
 8000b62:	4859      	ldr	r0, [pc, #356]	; (8000cc8 <MX_GPIO_Init+0x228>)
 8000b64:	f000 fd46 	bl	80015f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000b68:	2201      	movs	r2, #1
 8000b6a:	2101      	movs	r1, #1
 8000b6c:	4857      	ldr	r0, [pc, #348]	; (8000ccc <MX_GPIO_Init+0x22c>)
 8000b6e:	f000 fd41 	bl	80015f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000b72:	2200      	movs	r2, #0
 8000b74:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000b78:	4855      	ldr	r0, [pc, #340]	; (8000cd0 <MX_GPIO_Init+0x230>)
 8000b7a:	f000 fd3b 	bl	80015f4 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000b7e:	2304      	movs	r3, #4
 8000b80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b82:	2300      	movs	r3, #0
 8000b84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b86:	2300      	movs	r3, #0
 8000b88:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b8a:	f107 031c 	add.w	r3, r7, #28
 8000b8e:	4619      	mov	r1, r3
 8000b90:	484d      	ldr	r0, [pc, #308]	; (8000cc8 <MX_GPIO_Init+0x228>)
 8000b92:	f000 fbab 	bl	80012ec <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000b96:	2308      	movs	r3, #8
 8000b98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ba2:	2302      	movs	r3, #2
 8000ba4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000ba6:	f107 031c 	add.w	r3, r7, #28
 8000baa:	4619      	mov	r1, r3
 8000bac:	4846      	ldr	r0, [pc, #280]	; (8000cc8 <MX_GPIO_Init+0x228>)
 8000bae:	f000 fb9d 	bl	80012ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PE4 PE5 MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|MEMS_INT2_Pin;
 8000bb2:	2332      	movs	r3, #50	; 0x32
 8000bb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000bb6:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000bba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bc0:	f107 031c 	add.w	r3, r7, #28
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	4840      	ldr	r0, [pc, #256]	; (8000cc8 <MX_GPIO_Init+0x228>)
 8000bc8:	f000 fb90 	bl	80012ec <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000bcc:	2301      	movs	r3, #1
 8000bce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000bdc:	f107 031c 	add.w	r3, r7, #28
 8000be0:	4619      	mov	r1, r3
 8000be2:	483a      	ldr	r0, [pc, #232]	; (8000ccc <MX_GPIO_Init+0x22c>)
 8000be4:	f000 fb82 	bl	80012ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000be8:	2308      	movs	r3, #8
 8000bea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bec:	2302      	movs	r3, #2
 8000bee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000bf8:	2305      	movs	r3, #5
 8000bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000bfc:	f107 031c 	add.w	r3, r7, #28
 8000c00:	4619      	mov	r1, r3
 8000c02:	4832      	ldr	r0, [pc, #200]	; (8000ccc <MX_GPIO_Init+0x22c>)
 8000c04:	f000 fb72 	bl	80012ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c08:	2301      	movs	r3, #1
 8000c0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c0c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000c10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c12:	2300      	movs	r3, #0
 8000c14:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c16:	f107 031c 	add.w	r3, r7, #28
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	482d      	ldr	r0, [pc, #180]	; (8000cd4 <MX_GPIO_Init+0x234>)
 8000c1e:	f000 fb65 	bl	80012ec <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000c22:	2310      	movs	r3, #16
 8000c24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c26:	2302      	movs	r3, #2
 8000c28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c32:	2306      	movs	r3, #6
 8000c34:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000c36:	f107 031c 	add.w	r3, r7, #28
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	4825      	ldr	r0, [pc, #148]	; (8000cd4 <MX_GPIO_Init+0x234>)
 8000c3e:	f000 fb55 	bl	80012ec <HAL_GPIO_Init>

  /*Configure GPIO pins : CLK_IN_Pin PB12 */
  GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000c42:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c50:	2300      	movs	r3, #0
 8000c52:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c54:	2305      	movs	r3, #5
 8000c56:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c58:	f107 031c 	add.w	r3, r7, #28
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	481e      	ldr	r0, [pc, #120]	; (8000cd8 <MX_GPIO_Init+0x238>)
 8000c60:	f000 fb44 	bl	80012ec <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000c64:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000c68:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c72:	2300      	movs	r3, #0
 8000c74:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c76:	f107 031c 	add.w	r3, r7, #28
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	4814      	ldr	r0, [pc, #80]	; (8000cd0 <MX_GPIO_Init+0x230>)
 8000c7e:	f000 fb35 	bl	80012ec <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000c82:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000c86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c88:	2302      	movs	r3, #2
 8000c8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c90:	2300      	movs	r3, #0
 8000c92:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c94:	2306      	movs	r3, #6
 8000c96:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c98:	f107 031c 	add.w	r3, r7, #28
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	480b      	ldr	r0, [pc, #44]	; (8000ccc <MX_GPIO_Init+0x22c>)
 8000ca0:	f000 fb24 	bl	80012ec <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000ca4:	2320      	movs	r3, #32
 8000ca6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cac:	2300      	movs	r3, #0
 8000cae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000cb0:	f107 031c 	add.w	r3, r7, #28
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	4806      	ldr	r0, [pc, #24]	; (8000cd0 <MX_GPIO_Init+0x230>)
 8000cb8:	f000 fb18 	bl	80012ec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000cbc:	bf00      	nop
 8000cbe:	3730      	adds	r7, #48	; 0x30
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	40023800 	.word	0x40023800
 8000cc8:	40021000 	.word	0x40021000
 8000ccc:	40020800 	.word	0x40020800
 8000cd0:	40020c00 	.word	0x40020c00
 8000cd4:	40020000 	.word	0x40020000
 8000cd8:	40020400 	.word	0x40020400

08000cdc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000ce4:	f00a fbfa 	bl	800b4dc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000ce8:	2001      	movs	r0, #1
 8000cea:	f007 ff1d 	bl	8008b28 <osDelay>
 8000cee:	e7fb      	b.n	8000ce8 <StartDefaultTask+0xc>

08000cf0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a04      	ldr	r2, [pc, #16]	; (8000d10 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d101      	bne.n	8000d06 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d02:	f000 f9cd 	bl	80010a0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d06:	bf00      	nop
 8000d08:	3708      	adds	r7, #8
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	40000800 	.word	0x40000800

08000d14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d18:	b672      	cpsid	i
}
 8000d1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d1c:	e7fe      	b.n	8000d1c <Error_Handler+0x8>
	...

08000d20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d26:	2300      	movs	r3, #0
 8000d28:	607b      	str	r3, [r7, #4]
 8000d2a:	4b12      	ldr	r3, [pc, #72]	; (8000d74 <HAL_MspInit+0x54>)
 8000d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d2e:	4a11      	ldr	r2, [pc, #68]	; (8000d74 <HAL_MspInit+0x54>)
 8000d30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d34:	6453      	str	r3, [r2, #68]	; 0x44
 8000d36:	4b0f      	ldr	r3, [pc, #60]	; (8000d74 <HAL_MspInit+0x54>)
 8000d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d3e:	607b      	str	r3, [r7, #4]
 8000d40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d42:	2300      	movs	r3, #0
 8000d44:	603b      	str	r3, [r7, #0]
 8000d46:	4b0b      	ldr	r3, [pc, #44]	; (8000d74 <HAL_MspInit+0x54>)
 8000d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d4a:	4a0a      	ldr	r2, [pc, #40]	; (8000d74 <HAL_MspInit+0x54>)
 8000d4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d50:	6413      	str	r3, [r2, #64]	; 0x40
 8000d52:	4b08      	ldr	r3, [pc, #32]	; (8000d74 <HAL_MspInit+0x54>)
 8000d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d5a:	603b      	str	r3, [r7, #0]
 8000d5c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d5e:	2200      	movs	r2, #0
 8000d60:	210f      	movs	r1, #15
 8000d62:	f06f 0001 	mvn.w	r0, #1
 8000d66:	f000 fa97 	bl	8001298 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d6a:	bf00      	nop
 8000d6c:	3708      	adds	r7, #8
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	40023800 	.word	0x40023800

08000d78 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b08a      	sub	sp, #40	; 0x28
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d80:	f107 0314 	add.w	r3, r7, #20
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]
 8000d88:	605a      	str	r2, [r3, #4]
 8000d8a:	609a      	str	r2, [r3, #8]
 8000d8c:	60da      	str	r2, [r3, #12]
 8000d8e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a19      	ldr	r2, [pc, #100]	; (8000dfc <HAL_I2C_MspInit+0x84>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d12c      	bne.n	8000df4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	613b      	str	r3, [r7, #16]
 8000d9e:	4b18      	ldr	r3, [pc, #96]	; (8000e00 <HAL_I2C_MspInit+0x88>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da2:	4a17      	ldr	r2, [pc, #92]	; (8000e00 <HAL_I2C_MspInit+0x88>)
 8000da4:	f043 0302 	orr.w	r3, r3, #2
 8000da8:	6313      	str	r3, [r2, #48]	; 0x30
 8000daa:	4b15      	ldr	r3, [pc, #84]	; (8000e00 <HAL_I2C_MspInit+0x88>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dae:	f003 0302 	and.w	r3, r3, #2
 8000db2:	613b      	str	r3, [r7, #16]
 8000db4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000db6:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000dba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dbc:	2312      	movs	r3, #18
 8000dbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000dc8:	2304      	movs	r3, #4
 8000dca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dcc:	f107 0314 	add.w	r3, r7, #20
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	480c      	ldr	r0, [pc, #48]	; (8000e04 <HAL_I2C_MspInit+0x8c>)
 8000dd4:	f000 fa8a 	bl	80012ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000dd8:	2300      	movs	r3, #0
 8000dda:	60fb      	str	r3, [r7, #12]
 8000ddc:	4b08      	ldr	r3, [pc, #32]	; (8000e00 <HAL_I2C_MspInit+0x88>)
 8000dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de0:	4a07      	ldr	r2, [pc, #28]	; (8000e00 <HAL_I2C_MspInit+0x88>)
 8000de2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000de6:	6413      	str	r3, [r2, #64]	; 0x40
 8000de8:	4b05      	ldr	r3, [pc, #20]	; (8000e00 <HAL_I2C_MspInit+0x88>)
 8000dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000df0:	60fb      	str	r3, [r7, #12]
 8000df2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000df4:	bf00      	nop
 8000df6:	3728      	adds	r7, #40	; 0x28
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	40005400 	.word	0x40005400
 8000e00:	40023800 	.word	0x40023800
 8000e04:	40020400 	.word	0x40020400

08000e08 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b08a      	sub	sp, #40	; 0x28
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e10:	f107 0314 	add.w	r3, r7, #20
 8000e14:	2200      	movs	r2, #0
 8000e16:	601a      	str	r2, [r3, #0]
 8000e18:	605a      	str	r2, [r3, #4]
 8000e1a:	609a      	str	r2, [r3, #8]
 8000e1c:	60da      	str	r2, [r3, #12]
 8000e1e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a19      	ldr	r2, [pc, #100]	; (8000e8c <HAL_SPI_MspInit+0x84>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d12b      	bne.n	8000e82 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	613b      	str	r3, [r7, #16]
 8000e2e:	4b18      	ldr	r3, [pc, #96]	; (8000e90 <HAL_SPI_MspInit+0x88>)
 8000e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e32:	4a17      	ldr	r2, [pc, #92]	; (8000e90 <HAL_SPI_MspInit+0x88>)
 8000e34:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e38:	6453      	str	r3, [r2, #68]	; 0x44
 8000e3a:	4b15      	ldr	r3, [pc, #84]	; (8000e90 <HAL_SPI_MspInit+0x88>)
 8000e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e3e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e42:	613b      	str	r3, [r7, #16]
 8000e44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e46:	2300      	movs	r3, #0
 8000e48:	60fb      	str	r3, [r7, #12]
 8000e4a:	4b11      	ldr	r3, [pc, #68]	; (8000e90 <HAL_SPI_MspInit+0x88>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4e:	4a10      	ldr	r2, [pc, #64]	; (8000e90 <HAL_SPI_MspInit+0x88>)
 8000e50:	f043 0301 	orr.w	r3, r3, #1
 8000e54:	6313      	str	r3, [r2, #48]	; 0x30
 8000e56:	4b0e      	ldr	r3, [pc, #56]	; (8000e90 <HAL_SPI_MspInit+0x88>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5a:	f003 0301 	and.w	r3, r3, #1
 8000e5e:	60fb      	str	r3, [r7, #12]
 8000e60:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000e62:	23e0      	movs	r3, #224	; 0xe0
 8000e64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e66:	2302      	movs	r3, #2
 8000e68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e6e:	2303      	movs	r3, #3
 8000e70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e72:	2305      	movs	r3, #5
 8000e74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e76:	f107 0314 	add.w	r3, r7, #20
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	4805      	ldr	r0, [pc, #20]	; (8000e94 <HAL_SPI_MspInit+0x8c>)
 8000e7e:	f000 fa35 	bl	80012ec <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000e82:	bf00      	nop
 8000e84:	3728      	adds	r7, #40	; 0x28
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	40013000 	.word	0x40013000
 8000e90:	40023800 	.word	0x40023800
 8000e94:	40020000 	.word	0x40020000

08000e98 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b08e      	sub	sp, #56	; 0x38
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	60fb      	str	r3, [r7, #12]
 8000eac:	4b33      	ldr	r3, [pc, #204]	; (8000f7c <HAL_InitTick+0xe4>)
 8000eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb0:	4a32      	ldr	r2, [pc, #200]	; (8000f7c <HAL_InitTick+0xe4>)
 8000eb2:	f043 0304 	orr.w	r3, r3, #4
 8000eb6:	6413      	str	r3, [r2, #64]	; 0x40
 8000eb8:	4b30      	ldr	r3, [pc, #192]	; (8000f7c <HAL_InitTick+0xe4>)
 8000eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ebc:	f003 0304 	and.w	r3, r3, #4
 8000ec0:	60fb      	str	r3, [r7, #12]
 8000ec2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ec4:	f107 0210 	add.w	r2, r7, #16
 8000ec8:	f107 0314 	add.w	r3, r7, #20
 8000ecc:	4611      	mov	r1, r2
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f003 f89a 	bl	8004008 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000ed4:	6a3b      	ldr	r3, [r7, #32]
 8000ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d103      	bne.n	8000ee6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000ede:	f003 f87f 	bl	8003fe0 <HAL_RCC_GetPCLK1Freq>
 8000ee2:	6378      	str	r0, [r7, #52]	; 0x34
 8000ee4:	e004      	b.n	8000ef0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000ee6:	f003 f87b 	bl	8003fe0 <HAL_RCC_GetPCLK1Freq>
 8000eea:	4603      	mov	r3, r0
 8000eec:	005b      	lsls	r3, r3, #1
 8000eee:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ef0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ef2:	4a23      	ldr	r2, [pc, #140]	; (8000f80 <HAL_InitTick+0xe8>)
 8000ef4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ef8:	0c9b      	lsrs	r3, r3, #18
 8000efa:	3b01      	subs	r3, #1
 8000efc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000efe:	4b21      	ldr	r3, [pc, #132]	; (8000f84 <HAL_InitTick+0xec>)
 8000f00:	4a21      	ldr	r2, [pc, #132]	; (8000f88 <HAL_InitTick+0xf0>)
 8000f02:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8000f04:	4b1f      	ldr	r3, [pc, #124]	; (8000f84 <HAL_InitTick+0xec>)
 8000f06:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f0a:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000f0c:	4a1d      	ldr	r2, [pc, #116]	; (8000f84 <HAL_InitTick+0xec>)
 8000f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f10:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000f12:	4b1c      	ldr	r3, [pc, #112]	; (8000f84 <HAL_InitTick+0xec>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f18:	4b1a      	ldr	r3, [pc, #104]	; (8000f84 <HAL_InitTick+0xec>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f1e:	4b19      	ldr	r3, [pc, #100]	; (8000f84 <HAL_InitTick+0xec>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8000f24:	4817      	ldr	r0, [pc, #92]	; (8000f84 <HAL_InitTick+0xec>)
 8000f26:	f003 fe49 	bl	8004bbc <HAL_TIM_Base_Init>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000f30:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d11b      	bne.n	8000f70 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8000f38:	4812      	ldr	r0, [pc, #72]	; (8000f84 <HAL_InitTick+0xec>)
 8000f3a:	f003 fe99 	bl	8004c70 <HAL_TIM_Base_Start_IT>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000f44:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d111      	bne.n	8000f70 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000f4c:	201e      	movs	r0, #30
 8000f4e:	f000 f9bf 	bl	80012d0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2b0f      	cmp	r3, #15
 8000f56:	d808      	bhi.n	8000f6a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8000f58:	2200      	movs	r2, #0
 8000f5a:	6879      	ldr	r1, [r7, #4]
 8000f5c:	201e      	movs	r0, #30
 8000f5e:	f000 f99b 	bl	8001298 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f62:	4a0a      	ldr	r2, [pc, #40]	; (8000f8c <HAL_InitTick+0xf4>)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6013      	str	r3, [r2, #0]
 8000f68:	e002      	b.n	8000f70 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000f70:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	3738      	adds	r7, #56	; 0x38
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	40023800 	.word	0x40023800
 8000f80:	431bde83 	.word	0x431bde83
 8000f84:	20000224 	.word	0x20000224
 8000f88:	40000800 	.word	0x40000800
 8000f8c:	20000004 	.word	0x20000004

08000f90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f94:	e7fe      	b.n	8000f94 <NMI_Handler+0x4>

08000f96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f96:	b480      	push	{r7}
 8000f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f9a:	e7fe      	b.n	8000f9a <HardFault_Handler+0x4>

08000f9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fa0:	e7fe      	b.n	8000fa0 <MemManage_Handler+0x4>

08000fa2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fa2:	b480      	push	{r7}
 8000fa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fa6:	e7fe      	b.n	8000fa6 <BusFault_Handler+0x4>

08000fa8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fac:	e7fe      	b.n	8000fac <UsageFault_Handler+0x4>

08000fae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fae:	b480      	push	{r7}
 8000fb0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fb2:	bf00      	nop
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr

08000fbc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000fc0:	4802      	ldr	r0, [pc, #8]	; (8000fcc <TIM4_IRQHandler+0x10>)
 8000fc2:	f003 feb7 	bl	8004d34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000fc6:	bf00      	nop
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	20000224 	.word	0x20000224

08000fd0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000fd4:	4802      	ldr	r0, [pc, #8]	; (8000fe0 <OTG_FS_IRQHandler+0x10>)
 8000fd6:	f001 fa65 	bl	80024a4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000fda:	bf00      	nop
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	20006138 	.word	0x20006138

08000fe4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fe8:	4b06      	ldr	r3, [pc, #24]	; (8001004 <SystemInit+0x20>)
 8000fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fee:	4a05      	ldr	r2, [pc, #20]	; (8001004 <SystemInit+0x20>)
 8000ff0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ff4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ff8:	bf00      	nop
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	e000ed00 	.word	0xe000ed00

08001008 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001008:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001040 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800100c:	480d      	ldr	r0, [pc, #52]	; (8001044 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800100e:	490e      	ldr	r1, [pc, #56]	; (8001048 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001010:	4a0e      	ldr	r2, [pc, #56]	; (800104c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001012:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001014:	e002      	b.n	800101c <LoopCopyDataInit>

08001016 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001016:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001018:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800101a:	3304      	adds	r3, #4

0800101c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800101c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800101e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001020:	d3f9      	bcc.n	8001016 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001022:	4a0b      	ldr	r2, [pc, #44]	; (8001050 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001024:	4c0b      	ldr	r4, [pc, #44]	; (8001054 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001026:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001028:	e001      	b.n	800102e <LoopFillZerobss>

0800102a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800102a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800102c:	3204      	adds	r2, #4

0800102e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800102e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001030:	d3fb      	bcc.n	800102a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001032:	f7ff ffd7 	bl	8000fe4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001036:	f00a ffcd 	bl	800bfd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800103a:	f7ff fbe3 	bl	8000804 <main>
  bx  lr    
 800103e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001040:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001044:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001048:	20000150 	.word	0x20000150
  ldr r2, =_sidata
 800104c:	0800c244 	.word	0x0800c244
  ldr r2, =_sbss
 8001050:	20000150 	.word	0x20000150
  ldr r4, =_ebss
 8001054:	200069a4 	.word	0x200069a4

08001058 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001058:	e7fe      	b.n	8001058 <ADC_IRQHandler>
	...

0800105c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001060:	4b0e      	ldr	r3, [pc, #56]	; (800109c <HAL_Init+0x40>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a0d      	ldr	r2, [pc, #52]	; (800109c <HAL_Init+0x40>)
 8001066:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800106a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800106c:	4b0b      	ldr	r3, [pc, #44]	; (800109c <HAL_Init+0x40>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a0a      	ldr	r2, [pc, #40]	; (800109c <HAL_Init+0x40>)
 8001072:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001076:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001078:	4b08      	ldr	r3, [pc, #32]	; (800109c <HAL_Init+0x40>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a07      	ldr	r2, [pc, #28]	; (800109c <HAL_Init+0x40>)
 800107e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001082:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001084:	2003      	movs	r0, #3
 8001086:	f000 f8fc 	bl	8001282 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800108a:	200f      	movs	r0, #15
 800108c:	f7ff ff04 	bl	8000e98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001090:	f7ff fe46 	bl	8000d20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001094:	2300      	movs	r3, #0
}
 8001096:	4618      	mov	r0, r3
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	40023c00 	.word	0x40023c00

080010a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010a4:	4b06      	ldr	r3, [pc, #24]	; (80010c0 <HAL_IncTick+0x20>)
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	461a      	mov	r2, r3
 80010aa:	4b06      	ldr	r3, [pc, #24]	; (80010c4 <HAL_IncTick+0x24>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4413      	add	r3, r2
 80010b0:	4a04      	ldr	r2, [pc, #16]	; (80010c4 <HAL_IncTick+0x24>)
 80010b2:	6013      	str	r3, [r2, #0]
}
 80010b4:	bf00      	nop
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	20000008 	.word	0x20000008
 80010c4:	2000026c 	.word	0x2000026c

080010c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  return uwTick;
 80010cc:	4b03      	ldr	r3, [pc, #12]	; (80010dc <HAL_GetTick+0x14>)
 80010ce:	681b      	ldr	r3, [r3, #0]
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	2000026c 	.word	0x2000026c

080010e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010e8:	f7ff ffee 	bl	80010c8 <HAL_GetTick>
 80010ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010f8:	d005      	beq.n	8001106 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010fa:	4b0a      	ldr	r3, [pc, #40]	; (8001124 <HAL_Delay+0x44>)
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	461a      	mov	r2, r3
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	4413      	add	r3, r2
 8001104:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001106:	bf00      	nop
 8001108:	f7ff ffde 	bl	80010c8 <HAL_GetTick>
 800110c:	4602      	mov	r2, r0
 800110e:	68bb      	ldr	r3, [r7, #8]
 8001110:	1ad3      	subs	r3, r2, r3
 8001112:	68fa      	ldr	r2, [r7, #12]
 8001114:	429a      	cmp	r2, r3
 8001116:	d8f7      	bhi.n	8001108 <HAL_Delay+0x28>
  {
  }
}
 8001118:	bf00      	nop
 800111a:	bf00      	nop
 800111c:	3710      	adds	r7, #16
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	20000008 	.word	0x20000008

08001128 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001128:	b480      	push	{r7}
 800112a:	b085      	sub	sp, #20
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	f003 0307 	and.w	r3, r3, #7
 8001136:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001138:	4b0c      	ldr	r3, [pc, #48]	; (800116c <__NVIC_SetPriorityGrouping+0x44>)
 800113a:	68db      	ldr	r3, [r3, #12]
 800113c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800113e:	68ba      	ldr	r2, [r7, #8]
 8001140:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001144:	4013      	ands	r3, r2
 8001146:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001150:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001154:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001158:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800115a:	4a04      	ldr	r2, [pc, #16]	; (800116c <__NVIC_SetPriorityGrouping+0x44>)
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	60d3      	str	r3, [r2, #12]
}
 8001160:	bf00      	nop
 8001162:	3714      	adds	r7, #20
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr
 800116c:	e000ed00 	.word	0xe000ed00

08001170 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001174:	4b04      	ldr	r3, [pc, #16]	; (8001188 <__NVIC_GetPriorityGrouping+0x18>)
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	0a1b      	lsrs	r3, r3, #8
 800117a:	f003 0307 	and.w	r3, r3, #7
}
 800117e:	4618      	mov	r0, r3
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr
 8001188:	e000ed00 	.word	0xe000ed00

0800118c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	4603      	mov	r3, r0
 8001194:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119a:	2b00      	cmp	r3, #0
 800119c:	db0b      	blt.n	80011b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800119e:	79fb      	ldrb	r3, [r7, #7]
 80011a0:	f003 021f 	and.w	r2, r3, #31
 80011a4:	4907      	ldr	r1, [pc, #28]	; (80011c4 <__NVIC_EnableIRQ+0x38>)
 80011a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011aa:	095b      	lsrs	r3, r3, #5
 80011ac:	2001      	movs	r0, #1
 80011ae:	fa00 f202 	lsl.w	r2, r0, r2
 80011b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011b6:	bf00      	nop
 80011b8:	370c      	adds	r7, #12
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	e000e100 	.word	0xe000e100

080011c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	4603      	mov	r3, r0
 80011d0:	6039      	str	r1, [r7, #0]
 80011d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	db0a      	blt.n	80011f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	b2da      	uxtb	r2, r3
 80011e0:	490c      	ldr	r1, [pc, #48]	; (8001214 <__NVIC_SetPriority+0x4c>)
 80011e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e6:	0112      	lsls	r2, r2, #4
 80011e8:	b2d2      	uxtb	r2, r2
 80011ea:	440b      	add	r3, r1
 80011ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011f0:	e00a      	b.n	8001208 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	b2da      	uxtb	r2, r3
 80011f6:	4908      	ldr	r1, [pc, #32]	; (8001218 <__NVIC_SetPriority+0x50>)
 80011f8:	79fb      	ldrb	r3, [r7, #7]
 80011fa:	f003 030f 	and.w	r3, r3, #15
 80011fe:	3b04      	subs	r3, #4
 8001200:	0112      	lsls	r2, r2, #4
 8001202:	b2d2      	uxtb	r2, r2
 8001204:	440b      	add	r3, r1
 8001206:	761a      	strb	r2, [r3, #24]
}
 8001208:	bf00      	nop
 800120a:	370c      	adds	r7, #12
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr
 8001214:	e000e100 	.word	0xe000e100
 8001218:	e000ed00 	.word	0xe000ed00

0800121c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800121c:	b480      	push	{r7}
 800121e:	b089      	sub	sp, #36	; 0x24
 8001220:	af00      	add	r7, sp, #0
 8001222:	60f8      	str	r0, [r7, #12]
 8001224:	60b9      	str	r1, [r7, #8]
 8001226:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	f003 0307 	and.w	r3, r3, #7
 800122e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001230:	69fb      	ldr	r3, [r7, #28]
 8001232:	f1c3 0307 	rsb	r3, r3, #7
 8001236:	2b04      	cmp	r3, #4
 8001238:	bf28      	it	cs
 800123a:	2304      	movcs	r3, #4
 800123c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	3304      	adds	r3, #4
 8001242:	2b06      	cmp	r3, #6
 8001244:	d902      	bls.n	800124c <NVIC_EncodePriority+0x30>
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	3b03      	subs	r3, #3
 800124a:	e000      	b.n	800124e <NVIC_EncodePriority+0x32>
 800124c:	2300      	movs	r3, #0
 800124e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001250:	f04f 32ff 	mov.w	r2, #4294967295
 8001254:	69bb      	ldr	r3, [r7, #24]
 8001256:	fa02 f303 	lsl.w	r3, r2, r3
 800125a:	43da      	mvns	r2, r3
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	401a      	ands	r2, r3
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001264:	f04f 31ff 	mov.w	r1, #4294967295
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	fa01 f303 	lsl.w	r3, r1, r3
 800126e:	43d9      	mvns	r1, r3
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001274:	4313      	orrs	r3, r2
         );
}
 8001276:	4618      	mov	r0, r3
 8001278:	3724      	adds	r7, #36	; 0x24
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr

08001282 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001282:	b580      	push	{r7, lr}
 8001284:	b082      	sub	sp, #8
 8001286:	af00      	add	r7, sp, #0
 8001288:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800128a:	6878      	ldr	r0, [r7, #4]
 800128c:	f7ff ff4c 	bl	8001128 <__NVIC_SetPriorityGrouping>
}
 8001290:	bf00      	nop
 8001292:	3708      	adds	r7, #8
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}

08001298 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001298:	b580      	push	{r7, lr}
 800129a:	b086      	sub	sp, #24
 800129c:	af00      	add	r7, sp, #0
 800129e:	4603      	mov	r3, r0
 80012a0:	60b9      	str	r1, [r7, #8]
 80012a2:	607a      	str	r2, [r7, #4]
 80012a4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012a6:	2300      	movs	r3, #0
 80012a8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012aa:	f7ff ff61 	bl	8001170 <__NVIC_GetPriorityGrouping>
 80012ae:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012b0:	687a      	ldr	r2, [r7, #4]
 80012b2:	68b9      	ldr	r1, [r7, #8]
 80012b4:	6978      	ldr	r0, [r7, #20]
 80012b6:	f7ff ffb1 	bl	800121c <NVIC_EncodePriority>
 80012ba:	4602      	mov	r2, r0
 80012bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012c0:	4611      	mov	r1, r2
 80012c2:	4618      	mov	r0, r3
 80012c4:	f7ff ff80 	bl	80011c8 <__NVIC_SetPriority>
}
 80012c8:	bf00      	nop
 80012ca:	3718      	adds	r7, #24
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}

080012d0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	4603      	mov	r3, r0
 80012d8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012de:	4618      	mov	r0, r3
 80012e0:	f7ff ff54 	bl	800118c <__NVIC_EnableIRQ>
}
 80012e4:	bf00      	nop
 80012e6:	3708      	adds	r7, #8
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}

080012ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b089      	sub	sp, #36	; 0x24
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
 80012f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012f6:	2300      	movs	r3, #0
 80012f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012fa:	2300      	movs	r3, #0
 80012fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012fe:	2300      	movs	r3, #0
 8001300:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001302:	2300      	movs	r3, #0
 8001304:	61fb      	str	r3, [r7, #28]
 8001306:	e159      	b.n	80015bc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001308:	2201      	movs	r2, #1
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	fa02 f303 	lsl.w	r3, r2, r3
 8001310:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	697a      	ldr	r2, [r7, #20]
 8001318:	4013      	ands	r3, r2
 800131a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800131c:	693a      	ldr	r2, [r7, #16]
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	429a      	cmp	r2, r3
 8001322:	f040 8148 	bne.w	80015b6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	f003 0303 	and.w	r3, r3, #3
 800132e:	2b01      	cmp	r3, #1
 8001330:	d005      	beq.n	800133e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800133a:	2b02      	cmp	r3, #2
 800133c:	d130      	bne.n	80013a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001344:	69fb      	ldr	r3, [r7, #28]
 8001346:	005b      	lsls	r3, r3, #1
 8001348:	2203      	movs	r2, #3
 800134a:	fa02 f303 	lsl.w	r3, r2, r3
 800134e:	43db      	mvns	r3, r3
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	4013      	ands	r3, r2
 8001354:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	68da      	ldr	r2, [r3, #12]
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	005b      	lsls	r3, r3, #1
 800135e:	fa02 f303 	lsl.w	r3, r2, r3
 8001362:	69ba      	ldr	r2, [r7, #24]
 8001364:	4313      	orrs	r3, r2
 8001366:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	69ba      	ldr	r2, [r7, #24]
 800136c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001374:	2201      	movs	r2, #1
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	fa02 f303 	lsl.w	r3, r2, r3
 800137c:	43db      	mvns	r3, r3
 800137e:	69ba      	ldr	r2, [r7, #24]
 8001380:	4013      	ands	r3, r2
 8001382:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	091b      	lsrs	r3, r3, #4
 800138a:	f003 0201 	and.w	r2, r3, #1
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	fa02 f303 	lsl.w	r3, r2, r3
 8001394:	69ba      	ldr	r2, [r7, #24]
 8001396:	4313      	orrs	r3, r2
 8001398:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	69ba      	ldr	r2, [r7, #24]
 800139e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	f003 0303 	and.w	r3, r3, #3
 80013a8:	2b03      	cmp	r3, #3
 80013aa:	d017      	beq.n	80013dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	005b      	lsls	r3, r3, #1
 80013b6:	2203      	movs	r2, #3
 80013b8:	fa02 f303 	lsl.w	r3, r2, r3
 80013bc:	43db      	mvns	r3, r3
 80013be:	69ba      	ldr	r2, [r7, #24]
 80013c0:	4013      	ands	r3, r2
 80013c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	689a      	ldr	r2, [r3, #8]
 80013c8:	69fb      	ldr	r3, [r7, #28]
 80013ca:	005b      	lsls	r3, r3, #1
 80013cc:	fa02 f303 	lsl.w	r3, r2, r3
 80013d0:	69ba      	ldr	r2, [r7, #24]
 80013d2:	4313      	orrs	r3, r2
 80013d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	69ba      	ldr	r2, [r7, #24]
 80013da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f003 0303 	and.w	r3, r3, #3
 80013e4:	2b02      	cmp	r3, #2
 80013e6:	d123      	bne.n	8001430 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013e8:	69fb      	ldr	r3, [r7, #28]
 80013ea:	08da      	lsrs	r2, r3, #3
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	3208      	adds	r2, #8
 80013f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	f003 0307 	and.w	r3, r3, #7
 80013fc:	009b      	lsls	r3, r3, #2
 80013fe:	220f      	movs	r2, #15
 8001400:	fa02 f303 	lsl.w	r3, r2, r3
 8001404:	43db      	mvns	r3, r3
 8001406:	69ba      	ldr	r2, [r7, #24]
 8001408:	4013      	ands	r3, r2
 800140a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	691a      	ldr	r2, [r3, #16]
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	f003 0307 	and.w	r3, r3, #7
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	fa02 f303 	lsl.w	r3, r2, r3
 800141c:	69ba      	ldr	r2, [r7, #24]
 800141e:	4313      	orrs	r3, r2
 8001420:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	08da      	lsrs	r2, r3, #3
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	3208      	adds	r2, #8
 800142a:	69b9      	ldr	r1, [r7, #24]
 800142c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	005b      	lsls	r3, r3, #1
 800143a:	2203      	movs	r2, #3
 800143c:	fa02 f303 	lsl.w	r3, r2, r3
 8001440:	43db      	mvns	r3, r3
 8001442:	69ba      	ldr	r2, [r7, #24]
 8001444:	4013      	ands	r3, r2
 8001446:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f003 0203 	and.w	r2, r3, #3
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	005b      	lsls	r3, r3, #1
 8001454:	fa02 f303 	lsl.w	r3, r2, r3
 8001458:	69ba      	ldr	r2, [r7, #24]
 800145a:	4313      	orrs	r3, r2
 800145c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	69ba      	ldr	r2, [r7, #24]
 8001462:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800146c:	2b00      	cmp	r3, #0
 800146e:	f000 80a2 	beq.w	80015b6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001472:	2300      	movs	r3, #0
 8001474:	60fb      	str	r3, [r7, #12]
 8001476:	4b57      	ldr	r3, [pc, #348]	; (80015d4 <HAL_GPIO_Init+0x2e8>)
 8001478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800147a:	4a56      	ldr	r2, [pc, #344]	; (80015d4 <HAL_GPIO_Init+0x2e8>)
 800147c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001480:	6453      	str	r3, [r2, #68]	; 0x44
 8001482:	4b54      	ldr	r3, [pc, #336]	; (80015d4 <HAL_GPIO_Init+0x2e8>)
 8001484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001486:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800148a:	60fb      	str	r3, [r7, #12]
 800148c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800148e:	4a52      	ldr	r2, [pc, #328]	; (80015d8 <HAL_GPIO_Init+0x2ec>)
 8001490:	69fb      	ldr	r3, [r7, #28]
 8001492:	089b      	lsrs	r3, r3, #2
 8001494:	3302      	adds	r3, #2
 8001496:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800149a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800149c:	69fb      	ldr	r3, [r7, #28]
 800149e:	f003 0303 	and.w	r3, r3, #3
 80014a2:	009b      	lsls	r3, r3, #2
 80014a4:	220f      	movs	r2, #15
 80014a6:	fa02 f303 	lsl.w	r3, r2, r3
 80014aa:	43db      	mvns	r3, r3
 80014ac:	69ba      	ldr	r2, [r7, #24]
 80014ae:	4013      	ands	r3, r2
 80014b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4a49      	ldr	r2, [pc, #292]	; (80015dc <HAL_GPIO_Init+0x2f0>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d019      	beq.n	80014ee <HAL_GPIO_Init+0x202>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4a48      	ldr	r2, [pc, #288]	; (80015e0 <HAL_GPIO_Init+0x2f4>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d013      	beq.n	80014ea <HAL_GPIO_Init+0x1fe>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4a47      	ldr	r2, [pc, #284]	; (80015e4 <HAL_GPIO_Init+0x2f8>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d00d      	beq.n	80014e6 <HAL_GPIO_Init+0x1fa>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	4a46      	ldr	r2, [pc, #280]	; (80015e8 <HAL_GPIO_Init+0x2fc>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d007      	beq.n	80014e2 <HAL_GPIO_Init+0x1f6>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	4a45      	ldr	r2, [pc, #276]	; (80015ec <HAL_GPIO_Init+0x300>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d101      	bne.n	80014de <HAL_GPIO_Init+0x1f2>
 80014da:	2304      	movs	r3, #4
 80014dc:	e008      	b.n	80014f0 <HAL_GPIO_Init+0x204>
 80014de:	2307      	movs	r3, #7
 80014e0:	e006      	b.n	80014f0 <HAL_GPIO_Init+0x204>
 80014e2:	2303      	movs	r3, #3
 80014e4:	e004      	b.n	80014f0 <HAL_GPIO_Init+0x204>
 80014e6:	2302      	movs	r3, #2
 80014e8:	e002      	b.n	80014f0 <HAL_GPIO_Init+0x204>
 80014ea:	2301      	movs	r3, #1
 80014ec:	e000      	b.n	80014f0 <HAL_GPIO_Init+0x204>
 80014ee:	2300      	movs	r3, #0
 80014f0:	69fa      	ldr	r2, [r7, #28]
 80014f2:	f002 0203 	and.w	r2, r2, #3
 80014f6:	0092      	lsls	r2, r2, #2
 80014f8:	4093      	lsls	r3, r2
 80014fa:	69ba      	ldr	r2, [r7, #24]
 80014fc:	4313      	orrs	r3, r2
 80014fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001500:	4935      	ldr	r1, [pc, #212]	; (80015d8 <HAL_GPIO_Init+0x2ec>)
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	089b      	lsrs	r3, r3, #2
 8001506:	3302      	adds	r3, #2
 8001508:	69ba      	ldr	r2, [r7, #24]
 800150a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800150e:	4b38      	ldr	r3, [pc, #224]	; (80015f0 <HAL_GPIO_Init+0x304>)
 8001510:	689b      	ldr	r3, [r3, #8]
 8001512:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	43db      	mvns	r3, r3
 8001518:	69ba      	ldr	r2, [r7, #24]
 800151a:	4013      	ands	r3, r2
 800151c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001526:	2b00      	cmp	r3, #0
 8001528:	d003      	beq.n	8001532 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800152a:	69ba      	ldr	r2, [r7, #24]
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	4313      	orrs	r3, r2
 8001530:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001532:	4a2f      	ldr	r2, [pc, #188]	; (80015f0 <HAL_GPIO_Init+0x304>)
 8001534:	69bb      	ldr	r3, [r7, #24]
 8001536:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001538:	4b2d      	ldr	r3, [pc, #180]	; (80015f0 <HAL_GPIO_Init+0x304>)
 800153a:	68db      	ldr	r3, [r3, #12]
 800153c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	43db      	mvns	r3, r3
 8001542:	69ba      	ldr	r2, [r7, #24]
 8001544:	4013      	ands	r3, r2
 8001546:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001550:	2b00      	cmp	r3, #0
 8001552:	d003      	beq.n	800155c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001554:	69ba      	ldr	r2, [r7, #24]
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	4313      	orrs	r3, r2
 800155a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800155c:	4a24      	ldr	r2, [pc, #144]	; (80015f0 <HAL_GPIO_Init+0x304>)
 800155e:	69bb      	ldr	r3, [r7, #24]
 8001560:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001562:	4b23      	ldr	r3, [pc, #140]	; (80015f0 <HAL_GPIO_Init+0x304>)
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	43db      	mvns	r3, r3
 800156c:	69ba      	ldr	r2, [r7, #24]
 800156e:	4013      	ands	r3, r2
 8001570:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800157a:	2b00      	cmp	r3, #0
 800157c:	d003      	beq.n	8001586 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800157e:	69ba      	ldr	r2, [r7, #24]
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	4313      	orrs	r3, r2
 8001584:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001586:	4a1a      	ldr	r2, [pc, #104]	; (80015f0 <HAL_GPIO_Init+0x304>)
 8001588:	69bb      	ldr	r3, [r7, #24]
 800158a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800158c:	4b18      	ldr	r3, [pc, #96]	; (80015f0 <HAL_GPIO_Init+0x304>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	43db      	mvns	r3, r3
 8001596:	69ba      	ldr	r2, [r7, #24]
 8001598:	4013      	ands	r3, r2
 800159a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d003      	beq.n	80015b0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80015a8:	69ba      	ldr	r2, [r7, #24]
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	4313      	orrs	r3, r2
 80015ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80015b0:	4a0f      	ldr	r2, [pc, #60]	; (80015f0 <HAL_GPIO_Init+0x304>)
 80015b2:	69bb      	ldr	r3, [r7, #24]
 80015b4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	3301      	adds	r3, #1
 80015ba:	61fb      	str	r3, [r7, #28]
 80015bc:	69fb      	ldr	r3, [r7, #28]
 80015be:	2b0f      	cmp	r3, #15
 80015c0:	f67f aea2 	bls.w	8001308 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80015c4:	bf00      	nop
 80015c6:	bf00      	nop
 80015c8:	3724      	adds	r7, #36	; 0x24
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	40023800 	.word	0x40023800
 80015d8:	40013800 	.word	0x40013800
 80015dc:	40020000 	.word	0x40020000
 80015e0:	40020400 	.word	0x40020400
 80015e4:	40020800 	.word	0x40020800
 80015e8:	40020c00 	.word	0x40020c00
 80015ec:	40021000 	.word	0x40021000
 80015f0:	40013c00 	.word	0x40013c00

080015f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
 80015fc:	460b      	mov	r3, r1
 80015fe:	807b      	strh	r3, [r7, #2]
 8001600:	4613      	mov	r3, r2
 8001602:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001604:	787b      	ldrb	r3, [r7, #1]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d003      	beq.n	8001612 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800160a:	887a      	ldrh	r2, [r7, #2]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001610:	e003      	b.n	800161a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001612:	887b      	ldrh	r3, [r7, #2]
 8001614:	041a      	lsls	r2, r3, #16
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	619a      	str	r2, [r3, #24]
}
 800161a:	bf00      	nop
 800161c:	370c      	adds	r7, #12
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr
	...

08001628 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b084      	sub	sp, #16
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d101      	bne.n	800163a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	e12b      	b.n	8001892 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001640:	b2db      	uxtb	r3, r3
 8001642:	2b00      	cmp	r3, #0
 8001644:	d106      	bne.n	8001654 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2200      	movs	r2, #0
 800164a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	f7ff fb92 	bl	8000d78 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2224      	movs	r2, #36	; 0x24
 8001658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f022 0201 	bic.w	r2, r2, #1
 800166a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800167a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800168a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800168c:	f002 fca8 	bl	8003fe0 <HAL_RCC_GetPCLK1Freq>
 8001690:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	4a81      	ldr	r2, [pc, #516]	; (800189c <HAL_I2C_Init+0x274>)
 8001698:	4293      	cmp	r3, r2
 800169a:	d807      	bhi.n	80016ac <HAL_I2C_Init+0x84>
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	4a80      	ldr	r2, [pc, #512]	; (80018a0 <HAL_I2C_Init+0x278>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	bf94      	ite	ls
 80016a4:	2301      	movls	r3, #1
 80016a6:	2300      	movhi	r3, #0
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	e006      	b.n	80016ba <HAL_I2C_Init+0x92>
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	4a7d      	ldr	r2, [pc, #500]	; (80018a4 <HAL_I2C_Init+0x27c>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	bf94      	ite	ls
 80016b4:	2301      	movls	r3, #1
 80016b6:	2300      	movhi	r3, #0
 80016b8:	b2db      	uxtb	r3, r3
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e0e7      	b.n	8001892 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	4a78      	ldr	r2, [pc, #480]	; (80018a8 <HAL_I2C_Init+0x280>)
 80016c6:	fba2 2303 	umull	r2, r3, r2, r3
 80016ca:	0c9b      	lsrs	r3, r3, #18
 80016cc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	68ba      	ldr	r2, [r7, #8]
 80016de:	430a      	orrs	r2, r1
 80016e0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	6a1b      	ldr	r3, [r3, #32]
 80016e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	4a6a      	ldr	r2, [pc, #424]	; (800189c <HAL_I2C_Init+0x274>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d802      	bhi.n	80016fc <HAL_I2C_Init+0xd4>
 80016f6:	68bb      	ldr	r3, [r7, #8]
 80016f8:	3301      	adds	r3, #1
 80016fa:	e009      	b.n	8001710 <HAL_I2C_Init+0xe8>
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001702:	fb02 f303 	mul.w	r3, r2, r3
 8001706:	4a69      	ldr	r2, [pc, #420]	; (80018ac <HAL_I2C_Init+0x284>)
 8001708:	fba2 2303 	umull	r2, r3, r2, r3
 800170c:	099b      	lsrs	r3, r3, #6
 800170e:	3301      	adds	r3, #1
 8001710:	687a      	ldr	r2, [r7, #4]
 8001712:	6812      	ldr	r2, [r2, #0]
 8001714:	430b      	orrs	r3, r1
 8001716:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	69db      	ldr	r3, [r3, #28]
 800171e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001722:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	495c      	ldr	r1, [pc, #368]	; (800189c <HAL_I2C_Init+0x274>)
 800172c:	428b      	cmp	r3, r1
 800172e:	d819      	bhi.n	8001764 <HAL_I2C_Init+0x13c>
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	1e59      	subs	r1, r3, #1
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	005b      	lsls	r3, r3, #1
 800173a:	fbb1 f3f3 	udiv	r3, r1, r3
 800173e:	1c59      	adds	r1, r3, #1
 8001740:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001744:	400b      	ands	r3, r1
 8001746:	2b00      	cmp	r3, #0
 8001748:	d00a      	beq.n	8001760 <HAL_I2C_Init+0x138>
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	1e59      	subs	r1, r3, #1
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	005b      	lsls	r3, r3, #1
 8001754:	fbb1 f3f3 	udiv	r3, r1, r3
 8001758:	3301      	adds	r3, #1
 800175a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800175e:	e051      	b.n	8001804 <HAL_I2C_Init+0x1dc>
 8001760:	2304      	movs	r3, #4
 8001762:	e04f      	b.n	8001804 <HAL_I2C_Init+0x1dc>
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d111      	bne.n	8001790 <HAL_I2C_Init+0x168>
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	1e58      	subs	r0, r3, #1
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6859      	ldr	r1, [r3, #4]
 8001774:	460b      	mov	r3, r1
 8001776:	005b      	lsls	r3, r3, #1
 8001778:	440b      	add	r3, r1
 800177a:	fbb0 f3f3 	udiv	r3, r0, r3
 800177e:	3301      	adds	r3, #1
 8001780:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001784:	2b00      	cmp	r3, #0
 8001786:	bf0c      	ite	eq
 8001788:	2301      	moveq	r3, #1
 800178a:	2300      	movne	r3, #0
 800178c:	b2db      	uxtb	r3, r3
 800178e:	e012      	b.n	80017b6 <HAL_I2C_Init+0x18e>
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	1e58      	subs	r0, r3, #1
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6859      	ldr	r1, [r3, #4]
 8001798:	460b      	mov	r3, r1
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	440b      	add	r3, r1
 800179e:	0099      	lsls	r1, r3, #2
 80017a0:	440b      	add	r3, r1
 80017a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80017a6:	3301      	adds	r3, #1
 80017a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	bf0c      	ite	eq
 80017b0:	2301      	moveq	r3, #1
 80017b2:	2300      	movne	r3, #0
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <HAL_I2C_Init+0x196>
 80017ba:	2301      	movs	r3, #1
 80017bc:	e022      	b.n	8001804 <HAL_I2C_Init+0x1dc>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d10e      	bne.n	80017e4 <HAL_I2C_Init+0x1bc>
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	1e58      	subs	r0, r3, #1
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6859      	ldr	r1, [r3, #4]
 80017ce:	460b      	mov	r3, r1
 80017d0:	005b      	lsls	r3, r3, #1
 80017d2:	440b      	add	r3, r1
 80017d4:	fbb0 f3f3 	udiv	r3, r0, r3
 80017d8:	3301      	adds	r3, #1
 80017da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017e2:	e00f      	b.n	8001804 <HAL_I2C_Init+0x1dc>
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	1e58      	subs	r0, r3, #1
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6859      	ldr	r1, [r3, #4]
 80017ec:	460b      	mov	r3, r1
 80017ee:	009b      	lsls	r3, r3, #2
 80017f0:	440b      	add	r3, r1
 80017f2:	0099      	lsls	r1, r3, #2
 80017f4:	440b      	add	r3, r1
 80017f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80017fa:	3301      	adds	r3, #1
 80017fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001800:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001804:	6879      	ldr	r1, [r7, #4]
 8001806:	6809      	ldr	r1, [r1, #0]
 8001808:	4313      	orrs	r3, r2
 800180a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	69da      	ldr	r2, [r3, #28]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6a1b      	ldr	r3, [r3, #32]
 800181e:	431a      	orrs	r2, r3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	430a      	orrs	r2, r1
 8001826:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001832:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001836:	687a      	ldr	r2, [r7, #4]
 8001838:	6911      	ldr	r1, [r2, #16]
 800183a:	687a      	ldr	r2, [r7, #4]
 800183c:	68d2      	ldr	r2, [r2, #12]
 800183e:	4311      	orrs	r1, r2
 8001840:	687a      	ldr	r2, [r7, #4]
 8001842:	6812      	ldr	r2, [r2, #0]
 8001844:	430b      	orrs	r3, r1
 8001846:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	68db      	ldr	r3, [r3, #12]
 800184e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	695a      	ldr	r2, [r3, #20]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	699b      	ldr	r3, [r3, #24]
 800185a:	431a      	orrs	r2, r3
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	430a      	orrs	r2, r1
 8001862:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f042 0201 	orr.w	r2, r2, #1
 8001872:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2200      	movs	r2, #0
 8001878:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2220      	movs	r2, #32
 800187e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2200      	movs	r2, #0
 8001886:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2200      	movs	r2, #0
 800188c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001890:	2300      	movs	r3, #0
}
 8001892:	4618      	mov	r0, r3
 8001894:	3710      	adds	r7, #16
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	000186a0 	.word	0x000186a0
 80018a0:	001e847f 	.word	0x001e847f
 80018a4:	003d08ff 	.word	0x003d08ff
 80018a8:	431bde83 	.word	0x431bde83
 80018ac:	10624dd3 	.word	0x10624dd3

080018b0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b08c      	sub	sp, #48	; 0x30
 80018b4:	af02      	add	r7, sp, #8
 80018b6:	60f8      	str	r0, [r7, #12]
 80018b8:	4608      	mov	r0, r1
 80018ba:	4611      	mov	r1, r2
 80018bc:	461a      	mov	r2, r3
 80018be:	4603      	mov	r3, r0
 80018c0:	817b      	strh	r3, [r7, #10]
 80018c2:	460b      	mov	r3, r1
 80018c4:	813b      	strh	r3, [r7, #8]
 80018c6:	4613      	mov	r3, r2
 80018c8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80018ca:	f7ff fbfd 	bl	80010c8 <HAL_GetTick>
 80018ce:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018d6:	b2db      	uxtb	r3, r3
 80018d8:	2b20      	cmp	r3, #32
 80018da:	f040 8208 	bne.w	8001cee <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80018de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e0:	9300      	str	r3, [sp, #0]
 80018e2:	2319      	movs	r3, #25
 80018e4:	2201      	movs	r2, #1
 80018e6:	497b      	ldr	r1, [pc, #492]	; (8001ad4 <HAL_I2C_Mem_Read+0x224>)
 80018e8:	68f8      	ldr	r0, [r7, #12]
 80018ea:	f000 faef 	bl	8001ecc <I2C_WaitOnFlagUntilTimeout>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d001      	beq.n	80018f8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80018f4:	2302      	movs	r3, #2
 80018f6:	e1fb      	b.n	8001cf0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d101      	bne.n	8001906 <HAL_I2C_Mem_Read+0x56>
 8001902:	2302      	movs	r3, #2
 8001904:	e1f4      	b.n	8001cf0 <HAL_I2C_Mem_Read+0x440>
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	2201      	movs	r2, #1
 800190a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f003 0301 	and.w	r3, r3, #1
 8001918:	2b01      	cmp	r3, #1
 800191a:	d007      	beq.n	800192c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f042 0201 	orr.w	r2, r2, #1
 800192a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800193a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	2222      	movs	r2, #34	; 0x22
 8001940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	2240      	movs	r2, #64	; 0x40
 8001948:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	2200      	movs	r2, #0
 8001950:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001956:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800195c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001962:	b29a      	uxth	r2, r3
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	4a5b      	ldr	r2, [pc, #364]	; (8001ad8 <HAL_I2C_Mem_Read+0x228>)
 800196c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800196e:	88f8      	ldrh	r0, [r7, #6]
 8001970:	893a      	ldrh	r2, [r7, #8]
 8001972:	8979      	ldrh	r1, [r7, #10]
 8001974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001976:	9301      	str	r3, [sp, #4]
 8001978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800197a:	9300      	str	r3, [sp, #0]
 800197c:	4603      	mov	r3, r0
 800197e:	68f8      	ldr	r0, [r7, #12]
 8001980:	f000 f9bc 	bl	8001cfc <I2C_RequestMemoryRead>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e1b0      	b.n	8001cf0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001992:	2b00      	cmp	r3, #0
 8001994:	d113      	bne.n	80019be <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001996:	2300      	movs	r3, #0
 8001998:	623b      	str	r3, [r7, #32]
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	695b      	ldr	r3, [r3, #20]
 80019a0:	623b      	str	r3, [r7, #32]
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	699b      	ldr	r3, [r3, #24]
 80019a8:	623b      	str	r3, [r7, #32]
 80019aa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019ba:	601a      	str	r2, [r3, #0]
 80019bc:	e184      	b.n	8001cc8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d11b      	bne.n	80019fe <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80019d4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019d6:	2300      	movs	r3, #0
 80019d8:	61fb      	str	r3, [r7, #28]
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	695b      	ldr	r3, [r3, #20]
 80019e0:	61fb      	str	r3, [r7, #28]
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	699b      	ldr	r3, [r3, #24]
 80019e8:	61fb      	str	r3, [r7, #28]
 80019ea:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019fa:	601a      	str	r2, [r3, #0]
 80019fc:	e164      	b.n	8001cc8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a02:	2b02      	cmp	r3, #2
 8001a04:	d11b      	bne.n	8001a3e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a14:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001a24:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a26:	2300      	movs	r3, #0
 8001a28:	61bb      	str	r3, [r7, #24]
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	695b      	ldr	r3, [r3, #20]
 8001a30:	61bb      	str	r3, [r7, #24]
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	699b      	ldr	r3, [r3, #24]
 8001a38:	61bb      	str	r3, [r7, #24]
 8001a3a:	69bb      	ldr	r3, [r7, #24]
 8001a3c:	e144      	b.n	8001cc8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a3e:	2300      	movs	r3, #0
 8001a40:	617b      	str	r3, [r7, #20]
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	695b      	ldr	r3, [r3, #20]
 8001a48:	617b      	str	r3, [r7, #20]
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	699b      	ldr	r3, [r3, #24]
 8001a50:	617b      	str	r3, [r7, #20]
 8001a52:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001a54:	e138      	b.n	8001cc8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a5a:	2b03      	cmp	r3, #3
 8001a5c:	f200 80f1 	bhi.w	8001c42 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d123      	bne.n	8001ab0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a6a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001a6c:	68f8      	ldr	r0, [r7, #12]
 8001a6e:	f000 fb44 	bl	80020fa <I2C_WaitOnRXNEFlagUntilTimeout>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d001      	beq.n	8001a7c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e139      	b.n	8001cf0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	691a      	ldr	r2, [r3, #16]
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a86:	b2d2      	uxtb	r2, r2
 8001a88:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a8e:	1c5a      	adds	r2, r3, #1
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a98:	3b01      	subs	r3, #1
 8001a9a:	b29a      	uxth	r2, r3
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001aa4:	b29b      	uxth	r3, r3
 8001aa6:	3b01      	subs	r3, #1
 8001aa8:	b29a      	uxth	r2, r3
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001aae:	e10b      	b.n	8001cc8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ab4:	2b02      	cmp	r3, #2
 8001ab6:	d14e      	bne.n	8001b56 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aba:	9300      	str	r3, [sp, #0]
 8001abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001abe:	2200      	movs	r2, #0
 8001ac0:	4906      	ldr	r1, [pc, #24]	; (8001adc <HAL_I2C_Mem_Read+0x22c>)
 8001ac2:	68f8      	ldr	r0, [r7, #12]
 8001ac4:	f000 fa02 	bl	8001ecc <I2C_WaitOnFlagUntilTimeout>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d008      	beq.n	8001ae0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e10e      	b.n	8001cf0 <HAL_I2C_Mem_Read+0x440>
 8001ad2:	bf00      	nop
 8001ad4:	00100002 	.word	0x00100002
 8001ad8:	ffff0000 	.word	0xffff0000
 8001adc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001aee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	691a      	ldr	r2, [r3, #16]
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001afa:	b2d2      	uxtb	r2, r2
 8001afc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b02:	1c5a      	adds	r2, r3, #1
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b0c:	3b01      	subs	r3, #1
 8001b0e:	b29a      	uxth	r2, r3
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b18:	b29b      	uxth	r3, r3
 8001b1a:	3b01      	subs	r3, #1
 8001b1c:	b29a      	uxth	r2, r3
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	691a      	ldr	r2, [r3, #16]
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b2c:	b2d2      	uxtb	r2, r2
 8001b2e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b34:	1c5a      	adds	r2, r3, #1
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b3e:	3b01      	subs	r3, #1
 8001b40:	b29a      	uxth	r2, r3
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b4a:	b29b      	uxth	r3, r3
 8001b4c:	3b01      	subs	r3, #1
 8001b4e:	b29a      	uxth	r2, r3
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001b54:	e0b8      	b.n	8001cc8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b58:	9300      	str	r3, [sp, #0]
 8001b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	4966      	ldr	r1, [pc, #408]	; (8001cf8 <HAL_I2C_Mem_Read+0x448>)
 8001b60:	68f8      	ldr	r0, [r7, #12]
 8001b62:	f000 f9b3 	bl	8001ecc <I2C_WaitOnFlagUntilTimeout>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d001      	beq.n	8001b70 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e0bf      	b.n	8001cf0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b7e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	691a      	ldr	r2, [r3, #16]
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b8a:	b2d2      	uxtb	r2, r2
 8001b8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b92:	1c5a      	adds	r2, r3, #1
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b9c:	3b01      	subs	r3, #1
 8001b9e:	b29a      	uxth	r2, r3
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ba8:	b29b      	uxth	r3, r3
 8001baa:	3b01      	subs	r3, #1
 8001bac:	b29a      	uxth	r2, r3
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb4:	9300      	str	r3, [sp, #0]
 8001bb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bb8:	2200      	movs	r2, #0
 8001bba:	494f      	ldr	r1, [pc, #316]	; (8001cf8 <HAL_I2C_Mem_Read+0x448>)
 8001bbc:	68f8      	ldr	r0, [r7, #12]
 8001bbe:	f000 f985 	bl	8001ecc <I2C_WaitOnFlagUntilTimeout>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d001      	beq.n	8001bcc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e091      	b.n	8001cf0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001bda:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	691a      	ldr	r2, [r3, #16]
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be6:	b2d2      	uxtb	r2, r2
 8001be8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bee:	1c5a      	adds	r2, r3, #1
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bf8:	3b01      	subs	r3, #1
 8001bfa:	b29a      	uxth	r2, r3
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c04:	b29b      	uxth	r3, r3
 8001c06:	3b01      	subs	r3, #1
 8001c08:	b29a      	uxth	r2, r3
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	691a      	ldr	r2, [r3, #16]
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c18:	b2d2      	uxtb	r2, r2
 8001c1a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c20:	1c5a      	adds	r2, r3, #1
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c2a:	3b01      	subs	r3, #1
 8001c2c:	b29a      	uxth	r2, r3
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c36:	b29b      	uxth	r3, r3
 8001c38:	3b01      	subs	r3, #1
 8001c3a:	b29a      	uxth	r2, r3
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001c40:	e042      	b.n	8001cc8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c44:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001c46:	68f8      	ldr	r0, [r7, #12]
 8001c48:	f000 fa57 	bl	80020fa <I2C_WaitOnRXNEFlagUntilTimeout>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d001      	beq.n	8001c56 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e04c      	b.n	8001cf0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	691a      	ldr	r2, [r3, #16]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c60:	b2d2      	uxtb	r2, r2
 8001c62:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c68:	1c5a      	adds	r2, r3, #1
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c72:	3b01      	subs	r3, #1
 8001c74:	b29a      	uxth	r2, r3
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c7e:	b29b      	uxth	r3, r3
 8001c80:	3b01      	subs	r3, #1
 8001c82:	b29a      	uxth	r2, r3
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	695b      	ldr	r3, [r3, #20]
 8001c8e:	f003 0304 	and.w	r3, r3, #4
 8001c92:	2b04      	cmp	r3, #4
 8001c94:	d118      	bne.n	8001cc8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	691a      	ldr	r2, [r3, #16]
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca0:	b2d2      	uxtb	r2, r2
 8001ca2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca8:	1c5a      	adds	r2, r3, #1
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cb2:	3b01      	subs	r3, #1
 8001cb4:	b29a      	uxth	r2, r3
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cbe:	b29b      	uxth	r3, r3
 8001cc0:	3b01      	subs	r3, #1
 8001cc2:	b29a      	uxth	r2, r3
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	f47f aec2 	bne.w	8001a56 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	2220      	movs	r2, #32
 8001cd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001cea:	2300      	movs	r3, #0
 8001cec:	e000      	b.n	8001cf0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8001cee:	2302      	movs	r3, #2
  }
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3728      	adds	r7, #40	; 0x28
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	00010004 	.word	0x00010004

08001cfc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b088      	sub	sp, #32
 8001d00:	af02      	add	r7, sp, #8
 8001d02:	60f8      	str	r0, [r7, #12]
 8001d04:	4608      	mov	r0, r1
 8001d06:	4611      	mov	r1, r2
 8001d08:	461a      	mov	r2, r3
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	817b      	strh	r3, [r7, #10]
 8001d0e:	460b      	mov	r3, r1
 8001d10:	813b      	strh	r3, [r7, #8]
 8001d12:	4613      	mov	r3, r2
 8001d14:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001d24:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d34:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d38:	9300      	str	r3, [sp, #0]
 8001d3a:	6a3b      	ldr	r3, [r7, #32]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001d42:	68f8      	ldr	r0, [r7, #12]
 8001d44:	f000 f8c2 	bl	8001ecc <I2C_WaitOnFlagUntilTimeout>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d00d      	beq.n	8001d6a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d5c:	d103      	bne.n	8001d66 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d64:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001d66:	2303      	movs	r3, #3
 8001d68:	e0aa      	b.n	8001ec0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001d6a:	897b      	ldrh	r3, [r7, #10]
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	461a      	mov	r2, r3
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001d78:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d7c:	6a3a      	ldr	r2, [r7, #32]
 8001d7e:	4952      	ldr	r1, [pc, #328]	; (8001ec8 <I2C_RequestMemoryRead+0x1cc>)
 8001d80:	68f8      	ldr	r0, [r7, #12]
 8001d82:	f000 f8fa 	bl	8001f7a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d001      	beq.n	8001d90 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e097      	b.n	8001ec0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d90:	2300      	movs	r3, #0
 8001d92:	617b      	str	r3, [r7, #20]
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	695b      	ldr	r3, [r3, #20]
 8001d9a:	617b      	str	r3, [r7, #20]
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	699b      	ldr	r3, [r3, #24]
 8001da2:	617b      	str	r3, [r7, #20]
 8001da4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001da6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001da8:	6a39      	ldr	r1, [r7, #32]
 8001daa:	68f8      	ldr	r0, [r7, #12]
 8001dac:	f000 f964 	bl	8002078 <I2C_WaitOnTXEFlagUntilTimeout>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d00d      	beq.n	8001dd2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dba:	2b04      	cmp	r3, #4
 8001dbc:	d107      	bne.n	8001dce <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001dcc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e076      	b.n	8001ec0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001dd2:	88fb      	ldrh	r3, [r7, #6]
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d105      	bne.n	8001de4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001dd8:	893b      	ldrh	r3, [r7, #8]
 8001dda:	b2da      	uxtb	r2, r3
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	611a      	str	r2, [r3, #16]
 8001de2:	e021      	b.n	8001e28 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001de4:	893b      	ldrh	r3, [r7, #8]
 8001de6:	0a1b      	lsrs	r3, r3, #8
 8001de8:	b29b      	uxth	r3, r3
 8001dea:	b2da      	uxtb	r2, r3
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001df2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001df4:	6a39      	ldr	r1, [r7, #32]
 8001df6:	68f8      	ldr	r0, [r7, #12]
 8001df8:	f000 f93e 	bl	8002078 <I2C_WaitOnTXEFlagUntilTimeout>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d00d      	beq.n	8001e1e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e06:	2b04      	cmp	r3, #4
 8001e08:	d107      	bne.n	8001e1a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e18:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e050      	b.n	8001ec0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001e1e:	893b      	ldrh	r3, [r7, #8]
 8001e20:	b2da      	uxtb	r2, r3
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e2a:	6a39      	ldr	r1, [r7, #32]
 8001e2c:	68f8      	ldr	r0, [r7, #12]
 8001e2e:	f000 f923 	bl	8002078 <I2C_WaitOnTXEFlagUntilTimeout>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d00d      	beq.n	8001e54 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3c:	2b04      	cmp	r3, #4
 8001e3e:	d107      	bne.n	8001e50 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e4e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	e035      	b.n	8001ec0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e62:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e66:	9300      	str	r3, [sp, #0]
 8001e68:	6a3b      	ldr	r3, [r7, #32]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001e70:	68f8      	ldr	r0, [r7, #12]
 8001e72:	f000 f82b 	bl	8001ecc <I2C_WaitOnFlagUntilTimeout>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d00d      	beq.n	8001e98 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e8a:	d103      	bne.n	8001e94 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e92:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001e94:	2303      	movs	r3, #3
 8001e96:	e013      	b.n	8001ec0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001e98:	897b      	ldrh	r3, [r7, #10]
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	f043 0301 	orr.w	r3, r3, #1
 8001ea0:	b2da      	uxtb	r2, r3
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eaa:	6a3a      	ldr	r2, [r7, #32]
 8001eac:	4906      	ldr	r1, [pc, #24]	; (8001ec8 <I2C_RequestMemoryRead+0x1cc>)
 8001eae:	68f8      	ldr	r0, [r7, #12]
 8001eb0:	f000 f863 	bl	8001f7a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e000      	b.n	8001ec0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8001ebe:	2300      	movs	r3, #0
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3718      	adds	r7, #24
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	00010002 	.word	0x00010002

08001ecc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b084      	sub	sp, #16
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	60f8      	str	r0, [r7, #12]
 8001ed4:	60b9      	str	r1, [r7, #8]
 8001ed6:	603b      	str	r3, [r7, #0]
 8001ed8:	4613      	mov	r3, r2
 8001eda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001edc:	e025      	b.n	8001f2a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ee4:	d021      	beq.n	8001f2a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ee6:	f7ff f8ef 	bl	80010c8 <HAL_GetTick>
 8001eea:	4602      	mov	r2, r0
 8001eec:	69bb      	ldr	r3, [r7, #24]
 8001eee:	1ad3      	subs	r3, r2, r3
 8001ef0:	683a      	ldr	r2, [r7, #0]
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	d302      	bcc.n	8001efc <I2C_WaitOnFlagUntilTimeout+0x30>
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d116      	bne.n	8001f2a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	2200      	movs	r2, #0
 8001f00:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	2220      	movs	r2, #32
 8001f06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f16:	f043 0220 	orr.w	r2, r3, #32
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	2200      	movs	r2, #0
 8001f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e023      	b.n	8001f72 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	0c1b      	lsrs	r3, r3, #16
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	d10d      	bne.n	8001f50 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	695b      	ldr	r3, [r3, #20]
 8001f3a:	43da      	mvns	r2, r3
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	4013      	ands	r3, r2
 8001f40:	b29b      	uxth	r3, r3
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	bf0c      	ite	eq
 8001f46:	2301      	moveq	r3, #1
 8001f48:	2300      	movne	r3, #0
 8001f4a:	b2db      	uxtb	r3, r3
 8001f4c:	461a      	mov	r2, r3
 8001f4e:	e00c      	b.n	8001f6a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	699b      	ldr	r3, [r3, #24]
 8001f56:	43da      	mvns	r2, r3
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	b29b      	uxth	r3, r3
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	bf0c      	ite	eq
 8001f62:	2301      	moveq	r3, #1
 8001f64:	2300      	movne	r3, #0
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	461a      	mov	r2, r3
 8001f6a:	79fb      	ldrb	r3, [r7, #7]
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d0b6      	beq.n	8001ede <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001f70:	2300      	movs	r3, #0
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3710      	adds	r7, #16
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}

08001f7a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001f7a:	b580      	push	{r7, lr}
 8001f7c:	b084      	sub	sp, #16
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	60f8      	str	r0, [r7, #12]
 8001f82:	60b9      	str	r1, [r7, #8]
 8001f84:	607a      	str	r2, [r7, #4]
 8001f86:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001f88:	e051      	b.n	800202e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	695b      	ldr	r3, [r3, #20]
 8001f90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f98:	d123      	bne.n	8001fe2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fa8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001fb2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	2220      	movs	r2, #32
 8001fbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fce:	f043 0204 	orr.w	r2, r3, #4
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e046      	b.n	8002070 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fe8:	d021      	beq.n	800202e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fea:	f7ff f86d 	bl	80010c8 <HAL_GetTick>
 8001fee:	4602      	mov	r2, r0
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	1ad3      	subs	r3, r2, r3
 8001ff4:	687a      	ldr	r2, [r7, #4]
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	d302      	bcc.n	8002000 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d116      	bne.n	800202e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	2200      	movs	r2, #0
 8002004:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	2220      	movs	r2, #32
 800200a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	2200      	movs	r2, #0
 8002012:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201a:	f043 0220 	orr.w	r2, r3, #32
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	2200      	movs	r2, #0
 8002026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e020      	b.n	8002070 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	0c1b      	lsrs	r3, r3, #16
 8002032:	b2db      	uxtb	r3, r3
 8002034:	2b01      	cmp	r3, #1
 8002036:	d10c      	bne.n	8002052 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	695b      	ldr	r3, [r3, #20]
 800203e:	43da      	mvns	r2, r3
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	4013      	ands	r3, r2
 8002044:	b29b      	uxth	r3, r3
 8002046:	2b00      	cmp	r3, #0
 8002048:	bf14      	ite	ne
 800204a:	2301      	movne	r3, #1
 800204c:	2300      	moveq	r3, #0
 800204e:	b2db      	uxtb	r3, r3
 8002050:	e00b      	b.n	800206a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	699b      	ldr	r3, [r3, #24]
 8002058:	43da      	mvns	r2, r3
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	4013      	ands	r3, r2
 800205e:	b29b      	uxth	r3, r3
 8002060:	2b00      	cmp	r3, #0
 8002062:	bf14      	ite	ne
 8002064:	2301      	movne	r3, #1
 8002066:	2300      	moveq	r3, #0
 8002068:	b2db      	uxtb	r3, r3
 800206a:	2b00      	cmp	r3, #0
 800206c:	d18d      	bne.n	8001f8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800206e:	2300      	movs	r3, #0
}
 8002070:	4618      	mov	r0, r3
 8002072:	3710      	adds	r7, #16
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}

08002078 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b084      	sub	sp, #16
 800207c:	af00      	add	r7, sp, #0
 800207e:	60f8      	str	r0, [r7, #12]
 8002080:	60b9      	str	r1, [r7, #8]
 8002082:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002084:	e02d      	b.n	80020e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002086:	68f8      	ldr	r0, [r7, #12]
 8002088:	f000 f88d 	bl	80021a6 <I2C_IsAcknowledgeFailed>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d001      	beq.n	8002096 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e02d      	b.n	80020f2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	f1b3 3fff 	cmp.w	r3, #4294967295
 800209c:	d021      	beq.n	80020e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800209e:	f7ff f813 	bl	80010c8 <HAL_GetTick>
 80020a2:	4602      	mov	r2, r0
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	1ad3      	subs	r3, r2, r3
 80020a8:	68ba      	ldr	r2, [r7, #8]
 80020aa:	429a      	cmp	r2, r3
 80020ac:	d302      	bcc.n	80020b4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d116      	bne.n	80020e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	2200      	movs	r2, #0
 80020b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	2220      	movs	r2, #32
 80020be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	2200      	movs	r2, #0
 80020c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ce:	f043 0220 	orr.w	r2, r3, #32
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	2200      	movs	r2, #0
 80020da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e007      	b.n	80020f2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	695b      	ldr	r3, [r3, #20]
 80020e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020ec:	2b80      	cmp	r3, #128	; 0x80
 80020ee:	d1ca      	bne.n	8002086 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80020f0:	2300      	movs	r3, #0
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3710      	adds	r7, #16
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}

080020fa <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80020fa:	b580      	push	{r7, lr}
 80020fc:	b084      	sub	sp, #16
 80020fe:	af00      	add	r7, sp, #0
 8002100:	60f8      	str	r0, [r7, #12]
 8002102:	60b9      	str	r1, [r7, #8]
 8002104:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002106:	e042      	b.n	800218e <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	695b      	ldr	r3, [r3, #20]
 800210e:	f003 0310 	and.w	r3, r3, #16
 8002112:	2b10      	cmp	r3, #16
 8002114:	d119      	bne.n	800214a <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f06f 0210 	mvn.w	r2, #16
 800211e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	2200      	movs	r2, #0
 8002124:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	2220      	movs	r2, #32
 800212a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	2200      	movs	r2, #0
 8002132:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	2200      	movs	r2, #0
 8002142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e029      	b.n	800219e <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800214a:	f7fe ffbd 	bl	80010c8 <HAL_GetTick>
 800214e:	4602      	mov	r2, r0
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	1ad3      	subs	r3, r2, r3
 8002154:	68ba      	ldr	r2, [r7, #8]
 8002156:	429a      	cmp	r2, r3
 8002158:	d302      	bcc.n	8002160 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d116      	bne.n	800218e <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	2200      	movs	r2, #0
 8002164:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	2220      	movs	r2, #32
 800216a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	2200      	movs	r2, #0
 8002172:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217a:	f043 0220 	orr.w	r2, r3, #32
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	2200      	movs	r2, #0
 8002186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e007      	b.n	800219e <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	695b      	ldr	r3, [r3, #20]
 8002194:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002198:	2b40      	cmp	r3, #64	; 0x40
 800219a:	d1b5      	bne.n	8002108 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800219c:	2300      	movs	r3, #0
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3710      	adds	r7, #16
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}

080021a6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80021a6:	b480      	push	{r7}
 80021a8:	b083      	sub	sp, #12
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	695b      	ldr	r3, [r3, #20]
 80021b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021bc:	d11b      	bne.n	80021f6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80021c6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2200      	movs	r2, #0
 80021cc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2220      	movs	r2, #32
 80021d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2200      	movs	r2, #0
 80021da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e2:	f043 0204 	orr.w	r2, r3, #4
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2200      	movs	r2, #0
 80021ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e000      	b.n	80021f8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80021f6:	2300      	movs	r3, #0
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	370c      	adds	r7, #12
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr

08002204 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002204:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002206:	b08f      	sub	sp, #60	; 0x3c
 8002208:	af0a      	add	r7, sp, #40	; 0x28
 800220a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d101      	bne.n	8002216 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e10f      	b.n	8002436 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002222:	b2db      	uxtb	r3, r3
 8002224:	2b00      	cmp	r3, #0
 8002226:	d106      	bne.n	8002236 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2200      	movs	r2, #0
 800222c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002230:	6878      	ldr	r0, [r7, #4]
 8002232:	f009 fb59 	bl	800b8e8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2203      	movs	r2, #3
 800223a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002242:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002246:	2b00      	cmp	r3, #0
 8002248:	d102      	bne.n	8002250 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2200      	movs	r2, #0
 800224e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4618      	mov	r0, r3
 8002256:	f003 f846 	bl	80052e6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	603b      	str	r3, [r7, #0]
 8002260:	687e      	ldr	r6, [r7, #4]
 8002262:	466d      	mov	r5, sp
 8002264:	f106 0410 	add.w	r4, r6, #16
 8002268:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800226a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800226c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800226e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002270:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002274:	e885 0003 	stmia.w	r5, {r0, r1}
 8002278:	1d33      	adds	r3, r6, #4
 800227a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800227c:	6838      	ldr	r0, [r7, #0]
 800227e:	f002 ff1d 	bl	80050bc <USB_CoreInit>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d005      	beq.n	8002294 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2202      	movs	r2, #2
 800228c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	e0d0      	b.n	8002436 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	2100      	movs	r1, #0
 800229a:	4618      	mov	r0, r3
 800229c:	f003 f834 	bl	8005308 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022a0:	2300      	movs	r3, #0
 80022a2:	73fb      	strb	r3, [r7, #15]
 80022a4:	e04a      	b.n	800233c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80022a6:	7bfa      	ldrb	r2, [r7, #15]
 80022a8:	6879      	ldr	r1, [r7, #4]
 80022aa:	4613      	mov	r3, r2
 80022ac:	00db      	lsls	r3, r3, #3
 80022ae:	4413      	add	r3, r2
 80022b0:	009b      	lsls	r3, r3, #2
 80022b2:	440b      	add	r3, r1
 80022b4:	333d      	adds	r3, #61	; 0x3d
 80022b6:	2201      	movs	r2, #1
 80022b8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80022ba:	7bfa      	ldrb	r2, [r7, #15]
 80022bc:	6879      	ldr	r1, [r7, #4]
 80022be:	4613      	mov	r3, r2
 80022c0:	00db      	lsls	r3, r3, #3
 80022c2:	4413      	add	r3, r2
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	440b      	add	r3, r1
 80022c8:	333c      	adds	r3, #60	; 0x3c
 80022ca:	7bfa      	ldrb	r2, [r7, #15]
 80022cc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80022ce:	7bfa      	ldrb	r2, [r7, #15]
 80022d0:	7bfb      	ldrb	r3, [r7, #15]
 80022d2:	b298      	uxth	r0, r3
 80022d4:	6879      	ldr	r1, [r7, #4]
 80022d6:	4613      	mov	r3, r2
 80022d8:	00db      	lsls	r3, r3, #3
 80022da:	4413      	add	r3, r2
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	440b      	add	r3, r1
 80022e0:	3344      	adds	r3, #68	; 0x44
 80022e2:	4602      	mov	r2, r0
 80022e4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80022e6:	7bfa      	ldrb	r2, [r7, #15]
 80022e8:	6879      	ldr	r1, [r7, #4]
 80022ea:	4613      	mov	r3, r2
 80022ec:	00db      	lsls	r3, r3, #3
 80022ee:	4413      	add	r3, r2
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	440b      	add	r3, r1
 80022f4:	3340      	adds	r3, #64	; 0x40
 80022f6:	2200      	movs	r2, #0
 80022f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80022fa:	7bfa      	ldrb	r2, [r7, #15]
 80022fc:	6879      	ldr	r1, [r7, #4]
 80022fe:	4613      	mov	r3, r2
 8002300:	00db      	lsls	r3, r3, #3
 8002302:	4413      	add	r3, r2
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	440b      	add	r3, r1
 8002308:	3348      	adds	r3, #72	; 0x48
 800230a:	2200      	movs	r2, #0
 800230c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800230e:	7bfa      	ldrb	r2, [r7, #15]
 8002310:	6879      	ldr	r1, [r7, #4]
 8002312:	4613      	mov	r3, r2
 8002314:	00db      	lsls	r3, r3, #3
 8002316:	4413      	add	r3, r2
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	440b      	add	r3, r1
 800231c:	334c      	adds	r3, #76	; 0x4c
 800231e:	2200      	movs	r2, #0
 8002320:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002322:	7bfa      	ldrb	r2, [r7, #15]
 8002324:	6879      	ldr	r1, [r7, #4]
 8002326:	4613      	mov	r3, r2
 8002328:	00db      	lsls	r3, r3, #3
 800232a:	4413      	add	r3, r2
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	440b      	add	r3, r1
 8002330:	3354      	adds	r3, #84	; 0x54
 8002332:	2200      	movs	r2, #0
 8002334:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002336:	7bfb      	ldrb	r3, [r7, #15]
 8002338:	3301      	adds	r3, #1
 800233a:	73fb      	strb	r3, [r7, #15]
 800233c:	7bfa      	ldrb	r2, [r7, #15]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	429a      	cmp	r2, r3
 8002344:	d3af      	bcc.n	80022a6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002346:	2300      	movs	r3, #0
 8002348:	73fb      	strb	r3, [r7, #15]
 800234a:	e044      	b.n	80023d6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800234c:	7bfa      	ldrb	r2, [r7, #15]
 800234e:	6879      	ldr	r1, [r7, #4]
 8002350:	4613      	mov	r3, r2
 8002352:	00db      	lsls	r3, r3, #3
 8002354:	4413      	add	r3, r2
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	440b      	add	r3, r1
 800235a:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800235e:	2200      	movs	r2, #0
 8002360:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002362:	7bfa      	ldrb	r2, [r7, #15]
 8002364:	6879      	ldr	r1, [r7, #4]
 8002366:	4613      	mov	r3, r2
 8002368:	00db      	lsls	r3, r3, #3
 800236a:	4413      	add	r3, r2
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	440b      	add	r3, r1
 8002370:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002374:	7bfa      	ldrb	r2, [r7, #15]
 8002376:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002378:	7bfa      	ldrb	r2, [r7, #15]
 800237a:	6879      	ldr	r1, [r7, #4]
 800237c:	4613      	mov	r3, r2
 800237e:	00db      	lsls	r3, r3, #3
 8002380:	4413      	add	r3, r2
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	440b      	add	r3, r1
 8002386:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800238a:	2200      	movs	r2, #0
 800238c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800238e:	7bfa      	ldrb	r2, [r7, #15]
 8002390:	6879      	ldr	r1, [r7, #4]
 8002392:	4613      	mov	r3, r2
 8002394:	00db      	lsls	r3, r3, #3
 8002396:	4413      	add	r3, r2
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	440b      	add	r3, r1
 800239c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80023a0:	2200      	movs	r2, #0
 80023a2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80023a4:	7bfa      	ldrb	r2, [r7, #15]
 80023a6:	6879      	ldr	r1, [r7, #4]
 80023a8:	4613      	mov	r3, r2
 80023aa:	00db      	lsls	r3, r3, #3
 80023ac:	4413      	add	r3, r2
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	440b      	add	r3, r1
 80023b2:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80023b6:	2200      	movs	r2, #0
 80023b8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80023ba:	7bfa      	ldrb	r2, [r7, #15]
 80023bc:	6879      	ldr	r1, [r7, #4]
 80023be:	4613      	mov	r3, r2
 80023c0:	00db      	lsls	r3, r3, #3
 80023c2:	4413      	add	r3, r2
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	440b      	add	r3, r1
 80023c8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80023cc:	2200      	movs	r2, #0
 80023ce:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023d0:	7bfb      	ldrb	r3, [r7, #15]
 80023d2:	3301      	adds	r3, #1
 80023d4:	73fb      	strb	r3, [r7, #15]
 80023d6:	7bfa      	ldrb	r2, [r7, #15]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	429a      	cmp	r2, r3
 80023de:	d3b5      	bcc.n	800234c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	603b      	str	r3, [r7, #0]
 80023e6:	687e      	ldr	r6, [r7, #4]
 80023e8:	466d      	mov	r5, sp
 80023ea:	f106 0410 	add.w	r4, r6, #16
 80023ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023f6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80023fa:	e885 0003 	stmia.w	r5, {r0, r1}
 80023fe:	1d33      	adds	r3, r6, #4
 8002400:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002402:	6838      	ldr	r0, [r7, #0]
 8002404:	f002 ffcc 	bl	80053a0 <USB_DevInit>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d005      	beq.n	800241a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2202      	movs	r2, #2
 8002412:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e00d      	b.n	8002436 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2200      	movs	r2, #0
 800241e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2201      	movs	r2, #1
 8002426:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4618      	mov	r0, r3
 8002430:	f004 f91b 	bl	800666a <USB_DevDisconnect>

  return HAL_OK;
 8002434:	2300      	movs	r3, #0
}
 8002436:	4618      	mov	r0, r3
 8002438:	3714      	adds	r7, #20
 800243a:	46bd      	mov	sp, r7
 800243c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800243e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800243e:	b580      	push	{r7, lr}
 8002440:	b084      	sub	sp, #16
 8002442:	af00      	add	r7, sp, #0
 8002444:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002452:	2b01      	cmp	r3, #1
 8002454:	d101      	bne.n	800245a <HAL_PCD_Start+0x1c>
 8002456:	2302      	movs	r3, #2
 8002458:	e020      	b.n	800249c <HAL_PCD_Start+0x5e>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2201      	movs	r2, #1
 800245e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002466:	2b01      	cmp	r3, #1
 8002468:	d109      	bne.n	800247e <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800246e:	2b01      	cmp	r3, #1
 8002470:	d005      	beq.n	800247e <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002476:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4618      	mov	r0, r3
 8002484:	f002 ff1e 	bl	80052c4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4618      	mov	r0, r3
 800248e:	f004 f8cb 	bl	8006628 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2200      	movs	r2, #0
 8002496:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800249a:	2300      	movs	r3, #0
}
 800249c:	4618      	mov	r0, r3
 800249e:	3710      	adds	r7, #16
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}

080024a4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80024a4:	b590      	push	{r4, r7, lr}
 80024a6:	b08d      	sub	sp, #52	; 0x34
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024b2:	6a3b      	ldr	r3, [r7, #32]
 80024b4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4618      	mov	r0, r3
 80024bc:	f004 f989 	bl	80067d2 <USB_GetMode>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	f040 848a 	bne.w	8002ddc <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4618      	mov	r0, r3
 80024ce:	f004 f8ed 	bl	80066ac <USB_ReadInterrupts>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	f000 8480 	beq.w	8002dda <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	0a1b      	lsrs	r3, r3, #8
 80024e4:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4618      	mov	r0, r3
 80024f4:	f004 f8da 	bl	80066ac <USB_ReadInterrupts>
 80024f8:	4603      	mov	r3, r0
 80024fa:	f003 0302 	and.w	r3, r3, #2
 80024fe:	2b02      	cmp	r3, #2
 8002500:	d107      	bne.n	8002512 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	695a      	ldr	r2, [r3, #20]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f002 0202 	and.w	r2, r2, #2
 8002510:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4618      	mov	r0, r3
 8002518:	f004 f8c8 	bl	80066ac <USB_ReadInterrupts>
 800251c:	4603      	mov	r3, r0
 800251e:	f003 0310 	and.w	r3, r3, #16
 8002522:	2b10      	cmp	r3, #16
 8002524:	d161      	bne.n	80025ea <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	699a      	ldr	r2, [r3, #24]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f022 0210 	bic.w	r2, r2, #16
 8002534:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002536:	6a3b      	ldr	r3, [r7, #32]
 8002538:	6a1b      	ldr	r3, [r3, #32]
 800253a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800253c:	69bb      	ldr	r3, [r7, #24]
 800253e:	f003 020f 	and.w	r2, r3, #15
 8002542:	4613      	mov	r3, r2
 8002544:	00db      	lsls	r3, r3, #3
 8002546:	4413      	add	r3, r2
 8002548:	009b      	lsls	r3, r3, #2
 800254a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800254e:	687a      	ldr	r2, [r7, #4]
 8002550:	4413      	add	r3, r2
 8002552:	3304      	adds	r3, #4
 8002554:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002556:	69bb      	ldr	r3, [r7, #24]
 8002558:	0c5b      	lsrs	r3, r3, #17
 800255a:	f003 030f 	and.w	r3, r3, #15
 800255e:	2b02      	cmp	r3, #2
 8002560:	d124      	bne.n	80025ac <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002562:	69ba      	ldr	r2, [r7, #24]
 8002564:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002568:	4013      	ands	r3, r2
 800256a:	2b00      	cmp	r3, #0
 800256c:	d035      	beq.n	80025da <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002572:	69bb      	ldr	r3, [r7, #24]
 8002574:	091b      	lsrs	r3, r3, #4
 8002576:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002578:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800257c:	b29b      	uxth	r3, r3
 800257e:	461a      	mov	r2, r3
 8002580:	6a38      	ldr	r0, [r7, #32]
 8002582:	f003 feff 	bl	8006384 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	691a      	ldr	r2, [r3, #16]
 800258a:	69bb      	ldr	r3, [r7, #24]
 800258c:	091b      	lsrs	r3, r3, #4
 800258e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002592:	441a      	add	r2, r3
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	6a1a      	ldr	r2, [r3, #32]
 800259c:	69bb      	ldr	r3, [r7, #24]
 800259e:	091b      	lsrs	r3, r3, #4
 80025a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025a4:	441a      	add	r2, r3
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	621a      	str	r2, [r3, #32]
 80025aa:	e016      	b.n	80025da <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80025ac:	69bb      	ldr	r3, [r7, #24]
 80025ae:	0c5b      	lsrs	r3, r3, #17
 80025b0:	f003 030f 	and.w	r3, r3, #15
 80025b4:	2b06      	cmp	r3, #6
 80025b6:	d110      	bne.n	80025da <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80025be:	2208      	movs	r2, #8
 80025c0:	4619      	mov	r1, r3
 80025c2:	6a38      	ldr	r0, [r7, #32]
 80025c4:	f003 fede 	bl	8006384 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	6a1a      	ldr	r2, [r3, #32]
 80025cc:	69bb      	ldr	r3, [r7, #24]
 80025ce:	091b      	lsrs	r3, r3, #4
 80025d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025d4:	441a      	add	r2, r3
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	699a      	ldr	r2, [r3, #24]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f042 0210 	orr.w	r2, r2, #16
 80025e8:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4618      	mov	r0, r3
 80025f0:	f004 f85c 	bl	80066ac <USB_ReadInterrupts>
 80025f4:	4603      	mov	r3, r0
 80025f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025fa:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80025fe:	f040 80a7 	bne.w	8002750 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002602:	2300      	movs	r3, #0
 8002604:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4618      	mov	r0, r3
 800260c:	f004 f861 	bl	80066d2 <USB_ReadDevAllOutEpInterrupt>
 8002610:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002612:	e099      	b.n	8002748 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002616:	f003 0301 	and.w	r3, r3, #1
 800261a:	2b00      	cmp	r3, #0
 800261c:	f000 808e 	beq.w	800273c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002626:	b2d2      	uxtb	r2, r2
 8002628:	4611      	mov	r1, r2
 800262a:	4618      	mov	r0, r3
 800262c:	f004 f885 	bl	800673a <USB_ReadDevOutEPInterrupt>
 8002630:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	f003 0301 	and.w	r3, r3, #1
 8002638:	2b00      	cmp	r3, #0
 800263a:	d00c      	beq.n	8002656 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800263c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263e:	015a      	lsls	r2, r3, #5
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	4413      	add	r3, r2
 8002644:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002648:	461a      	mov	r2, r3
 800264a:	2301      	movs	r3, #1
 800264c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800264e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	f000 fec3 	bl	80033dc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	f003 0308 	and.w	r3, r3, #8
 800265c:	2b00      	cmp	r3, #0
 800265e:	d00c      	beq.n	800267a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002662:	015a      	lsls	r2, r3, #5
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	4413      	add	r3, r2
 8002668:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800266c:	461a      	mov	r2, r3
 800266e:	2308      	movs	r3, #8
 8002670:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002672:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	f000 ff99 	bl	80035ac <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	f003 0310 	and.w	r3, r3, #16
 8002680:	2b00      	cmp	r3, #0
 8002682:	d008      	beq.n	8002696 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002686:	015a      	lsls	r2, r3, #5
 8002688:	69fb      	ldr	r3, [r7, #28]
 800268a:	4413      	add	r3, r2
 800268c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002690:	461a      	mov	r2, r3
 8002692:	2310      	movs	r3, #16
 8002694:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	f003 0302 	and.w	r3, r3, #2
 800269c:	2b00      	cmp	r3, #0
 800269e:	d030      	beq.n	8002702 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80026a0:	6a3b      	ldr	r3, [r7, #32]
 80026a2:	695b      	ldr	r3, [r3, #20]
 80026a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026a8:	2b80      	cmp	r3, #128	; 0x80
 80026aa:	d109      	bne.n	80026c0 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	69fa      	ldr	r2, [r7, #28]
 80026b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026be:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80026c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026c2:	4613      	mov	r3, r2
 80026c4:	00db      	lsls	r3, r3, #3
 80026c6:	4413      	add	r3, r2
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80026ce:	687a      	ldr	r2, [r7, #4]
 80026d0:	4413      	add	r3, r2
 80026d2:	3304      	adds	r3, #4
 80026d4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	78db      	ldrb	r3, [r3, #3]
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d108      	bne.n	80026f0 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	2200      	movs	r2, #0
 80026e2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80026e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	4619      	mov	r1, r3
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f009 fa06 	bl	800bafc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80026f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f2:	015a      	lsls	r2, r3, #5
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	4413      	add	r3, r2
 80026f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026fc:	461a      	mov	r2, r3
 80026fe:	2302      	movs	r3, #2
 8002700:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	f003 0320 	and.w	r3, r3, #32
 8002708:	2b00      	cmp	r3, #0
 800270a:	d008      	beq.n	800271e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800270c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270e:	015a      	lsls	r2, r3, #5
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	4413      	add	r3, r2
 8002714:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002718:	461a      	mov	r2, r3
 800271a:	2320      	movs	r3, #32
 800271c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002724:	2b00      	cmp	r3, #0
 8002726:	d009      	beq.n	800273c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272a:	015a      	lsls	r2, r3, #5
 800272c:	69fb      	ldr	r3, [r7, #28]
 800272e:	4413      	add	r3, r2
 8002730:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002734:	461a      	mov	r2, r3
 8002736:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800273a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800273c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273e:	3301      	adds	r3, #1
 8002740:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002744:	085b      	lsrs	r3, r3, #1
 8002746:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800274a:	2b00      	cmp	r3, #0
 800274c:	f47f af62 	bne.w	8002614 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4618      	mov	r0, r3
 8002756:	f003 ffa9 	bl	80066ac <USB_ReadInterrupts>
 800275a:	4603      	mov	r3, r0
 800275c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002760:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002764:	f040 80db 	bne.w	800291e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4618      	mov	r0, r3
 800276e:	f003 ffca 	bl	8006706 <USB_ReadDevAllInEpInterrupt>
 8002772:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002774:	2300      	movs	r3, #0
 8002776:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002778:	e0cd      	b.n	8002916 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800277a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800277c:	f003 0301 	and.w	r3, r3, #1
 8002780:	2b00      	cmp	r3, #0
 8002782:	f000 80c2 	beq.w	800290a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800278c:	b2d2      	uxtb	r2, r2
 800278e:	4611      	mov	r1, r2
 8002790:	4618      	mov	r0, r3
 8002792:	f003 fff0 	bl	8006776 <USB_ReadDevInEPInterrupt>
 8002796:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	f003 0301 	and.w	r3, r3, #1
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d057      	beq.n	8002852 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80027a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a4:	f003 030f 	and.w	r3, r3, #15
 80027a8:	2201      	movs	r2, #1
 80027aa:	fa02 f303 	lsl.w	r3, r2, r3
 80027ae:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	43db      	mvns	r3, r3
 80027bc:	69f9      	ldr	r1, [r7, #28]
 80027be:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80027c2:	4013      	ands	r3, r2
 80027c4:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80027c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c8:	015a      	lsls	r2, r3, #5
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	4413      	add	r3, r2
 80027ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027d2:	461a      	mov	r2, r3
 80027d4:	2301      	movs	r3, #1
 80027d6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	691b      	ldr	r3, [r3, #16]
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d132      	bne.n	8002846 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80027e0:	6879      	ldr	r1, [r7, #4]
 80027e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027e4:	4613      	mov	r3, r2
 80027e6:	00db      	lsls	r3, r3, #3
 80027e8:	4413      	add	r3, r2
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	440b      	add	r3, r1
 80027ee:	334c      	adds	r3, #76	; 0x4c
 80027f0:	6819      	ldr	r1, [r3, #0]
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027f6:	4613      	mov	r3, r2
 80027f8:	00db      	lsls	r3, r3, #3
 80027fa:	4413      	add	r3, r2
 80027fc:	009b      	lsls	r3, r3, #2
 80027fe:	4403      	add	r3, r0
 8002800:	3348      	adds	r3, #72	; 0x48
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4419      	add	r1, r3
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800280a:	4613      	mov	r3, r2
 800280c:	00db      	lsls	r3, r3, #3
 800280e:	4413      	add	r3, r2
 8002810:	009b      	lsls	r3, r3, #2
 8002812:	4403      	add	r3, r0
 8002814:	334c      	adds	r3, #76	; 0x4c
 8002816:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281a:	2b00      	cmp	r3, #0
 800281c:	d113      	bne.n	8002846 <HAL_PCD_IRQHandler+0x3a2>
 800281e:	6879      	ldr	r1, [r7, #4]
 8002820:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002822:	4613      	mov	r3, r2
 8002824:	00db      	lsls	r3, r3, #3
 8002826:	4413      	add	r3, r2
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	440b      	add	r3, r1
 800282c:	3354      	adds	r3, #84	; 0x54
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d108      	bne.n	8002846 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6818      	ldr	r0, [r3, #0]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800283e:	461a      	mov	r2, r3
 8002840:	2101      	movs	r1, #1
 8002842:	f003 fff7 	bl	8006834 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002848:	b2db      	uxtb	r3, r3
 800284a:	4619      	mov	r1, r3
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	f009 f8da 	bl	800ba06 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	f003 0308 	and.w	r3, r3, #8
 8002858:	2b00      	cmp	r3, #0
 800285a:	d008      	beq.n	800286e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800285c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285e:	015a      	lsls	r2, r3, #5
 8002860:	69fb      	ldr	r3, [r7, #28]
 8002862:	4413      	add	r3, r2
 8002864:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002868:	461a      	mov	r2, r3
 800286a:	2308      	movs	r3, #8
 800286c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	f003 0310 	and.w	r3, r3, #16
 8002874:	2b00      	cmp	r3, #0
 8002876:	d008      	beq.n	800288a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287a:	015a      	lsls	r2, r3, #5
 800287c:	69fb      	ldr	r3, [r7, #28]
 800287e:	4413      	add	r3, r2
 8002880:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002884:	461a      	mov	r2, r3
 8002886:	2310      	movs	r3, #16
 8002888:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002890:	2b00      	cmp	r3, #0
 8002892:	d008      	beq.n	80028a6 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002896:	015a      	lsls	r2, r3, #5
 8002898:	69fb      	ldr	r3, [r7, #28]
 800289a:	4413      	add	r3, r2
 800289c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80028a0:	461a      	mov	r2, r3
 80028a2:	2340      	movs	r3, #64	; 0x40
 80028a4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	f003 0302 	and.w	r3, r3, #2
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d023      	beq.n	80028f8 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80028b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028b2:	6a38      	ldr	r0, [r7, #32]
 80028b4:	f002 fed8 	bl	8005668 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80028b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028ba:	4613      	mov	r3, r2
 80028bc:	00db      	lsls	r3, r3, #3
 80028be:	4413      	add	r3, r2
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	3338      	adds	r3, #56	; 0x38
 80028c4:	687a      	ldr	r2, [r7, #4]
 80028c6:	4413      	add	r3, r2
 80028c8:	3304      	adds	r3, #4
 80028ca:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	78db      	ldrb	r3, [r3, #3]
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d108      	bne.n	80028e6 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	2200      	movs	r2, #0
 80028d8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80028da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	4619      	mov	r1, r3
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	f009 f91d 	bl	800bb20 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80028e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e8:	015a      	lsls	r2, r3, #5
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	4413      	add	r3, r2
 80028ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80028f2:	461a      	mov	r2, r3
 80028f4:	2302      	movs	r3, #2
 80028f6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d003      	beq.n	800290a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002902:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	f000 fcdb 	bl	80032c0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800290a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290c:	3301      	adds	r3, #1
 800290e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002912:	085b      	lsrs	r3, r3, #1
 8002914:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002918:	2b00      	cmp	r3, #0
 800291a:	f47f af2e 	bne.w	800277a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4618      	mov	r0, r3
 8002924:	f003 fec2 	bl	80066ac <USB_ReadInterrupts>
 8002928:	4603      	mov	r3, r0
 800292a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800292e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002932:	d122      	bne.n	800297a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	69fa      	ldr	r2, [r7, #28]
 800293e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002942:	f023 0301 	bic.w	r3, r3, #1
 8002946:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800294e:	2b01      	cmp	r3, #1
 8002950:	d108      	bne.n	8002964 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2200      	movs	r2, #0
 8002956:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800295a:	2100      	movs	r1, #0
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	f000 fec3 	bl	80036e8 <HAL_PCDEx_LPM_Callback>
 8002962:	e002      	b.n	800296a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002964:	6878      	ldr	r0, [r7, #4]
 8002966:	f009 f8bb 	bl	800bae0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	695a      	ldr	r2, [r3, #20]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002978:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4618      	mov	r0, r3
 8002980:	f003 fe94 	bl	80066ac <USB_ReadInterrupts>
 8002984:	4603      	mov	r3, r0
 8002986:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800298a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800298e:	d112      	bne.n	80029b6 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002990:	69fb      	ldr	r3, [r7, #28]
 8002992:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	f003 0301 	and.w	r3, r3, #1
 800299c:	2b01      	cmp	r3, #1
 800299e:	d102      	bne.n	80029a6 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	f009 f877 	bl	800ba94 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	695a      	ldr	r2, [r3, #20]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80029b4:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4618      	mov	r0, r3
 80029bc:	f003 fe76 	bl	80066ac <USB_ReadInterrupts>
 80029c0:	4603      	mov	r3, r0
 80029c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029ca:	f040 80b7 	bne.w	8002b3c <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	69fa      	ldr	r2, [r7, #28]
 80029d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80029dc:	f023 0301 	bic.w	r3, r3, #1
 80029e0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	2110      	movs	r1, #16
 80029e8:	4618      	mov	r0, r3
 80029ea:	f002 fe3d 	bl	8005668 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029ee:	2300      	movs	r3, #0
 80029f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029f2:	e046      	b.n	8002a82 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80029f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029f6:	015a      	lsls	r2, r3, #5
 80029f8:	69fb      	ldr	r3, [r7, #28]
 80029fa:	4413      	add	r3, r2
 80029fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a00:	461a      	mov	r2, r3
 8002a02:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002a06:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a0a:	015a      	lsls	r2, r3, #5
 8002a0c:	69fb      	ldr	r3, [r7, #28]
 8002a0e:	4413      	add	r3, r2
 8002a10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a18:	0151      	lsls	r1, r2, #5
 8002a1a:	69fa      	ldr	r2, [r7, #28]
 8002a1c:	440a      	add	r2, r1
 8002a1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002a22:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002a26:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a2a:	015a      	lsls	r2, r3, #5
 8002a2c:	69fb      	ldr	r3, [r7, #28]
 8002a2e:	4413      	add	r3, r2
 8002a30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a34:	461a      	mov	r2, r3
 8002a36:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002a3a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a3e:	015a      	lsls	r2, r3, #5
 8002a40:	69fb      	ldr	r3, [r7, #28]
 8002a42:	4413      	add	r3, r2
 8002a44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a4c:	0151      	lsls	r1, r2, #5
 8002a4e:	69fa      	ldr	r2, [r7, #28]
 8002a50:	440a      	add	r2, r1
 8002a52:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002a56:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002a5a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a5e:	015a      	lsls	r2, r3, #5
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	4413      	add	r3, r2
 8002a64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a6c:	0151      	lsls	r1, r2, #5
 8002a6e:	69fa      	ldr	r2, [r7, #28]
 8002a70:	440a      	add	r2, r1
 8002a72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002a76:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002a7a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a7e:	3301      	adds	r3, #1
 8002a80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d3b3      	bcc.n	80029f4 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a92:	69db      	ldr	r3, [r3, #28]
 8002a94:	69fa      	ldr	r2, [r7, #28]
 8002a96:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a9a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002a9e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d016      	beq.n	8002ad6 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002aa8:	69fb      	ldr	r3, [r7, #28]
 8002aaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002aae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ab2:	69fa      	ldr	r2, [r7, #28]
 8002ab4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ab8:	f043 030b 	orr.w	r3, r3, #11
 8002abc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002ac0:	69fb      	ldr	r3, [r7, #28]
 8002ac2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ac6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ac8:	69fa      	ldr	r2, [r7, #28]
 8002aca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ace:	f043 030b 	orr.w	r3, r3, #11
 8002ad2:	6453      	str	r3, [r2, #68]	; 0x44
 8002ad4:	e015      	b.n	8002b02 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002ad6:	69fb      	ldr	r3, [r7, #28]
 8002ad8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002adc:	695b      	ldr	r3, [r3, #20]
 8002ade:	69fa      	ldr	r2, [r7, #28]
 8002ae0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ae4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002ae8:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002aec:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002af4:	691b      	ldr	r3, [r3, #16]
 8002af6:	69fa      	ldr	r2, [r7, #28]
 8002af8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002afc:	f043 030b 	orr.w	r3, r3, #11
 8002b00:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002b02:	69fb      	ldr	r3, [r7, #28]
 8002b04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	69fa      	ldr	r2, [r7, #28]
 8002b0c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b10:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002b14:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6818      	ldr	r0, [r3, #0]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	691b      	ldr	r3, [r3, #16]
 8002b1e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002b26:	461a      	mov	r2, r3
 8002b28:	f003 fe84 	bl	8006834 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	695a      	ldr	r2, [r3, #20]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002b3a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4618      	mov	r0, r3
 8002b42:	f003 fdb3 	bl	80066ac <USB_ReadInterrupts>
 8002b46:	4603      	mov	r3, r0
 8002b48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b50:	d124      	bne.n	8002b9c <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4618      	mov	r0, r3
 8002b58:	f003 fe49 	bl	80067ee <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4618      	mov	r0, r3
 8002b62:	f002 fdfe 	bl	8005762 <USB_GetDevSpeed>
 8002b66:	4603      	mov	r3, r0
 8002b68:	461a      	mov	r2, r3
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681c      	ldr	r4, [r3, #0]
 8002b72:	f001 fa29 	bl	8003fc8 <HAL_RCC_GetHCLKFreq>
 8002b76:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	461a      	mov	r2, r3
 8002b80:	4620      	mov	r0, r4
 8002b82:	f002 fafd 	bl	8005180 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f008 ff65 	bl	800ba56 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	695a      	ldr	r2, [r3, #20]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002b9a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f003 fd83 	bl	80066ac <USB_ReadInterrupts>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	f003 0308 	and.w	r3, r3, #8
 8002bac:	2b08      	cmp	r3, #8
 8002bae:	d10a      	bne.n	8002bc6 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	f008 ff42 	bl	800ba3a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	695a      	ldr	r2, [r3, #20]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f002 0208 	and.w	r2, r2, #8
 8002bc4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f003 fd6e 	bl	80066ac <USB_ReadInterrupts>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bd6:	2b80      	cmp	r3, #128	; 0x80
 8002bd8:	d122      	bne.n	8002c20 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002bda:	6a3b      	ldr	r3, [r7, #32]
 8002bdc:	699b      	ldr	r3, [r3, #24]
 8002bde:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002be2:	6a3b      	ldr	r3, [r7, #32]
 8002be4:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002be6:	2301      	movs	r3, #1
 8002be8:	627b      	str	r3, [r7, #36]	; 0x24
 8002bea:	e014      	b.n	8002c16 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002bec:	6879      	ldr	r1, [r7, #4]
 8002bee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	00db      	lsls	r3, r3, #3
 8002bf4:	4413      	add	r3, r2
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	440b      	add	r3, r1
 8002bfa:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d105      	bne.n	8002c10 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	4619      	mov	r1, r3
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f000 fb27 	bl	800325e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c12:	3301      	adds	r3, #1
 8002c14:	627b      	str	r3, [r7, #36]	; 0x24
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d3e5      	bcc.n	8002bec <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4618      	mov	r0, r3
 8002c26:	f003 fd41 	bl	80066ac <USB_ReadInterrupts>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c30:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c34:	d13b      	bne.n	8002cae <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c36:	2301      	movs	r3, #1
 8002c38:	627b      	str	r3, [r7, #36]	; 0x24
 8002c3a:	e02b      	b.n	8002c94 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3e:	015a      	lsls	r2, r3, #5
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	4413      	add	r3, r2
 8002c44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002c4c:	6879      	ldr	r1, [r7, #4]
 8002c4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c50:	4613      	mov	r3, r2
 8002c52:	00db      	lsls	r3, r3, #3
 8002c54:	4413      	add	r3, r2
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	440b      	add	r3, r1
 8002c5a:	3340      	adds	r3, #64	; 0x40
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d115      	bne.n	8002c8e <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002c62:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	da12      	bge.n	8002c8e <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002c68:	6879      	ldr	r1, [r7, #4]
 8002c6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c6c:	4613      	mov	r3, r2
 8002c6e:	00db      	lsls	r3, r3, #3
 8002c70:	4413      	add	r3, r2
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	440b      	add	r3, r1
 8002c76:	333f      	adds	r3, #63	; 0x3f
 8002c78:	2201      	movs	r2, #1
 8002c7a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7e:	b2db      	uxtb	r3, r3
 8002c80:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	4619      	mov	r1, r3
 8002c88:	6878      	ldr	r0, [r7, #4]
 8002c8a:	f000 fae8 	bl	800325e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c90:	3301      	adds	r3, #1
 8002c92:	627b      	str	r3, [r7, #36]	; 0x24
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d3ce      	bcc.n	8002c3c <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	695a      	ldr	r2, [r3, #20]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002cac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f003 fcfa 	bl	80066ac <USB_ReadInterrupts>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cbe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002cc2:	d155      	bne.n	8002d70 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	627b      	str	r3, [r7, #36]	; 0x24
 8002cc8:	e045      	b.n	8002d56 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ccc:	015a      	lsls	r2, r3, #5
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	4413      	add	r3, r2
 8002cd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002cda:	6879      	ldr	r1, [r7, #4]
 8002cdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cde:	4613      	mov	r3, r2
 8002ce0:	00db      	lsls	r3, r3, #3
 8002ce2:	4413      	add	r3, r2
 8002ce4:	009b      	lsls	r3, r3, #2
 8002ce6:	440b      	add	r3, r1
 8002ce8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002cec:	781b      	ldrb	r3, [r3, #0]
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d12e      	bne.n	8002d50 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002cf2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	da2b      	bge.n	8002d50 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002cf8:	69bb      	ldr	r3, [r7, #24]
 8002cfa:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002d04:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d121      	bne.n	8002d50 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002d0c:	6879      	ldr	r1, [r7, #4]
 8002d0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d10:	4613      	mov	r3, r2
 8002d12:	00db      	lsls	r3, r3, #3
 8002d14:	4413      	add	r3, r2
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	440b      	add	r3, r1
 8002d1a:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002d1e:	2201      	movs	r2, #1
 8002d20:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002d22:	6a3b      	ldr	r3, [r7, #32]
 8002d24:	699b      	ldr	r3, [r3, #24]
 8002d26:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002d2a:	6a3b      	ldr	r3, [r7, #32]
 8002d2c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002d2e:	6a3b      	ldr	r3, [r7, #32]
 8002d30:	695b      	ldr	r3, [r3, #20]
 8002d32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d10a      	bne.n	8002d50 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	69fa      	ldr	r2, [r7, #28]
 8002d44:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d48:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d4c:	6053      	str	r3, [r2, #4]
            break;
 8002d4e:	e007      	b.n	8002d60 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d52:	3301      	adds	r3, #1
 8002d54:	627b      	str	r3, [r7, #36]	; 0x24
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d3b4      	bcc.n	8002cca <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	695a      	ldr	r2, [r3, #20]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002d6e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4618      	mov	r0, r3
 8002d76:	f003 fc99 	bl	80066ac <USB_ReadInterrupts>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002d80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d84:	d10a      	bne.n	8002d9c <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f008 fedc 	bl	800bb44 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	695a      	ldr	r2, [r3, #20]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002d9a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4618      	mov	r0, r3
 8002da2:	f003 fc83 	bl	80066ac <USB_ReadInterrupts>
 8002da6:	4603      	mov	r3, r0
 8002da8:	f003 0304 	and.w	r3, r3, #4
 8002dac:	2b04      	cmp	r3, #4
 8002dae:	d115      	bne.n	8002ddc <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002db8:	69bb      	ldr	r3, [r7, #24]
 8002dba:	f003 0304 	and.w	r3, r3, #4
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d002      	beq.n	8002dc8 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f008 fecc 	bl	800bb60 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	6859      	ldr	r1, [r3, #4]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	69ba      	ldr	r2, [r7, #24]
 8002dd4:	430a      	orrs	r2, r1
 8002dd6:	605a      	str	r2, [r3, #4]
 8002dd8:	e000      	b.n	8002ddc <HAL_PCD_IRQHandler+0x938>
      return;
 8002dda:	bf00      	nop
    }
  }
}
 8002ddc:	3734      	adds	r7, #52	; 0x34
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd90      	pop	{r4, r7, pc}

08002de2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002de2:	b580      	push	{r7, lr}
 8002de4:	b082      	sub	sp, #8
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	6078      	str	r0, [r7, #4]
 8002dea:	460b      	mov	r3, r1
 8002dec:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	d101      	bne.n	8002dfc <HAL_PCD_SetAddress+0x1a>
 8002df8:	2302      	movs	r3, #2
 8002dfa:	e013      	b.n	8002e24 <HAL_PCD_SetAddress+0x42>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2201      	movs	r2, #1
 8002e00:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	78fa      	ldrb	r2, [r7, #3]
 8002e08:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	78fa      	ldrb	r2, [r7, #3]
 8002e12:	4611      	mov	r1, r2
 8002e14:	4618      	mov	r0, r3
 8002e16:	f003 fbe1 	bl	80065dc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002e22:	2300      	movs	r3, #0
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3708      	adds	r7, #8
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}

08002e2c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b084      	sub	sp, #16
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	4608      	mov	r0, r1
 8002e36:	4611      	mov	r1, r2
 8002e38:	461a      	mov	r2, r3
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	70fb      	strb	r3, [r7, #3]
 8002e3e:	460b      	mov	r3, r1
 8002e40:	803b      	strh	r3, [r7, #0]
 8002e42:	4613      	mov	r3, r2
 8002e44:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002e46:	2300      	movs	r3, #0
 8002e48:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002e4a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	da0f      	bge.n	8002e72 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e52:	78fb      	ldrb	r3, [r7, #3]
 8002e54:	f003 020f 	and.w	r2, r3, #15
 8002e58:	4613      	mov	r3, r2
 8002e5a:	00db      	lsls	r3, r3, #3
 8002e5c:	4413      	add	r3, r2
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	3338      	adds	r3, #56	; 0x38
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	4413      	add	r3, r2
 8002e66:	3304      	adds	r3, #4
 8002e68:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	705a      	strb	r2, [r3, #1]
 8002e70:	e00f      	b.n	8002e92 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e72:	78fb      	ldrb	r3, [r7, #3]
 8002e74:	f003 020f 	and.w	r2, r3, #15
 8002e78:	4613      	mov	r3, r2
 8002e7a:	00db      	lsls	r3, r3, #3
 8002e7c:	4413      	add	r3, r2
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002e84:	687a      	ldr	r2, [r7, #4]
 8002e86:	4413      	add	r3, r2
 8002e88:	3304      	adds	r3, #4
 8002e8a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002e92:	78fb      	ldrb	r3, [r7, #3]
 8002e94:	f003 030f 	and.w	r3, r3, #15
 8002e98:	b2da      	uxtb	r2, r3
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002e9e:	883a      	ldrh	r2, [r7, #0]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	78ba      	ldrb	r2, [r7, #2]
 8002ea8:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	785b      	ldrb	r3, [r3, #1]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d004      	beq.n	8002ebc <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	781b      	ldrb	r3, [r3, #0]
 8002eb6:	b29a      	uxth	r2, r3
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002ebc:	78bb      	ldrb	r3, [r7, #2]
 8002ebe:	2b02      	cmp	r3, #2
 8002ec0:	d102      	bne.n	8002ec8 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d101      	bne.n	8002ed6 <HAL_PCD_EP_Open+0xaa>
 8002ed2:	2302      	movs	r3, #2
 8002ed4:	e00e      	b.n	8002ef4 <HAL_PCD_EP_Open+0xc8>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2201      	movs	r2, #1
 8002eda:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	68f9      	ldr	r1, [r7, #12]
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f002 fc61 	bl	80057ac <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2200      	movs	r2, #0
 8002eee:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002ef2:	7afb      	ldrb	r3, [r7, #11]
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	3710      	adds	r7, #16
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}

08002efc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b084      	sub	sp, #16
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
 8002f04:	460b      	mov	r3, r1
 8002f06:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002f08:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	da0f      	bge.n	8002f30 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f10:	78fb      	ldrb	r3, [r7, #3]
 8002f12:	f003 020f 	and.w	r2, r3, #15
 8002f16:	4613      	mov	r3, r2
 8002f18:	00db      	lsls	r3, r3, #3
 8002f1a:	4413      	add	r3, r2
 8002f1c:	009b      	lsls	r3, r3, #2
 8002f1e:	3338      	adds	r3, #56	; 0x38
 8002f20:	687a      	ldr	r2, [r7, #4]
 8002f22:	4413      	add	r3, r2
 8002f24:	3304      	adds	r3, #4
 8002f26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	705a      	strb	r2, [r3, #1]
 8002f2e:	e00f      	b.n	8002f50 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f30:	78fb      	ldrb	r3, [r7, #3]
 8002f32:	f003 020f 	and.w	r2, r3, #15
 8002f36:	4613      	mov	r3, r2
 8002f38:	00db      	lsls	r3, r3, #3
 8002f3a:	4413      	add	r3, r2
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	4413      	add	r3, r2
 8002f46:	3304      	adds	r3, #4
 8002f48:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002f50:	78fb      	ldrb	r3, [r7, #3]
 8002f52:	f003 030f 	and.w	r3, r3, #15
 8002f56:	b2da      	uxtb	r2, r3
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d101      	bne.n	8002f6a <HAL_PCD_EP_Close+0x6e>
 8002f66:	2302      	movs	r3, #2
 8002f68:	e00e      	b.n	8002f88 <HAL_PCD_EP_Close+0x8c>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	68f9      	ldr	r1, [r7, #12]
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f002 fc9f 	bl	80058bc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2200      	movs	r2, #0
 8002f82:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002f86:	2300      	movs	r3, #0
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3710      	adds	r7, #16
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}

08002f90 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b086      	sub	sp, #24
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	60f8      	str	r0, [r7, #12]
 8002f98:	607a      	str	r2, [r7, #4]
 8002f9a:	603b      	str	r3, [r7, #0]
 8002f9c:	460b      	mov	r3, r1
 8002f9e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002fa0:	7afb      	ldrb	r3, [r7, #11]
 8002fa2:	f003 020f 	and.w	r2, r3, #15
 8002fa6:	4613      	mov	r3, r2
 8002fa8:	00db      	lsls	r3, r3, #3
 8002faa:	4413      	add	r3, r2
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002fb2:	68fa      	ldr	r2, [r7, #12]
 8002fb4:	4413      	add	r3, r2
 8002fb6:	3304      	adds	r3, #4
 8002fb8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	687a      	ldr	r2, [r7, #4]
 8002fbe:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	683a      	ldr	r2, [r7, #0]
 8002fc4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002fd2:	7afb      	ldrb	r3, [r7, #11]
 8002fd4:	f003 030f 	and.w	r3, r3, #15
 8002fd8:	b2da      	uxtb	r2, r3
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	691b      	ldr	r3, [r3, #16]
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d102      	bne.n	8002fec <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002fe6:	687a      	ldr	r2, [r7, #4]
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002fec:	7afb      	ldrb	r3, [r7, #11]
 8002fee:	f003 030f 	and.w	r3, r3, #15
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d109      	bne.n	800300a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	6818      	ldr	r0, [r3, #0]
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	691b      	ldr	r3, [r3, #16]
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	461a      	mov	r2, r3
 8003002:	6979      	ldr	r1, [r7, #20]
 8003004:	f002 ff7e 	bl	8005f04 <USB_EP0StartXfer>
 8003008:	e008      	b.n	800301c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	6818      	ldr	r0, [r3, #0]
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	691b      	ldr	r3, [r3, #16]
 8003012:	b2db      	uxtb	r3, r3
 8003014:	461a      	mov	r2, r3
 8003016:	6979      	ldr	r1, [r7, #20]
 8003018:	f002 fd2c 	bl	8005a74 <USB_EPStartXfer>
  }

  return HAL_OK;
 800301c:	2300      	movs	r3, #0
}
 800301e:	4618      	mov	r0, r3
 8003020:	3718      	adds	r7, #24
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}

08003026 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003026:	b480      	push	{r7}
 8003028:	b083      	sub	sp, #12
 800302a:	af00      	add	r7, sp, #0
 800302c:	6078      	str	r0, [r7, #4]
 800302e:	460b      	mov	r3, r1
 8003030:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003032:	78fb      	ldrb	r3, [r7, #3]
 8003034:	f003 020f 	and.w	r2, r3, #15
 8003038:	6879      	ldr	r1, [r7, #4]
 800303a:	4613      	mov	r3, r2
 800303c:	00db      	lsls	r3, r3, #3
 800303e:	4413      	add	r3, r2
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	440b      	add	r3, r1
 8003044:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8003048:	681b      	ldr	r3, [r3, #0]
}
 800304a:	4618      	mov	r0, r3
 800304c:	370c      	adds	r7, #12
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr

08003056 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003056:	b580      	push	{r7, lr}
 8003058:	b086      	sub	sp, #24
 800305a:	af00      	add	r7, sp, #0
 800305c:	60f8      	str	r0, [r7, #12]
 800305e:	607a      	str	r2, [r7, #4]
 8003060:	603b      	str	r3, [r7, #0]
 8003062:	460b      	mov	r3, r1
 8003064:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003066:	7afb      	ldrb	r3, [r7, #11]
 8003068:	f003 020f 	and.w	r2, r3, #15
 800306c:	4613      	mov	r3, r2
 800306e:	00db      	lsls	r3, r3, #3
 8003070:	4413      	add	r3, r2
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	3338      	adds	r3, #56	; 0x38
 8003076:	68fa      	ldr	r2, [r7, #12]
 8003078:	4413      	add	r3, r2
 800307a:	3304      	adds	r3, #4
 800307c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	687a      	ldr	r2, [r7, #4]
 8003082:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	683a      	ldr	r2, [r7, #0]
 8003088:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	2200      	movs	r2, #0
 800308e:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	2201      	movs	r2, #1
 8003094:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003096:	7afb      	ldrb	r3, [r7, #11]
 8003098:	f003 030f 	and.w	r3, r3, #15
 800309c:	b2da      	uxtb	r2, r3
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	691b      	ldr	r3, [r3, #16]
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d102      	bne.n	80030b0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80030aa:	687a      	ldr	r2, [r7, #4]
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80030b0:	7afb      	ldrb	r3, [r7, #11]
 80030b2:	f003 030f 	and.w	r3, r3, #15
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d109      	bne.n	80030ce <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	6818      	ldr	r0, [r3, #0]
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	691b      	ldr	r3, [r3, #16]
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	461a      	mov	r2, r3
 80030c6:	6979      	ldr	r1, [r7, #20]
 80030c8:	f002 ff1c 	bl	8005f04 <USB_EP0StartXfer>
 80030cc:	e008      	b.n	80030e0 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	6818      	ldr	r0, [r3, #0]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	691b      	ldr	r3, [r3, #16]
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	461a      	mov	r2, r3
 80030da:	6979      	ldr	r1, [r7, #20]
 80030dc:	f002 fcca 	bl	8005a74 <USB_EPStartXfer>
  }

  return HAL_OK;
 80030e0:	2300      	movs	r3, #0
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3718      	adds	r7, #24
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}

080030ea <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80030ea:	b580      	push	{r7, lr}
 80030ec:	b084      	sub	sp, #16
 80030ee:	af00      	add	r7, sp, #0
 80030f0:	6078      	str	r0, [r7, #4]
 80030f2:	460b      	mov	r3, r1
 80030f4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80030f6:	78fb      	ldrb	r3, [r7, #3]
 80030f8:	f003 020f 	and.w	r2, r3, #15
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	429a      	cmp	r2, r3
 8003102:	d901      	bls.n	8003108 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	e050      	b.n	80031aa <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003108:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800310c:	2b00      	cmp	r3, #0
 800310e:	da0f      	bge.n	8003130 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003110:	78fb      	ldrb	r3, [r7, #3]
 8003112:	f003 020f 	and.w	r2, r3, #15
 8003116:	4613      	mov	r3, r2
 8003118:	00db      	lsls	r3, r3, #3
 800311a:	4413      	add	r3, r2
 800311c:	009b      	lsls	r3, r3, #2
 800311e:	3338      	adds	r3, #56	; 0x38
 8003120:	687a      	ldr	r2, [r7, #4]
 8003122:	4413      	add	r3, r2
 8003124:	3304      	adds	r3, #4
 8003126:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2201      	movs	r2, #1
 800312c:	705a      	strb	r2, [r3, #1]
 800312e:	e00d      	b.n	800314c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003130:	78fa      	ldrb	r2, [r7, #3]
 8003132:	4613      	mov	r3, r2
 8003134:	00db      	lsls	r3, r3, #3
 8003136:	4413      	add	r3, r2
 8003138:	009b      	lsls	r3, r3, #2
 800313a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800313e:	687a      	ldr	r2, [r7, #4]
 8003140:	4413      	add	r3, r2
 8003142:	3304      	adds	r3, #4
 8003144:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2200      	movs	r2, #0
 800314a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2201      	movs	r2, #1
 8003150:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003152:	78fb      	ldrb	r3, [r7, #3]
 8003154:	f003 030f 	and.w	r3, r3, #15
 8003158:	b2da      	uxtb	r2, r3
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003164:	2b01      	cmp	r3, #1
 8003166:	d101      	bne.n	800316c <HAL_PCD_EP_SetStall+0x82>
 8003168:	2302      	movs	r3, #2
 800316a:	e01e      	b.n	80031aa <HAL_PCD_EP_SetStall+0xc0>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2201      	movs	r2, #1
 8003170:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	68f9      	ldr	r1, [r7, #12]
 800317a:	4618      	mov	r0, r3
 800317c:	f003 f95a 	bl	8006434 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003180:	78fb      	ldrb	r3, [r7, #3]
 8003182:	f003 030f 	and.w	r3, r3, #15
 8003186:	2b00      	cmp	r3, #0
 8003188:	d10a      	bne.n	80031a0 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6818      	ldr	r0, [r3, #0]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	691b      	ldr	r3, [r3, #16]
 8003192:	b2d9      	uxtb	r1, r3
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800319a:	461a      	mov	r2, r3
 800319c:	f003 fb4a 	bl	8006834 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2200      	movs	r2, #0
 80031a4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80031a8:	2300      	movs	r3, #0
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	3710      	adds	r7, #16
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}

080031b2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80031b2:	b580      	push	{r7, lr}
 80031b4:	b084      	sub	sp, #16
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	6078      	str	r0, [r7, #4]
 80031ba:	460b      	mov	r3, r1
 80031bc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80031be:	78fb      	ldrb	r3, [r7, #3]
 80031c0:	f003 020f 	and.w	r2, r3, #15
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d901      	bls.n	80031d0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e042      	b.n	8003256 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80031d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	da0f      	bge.n	80031f8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031d8:	78fb      	ldrb	r3, [r7, #3]
 80031da:	f003 020f 	and.w	r2, r3, #15
 80031de:	4613      	mov	r3, r2
 80031e0:	00db      	lsls	r3, r3, #3
 80031e2:	4413      	add	r3, r2
 80031e4:	009b      	lsls	r3, r3, #2
 80031e6:	3338      	adds	r3, #56	; 0x38
 80031e8:	687a      	ldr	r2, [r7, #4]
 80031ea:	4413      	add	r3, r2
 80031ec:	3304      	adds	r3, #4
 80031ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2201      	movs	r2, #1
 80031f4:	705a      	strb	r2, [r3, #1]
 80031f6:	e00f      	b.n	8003218 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031f8:	78fb      	ldrb	r3, [r7, #3]
 80031fa:	f003 020f 	and.w	r2, r3, #15
 80031fe:	4613      	mov	r3, r2
 8003200:	00db      	lsls	r3, r3, #3
 8003202:	4413      	add	r3, r2
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	4413      	add	r3, r2
 800320e:	3304      	adds	r3, #4
 8003210:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2200      	movs	r2, #0
 8003216:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2200      	movs	r2, #0
 800321c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800321e:	78fb      	ldrb	r3, [r7, #3]
 8003220:	f003 030f 	and.w	r3, r3, #15
 8003224:	b2da      	uxtb	r2, r3
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003230:	2b01      	cmp	r3, #1
 8003232:	d101      	bne.n	8003238 <HAL_PCD_EP_ClrStall+0x86>
 8003234:	2302      	movs	r3, #2
 8003236:	e00e      	b.n	8003256 <HAL_PCD_EP_ClrStall+0xa4>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2201      	movs	r2, #1
 800323c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	68f9      	ldr	r1, [r7, #12]
 8003246:	4618      	mov	r0, r3
 8003248:	f003 f962 	bl	8006510 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2200      	movs	r2, #0
 8003250:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003254:	2300      	movs	r3, #0
}
 8003256:	4618      	mov	r0, r3
 8003258:	3710      	adds	r7, #16
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}

0800325e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800325e:	b580      	push	{r7, lr}
 8003260:	b084      	sub	sp, #16
 8003262:	af00      	add	r7, sp, #0
 8003264:	6078      	str	r0, [r7, #4]
 8003266:	460b      	mov	r3, r1
 8003268:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800326a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800326e:	2b00      	cmp	r3, #0
 8003270:	da0c      	bge.n	800328c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003272:	78fb      	ldrb	r3, [r7, #3]
 8003274:	f003 020f 	and.w	r2, r3, #15
 8003278:	4613      	mov	r3, r2
 800327a:	00db      	lsls	r3, r3, #3
 800327c:	4413      	add	r3, r2
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	3338      	adds	r3, #56	; 0x38
 8003282:	687a      	ldr	r2, [r7, #4]
 8003284:	4413      	add	r3, r2
 8003286:	3304      	adds	r3, #4
 8003288:	60fb      	str	r3, [r7, #12]
 800328a:	e00c      	b.n	80032a6 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800328c:	78fb      	ldrb	r3, [r7, #3]
 800328e:	f003 020f 	and.w	r2, r3, #15
 8003292:	4613      	mov	r3, r2
 8003294:	00db      	lsls	r3, r3, #3
 8003296:	4413      	add	r3, r2
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800329e:	687a      	ldr	r2, [r7, #4]
 80032a0:	4413      	add	r3, r2
 80032a2:	3304      	adds	r3, #4
 80032a4:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	68f9      	ldr	r1, [r7, #12]
 80032ac:	4618      	mov	r0, r3
 80032ae:	f002 ff81 	bl	80061b4 <USB_EPStopXfer>
 80032b2:	4603      	mov	r3, r0
 80032b4:	72fb      	strb	r3, [r7, #11]

  return ret;
 80032b6:	7afb      	ldrb	r3, [r7, #11]
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	3710      	adds	r7, #16
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}

080032c0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b08a      	sub	sp, #40	; 0x28
 80032c4:	af02      	add	r7, sp, #8
 80032c6:	6078      	str	r0, [r7, #4]
 80032c8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80032d4:	683a      	ldr	r2, [r7, #0]
 80032d6:	4613      	mov	r3, r2
 80032d8:	00db      	lsls	r3, r3, #3
 80032da:	4413      	add	r3, r2
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	3338      	adds	r3, #56	; 0x38
 80032e0:	687a      	ldr	r2, [r7, #4]
 80032e2:	4413      	add	r3, r2
 80032e4:	3304      	adds	r3, #4
 80032e6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	6a1a      	ldr	r2, [r3, #32]
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	699b      	ldr	r3, [r3, #24]
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d901      	bls.n	80032f8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	e06c      	b.n	80033d2 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	699a      	ldr	r2, [r3, #24]
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	6a1b      	ldr	r3, [r3, #32]
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	69fa      	ldr	r2, [r7, #28]
 800330a:	429a      	cmp	r2, r3
 800330c:	d902      	bls.n	8003314 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	68db      	ldr	r3, [r3, #12]
 8003312:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003314:	69fb      	ldr	r3, [r7, #28]
 8003316:	3303      	adds	r3, #3
 8003318:	089b      	lsrs	r3, r3, #2
 800331a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800331c:	e02b      	b.n	8003376 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	699a      	ldr	r2, [r3, #24]
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	6a1b      	ldr	r3, [r3, #32]
 8003326:	1ad3      	subs	r3, r2, r3
 8003328:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	68db      	ldr	r3, [r3, #12]
 800332e:	69fa      	ldr	r2, [r7, #28]
 8003330:	429a      	cmp	r2, r3
 8003332:	d902      	bls.n	800333a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800333a:	69fb      	ldr	r3, [r7, #28]
 800333c:	3303      	adds	r3, #3
 800333e:	089b      	lsrs	r3, r3, #2
 8003340:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	6919      	ldr	r1, [r3, #16]
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	b2da      	uxtb	r2, r3
 800334a:	69fb      	ldr	r3, [r7, #28]
 800334c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003352:	b2db      	uxtb	r3, r3
 8003354:	9300      	str	r3, [sp, #0]
 8003356:	4603      	mov	r3, r0
 8003358:	6978      	ldr	r0, [r7, #20]
 800335a:	f002 ffd5 	bl	8006308 <USB_WritePacket>

    ep->xfer_buff  += len;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	691a      	ldr	r2, [r3, #16]
 8003362:	69fb      	ldr	r3, [r7, #28]
 8003364:	441a      	add	r2, r3
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	6a1a      	ldr	r2, [r3, #32]
 800336e:	69fb      	ldr	r3, [r7, #28]
 8003370:	441a      	add	r2, r3
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	015a      	lsls	r2, r3, #5
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	4413      	add	r3, r2
 800337e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003382:	699b      	ldr	r3, [r3, #24]
 8003384:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003386:	69ba      	ldr	r2, [r7, #24]
 8003388:	429a      	cmp	r2, r3
 800338a:	d809      	bhi.n	80033a0 <PCD_WriteEmptyTxFifo+0xe0>
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	6a1a      	ldr	r2, [r3, #32]
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003394:	429a      	cmp	r2, r3
 8003396:	d203      	bcs.n	80033a0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	699b      	ldr	r3, [r3, #24]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d1be      	bne.n	800331e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	699a      	ldr	r2, [r3, #24]
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	6a1b      	ldr	r3, [r3, #32]
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d811      	bhi.n	80033d0 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	f003 030f 	and.w	r3, r3, #15
 80033b2:	2201      	movs	r2, #1
 80033b4:	fa02 f303 	lsl.w	r3, r2, r3
 80033b8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	43db      	mvns	r3, r3
 80033c6:	6939      	ldr	r1, [r7, #16]
 80033c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80033cc:	4013      	ands	r3, r2
 80033ce:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80033d0:	2300      	movs	r3, #0
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3720      	adds	r7, #32
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
	...

080033dc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b088      	sub	sp, #32
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
 80033e4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033ec:	69fb      	ldr	r3, [r7, #28]
 80033ee:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80033f0:	69fb      	ldr	r3, [r7, #28]
 80033f2:	333c      	adds	r3, #60	; 0x3c
 80033f4:	3304      	adds	r3, #4
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	015a      	lsls	r2, r3, #5
 80033fe:	69bb      	ldr	r3, [r7, #24]
 8003400:	4413      	add	r3, r2
 8003402:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	691b      	ldr	r3, [r3, #16]
 800340e:	2b01      	cmp	r3, #1
 8003410:	d17b      	bne.n	800350a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	f003 0308 	and.w	r3, r3, #8
 8003418:	2b00      	cmp	r3, #0
 800341a:	d015      	beq.n	8003448 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	4a61      	ldr	r2, [pc, #388]	; (80035a4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003420:	4293      	cmp	r3, r2
 8003422:	f240 80b9 	bls.w	8003598 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800342c:	2b00      	cmp	r3, #0
 800342e:	f000 80b3 	beq.w	8003598 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	015a      	lsls	r2, r3, #5
 8003436:	69bb      	ldr	r3, [r7, #24]
 8003438:	4413      	add	r3, r2
 800343a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800343e:	461a      	mov	r2, r3
 8003440:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003444:	6093      	str	r3, [r2, #8]
 8003446:	e0a7      	b.n	8003598 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	f003 0320 	and.w	r3, r3, #32
 800344e:	2b00      	cmp	r3, #0
 8003450:	d009      	beq.n	8003466 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	015a      	lsls	r2, r3, #5
 8003456:	69bb      	ldr	r3, [r7, #24]
 8003458:	4413      	add	r3, r2
 800345a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800345e:	461a      	mov	r2, r3
 8003460:	2320      	movs	r3, #32
 8003462:	6093      	str	r3, [r2, #8]
 8003464:	e098      	b.n	8003598 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800346c:	2b00      	cmp	r3, #0
 800346e:	f040 8093 	bne.w	8003598 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	4a4b      	ldr	r2, [pc, #300]	; (80035a4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d90f      	bls.n	800349a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003480:	2b00      	cmp	r3, #0
 8003482:	d00a      	beq.n	800349a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	015a      	lsls	r2, r3, #5
 8003488:	69bb      	ldr	r3, [r7, #24]
 800348a:	4413      	add	r3, r2
 800348c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003490:	461a      	mov	r2, r3
 8003492:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003496:	6093      	str	r3, [r2, #8]
 8003498:	e07e      	b.n	8003598 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800349a:	683a      	ldr	r2, [r7, #0]
 800349c:	4613      	mov	r3, r2
 800349e:	00db      	lsls	r3, r3, #3
 80034a0:	4413      	add	r3, r2
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80034a8:	687a      	ldr	r2, [r7, #4]
 80034aa:	4413      	add	r3, r2
 80034ac:	3304      	adds	r3, #4
 80034ae:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	69da      	ldr	r2, [r3, #28]
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	0159      	lsls	r1, r3, #5
 80034b8:	69bb      	ldr	r3, [r7, #24]
 80034ba:	440b      	add	r3, r1
 80034bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034c0:	691b      	ldr	r3, [r3, #16]
 80034c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034c6:	1ad2      	subs	r2, r2, r3
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d114      	bne.n	80034fc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	699b      	ldr	r3, [r3, #24]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d109      	bne.n	80034ee <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6818      	ldr	r0, [r3, #0]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80034e4:	461a      	mov	r2, r3
 80034e6:	2101      	movs	r1, #1
 80034e8:	f003 f9a4 	bl	8006834 <USB_EP0_OutStart>
 80034ec:	e006      	b.n	80034fc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	691a      	ldr	r2, [r3, #16]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	6a1b      	ldr	r3, [r3, #32]
 80034f6:	441a      	add	r2, r3
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	4619      	mov	r1, r3
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f008 fa64 	bl	800b9d0 <HAL_PCD_DataOutStageCallback>
 8003508:	e046      	b.n	8003598 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	4a26      	ldr	r2, [pc, #152]	; (80035a8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d124      	bne.n	800355c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003518:	2b00      	cmp	r3, #0
 800351a:	d00a      	beq.n	8003532 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	015a      	lsls	r2, r3, #5
 8003520:	69bb      	ldr	r3, [r7, #24]
 8003522:	4413      	add	r3, r2
 8003524:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003528:	461a      	mov	r2, r3
 800352a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800352e:	6093      	str	r3, [r2, #8]
 8003530:	e032      	b.n	8003598 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	f003 0320 	and.w	r3, r3, #32
 8003538:	2b00      	cmp	r3, #0
 800353a:	d008      	beq.n	800354e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	015a      	lsls	r2, r3, #5
 8003540:	69bb      	ldr	r3, [r7, #24]
 8003542:	4413      	add	r3, r2
 8003544:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003548:	461a      	mov	r2, r3
 800354a:	2320      	movs	r3, #32
 800354c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	b2db      	uxtb	r3, r3
 8003552:	4619      	mov	r1, r3
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	f008 fa3b 	bl	800b9d0 <HAL_PCD_DataOutStageCallback>
 800355a:	e01d      	b.n	8003598 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d114      	bne.n	800358c <PCD_EP_OutXfrComplete_int+0x1b0>
 8003562:	6879      	ldr	r1, [r7, #4]
 8003564:	683a      	ldr	r2, [r7, #0]
 8003566:	4613      	mov	r3, r2
 8003568:	00db      	lsls	r3, r3, #3
 800356a:	4413      	add	r3, r2
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	440b      	add	r3, r1
 8003570:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d108      	bne.n	800358c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6818      	ldr	r0, [r3, #0]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003584:	461a      	mov	r2, r3
 8003586:	2100      	movs	r1, #0
 8003588:	f003 f954 	bl	8006834 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	b2db      	uxtb	r3, r3
 8003590:	4619      	mov	r1, r3
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f008 fa1c 	bl	800b9d0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003598:	2300      	movs	r3, #0
}
 800359a:	4618      	mov	r0, r3
 800359c:	3720      	adds	r7, #32
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	bf00      	nop
 80035a4:	4f54300a 	.word	0x4f54300a
 80035a8:	4f54310a 	.word	0x4f54310a

080035ac <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b086      	sub	sp, #24
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
 80035b4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	333c      	adds	r3, #60	; 0x3c
 80035c4:	3304      	adds	r3, #4
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	015a      	lsls	r2, r3, #5
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	4413      	add	r3, r2
 80035d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	4a15      	ldr	r2, [pc, #84]	; (8003634 <PCD_EP_OutSetupPacket_int+0x88>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d90e      	bls.n	8003600 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d009      	beq.n	8003600 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	015a      	lsls	r2, r3, #5
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	4413      	add	r3, r2
 80035f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035f8:	461a      	mov	r2, r3
 80035fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035fe:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	f008 f9d3 	bl	800b9ac <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	4a0a      	ldr	r2, [pc, #40]	; (8003634 <PCD_EP_OutSetupPacket_int+0x88>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d90c      	bls.n	8003628 <PCD_EP_OutSetupPacket_int+0x7c>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	691b      	ldr	r3, [r3, #16]
 8003612:	2b01      	cmp	r3, #1
 8003614:	d108      	bne.n	8003628 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6818      	ldr	r0, [r3, #0]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003620:	461a      	mov	r2, r3
 8003622:	2101      	movs	r1, #1
 8003624:	f003 f906 	bl	8006834 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003628:	2300      	movs	r3, #0
}
 800362a:	4618      	mov	r0, r3
 800362c:	3718      	adds	r7, #24
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}
 8003632:	bf00      	nop
 8003634:	4f54300a 	.word	0x4f54300a

08003638 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003638:	b480      	push	{r7}
 800363a:	b085      	sub	sp, #20
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
 8003640:	460b      	mov	r3, r1
 8003642:	70fb      	strb	r3, [r7, #3]
 8003644:	4613      	mov	r3, r2
 8003646:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800364e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003650:	78fb      	ldrb	r3, [r7, #3]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d107      	bne.n	8003666 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003656:	883b      	ldrh	r3, [r7, #0]
 8003658:	0419      	lsls	r1, r3, #16
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	68ba      	ldr	r2, [r7, #8]
 8003660:	430a      	orrs	r2, r1
 8003662:	629a      	str	r2, [r3, #40]	; 0x28
 8003664:	e028      	b.n	80036b8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800366c:	0c1b      	lsrs	r3, r3, #16
 800366e:	68ba      	ldr	r2, [r7, #8]
 8003670:	4413      	add	r3, r2
 8003672:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003674:	2300      	movs	r3, #0
 8003676:	73fb      	strb	r3, [r7, #15]
 8003678:	e00d      	b.n	8003696 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	7bfb      	ldrb	r3, [r7, #15]
 8003680:	3340      	adds	r3, #64	; 0x40
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	4413      	add	r3, r2
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	0c1b      	lsrs	r3, r3, #16
 800368a:	68ba      	ldr	r2, [r7, #8]
 800368c:	4413      	add	r3, r2
 800368e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003690:	7bfb      	ldrb	r3, [r7, #15]
 8003692:	3301      	adds	r3, #1
 8003694:	73fb      	strb	r3, [r7, #15]
 8003696:	7bfa      	ldrb	r2, [r7, #15]
 8003698:	78fb      	ldrb	r3, [r7, #3]
 800369a:	3b01      	subs	r3, #1
 800369c:	429a      	cmp	r2, r3
 800369e:	d3ec      	bcc.n	800367a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80036a0:	883b      	ldrh	r3, [r7, #0]
 80036a2:	0418      	lsls	r0, r3, #16
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6819      	ldr	r1, [r3, #0]
 80036a8:	78fb      	ldrb	r3, [r7, #3]
 80036aa:	3b01      	subs	r3, #1
 80036ac:	68ba      	ldr	r2, [r7, #8]
 80036ae:	4302      	orrs	r2, r0
 80036b0:	3340      	adds	r3, #64	; 0x40
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	440b      	add	r3, r1
 80036b6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80036b8:	2300      	movs	r3, #0
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3714      	adds	r7, #20
 80036be:	46bd      	mov	sp, r7
 80036c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c4:	4770      	bx	lr

080036c6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80036c6:	b480      	push	{r7}
 80036c8:	b083      	sub	sp, #12
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	6078      	str	r0, [r7, #4]
 80036ce:	460b      	mov	r3, r1
 80036d0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	887a      	ldrh	r2, [r7, #2]
 80036d8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80036da:	2300      	movs	r3, #0
}
 80036dc:	4618      	mov	r0, r3
 80036de:	370c      	adds	r7, #12
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr

080036e8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b083      	sub	sp, #12
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
 80036f0:	460b      	mov	r3, r1
 80036f2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80036f4:	bf00      	nop
 80036f6:	370c      	adds	r7, #12
 80036f8:	46bd      	mov	sp, r7
 80036fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fe:	4770      	bx	lr

08003700 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b086      	sub	sp, #24
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d101      	bne.n	8003712 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	e267      	b.n	8003be2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 0301 	and.w	r3, r3, #1
 800371a:	2b00      	cmp	r3, #0
 800371c:	d075      	beq.n	800380a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800371e:	4b88      	ldr	r3, [pc, #544]	; (8003940 <HAL_RCC_OscConfig+0x240>)
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	f003 030c 	and.w	r3, r3, #12
 8003726:	2b04      	cmp	r3, #4
 8003728:	d00c      	beq.n	8003744 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800372a:	4b85      	ldr	r3, [pc, #532]	; (8003940 <HAL_RCC_OscConfig+0x240>)
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003732:	2b08      	cmp	r3, #8
 8003734:	d112      	bne.n	800375c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003736:	4b82      	ldr	r3, [pc, #520]	; (8003940 <HAL_RCC_OscConfig+0x240>)
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800373e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003742:	d10b      	bne.n	800375c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003744:	4b7e      	ldr	r3, [pc, #504]	; (8003940 <HAL_RCC_OscConfig+0x240>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800374c:	2b00      	cmp	r3, #0
 800374e:	d05b      	beq.n	8003808 <HAL_RCC_OscConfig+0x108>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d157      	bne.n	8003808 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	e242      	b.n	8003be2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003764:	d106      	bne.n	8003774 <HAL_RCC_OscConfig+0x74>
 8003766:	4b76      	ldr	r3, [pc, #472]	; (8003940 <HAL_RCC_OscConfig+0x240>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a75      	ldr	r2, [pc, #468]	; (8003940 <HAL_RCC_OscConfig+0x240>)
 800376c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003770:	6013      	str	r3, [r2, #0]
 8003772:	e01d      	b.n	80037b0 <HAL_RCC_OscConfig+0xb0>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800377c:	d10c      	bne.n	8003798 <HAL_RCC_OscConfig+0x98>
 800377e:	4b70      	ldr	r3, [pc, #448]	; (8003940 <HAL_RCC_OscConfig+0x240>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a6f      	ldr	r2, [pc, #444]	; (8003940 <HAL_RCC_OscConfig+0x240>)
 8003784:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003788:	6013      	str	r3, [r2, #0]
 800378a:	4b6d      	ldr	r3, [pc, #436]	; (8003940 <HAL_RCC_OscConfig+0x240>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a6c      	ldr	r2, [pc, #432]	; (8003940 <HAL_RCC_OscConfig+0x240>)
 8003790:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003794:	6013      	str	r3, [r2, #0]
 8003796:	e00b      	b.n	80037b0 <HAL_RCC_OscConfig+0xb0>
 8003798:	4b69      	ldr	r3, [pc, #420]	; (8003940 <HAL_RCC_OscConfig+0x240>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a68      	ldr	r2, [pc, #416]	; (8003940 <HAL_RCC_OscConfig+0x240>)
 800379e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037a2:	6013      	str	r3, [r2, #0]
 80037a4:	4b66      	ldr	r3, [pc, #408]	; (8003940 <HAL_RCC_OscConfig+0x240>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a65      	ldr	r2, [pc, #404]	; (8003940 <HAL_RCC_OscConfig+0x240>)
 80037aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d013      	beq.n	80037e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037b8:	f7fd fc86 	bl	80010c8 <HAL_GetTick>
 80037bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037be:	e008      	b.n	80037d2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037c0:	f7fd fc82 	bl	80010c8 <HAL_GetTick>
 80037c4:	4602      	mov	r2, r0
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	1ad3      	subs	r3, r2, r3
 80037ca:	2b64      	cmp	r3, #100	; 0x64
 80037cc:	d901      	bls.n	80037d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80037ce:	2303      	movs	r3, #3
 80037d0:	e207      	b.n	8003be2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037d2:	4b5b      	ldr	r3, [pc, #364]	; (8003940 <HAL_RCC_OscConfig+0x240>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d0f0      	beq.n	80037c0 <HAL_RCC_OscConfig+0xc0>
 80037de:	e014      	b.n	800380a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037e0:	f7fd fc72 	bl	80010c8 <HAL_GetTick>
 80037e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037e6:	e008      	b.n	80037fa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037e8:	f7fd fc6e 	bl	80010c8 <HAL_GetTick>
 80037ec:	4602      	mov	r2, r0
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	1ad3      	subs	r3, r2, r3
 80037f2:	2b64      	cmp	r3, #100	; 0x64
 80037f4:	d901      	bls.n	80037fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80037f6:	2303      	movs	r3, #3
 80037f8:	e1f3      	b.n	8003be2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037fa:	4b51      	ldr	r3, [pc, #324]	; (8003940 <HAL_RCC_OscConfig+0x240>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003802:	2b00      	cmp	r3, #0
 8003804:	d1f0      	bne.n	80037e8 <HAL_RCC_OscConfig+0xe8>
 8003806:	e000      	b.n	800380a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003808:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 0302 	and.w	r3, r3, #2
 8003812:	2b00      	cmp	r3, #0
 8003814:	d063      	beq.n	80038de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003816:	4b4a      	ldr	r3, [pc, #296]	; (8003940 <HAL_RCC_OscConfig+0x240>)
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	f003 030c 	and.w	r3, r3, #12
 800381e:	2b00      	cmp	r3, #0
 8003820:	d00b      	beq.n	800383a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003822:	4b47      	ldr	r3, [pc, #284]	; (8003940 <HAL_RCC_OscConfig+0x240>)
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800382a:	2b08      	cmp	r3, #8
 800382c:	d11c      	bne.n	8003868 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800382e:	4b44      	ldr	r3, [pc, #272]	; (8003940 <HAL_RCC_OscConfig+0x240>)
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003836:	2b00      	cmp	r3, #0
 8003838:	d116      	bne.n	8003868 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800383a:	4b41      	ldr	r3, [pc, #260]	; (8003940 <HAL_RCC_OscConfig+0x240>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 0302 	and.w	r3, r3, #2
 8003842:	2b00      	cmp	r3, #0
 8003844:	d005      	beq.n	8003852 <HAL_RCC_OscConfig+0x152>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	68db      	ldr	r3, [r3, #12]
 800384a:	2b01      	cmp	r3, #1
 800384c:	d001      	beq.n	8003852 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e1c7      	b.n	8003be2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003852:	4b3b      	ldr	r3, [pc, #236]	; (8003940 <HAL_RCC_OscConfig+0x240>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	691b      	ldr	r3, [r3, #16]
 800385e:	00db      	lsls	r3, r3, #3
 8003860:	4937      	ldr	r1, [pc, #220]	; (8003940 <HAL_RCC_OscConfig+0x240>)
 8003862:	4313      	orrs	r3, r2
 8003864:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003866:	e03a      	b.n	80038de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d020      	beq.n	80038b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003870:	4b34      	ldr	r3, [pc, #208]	; (8003944 <HAL_RCC_OscConfig+0x244>)
 8003872:	2201      	movs	r2, #1
 8003874:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003876:	f7fd fc27 	bl	80010c8 <HAL_GetTick>
 800387a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800387c:	e008      	b.n	8003890 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800387e:	f7fd fc23 	bl	80010c8 <HAL_GetTick>
 8003882:	4602      	mov	r2, r0
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	1ad3      	subs	r3, r2, r3
 8003888:	2b02      	cmp	r3, #2
 800388a:	d901      	bls.n	8003890 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800388c:	2303      	movs	r3, #3
 800388e:	e1a8      	b.n	8003be2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003890:	4b2b      	ldr	r3, [pc, #172]	; (8003940 <HAL_RCC_OscConfig+0x240>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 0302 	and.w	r3, r3, #2
 8003898:	2b00      	cmp	r3, #0
 800389a:	d0f0      	beq.n	800387e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800389c:	4b28      	ldr	r3, [pc, #160]	; (8003940 <HAL_RCC_OscConfig+0x240>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	691b      	ldr	r3, [r3, #16]
 80038a8:	00db      	lsls	r3, r3, #3
 80038aa:	4925      	ldr	r1, [pc, #148]	; (8003940 <HAL_RCC_OscConfig+0x240>)
 80038ac:	4313      	orrs	r3, r2
 80038ae:	600b      	str	r3, [r1, #0]
 80038b0:	e015      	b.n	80038de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038b2:	4b24      	ldr	r3, [pc, #144]	; (8003944 <HAL_RCC_OscConfig+0x244>)
 80038b4:	2200      	movs	r2, #0
 80038b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038b8:	f7fd fc06 	bl	80010c8 <HAL_GetTick>
 80038bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038be:	e008      	b.n	80038d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038c0:	f7fd fc02 	bl	80010c8 <HAL_GetTick>
 80038c4:	4602      	mov	r2, r0
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	1ad3      	subs	r3, r2, r3
 80038ca:	2b02      	cmp	r3, #2
 80038cc:	d901      	bls.n	80038d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80038ce:	2303      	movs	r3, #3
 80038d0:	e187      	b.n	8003be2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038d2:	4b1b      	ldr	r3, [pc, #108]	; (8003940 <HAL_RCC_OscConfig+0x240>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 0302 	and.w	r3, r3, #2
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d1f0      	bne.n	80038c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 0308 	and.w	r3, r3, #8
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d036      	beq.n	8003958 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	695b      	ldr	r3, [r3, #20]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d016      	beq.n	8003920 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038f2:	4b15      	ldr	r3, [pc, #84]	; (8003948 <HAL_RCC_OscConfig+0x248>)
 80038f4:	2201      	movs	r2, #1
 80038f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038f8:	f7fd fbe6 	bl	80010c8 <HAL_GetTick>
 80038fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038fe:	e008      	b.n	8003912 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003900:	f7fd fbe2 	bl	80010c8 <HAL_GetTick>
 8003904:	4602      	mov	r2, r0
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	1ad3      	subs	r3, r2, r3
 800390a:	2b02      	cmp	r3, #2
 800390c:	d901      	bls.n	8003912 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800390e:	2303      	movs	r3, #3
 8003910:	e167      	b.n	8003be2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003912:	4b0b      	ldr	r3, [pc, #44]	; (8003940 <HAL_RCC_OscConfig+0x240>)
 8003914:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003916:	f003 0302 	and.w	r3, r3, #2
 800391a:	2b00      	cmp	r3, #0
 800391c:	d0f0      	beq.n	8003900 <HAL_RCC_OscConfig+0x200>
 800391e:	e01b      	b.n	8003958 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003920:	4b09      	ldr	r3, [pc, #36]	; (8003948 <HAL_RCC_OscConfig+0x248>)
 8003922:	2200      	movs	r2, #0
 8003924:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003926:	f7fd fbcf 	bl	80010c8 <HAL_GetTick>
 800392a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800392c:	e00e      	b.n	800394c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800392e:	f7fd fbcb 	bl	80010c8 <HAL_GetTick>
 8003932:	4602      	mov	r2, r0
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	1ad3      	subs	r3, r2, r3
 8003938:	2b02      	cmp	r3, #2
 800393a:	d907      	bls.n	800394c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800393c:	2303      	movs	r3, #3
 800393e:	e150      	b.n	8003be2 <HAL_RCC_OscConfig+0x4e2>
 8003940:	40023800 	.word	0x40023800
 8003944:	42470000 	.word	0x42470000
 8003948:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800394c:	4b88      	ldr	r3, [pc, #544]	; (8003b70 <HAL_RCC_OscConfig+0x470>)
 800394e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003950:	f003 0302 	and.w	r3, r3, #2
 8003954:	2b00      	cmp	r3, #0
 8003956:	d1ea      	bne.n	800392e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 0304 	and.w	r3, r3, #4
 8003960:	2b00      	cmp	r3, #0
 8003962:	f000 8097 	beq.w	8003a94 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003966:	2300      	movs	r3, #0
 8003968:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800396a:	4b81      	ldr	r3, [pc, #516]	; (8003b70 <HAL_RCC_OscConfig+0x470>)
 800396c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003972:	2b00      	cmp	r3, #0
 8003974:	d10f      	bne.n	8003996 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003976:	2300      	movs	r3, #0
 8003978:	60bb      	str	r3, [r7, #8]
 800397a:	4b7d      	ldr	r3, [pc, #500]	; (8003b70 <HAL_RCC_OscConfig+0x470>)
 800397c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397e:	4a7c      	ldr	r2, [pc, #496]	; (8003b70 <HAL_RCC_OscConfig+0x470>)
 8003980:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003984:	6413      	str	r3, [r2, #64]	; 0x40
 8003986:	4b7a      	ldr	r3, [pc, #488]	; (8003b70 <HAL_RCC_OscConfig+0x470>)
 8003988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800398e:	60bb      	str	r3, [r7, #8]
 8003990:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003992:	2301      	movs	r3, #1
 8003994:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003996:	4b77      	ldr	r3, [pc, #476]	; (8003b74 <HAL_RCC_OscConfig+0x474>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d118      	bne.n	80039d4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039a2:	4b74      	ldr	r3, [pc, #464]	; (8003b74 <HAL_RCC_OscConfig+0x474>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a73      	ldr	r2, [pc, #460]	; (8003b74 <HAL_RCC_OscConfig+0x474>)
 80039a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039ae:	f7fd fb8b 	bl	80010c8 <HAL_GetTick>
 80039b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039b4:	e008      	b.n	80039c8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039b6:	f7fd fb87 	bl	80010c8 <HAL_GetTick>
 80039ba:	4602      	mov	r2, r0
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	1ad3      	subs	r3, r2, r3
 80039c0:	2b02      	cmp	r3, #2
 80039c2:	d901      	bls.n	80039c8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80039c4:	2303      	movs	r3, #3
 80039c6:	e10c      	b.n	8003be2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039c8:	4b6a      	ldr	r3, [pc, #424]	; (8003b74 <HAL_RCC_OscConfig+0x474>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d0f0      	beq.n	80039b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d106      	bne.n	80039ea <HAL_RCC_OscConfig+0x2ea>
 80039dc:	4b64      	ldr	r3, [pc, #400]	; (8003b70 <HAL_RCC_OscConfig+0x470>)
 80039de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039e0:	4a63      	ldr	r2, [pc, #396]	; (8003b70 <HAL_RCC_OscConfig+0x470>)
 80039e2:	f043 0301 	orr.w	r3, r3, #1
 80039e6:	6713      	str	r3, [r2, #112]	; 0x70
 80039e8:	e01c      	b.n	8003a24 <HAL_RCC_OscConfig+0x324>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	2b05      	cmp	r3, #5
 80039f0:	d10c      	bne.n	8003a0c <HAL_RCC_OscConfig+0x30c>
 80039f2:	4b5f      	ldr	r3, [pc, #380]	; (8003b70 <HAL_RCC_OscConfig+0x470>)
 80039f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039f6:	4a5e      	ldr	r2, [pc, #376]	; (8003b70 <HAL_RCC_OscConfig+0x470>)
 80039f8:	f043 0304 	orr.w	r3, r3, #4
 80039fc:	6713      	str	r3, [r2, #112]	; 0x70
 80039fe:	4b5c      	ldr	r3, [pc, #368]	; (8003b70 <HAL_RCC_OscConfig+0x470>)
 8003a00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a02:	4a5b      	ldr	r2, [pc, #364]	; (8003b70 <HAL_RCC_OscConfig+0x470>)
 8003a04:	f043 0301 	orr.w	r3, r3, #1
 8003a08:	6713      	str	r3, [r2, #112]	; 0x70
 8003a0a:	e00b      	b.n	8003a24 <HAL_RCC_OscConfig+0x324>
 8003a0c:	4b58      	ldr	r3, [pc, #352]	; (8003b70 <HAL_RCC_OscConfig+0x470>)
 8003a0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a10:	4a57      	ldr	r2, [pc, #348]	; (8003b70 <HAL_RCC_OscConfig+0x470>)
 8003a12:	f023 0301 	bic.w	r3, r3, #1
 8003a16:	6713      	str	r3, [r2, #112]	; 0x70
 8003a18:	4b55      	ldr	r3, [pc, #340]	; (8003b70 <HAL_RCC_OscConfig+0x470>)
 8003a1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a1c:	4a54      	ldr	r2, [pc, #336]	; (8003b70 <HAL_RCC_OscConfig+0x470>)
 8003a1e:	f023 0304 	bic.w	r3, r3, #4
 8003a22:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d015      	beq.n	8003a58 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a2c:	f7fd fb4c 	bl	80010c8 <HAL_GetTick>
 8003a30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a32:	e00a      	b.n	8003a4a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a34:	f7fd fb48 	bl	80010c8 <HAL_GetTick>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d901      	bls.n	8003a4a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003a46:	2303      	movs	r3, #3
 8003a48:	e0cb      	b.n	8003be2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a4a:	4b49      	ldr	r3, [pc, #292]	; (8003b70 <HAL_RCC_OscConfig+0x470>)
 8003a4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a4e:	f003 0302 	and.w	r3, r3, #2
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d0ee      	beq.n	8003a34 <HAL_RCC_OscConfig+0x334>
 8003a56:	e014      	b.n	8003a82 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a58:	f7fd fb36 	bl	80010c8 <HAL_GetTick>
 8003a5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a5e:	e00a      	b.n	8003a76 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a60:	f7fd fb32 	bl	80010c8 <HAL_GetTick>
 8003a64:	4602      	mov	r2, r0
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	1ad3      	subs	r3, r2, r3
 8003a6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d901      	bls.n	8003a76 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003a72:	2303      	movs	r3, #3
 8003a74:	e0b5      	b.n	8003be2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a76:	4b3e      	ldr	r3, [pc, #248]	; (8003b70 <HAL_RCC_OscConfig+0x470>)
 8003a78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a7a:	f003 0302 	and.w	r3, r3, #2
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d1ee      	bne.n	8003a60 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a82:	7dfb      	ldrb	r3, [r7, #23]
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	d105      	bne.n	8003a94 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a88:	4b39      	ldr	r3, [pc, #228]	; (8003b70 <HAL_RCC_OscConfig+0x470>)
 8003a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8c:	4a38      	ldr	r2, [pc, #224]	; (8003b70 <HAL_RCC_OscConfig+0x470>)
 8003a8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a92:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	699b      	ldr	r3, [r3, #24]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	f000 80a1 	beq.w	8003be0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a9e:	4b34      	ldr	r3, [pc, #208]	; (8003b70 <HAL_RCC_OscConfig+0x470>)
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	f003 030c 	and.w	r3, r3, #12
 8003aa6:	2b08      	cmp	r3, #8
 8003aa8:	d05c      	beq.n	8003b64 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	699b      	ldr	r3, [r3, #24]
 8003aae:	2b02      	cmp	r3, #2
 8003ab0:	d141      	bne.n	8003b36 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ab2:	4b31      	ldr	r3, [pc, #196]	; (8003b78 <HAL_RCC_OscConfig+0x478>)
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ab8:	f7fd fb06 	bl	80010c8 <HAL_GetTick>
 8003abc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003abe:	e008      	b.n	8003ad2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ac0:	f7fd fb02 	bl	80010c8 <HAL_GetTick>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	2b02      	cmp	r3, #2
 8003acc:	d901      	bls.n	8003ad2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003ace:	2303      	movs	r3, #3
 8003ad0:	e087      	b.n	8003be2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ad2:	4b27      	ldr	r3, [pc, #156]	; (8003b70 <HAL_RCC_OscConfig+0x470>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d1f0      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	69da      	ldr	r2, [r3, #28]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6a1b      	ldr	r3, [r3, #32]
 8003ae6:	431a      	orrs	r2, r3
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aec:	019b      	lsls	r3, r3, #6
 8003aee:	431a      	orrs	r2, r3
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003af4:	085b      	lsrs	r3, r3, #1
 8003af6:	3b01      	subs	r3, #1
 8003af8:	041b      	lsls	r3, r3, #16
 8003afa:	431a      	orrs	r2, r3
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b00:	061b      	lsls	r3, r3, #24
 8003b02:	491b      	ldr	r1, [pc, #108]	; (8003b70 <HAL_RCC_OscConfig+0x470>)
 8003b04:	4313      	orrs	r3, r2
 8003b06:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b08:	4b1b      	ldr	r3, [pc, #108]	; (8003b78 <HAL_RCC_OscConfig+0x478>)
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b0e:	f7fd fadb 	bl	80010c8 <HAL_GetTick>
 8003b12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b14:	e008      	b.n	8003b28 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b16:	f7fd fad7 	bl	80010c8 <HAL_GetTick>
 8003b1a:	4602      	mov	r2, r0
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	1ad3      	subs	r3, r2, r3
 8003b20:	2b02      	cmp	r3, #2
 8003b22:	d901      	bls.n	8003b28 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003b24:	2303      	movs	r3, #3
 8003b26:	e05c      	b.n	8003be2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b28:	4b11      	ldr	r3, [pc, #68]	; (8003b70 <HAL_RCC_OscConfig+0x470>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d0f0      	beq.n	8003b16 <HAL_RCC_OscConfig+0x416>
 8003b34:	e054      	b.n	8003be0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b36:	4b10      	ldr	r3, [pc, #64]	; (8003b78 <HAL_RCC_OscConfig+0x478>)
 8003b38:	2200      	movs	r2, #0
 8003b3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b3c:	f7fd fac4 	bl	80010c8 <HAL_GetTick>
 8003b40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b42:	e008      	b.n	8003b56 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b44:	f7fd fac0 	bl	80010c8 <HAL_GetTick>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	2b02      	cmp	r3, #2
 8003b50:	d901      	bls.n	8003b56 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003b52:	2303      	movs	r3, #3
 8003b54:	e045      	b.n	8003be2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b56:	4b06      	ldr	r3, [pc, #24]	; (8003b70 <HAL_RCC_OscConfig+0x470>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d1f0      	bne.n	8003b44 <HAL_RCC_OscConfig+0x444>
 8003b62:	e03d      	b.n	8003be0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	699b      	ldr	r3, [r3, #24]
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d107      	bne.n	8003b7c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e038      	b.n	8003be2 <HAL_RCC_OscConfig+0x4e2>
 8003b70:	40023800 	.word	0x40023800
 8003b74:	40007000 	.word	0x40007000
 8003b78:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003b7c:	4b1b      	ldr	r3, [pc, #108]	; (8003bec <HAL_RCC_OscConfig+0x4ec>)
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	699b      	ldr	r3, [r3, #24]
 8003b86:	2b01      	cmp	r3, #1
 8003b88:	d028      	beq.n	8003bdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b94:	429a      	cmp	r2, r3
 8003b96:	d121      	bne.n	8003bdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	d11a      	bne.n	8003bdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ba6:	68fa      	ldr	r2, [r7, #12]
 8003ba8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003bac:	4013      	ands	r3, r2
 8003bae:	687a      	ldr	r2, [r7, #4]
 8003bb0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003bb2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d111      	bne.n	8003bdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bc2:	085b      	lsrs	r3, r3, #1
 8003bc4:	3b01      	subs	r3, #1
 8003bc6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d107      	bne.n	8003bdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	d001      	beq.n	8003be0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	e000      	b.n	8003be2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003be0:	2300      	movs	r3, #0
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3718      	adds	r7, #24
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	bf00      	nop
 8003bec:	40023800 	.word	0x40023800

08003bf0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b084      	sub	sp, #16
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d101      	bne.n	8003c04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	e0cc      	b.n	8003d9e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c04:	4b68      	ldr	r3, [pc, #416]	; (8003da8 <HAL_RCC_ClockConfig+0x1b8>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f003 0307 	and.w	r3, r3, #7
 8003c0c:	683a      	ldr	r2, [r7, #0]
 8003c0e:	429a      	cmp	r2, r3
 8003c10:	d90c      	bls.n	8003c2c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c12:	4b65      	ldr	r3, [pc, #404]	; (8003da8 <HAL_RCC_ClockConfig+0x1b8>)
 8003c14:	683a      	ldr	r2, [r7, #0]
 8003c16:	b2d2      	uxtb	r2, r2
 8003c18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c1a:	4b63      	ldr	r3, [pc, #396]	; (8003da8 <HAL_RCC_ClockConfig+0x1b8>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 0307 	and.w	r3, r3, #7
 8003c22:	683a      	ldr	r2, [r7, #0]
 8003c24:	429a      	cmp	r2, r3
 8003c26:	d001      	beq.n	8003c2c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e0b8      	b.n	8003d9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f003 0302 	and.w	r3, r3, #2
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d020      	beq.n	8003c7a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f003 0304 	and.w	r3, r3, #4
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d005      	beq.n	8003c50 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c44:	4b59      	ldr	r3, [pc, #356]	; (8003dac <HAL_RCC_ClockConfig+0x1bc>)
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	4a58      	ldr	r2, [pc, #352]	; (8003dac <HAL_RCC_ClockConfig+0x1bc>)
 8003c4a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003c4e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f003 0308 	and.w	r3, r3, #8
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d005      	beq.n	8003c68 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c5c:	4b53      	ldr	r3, [pc, #332]	; (8003dac <HAL_RCC_ClockConfig+0x1bc>)
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	4a52      	ldr	r2, [pc, #328]	; (8003dac <HAL_RCC_ClockConfig+0x1bc>)
 8003c62:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003c66:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c68:	4b50      	ldr	r3, [pc, #320]	; (8003dac <HAL_RCC_ClockConfig+0x1bc>)
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	494d      	ldr	r1, [pc, #308]	; (8003dac <HAL_RCC_ClockConfig+0x1bc>)
 8003c76:	4313      	orrs	r3, r2
 8003c78:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f003 0301 	and.w	r3, r3, #1
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d044      	beq.n	8003d10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d107      	bne.n	8003c9e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c8e:	4b47      	ldr	r3, [pc, #284]	; (8003dac <HAL_RCC_ClockConfig+0x1bc>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d119      	bne.n	8003cce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e07f      	b.n	8003d9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	2b02      	cmp	r3, #2
 8003ca4:	d003      	beq.n	8003cae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003caa:	2b03      	cmp	r3, #3
 8003cac:	d107      	bne.n	8003cbe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cae:	4b3f      	ldr	r3, [pc, #252]	; (8003dac <HAL_RCC_ClockConfig+0x1bc>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d109      	bne.n	8003cce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e06f      	b.n	8003d9e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cbe:	4b3b      	ldr	r3, [pc, #236]	; (8003dac <HAL_RCC_ClockConfig+0x1bc>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 0302 	and.w	r3, r3, #2
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d101      	bne.n	8003cce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e067      	b.n	8003d9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003cce:	4b37      	ldr	r3, [pc, #220]	; (8003dac <HAL_RCC_ClockConfig+0x1bc>)
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	f023 0203 	bic.w	r2, r3, #3
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	4934      	ldr	r1, [pc, #208]	; (8003dac <HAL_RCC_ClockConfig+0x1bc>)
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ce0:	f7fd f9f2 	bl	80010c8 <HAL_GetTick>
 8003ce4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ce6:	e00a      	b.n	8003cfe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ce8:	f7fd f9ee 	bl	80010c8 <HAL_GetTick>
 8003cec:	4602      	mov	r2, r0
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	1ad3      	subs	r3, r2, r3
 8003cf2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d901      	bls.n	8003cfe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	e04f      	b.n	8003d9e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cfe:	4b2b      	ldr	r3, [pc, #172]	; (8003dac <HAL_RCC_ClockConfig+0x1bc>)
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	f003 020c 	and.w	r2, r3, #12
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	009b      	lsls	r3, r3, #2
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d1eb      	bne.n	8003ce8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d10:	4b25      	ldr	r3, [pc, #148]	; (8003da8 <HAL_RCC_ClockConfig+0x1b8>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f003 0307 	and.w	r3, r3, #7
 8003d18:	683a      	ldr	r2, [r7, #0]
 8003d1a:	429a      	cmp	r2, r3
 8003d1c:	d20c      	bcs.n	8003d38 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d1e:	4b22      	ldr	r3, [pc, #136]	; (8003da8 <HAL_RCC_ClockConfig+0x1b8>)
 8003d20:	683a      	ldr	r2, [r7, #0]
 8003d22:	b2d2      	uxtb	r2, r2
 8003d24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d26:	4b20      	ldr	r3, [pc, #128]	; (8003da8 <HAL_RCC_ClockConfig+0x1b8>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 0307 	and.w	r3, r3, #7
 8003d2e:	683a      	ldr	r2, [r7, #0]
 8003d30:	429a      	cmp	r2, r3
 8003d32:	d001      	beq.n	8003d38 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	e032      	b.n	8003d9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 0304 	and.w	r3, r3, #4
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d008      	beq.n	8003d56 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d44:	4b19      	ldr	r3, [pc, #100]	; (8003dac <HAL_RCC_ClockConfig+0x1bc>)
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	4916      	ldr	r1, [pc, #88]	; (8003dac <HAL_RCC_ClockConfig+0x1bc>)
 8003d52:	4313      	orrs	r3, r2
 8003d54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f003 0308 	and.w	r3, r3, #8
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d009      	beq.n	8003d76 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d62:	4b12      	ldr	r3, [pc, #72]	; (8003dac <HAL_RCC_ClockConfig+0x1bc>)
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	691b      	ldr	r3, [r3, #16]
 8003d6e:	00db      	lsls	r3, r3, #3
 8003d70:	490e      	ldr	r1, [pc, #56]	; (8003dac <HAL_RCC_ClockConfig+0x1bc>)
 8003d72:	4313      	orrs	r3, r2
 8003d74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003d76:	f000 f821 	bl	8003dbc <HAL_RCC_GetSysClockFreq>
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	4b0b      	ldr	r3, [pc, #44]	; (8003dac <HAL_RCC_ClockConfig+0x1bc>)
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	091b      	lsrs	r3, r3, #4
 8003d82:	f003 030f 	and.w	r3, r3, #15
 8003d86:	490a      	ldr	r1, [pc, #40]	; (8003db0 <HAL_RCC_ClockConfig+0x1c0>)
 8003d88:	5ccb      	ldrb	r3, [r1, r3]
 8003d8a:	fa22 f303 	lsr.w	r3, r2, r3
 8003d8e:	4a09      	ldr	r2, [pc, #36]	; (8003db4 <HAL_RCC_ClockConfig+0x1c4>)
 8003d90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003d92:	4b09      	ldr	r3, [pc, #36]	; (8003db8 <HAL_RCC_ClockConfig+0x1c8>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4618      	mov	r0, r3
 8003d98:	f7fd f87e 	bl	8000e98 <HAL_InitTick>

  return HAL_OK;
 8003d9c:	2300      	movs	r3, #0
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3710      	adds	r7, #16
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}
 8003da6:	bf00      	nop
 8003da8:	40023c00 	.word	0x40023c00
 8003dac:	40023800 	.word	0x40023800
 8003db0:	0800c21c 	.word	0x0800c21c
 8003db4:	20000000 	.word	0x20000000
 8003db8:	20000004 	.word	0x20000004

08003dbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003dbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003dc0:	b094      	sub	sp, #80	; 0x50
 8003dc2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	647b      	str	r3, [r7, #68]	; 0x44
 8003dc8:	2300      	movs	r3, #0
 8003dca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003dcc:	2300      	movs	r3, #0
 8003dce:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003dd4:	4b79      	ldr	r3, [pc, #484]	; (8003fbc <HAL_RCC_GetSysClockFreq+0x200>)
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	f003 030c 	and.w	r3, r3, #12
 8003ddc:	2b08      	cmp	r3, #8
 8003dde:	d00d      	beq.n	8003dfc <HAL_RCC_GetSysClockFreq+0x40>
 8003de0:	2b08      	cmp	r3, #8
 8003de2:	f200 80e1 	bhi.w	8003fa8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d002      	beq.n	8003df0 <HAL_RCC_GetSysClockFreq+0x34>
 8003dea:	2b04      	cmp	r3, #4
 8003dec:	d003      	beq.n	8003df6 <HAL_RCC_GetSysClockFreq+0x3a>
 8003dee:	e0db      	b.n	8003fa8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003df0:	4b73      	ldr	r3, [pc, #460]	; (8003fc0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003df2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003df4:	e0db      	b.n	8003fae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003df6:	4b73      	ldr	r3, [pc, #460]	; (8003fc4 <HAL_RCC_GetSysClockFreq+0x208>)
 8003df8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003dfa:	e0d8      	b.n	8003fae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003dfc:	4b6f      	ldr	r3, [pc, #444]	; (8003fbc <HAL_RCC_GetSysClockFreq+0x200>)
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e04:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e06:	4b6d      	ldr	r3, [pc, #436]	; (8003fbc <HAL_RCC_GetSysClockFreq+0x200>)
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d063      	beq.n	8003eda <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e12:	4b6a      	ldr	r3, [pc, #424]	; (8003fbc <HAL_RCC_GetSysClockFreq+0x200>)
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	099b      	lsrs	r3, r3, #6
 8003e18:	2200      	movs	r2, #0
 8003e1a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e1c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003e1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e24:	633b      	str	r3, [r7, #48]	; 0x30
 8003e26:	2300      	movs	r3, #0
 8003e28:	637b      	str	r3, [r7, #52]	; 0x34
 8003e2a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003e2e:	4622      	mov	r2, r4
 8003e30:	462b      	mov	r3, r5
 8003e32:	f04f 0000 	mov.w	r0, #0
 8003e36:	f04f 0100 	mov.w	r1, #0
 8003e3a:	0159      	lsls	r1, r3, #5
 8003e3c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e40:	0150      	lsls	r0, r2, #5
 8003e42:	4602      	mov	r2, r0
 8003e44:	460b      	mov	r3, r1
 8003e46:	4621      	mov	r1, r4
 8003e48:	1a51      	subs	r1, r2, r1
 8003e4a:	6139      	str	r1, [r7, #16]
 8003e4c:	4629      	mov	r1, r5
 8003e4e:	eb63 0301 	sbc.w	r3, r3, r1
 8003e52:	617b      	str	r3, [r7, #20]
 8003e54:	f04f 0200 	mov.w	r2, #0
 8003e58:	f04f 0300 	mov.w	r3, #0
 8003e5c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003e60:	4659      	mov	r1, fp
 8003e62:	018b      	lsls	r3, r1, #6
 8003e64:	4651      	mov	r1, sl
 8003e66:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003e6a:	4651      	mov	r1, sl
 8003e6c:	018a      	lsls	r2, r1, #6
 8003e6e:	4651      	mov	r1, sl
 8003e70:	ebb2 0801 	subs.w	r8, r2, r1
 8003e74:	4659      	mov	r1, fp
 8003e76:	eb63 0901 	sbc.w	r9, r3, r1
 8003e7a:	f04f 0200 	mov.w	r2, #0
 8003e7e:	f04f 0300 	mov.w	r3, #0
 8003e82:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e86:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e8a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e8e:	4690      	mov	r8, r2
 8003e90:	4699      	mov	r9, r3
 8003e92:	4623      	mov	r3, r4
 8003e94:	eb18 0303 	adds.w	r3, r8, r3
 8003e98:	60bb      	str	r3, [r7, #8]
 8003e9a:	462b      	mov	r3, r5
 8003e9c:	eb49 0303 	adc.w	r3, r9, r3
 8003ea0:	60fb      	str	r3, [r7, #12]
 8003ea2:	f04f 0200 	mov.w	r2, #0
 8003ea6:	f04f 0300 	mov.w	r3, #0
 8003eaa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003eae:	4629      	mov	r1, r5
 8003eb0:	024b      	lsls	r3, r1, #9
 8003eb2:	4621      	mov	r1, r4
 8003eb4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003eb8:	4621      	mov	r1, r4
 8003eba:	024a      	lsls	r2, r1, #9
 8003ebc:	4610      	mov	r0, r2
 8003ebe:	4619      	mov	r1, r3
 8003ec0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ec6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ec8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003ecc:	f7fc f988 	bl	80001e0 <__aeabi_uldivmod>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	460b      	mov	r3, r1
 8003ed4:	4613      	mov	r3, r2
 8003ed6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ed8:	e058      	b.n	8003f8c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003eda:	4b38      	ldr	r3, [pc, #224]	; (8003fbc <HAL_RCC_GetSysClockFreq+0x200>)
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	099b      	lsrs	r3, r3, #6
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	4611      	mov	r1, r2
 8003ee6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003eea:	623b      	str	r3, [r7, #32]
 8003eec:	2300      	movs	r3, #0
 8003eee:	627b      	str	r3, [r7, #36]	; 0x24
 8003ef0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003ef4:	4642      	mov	r2, r8
 8003ef6:	464b      	mov	r3, r9
 8003ef8:	f04f 0000 	mov.w	r0, #0
 8003efc:	f04f 0100 	mov.w	r1, #0
 8003f00:	0159      	lsls	r1, r3, #5
 8003f02:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f06:	0150      	lsls	r0, r2, #5
 8003f08:	4602      	mov	r2, r0
 8003f0a:	460b      	mov	r3, r1
 8003f0c:	4641      	mov	r1, r8
 8003f0e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003f12:	4649      	mov	r1, r9
 8003f14:	eb63 0b01 	sbc.w	fp, r3, r1
 8003f18:	f04f 0200 	mov.w	r2, #0
 8003f1c:	f04f 0300 	mov.w	r3, #0
 8003f20:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003f24:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003f28:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003f2c:	ebb2 040a 	subs.w	r4, r2, sl
 8003f30:	eb63 050b 	sbc.w	r5, r3, fp
 8003f34:	f04f 0200 	mov.w	r2, #0
 8003f38:	f04f 0300 	mov.w	r3, #0
 8003f3c:	00eb      	lsls	r3, r5, #3
 8003f3e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f42:	00e2      	lsls	r2, r4, #3
 8003f44:	4614      	mov	r4, r2
 8003f46:	461d      	mov	r5, r3
 8003f48:	4643      	mov	r3, r8
 8003f4a:	18e3      	adds	r3, r4, r3
 8003f4c:	603b      	str	r3, [r7, #0]
 8003f4e:	464b      	mov	r3, r9
 8003f50:	eb45 0303 	adc.w	r3, r5, r3
 8003f54:	607b      	str	r3, [r7, #4]
 8003f56:	f04f 0200 	mov.w	r2, #0
 8003f5a:	f04f 0300 	mov.w	r3, #0
 8003f5e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003f62:	4629      	mov	r1, r5
 8003f64:	028b      	lsls	r3, r1, #10
 8003f66:	4621      	mov	r1, r4
 8003f68:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003f6c:	4621      	mov	r1, r4
 8003f6e:	028a      	lsls	r2, r1, #10
 8003f70:	4610      	mov	r0, r2
 8003f72:	4619      	mov	r1, r3
 8003f74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f76:	2200      	movs	r2, #0
 8003f78:	61bb      	str	r3, [r7, #24]
 8003f7a:	61fa      	str	r2, [r7, #28]
 8003f7c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f80:	f7fc f92e 	bl	80001e0 <__aeabi_uldivmod>
 8003f84:	4602      	mov	r2, r0
 8003f86:	460b      	mov	r3, r1
 8003f88:	4613      	mov	r3, r2
 8003f8a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003f8c:	4b0b      	ldr	r3, [pc, #44]	; (8003fbc <HAL_RCC_GetSysClockFreq+0x200>)
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	0c1b      	lsrs	r3, r3, #16
 8003f92:	f003 0303 	and.w	r3, r3, #3
 8003f96:	3301      	adds	r3, #1
 8003f98:	005b      	lsls	r3, r3, #1
 8003f9a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003f9c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003f9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003fa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fa4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003fa6:	e002      	b.n	8003fae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003fa8:	4b05      	ldr	r3, [pc, #20]	; (8003fc0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003faa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003fac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003fae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	3750      	adds	r7, #80	; 0x50
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003fba:	bf00      	nop
 8003fbc:	40023800 	.word	0x40023800
 8003fc0:	00f42400 	.word	0x00f42400
 8003fc4:	007a1200 	.word	0x007a1200

08003fc8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fcc:	4b03      	ldr	r3, [pc, #12]	; (8003fdc <HAL_RCC_GetHCLKFreq+0x14>)
 8003fce:	681b      	ldr	r3, [r3, #0]
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr
 8003fda:	bf00      	nop
 8003fdc:	20000000 	.word	0x20000000

08003fe0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003fe4:	f7ff fff0 	bl	8003fc8 <HAL_RCC_GetHCLKFreq>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	4b05      	ldr	r3, [pc, #20]	; (8004000 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	0a9b      	lsrs	r3, r3, #10
 8003ff0:	f003 0307 	and.w	r3, r3, #7
 8003ff4:	4903      	ldr	r1, [pc, #12]	; (8004004 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ff6:	5ccb      	ldrb	r3, [r1, r3]
 8003ff8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	bd80      	pop	{r7, pc}
 8004000:	40023800 	.word	0x40023800
 8004004:	0800c22c 	.word	0x0800c22c

08004008 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004008:	b480      	push	{r7}
 800400a:	b083      	sub	sp, #12
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
 8004010:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	220f      	movs	r2, #15
 8004016:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004018:	4b12      	ldr	r3, [pc, #72]	; (8004064 <HAL_RCC_GetClockConfig+0x5c>)
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	f003 0203 	and.w	r2, r3, #3
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004024:	4b0f      	ldr	r3, [pc, #60]	; (8004064 <HAL_RCC_GetClockConfig+0x5c>)
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004030:	4b0c      	ldr	r3, [pc, #48]	; (8004064 <HAL_RCC_GetClockConfig+0x5c>)
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800403c:	4b09      	ldr	r3, [pc, #36]	; (8004064 <HAL_RCC_GetClockConfig+0x5c>)
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	08db      	lsrs	r3, r3, #3
 8004042:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800404a:	4b07      	ldr	r3, [pc, #28]	; (8004068 <HAL_RCC_GetClockConfig+0x60>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 0207 	and.w	r2, r3, #7
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	601a      	str	r2, [r3, #0]
}
 8004056:	bf00      	nop
 8004058:	370c      	adds	r7, #12
 800405a:	46bd      	mov	sp, r7
 800405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004060:	4770      	bx	lr
 8004062:	bf00      	nop
 8004064:	40023800 	.word	0x40023800
 8004068:	40023c00 	.word	0x40023c00

0800406c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b082      	sub	sp, #8
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d101      	bne.n	800407e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e07b      	b.n	8004176 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004082:	2b00      	cmp	r3, #0
 8004084:	d108      	bne.n	8004098 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800408e:	d009      	beq.n	80040a4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2200      	movs	r2, #0
 8004094:	61da      	str	r2, [r3, #28]
 8004096:	e005      	b.n	80040a4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2200      	movs	r2, #0
 800409c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2200      	movs	r2, #0
 80040a2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2200      	movs	r2, #0
 80040a8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d106      	bne.n	80040c4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2200      	movs	r2, #0
 80040ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f7fc fea2 	bl	8000e08 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2202      	movs	r2, #2
 80040c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040da:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80040ec:	431a      	orrs	r2, r3
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	68db      	ldr	r3, [r3, #12]
 80040f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040f6:	431a      	orrs	r2, r3
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	691b      	ldr	r3, [r3, #16]
 80040fc:	f003 0302 	and.w	r3, r3, #2
 8004100:	431a      	orrs	r2, r3
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	695b      	ldr	r3, [r3, #20]
 8004106:	f003 0301 	and.w	r3, r3, #1
 800410a:	431a      	orrs	r2, r3
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	699b      	ldr	r3, [r3, #24]
 8004110:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004114:	431a      	orrs	r2, r3
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	69db      	ldr	r3, [r3, #28]
 800411a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800411e:	431a      	orrs	r2, r3
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6a1b      	ldr	r3, [r3, #32]
 8004124:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004128:	ea42 0103 	orr.w	r1, r2, r3
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004130:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	430a      	orrs	r2, r1
 800413a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	699b      	ldr	r3, [r3, #24]
 8004140:	0c1b      	lsrs	r3, r3, #16
 8004142:	f003 0104 	and.w	r1, r3, #4
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800414a:	f003 0210 	and.w	r2, r3, #16
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	430a      	orrs	r2, r1
 8004154:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	69da      	ldr	r2, [r3, #28]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004164:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2200      	movs	r2, #0
 800416a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2201      	movs	r2, #1
 8004170:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004174:	2300      	movs	r3, #0
}
 8004176:	4618      	mov	r0, r3
 8004178:	3708      	adds	r7, #8
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}

0800417e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800417e:	b580      	push	{r7, lr}
 8004180:	b088      	sub	sp, #32
 8004182:	af00      	add	r7, sp, #0
 8004184:	60f8      	str	r0, [r7, #12]
 8004186:	60b9      	str	r1, [r7, #8]
 8004188:	603b      	str	r3, [r7, #0]
 800418a:	4613      	mov	r3, r2
 800418c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800418e:	2300      	movs	r3, #0
 8004190:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004198:	2b01      	cmp	r3, #1
 800419a:	d101      	bne.n	80041a0 <HAL_SPI_Transmit+0x22>
 800419c:	2302      	movs	r3, #2
 800419e:	e126      	b.n	80043ee <HAL_SPI_Transmit+0x270>
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2201      	movs	r2, #1
 80041a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80041a8:	f7fc ff8e 	bl	80010c8 <HAL_GetTick>
 80041ac:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80041ae:	88fb      	ldrh	r3, [r7, #6]
 80041b0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	2b01      	cmp	r3, #1
 80041bc:	d002      	beq.n	80041c4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80041be:	2302      	movs	r3, #2
 80041c0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80041c2:	e10b      	b.n	80043dc <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d002      	beq.n	80041d0 <HAL_SPI_Transmit+0x52>
 80041ca:	88fb      	ldrh	r3, [r7, #6]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d102      	bne.n	80041d6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80041d4:	e102      	b.n	80043dc <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2203      	movs	r2, #3
 80041da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2200      	movs	r2, #0
 80041e2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	68ba      	ldr	r2, [r7, #8]
 80041e8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	88fa      	ldrh	r2, [r7, #6]
 80041ee:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	88fa      	ldrh	r2, [r7, #6]
 80041f4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2200      	movs	r2, #0
 80041fa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2200      	movs	r2, #0
 8004200:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2200      	movs	r2, #0
 8004206:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	2200      	movs	r2, #0
 800420c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2200      	movs	r2, #0
 8004212:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800421c:	d10f      	bne.n	800423e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	681a      	ldr	r2, [r3, #0]
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800422c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800423c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004248:	2b40      	cmp	r3, #64	; 0x40
 800424a:	d007      	beq.n	800425c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	681a      	ldr	r2, [r3, #0]
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800425a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004264:	d14b      	bne.n	80042fe <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d002      	beq.n	8004274 <HAL_SPI_Transmit+0xf6>
 800426e:	8afb      	ldrh	r3, [r7, #22]
 8004270:	2b01      	cmp	r3, #1
 8004272:	d13e      	bne.n	80042f2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004278:	881a      	ldrh	r2, [r3, #0]
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004284:	1c9a      	adds	r2, r3, #2
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800428e:	b29b      	uxth	r3, r3
 8004290:	3b01      	subs	r3, #1
 8004292:	b29a      	uxth	r2, r3
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004298:	e02b      	b.n	80042f2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	f003 0302 	and.w	r3, r3, #2
 80042a4:	2b02      	cmp	r3, #2
 80042a6:	d112      	bne.n	80042ce <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ac:	881a      	ldrh	r2, [r3, #0]
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042b8:	1c9a      	adds	r2, r3, #2
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042c2:	b29b      	uxth	r3, r3
 80042c4:	3b01      	subs	r3, #1
 80042c6:	b29a      	uxth	r2, r3
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	86da      	strh	r2, [r3, #54]	; 0x36
 80042cc:	e011      	b.n	80042f2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80042ce:	f7fc fefb 	bl	80010c8 <HAL_GetTick>
 80042d2:	4602      	mov	r2, r0
 80042d4:	69bb      	ldr	r3, [r7, #24]
 80042d6:	1ad3      	subs	r3, r2, r3
 80042d8:	683a      	ldr	r2, [r7, #0]
 80042da:	429a      	cmp	r2, r3
 80042dc:	d803      	bhi.n	80042e6 <HAL_SPI_Transmit+0x168>
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042e4:	d102      	bne.n	80042ec <HAL_SPI_Transmit+0x16e>
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d102      	bne.n	80042f2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80042ec:	2303      	movs	r3, #3
 80042ee:	77fb      	strb	r3, [r7, #31]
          goto error;
 80042f0:	e074      	b.n	80043dc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042f6:	b29b      	uxth	r3, r3
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d1ce      	bne.n	800429a <HAL_SPI_Transmit+0x11c>
 80042fc:	e04c      	b.n	8004398 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d002      	beq.n	800430c <HAL_SPI_Transmit+0x18e>
 8004306:	8afb      	ldrh	r3, [r7, #22]
 8004308:	2b01      	cmp	r3, #1
 800430a:	d140      	bne.n	800438e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	330c      	adds	r3, #12
 8004316:	7812      	ldrb	r2, [r2, #0]
 8004318:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800431e:	1c5a      	adds	r2, r3, #1
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004328:	b29b      	uxth	r3, r3
 800432a:	3b01      	subs	r3, #1
 800432c:	b29a      	uxth	r2, r3
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004332:	e02c      	b.n	800438e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	f003 0302 	and.w	r3, r3, #2
 800433e:	2b02      	cmp	r3, #2
 8004340:	d113      	bne.n	800436a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	330c      	adds	r3, #12
 800434c:	7812      	ldrb	r2, [r2, #0]
 800434e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004354:	1c5a      	adds	r2, r3, #1
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800435e:	b29b      	uxth	r3, r3
 8004360:	3b01      	subs	r3, #1
 8004362:	b29a      	uxth	r2, r3
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	86da      	strh	r2, [r3, #54]	; 0x36
 8004368:	e011      	b.n	800438e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800436a:	f7fc fead 	bl	80010c8 <HAL_GetTick>
 800436e:	4602      	mov	r2, r0
 8004370:	69bb      	ldr	r3, [r7, #24]
 8004372:	1ad3      	subs	r3, r2, r3
 8004374:	683a      	ldr	r2, [r7, #0]
 8004376:	429a      	cmp	r2, r3
 8004378:	d803      	bhi.n	8004382 <HAL_SPI_Transmit+0x204>
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004380:	d102      	bne.n	8004388 <HAL_SPI_Transmit+0x20a>
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d102      	bne.n	800438e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004388:	2303      	movs	r3, #3
 800438a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800438c:	e026      	b.n	80043dc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004392:	b29b      	uxth	r3, r3
 8004394:	2b00      	cmp	r3, #0
 8004396:	d1cd      	bne.n	8004334 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004398:	69ba      	ldr	r2, [r7, #24]
 800439a:	6839      	ldr	r1, [r7, #0]
 800439c:	68f8      	ldr	r0, [r7, #12]
 800439e:	f000 fbcb 	bl	8004b38 <SPI_EndRxTxTransaction>
 80043a2:	4603      	mov	r3, r0
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d002      	beq.n	80043ae <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2220      	movs	r2, #32
 80043ac:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d10a      	bne.n	80043cc <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80043b6:	2300      	movs	r3, #0
 80043b8:	613b      	str	r3, [r7, #16]
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	68db      	ldr	r3, [r3, #12]
 80043c0:	613b      	str	r3, [r7, #16]
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	613b      	str	r3, [r7, #16]
 80043ca:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d002      	beq.n	80043da <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	77fb      	strb	r3, [r7, #31]
 80043d8:	e000      	b.n	80043dc <HAL_SPI_Transmit+0x25e>
  }

error:
 80043da:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	2201      	movs	r2, #1
 80043e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2200      	movs	r2, #0
 80043e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80043ec:	7ffb      	ldrb	r3, [r7, #31]
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3720      	adds	r7, #32
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}

080043f6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043f6:	b580      	push	{r7, lr}
 80043f8:	b088      	sub	sp, #32
 80043fa:	af02      	add	r7, sp, #8
 80043fc:	60f8      	str	r0, [r7, #12]
 80043fe:	60b9      	str	r1, [r7, #8]
 8004400:	603b      	str	r3, [r7, #0]
 8004402:	4613      	mov	r3, r2
 8004404:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004406:	2300      	movs	r3, #0
 8004408:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004412:	d112      	bne.n	800443a <HAL_SPI_Receive+0x44>
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d10e      	bne.n	800443a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2204      	movs	r2, #4
 8004420:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004424:	88fa      	ldrh	r2, [r7, #6]
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	9300      	str	r3, [sp, #0]
 800442a:	4613      	mov	r3, r2
 800442c:	68ba      	ldr	r2, [r7, #8]
 800442e:	68b9      	ldr	r1, [r7, #8]
 8004430:	68f8      	ldr	r0, [r7, #12]
 8004432:	f000 f8f1 	bl	8004618 <HAL_SPI_TransmitReceive>
 8004436:	4603      	mov	r3, r0
 8004438:	e0ea      	b.n	8004610 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004440:	2b01      	cmp	r3, #1
 8004442:	d101      	bne.n	8004448 <HAL_SPI_Receive+0x52>
 8004444:	2302      	movs	r3, #2
 8004446:	e0e3      	b.n	8004610 <HAL_SPI_Receive+0x21a>
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2201      	movs	r2, #1
 800444c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004450:	f7fc fe3a 	bl	80010c8 <HAL_GetTick>
 8004454:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800445c:	b2db      	uxtb	r3, r3
 800445e:	2b01      	cmp	r3, #1
 8004460:	d002      	beq.n	8004468 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004462:	2302      	movs	r3, #2
 8004464:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004466:	e0ca      	b.n	80045fe <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d002      	beq.n	8004474 <HAL_SPI_Receive+0x7e>
 800446e:	88fb      	ldrh	r3, [r7, #6]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d102      	bne.n	800447a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004474:	2301      	movs	r3, #1
 8004476:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004478:	e0c1      	b.n	80045fe <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2204      	movs	r2, #4
 800447e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2200      	movs	r2, #0
 8004486:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	68ba      	ldr	r2, [r7, #8]
 800448c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	88fa      	ldrh	r2, [r7, #6]
 8004492:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	88fa      	ldrh	r2, [r7, #6]
 8004498:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2200      	movs	r2, #0
 800449e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2200      	movs	r2, #0
 80044a4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2200      	movs	r2, #0
 80044aa:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2200      	movs	r2, #0
 80044b0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2200      	movs	r2, #0
 80044b6:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044c0:	d10f      	bne.n	80044e2 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044d0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80044e0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044ec:	2b40      	cmp	r3, #64	; 0x40
 80044ee:	d007      	beq.n	8004500 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80044fe:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	68db      	ldr	r3, [r3, #12]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d162      	bne.n	80045ce <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004508:	e02e      	b.n	8004568 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	f003 0301 	and.w	r3, r3, #1
 8004514:	2b01      	cmp	r3, #1
 8004516:	d115      	bne.n	8004544 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f103 020c 	add.w	r2, r3, #12
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004524:	7812      	ldrb	r2, [r2, #0]
 8004526:	b2d2      	uxtb	r2, r2
 8004528:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800452e:	1c5a      	adds	r2, r3, #1
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004538:	b29b      	uxth	r3, r3
 800453a:	3b01      	subs	r3, #1
 800453c:	b29a      	uxth	r2, r3
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004542:	e011      	b.n	8004568 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004544:	f7fc fdc0 	bl	80010c8 <HAL_GetTick>
 8004548:	4602      	mov	r2, r0
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	1ad3      	subs	r3, r2, r3
 800454e:	683a      	ldr	r2, [r7, #0]
 8004550:	429a      	cmp	r2, r3
 8004552:	d803      	bhi.n	800455c <HAL_SPI_Receive+0x166>
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	f1b3 3fff 	cmp.w	r3, #4294967295
 800455a:	d102      	bne.n	8004562 <HAL_SPI_Receive+0x16c>
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d102      	bne.n	8004568 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004562:	2303      	movs	r3, #3
 8004564:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004566:	e04a      	b.n	80045fe <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800456c:	b29b      	uxth	r3, r3
 800456e:	2b00      	cmp	r3, #0
 8004570:	d1cb      	bne.n	800450a <HAL_SPI_Receive+0x114>
 8004572:	e031      	b.n	80045d8 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	f003 0301 	and.w	r3, r3, #1
 800457e:	2b01      	cmp	r3, #1
 8004580:	d113      	bne.n	80045aa <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	68da      	ldr	r2, [r3, #12]
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800458c:	b292      	uxth	r2, r2
 800458e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004594:	1c9a      	adds	r2, r3, #2
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800459e:	b29b      	uxth	r3, r3
 80045a0:	3b01      	subs	r3, #1
 80045a2:	b29a      	uxth	r2, r3
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80045a8:	e011      	b.n	80045ce <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80045aa:	f7fc fd8d 	bl	80010c8 <HAL_GetTick>
 80045ae:	4602      	mov	r2, r0
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	1ad3      	subs	r3, r2, r3
 80045b4:	683a      	ldr	r2, [r7, #0]
 80045b6:	429a      	cmp	r2, r3
 80045b8:	d803      	bhi.n	80045c2 <HAL_SPI_Receive+0x1cc>
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045c0:	d102      	bne.n	80045c8 <HAL_SPI_Receive+0x1d2>
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d102      	bne.n	80045ce <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80045c8:	2303      	movs	r3, #3
 80045ca:	75fb      	strb	r3, [r7, #23]
          goto error;
 80045cc:	e017      	b.n	80045fe <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045d2:	b29b      	uxth	r3, r3
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d1cd      	bne.n	8004574 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80045d8:	693a      	ldr	r2, [r7, #16]
 80045da:	6839      	ldr	r1, [r7, #0]
 80045dc:	68f8      	ldr	r0, [r7, #12]
 80045de:	f000 fa45 	bl	8004a6c <SPI_EndRxTransaction>
 80045e2:	4603      	mov	r3, r0
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d002      	beq.n	80045ee <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2220      	movs	r2, #32
 80045ec:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d002      	beq.n	80045fc <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	75fb      	strb	r3, [r7, #23]
 80045fa:	e000      	b.n	80045fe <HAL_SPI_Receive+0x208>
  }

error :
 80045fc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2201      	movs	r2, #1
 8004602:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2200      	movs	r2, #0
 800460a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800460e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004610:	4618      	mov	r0, r3
 8004612:	3718      	adds	r7, #24
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}

08004618 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b08c      	sub	sp, #48	; 0x30
 800461c:	af00      	add	r7, sp, #0
 800461e:	60f8      	str	r0, [r7, #12]
 8004620:	60b9      	str	r1, [r7, #8]
 8004622:	607a      	str	r2, [r7, #4]
 8004624:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004626:	2301      	movs	r3, #1
 8004628:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800462a:	2300      	movs	r3, #0
 800462c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004636:	2b01      	cmp	r3, #1
 8004638:	d101      	bne.n	800463e <HAL_SPI_TransmitReceive+0x26>
 800463a:	2302      	movs	r3, #2
 800463c:	e18a      	b.n	8004954 <HAL_SPI_TransmitReceive+0x33c>
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2201      	movs	r2, #1
 8004642:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004646:	f7fc fd3f 	bl	80010c8 <HAL_GetTick>
 800464a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004652:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800465c:	887b      	ldrh	r3, [r7, #2]
 800465e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004660:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004664:	2b01      	cmp	r3, #1
 8004666:	d00f      	beq.n	8004688 <HAL_SPI_TransmitReceive+0x70>
 8004668:	69fb      	ldr	r3, [r7, #28]
 800466a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800466e:	d107      	bne.n	8004680 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d103      	bne.n	8004680 <HAL_SPI_TransmitReceive+0x68>
 8004678:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800467c:	2b04      	cmp	r3, #4
 800467e:	d003      	beq.n	8004688 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004680:	2302      	movs	r3, #2
 8004682:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004686:	e15b      	b.n	8004940 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d005      	beq.n	800469a <HAL_SPI_TransmitReceive+0x82>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d002      	beq.n	800469a <HAL_SPI_TransmitReceive+0x82>
 8004694:	887b      	ldrh	r3, [r7, #2]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d103      	bne.n	80046a2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80046a0:	e14e      	b.n	8004940 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80046a8:	b2db      	uxtb	r3, r3
 80046aa:	2b04      	cmp	r3, #4
 80046ac:	d003      	beq.n	80046b6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2205      	movs	r2, #5
 80046b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2200      	movs	r2, #0
 80046ba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	687a      	ldr	r2, [r7, #4]
 80046c0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	887a      	ldrh	r2, [r7, #2]
 80046c6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	887a      	ldrh	r2, [r7, #2]
 80046cc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	68ba      	ldr	r2, [r7, #8]
 80046d2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	887a      	ldrh	r2, [r7, #2]
 80046d8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	887a      	ldrh	r2, [r7, #2]
 80046de:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2200      	movs	r2, #0
 80046e4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2200      	movs	r2, #0
 80046ea:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046f6:	2b40      	cmp	r3, #64	; 0x40
 80046f8:	d007      	beq.n	800470a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	681a      	ldr	r2, [r3, #0]
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004708:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	68db      	ldr	r3, [r3, #12]
 800470e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004712:	d178      	bne.n	8004806 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d002      	beq.n	8004722 <HAL_SPI_TransmitReceive+0x10a>
 800471c:	8b7b      	ldrh	r3, [r7, #26]
 800471e:	2b01      	cmp	r3, #1
 8004720:	d166      	bne.n	80047f0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004726:	881a      	ldrh	r2, [r3, #0]
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004732:	1c9a      	adds	r2, r3, #2
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800473c:	b29b      	uxth	r3, r3
 800473e:	3b01      	subs	r3, #1
 8004740:	b29a      	uxth	r2, r3
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004746:	e053      	b.n	80047f0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	f003 0302 	and.w	r3, r3, #2
 8004752:	2b02      	cmp	r3, #2
 8004754:	d11b      	bne.n	800478e <HAL_SPI_TransmitReceive+0x176>
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800475a:	b29b      	uxth	r3, r3
 800475c:	2b00      	cmp	r3, #0
 800475e:	d016      	beq.n	800478e <HAL_SPI_TransmitReceive+0x176>
 8004760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004762:	2b01      	cmp	r3, #1
 8004764:	d113      	bne.n	800478e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800476a:	881a      	ldrh	r2, [r3, #0]
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004776:	1c9a      	adds	r2, r3, #2
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004780:	b29b      	uxth	r3, r3
 8004782:	3b01      	subs	r3, #1
 8004784:	b29a      	uxth	r2, r3
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800478a:	2300      	movs	r3, #0
 800478c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	f003 0301 	and.w	r3, r3, #1
 8004798:	2b01      	cmp	r3, #1
 800479a:	d119      	bne.n	80047d0 <HAL_SPI_TransmitReceive+0x1b8>
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047a0:	b29b      	uxth	r3, r3
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d014      	beq.n	80047d0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	68da      	ldr	r2, [r3, #12]
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047b0:	b292      	uxth	r2, r2
 80047b2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047b8:	1c9a      	adds	r2, r3, #2
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047c2:	b29b      	uxth	r3, r3
 80047c4:	3b01      	subs	r3, #1
 80047c6:	b29a      	uxth	r2, r3
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80047cc:	2301      	movs	r3, #1
 80047ce:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80047d0:	f7fc fc7a 	bl	80010c8 <HAL_GetTick>
 80047d4:	4602      	mov	r2, r0
 80047d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d8:	1ad3      	subs	r3, r2, r3
 80047da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80047dc:	429a      	cmp	r2, r3
 80047de:	d807      	bhi.n	80047f0 <HAL_SPI_TransmitReceive+0x1d8>
 80047e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047e6:	d003      	beq.n	80047f0 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80047e8:	2303      	movs	r3, #3
 80047ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80047ee:	e0a7      	b.n	8004940 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047f4:	b29b      	uxth	r3, r3
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d1a6      	bne.n	8004748 <HAL_SPI_TransmitReceive+0x130>
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047fe:	b29b      	uxth	r3, r3
 8004800:	2b00      	cmp	r3, #0
 8004802:	d1a1      	bne.n	8004748 <HAL_SPI_TransmitReceive+0x130>
 8004804:	e07c      	b.n	8004900 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d002      	beq.n	8004814 <HAL_SPI_TransmitReceive+0x1fc>
 800480e:	8b7b      	ldrh	r3, [r7, #26]
 8004810:	2b01      	cmp	r3, #1
 8004812:	d16b      	bne.n	80048ec <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	330c      	adds	r3, #12
 800481e:	7812      	ldrb	r2, [r2, #0]
 8004820:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004826:	1c5a      	adds	r2, r3, #1
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004830:	b29b      	uxth	r3, r3
 8004832:	3b01      	subs	r3, #1
 8004834:	b29a      	uxth	r2, r3
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800483a:	e057      	b.n	80048ec <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	f003 0302 	and.w	r3, r3, #2
 8004846:	2b02      	cmp	r3, #2
 8004848:	d11c      	bne.n	8004884 <HAL_SPI_TransmitReceive+0x26c>
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800484e:	b29b      	uxth	r3, r3
 8004850:	2b00      	cmp	r3, #0
 8004852:	d017      	beq.n	8004884 <HAL_SPI_TransmitReceive+0x26c>
 8004854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004856:	2b01      	cmp	r3, #1
 8004858:	d114      	bne.n	8004884 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	330c      	adds	r3, #12
 8004864:	7812      	ldrb	r2, [r2, #0]
 8004866:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800486c:	1c5a      	adds	r2, r3, #1
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004876:	b29b      	uxth	r3, r3
 8004878:	3b01      	subs	r3, #1
 800487a:	b29a      	uxth	r2, r3
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004880:	2300      	movs	r3, #0
 8004882:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	f003 0301 	and.w	r3, r3, #1
 800488e:	2b01      	cmp	r3, #1
 8004890:	d119      	bne.n	80048c6 <HAL_SPI_TransmitReceive+0x2ae>
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004896:	b29b      	uxth	r3, r3
 8004898:	2b00      	cmp	r3, #0
 800489a:	d014      	beq.n	80048c6 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	68da      	ldr	r2, [r3, #12]
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048a6:	b2d2      	uxtb	r2, r2
 80048a8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ae:	1c5a      	adds	r2, r3, #1
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048b8:	b29b      	uxth	r3, r3
 80048ba:	3b01      	subs	r3, #1
 80048bc:	b29a      	uxth	r2, r3
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80048c2:	2301      	movs	r3, #1
 80048c4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80048c6:	f7fc fbff 	bl	80010c8 <HAL_GetTick>
 80048ca:	4602      	mov	r2, r0
 80048cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ce:	1ad3      	subs	r3, r2, r3
 80048d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80048d2:	429a      	cmp	r2, r3
 80048d4:	d803      	bhi.n	80048de <HAL_SPI_TransmitReceive+0x2c6>
 80048d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048dc:	d102      	bne.n	80048e4 <HAL_SPI_TransmitReceive+0x2cc>
 80048de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d103      	bne.n	80048ec <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80048e4:	2303      	movs	r3, #3
 80048e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80048ea:	e029      	b.n	8004940 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048f0:	b29b      	uxth	r3, r3
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d1a2      	bne.n	800483c <HAL_SPI_TransmitReceive+0x224>
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048fa:	b29b      	uxth	r3, r3
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d19d      	bne.n	800483c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004900:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004902:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004904:	68f8      	ldr	r0, [r7, #12]
 8004906:	f000 f917 	bl	8004b38 <SPI_EndRxTxTransaction>
 800490a:	4603      	mov	r3, r0
 800490c:	2b00      	cmp	r3, #0
 800490e:	d006      	beq.n	800491e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004910:	2301      	movs	r3, #1
 8004912:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2220      	movs	r2, #32
 800491a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800491c:	e010      	b.n	8004940 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d10b      	bne.n	800493e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004926:	2300      	movs	r3, #0
 8004928:	617b      	str	r3, [r7, #20]
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	68db      	ldr	r3, [r3, #12]
 8004930:	617b      	str	r3, [r7, #20]
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	617b      	str	r3, [r7, #20]
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	e000      	b.n	8004940 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800493e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2201      	movs	r2, #1
 8004944:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2200      	movs	r2, #0
 800494c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004950:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004954:	4618      	mov	r0, r3
 8004956:	3730      	adds	r7, #48	; 0x30
 8004958:	46bd      	mov	sp, r7
 800495a:	bd80      	pop	{r7, pc}

0800495c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b088      	sub	sp, #32
 8004960:	af00      	add	r7, sp, #0
 8004962:	60f8      	str	r0, [r7, #12]
 8004964:	60b9      	str	r1, [r7, #8]
 8004966:	603b      	str	r3, [r7, #0]
 8004968:	4613      	mov	r3, r2
 800496a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800496c:	f7fc fbac 	bl	80010c8 <HAL_GetTick>
 8004970:	4602      	mov	r2, r0
 8004972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004974:	1a9b      	subs	r3, r3, r2
 8004976:	683a      	ldr	r2, [r7, #0]
 8004978:	4413      	add	r3, r2
 800497a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800497c:	f7fc fba4 	bl	80010c8 <HAL_GetTick>
 8004980:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004982:	4b39      	ldr	r3, [pc, #228]	; (8004a68 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	015b      	lsls	r3, r3, #5
 8004988:	0d1b      	lsrs	r3, r3, #20
 800498a:	69fa      	ldr	r2, [r7, #28]
 800498c:	fb02 f303 	mul.w	r3, r2, r3
 8004990:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004992:	e054      	b.n	8004a3e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	f1b3 3fff 	cmp.w	r3, #4294967295
 800499a:	d050      	beq.n	8004a3e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800499c:	f7fc fb94 	bl	80010c8 <HAL_GetTick>
 80049a0:	4602      	mov	r2, r0
 80049a2:	69bb      	ldr	r3, [r7, #24]
 80049a4:	1ad3      	subs	r3, r2, r3
 80049a6:	69fa      	ldr	r2, [r7, #28]
 80049a8:	429a      	cmp	r2, r3
 80049aa:	d902      	bls.n	80049b2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80049ac:	69fb      	ldr	r3, [r7, #28]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d13d      	bne.n	8004a2e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	685a      	ldr	r2, [r3, #4]
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80049c0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049ca:	d111      	bne.n	80049f0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	689b      	ldr	r3, [r3, #8]
 80049d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049d4:	d004      	beq.n	80049e0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049de:	d107      	bne.n	80049f0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	681a      	ldr	r2, [r3, #0]
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049ee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049f8:	d10f      	bne.n	8004a1a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a08:	601a      	str	r2, [r3, #0]
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004a18:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2201      	movs	r2, #1
 8004a1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2200      	movs	r2, #0
 8004a26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004a2a:	2303      	movs	r3, #3
 8004a2c:	e017      	b.n	8004a5e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d101      	bne.n	8004a38 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004a34:	2300      	movs	r3, #0
 8004a36:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	3b01      	subs	r3, #1
 8004a3c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	689a      	ldr	r2, [r3, #8]
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	4013      	ands	r3, r2
 8004a48:	68ba      	ldr	r2, [r7, #8]
 8004a4a:	429a      	cmp	r2, r3
 8004a4c:	bf0c      	ite	eq
 8004a4e:	2301      	moveq	r3, #1
 8004a50:	2300      	movne	r3, #0
 8004a52:	b2db      	uxtb	r3, r3
 8004a54:	461a      	mov	r2, r3
 8004a56:	79fb      	ldrb	r3, [r7, #7]
 8004a58:	429a      	cmp	r2, r3
 8004a5a:	d19b      	bne.n	8004994 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004a5c:	2300      	movs	r3, #0
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3720      	adds	r7, #32
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}
 8004a66:	bf00      	nop
 8004a68:	20000000 	.word	0x20000000

08004a6c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b086      	sub	sp, #24
 8004a70:	af02      	add	r7, sp, #8
 8004a72:	60f8      	str	r0, [r7, #12]
 8004a74:	60b9      	str	r1, [r7, #8]
 8004a76:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a80:	d111      	bne.n	8004aa6 <SPI_EndRxTransaction+0x3a>
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	689b      	ldr	r3, [r3, #8]
 8004a86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a8a:	d004      	beq.n	8004a96 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a94:	d107      	bne.n	8004aa6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	681a      	ldr	r2, [r3, #0]
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004aa4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004aae:	d12a      	bne.n	8004b06 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ab8:	d012      	beq.n	8004ae0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	9300      	str	r3, [sp, #0]
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	2180      	movs	r1, #128	; 0x80
 8004ac4:	68f8      	ldr	r0, [r7, #12]
 8004ac6:	f7ff ff49 	bl	800495c <SPI_WaitFlagStateUntilTimeout>
 8004aca:	4603      	mov	r3, r0
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d02d      	beq.n	8004b2c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ad4:	f043 0220 	orr.w	r2, r3, #32
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004adc:	2303      	movs	r3, #3
 8004ade:	e026      	b.n	8004b2e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	9300      	str	r3, [sp, #0]
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	2101      	movs	r1, #1
 8004aea:	68f8      	ldr	r0, [r7, #12]
 8004aec:	f7ff ff36 	bl	800495c <SPI_WaitFlagStateUntilTimeout>
 8004af0:	4603      	mov	r3, r0
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d01a      	beq.n	8004b2c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004afa:	f043 0220 	orr.w	r2, r3, #32
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004b02:	2303      	movs	r3, #3
 8004b04:	e013      	b.n	8004b2e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	9300      	str	r3, [sp, #0]
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	2101      	movs	r1, #1
 8004b10:	68f8      	ldr	r0, [r7, #12]
 8004b12:	f7ff ff23 	bl	800495c <SPI_WaitFlagStateUntilTimeout>
 8004b16:	4603      	mov	r3, r0
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d007      	beq.n	8004b2c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b20:	f043 0220 	orr.w	r2, r3, #32
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004b28:	2303      	movs	r3, #3
 8004b2a:	e000      	b.n	8004b2e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004b2c:	2300      	movs	r3, #0
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	3710      	adds	r7, #16
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}
	...

08004b38 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b088      	sub	sp, #32
 8004b3c:	af02      	add	r7, sp, #8
 8004b3e:	60f8      	str	r0, [r7, #12]
 8004b40:	60b9      	str	r1, [r7, #8]
 8004b42:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004b44:	4b1b      	ldr	r3, [pc, #108]	; (8004bb4 <SPI_EndRxTxTransaction+0x7c>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a1b      	ldr	r2, [pc, #108]	; (8004bb8 <SPI_EndRxTxTransaction+0x80>)
 8004b4a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b4e:	0d5b      	lsrs	r3, r3, #21
 8004b50:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004b54:	fb02 f303 	mul.w	r3, r2, r3
 8004b58:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b62:	d112      	bne.n	8004b8a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	9300      	str	r3, [sp, #0]
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	2180      	movs	r1, #128	; 0x80
 8004b6e:	68f8      	ldr	r0, [r7, #12]
 8004b70:	f7ff fef4 	bl	800495c <SPI_WaitFlagStateUntilTimeout>
 8004b74:	4603      	mov	r3, r0
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d016      	beq.n	8004ba8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b7e:	f043 0220 	orr.w	r2, r3, #32
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004b86:	2303      	movs	r3, #3
 8004b88:	e00f      	b.n	8004baa <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d00a      	beq.n	8004ba6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	3b01      	subs	r3, #1
 8004b94:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ba0:	2b80      	cmp	r3, #128	; 0x80
 8004ba2:	d0f2      	beq.n	8004b8a <SPI_EndRxTxTransaction+0x52>
 8004ba4:	e000      	b.n	8004ba8 <SPI_EndRxTxTransaction+0x70>
        break;
 8004ba6:	bf00      	nop
  }

  return HAL_OK;
 8004ba8:	2300      	movs	r3, #0
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	3718      	adds	r7, #24
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}
 8004bb2:	bf00      	nop
 8004bb4:	20000000 	.word	0x20000000
 8004bb8:	165e9f81 	.word	0x165e9f81

08004bbc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b082      	sub	sp, #8
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d101      	bne.n	8004bce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	e041      	b.n	8004c52 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bd4:	b2db      	uxtb	r3, r3
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d106      	bne.n	8004be8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f000 f839 	bl	8004c5a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2202      	movs	r2, #2
 8004bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681a      	ldr	r2, [r3, #0]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	3304      	adds	r3, #4
 8004bf8:	4619      	mov	r1, r3
 8004bfa:	4610      	mov	r0, r2
 8004bfc:	f000 f9ca 	bl	8004f94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2201      	movs	r2, #1
 8004c04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2201      	movs	r2, #1
 8004c14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2201      	movs	r2, #1
 8004c24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2201      	movs	r2, #1
 8004c34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2201      	movs	r2, #1
 8004c44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c50:	2300      	movs	r3, #0
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3708      	adds	r7, #8
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}

08004c5a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004c5a:	b480      	push	{r7}
 8004c5c:	b083      	sub	sp, #12
 8004c5e:	af00      	add	r7, sp, #0
 8004c60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004c62:	bf00      	nop
 8004c64:	370c      	adds	r7, #12
 8004c66:	46bd      	mov	sp, r7
 8004c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6c:	4770      	bx	lr
	...

08004c70 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b085      	sub	sp, #20
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c7e:	b2db      	uxtb	r3, r3
 8004c80:	2b01      	cmp	r3, #1
 8004c82:	d001      	beq.n	8004c88 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004c84:	2301      	movs	r3, #1
 8004c86:	e044      	b.n	8004d12 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2202      	movs	r2, #2
 8004c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	68da      	ldr	r2, [r3, #12]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f042 0201 	orr.w	r2, r2, #1
 8004c9e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a1e      	ldr	r2, [pc, #120]	; (8004d20 <HAL_TIM_Base_Start_IT+0xb0>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d018      	beq.n	8004cdc <HAL_TIM_Base_Start_IT+0x6c>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cb2:	d013      	beq.n	8004cdc <HAL_TIM_Base_Start_IT+0x6c>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a1a      	ldr	r2, [pc, #104]	; (8004d24 <HAL_TIM_Base_Start_IT+0xb4>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d00e      	beq.n	8004cdc <HAL_TIM_Base_Start_IT+0x6c>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a19      	ldr	r2, [pc, #100]	; (8004d28 <HAL_TIM_Base_Start_IT+0xb8>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d009      	beq.n	8004cdc <HAL_TIM_Base_Start_IT+0x6c>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a17      	ldr	r2, [pc, #92]	; (8004d2c <HAL_TIM_Base_Start_IT+0xbc>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d004      	beq.n	8004cdc <HAL_TIM_Base_Start_IT+0x6c>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a16      	ldr	r2, [pc, #88]	; (8004d30 <HAL_TIM_Base_Start_IT+0xc0>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d111      	bne.n	8004d00 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	f003 0307 	and.w	r3, r3, #7
 8004ce6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2b06      	cmp	r3, #6
 8004cec:	d010      	beq.n	8004d10 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f042 0201 	orr.w	r2, r2, #1
 8004cfc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cfe:	e007      	b.n	8004d10 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	681a      	ldr	r2, [r3, #0]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f042 0201 	orr.w	r2, r2, #1
 8004d0e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004d10:	2300      	movs	r3, #0
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	3714      	adds	r7, #20
 8004d16:	46bd      	mov	sp, r7
 8004d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1c:	4770      	bx	lr
 8004d1e:	bf00      	nop
 8004d20:	40010000 	.word	0x40010000
 8004d24:	40000400 	.word	0x40000400
 8004d28:	40000800 	.word	0x40000800
 8004d2c:	40000c00 	.word	0x40000c00
 8004d30:	40014000 	.word	0x40014000

08004d34 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b082      	sub	sp, #8
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	691b      	ldr	r3, [r3, #16]
 8004d42:	f003 0302 	and.w	r3, r3, #2
 8004d46:	2b02      	cmp	r3, #2
 8004d48:	d122      	bne.n	8004d90 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	68db      	ldr	r3, [r3, #12]
 8004d50:	f003 0302 	and.w	r3, r3, #2
 8004d54:	2b02      	cmp	r3, #2
 8004d56:	d11b      	bne.n	8004d90 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f06f 0202 	mvn.w	r2, #2
 8004d60:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2201      	movs	r2, #1
 8004d66:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	699b      	ldr	r3, [r3, #24]
 8004d6e:	f003 0303 	and.w	r3, r3, #3
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d003      	beq.n	8004d7e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	f000 f8ee 	bl	8004f58 <HAL_TIM_IC_CaptureCallback>
 8004d7c:	e005      	b.n	8004d8a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f000 f8e0 	bl	8004f44 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	f000 f8f1 	bl	8004f6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	691b      	ldr	r3, [r3, #16]
 8004d96:	f003 0304 	and.w	r3, r3, #4
 8004d9a:	2b04      	cmp	r3, #4
 8004d9c:	d122      	bne.n	8004de4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	68db      	ldr	r3, [r3, #12]
 8004da4:	f003 0304 	and.w	r3, r3, #4
 8004da8:	2b04      	cmp	r3, #4
 8004daa:	d11b      	bne.n	8004de4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f06f 0204 	mvn.w	r2, #4
 8004db4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2202      	movs	r2, #2
 8004dba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	699b      	ldr	r3, [r3, #24]
 8004dc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d003      	beq.n	8004dd2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	f000 f8c4 	bl	8004f58 <HAL_TIM_IC_CaptureCallback>
 8004dd0:	e005      	b.n	8004dde <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f000 f8b6 	bl	8004f44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dd8:	6878      	ldr	r0, [r7, #4]
 8004dda:	f000 f8c7 	bl	8004f6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2200      	movs	r2, #0
 8004de2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	691b      	ldr	r3, [r3, #16]
 8004dea:	f003 0308 	and.w	r3, r3, #8
 8004dee:	2b08      	cmp	r3, #8
 8004df0:	d122      	bne.n	8004e38 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	68db      	ldr	r3, [r3, #12]
 8004df8:	f003 0308 	and.w	r3, r3, #8
 8004dfc:	2b08      	cmp	r3, #8
 8004dfe:	d11b      	bne.n	8004e38 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f06f 0208 	mvn.w	r2, #8
 8004e08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2204      	movs	r2, #4
 8004e0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	69db      	ldr	r3, [r3, #28]
 8004e16:	f003 0303 	and.w	r3, r3, #3
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d003      	beq.n	8004e26 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f000 f89a 	bl	8004f58 <HAL_TIM_IC_CaptureCallback>
 8004e24:	e005      	b.n	8004e32 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	f000 f88c 	bl	8004f44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e2c:	6878      	ldr	r0, [r7, #4]
 8004e2e:	f000 f89d 	bl	8004f6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2200      	movs	r2, #0
 8004e36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	691b      	ldr	r3, [r3, #16]
 8004e3e:	f003 0310 	and.w	r3, r3, #16
 8004e42:	2b10      	cmp	r3, #16
 8004e44:	d122      	bne.n	8004e8c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	68db      	ldr	r3, [r3, #12]
 8004e4c:	f003 0310 	and.w	r3, r3, #16
 8004e50:	2b10      	cmp	r3, #16
 8004e52:	d11b      	bne.n	8004e8c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f06f 0210 	mvn.w	r2, #16
 8004e5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2208      	movs	r2, #8
 8004e62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	69db      	ldr	r3, [r3, #28]
 8004e6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d003      	beq.n	8004e7a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f000 f870 	bl	8004f58 <HAL_TIM_IC_CaptureCallback>
 8004e78:	e005      	b.n	8004e86 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	f000 f862 	bl	8004f44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e80:	6878      	ldr	r0, [r7, #4]
 8004e82:	f000 f873 	bl	8004f6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	691b      	ldr	r3, [r3, #16]
 8004e92:	f003 0301 	and.w	r3, r3, #1
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	d10e      	bne.n	8004eb8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	68db      	ldr	r3, [r3, #12]
 8004ea0:	f003 0301 	and.w	r3, r3, #1
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d107      	bne.n	8004eb8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f06f 0201 	mvn.w	r2, #1
 8004eb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	f7fb ff1c 	bl	8000cf0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	691b      	ldr	r3, [r3, #16]
 8004ebe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ec2:	2b80      	cmp	r3, #128	; 0x80
 8004ec4:	d10e      	bne.n	8004ee4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	68db      	ldr	r3, [r3, #12]
 8004ecc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ed0:	2b80      	cmp	r3, #128	; 0x80
 8004ed2:	d107      	bne.n	8004ee4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004edc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004ede:	6878      	ldr	r0, [r7, #4]
 8004ee0:	f000 f8e2 	bl	80050a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	691b      	ldr	r3, [r3, #16]
 8004eea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eee:	2b40      	cmp	r3, #64	; 0x40
 8004ef0:	d10e      	bne.n	8004f10 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	68db      	ldr	r3, [r3, #12]
 8004ef8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004efc:	2b40      	cmp	r3, #64	; 0x40
 8004efe:	d107      	bne.n	8004f10 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004f08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f000 f838 	bl	8004f80 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	691b      	ldr	r3, [r3, #16]
 8004f16:	f003 0320 	and.w	r3, r3, #32
 8004f1a:	2b20      	cmp	r3, #32
 8004f1c:	d10e      	bne.n	8004f3c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	68db      	ldr	r3, [r3, #12]
 8004f24:	f003 0320 	and.w	r3, r3, #32
 8004f28:	2b20      	cmp	r3, #32
 8004f2a:	d107      	bne.n	8004f3c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f06f 0220 	mvn.w	r2, #32
 8004f34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	f000 f8ac 	bl	8005094 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004f3c:	bf00      	nop
 8004f3e:	3708      	adds	r7, #8
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bd80      	pop	{r7, pc}

08004f44 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f44:	b480      	push	{r7}
 8004f46:	b083      	sub	sp, #12
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f4c:	bf00      	nop
 8004f4e:	370c      	adds	r7, #12
 8004f50:	46bd      	mov	sp, r7
 8004f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f56:	4770      	bx	lr

08004f58 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b083      	sub	sp, #12
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f60:	bf00      	nop
 8004f62:	370c      	adds	r7, #12
 8004f64:	46bd      	mov	sp, r7
 8004f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6a:	4770      	bx	lr

08004f6c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b083      	sub	sp, #12
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f74:	bf00      	nop
 8004f76:	370c      	adds	r7, #12
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr

08004f80 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b083      	sub	sp, #12
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f88:	bf00      	nop
 8004f8a:	370c      	adds	r7, #12
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f92:	4770      	bx	lr

08004f94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b085      	sub	sp, #20
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
 8004f9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	4a34      	ldr	r2, [pc, #208]	; (8005078 <TIM_Base_SetConfig+0xe4>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d00f      	beq.n	8004fcc <TIM_Base_SetConfig+0x38>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fb2:	d00b      	beq.n	8004fcc <TIM_Base_SetConfig+0x38>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	4a31      	ldr	r2, [pc, #196]	; (800507c <TIM_Base_SetConfig+0xe8>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d007      	beq.n	8004fcc <TIM_Base_SetConfig+0x38>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	4a30      	ldr	r2, [pc, #192]	; (8005080 <TIM_Base_SetConfig+0xec>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d003      	beq.n	8004fcc <TIM_Base_SetConfig+0x38>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	4a2f      	ldr	r2, [pc, #188]	; (8005084 <TIM_Base_SetConfig+0xf0>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d108      	bne.n	8004fde <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fd2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	68fa      	ldr	r2, [r7, #12]
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	4a25      	ldr	r2, [pc, #148]	; (8005078 <TIM_Base_SetConfig+0xe4>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d01b      	beq.n	800501e <TIM_Base_SetConfig+0x8a>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fec:	d017      	beq.n	800501e <TIM_Base_SetConfig+0x8a>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	4a22      	ldr	r2, [pc, #136]	; (800507c <TIM_Base_SetConfig+0xe8>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d013      	beq.n	800501e <TIM_Base_SetConfig+0x8a>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	4a21      	ldr	r2, [pc, #132]	; (8005080 <TIM_Base_SetConfig+0xec>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d00f      	beq.n	800501e <TIM_Base_SetConfig+0x8a>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	4a20      	ldr	r2, [pc, #128]	; (8005084 <TIM_Base_SetConfig+0xf0>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d00b      	beq.n	800501e <TIM_Base_SetConfig+0x8a>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	4a1f      	ldr	r2, [pc, #124]	; (8005088 <TIM_Base_SetConfig+0xf4>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d007      	beq.n	800501e <TIM_Base_SetConfig+0x8a>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	4a1e      	ldr	r2, [pc, #120]	; (800508c <TIM_Base_SetConfig+0xf8>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d003      	beq.n	800501e <TIM_Base_SetConfig+0x8a>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	4a1d      	ldr	r2, [pc, #116]	; (8005090 <TIM_Base_SetConfig+0xfc>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d108      	bne.n	8005030 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005024:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	68db      	ldr	r3, [r3, #12]
 800502a:	68fa      	ldr	r2, [r7, #12]
 800502c:	4313      	orrs	r3, r2
 800502e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	695b      	ldr	r3, [r3, #20]
 800503a:	4313      	orrs	r3, r2
 800503c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	68fa      	ldr	r2, [r7, #12]
 8005042:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	689a      	ldr	r2, [r3, #8]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	681a      	ldr	r2, [r3, #0]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	4a08      	ldr	r2, [pc, #32]	; (8005078 <TIM_Base_SetConfig+0xe4>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d103      	bne.n	8005064 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	691a      	ldr	r2, [r3, #16]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2201      	movs	r2, #1
 8005068:	615a      	str	r2, [r3, #20]
}
 800506a:	bf00      	nop
 800506c:	3714      	adds	r7, #20
 800506e:	46bd      	mov	sp, r7
 8005070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005074:	4770      	bx	lr
 8005076:	bf00      	nop
 8005078:	40010000 	.word	0x40010000
 800507c:	40000400 	.word	0x40000400
 8005080:	40000800 	.word	0x40000800
 8005084:	40000c00 	.word	0x40000c00
 8005088:	40014000 	.word	0x40014000
 800508c:	40014400 	.word	0x40014400
 8005090:	40014800 	.word	0x40014800

08005094 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005094:	b480      	push	{r7}
 8005096:	b083      	sub	sp, #12
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800509c:	bf00      	nop
 800509e:	370c      	adds	r7, #12
 80050a0:	46bd      	mov	sp, r7
 80050a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a6:	4770      	bx	lr

080050a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b083      	sub	sp, #12
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80050b0:	bf00      	nop
 80050b2:	370c      	adds	r7, #12
 80050b4:	46bd      	mov	sp, r7
 80050b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ba:	4770      	bx	lr

080050bc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80050bc:	b084      	sub	sp, #16
 80050be:	b580      	push	{r7, lr}
 80050c0:	b084      	sub	sp, #16
 80050c2:	af00      	add	r7, sp, #0
 80050c4:	6078      	str	r0, [r7, #4]
 80050c6:	f107 001c 	add.w	r0, r7, #28
 80050ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80050ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050d0:	2b01      	cmp	r3, #1
 80050d2:	d122      	bne.n	800511a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050d8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	68db      	ldr	r3, [r3, #12]
 80050e4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80050e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050ec:	687a      	ldr	r2, [r7, #4]
 80050ee:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	68db      	ldr	r3, [r3, #12]
 80050f4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80050fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050fe:	2b01      	cmp	r3, #1
 8005100:	d105      	bne.n	800510e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	68db      	ldr	r3, [r3, #12]
 8005106:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f001 fbee 	bl	80068f0 <USB_CoreReset>
 8005114:	4603      	mov	r3, r0
 8005116:	73fb      	strb	r3, [r7, #15]
 8005118:	e01a      	b.n	8005150 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	68db      	ldr	r3, [r3, #12]
 800511e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f001 fbe2 	bl	80068f0 <USB_CoreReset>
 800512c:	4603      	mov	r3, r0
 800512e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005130:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005132:	2b00      	cmp	r3, #0
 8005134:	d106      	bne.n	8005144 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800513a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	639a      	str	r2, [r3, #56]	; 0x38
 8005142:	e005      	b.n	8005150 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005148:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005152:	2b01      	cmp	r3, #1
 8005154:	d10b      	bne.n	800516e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	689b      	ldr	r3, [r3, #8]
 800515a:	f043 0206 	orr.w	r2, r3, #6
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	689b      	ldr	r3, [r3, #8]
 8005166:	f043 0220 	orr.w	r2, r3, #32
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800516e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005170:	4618      	mov	r0, r3
 8005172:	3710      	adds	r7, #16
 8005174:	46bd      	mov	sp, r7
 8005176:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800517a:	b004      	add	sp, #16
 800517c:	4770      	bx	lr
	...

08005180 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005180:	b480      	push	{r7}
 8005182:	b087      	sub	sp, #28
 8005184:	af00      	add	r7, sp, #0
 8005186:	60f8      	str	r0, [r7, #12]
 8005188:	60b9      	str	r1, [r7, #8]
 800518a:	4613      	mov	r3, r2
 800518c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800518e:	79fb      	ldrb	r3, [r7, #7]
 8005190:	2b02      	cmp	r3, #2
 8005192:	d165      	bne.n	8005260 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	4a41      	ldr	r2, [pc, #260]	; (800529c <USB_SetTurnaroundTime+0x11c>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d906      	bls.n	80051aa <USB_SetTurnaroundTime+0x2a>
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	4a40      	ldr	r2, [pc, #256]	; (80052a0 <USB_SetTurnaroundTime+0x120>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d202      	bcs.n	80051aa <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80051a4:	230f      	movs	r3, #15
 80051a6:	617b      	str	r3, [r7, #20]
 80051a8:	e062      	b.n	8005270 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	4a3c      	ldr	r2, [pc, #240]	; (80052a0 <USB_SetTurnaroundTime+0x120>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d306      	bcc.n	80051c0 <USB_SetTurnaroundTime+0x40>
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	4a3b      	ldr	r2, [pc, #236]	; (80052a4 <USB_SetTurnaroundTime+0x124>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d202      	bcs.n	80051c0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80051ba:	230e      	movs	r3, #14
 80051bc:	617b      	str	r3, [r7, #20]
 80051be:	e057      	b.n	8005270 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	4a38      	ldr	r2, [pc, #224]	; (80052a4 <USB_SetTurnaroundTime+0x124>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d306      	bcc.n	80051d6 <USB_SetTurnaroundTime+0x56>
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	4a37      	ldr	r2, [pc, #220]	; (80052a8 <USB_SetTurnaroundTime+0x128>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d202      	bcs.n	80051d6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80051d0:	230d      	movs	r3, #13
 80051d2:	617b      	str	r3, [r7, #20]
 80051d4:	e04c      	b.n	8005270 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	4a33      	ldr	r2, [pc, #204]	; (80052a8 <USB_SetTurnaroundTime+0x128>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d306      	bcc.n	80051ec <USB_SetTurnaroundTime+0x6c>
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	4a32      	ldr	r2, [pc, #200]	; (80052ac <USB_SetTurnaroundTime+0x12c>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d802      	bhi.n	80051ec <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80051e6:	230c      	movs	r3, #12
 80051e8:	617b      	str	r3, [r7, #20]
 80051ea:	e041      	b.n	8005270 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	4a2f      	ldr	r2, [pc, #188]	; (80052ac <USB_SetTurnaroundTime+0x12c>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d906      	bls.n	8005202 <USB_SetTurnaroundTime+0x82>
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	4a2e      	ldr	r2, [pc, #184]	; (80052b0 <USB_SetTurnaroundTime+0x130>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d802      	bhi.n	8005202 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80051fc:	230b      	movs	r3, #11
 80051fe:	617b      	str	r3, [r7, #20]
 8005200:	e036      	b.n	8005270 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	4a2a      	ldr	r2, [pc, #168]	; (80052b0 <USB_SetTurnaroundTime+0x130>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d906      	bls.n	8005218 <USB_SetTurnaroundTime+0x98>
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	4a29      	ldr	r2, [pc, #164]	; (80052b4 <USB_SetTurnaroundTime+0x134>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d802      	bhi.n	8005218 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005212:	230a      	movs	r3, #10
 8005214:	617b      	str	r3, [r7, #20]
 8005216:	e02b      	b.n	8005270 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	4a26      	ldr	r2, [pc, #152]	; (80052b4 <USB_SetTurnaroundTime+0x134>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d906      	bls.n	800522e <USB_SetTurnaroundTime+0xae>
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	4a25      	ldr	r2, [pc, #148]	; (80052b8 <USB_SetTurnaroundTime+0x138>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d202      	bcs.n	800522e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005228:	2309      	movs	r3, #9
 800522a:	617b      	str	r3, [r7, #20]
 800522c:	e020      	b.n	8005270 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	4a21      	ldr	r2, [pc, #132]	; (80052b8 <USB_SetTurnaroundTime+0x138>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d306      	bcc.n	8005244 <USB_SetTurnaroundTime+0xc4>
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	4a20      	ldr	r2, [pc, #128]	; (80052bc <USB_SetTurnaroundTime+0x13c>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d802      	bhi.n	8005244 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800523e:	2308      	movs	r3, #8
 8005240:	617b      	str	r3, [r7, #20]
 8005242:	e015      	b.n	8005270 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	4a1d      	ldr	r2, [pc, #116]	; (80052bc <USB_SetTurnaroundTime+0x13c>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d906      	bls.n	800525a <USB_SetTurnaroundTime+0xda>
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	4a1c      	ldr	r2, [pc, #112]	; (80052c0 <USB_SetTurnaroundTime+0x140>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d202      	bcs.n	800525a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005254:	2307      	movs	r3, #7
 8005256:	617b      	str	r3, [r7, #20]
 8005258:	e00a      	b.n	8005270 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800525a:	2306      	movs	r3, #6
 800525c:	617b      	str	r3, [r7, #20]
 800525e:	e007      	b.n	8005270 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005260:	79fb      	ldrb	r3, [r7, #7]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d102      	bne.n	800526c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005266:	2309      	movs	r3, #9
 8005268:	617b      	str	r3, [r7, #20]
 800526a:	e001      	b.n	8005270 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800526c:	2309      	movs	r3, #9
 800526e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	68db      	ldr	r3, [r3, #12]
 8005274:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	68da      	ldr	r2, [r3, #12]
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	029b      	lsls	r3, r3, #10
 8005284:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005288:	431a      	orrs	r2, r3
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800528e:	2300      	movs	r3, #0
}
 8005290:	4618      	mov	r0, r3
 8005292:	371c      	adds	r7, #28
 8005294:	46bd      	mov	sp, r7
 8005296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529a:	4770      	bx	lr
 800529c:	00d8acbf 	.word	0x00d8acbf
 80052a0:	00e4e1c0 	.word	0x00e4e1c0
 80052a4:	00f42400 	.word	0x00f42400
 80052a8:	01067380 	.word	0x01067380
 80052ac:	011a499f 	.word	0x011a499f
 80052b0:	01312cff 	.word	0x01312cff
 80052b4:	014ca43f 	.word	0x014ca43f
 80052b8:	016e3600 	.word	0x016e3600
 80052bc:	01a6ab1f 	.word	0x01a6ab1f
 80052c0:	01e84800 	.word	0x01e84800

080052c4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80052c4:	b480      	push	{r7}
 80052c6:	b083      	sub	sp, #12
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	689b      	ldr	r3, [r3, #8]
 80052d0:	f043 0201 	orr.w	r2, r3, #1
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80052d8:	2300      	movs	r3, #0
}
 80052da:	4618      	mov	r0, r3
 80052dc:	370c      	adds	r7, #12
 80052de:	46bd      	mov	sp, r7
 80052e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e4:	4770      	bx	lr

080052e6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80052e6:	b480      	push	{r7}
 80052e8:	b083      	sub	sp, #12
 80052ea:	af00      	add	r7, sp, #0
 80052ec:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	f023 0201 	bic.w	r2, r3, #1
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80052fa:	2300      	movs	r3, #0
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	370c      	adds	r7, #12
 8005300:	46bd      	mov	sp, r7
 8005302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005306:	4770      	bx	lr

08005308 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b084      	sub	sp, #16
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
 8005310:	460b      	mov	r3, r1
 8005312:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005314:	2300      	movs	r3, #0
 8005316:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	68db      	ldr	r3, [r3, #12]
 800531c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005324:	78fb      	ldrb	r3, [r7, #3]
 8005326:	2b01      	cmp	r3, #1
 8005328:	d115      	bne.n	8005356 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	68db      	ldr	r3, [r3, #12]
 800532e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005336:	2001      	movs	r0, #1
 8005338:	f7fb fed2 	bl	80010e0 <HAL_Delay>
      ms++;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	3301      	adds	r3, #1
 8005340:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	f001 fa45 	bl	80067d2 <USB_GetMode>
 8005348:	4603      	mov	r3, r0
 800534a:	2b01      	cmp	r3, #1
 800534c:	d01e      	beq.n	800538c <USB_SetCurrentMode+0x84>
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2b31      	cmp	r3, #49	; 0x31
 8005352:	d9f0      	bls.n	8005336 <USB_SetCurrentMode+0x2e>
 8005354:	e01a      	b.n	800538c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005356:	78fb      	ldrb	r3, [r7, #3]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d115      	bne.n	8005388 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	68db      	ldr	r3, [r3, #12]
 8005360:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005368:	2001      	movs	r0, #1
 800536a:	f7fb feb9 	bl	80010e0 <HAL_Delay>
      ms++;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	3301      	adds	r3, #1
 8005372:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005374:	6878      	ldr	r0, [r7, #4]
 8005376:	f001 fa2c 	bl	80067d2 <USB_GetMode>
 800537a:	4603      	mov	r3, r0
 800537c:	2b00      	cmp	r3, #0
 800537e:	d005      	beq.n	800538c <USB_SetCurrentMode+0x84>
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2b31      	cmp	r3, #49	; 0x31
 8005384:	d9f0      	bls.n	8005368 <USB_SetCurrentMode+0x60>
 8005386:	e001      	b.n	800538c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005388:	2301      	movs	r3, #1
 800538a:	e005      	b.n	8005398 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2b32      	cmp	r3, #50	; 0x32
 8005390:	d101      	bne.n	8005396 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005392:	2301      	movs	r3, #1
 8005394:	e000      	b.n	8005398 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005396:	2300      	movs	r3, #0
}
 8005398:	4618      	mov	r0, r3
 800539a:	3710      	adds	r7, #16
 800539c:	46bd      	mov	sp, r7
 800539e:	bd80      	pop	{r7, pc}

080053a0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80053a0:	b084      	sub	sp, #16
 80053a2:	b580      	push	{r7, lr}
 80053a4:	b086      	sub	sp, #24
 80053a6:	af00      	add	r7, sp, #0
 80053a8:	6078      	str	r0, [r7, #4]
 80053aa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80053ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80053b2:	2300      	movs	r3, #0
 80053b4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80053ba:	2300      	movs	r3, #0
 80053bc:	613b      	str	r3, [r7, #16]
 80053be:	e009      	b.n	80053d4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80053c0:	687a      	ldr	r2, [r7, #4]
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	3340      	adds	r3, #64	; 0x40
 80053c6:	009b      	lsls	r3, r3, #2
 80053c8:	4413      	add	r3, r2
 80053ca:	2200      	movs	r2, #0
 80053cc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	3301      	adds	r3, #1
 80053d2:	613b      	str	r3, [r7, #16]
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	2b0e      	cmp	r3, #14
 80053d8:	d9f2      	bls.n	80053c0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80053da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d11c      	bne.n	800541a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	68fa      	ldr	r2, [r7, #12]
 80053ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053ee:	f043 0302 	orr.w	r3, r3, #2
 80053f2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053f8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005404:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005410:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	639a      	str	r2, [r3, #56]	; 0x38
 8005418:	e00b      	b.n	8005432 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800541e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800542a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005438:	461a      	mov	r2, r3
 800543a:	2300      	movs	r3, #0
 800543c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005444:	4619      	mov	r1, r3
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800544c:	461a      	mov	r2, r3
 800544e:	680b      	ldr	r3, [r1, #0]
 8005450:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005454:	2b01      	cmp	r3, #1
 8005456:	d10c      	bne.n	8005472 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800545a:	2b00      	cmp	r3, #0
 800545c:	d104      	bne.n	8005468 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800545e:	2100      	movs	r1, #0
 8005460:	6878      	ldr	r0, [r7, #4]
 8005462:	f000 f965 	bl	8005730 <USB_SetDevSpeed>
 8005466:	e008      	b.n	800547a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005468:	2101      	movs	r1, #1
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	f000 f960 	bl	8005730 <USB_SetDevSpeed>
 8005470:	e003      	b.n	800547a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005472:	2103      	movs	r1, #3
 8005474:	6878      	ldr	r0, [r7, #4]
 8005476:	f000 f95b 	bl	8005730 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800547a:	2110      	movs	r1, #16
 800547c:	6878      	ldr	r0, [r7, #4]
 800547e:	f000 f8f3 	bl	8005668 <USB_FlushTxFifo>
 8005482:	4603      	mov	r3, r0
 8005484:	2b00      	cmp	r3, #0
 8005486:	d001      	beq.n	800548c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005488:	2301      	movs	r3, #1
 800548a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800548c:	6878      	ldr	r0, [r7, #4]
 800548e:	f000 f91f 	bl	80056d0 <USB_FlushRxFifo>
 8005492:	4603      	mov	r3, r0
 8005494:	2b00      	cmp	r3, #0
 8005496:	d001      	beq.n	800549c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005498:	2301      	movs	r3, #1
 800549a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054a2:	461a      	mov	r2, r3
 80054a4:	2300      	movs	r3, #0
 80054a6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054ae:	461a      	mov	r2, r3
 80054b0:	2300      	movs	r3, #0
 80054b2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054ba:	461a      	mov	r2, r3
 80054bc:	2300      	movs	r3, #0
 80054be:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80054c0:	2300      	movs	r3, #0
 80054c2:	613b      	str	r3, [r7, #16]
 80054c4:	e043      	b.n	800554e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80054c6:	693b      	ldr	r3, [r7, #16]
 80054c8:	015a      	lsls	r2, r3, #5
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	4413      	add	r3, r2
 80054ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80054d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80054dc:	d118      	bne.n	8005510 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d10a      	bne.n	80054fa <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80054e4:	693b      	ldr	r3, [r7, #16]
 80054e6:	015a      	lsls	r2, r3, #5
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	4413      	add	r3, r2
 80054ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054f0:	461a      	mov	r2, r3
 80054f2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80054f6:	6013      	str	r3, [r2, #0]
 80054f8:	e013      	b.n	8005522 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	015a      	lsls	r2, r3, #5
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	4413      	add	r3, r2
 8005502:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005506:	461a      	mov	r2, r3
 8005508:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800550c:	6013      	str	r3, [r2, #0]
 800550e:	e008      	b.n	8005522 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	015a      	lsls	r2, r3, #5
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	4413      	add	r3, r2
 8005518:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800551c:	461a      	mov	r2, r3
 800551e:	2300      	movs	r3, #0
 8005520:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	015a      	lsls	r2, r3, #5
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	4413      	add	r3, r2
 800552a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800552e:	461a      	mov	r2, r3
 8005530:	2300      	movs	r3, #0
 8005532:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005534:	693b      	ldr	r3, [r7, #16]
 8005536:	015a      	lsls	r2, r3, #5
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	4413      	add	r3, r2
 800553c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005540:	461a      	mov	r2, r3
 8005542:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005546:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	3301      	adds	r3, #1
 800554c:	613b      	str	r3, [r7, #16]
 800554e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005550:	693a      	ldr	r2, [r7, #16]
 8005552:	429a      	cmp	r2, r3
 8005554:	d3b7      	bcc.n	80054c6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005556:	2300      	movs	r3, #0
 8005558:	613b      	str	r3, [r7, #16]
 800555a:	e043      	b.n	80055e4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800555c:	693b      	ldr	r3, [r7, #16]
 800555e:	015a      	lsls	r2, r3, #5
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	4413      	add	r3, r2
 8005564:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800556e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005572:	d118      	bne.n	80055a6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d10a      	bne.n	8005590 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	015a      	lsls	r2, r3, #5
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	4413      	add	r3, r2
 8005582:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005586:	461a      	mov	r2, r3
 8005588:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800558c:	6013      	str	r3, [r2, #0]
 800558e:	e013      	b.n	80055b8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	015a      	lsls	r2, r3, #5
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	4413      	add	r3, r2
 8005598:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800559c:	461a      	mov	r2, r3
 800559e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80055a2:	6013      	str	r3, [r2, #0]
 80055a4:	e008      	b.n	80055b8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	015a      	lsls	r2, r3, #5
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	4413      	add	r3, r2
 80055ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055b2:	461a      	mov	r2, r3
 80055b4:	2300      	movs	r3, #0
 80055b6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80055b8:	693b      	ldr	r3, [r7, #16]
 80055ba:	015a      	lsls	r2, r3, #5
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	4413      	add	r3, r2
 80055c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055c4:	461a      	mov	r2, r3
 80055c6:	2300      	movs	r3, #0
 80055c8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	015a      	lsls	r2, r3, #5
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	4413      	add	r3, r2
 80055d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055d6:	461a      	mov	r2, r3
 80055d8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80055dc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	3301      	adds	r3, #1
 80055e2:	613b      	str	r3, [r7, #16]
 80055e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e6:	693a      	ldr	r2, [r7, #16]
 80055e8:	429a      	cmp	r2, r3
 80055ea:	d3b7      	bcc.n	800555c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055f2:	691b      	ldr	r3, [r3, #16]
 80055f4:	68fa      	ldr	r2, [r7, #12]
 80055f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055fa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80055fe:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2200      	movs	r2, #0
 8005604:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800560c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800560e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005610:	2b00      	cmp	r3, #0
 8005612:	d105      	bne.n	8005620 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	699b      	ldr	r3, [r3, #24]
 8005618:	f043 0210 	orr.w	r2, r3, #16
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	699a      	ldr	r2, [r3, #24]
 8005624:	4b0f      	ldr	r3, [pc, #60]	; (8005664 <USB_DevInit+0x2c4>)
 8005626:	4313      	orrs	r3, r2
 8005628:	687a      	ldr	r2, [r7, #4]
 800562a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800562c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800562e:	2b00      	cmp	r3, #0
 8005630:	d005      	beq.n	800563e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	699b      	ldr	r3, [r3, #24]
 8005636:	f043 0208 	orr.w	r2, r3, #8
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800563e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005640:	2b01      	cmp	r3, #1
 8005642:	d107      	bne.n	8005654 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	699b      	ldr	r3, [r3, #24]
 8005648:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800564c:	f043 0304 	orr.w	r3, r3, #4
 8005650:	687a      	ldr	r2, [r7, #4]
 8005652:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005654:	7dfb      	ldrb	r3, [r7, #23]
}
 8005656:	4618      	mov	r0, r3
 8005658:	3718      	adds	r7, #24
 800565a:	46bd      	mov	sp, r7
 800565c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005660:	b004      	add	sp, #16
 8005662:	4770      	bx	lr
 8005664:	803c3800 	.word	0x803c3800

08005668 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005668:	b480      	push	{r7}
 800566a:	b085      	sub	sp, #20
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
 8005670:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005672:	2300      	movs	r3, #0
 8005674:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	3301      	adds	r3, #1
 800567a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	4a13      	ldr	r2, [pc, #76]	; (80056cc <USB_FlushTxFifo+0x64>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d901      	bls.n	8005688 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005684:	2303      	movs	r3, #3
 8005686:	e01b      	b.n	80056c0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	691b      	ldr	r3, [r3, #16]
 800568c:	2b00      	cmp	r3, #0
 800568e:	daf2      	bge.n	8005676 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005690:	2300      	movs	r3, #0
 8005692:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	019b      	lsls	r3, r3, #6
 8005698:	f043 0220 	orr.w	r2, r3, #32
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	3301      	adds	r3, #1
 80056a4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	4a08      	ldr	r2, [pc, #32]	; (80056cc <USB_FlushTxFifo+0x64>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d901      	bls.n	80056b2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80056ae:	2303      	movs	r3, #3
 80056b0:	e006      	b.n	80056c0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	691b      	ldr	r3, [r3, #16]
 80056b6:	f003 0320 	and.w	r3, r3, #32
 80056ba:	2b20      	cmp	r3, #32
 80056bc:	d0f0      	beq.n	80056a0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80056be:	2300      	movs	r3, #0
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	3714      	adds	r7, #20
 80056c4:	46bd      	mov	sp, r7
 80056c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ca:	4770      	bx	lr
 80056cc:	00030d40 	.word	0x00030d40

080056d0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80056d0:	b480      	push	{r7}
 80056d2:	b085      	sub	sp, #20
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80056d8:	2300      	movs	r3, #0
 80056da:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	3301      	adds	r3, #1
 80056e0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	4a11      	ldr	r2, [pc, #68]	; (800572c <USB_FlushRxFifo+0x5c>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d901      	bls.n	80056ee <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80056ea:	2303      	movs	r3, #3
 80056ec:	e018      	b.n	8005720 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	691b      	ldr	r3, [r3, #16]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	daf2      	bge.n	80056dc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80056f6:	2300      	movs	r3, #0
 80056f8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2210      	movs	r2, #16
 80056fe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	3301      	adds	r3, #1
 8005704:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	4a08      	ldr	r2, [pc, #32]	; (800572c <USB_FlushRxFifo+0x5c>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d901      	bls.n	8005712 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800570e:	2303      	movs	r3, #3
 8005710:	e006      	b.n	8005720 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	691b      	ldr	r3, [r3, #16]
 8005716:	f003 0310 	and.w	r3, r3, #16
 800571a:	2b10      	cmp	r3, #16
 800571c:	d0f0      	beq.n	8005700 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800571e:	2300      	movs	r3, #0
}
 8005720:	4618      	mov	r0, r3
 8005722:	3714      	adds	r7, #20
 8005724:	46bd      	mov	sp, r7
 8005726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572a:	4770      	bx	lr
 800572c:	00030d40 	.word	0x00030d40

08005730 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005730:	b480      	push	{r7}
 8005732:	b085      	sub	sp, #20
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
 8005738:	460b      	mov	r3, r1
 800573a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005746:	681a      	ldr	r2, [r3, #0]
 8005748:	78fb      	ldrb	r3, [r7, #3]
 800574a:	68f9      	ldr	r1, [r7, #12]
 800574c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005750:	4313      	orrs	r3, r2
 8005752:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005754:	2300      	movs	r3, #0
}
 8005756:	4618      	mov	r0, r3
 8005758:	3714      	adds	r7, #20
 800575a:	46bd      	mov	sp, r7
 800575c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005760:	4770      	bx	lr

08005762 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005762:	b480      	push	{r7}
 8005764:	b087      	sub	sp, #28
 8005766:	af00      	add	r7, sp, #0
 8005768:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005774:	689b      	ldr	r3, [r3, #8]
 8005776:	f003 0306 	and.w	r3, r3, #6
 800577a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d102      	bne.n	8005788 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005782:	2300      	movs	r3, #0
 8005784:	75fb      	strb	r3, [r7, #23]
 8005786:	e00a      	b.n	800579e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2b02      	cmp	r3, #2
 800578c:	d002      	beq.n	8005794 <USB_GetDevSpeed+0x32>
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2b06      	cmp	r3, #6
 8005792:	d102      	bne.n	800579a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005794:	2302      	movs	r3, #2
 8005796:	75fb      	strb	r3, [r7, #23]
 8005798:	e001      	b.n	800579e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800579a:	230f      	movs	r3, #15
 800579c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800579e:	7dfb      	ldrb	r3, [r7, #23]
}
 80057a0:	4618      	mov	r0, r3
 80057a2:	371c      	adds	r7, #28
 80057a4:	46bd      	mov	sp, r7
 80057a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057aa:	4770      	bx	lr

080057ac <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80057ac:	b480      	push	{r7}
 80057ae:	b085      	sub	sp, #20
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
 80057b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	781b      	ldrb	r3, [r3, #0]
 80057be:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	785b      	ldrb	r3, [r3, #1]
 80057c4:	2b01      	cmp	r3, #1
 80057c6:	d13a      	bne.n	800583e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057ce:	69da      	ldr	r2, [r3, #28]
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	781b      	ldrb	r3, [r3, #0]
 80057d4:	f003 030f 	and.w	r3, r3, #15
 80057d8:	2101      	movs	r1, #1
 80057da:	fa01 f303 	lsl.w	r3, r1, r3
 80057de:	b29b      	uxth	r3, r3
 80057e0:	68f9      	ldr	r1, [r7, #12]
 80057e2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80057e6:	4313      	orrs	r3, r2
 80057e8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	015a      	lsls	r2, r3, #5
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	4413      	add	r3, r2
 80057f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d155      	bne.n	80058ac <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	015a      	lsls	r2, r3, #5
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	4413      	add	r3, r2
 8005808:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800580c:	681a      	ldr	r2, [r3, #0]
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	68db      	ldr	r3, [r3, #12]
 8005812:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	791b      	ldrb	r3, [r3, #4]
 800581a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800581c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	059b      	lsls	r3, r3, #22
 8005822:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005824:	4313      	orrs	r3, r2
 8005826:	68ba      	ldr	r2, [r7, #8]
 8005828:	0151      	lsls	r1, r2, #5
 800582a:	68fa      	ldr	r2, [r7, #12]
 800582c:	440a      	add	r2, r1
 800582e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005832:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005836:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800583a:	6013      	str	r3, [r2, #0]
 800583c:	e036      	b.n	80058ac <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005844:	69da      	ldr	r2, [r3, #28]
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	781b      	ldrb	r3, [r3, #0]
 800584a:	f003 030f 	and.w	r3, r3, #15
 800584e:	2101      	movs	r1, #1
 8005850:	fa01 f303 	lsl.w	r3, r1, r3
 8005854:	041b      	lsls	r3, r3, #16
 8005856:	68f9      	ldr	r1, [r7, #12]
 8005858:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800585c:	4313      	orrs	r3, r2
 800585e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	015a      	lsls	r2, r3, #5
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	4413      	add	r3, r2
 8005868:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005872:	2b00      	cmp	r3, #0
 8005874:	d11a      	bne.n	80058ac <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	015a      	lsls	r2, r3, #5
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	4413      	add	r3, r2
 800587e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005882:	681a      	ldr	r2, [r3, #0]
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	68db      	ldr	r3, [r3, #12]
 8005888:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	791b      	ldrb	r3, [r3, #4]
 8005890:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005892:	430b      	orrs	r3, r1
 8005894:	4313      	orrs	r3, r2
 8005896:	68ba      	ldr	r2, [r7, #8]
 8005898:	0151      	lsls	r1, r2, #5
 800589a:	68fa      	ldr	r2, [r7, #12]
 800589c:	440a      	add	r2, r1
 800589e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058aa:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80058ac:	2300      	movs	r3, #0
}
 80058ae:	4618      	mov	r0, r3
 80058b0:	3714      	adds	r7, #20
 80058b2:	46bd      	mov	sp, r7
 80058b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b8:	4770      	bx	lr
	...

080058bc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80058bc:	b480      	push	{r7}
 80058be:	b085      	sub	sp, #20
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
 80058c4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	781b      	ldrb	r3, [r3, #0]
 80058ce:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	785b      	ldrb	r3, [r3, #1]
 80058d4:	2b01      	cmp	r3, #1
 80058d6:	d161      	bne.n	800599c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	015a      	lsls	r2, r3, #5
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	4413      	add	r3, r2
 80058e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80058ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80058ee:	d11f      	bne.n	8005930 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	015a      	lsls	r2, r3, #5
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	4413      	add	r3, r2
 80058f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	68ba      	ldr	r2, [r7, #8]
 8005900:	0151      	lsls	r1, r2, #5
 8005902:	68fa      	ldr	r2, [r7, #12]
 8005904:	440a      	add	r2, r1
 8005906:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800590a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800590e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	015a      	lsls	r2, r3, #5
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	4413      	add	r3, r2
 8005918:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	68ba      	ldr	r2, [r7, #8]
 8005920:	0151      	lsls	r1, r2, #5
 8005922:	68fa      	ldr	r2, [r7, #12]
 8005924:	440a      	add	r2, r1
 8005926:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800592a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800592e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005936:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	781b      	ldrb	r3, [r3, #0]
 800593c:	f003 030f 	and.w	r3, r3, #15
 8005940:	2101      	movs	r1, #1
 8005942:	fa01 f303 	lsl.w	r3, r1, r3
 8005946:	b29b      	uxth	r3, r3
 8005948:	43db      	mvns	r3, r3
 800594a:	68f9      	ldr	r1, [r7, #12]
 800594c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005950:	4013      	ands	r3, r2
 8005952:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800595a:	69da      	ldr	r2, [r3, #28]
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	781b      	ldrb	r3, [r3, #0]
 8005960:	f003 030f 	and.w	r3, r3, #15
 8005964:	2101      	movs	r1, #1
 8005966:	fa01 f303 	lsl.w	r3, r1, r3
 800596a:	b29b      	uxth	r3, r3
 800596c:	43db      	mvns	r3, r3
 800596e:	68f9      	ldr	r1, [r7, #12]
 8005970:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005974:	4013      	ands	r3, r2
 8005976:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	015a      	lsls	r2, r3, #5
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	4413      	add	r3, r2
 8005980:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005984:	681a      	ldr	r2, [r3, #0]
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	0159      	lsls	r1, r3, #5
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	440b      	add	r3, r1
 800598e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005992:	4619      	mov	r1, r3
 8005994:	4b35      	ldr	r3, [pc, #212]	; (8005a6c <USB_DeactivateEndpoint+0x1b0>)
 8005996:	4013      	ands	r3, r2
 8005998:	600b      	str	r3, [r1, #0]
 800599a:	e060      	b.n	8005a5e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	015a      	lsls	r2, r3, #5
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	4413      	add	r3, r2
 80059a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80059ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80059b2:	d11f      	bne.n	80059f4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	015a      	lsls	r2, r3, #5
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	4413      	add	r3, r2
 80059bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	68ba      	ldr	r2, [r7, #8]
 80059c4:	0151      	lsls	r1, r2, #5
 80059c6:	68fa      	ldr	r2, [r7, #12]
 80059c8:	440a      	add	r2, r1
 80059ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059ce:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80059d2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	015a      	lsls	r2, r3, #5
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	4413      	add	r3, r2
 80059dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	68ba      	ldr	r2, [r7, #8]
 80059e4:	0151      	lsls	r1, r2, #5
 80059e6:	68fa      	ldr	r2, [r7, #12]
 80059e8:	440a      	add	r2, r1
 80059ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059ee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80059f2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	781b      	ldrb	r3, [r3, #0]
 8005a00:	f003 030f 	and.w	r3, r3, #15
 8005a04:	2101      	movs	r1, #1
 8005a06:	fa01 f303 	lsl.w	r3, r1, r3
 8005a0a:	041b      	lsls	r3, r3, #16
 8005a0c:	43db      	mvns	r3, r3
 8005a0e:	68f9      	ldr	r1, [r7, #12]
 8005a10:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a14:	4013      	ands	r3, r2
 8005a16:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a1e:	69da      	ldr	r2, [r3, #28]
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	781b      	ldrb	r3, [r3, #0]
 8005a24:	f003 030f 	and.w	r3, r3, #15
 8005a28:	2101      	movs	r1, #1
 8005a2a:	fa01 f303 	lsl.w	r3, r1, r3
 8005a2e:	041b      	lsls	r3, r3, #16
 8005a30:	43db      	mvns	r3, r3
 8005a32:	68f9      	ldr	r1, [r7, #12]
 8005a34:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a38:	4013      	ands	r3, r2
 8005a3a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	015a      	lsls	r2, r3, #5
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	4413      	add	r3, r2
 8005a44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a48:	681a      	ldr	r2, [r3, #0]
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	0159      	lsls	r1, r3, #5
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	440b      	add	r3, r1
 8005a52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a56:	4619      	mov	r1, r3
 8005a58:	4b05      	ldr	r3, [pc, #20]	; (8005a70 <USB_DeactivateEndpoint+0x1b4>)
 8005a5a:	4013      	ands	r3, r2
 8005a5c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005a5e:	2300      	movs	r3, #0
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	3714      	adds	r7, #20
 8005a64:	46bd      	mov	sp, r7
 8005a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6a:	4770      	bx	lr
 8005a6c:	ec337800 	.word	0xec337800
 8005a70:	eff37800 	.word	0xeff37800

08005a74 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b08a      	sub	sp, #40	; 0x28
 8005a78:	af02      	add	r7, sp, #8
 8005a7a:	60f8      	str	r0, [r7, #12]
 8005a7c:	60b9      	str	r1, [r7, #8]
 8005a7e:	4613      	mov	r3, r2
 8005a80:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	781b      	ldrb	r3, [r3, #0]
 8005a8a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	785b      	ldrb	r3, [r3, #1]
 8005a90:	2b01      	cmp	r3, #1
 8005a92:	f040 815c 	bne.w	8005d4e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	699b      	ldr	r3, [r3, #24]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d132      	bne.n	8005b04 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005a9e:	69bb      	ldr	r3, [r7, #24]
 8005aa0:	015a      	lsls	r2, r3, #5
 8005aa2:	69fb      	ldr	r3, [r7, #28]
 8005aa4:	4413      	add	r3, r2
 8005aa6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005aaa:	691b      	ldr	r3, [r3, #16]
 8005aac:	69ba      	ldr	r2, [r7, #24]
 8005aae:	0151      	lsls	r1, r2, #5
 8005ab0:	69fa      	ldr	r2, [r7, #28]
 8005ab2:	440a      	add	r2, r1
 8005ab4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ab8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005abc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005ac0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005ac2:	69bb      	ldr	r3, [r7, #24]
 8005ac4:	015a      	lsls	r2, r3, #5
 8005ac6:	69fb      	ldr	r3, [r7, #28]
 8005ac8:	4413      	add	r3, r2
 8005aca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ace:	691b      	ldr	r3, [r3, #16]
 8005ad0:	69ba      	ldr	r2, [r7, #24]
 8005ad2:	0151      	lsls	r1, r2, #5
 8005ad4:	69fa      	ldr	r2, [r7, #28]
 8005ad6:	440a      	add	r2, r1
 8005ad8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005adc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005ae0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005ae2:	69bb      	ldr	r3, [r7, #24]
 8005ae4:	015a      	lsls	r2, r3, #5
 8005ae6:	69fb      	ldr	r3, [r7, #28]
 8005ae8:	4413      	add	r3, r2
 8005aea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005aee:	691b      	ldr	r3, [r3, #16]
 8005af0:	69ba      	ldr	r2, [r7, #24]
 8005af2:	0151      	lsls	r1, r2, #5
 8005af4:	69fa      	ldr	r2, [r7, #28]
 8005af6:	440a      	add	r2, r1
 8005af8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005afc:	0cdb      	lsrs	r3, r3, #19
 8005afe:	04db      	lsls	r3, r3, #19
 8005b00:	6113      	str	r3, [r2, #16]
 8005b02:	e074      	b.n	8005bee <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005b04:	69bb      	ldr	r3, [r7, #24]
 8005b06:	015a      	lsls	r2, r3, #5
 8005b08:	69fb      	ldr	r3, [r7, #28]
 8005b0a:	4413      	add	r3, r2
 8005b0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b10:	691b      	ldr	r3, [r3, #16]
 8005b12:	69ba      	ldr	r2, [r7, #24]
 8005b14:	0151      	lsls	r1, r2, #5
 8005b16:	69fa      	ldr	r2, [r7, #28]
 8005b18:	440a      	add	r2, r1
 8005b1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b1e:	0cdb      	lsrs	r3, r3, #19
 8005b20:	04db      	lsls	r3, r3, #19
 8005b22:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005b24:	69bb      	ldr	r3, [r7, #24]
 8005b26:	015a      	lsls	r2, r3, #5
 8005b28:	69fb      	ldr	r3, [r7, #28]
 8005b2a:	4413      	add	r3, r2
 8005b2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b30:	691b      	ldr	r3, [r3, #16]
 8005b32:	69ba      	ldr	r2, [r7, #24]
 8005b34:	0151      	lsls	r1, r2, #5
 8005b36:	69fa      	ldr	r2, [r7, #28]
 8005b38:	440a      	add	r2, r1
 8005b3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b3e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005b42:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005b46:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005b48:	69bb      	ldr	r3, [r7, #24]
 8005b4a:	015a      	lsls	r2, r3, #5
 8005b4c:	69fb      	ldr	r3, [r7, #28]
 8005b4e:	4413      	add	r3, r2
 8005b50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b54:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	6999      	ldr	r1, [r3, #24]
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	68db      	ldr	r3, [r3, #12]
 8005b5e:	440b      	add	r3, r1
 8005b60:	1e59      	subs	r1, r3, #1
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	68db      	ldr	r3, [r3, #12]
 8005b66:	fbb1 f3f3 	udiv	r3, r1, r3
 8005b6a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005b6c:	4b9d      	ldr	r3, [pc, #628]	; (8005de4 <USB_EPStartXfer+0x370>)
 8005b6e:	400b      	ands	r3, r1
 8005b70:	69b9      	ldr	r1, [r7, #24]
 8005b72:	0148      	lsls	r0, r1, #5
 8005b74:	69f9      	ldr	r1, [r7, #28]
 8005b76:	4401      	add	r1, r0
 8005b78:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005b80:	69bb      	ldr	r3, [r7, #24]
 8005b82:	015a      	lsls	r2, r3, #5
 8005b84:	69fb      	ldr	r3, [r7, #28]
 8005b86:	4413      	add	r3, r2
 8005b88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b8c:	691a      	ldr	r2, [r3, #16]
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	699b      	ldr	r3, [r3, #24]
 8005b92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b96:	69b9      	ldr	r1, [r7, #24]
 8005b98:	0148      	lsls	r0, r1, #5
 8005b9a:	69f9      	ldr	r1, [r7, #28]
 8005b9c:	4401      	add	r1, r0
 8005b9e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	791b      	ldrb	r3, [r3, #4]
 8005baa:	2b01      	cmp	r3, #1
 8005bac:	d11f      	bne.n	8005bee <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005bae:	69bb      	ldr	r3, [r7, #24]
 8005bb0:	015a      	lsls	r2, r3, #5
 8005bb2:	69fb      	ldr	r3, [r7, #28]
 8005bb4:	4413      	add	r3, r2
 8005bb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bba:	691b      	ldr	r3, [r3, #16]
 8005bbc:	69ba      	ldr	r2, [r7, #24]
 8005bbe:	0151      	lsls	r1, r2, #5
 8005bc0:	69fa      	ldr	r2, [r7, #28]
 8005bc2:	440a      	add	r2, r1
 8005bc4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bc8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005bcc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005bce:	69bb      	ldr	r3, [r7, #24]
 8005bd0:	015a      	lsls	r2, r3, #5
 8005bd2:	69fb      	ldr	r3, [r7, #28]
 8005bd4:	4413      	add	r3, r2
 8005bd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bda:	691b      	ldr	r3, [r3, #16]
 8005bdc:	69ba      	ldr	r2, [r7, #24]
 8005bde:	0151      	lsls	r1, r2, #5
 8005be0:	69fa      	ldr	r2, [r7, #28]
 8005be2:	440a      	add	r2, r1
 8005be4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005be8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005bec:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005bee:	79fb      	ldrb	r3, [r7, #7]
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	d14b      	bne.n	8005c8c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	695b      	ldr	r3, [r3, #20]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d009      	beq.n	8005c10 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005bfc:	69bb      	ldr	r3, [r7, #24]
 8005bfe:	015a      	lsls	r2, r3, #5
 8005c00:	69fb      	ldr	r3, [r7, #28]
 8005c02:	4413      	add	r3, r2
 8005c04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c08:	461a      	mov	r2, r3
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	695b      	ldr	r3, [r3, #20]
 8005c0e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	791b      	ldrb	r3, [r3, #4]
 8005c14:	2b01      	cmp	r3, #1
 8005c16:	d128      	bne.n	8005c6a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005c18:	69fb      	ldr	r3, [r7, #28]
 8005c1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c1e:	689b      	ldr	r3, [r3, #8]
 8005c20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d110      	bne.n	8005c4a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005c28:	69bb      	ldr	r3, [r7, #24]
 8005c2a:	015a      	lsls	r2, r3, #5
 8005c2c:	69fb      	ldr	r3, [r7, #28]
 8005c2e:	4413      	add	r3, r2
 8005c30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	69ba      	ldr	r2, [r7, #24]
 8005c38:	0151      	lsls	r1, r2, #5
 8005c3a:	69fa      	ldr	r2, [r7, #28]
 8005c3c:	440a      	add	r2, r1
 8005c3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c42:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005c46:	6013      	str	r3, [r2, #0]
 8005c48:	e00f      	b.n	8005c6a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005c4a:	69bb      	ldr	r3, [r7, #24]
 8005c4c:	015a      	lsls	r2, r3, #5
 8005c4e:	69fb      	ldr	r3, [r7, #28]
 8005c50:	4413      	add	r3, r2
 8005c52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	69ba      	ldr	r2, [r7, #24]
 8005c5a:	0151      	lsls	r1, r2, #5
 8005c5c:	69fa      	ldr	r2, [r7, #28]
 8005c5e:	440a      	add	r2, r1
 8005c60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c68:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005c6a:	69bb      	ldr	r3, [r7, #24]
 8005c6c:	015a      	lsls	r2, r3, #5
 8005c6e:	69fb      	ldr	r3, [r7, #28]
 8005c70:	4413      	add	r3, r2
 8005c72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	69ba      	ldr	r2, [r7, #24]
 8005c7a:	0151      	lsls	r1, r2, #5
 8005c7c:	69fa      	ldr	r2, [r7, #28]
 8005c7e:	440a      	add	r2, r1
 8005c80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c84:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005c88:	6013      	str	r3, [r2, #0]
 8005c8a:	e133      	b.n	8005ef4 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005c8c:	69bb      	ldr	r3, [r7, #24]
 8005c8e:	015a      	lsls	r2, r3, #5
 8005c90:	69fb      	ldr	r3, [r7, #28]
 8005c92:	4413      	add	r3, r2
 8005c94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	69ba      	ldr	r2, [r7, #24]
 8005c9c:	0151      	lsls	r1, r2, #5
 8005c9e:	69fa      	ldr	r2, [r7, #28]
 8005ca0:	440a      	add	r2, r1
 8005ca2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ca6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005caa:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	791b      	ldrb	r3, [r3, #4]
 8005cb0:	2b01      	cmp	r3, #1
 8005cb2:	d015      	beq.n	8005ce0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	699b      	ldr	r3, [r3, #24]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	f000 811b 	beq.w	8005ef4 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005cbe:	69fb      	ldr	r3, [r7, #28]
 8005cc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cc4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	781b      	ldrb	r3, [r3, #0]
 8005cca:	f003 030f 	and.w	r3, r3, #15
 8005cce:	2101      	movs	r1, #1
 8005cd0:	fa01 f303 	lsl.w	r3, r1, r3
 8005cd4:	69f9      	ldr	r1, [r7, #28]
 8005cd6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	634b      	str	r3, [r1, #52]	; 0x34
 8005cde:	e109      	b.n	8005ef4 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005ce0:	69fb      	ldr	r3, [r7, #28]
 8005ce2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ce6:	689b      	ldr	r3, [r3, #8]
 8005ce8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d110      	bne.n	8005d12 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005cf0:	69bb      	ldr	r3, [r7, #24]
 8005cf2:	015a      	lsls	r2, r3, #5
 8005cf4:	69fb      	ldr	r3, [r7, #28]
 8005cf6:	4413      	add	r3, r2
 8005cf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	69ba      	ldr	r2, [r7, #24]
 8005d00:	0151      	lsls	r1, r2, #5
 8005d02:	69fa      	ldr	r2, [r7, #28]
 8005d04:	440a      	add	r2, r1
 8005d06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d0a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005d0e:	6013      	str	r3, [r2, #0]
 8005d10:	e00f      	b.n	8005d32 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005d12:	69bb      	ldr	r3, [r7, #24]
 8005d14:	015a      	lsls	r2, r3, #5
 8005d16:	69fb      	ldr	r3, [r7, #28]
 8005d18:	4413      	add	r3, r2
 8005d1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	69ba      	ldr	r2, [r7, #24]
 8005d22:	0151      	lsls	r1, r2, #5
 8005d24:	69fa      	ldr	r2, [r7, #28]
 8005d26:	440a      	add	r2, r1
 8005d28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d30:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	6919      	ldr	r1, [r3, #16]
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	781a      	ldrb	r2, [r3, #0]
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	699b      	ldr	r3, [r3, #24]
 8005d3e:	b298      	uxth	r0, r3
 8005d40:	79fb      	ldrb	r3, [r7, #7]
 8005d42:	9300      	str	r3, [sp, #0]
 8005d44:	4603      	mov	r3, r0
 8005d46:	68f8      	ldr	r0, [r7, #12]
 8005d48:	f000 fade 	bl	8006308 <USB_WritePacket>
 8005d4c:	e0d2      	b.n	8005ef4 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005d4e:	69bb      	ldr	r3, [r7, #24]
 8005d50:	015a      	lsls	r2, r3, #5
 8005d52:	69fb      	ldr	r3, [r7, #28]
 8005d54:	4413      	add	r3, r2
 8005d56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d5a:	691b      	ldr	r3, [r3, #16]
 8005d5c:	69ba      	ldr	r2, [r7, #24]
 8005d5e:	0151      	lsls	r1, r2, #5
 8005d60:	69fa      	ldr	r2, [r7, #28]
 8005d62:	440a      	add	r2, r1
 8005d64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d68:	0cdb      	lsrs	r3, r3, #19
 8005d6a:	04db      	lsls	r3, r3, #19
 8005d6c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005d6e:	69bb      	ldr	r3, [r7, #24]
 8005d70:	015a      	lsls	r2, r3, #5
 8005d72:	69fb      	ldr	r3, [r7, #28]
 8005d74:	4413      	add	r3, r2
 8005d76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d7a:	691b      	ldr	r3, [r3, #16]
 8005d7c:	69ba      	ldr	r2, [r7, #24]
 8005d7e:	0151      	lsls	r1, r2, #5
 8005d80:	69fa      	ldr	r2, [r7, #28]
 8005d82:	440a      	add	r2, r1
 8005d84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d88:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005d8c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005d90:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	699b      	ldr	r3, [r3, #24]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d126      	bne.n	8005de8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005d9a:	69bb      	ldr	r3, [r7, #24]
 8005d9c:	015a      	lsls	r2, r3, #5
 8005d9e:	69fb      	ldr	r3, [r7, #28]
 8005da0:	4413      	add	r3, r2
 8005da2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005da6:	691a      	ldr	r2, [r3, #16]
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	68db      	ldr	r3, [r3, #12]
 8005dac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005db0:	69b9      	ldr	r1, [r7, #24]
 8005db2:	0148      	lsls	r0, r1, #5
 8005db4:	69f9      	ldr	r1, [r7, #28]
 8005db6:	4401      	add	r1, r0
 8005db8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005dbc:	4313      	orrs	r3, r2
 8005dbe:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005dc0:	69bb      	ldr	r3, [r7, #24]
 8005dc2:	015a      	lsls	r2, r3, #5
 8005dc4:	69fb      	ldr	r3, [r7, #28]
 8005dc6:	4413      	add	r3, r2
 8005dc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dcc:	691b      	ldr	r3, [r3, #16]
 8005dce:	69ba      	ldr	r2, [r7, #24]
 8005dd0:	0151      	lsls	r1, r2, #5
 8005dd2:	69fa      	ldr	r2, [r7, #28]
 8005dd4:	440a      	add	r2, r1
 8005dd6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005dda:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005dde:	6113      	str	r3, [r2, #16]
 8005de0:	e03a      	b.n	8005e58 <USB_EPStartXfer+0x3e4>
 8005de2:	bf00      	nop
 8005de4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	699a      	ldr	r2, [r3, #24]
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	68db      	ldr	r3, [r3, #12]
 8005df0:	4413      	add	r3, r2
 8005df2:	1e5a      	subs	r2, r3, #1
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	68db      	ldr	r3, [r3, #12]
 8005df8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dfc:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	68db      	ldr	r3, [r3, #12]
 8005e02:	8afa      	ldrh	r2, [r7, #22]
 8005e04:	fb03 f202 	mul.w	r2, r3, r2
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005e0c:	69bb      	ldr	r3, [r7, #24]
 8005e0e:	015a      	lsls	r2, r3, #5
 8005e10:	69fb      	ldr	r3, [r7, #28]
 8005e12:	4413      	add	r3, r2
 8005e14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e18:	691a      	ldr	r2, [r3, #16]
 8005e1a:	8afb      	ldrh	r3, [r7, #22]
 8005e1c:	04d9      	lsls	r1, r3, #19
 8005e1e:	4b38      	ldr	r3, [pc, #224]	; (8005f00 <USB_EPStartXfer+0x48c>)
 8005e20:	400b      	ands	r3, r1
 8005e22:	69b9      	ldr	r1, [r7, #24]
 8005e24:	0148      	lsls	r0, r1, #5
 8005e26:	69f9      	ldr	r1, [r7, #28]
 8005e28:	4401      	add	r1, r0
 8005e2a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005e32:	69bb      	ldr	r3, [r7, #24]
 8005e34:	015a      	lsls	r2, r3, #5
 8005e36:	69fb      	ldr	r3, [r7, #28]
 8005e38:	4413      	add	r3, r2
 8005e3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e3e:	691a      	ldr	r2, [r3, #16]
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	69db      	ldr	r3, [r3, #28]
 8005e44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e48:	69b9      	ldr	r1, [r7, #24]
 8005e4a:	0148      	lsls	r0, r1, #5
 8005e4c:	69f9      	ldr	r1, [r7, #28]
 8005e4e:	4401      	add	r1, r0
 8005e50:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005e54:	4313      	orrs	r3, r2
 8005e56:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005e58:	79fb      	ldrb	r3, [r7, #7]
 8005e5a:	2b01      	cmp	r3, #1
 8005e5c:	d10d      	bne.n	8005e7a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	691b      	ldr	r3, [r3, #16]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d009      	beq.n	8005e7a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	6919      	ldr	r1, [r3, #16]
 8005e6a:	69bb      	ldr	r3, [r7, #24]
 8005e6c:	015a      	lsls	r2, r3, #5
 8005e6e:	69fb      	ldr	r3, [r7, #28]
 8005e70:	4413      	add	r3, r2
 8005e72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e76:	460a      	mov	r2, r1
 8005e78:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	791b      	ldrb	r3, [r3, #4]
 8005e7e:	2b01      	cmp	r3, #1
 8005e80:	d128      	bne.n	8005ed4 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005e82:	69fb      	ldr	r3, [r7, #28]
 8005e84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e88:	689b      	ldr	r3, [r3, #8]
 8005e8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d110      	bne.n	8005eb4 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005e92:	69bb      	ldr	r3, [r7, #24]
 8005e94:	015a      	lsls	r2, r3, #5
 8005e96:	69fb      	ldr	r3, [r7, #28]
 8005e98:	4413      	add	r3, r2
 8005e9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	69ba      	ldr	r2, [r7, #24]
 8005ea2:	0151      	lsls	r1, r2, #5
 8005ea4:	69fa      	ldr	r2, [r7, #28]
 8005ea6:	440a      	add	r2, r1
 8005ea8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005eac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005eb0:	6013      	str	r3, [r2, #0]
 8005eb2:	e00f      	b.n	8005ed4 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005eb4:	69bb      	ldr	r3, [r7, #24]
 8005eb6:	015a      	lsls	r2, r3, #5
 8005eb8:	69fb      	ldr	r3, [r7, #28]
 8005eba:	4413      	add	r3, r2
 8005ebc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	69ba      	ldr	r2, [r7, #24]
 8005ec4:	0151      	lsls	r1, r2, #5
 8005ec6:	69fa      	ldr	r2, [r7, #28]
 8005ec8:	440a      	add	r2, r1
 8005eca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ece:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ed2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005ed4:	69bb      	ldr	r3, [r7, #24]
 8005ed6:	015a      	lsls	r2, r3, #5
 8005ed8:	69fb      	ldr	r3, [r7, #28]
 8005eda:	4413      	add	r3, r2
 8005edc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	69ba      	ldr	r2, [r7, #24]
 8005ee4:	0151      	lsls	r1, r2, #5
 8005ee6:	69fa      	ldr	r2, [r7, #28]
 8005ee8:	440a      	add	r2, r1
 8005eea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005eee:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005ef2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005ef4:	2300      	movs	r3, #0
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	3720      	adds	r7, #32
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}
 8005efe:	bf00      	nop
 8005f00:	1ff80000 	.word	0x1ff80000

08005f04 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005f04:	b480      	push	{r7}
 8005f06:	b087      	sub	sp, #28
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	60f8      	str	r0, [r7, #12]
 8005f0c:	60b9      	str	r1, [r7, #8]
 8005f0e:	4613      	mov	r3, r2
 8005f10:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	781b      	ldrb	r3, [r3, #0]
 8005f1a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	785b      	ldrb	r3, [r3, #1]
 8005f20:	2b01      	cmp	r3, #1
 8005f22:	f040 80ce 	bne.w	80060c2 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	699b      	ldr	r3, [r3, #24]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d132      	bne.n	8005f94 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	015a      	lsls	r2, r3, #5
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	4413      	add	r3, r2
 8005f36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f3a:	691b      	ldr	r3, [r3, #16]
 8005f3c:	693a      	ldr	r2, [r7, #16]
 8005f3e:	0151      	lsls	r1, r2, #5
 8005f40:	697a      	ldr	r2, [r7, #20]
 8005f42:	440a      	add	r2, r1
 8005f44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f48:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005f4c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005f50:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005f52:	693b      	ldr	r3, [r7, #16]
 8005f54:	015a      	lsls	r2, r3, #5
 8005f56:	697b      	ldr	r3, [r7, #20]
 8005f58:	4413      	add	r3, r2
 8005f5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f5e:	691b      	ldr	r3, [r3, #16]
 8005f60:	693a      	ldr	r2, [r7, #16]
 8005f62:	0151      	lsls	r1, r2, #5
 8005f64:	697a      	ldr	r2, [r7, #20]
 8005f66:	440a      	add	r2, r1
 8005f68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f6c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005f70:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005f72:	693b      	ldr	r3, [r7, #16]
 8005f74:	015a      	lsls	r2, r3, #5
 8005f76:	697b      	ldr	r3, [r7, #20]
 8005f78:	4413      	add	r3, r2
 8005f7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f7e:	691b      	ldr	r3, [r3, #16]
 8005f80:	693a      	ldr	r2, [r7, #16]
 8005f82:	0151      	lsls	r1, r2, #5
 8005f84:	697a      	ldr	r2, [r7, #20]
 8005f86:	440a      	add	r2, r1
 8005f88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f8c:	0cdb      	lsrs	r3, r3, #19
 8005f8e:	04db      	lsls	r3, r3, #19
 8005f90:	6113      	str	r3, [r2, #16]
 8005f92:	e04e      	b.n	8006032 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005f94:	693b      	ldr	r3, [r7, #16]
 8005f96:	015a      	lsls	r2, r3, #5
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	4413      	add	r3, r2
 8005f9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fa0:	691b      	ldr	r3, [r3, #16]
 8005fa2:	693a      	ldr	r2, [r7, #16]
 8005fa4:	0151      	lsls	r1, r2, #5
 8005fa6:	697a      	ldr	r2, [r7, #20]
 8005fa8:	440a      	add	r2, r1
 8005faa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fae:	0cdb      	lsrs	r3, r3, #19
 8005fb0:	04db      	lsls	r3, r3, #19
 8005fb2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005fb4:	693b      	ldr	r3, [r7, #16]
 8005fb6:	015a      	lsls	r2, r3, #5
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	4413      	add	r3, r2
 8005fbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fc0:	691b      	ldr	r3, [r3, #16]
 8005fc2:	693a      	ldr	r2, [r7, #16]
 8005fc4:	0151      	lsls	r1, r2, #5
 8005fc6:	697a      	ldr	r2, [r7, #20]
 8005fc8:	440a      	add	r2, r1
 8005fca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fce:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005fd2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005fd6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	699a      	ldr	r2, [r3, #24]
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	68db      	ldr	r3, [r3, #12]
 8005fe0:	429a      	cmp	r2, r3
 8005fe2:	d903      	bls.n	8005fec <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	68da      	ldr	r2, [r3, #12]
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005fec:	693b      	ldr	r3, [r7, #16]
 8005fee:	015a      	lsls	r2, r3, #5
 8005ff0:	697b      	ldr	r3, [r7, #20]
 8005ff2:	4413      	add	r3, r2
 8005ff4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ff8:	691b      	ldr	r3, [r3, #16]
 8005ffa:	693a      	ldr	r2, [r7, #16]
 8005ffc:	0151      	lsls	r1, r2, #5
 8005ffe:	697a      	ldr	r2, [r7, #20]
 8006000:	440a      	add	r2, r1
 8006002:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006006:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800600a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800600c:	693b      	ldr	r3, [r7, #16]
 800600e:	015a      	lsls	r2, r3, #5
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	4413      	add	r3, r2
 8006014:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006018:	691a      	ldr	r2, [r3, #16]
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	699b      	ldr	r3, [r3, #24]
 800601e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006022:	6939      	ldr	r1, [r7, #16]
 8006024:	0148      	lsls	r0, r1, #5
 8006026:	6979      	ldr	r1, [r7, #20]
 8006028:	4401      	add	r1, r0
 800602a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800602e:	4313      	orrs	r3, r2
 8006030:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006032:	79fb      	ldrb	r3, [r7, #7]
 8006034:	2b01      	cmp	r3, #1
 8006036:	d11e      	bne.n	8006076 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	695b      	ldr	r3, [r3, #20]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d009      	beq.n	8006054 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006040:	693b      	ldr	r3, [r7, #16]
 8006042:	015a      	lsls	r2, r3, #5
 8006044:	697b      	ldr	r3, [r7, #20]
 8006046:	4413      	add	r3, r2
 8006048:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800604c:	461a      	mov	r2, r3
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	695b      	ldr	r3, [r3, #20]
 8006052:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006054:	693b      	ldr	r3, [r7, #16]
 8006056:	015a      	lsls	r2, r3, #5
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	4413      	add	r3, r2
 800605c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	693a      	ldr	r2, [r7, #16]
 8006064:	0151      	lsls	r1, r2, #5
 8006066:	697a      	ldr	r2, [r7, #20]
 8006068:	440a      	add	r2, r1
 800606a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800606e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006072:	6013      	str	r3, [r2, #0]
 8006074:	e097      	b.n	80061a6 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	015a      	lsls	r2, r3, #5
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	4413      	add	r3, r2
 800607e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	693a      	ldr	r2, [r7, #16]
 8006086:	0151      	lsls	r1, r2, #5
 8006088:	697a      	ldr	r2, [r7, #20]
 800608a:	440a      	add	r2, r1
 800608c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006090:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006094:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	699b      	ldr	r3, [r3, #24]
 800609a:	2b00      	cmp	r3, #0
 800609c:	f000 8083 	beq.w	80061a6 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80060a0:	697b      	ldr	r3, [r7, #20]
 80060a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	781b      	ldrb	r3, [r3, #0]
 80060ac:	f003 030f 	and.w	r3, r3, #15
 80060b0:	2101      	movs	r1, #1
 80060b2:	fa01 f303 	lsl.w	r3, r1, r3
 80060b6:	6979      	ldr	r1, [r7, #20]
 80060b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80060bc:	4313      	orrs	r3, r2
 80060be:	634b      	str	r3, [r1, #52]	; 0x34
 80060c0:	e071      	b.n	80061a6 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	015a      	lsls	r2, r3, #5
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	4413      	add	r3, r2
 80060ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060ce:	691b      	ldr	r3, [r3, #16]
 80060d0:	693a      	ldr	r2, [r7, #16]
 80060d2:	0151      	lsls	r1, r2, #5
 80060d4:	697a      	ldr	r2, [r7, #20]
 80060d6:	440a      	add	r2, r1
 80060d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060dc:	0cdb      	lsrs	r3, r3, #19
 80060de:	04db      	lsls	r3, r3, #19
 80060e0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80060e2:	693b      	ldr	r3, [r7, #16]
 80060e4:	015a      	lsls	r2, r3, #5
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	4413      	add	r3, r2
 80060ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060ee:	691b      	ldr	r3, [r3, #16]
 80060f0:	693a      	ldr	r2, [r7, #16]
 80060f2:	0151      	lsls	r1, r2, #5
 80060f4:	697a      	ldr	r2, [r7, #20]
 80060f6:	440a      	add	r2, r1
 80060f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060fc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006100:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006104:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	699b      	ldr	r3, [r3, #24]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d003      	beq.n	8006116 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	68da      	ldr	r2, [r3, #12]
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	68da      	ldr	r2, [r3, #12]
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800611e:	693b      	ldr	r3, [r7, #16]
 8006120:	015a      	lsls	r2, r3, #5
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	4413      	add	r3, r2
 8006126:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800612a:	691b      	ldr	r3, [r3, #16]
 800612c:	693a      	ldr	r2, [r7, #16]
 800612e:	0151      	lsls	r1, r2, #5
 8006130:	697a      	ldr	r2, [r7, #20]
 8006132:	440a      	add	r2, r1
 8006134:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006138:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800613c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	015a      	lsls	r2, r3, #5
 8006142:	697b      	ldr	r3, [r7, #20]
 8006144:	4413      	add	r3, r2
 8006146:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800614a:	691a      	ldr	r2, [r3, #16]
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	69db      	ldr	r3, [r3, #28]
 8006150:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006154:	6939      	ldr	r1, [r7, #16]
 8006156:	0148      	lsls	r0, r1, #5
 8006158:	6979      	ldr	r1, [r7, #20]
 800615a:	4401      	add	r1, r0
 800615c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006160:	4313      	orrs	r3, r2
 8006162:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006164:	79fb      	ldrb	r3, [r7, #7]
 8006166:	2b01      	cmp	r3, #1
 8006168:	d10d      	bne.n	8006186 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	691b      	ldr	r3, [r3, #16]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d009      	beq.n	8006186 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	6919      	ldr	r1, [r3, #16]
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	015a      	lsls	r2, r3, #5
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	4413      	add	r3, r2
 800617e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006182:	460a      	mov	r2, r1
 8006184:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006186:	693b      	ldr	r3, [r7, #16]
 8006188:	015a      	lsls	r2, r3, #5
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	4413      	add	r3, r2
 800618e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	693a      	ldr	r2, [r7, #16]
 8006196:	0151      	lsls	r1, r2, #5
 8006198:	697a      	ldr	r2, [r7, #20]
 800619a:	440a      	add	r2, r1
 800619c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061a0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80061a4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80061a6:	2300      	movs	r3, #0
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	371c      	adds	r7, #28
 80061ac:	46bd      	mov	sp, r7
 80061ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b2:	4770      	bx	lr

080061b4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80061b4:	b480      	push	{r7}
 80061b6:	b087      	sub	sp, #28
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
 80061bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80061be:	2300      	movs	r3, #0
 80061c0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80061c2:	2300      	movs	r3, #0
 80061c4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	785b      	ldrb	r3, [r3, #1]
 80061ce:	2b01      	cmp	r3, #1
 80061d0:	d14a      	bne.n	8006268 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	781b      	ldrb	r3, [r3, #0]
 80061d6:	015a      	lsls	r2, r3, #5
 80061d8:	693b      	ldr	r3, [r7, #16]
 80061da:	4413      	add	r3, r2
 80061dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80061e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80061ea:	f040 8086 	bne.w	80062fa <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	781b      	ldrb	r3, [r3, #0]
 80061f2:	015a      	lsls	r2, r3, #5
 80061f4:	693b      	ldr	r3, [r7, #16]
 80061f6:	4413      	add	r3, r2
 80061f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	683a      	ldr	r2, [r7, #0]
 8006200:	7812      	ldrb	r2, [r2, #0]
 8006202:	0151      	lsls	r1, r2, #5
 8006204:	693a      	ldr	r2, [r7, #16]
 8006206:	440a      	add	r2, r1
 8006208:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800620c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006210:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	781b      	ldrb	r3, [r3, #0]
 8006216:	015a      	lsls	r2, r3, #5
 8006218:	693b      	ldr	r3, [r7, #16]
 800621a:	4413      	add	r3, r2
 800621c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	683a      	ldr	r2, [r7, #0]
 8006224:	7812      	ldrb	r2, [r2, #0]
 8006226:	0151      	lsls	r1, r2, #5
 8006228:	693a      	ldr	r2, [r7, #16]
 800622a:	440a      	add	r2, r1
 800622c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006230:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006234:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	3301      	adds	r3, #1
 800623a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	f242 7210 	movw	r2, #10000	; 0x2710
 8006242:	4293      	cmp	r3, r2
 8006244:	d902      	bls.n	800624c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006246:	2301      	movs	r3, #1
 8006248:	75fb      	strb	r3, [r7, #23]
          break;
 800624a:	e056      	b.n	80062fa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	781b      	ldrb	r3, [r3, #0]
 8006250:	015a      	lsls	r2, r3, #5
 8006252:	693b      	ldr	r3, [r7, #16]
 8006254:	4413      	add	r3, r2
 8006256:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006260:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006264:	d0e7      	beq.n	8006236 <USB_EPStopXfer+0x82>
 8006266:	e048      	b.n	80062fa <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	781b      	ldrb	r3, [r3, #0]
 800626c:	015a      	lsls	r2, r3, #5
 800626e:	693b      	ldr	r3, [r7, #16]
 8006270:	4413      	add	r3, r2
 8006272:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800627c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006280:	d13b      	bne.n	80062fa <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	781b      	ldrb	r3, [r3, #0]
 8006286:	015a      	lsls	r2, r3, #5
 8006288:	693b      	ldr	r3, [r7, #16]
 800628a:	4413      	add	r3, r2
 800628c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	683a      	ldr	r2, [r7, #0]
 8006294:	7812      	ldrb	r2, [r2, #0]
 8006296:	0151      	lsls	r1, r2, #5
 8006298:	693a      	ldr	r2, [r7, #16]
 800629a:	440a      	add	r2, r1
 800629c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062a0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80062a4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	781b      	ldrb	r3, [r3, #0]
 80062aa:	015a      	lsls	r2, r3, #5
 80062ac:	693b      	ldr	r3, [r7, #16]
 80062ae:	4413      	add	r3, r2
 80062b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	683a      	ldr	r2, [r7, #0]
 80062b8:	7812      	ldrb	r2, [r2, #0]
 80062ba:	0151      	lsls	r1, r2, #5
 80062bc:	693a      	ldr	r2, [r7, #16]
 80062be:	440a      	add	r2, r1
 80062c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062c4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80062c8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	3301      	adds	r3, #1
 80062ce:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	f242 7210 	movw	r2, #10000	; 0x2710
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d902      	bls.n	80062e0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80062da:	2301      	movs	r3, #1
 80062dc:	75fb      	strb	r3, [r7, #23]
          break;
 80062de:	e00c      	b.n	80062fa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	781b      	ldrb	r3, [r3, #0]
 80062e4:	015a      	lsls	r2, r3, #5
 80062e6:	693b      	ldr	r3, [r7, #16]
 80062e8:	4413      	add	r3, r2
 80062ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80062f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80062f8:	d0e7      	beq.n	80062ca <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80062fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	371c      	adds	r7, #28
 8006300:	46bd      	mov	sp, r7
 8006302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006306:	4770      	bx	lr

08006308 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006308:	b480      	push	{r7}
 800630a:	b089      	sub	sp, #36	; 0x24
 800630c:	af00      	add	r7, sp, #0
 800630e:	60f8      	str	r0, [r7, #12]
 8006310:	60b9      	str	r1, [r7, #8]
 8006312:	4611      	mov	r1, r2
 8006314:	461a      	mov	r2, r3
 8006316:	460b      	mov	r3, r1
 8006318:	71fb      	strb	r3, [r7, #7]
 800631a:	4613      	mov	r3, r2
 800631c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006326:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800632a:	2b00      	cmp	r3, #0
 800632c:	d123      	bne.n	8006376 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800632e:	88bb      	ldrh	r3, [r7, #4]
 8006330:	3303      	adds	r3, #3
 8006332:	089b      	lsrs	r3, r3, #2
 8006334:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006336:	2300      	movs	r3, #0
 8006338:	61bb      	str	r3, [r7, #24]
 800633a:	e018      	b.n	800636e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800633c:	79fb      	ldrb	r3, [r7, #7]
 800633e:	031a      	lsls	r2, r3, #12
 8006340:	697b      	ldr	r3, [r7, #20]
 8006342:	4413      	add	r3, r2
 8006344:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006348:	461a      	mov	r2, r3
 800634a:	69fb      	ldr	r3, [r7, #28]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006350:	69fb      	ldr	r3, [r7, #28]
 8006352:	3301      	adds	r3, #1
 8006354:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006356:	69fb      	ldr	r3, [r7, #28]
 8006358:	3301      	adds	r3, #1
 800635a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800635c:	69fb      	ldr	r3, [r7, #28]
 800635e:	3301      	adds	r3, #1
 8006360:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006362:	69fb      	ldr	r3, [r7, #28]
 8006364:	3301      	adds	r3, #1
 8006366:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006368:	69bb      	ldr	r3, [r7, #24]
 800636a:	3301      	adds	r3, #1
 800636c:	61bb      	str	r3, [r7, #24]
 800636e:	69ba      	ldr	r2, [r7, #24]
 8006370:	693b      	ldr	r3, [r7, #16]
 8006372:	429a      	cmp	r2, r3
 8006374:	d3e2      	bcc.n	800633c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006376:	2300      	movs	r3, #0
}
 8006378:	4618      	mov	r0, r3
 800637a:	3724      	adds	r7, #36	; 0x24
 800637c:	46bd      	mov	sp, r7
 800637e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006382:	4770      	bx	lr

08006384 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006384:	b480      	push	{r7}
 8006386:	b08b      	sub	sp, #44	; 0x2c
 8006388:	af00      	add	r7, sp, #0
 800638a:	60f8      	str	r0, [r7, #12]
 800638c:	60b9      	str	r1, [r7, #8]
 800638e:	4613      	mov	r3, r2
 8006390:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800639a:	88fb      	ldrh	r3, [r7, #6]
 800639c:	089b      	lsrs	r3, r3, #2
 800639e:	b29b      	uxth	r3, r3
 80063a0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80063a2:	88fb      	ldrh	r3, [r7, #6]
 80063a4:	f003 0303 	and.w	r3, r3, #3
 80063a8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80063aa:	2300      	movs	r3, #0
 80063ac:	623b      	str	r3, [r7, #32]
 80063ae:	e014      	b.n	80063da <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80063b0:	69bb      	ldr	r3, [r7, #24]
 80063b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063b6:	681a      	ldr	r2, [r3, #0]
 80063b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ba:	601a      	str	r2, [r3, #0]
    pDest++;
 80063bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063be:	3301      	adds	r3, #1
 80063c0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80063c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c4:	3301      	adds	r3, #1
 80063c6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80063c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ca:	3301      	adds	r3, #1
 80063cc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80063ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d0:	3301      	adds	r3, #1
 80063d2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80063d4:	6a3b      	ldr	r3, [r7, #32]
 80063d6:	3301      	adds	r3, #1
 80063d8:	623b      	str	r3, [r7, #32]
 80063da:	6a3a      	ldr	r2, [r7, #32]
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	429a      	cmp	r2, r3
 80063e0:	d3e6      	bcc.n	80063b0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80063e2:	8bfb      	ldrh	r3, [r7, #30]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d01e      	beq.n	8006426 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80063e8:	2300      	movs	r3, #0
 80063ea:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80063ec:	69bb      	ldr	r3, [r7, #24]
 80063ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063f2:	461a      	mov	r2, r3
 80063f4:	f107 0310 	add.w	r3, r7, #16
 80063f8:	6812      	ldr	r2, [r2, #0]
 80063fa:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80063fc:	693a      	ldr	r2, [r7, #16]
 80063fe:	6a3b      	ldr	r3, [r7, #32]
 8006400:	b2db      	uxtb	r3, r3
 8006402:	00db      	lsls	r3, r3, #3
 8006404:	fa22 f303 	lsr.w	r3, r2, r3
 8006408:	b2da      	uxtb	r2, r3
 800640a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800640c:	701a      	strb	r2, [r3, #0]
      i++;
 800640e:	6a3b      	ldr	r3, [r7, #32]
 8006410:	3301      	adds	r3, #1
 8006412:	623b      	str	r3, [r7, #32]
      pDest++;
 8006414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006416:	3301      	adds	r3, #1
 8006418:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800641a:	8bfb      	ldrh	r3, [r7, #30]
 800641c:	3b01      	subs	r3, #1
 800641e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006420:	8bfb      	ldrh	r3, [r7, #30]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d1ea      	bne.n	80063fc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006428:	4618      	mov	r0, r3
 800642a:	372c      	adds	r7, #44	; 0x2c
 800642c:	46bd      	mov	sp, r7
 800642e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006432:	4770      	bx	lr

08006434 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006434:	b480      	push	{r7}
 8006436:	b085      	sub	sp, #20
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
 800643c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	781b      	ldrb	r3, [r3, #0]
 8006446:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	785b      	ldrb	r3, [r3, #1]
 800644c:	2b01      	cmp	r3, #1
 800644e:	d12c      	bne.n	80064aa <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	015a      	lsls	r2, r3, #5
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	4413      	add	r3, r2
 8006458:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	2b00      	cmp	r3, #0
 8006460:	db12      	blt.n	8006488 <USB_EPSetStall+0x54>
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d00f      	beq.n	8006488 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	015a      	lsls	r2, r3, #5
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	4413      	add	r3, r2
 8006470:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	68ba      	ldr	r2, [r7, #8]
 8006478:	0151      	lsls	r1, r2, #5
 800647a:	68fa      	ldr	r2, [r7, #12]
 800647c:	440a      	add	r2, r1
 800647e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006482:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006486:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	015a      	lsls	r2, r3, #5
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	4413      	add	r3, r2
 8006490:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	68ba      	ldr	r2, [r7, #8]
 8006498:	0151      	lsls	r1, r2, #5
 800649a:	68fa      	ldr	r2, [r7, #12]
 800649c:	440a      	add	r2, r1
 800649e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064a2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80064a6:	6013      	str	r3, [r2, #0]
 80064a8:	e02b      	b.n	8006502 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	015a      	lsls	r2, r3, #5
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	4413      	add	r3, r2
 80064b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	db12      	blt.n	80064e2 <USB_EPSetStall+0xae>
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d00f      	beq.n	80064e2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	015a      	lsls	r2, r3, #5
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	4413      	add	r3, r2
 80064ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	68ba      	ldr	r2, [r7, #8]
 80064d2:	0151      	lsls	r1, r2, #5
 80064d4:	68fa      	ldr	r2, [r7, #12]
 80064d6:	440a      	add	r2, r1
 80064d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064dc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80064e0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	015a      	lsls	r2, r3, #5
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	4413      	add	r3, r2
 80064ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	68ba      	ldr	r2, [r7, #8]
 80064f2:	0151      	lsls	r1, r2, #5
 80064f4:	68fa      	ldr	r2, [r7, #12]
 80064f6:	440a      	add	r2, r1
 80064f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006500:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006502:	2300      	movs	r3, #0
}
 8006504:	4618      	mov	r0, r3
 8006506:	3714      	adds	r7, #20
 8006508:	46bd      	mov	sp, r7
 800650a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650e:	4770      	bx	lr

08006510 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006510:	b480      	push	{r7}
 8006512:	b085      	sub	sp, #20
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
 8006518:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	781b      	ldrb	r3, [r3, #0]
 8006522:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	785b      	ldrb	r3, [r3, #1]
 8006528:	2b01      	cmp	r3, #1
 800652a:	d128      	bne.n	800657e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	015a      	lsls	r2, r3, #5
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	4413      	add	r3, r2
 8006534:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	68ba      	ldr	r2, [r7, #8]
 800653c:	0151      	lsls	r1, r2, #5
 800653e:	68fa      	ldr	r2, [r7, #12]
 8006540:	440a      	add	r2, r1
 8006542:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006546:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800654a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	791b      	ldrb	r3, [r3, #4]
 8006550:	2b03      	cmp	r3, #3
 8006552:	d003      	beq.n	800655c <USB_EPClearStall+0x4c>
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	791b      	ldrb	r3, [r3, #4]
 8006558:	2b02      	cmp	r3, #2
 800655a:	d138      	bne.n	80065ce <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	015a      	lsls	r2, r3, #5
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	4413      	add	r3, r2
 8006564:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	68ba      	ldr	r2, [r7, #8]
 800656c:	0151      	lsls	r1, r2, #5
 800656e:	68fa      	ldr	r2, [r7, #12]
 8006570:	440a      	add	r2, r1
 8006572:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006576:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800657a:	6013      	str	r3, [r2, #0]
 800657c:	e027      	b.n	80065ce <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	015a      	lsls	r2, r3, #5
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	4413      	add	r3, r2
 8006586:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	68ba      	ldr	r2, [r7, #8]
 800658e:	0151      	lsls	r1, r2, #5
 8006590:	68fa      	ldr	r2, [r7, #12]
 8006592:	440a      	add	r2, r1
 8006594:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006598:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800659c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	791b      	ldrb	r3, [r3, #4]
 80065a2:	2b03      	cmp	r3, #3
 80065a4:	d003      	beq.n	80065ae <USB_EPClearStall+0x9e>
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	791b      	ldrb	r3, [r3, #4]
 80065aa:	2b02      	cmp	r3, #2
 80065ac:	d10f      	bne.n	80065ce <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	015a      	lsls	r2, r3, #5
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	4413      	add	r3, r2
 80065b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	68ba      	ldr	r2, [r7, #8]
 80065be:	0151      	lsls	r1, r2, #5
 80065c0:	68fa      	ldr	r2, [r7, #12]
 80065c2:	440a      	add	r2, r1
 80065c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065cc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80065ce:	2300      	movs	r3, #0
}
 80065d0:	4618      	mov	r0, r3
 80065d2:	3714      	adds	r7, #20
 80065d4:	46bd      	mov	sp, r7
 80065d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065da:	4770      	bx	lr

080065dc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80065dc:	b480      	push	{r7}
 80065de:	b085      	sub	sp, #20
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
 80065e4:	460b      	mov	r3, r1
 80065e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	68fa      	ldr	r2, [r7, #12]
 80065f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80065fa:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80065fe:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006606:	681a      	ldr	r2, [r3, #0]
 8006608:	78fb      	ldrb	r3, [r7, #3]
 800660a:	011b      	lsls	r3, r3, #4
 800660c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006610:	68f9      	ldr	r1, [r7, #12]
 8006612:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006616:	4313      	orrs	r3, r2
 8006618:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800661a:	2300      	movs	r3, #0
}
 800661c:	4618      	mov	r0, r3
 800661e:	3714      	adds	r7, #20
 8006620:	46bd      	mov	sp, r7
 8006622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006626:	4770      	bx	lr

08006628 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006628:	b480      	push	{r7}
 800662a:	b085      	sub	sp, #20
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	68fa      	ldr	r2, [r7, #12]
 800663e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006642:	f023 0303 	bic.w	r3, r3, #3
 8006646:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800664e:	685b      	ldr	r3, [r3, #4]
 8006650:	68fa      	ldr	r2, [r7, #12]
 8006652:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006656:	f023 0302 	bic.w	r3, r3, #2
 800665a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800665c:	2300      	movs	r3, #0
}
 800665e:	4618      	mov	r0, r3
 8006660:	3714      	adds	r7, #20
 8006662:	46bd      	mov	sp, r7
 8006664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006668:	4770      	bx	lr

0800666a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800666a:	b480      	push	{r7}
 800666c:	b085      	sub	sp, #20
 800666e:	af00      	add	r7, sp, #0
 8006670:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	68fa      	ldr	r2, [r7, #12]
 8006680:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006684:	f023 0303 	bic.w	r3, r3, #3
 8006688:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006690:	685b      	ldr	r3, [r3, #4]
 8006692:	68fa      	ldr	r2, [r7, #12]
 8006694:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006698:	f043 0302 	orr.w	r3, r3, #2
 800669c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800669e:	2300      	movs	r3, #0
}
 80066a0:	4618      	mov	r0, r3
 80066a2:	3714      	adds	r7, #20
 80066a4:	46bd      	mov	sp, r7
 80066a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066aa:	4770      	bx	lr

080066ac <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80066ac:	b480      	push	{r7}
 80066ae:	b085      	sub	sp, #20
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	695b      	ldr	r3, [r3, #20]
 80066b8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	699b      	ldr	r3, [r3, #24]
 80066be:	68fa      	ldr	r2, [r7, #12]
 80066c0:	4013      	ands	r3, r2
 80066c2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80066c4:	68fb      	ldr	r3, [r7, #12]
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	3714      	adds	r7, #20
 80066ca:	46bd      	mov	sp, r7
 80066cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d0:	4770      	bx	lr

080066d2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80066d2:	b480      	push	{r7}
 80066d4:	b085      	sub	sp, #20
 80066d6:	af00      	add	r7, sp, #0
 80066d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066e4:	699b      	ldr	r3, [r3, #24]
 80066e6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066ee:	69db      	ldr	r3, [r3, #28]
 80066f0:	68ba      	ldr	r2, [r7, #8]
 80066f2:	4013      	ands	r3, r2
 80066f4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	0c1b      	lsrs	r3, r3, #16
}
 80066fa:	4618      	mov	r0, r3
 80066fc:	3714      	adds	r7, #20
 80066fe:	46bd      	mov	sp, r7
 8006700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006704:	4770      	bx	lr

08006706 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006706:	b480      	push	{r7}
 8006708:	b085      	sub	sp, #20
 800670a:	af00      	add	r7, sp, #0
 800670c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006718:	699b      	ldr	r3, [r3, #24]
 800671a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006722:	69db      	ldr	r3, [r3, #28]
 8006724:	68ba      	ldr	r2, [r7, #8]
 8006726:	4013      	ands	r3, r2
 8006728:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	b29b      	uxth	r3, r3
}
 800672e:	4618      	mov	r0, r3
 8006730:	3714      	adds	r7, #20
 8006732:	46bd      	mov	sp, r7
 8006734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006738:	4770      	bx	lr

0800673a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800673a:	b480      	push	{r7}
 800673c:	b085      	sub	sp, #20
 800673e:	af00      	add	r7, sp, #0
 8006740:	6078      	str	r0, [r7, #4]
 8006742:	460b      	mov	r3, r1
 8006744:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800674a:	78fb      	ldrb	r3, [r7, #3]
 800674c:	015a      	lsls	r2, r3, #5
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	4413      	add	r3, r2
 8006752:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006756:	689b      	ldr	r3, [r3, #8]
 8006758:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006760:	695b      	ldr	r3, [r3, #20]
 8006762:	68ba      	ldr	r2, [r7, #8]
 8006764:	4013      	ands	r3, r2
 8006766:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006768:	68bb      	ldr	r3, [r7, #8]
}
 800676a:	4618      	mov	r0, r3
 800676c:	3714      	adds	r7, #20
 800676e:	46bd      	mov	sp, r7
 8006770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006774:	4770      	bx	lr

08006776 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006776:	b480      	push	{r7}
 8006778:	b087      	sub	sp, #28
 800677a:	af00      	add	r7, sp, #0
 800677c:	6078      	str	r0, [r7, #4]
 800677e:	460b      	mov	r3, r1
 8006780:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006786:	697b      	ldr	r3, [r7, #20]
 8006788:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800678c:	691b      	ldr	r3, [r3, #16]
 800678e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006790:	697b      	ldr	r3, [r7, #20]
 8006792:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006796:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006798:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800679a:	78fb      	ldrb	r3, [r7, #3]
 800679c:	f003 030f 	and.w	r3, r3, #15
 80067a0:	68fa      	ldr	r2, [r7, #12]
 80067a2:	fa22 f303 	lsr.w	r3, r2, r3
 80067a6:	01db      	lsls	r3, r3, #7
 80067a8:	b2db      	uxtb	r3, r3
 80067aa:	693a      	ldr	r2, [r7, #16]
 80067ac:	4313      	orrs	r3, r2
 80067ae:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80067b0:	78fb      	ldrb	r3, [r7, #3]
 80067b2:	015a      	lsls	r2, r3, #5
 80067b4:	697b      	ldr	r3, [r7, #20]
 80067b6:	4413      	add	r3, r2
 80067b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067bc:	689b      	ldr	r3, [r3, #8]
 80067be:	693a      	ldr	r2, [r7, #16]
 80067c0:	4013      	ands	r3, r2
 80067c2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80067c4:	68bb      	ldr	r3, [r7, #8]
}
 80067c6:	4618      	mov	r0, r3
 80067c8:	371c      	adds	r7, #28
 80067ca:	46bd      	mov	sp, r7
 80067cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d0:	4770      	bx	lr

080067d2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80067d2:	b480      	push	{r7}
 80067d4:	b083      	sub	sp, #12
 80067d6:	af00      	add	r7, sp, #0
 80067d8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	695b      	ldr	r3, [r3, #20]
 80067de:	f003 0301 	and.w	r3, r3, #1
}
 80067e2:	4618      	mov	r0, r3
 80067e4:	370c      	adds	r7, #12
 80067e6:	46bd      	mov	sp, r7
 80067e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ec:	4770      	bx	lr

080067ee <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80067ee:	b480      	push	{r7}
 80067f0:	b085      	sub	sp, #20
 80067f2:	af00      	add	r7, sp, #0
 80067f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	68fa      	ldr	r2, [r7, #12]
 8006804:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006808:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800680c:	f023 0307 	bic.w	r3, r3, #7
 8006810:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006818:	685b      	ldr	r3, [r3, #4]
 800681a:	68fa      	ldr	r2, [r7, #12]
 800681c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006820:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006824:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006826:	2300      	movs	r3, #0
}
 8006828:	4618      	mov	r0, r3
 800682a:	3714      	adds	r7, #20
 800682c:	46bd      	mov	sp, r7
 800682e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006832:	4770      	bx	lr

08006834 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006834:	b480      	push	{r7}
 8006836:	b087      	sub	sp, #28
 8006838:	af00      	add	r7, sp, #0
 800683a:	60f8      	str	r0, [r7, #12]
 800683c:	460b      	mov	r3, r1
 800683e:	607a      	str	r2, [r7, #4]
 8006840:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	333c      	adds	r3, #60	; 0x3c
 800684a:	3304      	adds	r3, #4
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006850:	693b      	ldr	r3, [r7, #16]
 8006852:	4a26      	ldr	r2, [pc, #152]	; (80068ec <USB_EP0_OutStart+0xb8>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d90a      	bls.n	800686e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006858:	697b      	ldr	r3, [r7, #20]
 800685a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006864:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006868:	d101      	bne.n	800686e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800686a:	2300      	movs	r3, #0
 800686c:	e037      	b.n	80068de <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800686e:	697b      	ldr	r3, [r7, #20]
 8006870:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006874:	461a      	mov	r2, r3
 8006876:	2300      	movs	r3, #0
 8006878:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800687a:	697b      	ldr	r3, [r7, #20]
 800687c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006880:	691b      	ldr	r3, [r3, #16]
 8006882:	697a      	ldr	r2, [r7, #20]
 8006884:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006888:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800688c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800688e:	697b      	ldr	r3, [r7, #20]
 8006890:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006894:	691b      	ldr	r3, [r3, #16]
 8006896:	697a      	ldr	r2, [r7, #20]
 8006898:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800689c:	f043 0318 	orr.w	r3, r3, #24
 80068a0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80068a2:	697b      	ldr	r3, [r7, #20]
 80068a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068a8:	691b      	ldr	r3, [r3, #16]
 80068aa:	697a      	ldr	r2, [r7, #20]
 80068ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068b0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80068b4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80068b6:	7afb      	ldrb	r3, [r7, #11]
 80068b8:	2b01      	cmp	r3, #1
 80068ba:	d10f      	bne.n	80068dc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80068bc:	697b      	ldr	r3, [r7, #20]
 80068be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068c2:	461a      	mov	r2, r3
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80068c8:	697b      	ldr	r3, [r7, #20]
 80068ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	697a      	ldr	r2, [r7, #20]
 80068d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068d6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80068da:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80068dc:	2300      	movs	r3, #0
}
 80068de:	4618      	mov	r0, r3
 80068e0:	371c      	adds	r7, #28
 80068e2:	46bd      	mov	sp, r7
 80068e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e8:	4770      	bx	lr
 80068ea:	bf00      	nop
 80068ec:	4f54300a 	.word	0x4f54300a

080068f0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80068f0:	b480      	push	{r7}
 80068f2:	b085      	sub	sp, #20
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80068f8:	2300      	movs	r3, #0
 80068fa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	3301      	adds	r3, #1
 8006900:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	4a13      	ldr	r2, [pc, #76]	; (8006954 <USB_CoreReset+0x64>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d901      	bls.n	800690e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800690a:	2303      	movs	r3, #3
 800690c:	e01b      	b.n	8006946 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	691b      	ldr	r3, [r3, #16]
 8006912:	2b00      	cmp	r3, #0
 8006914:	daf2      	bge.n	80068fc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006916:	2300      	movs	r3, #0
 8006918:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	691b      	ldr	r3, [r3, #16]
 800691e:	f043 0201 	orr.w	r2, r3, #1
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	3301      	adds	r3, #1
 800692a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	4a09      	ldr	r2, [pc, #36]	; (8006954 <USB_CoreReset+0x64>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d901      	bls.n	8006938 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006934:	2303      	movs	r3, #3
 8006936:	e006      	b.n	8006946 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	691b      	ldr	r3, [r3, #16]
 800693c:	f003 0301 	and.w	r3, r3, #1
 8006940:	2b01      	cmp	r3, #1
 8006942:	d0f0      	beq.n	8006926 <USB_CoreReset+0x36>

  return HAL_OK;
 8006944:	2300      	movs	r3, #0
}
 8006946:	4618      	mov	r0, r3
 8006948:	3714      	adds	r7, #20
 800694a:	46bd      	mov	sp, r7
 800694c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006950:	4770      	bx	lr
 8006952:	bf00      	nop
 8006954:	00030d40 	.word	0x00030d40

08006958 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b084      	sub	sp, #16
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
 8006960:	460b      	mov	r3, r1
 8006962:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006964:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006968:	f005 fa92 	bl	800be90 <USBD_static_malloc>
 800696c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d109      	bne.n	8006988 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	32b0      	adds	r2, #176	; 0xb0
 800697e:	2100      	movs	r1, #0
 8006980:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006984:	2302      	movs	r3, #2
 8006986:	e0d4      	b.n	8006b32 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006988:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800698c:	2100      	movs	r1, #0
 800698e:	68f8      	ldr	r0, [r7, #12]
 8006990:	f005 fac2 	bl	800bf18 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	32b0      	adds	r2, #176	; 0xb0
 800699e:	68f9      	ldr	r1, [r7, #12]
 80069a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	32b0      	adds	r2, #176	; 0xb0
 80069ae:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	7c1b      	ldrb	r3, [r3, #16]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d138      	bne.n	8006a32 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80069c0:	4b5e      	ldr	r3, [pc, #376]	; (8006b3c <USBD_CDC_Init+0x1e4>)
 80069c2:	7819      	ldrb	r1, [r3, #0]
 80069c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80069c8:	2202      	movs	r2, #2
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f005 f93d 	bl	800bc4a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80069d0:	4b5a      	ldr	r3, [pc, #360]	; (8006b3c <USBD_CDC_Init+0x1e4>)
 80069d2:	781b      	ldrb	r3, [r3, #0]
 80069d4:	f003 020f 	and.w	r2, r3, #15
 80069d8:	6879      	ldr	r1, [r7, #4]
 80069da:	4613      	mov	r3, r2
 80069dc:	009b      	lsls	r3, r3, #2
 80069de:	4413      	add	r3, r2
 80069e0:	009b      	lsls	r3, r3, #2
 80069e2:	440b      	add	r3, r1
 80069e4:	3324      	adds	r3, #36	; 0x24
 80069e6:	2201      	movs	r2, #1
 80069e8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80069ea:	4b55      	ldr	r3, [pc, #340]	; (8006b40 <USBD_CDC_Init+0x1e8>)
 80069ec:	7819      	ldrb	r1, [r3, #0]
 80069ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80069f2:	2202      	movs	r2, #2
 80069f4:	6878      	ldr	r0, [r7, #4]
 80069f6:	f005 f928 	bl	800bc4a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80069fa:	4b51      	ldr	r3, [pc, #324]	; (8006b40 <USBD_CDC_Init+0x1e8>)
 80069fc:	781b      	ldrb	r3, [r3, #0]
 80069fe:	f003 020f 	and.w	r2, r3, #15
 8006a02:	6879      	ldr	r1, [r7, #4]
 8006a04:	4613      	mov	r3, r2
 8006a06:	009b      	lsls	r3, r3, #2
 8006a08:	4413      	add	r3, r2
 8006a0a:	009b      	lsls	r3, r3, #2
 8006a0c:	440b      	add	r3, r1
 8006a0e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006a12:	2201      	movs	r2, #1
 8006a14:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006a16:	4b4b      	ldr	r3, [pc, #300]	; (8006b44 <USBD_CDC_Init+0x1ec>)
 8006a18:	781b      	ldrb	r3, [r3, #0]
 8006a1a:	f003 020f 	and.w	r2, r3, #15
 8006a1e:	6879      	ldr	r1, [r7, #4]
 8006a20:	4613      	mov	r3, r2
 8006a22:	009b      	lsls	r3, r3, #2
 8006a24:	4413      	add	r3, r2
 8006a26:	009b      	lsls	r3, r3, #2
 8006a28:	440b      	add	r3, r1
 8006a2a:	3326      	adds	r3, #38	; 0x26
 8006a2c:	2210      	movs	r2, #16
 8006a2e:	801a      	strh	r2, [r3, #0]
 8006a30:	e035      	b.n	8006a9e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006a32:	4b42      	ldr	r3, [pc, #264]	; (8006b3c <USBD_CDC_Init+0x1e4>)
 8006a34:	7819      	ldrb	r1, [r3, #0]
 8006a36:	2340      	movs	r3, #64	; 0x40
 8006a38:	2202      	movs	r2, #2
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	f005 f905 	bl	800bc4a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006a40:	4b3e      	ldr	r3, [pc, #248]	; (8006b3c <USBD_CDC_Init+0x1e4>)
 8006a42:	781b      	ldrb	r3, [r3, #0]
 8006a44:	f003 020f 	and.w	r2, r3, #15
 8006a48:	6879      	ldr	r1, [r7, #4]
 8006a4a:	4613      	mov	r3, r2
 8006a4c:	009b      	lsls	r3, r3, #2
 8006a4e:	4413      	add	r3, r2
 8006a50:	009b      	lsls	r3, r3, #2
 8006a52:	440b      	add	r3, r1
 8006a54:	3324      	adds	r3, #36	; 0x24
 8006a56:	2201      	movs	r2, #1
 8006a58:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006a5a:	4b39      	ldr	r3, [pc, #228]	; (8006b40 <USBD_CDC_Init+0x1e8>)
 8006a5c:	7819      	ldrb	r1, [r3, #0]
 8006a5e:	2340      	movs	r3, #64	; 0x40
 8006a60:	2202      	movs	r2, #2
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f005 f8f1 	bl	800bc4a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006a68:	4b35      	ldr	r3, [pc, #212]	; (8006b40 <USBD_CDC_Init+0x1e8>)
 8006a6a:	781b      	ldrb	r3, [r3, #0]
 8006a6c:	f003 020f 	and.w	r2, r3, #15
 8006a70:	6879      	ldr	r1, [r7, #4]
 8006a72:	4613      	mov	r3, r2
 8006a74:	009b      	lsls	r3, r3, #2
 8006a76:	4413      	add	r3, r2
 8006a78:	009b      	lsls	r3, r3, #2
 8006a7a:	440b      	add	r3, r1
 8006a7c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006a80:	2201      	movs	r2, #1
 8006a82:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006a84:	4b2f      	ldr	r3, [pc, #188]	; (8006b44 <USBD_CDC_Init+0x1ec>)
 8006a86:	781b      	ldrb	r3, [r3, #0]
 8006a88:	f003 020f 	and.w	r2, r3, #15
 8006a8c:	6879      	ldr	r1, [r7, #4]
 8006a8e:	4613      	mov	r3, r2
 8006a90:	009b      	lsls	r3, r3, #2
 8006a92:	4413      	add	r3, r2
 8006a94:	009b      	lsls	r3, r3, #2
 8006a96:	440b      	add	r3, r1
 8006a98:	3326      	adds	r3, #38	; 0x26
 8006a9a:	2210      	movs	r2, #16
 8006a9c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006a9e:	4b29      	ldr	r3, [pc, #164]	; (8006b44 <USBD_CDC_Init+0x1ec>)
 8006aa0:	7819      	ldrb	r1, [r3, #0]
 8006aa2:	2308      	movs	r3, #8
 8006aa4:	2203      	movs	r2, #3
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	f005 f8cf 	bl	800bc4a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006aac:	4b25      	ldr	r3, [pc, #148]	; (8006b44 <USBD_CDC_Init+0x1ec>)
 8006aae:	781b      	ldrb	r3, [r3, #0]
 8006ab0:	f003 020f 	and.w	r2, r3, #15
 8006ab4:	6879      	ldr	r1, [r7, #4]
 8006ab6:	4613      	mov	r3, r2
 8006ab8:	009b      	lsls	r3, r3, #2
 8006aba:	4413      	add	r3, r2
 8006abc:	009b      	lsls	r3, r3, #2
 8006abe:	440b      	add	r3, r1
 8006ac0:	3324      	adds	r3, #36	; 0x24
 8006ac2:	2201      	movs	r2, #1
 8006ac4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	2200      	movs	r2, #0
 8006aca:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006ad4:	687a      	ldr	r2, [r7, #4]
 8006ad6:	33b0      	adds	r3, #176	; 0xb0
 8006ad8:	009b      	lsls	r3, r3, #2
 8006ada:	4413      	add	r3, r2
 8006adc:	685b      	ldr	r3, [r3, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	2200      	movs	r2, #0
 8006aee:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d101      	bne.n	8006b00 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006afc:	2302      	movs	r3, #2
 8006afe:	e018      	b.n	8006b32 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	7c1b      	ldrb	r3, [r3, #16]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d10a      	bne.n	8006b1e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006b08:	4b0d      	ldr	r3, [pc, #52]	; (8006b40 <USBD_CDC_Init+0x1e8>)
 8006b0a:	7819      	ldrb	r1, [r3, #0]
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006b12:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	f005 f986 	bl	800be28 <USBD_LL_PrepareReceive>
 8006b1c:	e008      	b.n	8006b30 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006b1e:	4b08      	ldr	r3, [pc, #32]	; (8006b40 <USBD_CDC_Init+0x1e8>)
 8006b20:	7819      	ldrb	r1, [r3, #0]
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006b28:	2340      	movs	r3, #64	; 0x40
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f005 f97c 	bl	800be28 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006b30:	2300      	movs	r3, #0
}
 8006b32:	4618      	mov	r0, r3
 8006b34:	3710      	adds	r7, #16
 8006b36:	46bd      	mov	sp, r7
 8006b38:	bd80      	pop	{r7, pc}
 8006b3a:	bf00      	nop
 8006b3c:	20000093 	.word	0x20000093
 8006b40:	20000094 	.word	0x20000094
 8006b44:	20000095 	.word	0x20000095

08006b48 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b082      	sub	sp, #8
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
 8006b50:	460b      	mov	r3, r1
 8006b52:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006b54:	4b3a      	ldr	r3, [pc, #232]	; (8006c40 <USBD_CDC_DeInit+0xf8>)
 8006b56:	781b      	ldrb	r3, [r3, #0]
 8006b58:	4619      	mov	r1, r3
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	f005 f89b 	bl	800bc96 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006b60:	4b37      	ldr	r3, [pc, #220]	; (8006c40 <USBD_CDC_DeInit+0xf8>)
 8006b62:	781b      	ldrb	r3, [r3, #0]
 8006b64:	f003 020f 	and.w	r2, r3, #15
 8006b68:	6879      	ldr	r1, [r7, #4]
 8006b6a:	4613      	mov	r3, r2
 8006b6c:	009b      	lsls	r3, r3, #2
 8006b6e:	4413      	add	r3, r2
 8006b70:	009b      	lsls	r3, r3, #2
 8006b72:	440b      	add	r3, r1
 8006b74:	3324      	adds	r3, #36	; 0x24
 8006b76:	2200      	movs	r2, #0
 8006b78:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006b7a:	4b32      	ldr	r3, [pc, #200]	; (8006c44 <USBD_CDC_DeInit+0xfc>)
 8006b7c:	781b      	ldrb	r3, [r3, #0]
 8006b7e:	4619      	mov	r1, r3
 8006b80:	6878      	ldr	r0, [r7, #4]
 8006b82:	f005 f888 	bl	800bc96 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006b86:	4b2f      	ldr	r3, [pc, #188]	; (8006c44 <USBD_CDC_DeInit+0xfc>)
 8006b88:	781b      	ldrb	r3, [r3, #0]
 8006b8a:	f003 020f 	and.w	r2, r3, #15
 8006b8e:	6879      	ldr	r1, [r7, #4]
 8006b90:	4613      	mov	r3, r2
 8006b92:	009b      	lsls	r3, r3, #2
 8006b94:	4413      	add	r3, r2
 8006b96:	009b      	lsls	r3, r3, #2
 8006b98:	440b      	add	r3, r1
 8006b9a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006ba2:	4b29      	ldr	r3, [pc, #164]	; (8006c48 <USBD_CDC_DeInit+0x100>)
 8006ba4:	781b      	ldrb	r3, [r3, #0]
 8006ba6:	4619      	mov	r1, r3
 8006ba8:	6878      	ldr	r0, [r7, #4]
 8006baa:	f005 f874 	bl	800bc96 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006bae:	4b26      	ldr	r3, [pc, #152]	; (8006c48 <USBD_CDC_DeInit+0x100>)
 8006bb0:	781b      	ldrb	r3, [r3, #0]
 8006bb2:	f003 020f 	and.w	r2, r3, #15
 8006bb6:	6879      	ldr	r1, [r7, #4]
 8006bb8:	4613      	mov	r3, r2
 8006bba:	009b      	lsls	r3, r3, #2
 8006bbc:	4413      	add	r3, r2
 8006bbe:	009b      	lsls	r3, r3, #2
 8006bc0:	440b      	add	r3, r1
 8006bc2:	3324      	adds	r3, #36	; 0x24
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006bc8:	4b1f      	ldr	r3, [pc, #124]	; (8006c48 <USBD_CDC_DeInit+0x100>)
 8006bca:	781b      	ldrb	r3, [r3, #0]
 8006bcc:	f003 020f 	and.w	r2, r3, #15
 8006bd0:	6879      	ldr	r1, [r7, #4]
 8006bd2:	4613      	mov	r3, r2
 8006bd4:	009b      	lsls	r3, r3, #2
 8006bd6:	4413      	add	r3, r2
 8006bd8:	009b      	lsls	r3, r3, #2
 8006bda:	440b      	add	r3, r1
 8006bdc:	3326      	adds	r3, #38	; 0x26
 8006bde:	2200      	movs	r2, #0
 8006be0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	32b0      	adds	r2, #176	; 0xb0
 8006bec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d01f      	beq.n	8006c34 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006bfa:	687a      	ldr	r2, [r7, #4]
 8006bfc:	33b0      	adds	r3, #176	; 0xb0
 8006bfe:	009b      	lsls	r3, r3, #2
 8006c00:	4413      	add	r3, r2
 8006c02:	685b      	ldr	r3, [r3, #4]
 8006c04:	685b      	ldr	r3, [r3, #4]
 8006c06:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	32b0      	adds	r2, #176	; 0xb0
 8006c12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c16:	4618      	mov	r0, r3
 8006c18:	f005 f948 	bl	800beac <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	32b0      	adds	r2, #176	; 0xb0
 8006c26:	2100      	movs	r1, #0
 8006c28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2200      	movs	r2, #0
 8006c30:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006c34:	2300      	movs	r3, #0
}
 8006c36:	4618      	mov	r0, r3
 8006c38:	3708      	adds	r7, #8
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bd80      	pop	{r7, pc}
 8006c3e:	bf00      	nop
 8006c40:	20000093 	.word	0x20000093
 8006c44:	20000094 	.word	0x20000094
 8006c48:	20000095 	.word	0x20000095

08006c4c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b086      	sub	sp, #24
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
 8006c54:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	32b0      	adds	r2, #176	; 0xb0
 8006c60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c64:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006c66:	2300      	movs	r3, #0
 8006c68:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006c6e:	2300      	movs	r3, #0
 8006c70:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006c72:	693b      	ldr	r3, [r7, #16]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d101      	bne.n	8006c7c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006c78:	2303      	movs	r3, #3
 8006c7a:	e0bf      	b.n	8006dfc <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	781b      	ldrb	r3, [r3, #0]
 8006c80:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d050      	beq.n	8006d2a <USBD_CDC_Setup+0xde>
 8006c88:	2b20      	cmp	r3, #32
 8006c8a:	f040 80af 	bne.w	8006dec <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	88db      	ldrh	r3, [r3, #6]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d03a      	beq.n	8006d0c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	781b      	ldrb	r3, [r3, #0]
 8006c9a:	b25b      	sxtb	r3, r3
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	da1b      	bge.n	8006cd8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006ca6:	687a      	ldr	r2, [r7, #4]
 8006ca8:	33b0      	adds	r3, #176	; 0xb0
 8006caa:	009b      	lsls	r3, r3, #2
 8006cac:	4413      	add	r3, r2
 8006cae:	685b      	ldr	r3, [r3, #4]
 8006cb0:	689b      	ldr	r3, [r3, #8]
 8006cb2:	683a      	ldr	r2, [r7, #0]
 8006cb4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006cb6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006cb8:	683a      	ldr	r2, [r7, #0]
 8006cba:	88d2      	ldrh	r2, [r2, #6]
 8006cbc:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	88db      	ldrh	r3, [r3, #6]
 8006cc2:	2b07      	cmp	r3, #7
 8006cc4:	bf28      	it	cs
 8006cc6:	2307      	movcs	r3, #7
 8006cc8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006cca:	693b      	ldr	r3, [r7, #16]
 8006ccc:	89fa      	ldrh	r2, [r7, #14]
 8006cce:	4619      	mov	r1, r3
 8006cd0:	6878      	ldr	r0, [r7, #4]
 8006cd2:	f001 fd89 	bl	80087e8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006cd6:	e090      	b.n	8006dfa <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	785a      	ldrb	r2, [r3, #1]
 8006cdc:	693b      	ldr	r3, [r7, #16]
 8006cde:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	88db      	ldrh	r3, [r3, #6]
 8006ce6:	2b3f      	cmp	r3, #63	; 0x3f
 8006ce8:	d803      	bhi.n	8006cf2 <USBD_CDC_Setup+0xa6>
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	88db      	ldrh	r3, [r3, #6]
 8006cee:	b2da      	uxtb	r2, r3
 8006cf0:	e000      	b.n	8006cf4 <USBD_CDC_Setup+0xa8>
 8006cf2:	2240      	movs	r2, #64	; 0x40
 8006cf4:	693b      	ldr	r3, [r7, #16]
 8006cf6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006cfa:	6939      	ldr	r1, [r7, #16]
 8006cfc:	693b      	ldr	r3, [r7, #16]
 8006cfe:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8006d02:	461a      	mov	r2, r3
 8006d04:	6878      	ldr	r0, [r7, #4]
 8006d06:	f001 fd9b 	bl	8008840 <USBD_CtlPrepareRx>
      break;
 8006d0a:	e076      	b.n	8006dfa <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006d12:	687a      	ldr	r2, [r7, #4]
 8006d14:	33b0      	adds	r3, #176	; 0xb0
 8006d16:	009b      	lsls	r3, r3, #2
 8006d18:	4413      	add	r3, r2
 8006d1a:	685b      	ldr	r3, [r3, #4]
 8006d1c:	689b      	ldr	r3, [r3, #8]
 8006d1e:	683a      	ldr	r2, [r7, #0]
 8006d20:	7850      	ldrb	r0, [r2, #1]
 8006d22:	2200      	movs	r2, #0
 8006d24:	6839      	ldr	r1, [r7, #0]
 8006d26:	4798      	blx	r3
      break;
 8006d28:	e067      	b.n	8006dfa <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	785b      	ldrb	r3, [r3, #1]
 8006d2e:	2b0b      	cmp	r3, #11
 8006d30:	d851      	bhi.n	8006dd6 <USBD_CDC_Setup+0x18a>
 8006d32:	a201      	add	r2, pc, #4	; (adr r2, 8006d38 <USBD_CDC_Setup+0xec>)
 8006d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d38:	08006d69 	.word	0x08006d69
 8006d3c:	08006de5 	.word	0x08006de5
 8006d40:	08006dd7 	.word	0x08006dd7
 8006d44:	08006dd7 	.word	0x08006dd7
 8006d48:	08006dd7 	.word	0x08006dd7
 8006d4c:	08006dd7 	.word	0x08006dd7
 8006d50:	08006dd7 	.word	0x08006dd7
 8006d54:	08006dd7 	.word	0x08006dd7
 8006d58:	08006dd7 	.word	0x08006dd7
 8006d5c:	08006dd7 	.word	0x08006dd7
 8006d60:	08006d93 	.word	0x08006d93
 8006d64:	08006dbd 	.word	0x08006dbd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d6e:	b2db      	uxtb	r3, r3
 8006d70:	2b03      	cmp	r3, #3
 8006d72:	d107      	bne.n	8006d84 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006d74:	f107 030a 	add.w	r3, r7, #10
 8006d78:	2202      	movs	r2, #2
 8006d7a:	4619      	mov	r1, r3
 8006d7c:	6878      	ldr	r0, [r7, #4]
 8006d7e:	f001 fd33 	bl	80087e8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006d82:	e032      	b.n	8006dea <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006d84:	6839      	ldr	r1, [r7, #0]
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f001 fcbd 	bl	8008706 <USBD_CtlError>
            ret = USBD_FAIL;
 8006d8c:	2303      	movs	r3, #3
 8006d8e:	75fb      	strb	r3, [r7, #23]
          break;
 8006d90:	e02b      	b.n	8006dea <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d98:	b2db      	uxtb	r3, r3
 8006d9a:	2b03      	cmp	r3, #3
 8006d9c:	d107      	bne.n	8006dae <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006d9e:	f107 030d 	add.w	r3, r7, #13
 8006da2:	2201      	movs	r2, #1
 8006da4:	4619      	mov	r1, r3
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	f001 fd1e 	bl	80087e8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006dac:	e01d      	b.n	8006dea <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006dae:	6839      	ldr	r1, [r7, #0]
 8006db0:	6878      	ldr	r0, [r7, #4]
 8006db2:	f001 fca8 	bl	8008706 <USBD_CtlError>
            ret = USBD_FAIL;
 8006db6:	2303      	movs	r3, #3
 8006db8:	75fb      	strb	r3, [r7, #23]
          break;
 8006dba:	e016      	b.n	8006dea <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006dc2:	b2db      	uxtb	r3, r3
 8006dc4:	2b03      	cmp	r3, #3
 8006dc6:	d00f      	beq.n	8006de8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006dc8:	6839      	ldr	r1, [r7, #0]
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	f001 fc9b 	bl	8008706 <USBD_CtlError>
            ret = USBD_FAIL;
 8006dd0:	2303      	movs	r3, #3
 8006dd2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006dd4:	e008      	b.n	8006de8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006dd6:	6839      	ldr	r1, [r7, #0]
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	f001 fc94 	bl	8008706 <USBD_CtlError>
          ret = USBD_FAIL;
 8006dde:	2303      	movs	r3, #3
 8006de0:	75fb      	strb	r3, [r7, #23]
          break;
 8006de2:	e002      	b.n	8006dea <USBD_CDC_Setup+0x19e>
          break;
 8006de4:	bf00      	nop
 8006de6:	e008      	b.n	8006dfa <USBD_CDC_Setup+0x1ae>
          break;
 8006de8:	bf00      	nop
      }
      break;
 8006dea:	e006      	b.n	8006dfa <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006dec:	6839      	ldr	r1, [r7, #0]
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f001 fc89 	bl	8008706 <USBD_CtlError>
      ret = USBD_FAIL;
 8006df4:	2303      	movs	r3, #3
 8006df6:	75fb      	strb	r3, [r7, #23]
      break;
 8006df8:	bf00      	nop
  }

  return (uint8_t)ret;
 8006dfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	3718      	adds	r7, #24
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bd80      	pop	{r7, pc}

08006e04 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b084      	sub	sp, #16
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
 8006e0c:	460b      	mov	r3, r1
 8006e0e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006e16:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	32b0      	adds	r2, #176	; 0xb0
 8006e22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d101      	bne.n	8006e2e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006e2a:	2303      	movs	r3, #3
 8006e2c:	e065      	b.n	8006efa <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	32b0      	adds	r2, #176	; 0xb0
 8006e38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e3c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006e3e:	78fb      	ldrb	r3, [r7, #3]
 8006e40:	f003 020f 	and.w	r2, r3, #15
 8006e44:	6879      	ldr	r1, [r7, #4]
 8006e46:	4613      	mov	r3, r2
 8006e48:	009b      	lsls	r3, r3, #2
 8006e4a:	4413      	add	r3, r2
 8006e4c:	009b      	lsls	r3, r3, #2
 8006e4e:	440b      	add	r3, r1
 8006e50:	3318      	adds	r3, #24
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d02f      	beq.n	8006eb8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006e58:	78fb      	ldrb	r3, [r7, #3]
 8006e5a:	f003 020f 	and.w	r2, r3, #15
 8006e5e:	6879      	ldr	r1, [r7, #4]
 8006e60:	4613      	mov	r3, r2
 8006e62:	009b      	lsls	r3, r3, #2
 8006e64:	4413      	add	r3, r2
 8006e66:	009b      	lsls	r3, r3, #2
 8006e68:	440b      	add	r3, r1
 8006e6a:	3318      	adds	r3, #24
 8006e6c:	681a      	ldr	r2, [r3, #0]
 8006e6e:	78fb      	ldrb	r3, [r7, #3]
 8006e70:	f003 010f 	and.w	r1, r3, #15
 8006e74:	68f8      	ldr	r0, [r7, #12]
 8006e76:	460b      	mov	r3, r1
 8006e78:	00db      	lsls	r3, r3, #3
 8006e7a:	440b      	add	r3, r1
 8006e7c:	009b      	lsls	r3, r3, #2
 8006e7e:	4403      	add	r3, r0
 8006e80:	3348      	adds	r3, #72	; 0x48
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	fbb2 f1f3 	udiv	r1, r2, r3
 8006e88:	fb01 f303 	mul.w	r3, r1, r3
 8006e8c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d112      	bne.n	8006eb8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006e92:	78fb      	ldrb	r3, [r7, #3]
 8006e94:	f003 020f 	and.w	r2, r3, #15
 8006e98:	6879      	ldr	r1, [r7, #4]
 8006e9a:	4613      	mov	r3, r2
 8006e9c:	009b      	lsls	r3, r3, #2
 8006e9e:	4413      	add	r3, r2
 8006ea0:	009b      	lsls	r3, r3, #2
 8006ea2:	440b      	add	r3, r1
 8006ea4:	3318      	adds	r3, #24
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006eaa:	78f9      	ldrb	r1, [r7, #3]
 8006eac:	2300      	movs	r3, #0
 8006eae:	2200      	movs	r2, #0
 8006eb0:	6878      	ldr	r0, [r7, #4]
 8006eb2:	f004 ff98 	bl	800bde6 <USBD_LL_Transmit>
 8006eb6:	e01f      	b.n	8006ef8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	2200      	movs	r2, #0
 8006ebc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006ec6:	687a      	ldr	r2, [r7, #4]
 8006ec8:	33b0      	adds	r3, #176	; 0xb0
 8006eca:	009b      	lsls	r3, r3, #2
 8006ecc:	4413      	add	r3, r2
 8006ece:	685b      	ldr	r3, [r3, #4]
 8006ed0:	691b      	ldr	r3, [r3, #16]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d010      	beq.n	8006ef8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006edc:	687a      	ldr	r2, [r7, #4]
 8006ede:	33b0      	adds	r3, #176	; 0xb0
 8006ee0:	009b      	lsls	r3, r3, #2
 8006ee2:	4413      	add	r3, r2
 8006ee4:	685b      	ldr	r3, [r3, #4]
 8006ee6:	691b      	ldr	r3, [r3, #16]
 8006ee8:	68ba      	ldr	r2, [r7, #8]
 8006eea:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006eee:	68ba      	ldr	r2, [r7, #8]
 8006ef0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006ef4:	78fa      	ldrb	r2, [r7, #3]
 8006ef6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006ef8:	2300      	movs	r3, #0
}
 8006efa:	4618      	mov	r0, r3
 8006efc:	3710      	adds	r7, #16
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bd80      	pop	{r7, pc}

08006f02 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006f02:	b580      	push	{r7, lr}
 8006f04:	b084      	sub	sp, #16
 8006f06:	af00      	add	r7, sp, #0
 8006f08:	6078      	str	r0, [r7, #4]
 8006f0a:	460b      	mov	r3, r1
 8006f0c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	32b0      	adds	r2, #176	; 0xb0
 8006f18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f1c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	32b0      	adds	r2, #176	; 0xb0
 8006f28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d101      	bne.n	8006f34 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006f30:	2303      	movs	r3, #3
 8006f32:	e01a      	b.n	8006f6a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006f34:	78fb      	ldrb	r3, [r7, #3]
 8006f36:	4619      	mov	r1, r3
 8006f38:	6878      	ldr	r0, [r7, #4]
 8006f3a:	f004 ff96 	bl	800be6a <USBD_LL_GetRxDataSize>
 8006f3e:	4602      	mov	r2, r0
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006f4c:	687a      	ldr	r2, [r7, #4]
 8006f4e:	33b0      	adds	r3, #176	; 0xb0
 8006f50:	009b      	lsls	r3, r3, #2
 8006f52:	4413      	add	r3, r2
 8006f54:	685b      	ldr	r3, [r3, #4]
 8006f56:	68db      	ldr	r3, [r3, #12]
 8006f58:	68fa      	ldr	r2, [r7, #12]
 8006f5a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006f5e:	68fa      	ldr	r2, [r7, #12]
 8006f60:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006f64:	4611      	mov	r1, r2
 8006f66:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006f68:	2300      	movs	r3, #0
}
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	3710      	adds	r7, #16
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	bd80      	pop	{r7, pc}

08006f72 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006f72:	b580      	push	{r7, lr}
 8006f74:	b084      	sub	sp, #16
 8006f76:	af00      	add	r7, sp, #0
 8006f78:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	32b0      	adds	r2, #176	; 0xb0
 8006f84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f88:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d101      	bne.n	8006f94 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006f90:	2303      	movs	r3, #3
 8006f92:	e025      	b.n	8006fe0 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006f9a:	687a      	ldr	r2, [r7, #4]
 8006f9c:	33b0      	adds	r3, #176	; 0xb0
 8006f9e:	009b      	lsls	r3, r3, #2
 8006fa0:	4413      	add	r3, r2
 8006fa2:	685b      	ldr	r3, [r3, #4]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d01a      	beq.n	8006fde <USBD_CDC_EP0_RxReady+0x6c>
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006fae:	2bff      	cmp	r3, #255	; 0xff
 8006fb0:	d015      	beq.n	8006fde <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006fb8:	687a      	ldr	r2, [r7, #4]
 8006fba:	33b0      	adds	r3, #176	; 0xb0
 8006fbc:	009b      	lsls	r3, r3, #2
 8006fbe:	4413      	add	r3, r2
 8006fc0:	685b      	ldr	r3, [r3, #4]
 8006fc2:	689b      	ldr	r3, [r3, #8]
 8006fc4:	68fa      	ldr	r2, [r7, #12]
 8006fc6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8006fca:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006fcc:	68fa      	ldr	r2, [r7, #12]
 8006fce:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006fd2:	b292      	uxth	r2, r2
 8006fd4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	22ff      	movs	r2, #255	; 0xff
 8006fda:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006fde:	2300      	movs	r3, #0
}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	3710      	adds	r7, #16
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bd80      	pop	{r7, pc}

08006fe8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b086      	sub	sp, #24
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006ff0:	2182      	movs	r1, #130	; 0x82
 8006ff2:	4818      	ldr	r0, [pc, #96]	; (8007054 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006ff4:	f000 fd4f 	bl	8007a96 <USBD_GetEpDesc>
 8006ff8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006ffa:	2101      	movs	r1, #1
 8006ffc:	4815      	ldr	r0, [pc, #84]	; (8007054 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006ffe:	f000 fd4a 	bl	8007a96 <USBD_GetEpDesc>
 8007002:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007004:	2181      	movs	r1, #129	; 0x81
 8007006:	4813      	ldr	r0, [pc, #76]	; (8007054 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007008:	f000 fd45 	bl	8007a96 <USBD_GetEpDesc>
 800700c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800700e:	697b      	ldr	r3, [r7, #20]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d002      	beq.n	800701a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007014:	697b      	ldr	r3, [r7, #20]
 8007016:	2210      	movs	r2, #16
 8007018:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800701a:	693b      	ldr	r3, [r7, #16]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d006      	beq.n	800702e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007020:	693b      	ldr	r3, [r7, #16]
 8007022:	2200      	movs	r2, #0
 8007024:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007028:	711a      	strb	r2, [r3, #4]
 800702a:	2200      	movs	r2, #0
 800702c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d006      	beq.n	8007042 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	2200      	movs	r2, #0
 8007038:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800703c:	711a      	strb	r2, [r3, #4]
 800703e:	2200      	movs	r2, #0
 8007040:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2243      	movs	r2, #67	; 0x43
 8007046:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007048:	4b02      	ldr	r3, [pc, #8]	; (8007054 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800704a:	4618      	mov	r0, r3
 800704c:	3718      	adds	r7, #24
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}
 8007052:	bf00      	nop
 8007054:	20000050 	.word	0x20000050

08007058 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b086      	sub	sp, #24
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007060:	2182      	movs	r1, #130	; 0x82
 8007062:	4818      	ldr	r0, [pc, #96]	; (80070c4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007064:	f000 fd17 	bl	8007a96 <USBD_GetEpDesc>
 8007068:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800706a:	2101      	movs	r1, #1
 800706c:	4815      	ldr	r0, [pc, #84]	; (80070c4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800706e:	f000 fd12 	bl	8007a96 <USBD_GetEpDesc>
 8007072:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007074:	2181      	movs	r1, #129	; 0x81
 8007076:	4813      	ldr	r0, [pc, #76]	; (80070c4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007078:	f000 fd0d 	bl	8007a96 <USBD_GetEpDesc>
 800707c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800707e:	697b      	ldr	r3, [r7, #20]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d002      	beq.n	800708a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007084:	697b      	ldr	r3, [r7, #20]
 8007086:	2210      	movs	r2, #16
 8007088:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800708a:	693b      	ldr	r3, [r7, #16]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d006      	beq.n	800709e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007090:	693b      	ldr	r3, [r7, #16]
 8007092:	2200      	movs	r2, #0
 8007094:	711a      	strb	r2, [r3, #4]
 8007096:	2200      	movs	r2, #0
 8007098:	f042 0202 	orr.w	r2, r2, #2
 800709c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d006      	beq.n	80070b2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	2200      	movs	r2, #0
 80070a8:	711a      	strb	r2, [r3, #4]
 80070aa:	2200      	movs	r2, #0
 80070ac:	f042 0202 	orr.w	r2, r2, #2
 80070b0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2243      	movs	r2, #67	; 0x43
 80070b6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80070b8:	4b02      	ldr	r3, [pc, #8]	; (80070c4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	3718      	adds	r7, #24
 80070be:	46bd      	mov	sp, r7
 80070c0:	bd80      	pop	{r7, pc}
 80070c2:	bf00      	nop
 80070c4:	20000050 	.word	0x20000050

080070c8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b086      	sub	sp, #24
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80070d0:	2182      	movs	r1, #130	; 0x82
 80070d2:	4818      	ldr	r0, [pc, #96]	; (8007134 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80070d4:	f000 fcdf 	bl	8007a96 <USBD_GetEpDesc>
 80070d8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80070da:	2101      	movs	r1, #1
 80070dc:	4815      	ldr	r0, [pc, #84]	; (8007134 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80070de:	f000 fcda 	bl	8007a96 <USBD_GetEpDesc>
 80070e2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80070e4:	2181      	movs	r1, #129	; 0x81
 80070e6:	4813      	ldr	r0, [pc, #76]	; (8007134 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80070e8:	f000 fcd5 	bl	8007a96 <USBD_GetEpDesc>
 80070ec:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80070ee:	697b      	ldr	r3, [r7, #20]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d002      	beq.n	80070fa <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80070f4:	697b      	ldr	r3, [r7, #20]
 80070f6:	2210      	movs	r2, #16
 80070f8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80070fa:	693b      	ldr	r3, [r7, #16]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d006      	beq.n	800710e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007100:	693b      	ldr	r3, [r7, #16]
 8007102:	2200      	movs	r2, #0
 8007104:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007108:	711a      	strb	r2, [r3, #4]
 800710a:	2200      	movs	r2, #0
 800710c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d006      	beq.n	8007122 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	2200      	movs	r2, #0
 8007118:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800711c:	711a      	strb	r2, [r3, #4]
 800711e:	2200      	movs	r2, #0
 8007120:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2243      	movs	r2, #67	; 0x43
 8007126:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007128:	4b02      	ldr	r3, [pc, #8]	; (8007134 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800712a:	4618      	mov	r0, r3
 800712c:	3718      	adds	r7, #24
 800712e:	46bd      	mov	sp, r7
 8007130:	bd80      	pop	{r7, pc}
 8007132:	bf00      	nop
 8007134:	20000050 	.word	0x20000050

08007138 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007138:	b480      	push	{r7}
 800713a:	b083      	sub	sp, #12
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	220a      	movs	r2, #10
 8007144:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007146:	4b03      	ldr	r3, [pc, #12]	; (8007154 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007148:	4618      	mov	r0, r3
 800714a:	370c      	adds	r7, #12
 800714c:	46bd      	mov	sp, r7
 800714e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007152:	4770      	bx	lr
 8007154:	2000000c 	.word	0x2000000c

08007158 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007158:	b480      	push	{r7}
 800715a:	b083      	sub	sp, #12
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
 8007160:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d101      	bne.n	800716c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007168:	2303      	movs	r3, #3
 800716a:	e009      	b.n	8007180 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007172:	687a      	ldr	r2, [r7, #4]
 8007174:	33b0      	adds	r3, #176	; 0xb0
 8007176:	009b      	lsls	r3, r3, #2
 8007178:	4413      	add	r3, r2
 800717a:	683a      	ldr	r2, [r7, #0]
 800717c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800717e:	2300      	movs	r3, #0
}
 8007180:	4618      	mov	r0, r3
 8007182:	370c      	adds	r7, #12
 8007184:	46bd      	mov	sp, r7
 8007186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718a:	4770      	bx	lr

0800718c <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800718c:	b480      	push	{r7}
 800718e:	b087      	sub	sp, #28
 8007190:	af00      	add	r7, sp, #0
 8007192:	60f8      	str	r0, [r7, #12]
 8007194:	60b9      	str	r1, [r7, #8]
 8007196:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	32b0      	adds	r2, #176	; 0xb0
 80071a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071a6:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80071a8:	697b      	ldr	r3, [r7, #20]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d101      	bne.n	80071b2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80071ae:	2303      	movs	r3, #3
 80071b0:	e008      	b.n	80071c4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80071b2:	697b      	ldr	r3, [r7, #20]
 80071b4:	68ba      	ldr	r2, [r7, #8]
 80071b6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80071ba:	697b      	ldr	r3, [r7, #20]
 80071bc:	687a      	ldr	r2, [r7, #4]
 80071be:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80071c2:	2300      	movs	r3, #0
}
 80071c4:	4618      	mov	r0, r3
 80071c6:	371c      	adds	r7, #28
 80071c8:	46bd      	mov	sp, r7
 80071ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ce:	4770      	bx	lr

080071d0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80071d0:	b480      	push	{r7}
 80071d2:	b085      	sub	sp, #20
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
 80071d8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	32b0      	adds	r2, #176	; 0xb0
 80071e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071e8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d101      	bne.n	80071f4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80071f0:	2303      	movs	r3, #3
 80071f2:	e004      	b.n	80071fe <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	683a      	ldr	r2, [r7, #0]
 80071f8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80071fc:	2300      	movs	r3, #0
}
 80071fe:	4618      	mov	r0, r3
 8007200:	3714      	adds	r7, #20
 8007202:	46bd      	mov	sp, r7
 8007204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007208:	4770      	bx	lr
	...

0800720c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b084      	sub	sp, #16
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	32b0      	adds	r2, #176	; 0xb0
 800721e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007222:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8007224:	2301      	movs	r3, #1
 8007226:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	32b0      	adds	r2, #176	; 0xb0
 8007232:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d101      	bne.n	800723e <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800723a:	2303      	movs	r3, #3
 800723c:	e025      	b.n	800728a <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800723e:	68bb      	ldr	r3, [r7, #8]
 8007240:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007244:	2b00      	cmp	r3, #0
 8007246:	d11f      	bne.n	8007288 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	2201      	movs	r2, #1
 800724c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8007250:	4b10      	ldr	r3, [pc, #64]	; (8007294 <USBD_CDC_TransmitPacket+0x88>)
 8007252:	781b      	ldrb	r3, [r3, #0]
 8007254:	f003 020f 	and.w	r2, r3, #15
 8007258:	68bb      	ldr	r3, [r7, #8]
 800725a:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	4613      	mov	r3, r2
 8007262:	009b      	lsls	r3, r3, #2
 8007264:	4413      	add	r3, r2
 8007266:	009b      	lsls	r3, r3, #2
 8007268:	4403      	add	r3, r0
 800726a:	3318      	adds	r3, #24
 800726c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800726e:	4b09      	ldr	r3, [pc, #36]	; (8007294 <USBD_CDC_TransmitPacket+0x88>)
 8007270:	7819      	ldrb	r1, [r3, #0]
 8007272:	68bb      	ldr	r3, [r7, #8]
 8007274:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	f004 fdb1 	bl	800bde6 <USBD_LL_Transmit>

    ret = USBD_OK;
 8007284:	2300      	movs	r3, #0
 8007286:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007288:	7bfb      	ldrb	r3, [r7, #15]
}
 800728a:	4618      	mov	r0, r3
 800728c:	3710      	adds	r7, #16
 800728e:	46bd      	mov	sp, r7
 8007290:	bd80      	pop	{r7, pc}
 8007292:	bf00      	nop
 8007294:	20000093 	.word	0x20000093

08007298 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b084      	sub	sp, #16
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	32b0      	adds	r2, #176	; 0xb0
 80072aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072ae:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	32b0      	adds	r2, #176	; 0xb0
 80072ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d101      	bne.n	80072c6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80072c2:	2303      	movs	r3, #3
 80072c4:	e018      	b.n	80072f8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	7c1b      	ldrb	r3, [r3, #16]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d10a      	bne.n	80072e4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80072ce:	4b0c      	ldr	r3, [pc, #48]	; (8007300 <USBD_CDC_ReceivePacket+0x68>)
 80072d0:	7819      	ldrb	r1, [r3, #0]
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80072d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	f004 fda3 	bl	800be28 <USBD_LL_PrepareReceive>
 80072e2:	e008      	b.n	80072f6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80072e4:	4b06      	ldr	r3, [pc, #24]	; (8007300 <USBD_CDC_ReceivePacket+0x68>)
 80072e6:	7819      	ldrb	r1, [r3, #0]
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80072ee:	2340      	movs	r3, #64	; 0x40
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	f004 fd99 	bl	800be28 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80072f6:	2300      	movs	r3, #0
}
 80072f8:	4618      	mov	r0, r3
 80072fa:	3710      	adds	r7, #16
 80072fc:	46bd      	mov	sp, r7
 80072fe:	bd80      	pop	{r7, pc}
 8007300:	20000094 	.word	0x20000094

08007304 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b086      	sub	sp, #24
 8007308:	af00      	add	r7, sp, #0
 800730a:	60f8      	str	r0, [r7, #12]
 800730c:	60b9      	str	r1, [r7, #8]
 800730e:	4613      	mov	r3, r2
 8007310:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d101      	bne.n	800731c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007318:	2303      	movs	r3, #3
 800731a:	e01f      	b.n	800735c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	2200      	movs	r2, #0
 8007320:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	2200      	movs	r2, #0
 8007328:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	2200      	movs	r2, #0
 8007330:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d003      	beq.n	8007342 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	68ba      	ldr	r2, [r7, #8]
 800733e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	2201      	movs	r2, #1
 8007346:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	79fa      	ldrb	r2, [r7, #7]
 800734e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007350:	68f8      	ldr	r0, [r7, #12]
 8007352:	f004 fc13 	bl	800bb7c <USBD_LL_Init>
 8007356:	4603      	mov	r3, r0
 8007358:	75fb      	strb	r3, [r7, #23]

  return ret;
 800735a:	7dfb      	ldrb	r3, [r7, #23]
}
 800735c:	4618      	mov	r0, r3
 800735e:	3718      	adds	r7, #24
 8007360:	46bd      	mov	sp, r7
 8007362:	bd80      	pop	{r7, pc}

08007364 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b084      	sub	sp, #16
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
 800736c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800736e:	2300      	movs	r3, #0
 8007370:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d101      	bne.n	800737c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007378:	2303      	movs	r3, #3
 800737a:	e025      	b.n	80073c8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	683a      	ldr	r2, [r7, #0]
 8007380:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	32ae      	adds	r2, #174	; 0xae
 800738e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007394:	2b00      	cmp	r3, #0
 8007396:	d00f      	beq.n	80073b8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	32ae      	adds	r2, #174	; 0xae
 80073a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073a8:	f107 020e 	add.w	r2, r7, #14
 80073ac:	4610      	mov	r0, r2
 80073ae:	4798      	blx	r3
 80073b0:	4602      	mov	r2, r0
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80073be:	1c5a      	adds	r2, r3, #1
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80073c6:	2300      	movs	r3, #0
}
 80073c8:	4618      	mov	r0, r3
 80073ca:	3710      	adds	r7, #16
 80073cc:	46bd      	mov	sp, r7
 80073ce:	bd80      	pop	{r7, pc}

080073d0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b082      	sub	sp, #8
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80073d8:	6878      	ldr	r0, [r7, #4]
 80073da:	f004 fc1b 	bl	800bc14 <USBD_LL_Start>
 80073de:	4603      	mov	r3, r0
}
 80073e0:	4618      	mov	r0, r3
 80073e2:	3708      	adds	r7, #8
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bd80      	pop	{r7, pc}

080073e8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80073e8:	b480      	push	{r7}
 80073ea:	b083      	sub	sp, #12
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80073f0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80073f2:	4618      	mov	r0, r3
 80073f4:	370c      	adds	r7, #12
 80073f6:	46bd      	mov	sp, r7
 80073f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fc:	4770      	bx	lr

080073fe <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80073fe:	b580      	push	{r7, lr}
 8007400:	b084      	sub	sp, #16
 8007402:	af00      	add	r7, sp, #0
 8007404:	6078      	str	r0, [r7, #4]
 8007406:	460b      	mov	r3, r1
 8007408:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800740a:	2300      	movs	r3, #0
 800740c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007414:	2b00      	cmp	r3, #0
 8007416:	d009      	beq.n	800742c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	78fa      	ldrb	r2, [r7, #3]
 8007422:	4611      	mov	r1, r2
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	4798      	blx	r3
 8007428:	4603      	mov	r3, r0
 800742a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800742c:	7bfb      	ldrb	r3, [r7, #15]
}
 800742e:	4618      	mov	r0, r3
 8007430:	3710      	adds	r7, #16
 8007432:	46bd      	mov	sp, r7
 8007434:	bd80      	pop	{r7, pc}

08007436 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007436:	b580      	push	{r7, lr}
 8007438:	b084      	sub	sp, #16
 800743a:	af00      	add	r7, sp, #0
 800743c:	6078      	str	r0, [r7, #4]
 800743e:	460b      	mov	r3, r1
 8007440:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007442:	2300      	movs	r3, #0
 8007444:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800744c:	685b      	ldr	r3, [r3, #4]
 800744e:	78fa      	ldrb	r2, [r7, #3]
 8007450:	4611      	mov	r1, r2
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	4798      	blx	r3
 8007456:	4603      	mov	r3, r0
 8007458:	2b00      	cmp	r3, #0
 800745a:	d001      	beq.n	8007460 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800745c:	2303      	movs	r3, #3
 800745e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007460:	7bfb      	ldrb	r3, [r7, #15]
}
 8007462:	4618      	mov	r0, r3
 8007464:	3710      	adds	r7, #16
 8007466:	46bd      	mov	sp, r7
 8007468:	bd80      	pop	{r7, pc}

0800746a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800746a:	b580      	push	{r7, lr}
 800746c:	b084      	sub	sp, #16
 800746e:	af00      	add	r7, sp, #0
 8007470:	6078      	str	r0, [r7, #4]
 8007472:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800747a:	6839      	ldr	r1, [r7, #0]
 800747c:	4618      	mov	r0, r3
 800747e:	f001 f908 	bl	8008692 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2201      	movs	r2, #1
 8007486:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007490:	461a      	mov	r2, r3
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800749e:	f003 031f 	and.w	r3, r3, #31
 80074a2:	2b02      	cmp	r3, #2
 80074a4:	d01a      	beq.n	80074dc <USBD_LL_SetupStage+0x72>
 80074a6:	2b02      	cmp	r3, #2
 80074a8:	d822      	bhi.n	80074f0 <USBD_LL_SetupStage+0x86>
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d002      	beq.n	80074b4 <USBD_LL_SetupStage+0x4a>
 80074ae:	2b01      	cmp	r3, #1
 80074b0:	d00a      	beq.n	80074c8 <USBD_LL_SetupStage+0x5e>
 80074b2:	e01d      	b.n	80074f0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80074ba:	4619      	mov	r1, r3
 80074bc:	6878      	ldr	r0, [r7, #4]
 80074be:	f000 fb5f 	bl	8007b80 <USBD_StdDevReq>
 80074c2:	4603      	mov	r3, r0
 80074c4:	73fb      	strb	r3, [r7, #15]
      break;
 80074c6:	e020      	b.n	800750a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80074ce:	4619      	mov	r1, r3
 80074d0:	6878      	ldr	r0, [r7, #4]
 80074d2:	f000 fbc7 	bl	8007c64 <USBD_StdItfReq>
 80074d6:	4603      	mov	r3, r0
 80074d8:	73fb      	strb	r3, [r7, #15]
      break;
 80074da:	e016      	b.n	800750a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80074e2:	4619      	mov	r1, r3
 80074e4:	6878      	ldr	r0, [r7, #4]
 80074e6:	f000 fc29 	bl	8007d3c <USBD_StdEPReq>
 80074ea:	4603      	mov	r3, r0
 80074ec:	73fb      	strb	r3, [r7, #15]
      break;
 80074ee:	e00c      	b.n	800750a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80074f6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80074fa:	b2db      	uxtb	r3, r3
 80074fc:	4619      	mov	r1, r3
 80074fe:	6878      	ldr	r0, [r7, #4]
 8007500:	f004 fbe8 	bl	800bcd4 <USBD_LL_StallEP>
 8007504:	4603      	mov	r3, r0
 8007506:	73fb      	strb	r3, [r7, #15]
      break;
 8007508:	bf00      	nop
  }

  return ret;
 800750a:	7bfb      	ldrb	r3, [r7, #15]
}
 800750c:	4618      	mov	r0, r3
 800750e:	3710      	adds	r7, #16
 8007510:	46bd      	mov	sp, r7
 8007512:	bd80      	pop	{r7, pc}

08007514 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b086      	sub	sp, #24
 8007518:	af00      	add	r7, sp, #0
 800751a:	60f8      	str	r0, [r7, #12]
 800751c:	460b      	mov	r3, r1
 800751e:	607a      	str	r2, [r7, #4]
 8007520:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007522:	2300      	movs	r3, #0
 8007524:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007526:	7afb      	ldrb	r3, [r7, #11]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d16e      	bne.n	800760a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007532:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800753a:	2b03      	cmp	r3, #3
 800753c:	f040 8098 	bne.w	8007670 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007540:	693b      	ldr	r3, [r7, #16]
 8007542:	689a      	ldr	r2, [r3, #8]
 8007544:	693b      	ldr	r3, [r7, #16]
 8007546:	68db      	ldr	r3, [r3, #12]
 8007548:	429a      	cmp	r2, r3
 800754a:	d913      	bls.n	8007574 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800754c:	693b      	ldr	r3, [r7, #16]
 800754e:	689a      	ldr	r2, [r3, #8]
 8007550:	693b      	ldr	r3, [r7, #16]
 8007552:	68db      	ldr	r3, [r3, #12]
 8007554:	1ad2      	subs	r2, r2, r3
 8007556:	693b      	ldr	r3, [r7, #16]
 8007558:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800755a:	693b      	ldr	r3, [r7, #16]
 800755c:	68da      	ldr	r2, [r3, #12]
 800755e:	693b      	ldr	r3, [r7, #16]
 8007560:	689b      	ldr	r3, [r3, #8]
 8007562:	4293      	cmp	r3, r2
 8007564:	bf28      	it	cs
 8007566:	4613      	movcs	r3, r2
 8007568:	461a      	mov	r2, r3
 800756a:	6879      	ldr	r1, [r7, #4]
 800756c:	68f8      	ldr	r0, [r7, #12]
 800756e:	f001 f984 	bl	800887a <USBD_CtlContinueRx>
 8007572:	e07d      	b.n	8007670 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800757a:	f003 031f 	and.w	r3, r3, #31
 800757e:	2b02      	cmp	r3, #2
 8007580:	d014      	beq.n	80075ac <USBD_LL_DataOutStage+0x98>
 8007582:	2b02      	cmp	r3, #2
 8007584:	d81d      	bhi.n	80075c2 <USBD_LL_DataOutStage+0xae>
 8007586:	2b00      	cmp	r3, #0
 8007588:	d002      	beq.n	8007590 <USBD_LL_DataOutStage+0x7c>
 800758a:	2b01      	cmp	r3, #1
 800758c:	d003      	beq.n	8007596 <USBD_LL_DataOutStage+0x82>
 800758e:	e018      	b.n	80075c2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007590:	2300      	movs	r3, #0
 8007592:	75bb      	strb	r3, [r7, #22]
            break;
 8007594:	e018      	b.n	80075c8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800759c:	b2db      	uxtb	r3, r3
 800759e:	4619      	mov	r1, r3
 80075a0:	68f8      	ldr	r0, [r7, #12]
 80075a2:	f000 fa5e 	bl	8007a62 <USBD_CoreFindIF>
 80075a6:	4603      	mov	r3, r0
 80075a8:	75bb      	strb	r3, [r7, #22]
            break;
 80075aa:	e00d      	b.n	80075c8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80075b2:	b2db      	uxtb	r3, r3
 80075b4:	4619      	mov	r1, r3
 80075b6:	68f8      	ldr	r0, [r7, #12]
 80075b8:	f000 fa60 	bl	8007a7c <USBD_CoreFindEP>
 80075bc:	4603      	mov	r3, r0
 80075be:	75bb      	strb	r3, [r7, #22]
            break;
 80075c0:	e002      	b.n	80075c8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80075c2:	2300      	movs	r3, #0
 80075c4:	75bb      	strb	r3, [r7, #22]
            break;
 80075c6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80075c8:	7dbb      	ldrb	r3, [r7, #22]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d119      	bne.n	8007602 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075d4:	b2db      	uxtb	r3, r3
 80075d6:	2b03      	cmp	r3, #3
 80075d8:	d113      	bne.n	8007602 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80075da:	7dba      	ldrb	r2, [r7, #22]
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	32ae      	adds	r2, #174	; 0xae
 80075e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075e4:	691b      	ldr	r3, [r3, #16]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d00b      	beq.n	8007602 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80075ea:	7dba      	ldrb	r2, [r7, #22]
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80075f2:	7dba      	ldrb	r2, [r7, #22]
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	32ae      	adds	r2, #174	; 0xae
 80075f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075fc:	691b      	ldr	r3, [r3, #16]
 80075fe:	68f8      	ldr	r0, [r7, #12]
 8007600:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007602:	68f8      	ldr	r0, [r7, #12]
 8007604:	f001 f94a 	bl	800889c <USBD_CtlSendStatus>
 8007608:	e032      	b.n	8007670 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800760a:	7afb      	ldrb	r3, [r7, #11]
 800760c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007610:	b2db      	uxtb	r3, r3
 8007612:	4619      	mov	r1, r3
 8007614:	68f8      	ldr	r0, [r7, #12]
 8007616:	f000 fa31 	bl	8007a7c <USBD_CoreFindEP>
 800761a:	4603      	mov	r3, r0
 800761c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800761e:	7dbb      	ldrb	r3, [r7, #22]
 8007620:	2bff      	cmp	r3, #255	; 0xff
 8007622:	d025      	beq.n	8007670 <USBD_LL_DataOutStage+0x15c>
 8007624:	7dbb      	ldrb	r3, [r7, #22]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d122      	bne.n	8007670 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007630:	b2db      	uxtb	r3, r3
 8007632:	2b03      	cmp	r3, #3
 8007634:	d117      	bne.n	8007666 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007636:	7dba      	ldrb	r2, [r7, #22]
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	32ae      	adds	r2, #174	; 0xae
 800763c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007640:	699b      	ldr	r3, [r3, #24]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d00f      	beq.n	8007666 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007646:	7dba      	ldrb	r2, [r7, #22]
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800764e:	7dba      	ldrb	r2, [r7, #22]
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	32ae      	adds	r2, #174	; 0xae
 8007654:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007658:	699b      	ldr	r3, [r3, #24]
 800765a:	7afa      	ldrb	r2, [r7, #11]
 800765c:	4611      	mov	r1, r2
 800765e:	68f8      	ldr	r0, [r7, #12]
 8007660:	4798      	blx	r3
 8007662:	4603      	mov	r3, r0
 8007664:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007666:	7dfb      	ldrb	r3, [r7, #23]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d001      	beq.n	8007670 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800766c:	7dfb      	ldrb	r3, [r7, #23]
 800766e:	e000      	b.n	8007672 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007670:	2300      	movs	r3, #0
}
 8007672:	4618      	mov	r0, r3
 8007674:	3718      	adds	r7, #24
 8007676:	46bd      	mov	sp, r7
 8007678:	bd80      	pop	{r7, pc}

0800767a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800767a:	b580      	push	{r7, lr}
 800767c:	b086      	sub	sp, #24
 800767e:	af00      	add	r7, sp, #0
 8007680:	60f8      	str	r0, [r7, #12]
 8007682:	460b      	mov	r3, r1
 8007684:	607a      	str	r2, [r7, #4]
 8007686:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007688:	7afb      	ldrb	r3, [r7, #11]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d16f      	bne.n	800776e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	3314      	adds	r3, #20
 8007692:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800769a:	2b02      	cmp	r3, #2
 800769c:	d15a      	bne.n	8007754 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800769e:	693b      	ldr	r3, [r7, #16]
 80076a0:	689a      	ldr	r2, [r3, #8]
 80076a2:	693b      	ldr	r3, [r7, #16]
 80076a4:	68db      	ldr	r3, [r3, #12]
 80076a6:	429a      	cmp	r2, r3
 80076a8:	d914      	bls.n	80076d4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80076aa:	693b      	ldr	r3, [r7, #16]
 80076ac:	689a      	ldr	r2, [r3, #8]
 80076ae:	693b      	ldr	r3, [r7, #16]
 80076b0:	68db      	ldr	r3, [r3, #12]
 80076b2:	1ad2      	subs	r2, r2, r3
 80076b4:	693b      	ldr	r3, [r7, #16]
 80076b6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80076b8:	693b      	ldr	r3, [r7, #16]
 80076ba:	689b      	ldr	r3, [r3, #8]
 80076bc:	461a      	mov	r2, r3
 80076be:	6879      	ldr	r1, [r7, #4]
 80076c0:	68f8      	ldr	r0, [r7, #12]
 80076c2:	f001 f8ac 	bl	800881e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80076c6:	2300      	movs	r3, #0
 80076c8:	2200      	movs	r2, #0
 80076ca:	2100      	movs	r1, #0
 80076cc:	68f8      	ldr	r0, [r7, #12]
 80076ce:	f004 fbab 	bl	800be28 <USBD_LL_PrepareReceive>
 80076d2:	e03f      	b.n	8007754 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80076d4:	693b      	ldr	r3, [r7, #16]
 80076d6:	68da      	ldr	r2, [r3, #12]
 80076d8:	693b      	ldr	r3, [r7, #16]
 80076da:	689b      	ldr	r3, [r3, #8]
 80076dc:	429a      	cmp	r2, r3
 80076de:	d11c      	bne.n	800771a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80076e0:	693b      	ldr	r3, [r7, #16]
 80076e2:	685a      	ldr	r2, [r3, #4]
 80076e4:	693b      	ldr	r3, [r7, #16]
 80076e6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80076e8:	429a      	cmp	r2, r3
 80076ea:	d316      	bcc.n	800771a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80076ec:	693b      	ldr	r3, [r7, #16]
 80076ee:	685a      	ldr	r2, [r3, #4]
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80076f6:	429a      	cmp	r2, r3
 80076f8:	d20f      	bcs.n	800771a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80076fa:	2200      	movs	r2, #0
 80076fc:	2100      	movs	r1, #0
 80076fe:	68f8      	ldr	r0, [r7, #12]
 8007700:	f001 f88d 	bl	800881e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	2200      	movs	r2, #0
 8007708:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800770c:	2300      	movs	r3, #0
 800770e:	2200      	movs	r2, #0
 8007710:	2100      	movs	r1, #0
 8007712:	68f8      	ldr	r0, [r7, #12]
 8007714:	f004 fb88 	bl	800be28 <USBD_LL_PrepareReceive>
 8007718:	e01c      	b.n	8007754 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007720:	b2db      	uxtb	r3, r3
 8007722:	2b03      	cmp	r3, #3
 8007724:	d10f      	bne.n	8007746 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800772c:	68db      	ldr	r3, [r3, #12]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d009      	beq.n	8007746 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	2200      	movs	r2, #0
 8007736:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007740:	68db      	ldr	r3, [r3, #12]
 8007742:	68f8      	ldr	r0, [r7, #12]
 8007744:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007746:	2180      	movs	r1, #128	; 0x80
 8007748:	68f8      	ldr	r0, [r7, #12]
 800774a:	f004 fac3 	bl	800bcd4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800774e:	68f8      	ldr	r0, [r7, #12]
 8007750:	f001 f8b7 	bl	80088c2 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800775a:	2b00      	cmp	r3, #0
 800775c:	d03a      	beq.n	80077d4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800775e:	68f8      	ldr	r0, [r7, #12]
 8007760:	f7ff fe42 	bl	80073e8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	2200      	movs	r2, #0
 8007768:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800776c:	e032      	b.n	80077d4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800776e:	7afb      	ldrb	r3, [r7, #11]
 8007770:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007774:	b2db      	uxtb	r3, r3
 8007776:	4619      	mov	r1, r3
 8007778:	68f8      	ldr	r0, [r7, #12]
 800777a:	f000 f97f 	bl	8007a7c <USBD_CoreFindEP>
 800777e:	4603      	mov	r3, r0
 8007780:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007782:	7dfb      	ldrb	r3, [r7, #23]
 8007784:	2bff      	cmp	r3, #255	; 0xff
 8007786:	d025      	beq.n	80077d4 <USBD_LL_DataInStage+0x15a>
 8007788:	7dfb      	ldrb	r3, [r7, #23]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d122      	bne.n	80077d4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007794:	b2db      	uxtb	r3, r3
 8007796:	2b03      	cmp	r3, #3
 8007798:	d11c      	bne.n	80077d4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800779a:	7dfa      	ldrb	r2, [r7, #23]
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	32ae      	adds	r2, #174	; 0xae
 80077a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077a4:	695b      	ldr	r3, [r3, #20]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d014      	beq.n	80077d4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80077aa:	7dfa      	ldrb	r2, [r7, #23]
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80077b2:	7dfa      	ldrb	r2, [r7, #23]
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	32ae      	adds	r2, #174	; 0xae
 80077b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077bc:	695b      	ldr	r3, [r3, #20]
 80077be:	7afa      	ldrb	r2, [r7, #11]
 80077c0:	4611      	mov	r1, r2
 80077c2:	68f8      	ldr	r0, [r7, #12]
 80077c4:	4798      	blx	r3
 80077c6:	4603      	mov	r3, r0
 80077c8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80077ca:	7dbb      	ldrb	r3, [r7, #22]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d001      	beq.n	80077d4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80077d0:	7dbb      	ldrb	r3, [r7, #22]
 80077d2:	e000      	b.n	80077d6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80077d4:	2300      	movs	r3, #0
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	3718      	adds	r7, #24
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd80      	pop	{r7, pc}

080077de <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80077de:	b580      	push	{r7, lr}
 80077e0:	b084      	sub	sp, #16
 80077e2:	af00      	add	r7, sp, #0
 80077e4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80077e6:	2300      	movs	r3, #0
 80077e8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2201      	movs	r2, #1
 80077ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2200      	movs	r2, #0
 80077f6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2200      	movs	r2, #0
 80077fe:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2200      	movs	r2, #0
 8007804:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2200      	movs	r2, #0
 800780c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007816:	2b00      	cmp	r3, #0
 8007818:	d014      	beq.n	8007844 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007820:	685b      	ldr	r3, [r3, #4]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d00e      	beq.n	8007844 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800782c:	685b      	ldr	r3, [r3, #4]
 800782e:	687a      	ldr	r2, [r7, #4]
 8007830:	6852      	ldr	r2, [r2, #4]
 8007832:	b2d2      	uxtb	r2, r2
 8007834:	4611      	mov	r1, r2
 8007836:	6878      	ldr	r0, [r7, #4]
 8007838:	4798      	blx	r3
 800783a:	4603      	mov	r3, r0
 800783c:	2b00      	cmp	r3, #0
 800783e:	d001      	beq.n	8007844 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007840:	2303      	movs	r3, #3
 8007842:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007844:	2340      	movs	r3, #64	; 0x40
 8007846:	2200      	movs	r2, #0
 8007848:	2100      	movs	r1, #0
 800784a:	6878      	ldr	r0, [r7, #4]
 800784c:	f004 f9fd 	bl	800bc4a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2201      	movs	r2, #1
 8007854:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2240      	movs	r2, #64	; 0x40
 800785c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007860:	2340      	movs	r3, #64	; 0x40
 8007862:	2200      	movs	r2, #0
 8007864:	2180      	movs	r1, #128	; 0x80
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f004 f9ef 	bl	800bc4a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2201      	movs	r2, #1
 8007870:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2240      	movs	r2, #64	; 0x40
 8007876:	621a      	str	r2, [r3, #32]

  return ret;
 8007878:	7bfb      	ldrb	r3, [r7, #15]
}
 800787a:	4618      	mov	r0, r3
 800787c:	3710      	adds	r7, #16
 800787e:	46bd      	mov	sp, r7
 8007880:	bd80      	pop	{r7, pc}

08007882 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007882:	b480      	push	{r7}
 8007884:	b083      	sub	sp, #12
 8007886:	af00      	add	r7, sp, #0
 8007888:	6078      	str	r0, [r7, #4]
 800788a:	460b      	mov	r3, r1
 800788c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	78fa      	ldrb	r2, [r7, #3]
 8007892:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007894:	2300      	movs	r3, #0
}
 8007896:	4618      	mov	r0, r3
 8007898:	370c      	adds	r7, #12
 800789a:	46bd      	mov	sp, r7
 800789c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a0:	4770      	bx	lr

080078a2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80078a2:	b480      	push	{r7}
 80078a4:	b083      	sub	sp, #12
 80078a6:	af00      	add	r7, sp, #0
 80078a8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078b0:	b2da      	uxtb	r2, r3
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2204      	movs	r2, #4
 80078bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80078c0:	2300      	movs	r3, #0
}
 80078c2:	4618      	mov	r0, r3
 80078c4:	370c      	adds	r7, #12
 80078c6:	46bd      	mov	sp, r7
 80078c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078cc:	4770      	bx	lr

080078ce <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80078ce:	b480      	push	{r7}
 80078d0:	b083      	sub	sp, #12
 80078d2:	af00      	add	r7, sp, #0
 80078d4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078dc:	b2db      	uxtb	r3, r3
 80078de:	2b04      	cmp	r3, #4
 80078e0:	d106      	bne.n	80078f0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80078e8:	b2da      	uxtb	r2, r3
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80078f0:	2300      	movs	r3, #0
}
 80078f2:	4618      	mov	r0, r3
 80078f4:	370c      	adds	r7, #12
 80078f6:	46bd      	mov	sp, r7
 80078f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fc:	4770      	bx	lr

080078fe <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80078fe:	b580      	push	{r7, lr}
 8007900:	b082      	sub	sp, #8
 8007902:	af00      	add	r7, sp, #0
 8007904:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800790c:	b2db      	uxtb	r3, r3
 800790e:	2b03      	cmp	r3, #3
 8007910:	d110      	bne.n	8007934 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007918:	2b00      	cmp	r3, #0
 800791a:	d00b      	beq.n	8007934 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007922:	69db      	ldr	r3, [r3, #28]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d005      	beq.n	8007934 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800792e:	69db      	ldr	r3, [r3, #28]
 8007930:	6878      	ldr	r0, [r7, #4]
 8007932:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007934:	2300      	movs	r3, #0
}
 8007936:	4618      	mov	r0, r3
 8007938:	3708      	adds	r7, #8
 800793a:	46bd      	mov	sp, r7
 800793c:	bd80      	pop	{r7, pc}

0800793e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800793e:	b580      	push	{r7, lr}
 8007940:	b082      	sub	sp, #8
 8007942:	af00      	add	r7, sp, #0
 8007944:	6078      	str	r0, [r7, #4]
 8007946:	460b      	mov	r3, r1
 8007948:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	32ae      	adds	r2, #174	; 0xae
 8007954:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d101      	bne.n	8007960 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800795c:	2303      	movs	r3, #3
 800795e:	e01c      	b.n	800799a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007966:	b2db      	uxtb	r3, r3
 8007968:	2b03      	cmp	r3, #3
 800796a:	d115      	bne.n	8007998 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	32ae      	adds	r2, #174	; 0xae
 8007976:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800797a:	6a1b      	ldr	r3, [r3, #32]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d00b      	beq.n	8007998 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	32ae      	adds	r2, #174	; 0xae
 800798a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800798e:	6a1b      	ldr	r3, [r3, #32]
 8007990:	78fa      	ldrb	r2, [r7, #3]
 8007992:	4611      	mov	r1, r2
 8007994:	6878      	ldr	r0, [r7, #4]
 8007996:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007998:	2300      	movs	r3, #0
}
 800799a:	4618      	mov	r0, r3
 800799c:	3708      	adds	r7, #8
 800799e:	46bd      	mov	sp, r7
 80079a0:	bd80      	pop	{r7, pc}

080079a2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80079a2:	b580      	push	{r7, lr}
 80079a4:	b082      	sub	sp, #8
 80079a6:	af00      	add	r7, sp, #0
 80079a8:	6078      	str	r0, [r7, #4]
 80079aa:	460b      	mov	r3, r1
 80079ac:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	32ae      	adds	r2, #174	; 0xae
 80079b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d101      	bne.n	80079c4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80079c0:	2303      	movs	r3, #3
 80079c2:	e01c      	b.n	80079fe <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079ca:	b2db      	uxtb	r3, r3
 80079cc:	2b03      	cmp	r3, #3
 80079ce:	d115      	bne.n	80079fc <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	32ae      	adds	r2, #174	; 0xae
 80079da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d00b      	beq.n	80079fc <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	32ae      	adds	r2, #174	; 0xae
 80079ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079f4:	78fa      	ldrb	r2, [r7, #3]
 80079f6:	4611      	mov	r1, r2
 80079f8:	6878      	ldr	r0, [r7, #4]
 80079fa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80079fc:	2300      	movs	r3, #0
}
 80079fe:	4618      	mov	r0, r3
 8007a00:	3708      	adds	r7, #8
 8007a02:	46bd      	mov	sp, r7
 8007a04:	bd80      	pop	{r7, pc}

08007a06 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007a06:	b480      	push	{r7}
 8007a08:	b083      	sub	sp, #12
 8007a0a:	af00      	add	r7, sp, #0
 8007a0c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007a0e:	2300      	movs	r3, #0
}
 8007a10:	4618      	mov	r0, r3
 8007a12:	370c      	adds	r7, #12
 8007a14:	46bd      	mov	sp, r7
 8007a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1a:	4770      	bx	lr

08007a1c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b084      	sub	sp, #16
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007a24:	2300      	movs	r3, #0
 8007a26:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2201      	movs	r2, #1
 8007a2c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d00e      	beq.n	8007a58 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a40:	685b      	ldr	r3, [r3, #4]
 8007a42:	687a      	ldr	r2, [r7, #4]
 8007a44:	6852      	ldr	r2, [r2, #4]
 8007a46:	b2d2      	uxtb	r2, r2
 8007a48:	4611      	mov	r1, r2
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	4798      	blx	r3
 8007a4e:	4603      	mov	r3, r0
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d001      	beq.n	8007a58 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007a54:	2303      	movs	r3, #3
 8007a56:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007a58:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	3710      	adds	r7, #16
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	bd80      	pop	{r7, pc}

08007a62 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007a62:	b480      	push	{r7}
 8007a64:	b083      	sub	sp, #12
 8007a66:	af00      	add	r7, sp, #0
 8007a68:	6078      	str	r0, [r7, #4]
 8007a6a:	460b      	mov	r3, r1
 8007a6c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007a6e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007a70:	4618      	mov	r0, r3
 8007a72:	370c      	adds	r7, #12
 8007a74:	46bd      	mov	sp, r7
 8007a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7a:	4770      	bx	lr

08007a7c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007a7c:	b480      	push	{r7}
 8007a7e:	b083      	sub	sp, #12
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
 8007a84:	460b      	mov	r3, r1
 8007a86:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007a88:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	370c      	adds	r7, #12
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a94:	4770      	bx	lr

08007a96 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007a96:	b580      	push	{r7, lr}
 8007a98:	b086      	sub	sp, #24
 8007a9a:	af00      	add	r7, sp, #0
 8007a9c:	6078      	str	r0, [r7, #4]
 8007a9e:	460b      	mov	r3, r1
 8007aa0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007aaa:	2300      	movs	r3, #0
 8007aac:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	885b      	ldrh	r3, [r3, #2]
 8007ab2:	b29a      	uxth	r2, r3
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	781b      	ldrb	r3, [r3, #0]
 8007ab8:	b29b      	uxth	r3, r3
 8007aba:	429a      	cmp	r2, r3
 8007abc:	d920      	bls.n	8007b00 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	781b      	ldrb	r3, [r3, #0]
 8007ac2:	b29b      	uxth	r3, r3
 8007ac4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007ac6:	e013      	b.n	8007af0 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007ac8:	f107 030a 	add.w	r3, r7, #10
 8007acc:	4619      	mov	r1, r3
 8007ace:	6978      	ldr	r0, [r7, #20]
 8007ad0:	f000 f81b 	bl	8007b0a <USBD_GetNextDesc>
 8007ad4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007ad6:	697b      	ldr	r3, [r7, #20]
 8007ad8:	785b      	ldrb	r3, [r3, #1]
 8007ada:	2b05      	cmp	r3, #5
 8007adc:	d108      	bne.n	8007af0 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007ade:	697b      	ldr	r3, [r7, #20]
 8007ae0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007ae2:	693b      	ldr	r3, [r7, #16]
 8007ae4:	789b      	ldrb	r3, [r3, #2]
 8007ae6:	78fa      	ldrb	r2, [r7, #3]
 8007ae8:	429a      	cmp	r2, r3
 8007aea:	d008      	beq.n	8007afe <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007aec:	2300      	movs	r3, #0
 8007aee:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	885b      	ldrh	r3, [r3, #2]
 8007af4:	b29a      	uxth	r2, r3
 8007af6:	897b      	ldrh	r3, [r7, #10]
 8007af8:	429a      	cmp	r2, r3
 8007afa:	d8e5      	bhi.n	8007ac8 <USBD_GetEpDesc+0x32>
 8007afc:	e000      	b.n	8007b00 <USBD_GetEpDesc+0x6a>
          break;
 8007afe:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007b00:	693b      	ldr	r3, [r7, #16]
}
 8007b02:	4618      	mov	r0, r3
 8007b04:	3718      	adds	r7, #24
 8007b06:	46bd      	mov	sp, r7
 8007b08:	bd80      	pop	{r7, pc}

08007b0a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007b0a:	b480      	push	{r7}
 8007b0c:	b085      	sub	sp, #20
 8007b0e:	af00      	add	r7, sp, #0
 8007b10:	6078      	str	r0, [r7, #4]
 8007b12:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	881a      	ldrh	r2, [r3, #0]
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	781b      	ldrb	r3, [r3, #0]
 8007b20:	b29b      	uxth	r3, r3
 8007b22:	4413      	add	r3, r2
 8007b24:	b29a      	uxth	r2, r3
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	781b      	ldrb	r3, [r3, #0]
 8007b2e:	461a      	mov	r2, r3
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	4413      	add	r3, r2
 8007b34:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007b36:	68fb      	ldr	r3, [r7, #12]
}
 8007b38:	4618      	mov	r0, r3
 8007b3a:	3714      	adds	r7, #20
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b42:	4770      	bx	lr

08007b44 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007b44:	b480      	push	{r7}
 8007b46:	b087      	sub	sp, #28
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007b50:	697b      	ldr	r3, [r7, #20]
 8007b52:	781b      	ldrb	r3, [r3, #0]
 8007b54:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007b56:	697b      	ldr	r3, [r7, #20]
 8007b58:	3301      	adds	r3, #1
 8007b5a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007b5c:	697b      	ldr	r3, [r7, #20]
 8007b5e:	781b      	ldrb	r3, [r3, #0]
 8007b60:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007b62:	8a3b      	ldrh	r3, [r7, #16]
 8007b64:	021b      	lsls	r3, r3, #8
 8007b66:	b21a      	sxth	r2, r3
 8007b68:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007b6c:	4313      	orrs	r3, r2
 8007b6e:	b21b      	sxth	r3, r3
 8007b70:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007b72:	89fb      	ldrh	r3, [r7, #14]
}
 8007b74:	4618      	mov	r0, r3
 8007b76:	371c      	adds	r7, #28
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7e:	4770      	bx	lr

08007b80 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b084      	sub	sp, #16
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
 8007b88:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	781b      	ldrb	r3, [r3, #0]
 8007b92:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007b96:	2b40      	cmp	r3, #64	; 0x40
 8007b98:	d005      	beq.n	8007ba6 <USBD_StdDevReq+0x26>
 8007b9a:	2b40      	cmp	r3, #64	; 0x40
 8007b9c:	d857      	bhi.n	8007c4e <USBD_StdDevReq+0xce>
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d00f      	beq.n	8007bc2 <USBD_StdDevReq+0x42>
 8007ba2:	2b20      	cmp	r3, #32
 8007ba4:	d153      	bne.n	8007c4e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	32ae      	adds	r2, #174	; 0xae
 8007bb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bb4:	689b      	ldr	r3, [r3, #8]
 8007bb6:	6839      	ldr	r1, [r7, #0]
 8007bb8:	6878      	ldr	r0, [r7, #4]
 8007bba:	4798      	blx	r3
 8007bbc:	4603      	mov	r3, r0
 8007bbe:	73fb      	strb	r3, [r7, #15]
      break;
 8007bc0:	e04a      	b.n	8007c58 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	785b      	ldrb	r3, [r3, #1]
 8007bc6:	2b09      	cmp	r3, #9
 8007bc8:	d83b      	bhi.n	8007c42 <USBD_StdDevReq+0xc2>
 8007bca:	a201      	add	r2, pc, #4	; (adr r2, 8007bd0 <USBD_StdDevReq+0x50>)
 8007bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bd0:	08007c25 	.word	0x08007c25
 8007bd4:	08007c39 	.word	0x08007c39
 8007bd8:	08007c43 	.word	0x08007c43
 8007bdc:	08007c2f 	.word	0x08007c2f
 8007be0:	08007c43 	.word	0x08007c43
 8007be4:	08007c03 	.word	0x08007c03
 8007be8:	08007bf9 	.word	0x08007bf9
 8007bec:	08007c43 	.word	0x08007c43
 8007bf0:	08007c1b 	.word	0x08007c1b
 8007bf4:	08007c0d 	.word	0x08007c0d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007bf8:	6839      	ldr	r1, [r7, #0]
 8007bfa:	6878      	ldr	r0, [r7, #4]
 8007bfc:	f000 fa3c 	bl	8008078 <USBD_GetDescriptor>
          break;
 8007c00:	e024      	b.n	8007c4c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007c02:	6839      	ldr	r1, [r7, #0]
 8007c04:	6878      	ldr	r0, [r7, #4]
 8007c06:	f000 fba1 	bl	800834c <USBD_SetAddress>
          break;
 8007c0a:	e01f      	b.n	8007c4c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007c0c:	6839      	ldr	r1, [r7, #0]
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	f000 fbe0 	bl	80083d4 <USBD_SetConfig>
 8007c14:	4603      	mov	r3, r0
 8007c16:	73fb      	strb	r3, [r7, #15]
          break;
 8007c18:	e018      	b.n	8007c4c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007c1a:	6839      	ldr	r1, [r7, #0]
 8007c1c:	6878      	ldr	r0, [r7, #4]
 8007c1e:	f000 fc83 	bl	8008528 <USBD_GetConfig>
          break;
 8007c22:	e013      	b.n	8007c4c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007c24:	6839      	ldr	r1, [r7, #0]
 8007c26:	6878      	ldr	r0, [r7, #4]
 8007c28:	f000 fcb4 	bl	8008594 <USBD_GetStatus>
          break;
 8007c2c:	e00e      	b.n	8007c4c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007c2e:	6839      	ldr	r1, [r7, #0]
 8007c30:	6878      	ldr	r0, [r7, #4]
 8007c32:	f000 fce3 	bl	80085fc <USBD_SetFeature>
          break;
 8007c36:	e009      	b.n	8007c4c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007c38:	6839      	ldr	r1, [r7, #0]
 8007c3a:	6878      	ldr	r0, [r7, #4]
 8007c3c:	f000 fd07 	bl	800864e <USBD_ClrFeature>
          break;
 8007c40:	e004      	b.n	8007c4c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007c42:	6839      	ldr	r1, [r7, #0]
 8007c44:	6878      	ldr	r0, [r7, #4]
 8007c46:	f000 fd5e 	bl	8008706 <USBD_CtlError>
          break;
 8007c4a:	bf00      	nop
      }
      break;
 8007c4c:	e004      	b.n	8007c58 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007c4e:	6839      	ldr	r1, [r7, #0]
 8007c50:	6878      	ldr	r0, [r7, #4]
 8007c52:	f000 fd58 	bl	8008706 <USBD_CtlError>
      break;
 8007c56:	bf00      	nop
  }

  return ret;
 8007c58:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	3710      	adds	r7, #16
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	bd80      	pop	{r7, pc}
 8007c62:	bf00      	nop

08007c64 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b084      	sub	sp, #16
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
 8007c6c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c6e:	2300      	movs	r3, #0
 8007c70:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	781b      	ldrb	r3, [r3, #0]
 8007c76:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007c7a:	2b40      	cmp	r3, #64	; 0x40
 8007c7c:	d005      	beq.n	8007c8a <USBD_StdItfReq+0x26>
 8007c7e:	2b40      	cmp	r3, #64	; 0x40
 8007c80:	d852      	bhi.n	8007d28 <USBD_StdItfReq+0xc4>
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d001      	beq.n	8007c8a <USBD_StdItfReq+0x26>
 8007c86:	2b20      	cmp	r3, #32
 8007c88:	d14e      	bne.n	8007d28 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c90:	b2db      	uxtb	r3, r3
 8007c92:	3b01      	subs	r3, #1
 8007c94:	2b02      	cmp	r3, #2
 8007c96:	d840      	bhi.n	8007d1a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	889b      	ldrh	r3, [r3, #4]
 8007c9c:	b2db      	uxtb	r3, r3
 8007c9e:	2b01      	cmp	r3, #1
 8007ca0:	d836      	bhi.n	8007d10 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	889b      	ldrh	r3, [r3, #4]
 8007ca6:	b2db      	uxtb	r3, r3
 8007ca8:	4619      	mov	r1, r3
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	f7ff fed9 	bl	8007a62 <USBD_CoreFindIF>
 8007cb0:	4603      	mov	r3, r0
 8007cb2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007cb4:	7bbb      	ldrb	r3, [r7, #14]
 8007cb6:	2bff      	cmp	r3, #255	; 0xff
 8007cb8:	d01d      	beq.n	8007cf6 <USBD_StdItfReq+0x92>
 8007cba:	7bbb      	ldrb	r3, [r7, #14]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d11a      	bne.n	8007cf6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007cc0:	7bba      	ldrb	r2, [r7, #14]
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	32ae      	adds	r2, #174	; 0xae
 8007cc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cca:	689b      	ldr	r3, [r3, #8]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d00f      	beq.n	8007cf0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007cd0:	7bba      	ldrb	r2, [r7, #14]
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007cd8:	7bba      	ldrb	r2, [r7, #14]
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	32ae      	adds	r2, #174	; 0xae
 8007cde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ce2:	689b      	ldr	r3, [r3, #8]
 8007ce4:	6839      	ldr	r1, [r7, #0]
 8007ce6:	6878      	ldr	r0, [r7, #4]
 8007ce8:	4798      	blx	r3
 8007cea:	4603      	mov	r3, r0
 8007cec:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007cee:	e004      	b.n	8007cfa <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007cf0:	2303      	movs	r3, #3
 8007cf2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007cf4:	e001      	b.n	8007cfa <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007cf6:	2303      	movs	r3, #3
 8007cf8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	88db      	ldrh	r3, [r3, #6]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d110      	bne.n	8007d24 <USBD_StdItfReq+0xc0>
 8007d02:	7bfb      	ldrb	r3, [r7, #15]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d10d      	bne.n	8007d24 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007d08:	6878      	ldr	r0, [r7, #4]
 8007d0a:	f000 fdc7 	bl	800889c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007d0e:	e009      	b.n	8007d24 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007d10:	6839      	ldr	r1, [r7, #0]
 8007d12:	6878      	ldr	r0, [r7, #4]
 8007d14:	f000 fcf7 	bl	8008706 <USBD_CtlError>
          break;
 8007d18:	e004      	b.n	8007d24 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007d1a:	6839      	ldr	r1, [r7, #0]
 8007d1c:	6878      	ldr	r0, [r7, #4]
 8007d1e:	f000 fcf2 	bl	8008706 <USBD_CtlError>
          break;
 8007d22:	e000      	b.n	8007d26 <USBD_StdItfReq+0xc2>
          break;
 8007d24:	bf00      	nop
      }
      break;
 8007d26:	e004      	b.n	8007d32 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007d28:	6839      	ldr	r1, [r7, #0]
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f000 fceb 	bl	8008706 <USBD_CtlError>
      break;
 8007d30:	bf00      	nop
  }

  return ret;
 8007d32:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d34:	4618      	mov	r0, r3
 8007d36:	3710      	adds	r7, #16
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	bd80      	pop	{r7, pc}

08007d3c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b084      	sub	sp, #16
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
 8007d44:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007d46:	2300      	movs	r3, #0
 8007d48:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	889b      	ldrh	r3, [r3, #4]
 8007d4e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	781b      	ldrb	r3, [r3, #0]
 8007d54:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007d58:	2b40      	cmp	r3, #64	; 0x40
 8007d5a:	d007      	beq.n	8007d6c <USBD_StdEPReq+0x30>
 8007d5c:	2b40      	cmp	r3, #64	; 0x40
 8007d5e:	f200 817f 	bhi.w	8008060 <USBD_StdEPReq+0x324>
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d02a      	beq.n	8007dbc <USBD_StdEPReq+0x80>
 8007d66:	2b20      	cmp	r3, #32
 8007d68:	f040 817a 	bne.w	8008060 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007d6c:	7bbb      	ldrb	r3, [r7, #14]
 8007d6e:	4619      	mov	r1, r3
 8007d70:	6878      	ldr	r0, [r7, #4]
 8007d72:	f7ff fe83 	bl	8007a7c <USBD_CoreFindEP>
 8007d76:	4603      	mov	r3, r0
 8007d78:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007d7a:	7b7b      	ldrb	r3, [r7, #13]
 8007d7c:	2bff      	cmp	r3, #255	; 0xff
 8007d7e:	f000 8174 	beq.w	800806a <USBD_StdEPReq+0x32e>
 8007d82:	7b7b      	ldrb	r3, [r7, #13]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	f040 8170 	bne.w	800806a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007d8a:	7b7a      	ldrb	r2, [r7, #13]
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007d92:	7b7a      	ldrb	r2, [r7, #13]
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	32ae      	adds	r2, #174	; 0xae
 8007d98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d9c:	689b      	ldr	r3, [r3, #8]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	f000 8163 	beq.w	800806a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007da4:	7b7a      	ldrb	r2, [r7, #13]
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	32ae      	adds	r2, #174	; 0xae
 8007daa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dae:	689b      	ldr	r3, [r3, #8]
 8007db0:	6839      	ldr	r1, [r7, #0]
 8007db2:	6878      	ldr	r0, [r7, #4]
 8007db4:	4798      	blx	r3
 8007db6:	4603      	mov	r3, r0
 8007db8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007dba:	e156      	b.n	800806a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	785b      	ldrb	r3, [r3, #1]
 8007dc0:	2b03      	cmp	r3, #3
 8007dc2:	d008      	beq.n	8007dd6 <USBD_StdEPReq+0x9a>
 8007dc4:	2b03      	cmp	r3, #3
 8007dc6:	f300 8145 	bgt.w	8008054 <USBD_StdEPReq+0x318>
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	f000 809b 	beq.w	8007f06 <USBD_StdEPReq+0x1ca>
 8007dd0:	2b01      	cmp	r3, #1
 8007dd2:	d03c      	beq.n	8007e4e <USBD_StdEPReq+0x112>
 8007dd4:	e13e      	b.n	8008054 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ddc:	b2db      	uxtb	r3, r3
 8007dde:	2b02      	cmp	r3, #2
 8007de0:	d002      	beq.n	8007de8 <USBD_StdEPReq+0xac>
 8007de2:	2b03      	cmp	r3, #3
 8007de4:	d016      	beq.n	8007e14 <USBD_StdEPReq+0xd8>
 8007de6:	e02c      	b.n	8007e42 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007de8:	7bbb      	ldrb	r3, [r7, #14]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d00d      	beq.n	8007e0a <USBD_StdEPReq+0xce>
 8007dee:	7bbb      	ldrb	r3, [r7, #14]
 8007df0:	2b80      	cmp	r3, #128	; 0x80
 8007df2:	d00a      	beq.n	8007e0a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007df4:	7bbb      	ldrb	r3, [r7, #14]
 8007df6:	4619      	mov	r1, r3
 8007df8:	6878      	ldr	r0, [r7, #4]
 8007dfa:	f003 ff6b 	bl	800bcd4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007dfe:	2180      	movs	r1, #128	; 0x80
 8007e00:	6878      	ldr	r0, [r7, #4]
 8007e02:	f003 ff67 	bl	800bcd4 <USBD_LL_StallEP>
 8007e06:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007e08:	e020      	b.n	8007e4c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007e0a:	6839      	ldr	r1, [r7, #0]
 8007e0c:	6878      	ldr	r0, [r7, #4]
 8007e0e:	f000 fc7a 	bl	8008706 <USBD_CtlError>
              break;
 8007e12:	e01b      	b.n	8007e4c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	885b      	ldrh	r3, [r3, #2]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d10e      	bne.n	8007e3a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007e1c:	7bbb      	ldrb	r3, [r7, #14]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d00b      	beq.n	8007e3a <USBD_StdEPReq+0xfe>
 8007e22:	7bbb      	ldrb	r3, [r7, #14]
 8007e24:	2b80      	cmp	r3, #128	; 0x80
 8007e26:	d008      	beq.n	8007e3a <USBD_StdEPReq+0xfe>
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	88db      	ldrh	r3, [r3, #6]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d104      	bne.n	8007e3a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007e30:	7bbb      	ldrb	r3, [r7, #14]
 8007e32:	4619      	mov	r1, r3
 8007e34:	6878      	ldr	r0, [r7, #4]
 8007e36:	f003 ff4d 	bl	800bcd4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007e3a:	6878      	ldr	r0, [r7, #4]
 8007e3c:	f000 fd2e 	bl	800889c <USBD_CtlSendStatus>

              break;
 8007e40:	e004      	b.n	8007e4c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007e42:	6839      	ldr	r1, [r7, #0]
 8007e44:	6878      	ldr	r0, [r7, #4]
 8007e46:	f000 fc5e 	bl	8008706 <USBD_CtlError>
              break;
 8007e4a:	bf00      	nop
          }
          break;
 8007e4c:	e107      	b.n	800805e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e54:	b2db      	uxtb	r3, r3
 8007e56:	2b02      	cmp	r3, #2
 8007e58:	d002      	beq.n	8007e60 <USBD_StdEPReq+0x124>
 8007e5a:	2b03      	cmp	r3, #3
 8007e5c:	d016      	beq.n	8007e8c <USBD_StdEPReq+0x150>
 8007e5e:	e04b      	b.n	8007ef8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007e60:	7bbb      	ldrb	r3, [r7, #14]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d00d      	beq.n	8007e82 <USBD_StdEPReq+0x146>
 8007e66:	7bbb      	ldrb	r3, [r7, #14]
 8007e68:	2b80      	cmp	r3, #128	; 0x80
 8007e6a:	d00a      	beq.n	8007e82 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007e6c:	7bbb      	ldrb	r3, [r7, #14]
 8007e6e:	4619      	mov	r1, r3
 8007e70:	6878      	ldr	r0, [r7, #4]
 8007e72:	f003 ff2f 	bl	800bcd4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007e76:	2180      	movs	r1, #128	; 0x80
 8007e78:	6878      	ldr	r0, [r7, #4]
 8007e7a:	f003 ff2b 	bl	800bcd4 <USBD_LL_StallEP>
 8007e7e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007e80:	e040      	b.n	8007f04 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007e82:	6839      	ldr	r1, [r7, #0]
 8007e84:	6878      	ldr	r0, [r7, #4]
 8007e86:	f000 fc3e 	bl	8008706 <USBD_CtlError>
              break;
 8007e8a:	e03b      	b.n	8007f04 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	885b      	ldrh	r3, [r3, #2]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d136      	bne.n	8007f02 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007e94:	7bbb      	ldrb	r3, [r7, #14]
 8007e96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d004      	beq.n	8007ea8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007e9e:	7bbb      	ldrb	r3, [r7, #14]
 8007ea0:	4619      	mov	r1, r3
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	f003 ff35 	bl	800bd12 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007ea8:	6878      	ldr	r0, [r7, #4]
 8007eaa:	f000 fcf7 	bl	800889c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007eae:	7bbb      	ldrb	r3, [r7, #14]
 8007eb0:	4619      	mov	r1, r3
 8007eb2:	6878      	ldr	r0, [r7, #4]
 8007eb4:	f7ff fde2 	bl	8007a7c <USBD_CoreFindEP>
 8007eb8:	4603      	mov	r3, r0
 8007eba:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007ebc:	7b7b      	ldrb	r3, [r7, #13]
 8007ebe:	2bff      	cmp	r3, #255	; 0xff
 8007ec0:	d01f      	beq.n	8007f02 <USBD_StdEPReq+0x1c6>
 8007ec2:	7b7b      	ldrb	r3, [r7, #13]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d11c      	bne.n	8007f02 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007ec8:	7b7a      	ldrb	r2, [r7, #13]
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007ed0:	7b7a      	ldrb	r2, [r7, #13]
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	32ae      	adds	r2, #174	; 0xae
 8007ed6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007eda:	689b      	ldr	r3, [r3, #8]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d010      	beq.n	8007f02 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007ee0:	7b7a      	ldrb	r2, [r7, #13]
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	32ae      	adds	r2, #174	; 0xae
 8007ee6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007eea:	689b      	ldr	r3, [r3, #8]
 8007eec:	6839      	ldr	r1, [r7, #0]
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	4798      	blx	r3
 8007ef2:	4603      	mov	r3, r0
 8007ef4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007ef6:	e004      	b.n	8007f02 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007ef8:	6839      	ldr	r1, [r7, #0]
 8007efa:	6878      	ldr	r0, [r7, #4]
 8007efc:	f000 fc03 	bl	8008706 <USBD_CtlError>
              break;
 8007f00:	e000      	b.n	8007f04 <USBD_StdEPReq+0x1c8>
              break;
 8007f02:	bf00      	nop
          }
          break;
 8007f04:	e0ab      	b.n	800805e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f0c:	b2db      	uxtb	r3, r3
 8007f0e:	2b02      	cmp	r3, #2
 8007f10:	d002      	beq.n	8007f18 <USBD_StdEPReq+0x1dc>
 8007f12:	2b03      	cmp	r3, #3
 8007f14:	d032      	beq.n	8007f7c <USBD_StdEPReq+0x240>
 8007f16:	e097      	b.n	8008048 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007f18:	7bbb      	ldrb	r3, [r7, #14]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d007      	beq.n	8007f2e <USBD_StdEPReq+0x1f2>
 8007f1e:	7bbb      	ldrb	r3, [r7, #14]
 8007f20:	2b80      	cmp	r3, #128	; 0x80
 8007f22:	d004      	beq.n	8007f2e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007f24:	6839      	ldr	r1, [r7, #0]
 8007f26:	6878      	ldr	r0, [r7, #4]
 8007f28:	f000 fbed 	bl	8008706 <USBD_CtlError>
                break;
 8007f2c:	e091      	b.n	8008052 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007f2e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	da0b      	bge.n	8007f4e <USBD_StdEPReq+0x212>
 8007f36:	7bbb      	ldrb	r3, [r7, #14]
 8007f38:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007f3c:	4613      	mov	r3, r2
 8007f3e:	009b      	lsls	r3, r3, #2
 8007f40:	4413      	add	r3, r2
 8007f42:	009b      	lsls	r3, r3, #2
 8007f44:	3310      	adds	r3, #16
 8007f46:	687a      	ldr	r2, [r7, #4]
 8007f48:	4413      	add	r3, r2
 8007f4a:	3304      	adds	r3, #4
 8007f4c:	e00b      	b.n	8007f66 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007f4e:	7bbb      	ldrb	r3, [r7, #14]
 8007f50:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007f54:	4613      	mov	r3, r2
 8007f56:	009b      	lsls	r3, r3, #2
 8007f58:	4413      	add	r3, r2
 8007f5a:	009b      	lsls	r3, r3, #2
 8007f5c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007f60:	687a      	ldr	r2, [r7, #4]
 8007f62:	4413      	add	r3, r2
 8007f64:	3304      	adds	r3, #4
 8007f66:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007f68:	68bb      	ldr	r3, [r7, #8]
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007f6e:	68bb      	ldr	r3, [r7, #8]
 8007f70:	2202      	movs	r2, #2
 8007f72:	4619      	mov	r1, r3
 8007f74:	6878      	ldr	r0, [r7, #4]
 8007f76:	f000 fc37 	bl	80087e8 <USBD_CtlSendData>
              break;
 8007f7a:	e06a      	b.n	8008052 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007f7c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	da11      	bge.n	8007fa8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007f84:	7bbb      	ldrb	r3, [r7, #14]
 8007f86:	f003 020f 	and.w	r2, r3, #15
 8007f8a:	6879      	ldr	r1, [r7, #4]
 8007f8c:	4613      	mov	r3, r2
 8007f8e:	009b      	lsls	r3, r3, #2
 8007f90:	4413      	add	r3, r2
 8007f92:	009b      	lsls	r3, r3, #2
 8007f94:	440b      	add	r3, r1
 8007f96:	3324      	adds	r3, #36	; 0x24
 8007f98:	881b      	ldrh	r3, [r3, #0]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d117      	bne.n	8007fce <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007f9e:	6839      	ldr	r1, [r7, #0]
 8007fa0:	6878      	ldr	r0, [r7, #4]
 8007fa2:	f000 fbb0 	bl	8008706 <USBD_CtlError>
                  break;
 8007fa6:	e054      	b.n	8008052 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007fa8:	7bbb      	ldrb	r3, [r7, #14]
 8007faa:	f003 020f 	and.w	r2, r3, #15
 8007fae:	6879      	ldr	r1, [r7, #4]
 8007fb0:	4613      	mov	r3, r2
 8007fb2:	009b      	lsls	r3, r3, #2
 8007fb4:	4413      	add	r3, r2
 8007fb6:	009b      	lsls	r3, r3, #2
 8007fb8:	440b      	add	r3, r1
 8007fba:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007fbe:	881b      	ldrh	r3, [r3, #0]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d104      	bne.n	8007fce <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007fc4:	6839      	ldr	r1, [r7, #0]
 8007fc6:	6878      	ldr	r0, [r7, #4]
 8007fc8:	f000 fb9d 	bl	8008706 <USBD_CtlError>
                  break;
 8007fcc:	e041      	b.n	8008052 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007fce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	da0b      	bge.n	8007fee <USBD_StdEPReq+0x2b2>
 8007fd6:	7bbb      	ldrb	r3, [r7, #14]
 8007fd8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007fdc:	4613      	mov	r3, r2
 8007fde:	009b      	lsls	r3, r3, #2
 8007fe0:	4413      	add	r3, r2
 8007fe2:	009b      	lsls	r3, r3, #2
 8007fe4:	3310      	adds	r3, #16
 8007fe6:	687a      	ldr	r2, [r7, #4]
 8007fe8:	4413      	add	r3, r2
 8007fea:	3304      	adds	r3, #4
 8007fec:	e00b      	b.n	8008006 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007fee:	7bbb      	ldrb	r3, [r7, #14]
 8007ff0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007ff4:	4613      	mov	r3, r2
 8007ff6:	009b      	lsls	r3, r3, #2
 8007ff8:	4413      	add	r3, r2
 8007ffa:	009b      	lsls	r3, r3, #2
 8007ffc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008000:	687a      	ldr	r2, [r7, #4]
 8008002:	4413      	add	r3, r2
 8008004:	3304      	adds	r3, #4
 8008006:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008008:	7bbb      	ldrb	r3, [r7, #14]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d002      	beq.n	8008014 <USBD_StdEPReq+0x2d8>
 800800e:	7bbb      	ldrb	r3, [r7, #14]
 8008010:	2b80      	cmp	r3, #128	; 0x80
 8008012:	d103      	bne.n	800801c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008014:	68bb      	ldr	r3, [r7, #8]
 8008016:	2200      	movs	r2, #0
 8008018:	601a      	str	r2, [r3, #0]
 800801a:	e00e      	b.n	800803a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800801c:	7bbb      	ldrb	r3, [r7, #14]
 800801e:	4619      	mov	r1, r3
 8008020:	6878      	ldr	r0, [r7, #4]
 8008022:	f003 fe95 	bl	800bd50 <USBD_LL_IsStallEP>
 8008026:	4603      	mov	r3, r0
 8008028:	2b00      	cmp	r3, #0
 800802a:	d003      	beq.n	8008034 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800802c:	68bb      	ldr	r3, [r7, #8]
 800802e:	2201      	movs	r2, #1
 8008030:	601a      	str	r2, [r3, #0]
 8008032:	e002      	b.n	800803a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008034:	68bb      	ldr	r3, [r7, #8]
 8008036:	2200      	movs	r2, #0
 8008038:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800803a:	68bb      	ldr	r3, [r7, #8]
 800803c:	2202      	movs	r2, #2
 800803e:	4619      	mov	r1, r3
 8008040:	6878      	ldr	r0, [r7, #4]
 8008042:	f000 fbd1 	bl	80087e8 <USBD_CtlSendData>
              break;
 8008046:	e004      	b.n	8008052 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008048:	6839      	ldr	r1, [r7, #0]
 800804a:	6878      	ldr	r0, [r7, #4]
 800804c:	f000 fb5b 	bl	8008706 <USBD_CtlError>
              break;
 8008050:	bf00      	nop
          }
          break;
 8008052:	e004      	b.n	800805e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008054:	6839      	ldr	r1, [r7, #0]
 8008056:	6878      	ldr	r0, [r7, #4]
 8008058:	f000 fb55 	bl	8008706 <USBD_CtlError>
          break;
 800805c:	bf00      	nop
      }
      break;
 800805e:	e005      	b.n	800806c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008060:	6839      	ldr	r1, [r7, #0]
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	f000 fb4f 	bl	8008706 <USBD_CtlError>
      break;
 8008068:	e000      	b.n	800806c <USBD_StdEPReq+0x330>
      break;
 800806a:	bf00      	nop
  }

  return ret;
 800806c:	7bfb      	ldrb	r3, [r7, #15]
}
 800806e:	4618      	mov	r0, r3
 8008070:	3710      	adds	r7, #16
 8008072:	46bd      	mov	sp, r7
 8008074:	bd80      	pop	{r7, pc}
	...

08008078 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b084      	sub	sp, #16
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
 8008080:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008082:	2300      	movs	r3, #0
 8008084:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008086:	2300      	movs	r3, #0
 8008088:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800808a:	2300      	movs	r3, #0
 800808c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	885b      	ldrh	r3, [r3, #2]
 8008092:	0a1b      	lsrs	r3, r3, #8
 8008094:	b29b      	uxth	r3, r3
 8008096:	3b01      	subs	r3, #1
 8008098:	2b06      	cmp	r3, #6
 800809a:	f200 8128 	bhi.w	80082ee <USBD_GetDescriptor+0x276>
 800809e:	a201      	add	r2, pc, #4	; (adr r2, 80080a4 <USBD_GetDescriptor+0x2c>)
 80080a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080a4:	080080c1 	.word	0x080080c1
 80080a8:	080080d9 	.word	0x080080d9
 80080ac:	08008119 	.word	0x08008119
 80080b0:	080082ef 	.word	0x080082ef
 80080b4:	080082ef 	.word	0x080082ef
 80080b8:	0800828f 	.word	0x0800828f
 80080bc:	080082bb 	.word	0x080082bb
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	687a      	ldr	r2, [r7, #4]
 80080ca:	7c12      	ldrb	r2, [r2, #16]
 80080cc:	f107 0108 	add.w	r1, r7, #8
 80080d0:	4610      	mov	r0, r2
 80080d2:	4798      	blx	r3
 80080d4:	60f8      	str	r0, [r7, #12]
      break;
 80080d6:	e112      	b.n	80082fe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	7c1b      	ldrb	r3, [r3, #16]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d10d      	bne.n	80080fc <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080e8:	f107 0208 	add.w	r2, r7, #8
 80080ec:	4610      	mov	r0, r2
 80080ee:	4798      	blx	r3
 80080f0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	3301      	adds	r3, #1
 80080f6:	2202      	movs	r2, #2
 80080f8:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80080fa:	e100      	b.n	80082fe <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008104:	f107 0208 	add.w	r2, r7, #8
 8008108:	4610      	mov	r0, r2
 800810a:	4798      	blx	r3
 800810c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	3301      	adds	r3, #1
 8008112:	2202      	movs	r2, #2
 8008114:	701a      	strb	r2, [r3, #0]
      break;
 8008116:	e0f2      	b.n	80082fe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	885b      	ldrh	r3, [r3, #2]
 800811c:	b2db      	uxtb	r3, r3
 800811e:	2b05      	cmp	r3, #5
 8008120:	f200 80ac 	bhi.w	800827c <USBD_GetDescriptor+0x204>
 8008124:	a201      	add	r2, pc, #4	; (adr r2, 800812c <USBD_GetDescriptor+0xb4>)
 8008126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800812a:	bf00      	nop
 800812c:	08008145 	.word	0x08008145
 8008130:	08008179 	.word	0x08008179
 8008134:	080081ad 	.word	0x080081ad
 8008138:	080081e1 	.word	0x080081e1
 800813c:	08008215 	.word	0x08008215
 8008140:	08008249 	.word	0x08008249
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800814a:	685b      	ldr	r3, [r3, #4]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d00b      	beq.n	8008168 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008156:	685b      	ldr	r3, [r3, #4]
 8008158:	687a      	ldr	r2, [r7, #4]
 800815a:	7c12      	ldrb	r2, [r2, #16]
 800815c:	f107 0108 	add.w	r1, r7, #8
 8008160:	4610      	mov	r0, r2
 8008162:	4798      	blx	r3
 8008164:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008166:	e091      	b.n	800828c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008168:	6839      	ldr	r1, [r7, #0]
 800816a:	6878      	ldr	r0, [r7, #4]
 800816c:	f000 facb 	bl	8008706 <USBD_CtlError>
            err++;
 8008170:	7afb      	ldrb	r3, [r7, #11]
 8008172:	3301      	adds	r3, #1
 8008174:	72fb      	strb	r3, [r7, #11]
          break;
 8008176:	e089      	b.n	800828c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800817e:	689b      	ldr	r3, [r3, #8]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d00b      	beq.n	800819c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800818a:	689b      	ldr	r3, [r3, #8]
 800818c:	687a      	ldr	r2, [r7, #4]
 800818e:	7c12      	ldrb	r2, [r2, #16]
 8008190:	f107 0108 	add.w	r1, r7, #8
 8008194:	4610      	mov	r0, r2
 8008196:	4798      	blx	r3
 8008198:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800819a:	e077      	b.n	800828c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800819c:	6839      	ldr	r1, [r7, #0]
 800819e:	6878      	ldr	r0, [r7, #4]
 80081a0:	f000 fab1 	bl	8008706 <USBD_CtlError>
            err++;
 80081a4:	7afb      	ldrb	r3, [r7, #11]
 80081a6:	3301      	adds	r3, #1
 80081a8:	72fb      	strb	r3, [r7, #11]
          break;
 80081aa:	e06f      	b.n	800828c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081b2:	68db      	ldr	r3, [r3, #12]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d00b      	beq.n	80081d0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081be:	68db      	ldr	r3, [r3, #12]
 80081c0:	687a      	ldr	r2, [r7, #4]
 80081c2:	7c12      	ldrb	r2, [r2, #16]
 80081c4:	f107 0108 	add.w	r1, r7, #8
 80081c8:	4610      	mov	r0, r2
 80081ca:	4798      	blx	r3
 80081cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80081ce:	e05d      	b.n	800828c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80081d0:	6839      	ldr	r1, [r7, #0]
 80081d2:	6878      	ldr	r0, [r7, #4]
 80081d4:	f000 fa97 	bl	8008706 <USBD_CtlError>
            err++;
 80081d8:	7afb      	ldrb	r3, [r7, #11]
 80081da:	3301      	adds	r3, #1
 80081dc:	72fb      	strb	r3, [r7, #11]
          break;
 80081de:	e055      	b.n	800828c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081e6:	691b      	ldr	r3, [r3, #16]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d00b      	beq.n	8008204 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081f2:	691b      	ldr	r3, [r3, #16]
 80081f4:	687a      	ldr	r2, [r7, #4]
 80081f6:	7c12      	ldrb	r2, [r2, #16]
 80081f8:	f107 0108 	add.w	r1, r7, #8
 80081fc:	4610      	mov	r0, r2
 80081fe:	4798      	blx	r3
 8008200:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008202:	e043      	b.n	800828c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008204:	6839      	ldr	r1, [r7, #0]
 8008206:	6878      	ldr	r0, [r7, #4]
 8008208:	f000 fa7d 	bl	8008706 <USBD_CtlError>
            err++;
 800820c:	7afb      	ldrb	r3, [r7, #11]
 800820e:	3301      	adds	r3, #1
 8008210:	72fb      	strb	r3, [r7, #11]
          break;
 8008212:	e03b      	b.n	800828c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800821a:	695b      	ldr	r3, [r3, #20]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d00b      	beq.n	8008238 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008226:	695b      	ldr	r3, [r3, #20]
 8008228:	687a      	ldr	r2, [r7, #4]
 800822a:	7c12      	ldrb	r2, [r2, #16]
 800822c:	f107 0108 	add.w	r1, r7, #8
 8008230:	4610      	mov	r0, r2
 8008232:	4798      	blx	r3
 8008234:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008236:	e029      	b.n	800828c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008238:	6839      	ldr	r1, [r7, #0]
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	f000 fa63 	bl	8008706 <USBD_CtlError>
            err++;
 8008240:	7afb      	ldrb	r3, [r7, #11]
 8008242:	3301      	adds	r3, #1
 8008244:	72fb      	strb	r3, [r7, #11]
          break;
 8008246:	e021      	b.n	800828c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800824e:	699b      	ldr	r3, [r3, #24]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d00b      	beq.n	800826c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800825a:	699b      	ldr	r3, [r3, #24]
 800825c:	687a      	ldr	r2, [r7, #4]
 800825e:	7c12      	ldrb	r2, [r2, #16]
 8008260:	f107 0108 	add.w	r1, r7, #8
 8008264:	4610      	mov	r0, r2
 8008266:	4798      	blx	r3
 8008268:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800826a:	e00f      	b.n	800828c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800826c:	6839      	ldr	r1, [r7, #0]
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	f000 fa49 	bl	8008706 <USBD_CtlError>
            err++;
 8008274:	7afb      	ldrb	r3, [r7, #11]
 8008276:	3301      	adds	r3, #1
 8008278:	72fb      	strb	r3, [r7, #11]
          break;
 800827a:	e007      	b.n	800828c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800827c:	6839      	ldr	r1, [r7, #0]
 800827e:	6878      	ldr	r0, [r7, #4]
 8008280:	f000 fa41 	bl	8008706 <USBD_CtlError>
          err++;
 8008284:	7afb      	ldrb	r3, [r7, #11]
 8008286:	3301      	adds	r3, #1
 8008288:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800828a:	bf00      	nop
      }
      break;
 800828c:	e037      	b.n	80082fe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	7c1b      	ldrb	r3, [r3, #16]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d109      	bne.n	80082aa <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800829c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800829e:	f107 0208 	add.w	r2, r7, #8
 80082a2:	4610      	mov	r0, r2
 80082a4:	4798      	blx	r3
 80082a6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80082a8:	e029      	b.n	80082fe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80082aa:	6839      	ldr	r1, [r7, #0]
 80082ac:	6878      	ldr	r0, [r7, #4]
 80082ae:	f000 fa2a 	bl	8008706 <USBD_CtlError>
        err++;
 80082b2:	7afb      	ldrb	r3, [r7, #11]
 80082b4:	3301      	adds	r3, #1
 80082b6:	72fb      	strb	r3, [r7, #11]
      break;
 80082b8:	e021      	b.n	80082fe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	7c1b      	ldrb	r3, [r3, #16]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d10d      	bne.n	80082de <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082ca:	f107 0208 	add.w	r2, r7, #8
 80082ce:	4610      	mov	r0, r2
 80082d0:	4798      	blx	r3
 80082d2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	3301      	adds	r3, #1
 80082d8:	2207      	movs	r2, #7
 80082da:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80082dc:	e00f      	b.n	80082fe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80082de:	6839      	ldr	r1, [r7, #0]
 80082e0:	6878      	ldr	r0, [r7, #4]
 80082e2:	f000 fa10 	bl	8008706 <USBD_CtlError>
        err++;
 80082e6:	7afb      	ldrb	r3, [r7, #11]
 80082e8:	3301      	adds	r3, #1
 80082ea:	72fb      	strb	r3, [r7, #11]
      break;
 80082ec:	e007      	b.n	80082fe <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80082ee:	6839      	ldr	r1, [r7, #0]
 80082f0:	6878      	ldr	r0, [r7, #4]
 80082f2:	f000 fa08 	bl	8008706 <USBD_CtlError>
      err++;
 80082f6:	7afb      	ldrb	r3, [r7, #11]
 80082f8:	3301      	adds	r3, #1
 80082fa:	72fb      	strb	r3, [r7, #11]
      break;
 80082fc:	bf00      	nop
  }

  if (err != 0U)
 80082fe:	7afb      	ldrb	r3, [r7, #11]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d11e      	bne.n	8008342 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008304:	683b      	ldr	r3, [r7, #0]
 8008306:	88db      	ldrh	r3, [r3, #6]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d016      	beq.n	800833a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800830c:	893b      	ldrh	r3, [r7, #8]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d00e      	beq.n	8008330 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	88da      	ldrh	r2, [r3, #6]
 8008316:	893b      	ldrh	r3, [r7, #8]
 8008318:	4293      	cmp	r3, r2
 800831a:	bf28      	it	cs
 800831c:	4613      	movcs	r3, r2
 800831e:	b29b      	uxth	r3, r3
 8008320:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008322:	893b      	ldrh	r3, [r7, #8]
 8008324:	461a      	mov	r2, r3
 8008326:	68f9      	ldr	r1, [r7, #12]
 8008328:	6878      	ldr	r0, [r7, #4]
 800832a:	f000 fa5d 	bl	80087e8 <USBD_CtlSendData>
 800832e:	e009      	b.n	8008344 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008330:	6839      	ldr	r1, [r7, #0]
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	f000 f9e7 	bl	8008706 <USBD_CtlError>
 8008338:	e004      	b.n	8008344 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800833a:	6878      	ldr	r0, [r7, #4]
 800833c:	f000 faae 	bl	800889c <USBD_CtlSendStatus>
 8008340:	e000      	b.n	8008344 <USBD_GetDescriptor+0x2cc>
    return;
 8008342:	bf00      	nop
  }
}
 8008344:	3710      	adds	r7, #16
 8008346:	46bd      	mov	sp, r7
 8008348:	bd80      	pop	{r7, pc}
 800834a:	bf00      	nop

0800834c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b084      	sub	sp, #16
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
 8008354:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	889b      	ldrh	r3, [r3, #4]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d131      	bne.n	80083c2 <USBD_SetAddress+0x76>
 800835e:	683b      	ldr	r3, [r7, #0]
 8008360:	88db      	ldrh	r3, [r3, #6]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d12d      	bne.n	80083c2 <USBD_SetAddress+0x76>
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	885b      	ldrh	r3, [r3, #2]
 800836a:	2b7f      	cmp	r3, #127	; 0x7f
 800836c:	d829      	bhi.n	80083c2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	885b      	ldrh	r3, [r3, #2]
 8008372:	b2db      	uxtb	r3, r3
 8008374:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008378:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008380:	b2db      	uxtb	r3, r3
 8008382:	2b03      	cmp	r3, #3
 8008384:	d104      	bne.n	8008390 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008386:	6839      	ldr	r1, [r7, #0]
 8008388:	6878      	ldr	r0, [r7, #4]
 800838a:	f000 f9bc 	bl	8008706 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800838e:	e01d      	b.n	80083cc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	7bfa      	ldrb	r2, [r7, #15]
 8008394:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008398:	7bfb      	ldrb	r3, [r7, #15]
 800839a:	4619      	mov	r1, r3
 800839c:	6878      	ldr	r0, [r7, #4]
 800839e:	f003 fd03 	bl	800bda8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80083a2:	6878      	ldr	r0, [r7, #4]
 80083a4:	f000 fa7a 	bl	800889c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80083a8:	7bfb      	ldrb	r3, [r7, #15]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d004      	beq.n	80083b8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	2202      	movs	r2, #2
 80083b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083b6:	e009      	b.n	80083cc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2201      	movs	r2, #1
 80083bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083c0:	e004      	b.n	80083cc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80083c2:	6839      	ldr	r1, [r7, #0]
 80083c4:	6878      	ldr	r0, [r7, #4]
 80083c6:	f000 f99e 	bl	8008706 <USBD_CtlError>
  }
}
 80083ca:	bf00      	nop
 80083cc:	bf00      	nop
 80083ce:	3710      	adds	r7, #16
 80083d0:	46bd      	mov	sp, r7
 80083d2:	bd80      	pop	{r7, pc}

080083d4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b084      	sub	sp, #16
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
 80083dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80083de:	2300      	movs	r3, #0
 80083e0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	885b      	ldrh	r3, [r3, #2]
 80083e6:	b2da      	uxtb	r2, r3
 80083e8:	4b4e      	ldr	r3, [pc, #312]	; (8008524 <USBD_SetConfig+0x150>)
 80083ea:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80083ec:	4b4d      	ldr	r3, [pc, #308]	; (8008524 <USBD_SetConfig+0x150>)
 80083ee:	781b      	ldrb	r3, [r3, #0]
 80083f0:	2b01      	cmp	r3, #1
 80083f2:	d905      	bls.n	8008400 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80083f4:	6839      	ldr	r1, [r7, #0]
 80083f6:	6878      	ldr	r0, [r7, #4]
 80083f8:	f000 f985 	bl	8008706 <USBD_CtlError>
    return USBD_FAIL;
 80083fc:	2303      	movs	r3, #3
 80083fe:	e08c      	b.n	800851a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008406:	b2db      	uxtb	r3, r3
 8008408:	2b02      	cmp	r3, #2
 800840a:	d002      	beq.n	8008412 <USBD_SetConfig+0x3e>
 800840c:	2b03      	cmp	r3, #3
 800840e:	d029      	beq.n	8008464 <USBD_SetConfig+0x90>
 8008410:	e075      	b.n	80084fe <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008412:	4b44      	ldr	r3, [pc, #272]	; (8008524 <USBD_SetConfig+0x150>)
 8008414:	781b      	ldrb	r3, [r3, #0]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d020      	beq.n	800845c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800841a:	4b42      	ldr	r3, [pc, #264]	; (8008524 <USBD_SetConfig+0x150>)
 800841c:	781b      	ldrb	r3, [r3, #0]
 800841e:	461a      	mov	r2, r3
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008424:	4b3f      	ldr	r3, [pc, #252]	; (8008524 <USBD_SetConfig+0x150>)
 8008426:	781b      	ldrb	r3, [r3, #0]
 8008428:	4619      	mov	r1, r3
 800842a:	6878      	ldr	r0, [r7, #4]
 800842c:	f7fe ffe7 	bl	80073fe <USBD_SetClassConfig>
 8008430:	4603      	mov	r3, r0
 8008432:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008434:	7bfb      	ldrb	r3, [r7, #15]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d008      	beq.n	800844c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800843a:	6839      	ldr	r1, [r7, #0]
 800843c:	6878      	ldr	r0, [r7, #4]
 800843e:	f000 f962 	bl	8008706 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	2202      	movs	r2, #2
 8008446:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800844a:	e065      	b.n	8008518 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800844c:	6878      	ldr	r0, [r7, #4]
 800844e:	f000 fa25 	bl	800889c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	2203      	movs	r2, #3
 8008456:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800845a:	e05d      	b.n	8008518 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800845c:	6878      	ldr	r0, [r7, #4]
 800845e:	f000 fa1d 	bl	800889c <USBD_CtlSendStatus>
      break;
 8008462:	e059      	b.n	8008518 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008464:	4b2f      	ldr	r3, [pc, #188]	; (8008524 <USBD_SetConfig+0x150>)
 8008466:	781b      	ldrb	r3, [r3, #0]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d112      	bne.n	8008492 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2202      	movs	r2, #2
 8008470:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008474:	4b2b      	ldr	r3, [pc, #172]	; (8008524 <USBD_SetConfig+0x150>)
 8008476:	781b      	ldrb	r3, [r3, #0]
 8008478:	461a      	mov	r2, r3
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800847e:	4b29      	ldr	r3, [pc, #164]	; (8008524 <USBD_SetConfig+0x150>)
 8008480:	781b      	ldrb	r3, [r3, #0]
 8008482:	4619      	mov	r1, r3
 8008484:	6878      	ldr	r0, [r7, #4]
 8008486:	f7fe ffd6 	bl	8007436 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800848a:	6878      	ldr	r0, [r7, #4]
 800848c:	f000 fa06 	bl	800889c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008490:	e042      	b.n	8008518 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008492:	4b24      	ldr	r3, [pc, #144]	; (8008524 <USBD_SetConfig+0x150>)
 8008494:	781b      	ldrb	r3, [r3, #0]
 8008496:	461a      	mov	r2, r3
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	685b      	ldr	r3, [r3, #4]
 800849c:	429a      	cmp	r2, r3
 800849e:	d02a      	beq.n	80084f6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	685b      	ldr	r3, [r3, #4]
 80084a4:	b2db      	uxtb	r3, r3
 80084a6:	4619      	mov	r1, r3
 80084a8:	6878      	ldr	r0, [r7, #4]
 80084aa:	f7fe ffc4 	bl	8007436 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80084ae:	4b1d      	ldr	r3, [pc, #116]	; (8008524 <USBD_SetConfig+0x150>)
 80084b0:	781b      	ldrb	r3, [r3, #0]
 80084b2:	461a      	mov	r2, r3
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80084b8:	4b1a      	ldr	r3, [pc, #104]	; (8008524 <USBD_SetConfig+0x150>)
 80084ba:	781b      	ldrb	r3, [r3, #0]
 80084bc:	4619      	mov	r1, r3
 80084be:	6878      	ldr	r0, [r7, #4]
 80084c0:	f7fe ff9d 	bl	80073fe <USBD_SetClassConfig>
 80084c4:	4603      	mov	r3, r0
 80084c6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80084c8:	7bfb      	ldrb	r3, [r7, #15]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d00f      	beq.n	80084ee <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80084ce:	6839      	ldr	r1, [r7, #0]
 80084d0:	6878      	ldr	r0, [r7, #4]
 80084d2:	f000 f918 	bl	8008706 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	685b      	ldr	r3, [r3, #4]
 80084da:	b2db      	uxtb	r3, r3
 80084dc:	4619      	mov	r1, r3
 80084de:	6878      	ldr	r0, [r7, #4]
 80084e0:	f7fe ffa9 	bl	8007436 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2202      	movs	r2, #2
 80084e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80084ec:	e014      	b.n	8008518 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80084ee:	6878      	ldr	r0, [r7, #4]
 80084f0:	f000 f9d4 	bl	800889c <USBD_CtlSendStatus>
      break;
 80084f4:	e010      	b.n	8008518 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80084f6:	6878      	ldr	r0, [r7, #4]
 80084f8:	f000 f9d0 	bl	800889c <USBD_CtlSendStatus>
      break;
 80084fc:	e00c      	b.n	8008518 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80084fe:	6839      	ldr	r1, [r7, #0]
 8008500:	6878      	ldr	r0, [r7, #4]
 8008502:	f000 f900 	bl	8008706 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008506:	4b07      	ldr	r3, [pc, #28]	; (8008524 <USBD_SetConfig+0x150>)
 8008508:	781b      	ldrb	r3, [r3, #0]
 800850a:	4619      	mov	r1, r3
 800850c:	6878      	ldr	r0, [r7, #4]
 800850e:	f7fe ff92 	bl	8007436 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008512:	2303      	movs	r3, #3
 8008514:	73fb      	strb	r3, [r7, #15]
      break;
 8008516:	bf00      	nop
  }

  return ret;
 8008518:	7bfb      	ldrb	r3, [r7, #15]
}
 800851a:	4618      	mov	r0, r3
 800851c:	3710      	adds	r7, #16
 800851e:	46bd      	mov	sp, r7
 8008520:	bd80      	pop	{r7, pc}
 8008522:	bf00      	nop
 8008524:	20000270 	.word	0x20000270

08008528 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008528:	b580      	push	{r7, lr}
 800852a:	b082      	sub	sp, #8
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
 8008530:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	88db      	ldrh	r3, [r3, #6]
 8008536:	2b01      	cmp	r3, #1
 8008538:	d004      	beq.n	8008544 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800853a:	6839      	ldr	r1, [r7, #0]
 800853c:	6878      	ldr	r0, [r7, #4]
 800853e:	f000 f8e2 	bl	8008706 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008542:	e023      	b.n	800858c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800854a:	b2db      	uxtb	r3, r3
 800854c:	2b02      	cmp	r3, #2
 800854e:	dc02      	bgt.n	8008556 <USBD_GetConfig+0x2e>
 8008550:	2b00      	cmp	r3, #0
 8008552:	dc03      	bgt.n	800855c <USBD_GetConfig+0x34>
 8008554:	e015      	b.n	8008582 <USBD_GetConfig+0x5a>
 8008556:	2b03      	cmp	r3, #3
 8008558:	d00b      	beq.n	8008572 <USBD_GetConfig+0x4a>
 800855a:	e012      	b.n	8008582 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2200      	movs	r2, #0
 8008560:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	3308      	adds	r3, #8
 8008566:	2201      	movs	r2, #1
 8008568:	4619      	mov	r1, r3
 800856a:	6878      	ldr	r0, [r7, #4]
 800856c:	f000 f93c 	bl	80087e8 <USBD_CtlSendData>
        break;
 8008570:	e00c      	b.n	800858c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	3304      	adds	r3, #4
 8008576:	2201      	movs	r2, #1
 8008578:	4619      	mov	r1, r3
 800857a:	6878      	ldr	r0, [r7, #4]
 800857c:	f000 f934 	bl	80087e8 <USBD_CtlSendData>
        break;
 8008580:	e004      	b.n	800858c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008582:	6839      	ldr	r1, [r7, #0]
 8008584:	6878      	ldr	r0, [r7, #4]
 8008586:	f000 f8be 	bl	8008706 <USBD_CtlError>
        break;
 800858a:	bf00      	nop
}
 800858c:	bf00      	nop
 800858e:	3708      	adds	r7, #8
 8008590:	46bd      	mov	sp, r7
 8008592:	bd80      	pop	{r7, pc}

08008594 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b082      	sub	sp, #8
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
 800859c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085a4:	b2db      	uxtb	r3, r3
 80085a6:	3b01      	subs	r3, #1
 80085a8:	2b02      	cmp	r3, #2
 80085aa:	d81e      	bhi.n	80085ea <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	88db      	ldrh	r3, [r3, #6]
 80085b0:	2b02      	cmp	r3, #2
 80085b2:	d004      	beq.n	80085be <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80085b4:	6839      	ldr	r1, [r7, #0]
 80085b6:	6878      	ldr	r0, [r7, #4]
 80085b8:	f000 f8a5 	bl	8008706 <USBD_CtlError>
        break;
 80085bc:	e01a      	b.n	80085f4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2201      	movs	r2, #1
 80085c2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d005      	beq.n	80085da <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	68db      	ldr	r3, [r3, #12]
 80085d2:	f043 0202 	orr.w	r2, r3, #2
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	330c      	adds	r3, #12
 80085de:	2202      	movs	r2, #2
 80085e0:	4619      	mov	r1, r3
 80085e2:	6878      	ldr	r0, [r7, #4]
 80085e4:	f000 f900 	bl	80087e8 <USBD_CtlSendData>
      break;
 80085e8:	e004      	b.n	80085f4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80085ea:	6839      	ldr	r1, [r7, #0]
 80085ec:	6878      	ldr	r0, [r7, #4]
 80085ee:	f000 f88a 	bl	8008706 <USBD_CtlError>
      break;
 80085f2:	bf00      	nop
  }
}
 80085f4:	bf00      	nop
 80085f6:	3708      	adds	r7, #8
 80085f8:	46bd      	mov	sp, r7
 80085fa:	bd80      	pop	{r7, pc}

080085fc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b082      	sub	sp, #8
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
 8008604:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008606:	683b      	ldr	r3, [r7, #0]
 8008608:	885b      	ldrh	r3, [r3, #2]
 800860a:	2b01      	cmp	r3, #1
 800860c:	d107      	bne.n	800861e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	2201      	movs	r2, #1
 8008612:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008616:	6878      	ldr	r0, [r7, #4]
 8008618:	f000 f940 	bl	800889c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800861c:	e013      	b.n	8008646 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	885b      	ldrh	r3, [r3, #2]
 8008622:	2b02      	cmp	r3, #2
 8008624:	d10b      	bne.n	800863e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	889b      	ldrh	r3, [r3, #4]
 800862a:	0a1b      	lsrs	r3, r3, #8
 800862c:	b29b      	uxth	r3, r3
 800862e:	b2da      	uxtb	r2, r3
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008636:	6878      	ldr	r0, [r7, #4]
 8008638:	f000 f930 	bl	800889c <USBD_CtlSendStatus>
}
 800863c:	e003      	b.n	8008646 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800863e:	6839      	ldr	r1, [r7, #0]
 8008640:	6878      	ldr	r0, [r7, #4]
 8008642:	f000 f860 	bl	8008706 <USBD_CtlError>
}
 8008646:	bf00      	nop
 8008648:	3708      	adds	r7, #8
 800864a:	46bd      	mov	sp, r7
 800864c:	bd80      	pop	{r7, pc}

0800864e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800864e:	b580      	push	{r7, lr}
 8008650:	b082      	sub	sp, #8
 8008652:	af00      	add	r7, sp, #0
 8008654:	6078      	str	r0, [r7, #4]
 8008656:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800865e:	b2db      	uxtb	r3, r3
 8008660:	3b01      	subs	r3, #1
 8008662:	2b02      	cmp	r3, #2
 8008664:	d80b      	bhi.n	800867e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	885b      	ldrh	r3, [r3, #2]
 800866a:	2b01      	cmp	r3, #1
 800866c:	d10c      	bne.n	8008688 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2200      	movs	r2, #0
 8008672:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008676:	6878      	ldr	r0, [r7, #4]
 8008678:	f000 f910 	bl	800889c <USBD_CtlSendStatus>
      }
      break;
 800867c:	e004      	b.n	8008688 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800867e:	6839      	ldr	r1, [r7, #0]
 8008680:	6878      	ldr	r0, [r7, #4]
 8008682:	f000 f840 	bl	8008706 <USBD_CtlError>
      break;
 8008686:	e000      	b.n	800868a <USBD_ClrFeature+0x3c>
      break;
 8008688:	bf00      	nop
  }
}
 800868a:	bf00      	nop
 800868c:	3708      	adds	r7, #8
 800868e:	46bd      	mov	sp, r7
 8008690:	bd80      	pop	{r7, pc}

08008692 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008692:	b580      	push	{r7, lr}
 8008694:	b084      	sub	sp, #16
 8008696:	af00      	add	r7, sp, #0
 8008698:	6078      	str	r0, [r7, #4]
 800869a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800869c:	683b      	ldr	r3, [r7, #0]
 800869e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	781a      	ldrb	r2, [r3, #0]
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	3301      	adds	r3, #1
 80086ac:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	781a      	ldrb	r2, [r3, #0]
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	3301      	adds	r3, #1
 80086ba:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80086bc:	68f8      	ldr	r0, [r7, #12]
 80086be:	f7ff fa41 	bl	8007b44 <SWAPBYTE>
 80086c2:	4603      	mov	r3, r0
 80086c4:	461a      	mov	r2, r3
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	3301      	adds	r3, #1
 80086ce:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	3301      	adds	r3, #1
 80086d4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80086d6:	68f8      	ldr	r0, [r7, #12]
 80086d8:	f7ff fa34 	bl	8007b44 <SWAPBYTE>
 80086dc:	4603      	mov	r3, r0
 80086de:	461a      	mov	r2, r3
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	3301      	adds	r3, #1
 80086e8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	3301      	adds	r3, #1
 80086ee:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80086f0:	68f8      	ldr	r0, [r7, #12]
 80086f2:	f7ff fa27 	bl	8007b44 <SWAPBYTE>
 80086f6:	4603      	mov	r3, r0
 80086f8:	461a      	mov	r2, r3
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	80da      	strh	r2, [r3, #6]
}
 80086fe:	bf00      	nop
 8008700:	3710      	adds	r7, #16
 8008702:	46bd      	mov	sp, r7
 8008704:	bd80      	pop	{r7, pc}

08008706 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008706:	b580      	push	{r7, lr}
 8008708:	b082      	sub	sp, #8
 800870a:	af00      	add	r7, sp, #0
 800870c:	6078      	str	r0, [r7, #4]
 800870e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008710:	2180      	movs	r1, #128	; 0x80
 8008712:	6878      	ldr	r0, [r7, #4]
 8008714:	f003 fade 	bl	800bcd4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008718:	2100      	movs	r1, #0
 800871a:	6878      	ldr	r0, [r7, #4]
 800871c:	f003 fada 	bl	800bcd4 <USBD_LL_StallEP>
}
 8008720:	bf00      	nop
 8008722:	3708      	adds	r7, #8
 8008724:	46bd      	mov	sp, r7
 8008726:	bd80      	pop	{r7, pc}

08008728 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b086      	sub	sp, #24
 800872c:	af00      	add	r7, sp, #0
 800872e:	60f8      	str	r0, [r7, #12]
 8008730:	60b9      	str	r1, [r7, #8]
 8008732:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008734:	2300      	movs	r3, #0
 8008736:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d036      	beq.n	80087ac <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008742:	6938      	ldr	r0, [r7, #16]
 8008744:	f000 f836 	bl	80087b4 <USBD_GetLen>
 8008748:	4603      	mov	r3, r0
 800874a:	3301      	adds	r3, #1
 800874c:	b29b      	uxth	r3, r3
 800874e:	005b      	lsls	r3, r3, #1
 8008750:	b29a      	uxth	r2, r3
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008756:	7dfb      	ldrb	r3, [r7, #23]
 8008758:	68ba      	ldr	r2, [r7, #8]
 800875a:	4413      	add	r3, r2
 800875c:	687a      	ldr	r2, [r7, #4]
 800875e:	7812      	ldrb	r2, [r2, #0]
 8008760:	701a      	strb	r2, [r3, #0]
  idx++;
 8008762:	7dfb      	ldrb	r3, [r7, #23]
 8008764:	3301      	adds	r3, #1
 8008766:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008768:	7dfb      	ldrb	r3, [r7, #23]
 800876a:	68ba      	ldr	r2, [r7, #8]
 800876c:	4413      	add	r3, r2
 800876e:	2203      	movs	r2, #3
 8008770:	701a      	strb	r2, [r3, #0]
  idx++;
 8008772:	7dfb      	ldrb	r3, [r7, #23]
 8008774:	3301      	adds	r3, #1
 8008776:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008778:	e013      	b.n	80087a2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800877a:	7dfb      	ldrb	r3, [r7, #23]
 800877c:	68ba      	ldr	r2, [r7, #8]
 800877e:	4413      	add	r3, r2
 8008780:	693a      	ldr	r2, [r7, #16]
 8008782:	7812      	ldrb	r2, [r2, #0]
 8008784:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008786:	693b      	ldr	r3, [r7, #16]
 8008788:	3301      	adds	r3, #1
 800878a:	613b      	str	r3, [r7, #16]
    idx++;
 800878c:	7dfb      	ldrb	r3, [r7, #23]
 800878e:	3301      	adds	r3, #1
 8008790:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008792:	7dfb      	ldrb	r3, [r7, #23]
 8008794:	68ba      	ldr	r2, [r7, #8]
 8008796:	4413      	add	r3, r2
 8008798:	2200      	movs	r2, #0
 800879a:	701a      	strb	r2, [r3, #0]
    idx++;
 800879c:	7dfb      	ldrb	r3, [r7, #23]
 800879e:	3301      	adds	r3, #1
 80087a0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80087a2:	693b      	ldr	r3, [r7, #16]
 80087a4:	781b      	ldrb	r3, [r3, #0]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d1e7      	bne.n	800877a <USBD_GetString+0x52>
 80087aa:	e000      	b.n	80087ae <USBD_GetString+0x86>
    return;
 80087ac:	bf00      	nop
  }
}
 80087ae:	3718      	adds	r7, #24
 80087b0:	46bd      	mov	sp, r7
 80087b2:	bd80      	pop	{r7, pc}

080087b4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80087b4:	b480      	push	{r7}
 80087b6:	b085      	sub	sp, #20
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80087bc:	2300      	movs	r3, #0
 80087be:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80087c4:	e005      	b.n	80087d2 <USBD_GetLen+0x1e>
  {
    len++;
 80087c6:	7bfb      	ldrb	r3, [r7, #15]
 80087c8:	3301      	adds	r3, #1
 80087ca:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80087cc:	68bb      	ldr	r3, [r7, #8]
 80087ce:	3301      	adds	r3, #1
 80087d0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80087d2:	68bb      	ldr	r3, [r7, #8]
 80087d4:	781b      	ldrb	r3, [r3, #0]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d1f5      	bne.n	80087c6 <USBD_GetLen+0x12>
  }

  return len;
 80087da:	7bfb      	ldrb	r3, [r7, #15]
}
 80087dc:	4618      	mov	r0, r3
 80087de:	3714      	adds	r7, #20
 80087e0:	46bd      	mov	sp, r7
 80087e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e6:	4770      	bx	lr

080087e8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b084      	sub	sp, #16
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	60f8      	str	r0, [r7, #12]
 80087f0:	60b9      	str	r1, [r7, #8]
 80087f2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	2202      	movs	r2, #2
 80087f8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	687a      	ldr	r2, [r7, #4]
 8008800:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	687a      	ldr	r2, [r7, #4]
 8008806:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	68ba      	ldr	r2, [r7, #8]
 800880c:	2100      	movs	r1, #0
 800880e:	68f8      	ldr	r0, [r7, #12]
 8008810:	f003 fae9 	bl	800bde6 <USBD_LL_Transmit>

  return USBD_OK;
 8008814:	2300      	movs	r3, #0
}
 8008816:	4618      	mov	r0, r3
 8008818:	3710      	adds	r7, #16
 800881a:	46bd      	mov	sp, r7
 800881c:	bd80      	pop	{r7, pc}

0800881e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800881e:	b580      	push	{r7, lr}
 8008820:	b084      	sub	sp, #16
 8008822:	af00      	add	r7, sp, #0
 8008824:	60f8      	str	r0, [r7, #12]
 8008826:	60b9      	str	r1, [r7, #8]
 8008828:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	68ba      	ldr	r2, [r7, #8]
 800882e:	2100      	movs	r1, #0
 8008830:	68f8      	ldr	r0, [r7, #12]
 8008832:	f003 fad8 	bl	800bde6 <USBD_LL_Transmit>

  return USBD_OK;
 8008836:	2300      	movs	r3, #0
}
 8008838:	4618      	mov	r0, r3
 800883a:	3710      	adds	r7, #16
 800883c:	46bd      	mov	sp, r7
 800883e:	bd80      	pop	{r7, pc}

08008840 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008840:	b580      	push	{r7, lr}
 8008842:	b084      	sub	sp, #16
 8008844:	af00      	add	r7, sp, #0
 8008846:	60f8      	str	r0, [r7, #12]
 8008848:	60b9      	str	r1, [r7, #8]
 800884a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	2203      	movs	r2, #3
 8008850:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	687a      	ldr	r2, [r7, #4]
 8008858:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	687a      	ldr	r2, [r7, #4]
 8008860:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	68ba      	ldr	r2, [r7, #8]
 8008868:	2100      	movs	r1, #0
 800886a:	68f8      	ldr	r0, [r7, #12]
 800886c:	f003 fadc 	bl	800be28 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008870:	2300      	movs	r3, #0
}
 8008872:	4618      	mov	r0, r3
 8008874:	3710      	adds	r7, #16
 8008876:	46bd      	mov	sp, r7
 8008878:	bd80      	pop	{r7, pc}

0800887a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800887a:	b580      	push	{r7, lr}
 800887c:	b084      	sub	sp, #16
 800887e:	af00      	add	r7, sp, #0
 8008880:	60f8      	str	r0, [r7, #12]
 8008882:	60b9      	str	r1, [r7, #8]
 8008884:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	68ba      	ldr	r2, [r7, #8]
 800888a:	2100      	movs	r1, #0
 800888c:	68f8      	ldr	r0, [r7, #12]
 800888e:	f003 facb 	bl	800be28 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008892:	2300      	movs	r3, #0
}
 8008894:	4618      	mov	r0, r3
 8008896:	3710      	adds	r7, #16
 8008898:	46bd      	mov	sp, r7
 800889a:	bd80      	pop	{r7, pc}

0800889c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b082      	sub	sp, #8
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2204      	movs	r2, #4
 80088a8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80088ac:	2300      	movs	r3, #0
 80088ae:	2200      	movs	r2, #0
 80088b0:	2100      	movs	r1, #0
 80088b2:	6878      	ldr	r0, [r7, #4]
 80088b4:	f003 fa97 	bl	800bde6 <USBD_LL_Transmit>

  return USBD_OK;
 80088b8:	2300      	movs	r3, #0
}
 80088ba:	4618      	mov	r0, r3
 80088bc:	3708      	adds	r7, #8
 80088be:	46bd      	mov	sp, r7
 80088c0:	bd80      	pop	{r7, pc}

080088c2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80088c2:	b580      	push	{r7, lr}
 80088c4:	b082      	sub	sp, #8
 80088c6:	af00      	add	r7, sp, #0
 80088c8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	2205      	movs	r2, #5
 80088ce:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80088d2:	2300      	movs	r3, #0
 80088d4:	2200      	movs	r2, #0
 80088d6:	2100      	movs	r1, #0
 80088d8:	6878      	ldr	r0, [r7, #4]
 80088da:	f003 faa5 	bl	800be28 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80088de:	2300      	movs	r3, #0
}
 80088e0:	4618      	mov	r0, r3
 80088e2:	3708      	adds	r7, #8
 80088e4:	46bd      	mov	sp, r7
 80088e6:	bd80      	pop	{r7, pc}

080088e8 <__NVIC_SetPriority>:
{
 80088e8:	b480      	push	{r7}
 80088ea:	b083      	sub	sp, #12
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	4603      	mov	r3, r0
 80088f0:	6039      	str	r1, [r7, #0]
 80088f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80088f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	db0a      	blt.n	8008912 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80088fc:	683b      	ldr	r3, [r7, #0]
 80088fe:	b2da      	uxtb	r2, r3
 8008900:	490c      	ldr	r1, [pc, #48]	; (8008934 <__NVIC_SetPriority+0x4c>)
 8008902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008906:	0112      	lsls	r2, r2, #4
 8008908:	b2d2      	uxtb	r2, r2
 800890a:	440b      	add	r3, r1
 800890c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008910:	e00a      	b.n	8008928 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008912:	683b      	ldr	r3, [r7, #0]
 8008914:	b2da      	uxtb	r2, r3
 8008916:	4908      	ldr	r1, [pc, #32]	; (8008938 <__NVIC_SetPriority+0x50>)
 8008918:	79fb      	ldrb	r3, [r7, #7]
 800891a:	f003 030f 	and.w	r3, r3, #15
 800891e:	3b04      	subs	r3, #4
 8008920:	0112      	lsls	r2, r2, #4
 8008922:	b2d2      	uxtb	r2, r2
 8008924:	440b      	add	r3, r1
 8008926:	761a      	strb	r2, [r3, #24]
}
 8008928:	bf00      	nop
 800892a:	370c      	adds	r7, #12
 800892c:	46bd      	mov	sp, r7
 800892e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008932:	4770      	bx	lr
 8008934:	e000e100 	.word	0xe000e100
 8008938:	e000ed00 	.word	0xe000ed00

0800893c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800893c:	b580      	push	{r7, lr}
 800893e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8008940:	4b05      	ldr	r3, [pc, #20]	; (8008958 <SysTick_Handler+0x1c>)
 8008942:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008944:	f001 fd62 	bl	800a40c <xTaskGetSchedulerState>
 8008948:	4603      	mov	r3, r0
 800894a:	2b01      	cmp	r3, #1
 800894c:	d001      	beq.n	8008952 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800894e:	f002 fb4b 	bl	800afe8 <xPortSysTickHandler>
  }
}
 8008952:	bf00      	nop
 8008954:	bd80      	pop	{r7, pc}
 8008956:	bf00      	nop
 8008958:	e000e010 	.word	0xe000e010

0800895c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800895c:	b580      	push	{r7, lr}
 800895e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008960:	2100      	movs	r1, #0
 8008962:	f06f 0004 	mvn.w	r0, #4
 8008966:	f7ff ffbf 	bl	80088e8 <__NVIC_SetPriority>
#endif
}
 800896a:	bf00      	nop
 800896c:	bd80      	pop	{r7, pc}
	...

08008970 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008970:	b480      	push	{r7}
 8008972:	b083      	sub	sp, #12
 8008974:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008976:	f3ef 8305 	mrs	r3, IPSR
 800897a:	603b      	str	r3, [r7, #0]
  return(result);
 800897c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800897e:	2b00      	cmp	r3, #0
 8008980:	d003      	beq.n	800898a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008982:	f06f 0305 	mvn.w	r3, #5
 8008986:	607b      	str	r3, [r7, #4]
 8008988:	e00c      	b.n	80089a4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800898a:	4b0a      	ldr	r3, [pc, #40]	; (80089b4 <osKernelInitialize+0x44>)
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d105      	bne.n	800899e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008992:	4b08      	ldr	r3, [pc, #32]	; (80089b4 <osKernelInitialize+0x44>)
 8008994:	2201      	movs	r2, #1
 8008996:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008998:	2300      	movs	r3, #0
 800899a:	607b      	str	r3, [r7, #4]
 800899c:	e002      	b.n	80089a4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800899e:	f04f 33ff 	mov.w	r3, #4294967295
 80089a2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80089a4:	687b      	ldr	r3, [r7, #4]
}
 80089a6:	4618      	mov	r0, r3
 80089a8:	370c      	adds	r7, #12
 80089aa:	46bd      	mov	sp, r7
 80089ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b0:	4770      	bx	lr
 80089b2:	bf00      	nop
 80089b4:	20000274 	.word	0x20000274

080089b8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b082      	sub	sp, #8
 80089bc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80089be:	f3ef 8305 	mrs	r3, IPSR
 80089c2:	603b      	str	r3, [r7, #0]
  return(result);
 80089c4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d003      	beq.n	80089d2 <osKernelStart+0x1a>
    stat = osErrorISR;
 80089ca:	f06f 0305 	mvn.w	r3, #5
 80089ce:	607b      	str	r3, [r7, #4]
 80089d0:	e010      	b.n	80089f4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80089d2:	4b0b      	ldr	r3, [pc, #44]	; (8008a00 <osKernelStart+0x48>)
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	2b01      	cmp	r3, #1
 80089d8:	d109      	bne.n	80089ee <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80089da:	f7ff ffbf 	bl	800895c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80089de:	4b08      	ldr	r3, [pc, #32]	; (8008a00 <osKernelStart+0x48>)
 80089e0:	2202      	movs	r2, #2
 80089e2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80089e4:	f001 f8b6 	bl	8009b54 <vTaskStartScheduler>
      stat = osOK;
 80089e8:	2300      	movs	r3, #0
 80089ea:	607b      	str	r3, [r7, #4]
 80089ec:	e002      	b.n	80089f4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80089ee:	f04f 33ff 	mov.w	r3, #4294967295
 80089f2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80089f4:	687b      	ldr	r3, [r7, #4]
}
 80089f6:	4618      	mov	r0, r3
 80089f8:	3708      	adds	r7, #8
 80089fa:	46bd      	mov	sp, r7
 80089fc:	bd80      	pop	{r7, pc}
 80089fe:	bf00      	nop
 8008a00:	20000274 	.word	0x20000274

08008a04 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b08e      	sub	sp, #56	; 0x38
 8008a08:	af04      	add	r7, sp, #16
 8008a0a:	60f8      	str	r0, [r7, #12]
 8008a0c:	60b9      	str	r1, [r7, #8]
 8008a0e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008a10:	2300      	movs	r3, #0
 8008a12:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008a14:	f3ef 8305 	mrs	r3, IPSR
 8008a18:	617b      	str	r3, [r7, #20]
  return(result);
 8008a1a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d17e      	bne.n	8008b1e <osThreadNew+0x11a>
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d07b      	beq.n	8008b1e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8008a26:	2380      	movs	r3, #128	; 0x80
 8008a28:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008a2a:	2318      	movs	r3, #24
 8008a2c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008a2e:	2300      	movs	r3, #0
 8008a30:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8008a32:	f04f 33ff 	mov.w	r3, #4294967295
 8008a36:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d045      	beq.n	8008aca <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d002      	beq.n	8008a4c <osThreadNew+0x48>
        name = attr->name;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	699b      	ldr	r3, [r3, #24]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d002      	beq.n	8008a5a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	699b      	ldr	r3, [r3, #24]
 8008a58:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008a5a:	69fb      	ldr	r3, [r7, #28]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d008      	beq.n	8008a72 <osThreadNew+0x6e>
 8008a60:	69fb      	ldr	r3, [r7, #28]
 8008a62:	2b38      	cmp	r3, #56	; 0x38
 8008a64:	d805      	bhi.n	8008a72 <osThreadNew+0x6e>
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	685b      	ldr	r3, [r3, #4]
 8008a6a:	f003 0301 	and.w	r3, r3, #1
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d001      	beq.n	8008a76 <osThreadNew+0x72>
        return (NULL);
 8008a72:	2300      	movs	r3, #0
 8008a74:	e054      	b.n	8008b20 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	695b      	ldr	r3, [r3, #20]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d003      	beq.n	8008a86 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	695b      	ldr	r3, [r3, #20]
 8008a82:	089b      	lsrs	r3, r3, #2
 8008a84:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	689b      	ldr	r3, [r3, #8]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d00e      	beq.n	8008aac <osThreadNew+0xa8>
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	68db      	ldr	r3, [r3, #12]
 8008a92:	2ba7      	cmp	r3, #167	; 0xa7
 8008a94:	d90a      	bls.n	8008aac <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d006      	beq.n	8008aac <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	695b      	ldr	r3, [r3, #20]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d002      	beq.n	8008aac <osThreadNew+0xa8>
        mem = 1;
 8008aa6:	2301      	movs	r3, #1
 8008aa8:	61bb      	str	r3, [r7, #24]
 8008aaa:	e010      	b.n	8008ace <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	689b      	ldr	r3, [r3, #8]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d10c      	bne.n	8008ace <osThreadNew+0xca>
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	68db      	ldr	r3, [r3, #12]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d108      	bne.n	8008ace <osThreadNew+0xca>
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	691b      	ldr	r3, [r3, #16]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d104      	bne.n	8008ace <osThreadNew+0xca>
          mem = 0;
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	61bb      	str	r3, [r7, #24]
 8008ac8:	e001      	b.n	8008ace <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8008aca:	2300      	movs	r3, #0
 8008acc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008ace:	69bb      	ldr	r3, [r7, #24]
 8008ad0:	2b01      	cmp	r3, #1
 8008ad2:	d110      	bne.n	8008af6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008ad8:	687a      	ldr	r2, [r7, #4]
 8008ada:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008adc:	9202      	str	r2, [sp, #8]
 8008ade:	9301      	str	r3, [sp, #4]
 8008ae0:	69fb      	ldr	r3, [r7, #28]
 8008ae2:	9300      	str	r3, [sp, #0]
 8008ae4:	68bb      	ldr	r3, [r7, #8]
 8008ae6:	6a3a      	ldr	r2, [r7, #32]
 8008ae8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008aea:	68f8      	ldr	r0, [r7, #12]
 8008aec:	f000 fe46 	bl	800977c <xTaskCreateStatic>
 8008af0:	4603      	mov	r3, r0
 8008af2:	613b      	str	r3, [r7, #16]
 8008af4:	e013      	b.n	8008b1e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8008af6:	69bb      	ldr	r3, [r7, #24]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d110      	bne.n	8008b1e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008afc:	6a3b      	ldr	r3, [r7, #32]
 8008afe:	b29a      	uxth	r2, r3
 8008b00:	f107 0310 	add.w	r3, r7, #16
 8008b04:	9301      	str	r3, [sp, #4]
 8008b06:	69fb      	ldr	r3, [r7, #28]
 8008b08:	9300      	str	r3, [sp, #0]
 8008b0a:	68bb      	ldr	r3, [r7, #8]
 8008b0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008b0e:	68f8      	ldr	r0, [r7, #12]
 8008b10:	f000 fe91 	bl	8009836 <xTaskCreate>
 8008b14:	4603      	mov	r3, r0
 8008b16:	2b01      	cmp	r3, #1
 8008b18:	d001      	beq.n	8008b1e <osThreadNew+0x11a>
            hTask = NULL;
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008b1e:	693b      	ldr	r3, [r7, #16]
}
 8008b20:	4618      	mov	r0, r3
 8008b22:	3728      	adds	r7, #40	; 0x28
 8008b24:	46bd      	mov	sp, r7
 8008b26:	bd80      	pop	{r7, pc}

08008b28 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b084      	sub	sp, #16
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008b30:	f3ef 8305 	mrs	r3, IPSR
 8008b34:	60bb      	str	r3, [r7, #8]
  return(result);
 8008b36:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d003      	beq.n	8008b44 <osDelay+0x1c>
    stat = osErrorISR;
 8008b3c:	f06f 0305 	mvn.w	r3, #5
 8008b40:	60fb      	str	r3, [r7, #12]
 8008b42:	e007      	b.n	8008b54 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008b44:	2300      	movs	r3, #0
 8008b46:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d002      	beq.n	8008b54 <osDelay+0x2c>
      vTaskDelay(ticks);
 8008b4e:	6878      	ldr	r0, [r7, #4]
 8008b50:	f000 ffcc 	bl	8009aec <vTaskDelay>
    }
  }

  return (stat);
 8008b54:	68fb      	ldr	r3, [r7, #12]
}
 8008b56:	4618      	mov	r0, r3
 8008b58:	3710      	adds	r7, #16
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	bd80      	pop	{r7, pc}
	...

08008b60 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008b60:	b480      	push	{r7}
 8008b62:	b085      	sub	sp, #20
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	60f8      	str	r0, [r7, #12]
 8008b68:	60b9      	str	r1, [r7, #8]
 8008b6a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	4a07      	ldr	r2, [pc, #28]	; (8008b8c <vApplicationGetIdleTaskMemory+0x2c>)
 8008b70:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008b72:	68bb      	ldr	r3, [r7, #8]
 8008b74:	4a06      	ldr	r2, [pc, #24]	; (8008b90 <vApplicationGetIdleTaskMemory+0x30>)
 8008b76:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2280      	movs	r2, #128	; 0x80
 8008b7c:	601a      	str	r2, [r3, #0]
}
 8008b7e:	bf00      	nop
 8008b80:	3714      	adds	r7, #20
 8008b82:	46bd      	mov	sp, r7
 8008b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b88:	4770      	bx	lr
 8008b8a:	bf00      	nop
 8008b8c:	20000278 	.word	0x20000278
 8008b90:	20000320 	.word	0x20000320

08008b94 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008b94:	b480      	push	{r7}
 8008b96:	b085      	sub	sp, #20
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	60f8      	str	r0, [r7, #12]
 8008b9c:	60b9      	str	r1, [r7, #8]
 8008b9e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	4a07      	ldr	r2, [pc, #28]	; (8008bc0 <vApplicationGetTimerTaskMemory+0x2c>)
 8008ba4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008ba6:	68bb      	ldr	r3, [r7, #8]
 8008ba8:	4a06      	ldr	r2, [pc, #24]	; (8008bc4 <vApplicationGetTimerTaskMemory+0x30>)
 8008baa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008bb2:	601a      	str	r2, [r3, #0]
}
 8008bb4:	bf00      	nop
 8008bb6:	3714      	adds	r7, #20
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bbe:	4770      	bx	lr
 8008bc0:	20000520 	.word	0x20000520
 8008bc4:	200005c8 	.word	0x200005c8

08008bc8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008bc8:	b480      	push	{r7}
 8008bca:	b083      	sub	sp, #12
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	f103 0208 	add.w	r2, r3, #8
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	f04f 32ff 	mov.w	r2, #4294967295
 8008be0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	f103 0208 	add.w	r2, r3, #8
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	f103 0208 	add.w	r2, r3, #8
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008bfc:	bf00      	nop
 8008bfe:	370c      	adds	r7, #12
 8008c00:	46bd      	mov	sp, r7
 8008c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c06:	4770      	bx	lr

08008c08 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008c08:	b480      	push	{r7}
 8008c0a:	b083      	sub	sp, #12
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	2200      	movs	r2, #0
 8008c14:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008c16:	bf00      	nop
 8008c18:	370c      	adds	r7, #12
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c20:	4770      	bx	lr

08008c22 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008c22:	b480      	push	{r7}
 8008c24:	b085      	sub	sp, #20
 8008c26:	af00      	add	r7, sp, #0
 8008c28:	6078      	str	r0, [r7, #4]
 8008c2a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	685b      	ldr	r3, [r3, #4]
 8008c30:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008c32:	683b      	ldr	r3, [r7, #0]
 8008c34:	68fa      	ldr	r2, [r7, #12]
 8008c36:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	689a      	ldr	r2, [r3, #8]
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	689b      	ldr	r3, [r3, #8]
 8008c44:	683a      	ldr	r2, [r7, #0]
 8008c46:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	683a      	ldr	r2, [r7, #0]
 8008c4c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008c4e:	683b      	ldr	r3, [r7, #0]
 8008c50:	687a      	ldr	r2, [r7, #4]
 8008c52:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	1c5a      	adds	r2, r3, #1
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	601a      	str	r2, [r3, #0]
}
 8008c5e:	bf00      	nop
 8008c60:	3714      	adds	r7, #20
 8008c62:	46bd      	mov	sp, r7
 8008c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c68:	4770      	bx	lr

08008c6a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008c6a:	b480      	push	{r7}
 8008c6c:	b085      	sub	sp, #20
 8008c6e:	af00      	add	r7, sp, #0
 8008c70:	6078      	str	r0, [r7, #4]
 8008c72:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008c74:	683b      	ldr	r3, [r7, #0]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008c7a:	68bb      	ldr	r3, [r7, #8]
 8008c7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c80:	d103      	bne.n	8008c8a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	691b      	ldr	r3, [r3, #16]
 8008c86:	60fb      	str	r3, [r7, #12]
 8008c88:	e00c      	b.n	8008ca4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	3308      	adds	r3, #8
 8008c8e:	60fb      	str	r3, [r7, #12]
 8008c90:	e002      	b.n	8008c98 <vListInsert+0x2e>
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	685b      	ldr	r3, [r3, #4]
 8008c96:	60fb      	str	r3, [r7, #12]
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	685b      	ldr	r3, [r3, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	68ba      	ldr	r2, [r7, #8]
 8008ca0:	429a      	cmp	r2, r3
 8008ca2:	d2f6      	bcs.n	8008c92 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	685a      	ldr	r2, [r3, #4]
 8008ca8:	683b      	ldr	r3, [r7, #0]
 8008caa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008cac:	683b      	ldr	r3, [r7, #0]
 8008cae:	685b      	ldr	r3, [r3, #4]
 8008cb0:	683a      	ldr	r2, [r7, #0]
 8008cb2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	68fa      	ldr	r2, [r7, #12]
 8008cb8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	683a      	ldr	r2, [r7, #0]
 8008cbe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	687a      	ldr	r2, [r7, #4]
 8008cc4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	1c5a      	adds	r2, r3, #1
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	601a      	str	r2, [r3, #0]
}
 8008cd0:	bf00      	nop
 8008cd2:	3714      	adds	r7, #20
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cda:	4770      	bx	lr

08008cdc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008cdc:	b480      	push	{r7}
 8008cde:	b085      	sub	sp, #20
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	691b      	ldr	r3, [r3, #16]
 8008ce8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	685b      	ldr	r3, [r3, #4]
 8008cee:	687a      	ldr	r2, [r7, #4]
 8008cf0:	6892      	ldr	r2, [r2, #8]
 8008cf2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	689b      	ldr	r3, [r3, #8]
 8008cf8:	687a      	ldr	r2, [r7, #4]
 8008cfa:	6852      	ldr	r2, [r2, #4]
 8008cfc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	685b      	ldr	r3, [r3, #4]
 8008d02:	687a      	ldr	r2, [r7, #4]
 8008d04:	429a      	cmp	r2, r3
 8008d06:	d103      	bne.n	8008d10 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	689a      	ldr	r2, [r3, #8]
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2200      	movs	r2, #0
 8008d14:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	1e5a      	subs	r2, r3, #1
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	681b      	ldr	r3, [r3, #0]
}
 8008d24:	4618      	mov	r0, r3
 8008d26:	3714      	adds	r7, #20
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2e:	4770      	bx	lr

08008d30 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b084      	sub	sp, #16
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
 8008d38:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d10a      	bne.n	8008d5a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d48:	f383 8811 	msr	BASEPRI, r3
 8008d4c:	f3bf 8f6f 	isb	sy
 8008d50:	f3bf 8f4f 	dsb	sy
 8008d54:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008d56:	bf00      	nop
 8008d58:	e7fe      	b.n	8008d58 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008d5a:	f002 f8b3 	bl	800aec4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	681a      	ldr	r2, [r3, #0]
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d66:	68f9      	ldr	r1, [r7, #12]
 8008d68:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008d6a:	fb01 f303 	mul.w	r3, r1, r3
 8008d6e:	441a      	add	r2, r3
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	2200      	movs	r2, #0
 8008d78:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	681a      	ldr	r2, [r3, #0]
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	681a      	ldr	r2, [r3, #0]
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d8a:	3b01      	subs	r3, #1
 8008d8c:	68f9      	ldr	r1, [r7, #12]
 8008d8e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008d90:	fb01 f303 	mul.w	r3, r1, r3
 8008d94:	441a      	add	r2, r3
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	22ff      	movs	r2, #255	; 0xff
 8008d9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	22ff      	movs	r2, #255	; 0xff
 8008da6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d114      	bne.n	8008dda <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	691b      	ldr	r3, [r3, #16]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d01a      	beq.n	8008dee <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	3310      	adds	r3, #16
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	f001 f963 	bl	800a088 <xTaskRemoveFromEventList>
 8008dc2:	4603      	mov	r3, r0
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d012      	beq.n	8008dee <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008dc8:	4b0c      	ldr	r3, [pc, #48]	; (8008dfc <xQueueGenericReset+0xcc>)
 8008dca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008dce:	601a      	str	r2, [r3, #0]
 8008dd0:	f3bf 8f4f 	dsb	sy
 8008dd4:	f3bf 8f6f 	isb	sy
 8008dd8:	e009      	b.n	8008dee <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	3310      	adds	r3, #16
 8008dde:	4618      	mov	r0, r3
 8008de0:	f7ff fef2 	bl	8008bc8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	3324      	adds	r3, #36	; 0x24
 8008de8:	4618      	mov	r0, r3
 8008dea:	f7ff feed 	bl	8008bc8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008dee:	f002 f899 	bl	800af24 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008df2:	2301      	movs	r3, #1
}
 8008df4:	4618      	mov	r0, r3
 8008df6:	3710      	adds	r7, #16
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	bd80      	pop	{r7, pc}
 8008dfc:	e000ed04 	.word	0xe000ed04

08008e00 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b08e      	sub	sp, #56	; 0x38
 8008e04:	af02      	add	r7, sp, #8
 8008e06:	60f8      	str	r0, [r7, #12]
 8008e08:	60b9      	str	r1, [r7, #8]
 8008e0a:	607a      	str	r2, [r7, #4]
 8008e0c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d10a      	bne.n	8008e2a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e18:	f383 8811 	msr	BASEPRI, r3
 8008e1c:	f3bf 8f6f 	isb	sy
 8008e20:	f3bf 8f4f 	dsb	sy
 8008e24:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008e26:	bf00      	nop
 8008e28:	e7fe      	b.n	8008e28 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008e2a:	683b      	ldr	r3, [r7, #0]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d10a      	bne.n	8008e46 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e34:	f383 8811 	msr	BASEPRI, r3
 8008e38:	f3bf 8f6f 	isb	sy
 8008e3c:	f3bf 8f4f 	dsb	sy
 8008e40:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008e42:	bf00      	nop
 8008e44:	e7fe      	b.n	8008e44 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d002      	beq.n	8008e52 <xQueueGenericCreateStatic+0x52>
 8008e4c:	68bb      	ldr	r3, [r7, #8]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d001      	beq.n	8008e56 <xQueueGenericCreateStatic+0x56>
 8008e52:	2301      	movs	r3, #1
 8008e54:	e000      	b.n	8008e58 <xQueueGenericCreateStatic+0x58>
 8008e56:	2300      	movs	r3, #0
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d10a      	bne.n	8008e72 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e60:	f383 8811 	msr	BASEPRI, r3
 8008e64:	f3bf 8f6f 	isb	sy
 8008e68:	f3bf 8f4f 	dsb	sy
 8008e6c:	623b      	str	r3, [r7, #32]
}
 8008e6e:	bf00      	nop
 8008e70:	e7fe      	b.n	8008e70 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d102      	bne.n	8008e7e <xQueueGenericCreateStatic+0x7e>
 8008e78:	68bb      	ldr	r3, [r7, #8]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d101      	bne.n	8008e82 <xQueueGenericCreateStatic+0x82>
 8008e7e:	2301      	movs	r3, #1
 8008e80:	e000      	b.n	8008e84 <xQueueGenericCreateStatic+0x84>
 8008e82:	2300      	movs	r3, #0
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d10a      	bne.n	8008e9e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e8c:	f383 8811 	msr	BASEPRI, r3
 8008e90:	f3bf 8f6f 	isb	sy
 8008e94:	f3bf 8f4f 	dsb	sy
 8008e98:	61fb      	str	r3, [r7, #28]
}
 8008e9a:	bf00      	nop
 8008e9c:	e7fe      	b.n	8008e9c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008e9e:	2350      	movs	r3, #80	; 0x50
 8008ea0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008ea2:	697b      	ldr	r3, [r7, #20]
 8008ea4:	2b50      	cmp	r3, #80	; 0x50
 8008ea6:	d00a      	beq.n	8008ebe <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eac:	f383 8811 	msr	BASEPRI, r3
 8008eb0:	f3bf 8f6f 	isb	sy
 8008eb4:	f3bf 8f4f 	dsb	sy
 8008eb8:	61bb      	str	r3, [r7, #24]
}
 8008eba:	bf00      	nop
 8008ebc:	e7fe      	b.n	8008ebc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008ebe:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008ec0:	683b      	ldr	r3, [r7, #0]
 8008ec2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d00d      	beq.n	8008ee6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ecc:	2201      	movs	r2, #1
 8008ece:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008ed2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ed8:	9300      	str	r3, [sp, #0]
 8008eda:	4613      	mov	r3, r2
 8008edc:	687a      	ldr	r2, [r7, #4]
 8008ede:	68b9      	ldr	r1, [r7, #8]
 8008ee0:	68f8      	ldr	r0, [r7, #12]
 8008ee2:	f000 f83f 	bl	8008f64 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008ee8:	4618      	mov	r0, r3
 8008eea:	3730      	adds	r7, #48	; 0x30
 8008eec:	46bd      	mov	sp, r7
 8008eee:	bd80      	pop	{r7, pc}

08008ef0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b08a      	sub	sp, #40	; 0x28
 8008ef4:	af02      	add	r7, sp, #8
 8008ef6:	60f8      	str	r0, [r7, #12]
 8008ef8:	60b9      	str	r1, [r7, #8]
 8008efa:	4613      	mov	r3, r2
 8008efc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d10a      	bne.n	8008f1a <xQueueGenericCreate+0x2a>
	__asm volatile
 8008f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f08:	f383 8811 	msr	BASEPRI, r3
 8008f0c:	f3bf 8f6f 	isb	sy
 8008f10:	f3bf 8f4f 	dsb	sy
 8008f14:	613b      	str	r3, [r7, #16]
}
 8008f16:	bf00      	nop
 8008f18:	e7fe      	b.n	8008f18 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	68ba      	ldr	r2, [r7, #8]
 8008f1e:	fb02 f303 	mul.w	r3, r2, r3
 8008f22:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008f24:	69fb      	ldr	r3, [r7, #28]
 8008f26:	3350      	adds	r3, #80	; 0x50
 8008f28:	4618      	mov	r0, r3
 8008f2a:	f002 f8ed 	bl	800b108 <pvPortMalloc>
 8008f2e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008f30:	69bb      	ldr	r3, [r7, #24]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d011      	beq.n	8008f5a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008f36:	69bb      	ldr	r3, [r7, #24]
 8008f38:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008f3a:	697b      	ldr	r3, [r7, #20]
 8008f3c:	3350      	adds	r3, #80	; 0x50
 8008f3e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008f40:	69bb      	ldr	r3, [r7, #24]
 8008f42:	2200      	movs	r2, #0
 8008f44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008f48:	79fa      	ldrb	r2, [r7, #7]
 8008f4a:	69bb      	ldr	r3, [r7, #24]
 8008f4c:	9300      	str	r3, [sp, #0]
 8008f4e:	4613      	mov	r3, r2
 8008f50:	697a      	ldr	r2, [r7, #20]
 8008f52:	68b9      	ldr	r1, [r7, #8]
 8008f54:	68f8      	ldr	r0, [r7, #12]
 8008f56:	f000 f805 	bl	8008f64 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008f5a:	69bb      	ldr	r3, [r7, #24]
	}
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	3720      	adds	r7, #32
 8008f60:	46bd      	mov	sp, r7
 8008f62:	bd80      	pop	{r7, pc}

08008f64 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b084      	sub	sp, #16
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	60f8      	str	r0, [r7, #12]
 8008f6c:	60b9      	str	r1, [r7, #8]
 8008f6e:	607a      	str	r2, [r7, #4]
 8008f70:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008f72:	68bb      	ldr	r3, [r7, #8]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d103      	bne.n	8008f80 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008f78:	69bb      	ldr	r3, [r7, #24]
 8008f7a:	69ba      	ldr	r2, [r7, #24]
 8008f7c:	601a      	str	r2, [r3, #0]
 8008f7e:	e002      	b.n	8008f86 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008f80:	69bb      	ldr	r3, [r7, #24]
 8008f82:	687a      	ldr	r2, [r7, #4]
 8008f84:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008f86:	69bb      	ldr	r3, [r7, #24]
 8008f88:	68fa      	ldr	r2, [r7, #12]
 8008f8a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008f8c:	69bb      	ldr	r3, [r7, #24]
 8008f8e:	68ba      	ldr	r2, [r7, #8]
 8008f90:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008f92:	2101      	movs	r1, #1
 8008f94:	69b8      	ldr	r0, [r7, #24]
 8008f96:	f7ff fecb 	bl	8008d30 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008f9a:	69bb      	ldr	r3, [r7, #24]
 8008f9c:	78fa      	ldrb	r2, [r7, #3]
 8008f9e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008fa2:	bf00      	nop
 8008fa4:	3710      	adds	r7, #16
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	bd80      	pop	{r7, pc}
	...

08008fac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b08e      	sub	sp, #56	; 0x38
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	60f8      	str	r0, [r7, #12]
 8008fb4:	60b9      	str	r1, [r7, #8]
 8008fb6:	607a      	str	r2, [r7, #4]
 8008fb8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008fba:	2300      	movs	r3, #0
 8008fbc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d10a      	bne.n	8008fde <xQueueGenericSend+0x32>
	__asm volatile
 8008fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fcc:	f383 8811 	msr	BASEPRI, r3
 8008fd0:	f3bf 8f6f 	isb	sy
 8008fd4:	f3bf 8f4f 	dsb	sy
 8008fd8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008fda:	bf00      	nop
 8008fdc:	e7fe      	b.n	8008fdc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008fde:	68bb      	ldr	r3, [r7, #8]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d103      	bne.n	8008fec <xQueueGenericSend+0x40>
 8008fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d101      	bne.n	8008ff0 <xQueueGenericSend+0x44>
 8008fec:	2301      	movs	r3, #1
 8008fee:	e000      	b.n	8008ff2 <xQueueGenericSend+0x46>
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d10a      	bne.n	800900c <xQueueGenericSend+0x60>
	__asm volatile
 8008ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ffa:	f383 8811 	msr	BASEPRI, r3
 8008ffe:	f3bf 8f6f 	isb	sy
 8009002:	f3bf 8f4f 	dsb	sy
 8009006:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009008:	bf00      	nop
 800900a:	e7fe      	b.n	800900a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	2b02      	cmp	r3, #2
 8009010:	d103      	bne.n	800901a <xQueueGenericSend+0x6e>
 8009012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009014:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009016:	2b01      	cmp	r3, #1
 8009018:	d101      	bne.n	800901e <xQueueGenericSend+0x72>
 800901a:	2301      	movs	r3, #1
 800901c:	e000      	b.n	8009020 <xQueueGenericSend+0x74>
 800901e:	2300      	movs	r3, #0
 8009020:	2b00      	cmp	r3, #0
 8009022:	d10a      	bne.n	800903a <xQueueGenericSend+0x8e>
	__asm volatile
 8009024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009028:	f383 8811 	msr	BASEPRI, r3
 800902c:	f3bf 8f6f 	isb	sy
 8009030:	f3bf 8f4f 	dsb	sy
 8009034:	623b      	str	r3, [r7, #32]
}
 8009036:	bf00      	nop
 8009038:	e7fe      	b.n	8009038 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800903a:	f001 f9e7 	bl	800a40c <xTaskGetSchedulerState>
 800903e:	4603      	mov	r3, r0
 8009040:	2b00      	cmp	r3, #0
 8009042:	d102      	bne.n	800904a <xQueueGenericSend+0x9e>
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d101      	bne.n	800904e <xQueueGenericSend+0xa2>
 800904a:	2301      	movs	r3, #1
 800904c:	e000      	b.n	8009050 <xQueueGenericSend+0xa4>
 800904e:	2300      	movs	r3, #0
 8009050:	2b00      	cmp	r3, #0
 8009052:	d10a      	bne.n	800906a <xQueueGenericSend+0xbe>
	__asm volatile
 8009054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009058:	f383 8811 	msr	BASEPRI, r3
 800905c:	f3bf 8f6f 	isb	sy
 8009060:	f3bf 8f4f 	dsb	sy
 8009064:	61fb      	str	r3, [r7, #28]
}
 8009066:	bf00      	nop
 8009068:	e7fe      	b.n	8009068 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800906a:	f001 ff2b 	bl	800aec4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800906e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009070:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009074:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009076:	429a      	cmp	r2, r3
 8009078:	d302      	bcc.n	8009080 <xQueueGenericSend+0xd4>
 800907a:	683b      	ldr	r3, [r7, #0]
 800907c:	2b02      	cmp	r3, #2
 800907e:	d129      	bne.n	80090d4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009080:	683a      	ldr	r2, [r7, #0]
 8009082:	68b9      	ldr	r1, [r7, #8]
 8009084:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009086:	f000 fa0b 	bl	80094a0 <prvCopyDataToQueue>
 800908a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800908c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800908e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009090:	2b00      	cmp	r3, #0
 8009092:	d010      	beq.n	80090b6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009096:	3324      	adds	r3, #36	; 0x24
 8009098:	4618      	mov	r0, r3
 800909a:	f000 fff5 	bl	800a088 <xTaskRemoveFromEventList>
 800909e:	4603      	mov	r3, r0
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d013      	beq.n	80090cc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80090a4:	4b3f      	ldr	r3, [pc, #252]	; (80091a4 <xQueueGenericSend+0x1f8>)
 80090a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090aa:	601a      	str	r2, [r3, #0]
 80090ac:	f3bf 8f4f 	dsb	sy
 80090b0:	f3bf 8f6f 	isb	sy
 80090b4:	e00a      	b.n	80090cc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80090b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d007      	beq.n	80090cc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80090bc:	4b39      	ldr	r3, [pc, #228]	; (80091a4 <xQueueGenericSend+0x1f8>)
 80090be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090c2:	601a      	str	r2, [r3, #0]
 80090c4:	f3bf 8f4f 	dsb	sy
 80090c8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80090cc:	f001 ff2a 	bl	800af24 <vPortExitCritical>
				return pdPASS;
 80090d0:	2301      	movs	r3, #1
 80090d2:	e063      	b.n	800919c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d103      	bne.n	80090e2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80090da:	f001 ff23 	bl	800af24 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80090de:	2300      	movs	r3, #0
 80090e0:	e05c      	b.n	800919c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80090e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d106      	bne.n	80090f6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80090e8:	f107 0314 	add.w	r3, r7, #20
 80090ec:	4618      	mov	r0, r3
 80090ee:	f001 f82f 	bl	800a150 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80090f2:	2301      	movs	r3, #1
 80090f4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80090f6:	f001 ff15 	bl	800af24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80090fa:	f000 fd9b 	bl	8009c34 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80090fe:	f001 fee1 	bl	800aec4 <vPortEnterCritical>
 8009102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009104:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009108:	b25b      	sxtb	r3, r3
 800910a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800910e:	d103      	bne.n	8009118 <xQueueGenericSend+0x16c>
 8009110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009112:	2200      	movs	r2, #0
 8009114:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800911a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800911e:	b25b      	sxtb	r3, r3
 8009120:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009124:	d103      	bne.n	800912e <xQueueGenericSend+0x182>
 8009126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009128:	2200      	movs	r2, #0
 800912a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800912e:	f001 fef9 	bl	800af24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009132:	1d3a      	adds	r2, r7, #4
 8009134:	f107 0314 	add.w	r3, r7, #20
 8009138:	4611      	mov	r1, r2
 800913a:	4618      	mov	r0, r3
 800913c:	f001 f81e 	bl	800a17c <xTaskCheckForTimeOut>
 8009140:	4603      	mov	r3, r0
 8009142:	2b00      	cmp	r3, #0
 8009144:	d124      	bne.n	8009190 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009146:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009148:	f000 faa2 	bl	8009690 <prvIsQueueFull>
 800914c:	4603      	mov	r3, r0
 800914e:	2b00      	cmp	r3, #0
 8009150:	d018      	beq.n	8009184 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009154:	3310      	adds	r3, #16
 8009156:	687a      	ldr	r2, [r7, #4]
 8009158:	4611      	mov	r1, r2
 800915a:	4618      	mov	r0, r3
 800915c:	f000 ff44 	bl	8009fe8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009160:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009162:	f000 fa2d 	bl	80095c0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009166:	f000 fd73 	bl	8009c50 <xTaskResumeAll>
 800916a:	4603      	mov	r3, r0
 800916c:	2b00      	cmp	r3, #0
 800916e:	f47f af7c 	bne.w	800906a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8009172:	4b0c      	ldr	r3, [pc, #48]	; (80091a4 <xQueueGenericSend+0x1f8>)
 8009174:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009178:	601a      	str	r2, [r3, #0]
 800917a:	f3bf 8f4f 	dsb	sy
 800917e:	f3bf 8f6f 	isb	sy
 8009182:	e772      	b.n	800906a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009184:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009186:	f000 fa1b 	bl	80095c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800918a:	f000 fd61 	bl	8009c50 <xTaskResumeAll>
 800918e:	e76c      	b.n	800906a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009190:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009192:	f000 fa15 	bl	80095c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009196:	f000 fd5b 	bl	8009c50 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800919a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800919c:	4618      	mov	r0, r3
 800919e:	3738      	adds	r7, #56	; 0x38
 80091a0:	46bd      	mov	sp, r7
 80091a2:	bd80      	pop	{r7, pc}
 80091a4:	e000ed04 	.word	0xe000ed04

080091a8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b090      	sub	sp, #64	; 0x40
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	60f8      	str	r0, [r7, #12]
 80091b0:	60b9      	str	r1, [r7, #8]
 80091b2:	607a      	str	r2, [r7, #4]
 80091b4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80091ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d10a      	bne.n	80091d6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80091c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091c4:	f383 8811 	msr	BASEPRI, r3
 80091c8:	f3bf 8f6f 	isb	sy
 80091cc:	f3bf 8f4f 	dsb	sy
 80091d0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80091d2:	bf00      	nop
 80091d4:	e7fe      	b.n	80091d4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80091d6:	68bb      	ldr	r3, [r7, #8]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d103      	bne.n	80091e4 <xQueueGenericSendFromISR+0x3c>
 80091dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d101      	bne.n	80091e8 <xQueueGenericSendFromISR+0x40>
 80091e4:	2301      	movs	r3, #1
 80091e6:	e000      	b.n	80091ea <xQueueGenericSendFromISR+0x42>
 80091e8:	2300      	movs	r3, #0
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d10a      	bne.n	8009204 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80091ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091f2:	f383 8811 	msr	BASEPRI, r3
 80091f6:	f3bf 8f6f 	isb	sy
 80091fa:	f3bf 8f4f 	dsb	sy
 80091fe:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009200:	bf00      	nop
 8009202:	e7fe      	b.n	8009202 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009204:	683b      	ldr	r3, [r7, #0]
 8009206:	2b02      	cmp	r3, #2
 8009208:	d103      	bne.n	8009212 <xQueueGenericSendFromISR+0x6a>
 800920a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800920c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800920e:	2b01      	cmp	r3, #1
 8009210:	d101      	bne.n	8009216 <xQueueGenericSendFromISR+0x6e>
 8009212:	2301      	movs	r3, #1
 8009214:	e000      	b.n	8009218 <xQueueGenericSendFromISR+0x70>
 8009216:	2300      	movs	r3, #0
 8009218:	2b00      	cmp	r3, #0
 800921a:	d10a      	bne.n	8009232 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800921c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009220:	f383 8811 	msr	BASEPRI, r3
 8009224:	f3bf 8f6f 	isb	sy
 8009228:	f3bf 8f4f 	dsb	sy
 800922c:	623b      	str	r3, [r7, #32]
}
 800922e:	bf00      	nop
 8009230:	e7fe      	b.n	8009230 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009232:	f001 ff29 	bl	800b088 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009236:	f3ef 8211 	mrs	r2, BASEPRI
 800923a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800923e:	f383 8811 	msr	BASEPRI, r3
 8009242:	f3bf 8f6f 	isb	sy
 8009246:	f3bf 8f4f 	dsb	sy
 800924a:	61fa      	str	r2, [r7, #28]
 800924c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800924e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009250:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009254:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009258:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800925a:	429a      	cmp	r2, r3
 800925c:	d302      	bcc.n	8009264 <xQueueGenericSendFromISR+0xbc>
 800925e:	683b      	ldr	r3, [r7, #0]
 8009260:	2b02      	cmp	r3, #2
 8009262:	d12f      	bne.n	80092c4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009266:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800926a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800926e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009272:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009274:	683a      	ldr	r2, [r7, #0]
 8009276:	68b9      	ldr	r1, [r7, #8]
 8009278:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800927a:	f000 f911 	bl	80094a0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800927e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8009282:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009286:	d112      	bne.n	80092ae <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800928a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800928c:	2b00      	cmp	r3, #0
 800928e:	d016      	beq.n	80092be <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009292:	3324      	adds	r3, #36	; 0x24
 8009294:	4618      	mov	r0, r3
 8009296:	f000 fef7 	bl	800a088 <xTaskRemoveFromEventList>
 800929a:	4603      	mov	r3, r0
 800929c:	2b00      	cmp	r3, #0
 800929e:	d00e      	beq.n	80092be <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d00b      	beq.n	80092be <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	2201      	movs	r2, #1
 80092aa:	601a      	str	r2, [r3, #0]
 80092ac:	e007      	b.n	80092be <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80092ae:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80092b2:	3301      	adds	r3, #1
 80092b4:	b2db      	uxtb	r3, r3
 80092b6:	b25a      	sxtb	r2, r3
 80092b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80092be:	2301      	movs	r3, #1
 80092c0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80092c2:	e001      	b.n	80092c8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80092c4:	2300      	movs	r3, #0
 80092c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80092c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092ca:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80092cc:	697b      	ldr	r3, [r7, #20]
 80092ce:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80092d2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80092d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80092d6:	4618      	mov	r0, r3
 80092d8:	3740      	adds	r7, #64	; 0x40
 80092da:	46bd      	mov	sp, r7
 80092dc:	bd80      	pop	{r7, pc}
	...

080092e0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b08c      	sub	sp, #48	; 0x30
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	60f8      	str	r0, [r7, #12]
 80092e8:	60b9      	str	r1, [r7, #8]
 80092ea:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80092ec:	2300      	movs	r3, #0
 80092ee:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80092f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d10a      	bne.n	8009310 <xQueueReceive+0x30>
	__asm volatile
 80092fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092fe:	f383 8811 	msr	BASEPRI, r3
 8009302:	f3bf 8f6f 	isb	sy
 8009306:	f3bf 8f4f 	dsb	sy
 800930a:	623b      	str	r3, [r7, #32]
}
 800930c:	bf00      	nop
 800930e:	e7fe      	b.n	800930e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009310:	68bb      	ldr	r3, [r7, #8]
 8009312:	2b00      	cmp	r3, #0
 8009314:	d103      	bne.n	800931e <xQueueReceive+0x3e>
 8009316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800931a:	2b00      	cmp	r3, #0
 800931c:	d101      	bne.n	8009322 <xQueueReceive+0x42>
 800931e:	2301      	movs	r3, #1
 8009320:	e000      	b.n	8009324 <xQueueReceive+0x44>
 8009322:	2300      	movs	r3, #0
 8009324:	2b00      	cmp	r3, #0
 8009326:	d10a      	bne.n	800933e <xQueueReceive+0x5e>
	__asm volatile
 8009328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800932c:	f383 8811 	msr	BASEPRI, r3
 8009330:	f3bf 8f6f 	isb	sy
 8009334:	f3bf 8f4f 	dsb	sy
 8009338:	61fb      	str	r3, [r7, #28]
}
 800933a:	bf00      	nop
 800933c:	e7fe      	b.n	800933c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800933e:	f001 f865 	bl	800a40c <xTaskGetSchedulerState>
 8009342:	4603      	mov	r3, r0
 8009344:	2b00      	cmp	r3, #0
 8009346:	d102      	bne.n	800934e <xQueueReceive+0x6e>
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d101      	bne.n	8009352 <xQueueReceive+0x72>
 800934e:	2301      	movs	r3, #1
 8009350:	e000      	b.n	8009354 <xQueueReceive+0x74>
 8009352:	2300      	movs	r3, #0
 8009354:	2b00      	cmp	r3, #0
 8009356:	d10a      	bne.n	800936e <xQueueReceive+0x8e>
	__asm volatile
 8009358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800935c:	f383 8811 	msr	BASEPRI, r3
 8009360:	f3bf 8f6f 	isb	sy
 8009364:	f3bf 8f4f 	dsb	sy
 8009368:	61bb      	str	r3, [r7, #24]
}
 800936a:	bf00      	nop
 800936c:	e7fe      	b.n	800936c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800936e:	f001 fda9 	bl	800aec4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009376:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800937a:	2b00      	cmp	r3, #0
 800937c:	d01f      	beq.n	80093be <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800937e:	68b9      	ldr	r1, [r7, #8]
 8009380:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009382:	f000 f8f7 	bl	8009574 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009388:	1e5a      	subs	r2, r3, #1
 800938a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800938c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800938e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009390:	691b      	ldr	r3, [r3, #16]
 8009392:	2b00      	cmp	r3, #0
 8009394:	d00f      	beq.n	80093b6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009398:	3310      	adds	r3, #16
 800939a:	4618      	mov	r0, r3
 800939c:	f000 fe74 	bl	800a088 <xTaskRemoveFromEventList>
 80093a0:	4603      	mov	r3, r0
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d007      	beq.n	80093b6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80093a6:	4b3d      	ldr	r3, [pc, #244]	; (800949c <xQueueReceive+0x1bc>)
 80093a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093ac:	601a      	str	r2, [r3, #0]
 80093ae:	f3bf 8f4f 	dsb	sy
 80093b2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80093b6:	f001 fdb5 	bl	800af24 <vPortExitCritical>
				return pdPASS;
 80093ba:	2301      	movs	r3, #1
 80093bc:	e069      	b.n	8009492 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d103      	bne.n	80093cc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80093c4:	f001 fdae 	bl	800af24 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80093c8:	2300      	movs	r3, #0
 80093ca:	e062      	b.n	8009492 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80093cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d106      	bne.n	80093e0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80093d2:	f107 0310 	add.w	r3, r7, #16
 80093d6:	4618      	mov	r0, r3
 80093d8:	f000 feba 	bl	800a150 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80093dc:	2301      	movs	r3, #1
 80093de:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80093e0:	f001 fda0 	bl	800af24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80093e4:	f000 fc26 	bl	8009c34 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80093e8:	f001 fd6c 	bl	800aec4 <vPortEnterCritical>
 80093ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80093f2:	b25b      	sxtb	r3, r3
 80093f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093f8:	d103      	bne.n	8009402 <xQueueReceive+0x122>
 80093fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093fc:	2200      	movs	r2, #0
 80093fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009404:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009408:	b25b      	sxtb	r3, r3
 800940a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800940e:	d103      	bne.n	8009418 <xQueueReceive+0x138>
 8009410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009412:	2200      	movs	r2, #0
 8009414:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009418:	f001 fd84 	bl	800af24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800941c:	1d3a      	adds	r2, r7, #4
 800941e:	f107 0310 	add.w	r3, r7, #16
 8009422:	4611      	mov	r1, r2
 8009424:	4618      	mov	r0, r3
 8009426:	f000 fea9 	bl	800a17c <xTaskCheckForTimeOut>
 800942a:	4603      	mov	r3, r0
 800942c:	2b00      	cmp	r3, #0
 800942e:	d123      	bne.n	8009478 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009430:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009432:	f000 f917 	bl	8009664 <prvIsQueueEmpty>
 8009436:	4603      	mov	r3, r0
 8009438:	2b00      	cmp	r3, #0
 800943a:	d017      	beq.n	800946c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800943c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800943e:	3324      	adds	r3, #36	; 0x24
 8009440:	687a      	ldr	r2, [r7, #4]
 8009442:	4611      	mov	r1, r2
 8009444:	4618      	mov	r0, r3
 8009446:	f000 fdcf 	bl	8009fe8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800944a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800944c:	f000 f8b8 	bl	80095c0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009450:	f000 fbfe 	bl	8009c50 <xTaskResumeAll>
 8009454:	4603      	mov	r3, r0
 8009456:	2b00      	cmp	r3, #0
 8009458:	d189      	bne.n	800936e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800945a:	4b10      	ldr	r3, [pc, #64]	; (800949c <xQueueReceive+0x1bc>)
 800945c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009460:	601a      	str	r2, [r3, #0]
 8009462:	f3bf 8f4f 	dsb	sy
 8009466:	f3bf 8f6f 	isb	sy
 800946a:	e780      	b.n	800936e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800946c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800946e:	f000 f8a7 	bl	80095c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009472:	f000 fbed 	bl	8009c50 <xTaskResumeAll>
 8009476:	e77a      	b.n	800936e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009478:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800947a:	f000 f8a1 	bl	80095c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800947e:	f000 fbe7 	bl	8009c50 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009482:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009484:	f000 f8ee 	bl	8009664 <prvIsQueueEmpty>
 8009488:	4603      	mov	r3, r0
 800948a:	2b00      	cmp	r3, #0
 800948c:	f43f af6f 	beq.w	800936e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009490:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009492:	4618      	mov	r0, r3
 8009494:	3730      	adds	r7, #48	; 0x30
 8009496:	46bd      	mov	sp, r7
 8009498:	bd80      	pop	{r7, pc}
 800949a:	bf00      	nop
 800949c:	e000ed04 	.word	0xe000ed04

080094a0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b086      	sub	sp, #24
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	60f8      	str	r0, [r7, #12]
 80094a8:	60b9      	str	r1, [r7, #8]
 80094aa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80094ac:	2300      	movs	r3, #0
 80094ae:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094b4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d10d      	bne.n	80094da <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d14d      	bne.n	8009562 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	689b      	ldr	r3, [r3, #8]
 80094ca:	4618      	mov	r0, r3
 80094cc:	f000 ffbc 	bl	800a448 <xTaskPriorityDisinherit>
 80094d0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	2200      	movs	r2, #0
 80094d6:	609a      	str	r2, [r3, #8]
 80094d8:	e043      	b.n	8009562 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d119      	bne.n	8009514 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	6858      	ldr	r0, [r3, #4]
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094e8:	461a      	mov	r2, r3
 80094ea:	68b9      	ldr	r1, [r7, #8]
 80094ec:	f002 fd98 	bl	800c020 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	685a      	ldr	r2, [r3, #4]
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094f8:	441a      	add	r2, r3
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	685a      	ldr	r2, [r3, #4]
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	689b      	ldr	r3, [r3, #8]
 8009506:	429a      	cmp	r2, r3
 8009508:	d32b      	bcc.n	8009562 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	681a      	ldr	r2, [r3, #0]
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	605a      	str	r2, [r3, #4]
 8009512:	e026      	b.n	8009562 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	68d8      	ldr	r0, [r3, #12]
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800951c:	461a      	mov	r2, r3
 800951e:	68b9      	ldr	r1, [r7, #8]
 8009520:	f002 fd7e 	bl	800c020 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	68da      	ldr	r2, [r3, #12]
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800952c:	425b      	negs	r3, r3
 800952e:	441a      	add	r2, r3
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	68da      	ldr	r2, [r3, #12]
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	429a      	cmp	r2, r3
 800953e:	d207      	bcs.n	8009550 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	689a      	ldr	r2, [r3, #8]
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009548:	425b      	negs	r3, r3
 800954a:	441a      	add	r2, r3
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	2b02      	cmp	r3, #2
 8009554:	d105      	bne.n	8009562 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009556:	693b      	ldr	r3, [r7, #16]
 8009558:	2b00      	cmp	r3, #0
 800955a:	d002      	beq.n	8009562 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800955c:	693b      	ldr	r3, [r7, #16]
 800955e:	3b01      	subs	r3, #1
 8009560:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009562:	693b      	ldr	r3, [r7, #16]
 8009564:	1c5a      	adds	r2, r3, #1
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800956a:	697b      	ldr	r3, [r7, #20]
}
 800956c:	4618      	mov	r0, r3
 800956e:	3718      	adds	r7, #24
 8009570:	46bd      	mov	sp, r7
 8009572:	bd80      	pop	{r7, pc}

08009574 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009574:	b580      	push	{r7, lr}
 8009576:	b082      	sub	sp, #8
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
 800957c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009582:	2b00      	cmp	r3, #0
 8009584:	d018      	beq.n	80095b8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	68da      	ldr	r2, [r3, #12]
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800958e:	441a      	add	r2, r3
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	68da      	ldr	r2, [r3, #12]
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	689b      	ldr	r3, [r3, #8]
 800959c:	429a      	cmp	r2, r3
 800959e:	d303      	bcc.n	80095a8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681a      	ldr	r2, [r3, #0]
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	68d9      	ldr	r1, [r3, #12]
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095b0:	461a      	mov	r2, r3
 80095b2:	6838      	ldr	r0, [r7, #0]
 80095b4:	f002 fd34 	bl	800c020 <memcpy>
	}
}
 80095b8:	bf00      	nop
 80095ba:	3708      	adds	r7, #8
 80095bc:	46bd      	mov	sp, r7
 80095be:	bd80      	pop	{r7, pc}

080095c0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b084      	sub	sp, #16
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80095c8:	f001 fc7c 	bl	800aec4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80095d2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80095d4:	e011      	b.n	80095fa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d012      	beq.n	8009604 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	3324      	adds	r3, #36	; 0x24
 80095e2:	4618      	mov	r0, r3
 80095e4:	f000 fd50 	bl	800a088 <xTaskRemoveFromEventList>
 80095e8:	4603      	mov	r3, r0
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d001      	beq.n	80095f2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80095ee:	f000 fe27 	bl	800a240 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80095f2:	7bfb      	ldrb	r3, [r7, #15]
 80095f4:	3b01      	subs	r3, #1
 80095f6:	b2db      	uxtb	r3, r3
 80095f8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80095fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	dce9      	bgt.n	80095d6 <prvUnlockQueue+0x16>
 8009602:	e000      	b.n	8009606 <prvUnlockQueue+0x46>
					break;
 8009604:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	22ff      	movs	r2, #255	; 0xff
 800960a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800960e:	f001 fc89 	bl	800af24 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009612:	f001 fc57 	bl	800aec4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800961c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800961e:	e011      	b.n	8009644 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	691b      	ldr	r3, [r3, #16]
 8009624:	2b00      	cmp	r3, #0
 8009626:	d012      	beq.n	800964e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	3310      	adds	r3, #16
 800962c:	4618      	mov	r0, r3
 800962e:	f000 fd2b 	bl	800a088 <xTaskRemoveFromEventList>
 8009632:	4603      	mov	r3, r0
 8009634:	2b00      	cmp	r3, #0
 8009636:	d001      	beq.n	800963c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009638:	f000 fe02 	bl	800a240 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800963c:	7bbb      	ldrb	r3, [r7, #14]
 800963e:	3b01      	subs	r3, #1
 8009640:	b2db      	uxtb	r3, r3
 8009642:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009644:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009648:	2b00      	cmp	r3, #0
 800964a:	dce9      	bgt.n	8009620 <prvUnlockQueue+0x60>
 800964c:	e000      	b.n	8009650 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800964e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	22ff      	movs	r2, #255	; 0xff
 8009654:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009658:	f001 fc64 	bl	800af24 <vPortExitCritical>
}
 800965c:	bf00      	nop
 800965e:	3710      	adds	r7, #16
 8009660:	46bd      	mov	sp, r7
 8009662:	bd80      	pop	{r7, pc}

08009664 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009664:	b580      	push	{r7, lr}
 8009666:	b084      	sub	sp, #16
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800966c:	f001 fc2a 	bl	800aec4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009674:	2b00      	cmp	r3, #0
 8009676:	d102      	bne.n	800967e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009678:	2301      	movs	r3, #1
 800967a:	60fb      	str	r3, [r7, #12]
 800967c:	e001      	b.n	8009682 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800967e:	2300      	movs	r3, #0
 8009680:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009682:	f001 fc4f 	bl	800af24 <vPortExitCritical>

	return xReturn;
 8009686:	68fb      	ldr	r3, [r7, #12]
}
 8009688:	4618      	mov	r0, r3
 800968a:	3710      	adds	r7, #16
 800968c:	46bd      	mov	sp, r7
 800968e:	bd80      	pop	{r7, pc}

08009690 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009690:	b580      	push	{r7, lr}
 8009692:	b084      	sub	sp, #16
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009698:	f001 fc14 	bl	800aec4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096a4:	429a      	cmp	r2, r3
 80096a6:	d102      	bne.n	80096ae <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80096a8:	2301      	movs	r3, #1
 80096aa:	60fb      	str	r3, [r7, #12]
 80096ac:	e001      	b.n	80096b2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80096ae:	2300      	movs	r3, #0
 80096b0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80096b2:	f001 fc37 	bl	800af24 <vPortExitCritical>

	return xReturn;
 80096b6:	68fb      	ldr	r3, [r7, #12]
}
 80096b8:	4618      	mov	r0, r3
 80096ba:	3710      	adds	r7, #16
 80096bc:	46bd      	mov	sp, r7
 80096be:	bd80      	pop	{r7, pc}

080096c0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80096c0:	b480      	push	{r7}
 80096c2:	b085      	sub	sp, #20
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
 80096c8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80096ca:	2300      	movs	r3, #0
 80096cc:	60fb      	str	r3, [r7, #12]
 80096ce:	e014      	b.n	80096fa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80096d0:	4a0f      	ldr	r2, [pc, #60]	; (8009710 <vQueueAddToRegistry+0x50>)
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d10b      	bne.n	80096f4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80096dc:	490c      	ldr	r1, [pc, #48]	; (8009710 <vQueueAddToRegistry+0x50>)
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	683a      	ldr	r2, [r7, #0]
 80096e2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80096e6:	4a0a      	ldr	r2, [pc, #40]	; (8009710 <vQueueAddToRegistry+0x50>)
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	00db      	lsls	r3, r3, #3
 80096ec:	4413      	add	r3, r2
 80096ee:	687a      	ldr	r2, [r7, #4]
 80096f0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80096f2:	e006      	b.n	8009702 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	3301      	adds	r3, #1
 80096f8:	60fb      	str	r3, [r7, #12]
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	2b07      	cmp	r3, #7
 80096fe:	d9e7      	bls.n	80096d0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009700:	bf00      	nop
 8009702:	bf00      	nop
 8009704:	3714      	adds	r7, #20
 8009706:	46bd      	mov	sp, r7
 8009708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970c:	4770      	bx	lr
 800970e:	bf00      	nop
 8009710:	200009c8 	.word	0x200009c8

08009714 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009714:	b580      	push	{r7, lr}
 8009716:	b086      	sub	sp, #24
 8009718:	af00      	add	r7, sp, #0
 800971a:	60f8      	str	r0, [r7, #12]
 800971c:	60b9      	str	r1, [r7, #8]
 800971e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009724:	f001 fbce 	bl	800aec4 <vPortEnterCritical>
 8009728:	697b      	ldr	r3, [r7, #20]
 800972a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800972e:	b25b      	sxtb	r3, r3
 8009730:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009734:	d103      	bne.n	800973e <vQueueWaitForMessageRestricted+0x2a>
 8009736:	697b      	ldr	r3, [r7, #20]
 8009738:	2200      	movs	r2, #0
 800973a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800973e:	697b      	ldr	r3, [r7, #20]
 8009740:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009744:	b25b      	sxtb	r3, r3
 8009746:	f1b3 3fff 	cmp.w	r3, #4294967295
 800974a:	d103      	bne.n	8009754 <vQueueWaitForMessageRestricted+0x40>
 800974c:	697b      	ldr	r3, [r7, #20]
 800974e:	2200      	movs	r2, #0
 8009750:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009754:	f001 fbe6 	bl	800af24 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009758:	697b      	ldr	r3, [r7, #20]
 800975a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800975c:	2b00      	cmp	r3, #0
 800975e:	d106      	bne.n	800976e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009760:	697b      	ldr	r3, [r7, #20]
 8009762:	3324      	adds	r3, #36	; 0x24
 8009764:	687a      	ldr	r2, [r7, #4]
 8009766:	68b9      	ldr	r1, [r7, #8]
 8009768:	4618      	mov	r0, r3
 800976a:	f000 fc61 	bl	800a030 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800976e:	6978      	ldr	r0, [r7, #20]
 8009770:	f7ff ff26 	bl	80095c0 <prvUnlockQueue>
	}
 8009774:	bf00      	nop
 8009776:	3718      	adds	r7, #24
 8009778:	46bd      	mov	sp, r7
 800977a:	bd80      	pop	{r7, pc}

0800977c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800977c:	b580      	push	{r7, lr}
 800977e:	b08e      	sub	sp, #56	; 0x38
 8009780:	af04      	add	r7, sp, #16
 8009782:	60f8      	str	r0, [r7, #12]
 8009784:	60b9      	str	r1, [r7, #8]
 8009786:	607a      	str	r2, [r7, #4]
 8009788:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800978a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800978c:	2b00      	cmp	r3, #0
 800978e:	d10a      	bne.n	80097a6 <xTaskCreateStatic+0x2a>
	__asm volatile
 8009790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009794:	f383 8811 	msr	BASEPRI, r3
 8009798:	f3bf 8f6f 	isb	sy
 800979c:	f3bf 8f4f 	dsb	sy
 80097a0:	623b      	str	r3, [r7, #32]
}
 80097a2:	bf00      	nop
 80097a4:	e7fe      	b.n	80097a4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80097a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d10a      	bne.n	80097c2 <xTaskCreateStatic+0x46>
	__asm volatile
 80097ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097b0:	f383 8811 	msr	BASEPRI, r3
 80097b4:	f3bf 8f6f 	isb	sy
 80097b8:	f3bf 8f4f 	dsb	sy
 80097bc:	61fb      	str	r3, [r7, #28]
}
 80097be:	bf00      	nop
 80097c0:	e7fe      	b.n	80097c0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80097c2:	23a8      	movs	r3, #168	; 0xa8
 80097c4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80097c6:	693b      	ldr	r3, [r7, #16]
 80097c8:	2ba8      	cmp	r3, #168	; 0xa8
 80097ca:	d00a      	beq.n	80097e2 <xTaskCreateStatic+0x66>
	__asm volatile
 80097cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097d0:	f383 8811 	msr	BASEPRI, r3
 80097d4:	f3bf 8f6f 	isb	sy
 80097d8:	f3bf 8f4f 	dsb	sy
 80097dc:	61bb      	str	r3, [r7, #24]
}
 80097de:	bf00      	nop
 80097e0:	e7fe      	b.n	80097e0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80097e2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80097e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d01e      	beq.n	8009828 <xTaskCreateStatic+0xac>
 80097ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d01b      	beq.n	8009828 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80097f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097f2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80097f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80097f8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80097fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097fc:	2202      	movs	r2, #2
 80097fe:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009802:	2300      	movs	r3, #0
 8009804:	9303      	str	r3, [sp, #12]
 8009806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009808:	9302      	str	r3, [sp, #8]
 800980a:	f107 0314 	add.w	r3, r7, #20
 800980e:	9301      	str	r3, [sp, #4]
 8009810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009812:	9300      	str	r3, [sp, #0]
 8009814:	683b      	ldr	r3, [r7, #0]
 8009816:	687a      	ldr	r2, [r7, #4]
 8009818:	68b9      	ldr	r1, [r7, #8]
 800981a:	68f8      	ldr	r0, [r7, #12]
 800981c:	f000 f850 	bl	80098c0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009820:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009822:	f000 f8f3 	bl	8009a0c <prvAddNewTaskToReadyList>
 8009826:	e001      	b.n	800982c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009828:	2300      	movs	r3, #0
 800982a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800982c:	697b      	ldr	r3, [r7, #20]
	}
 800982e:	4618      	mov	r0, r3
 8009830:	3728      	adds	r7, #40	; 0x28
 8009832:	46bd      	mov	sp, r7
 8009834:	bd80      	pop	{r7, pc}

08009836 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009836:	b580      	push	{r7, lr}
 8009838:	b08c      	sub	sp, #48	; 0x30
 800983a:	af04      	add	r7, sp, #16
 800983c:	60f8      	str	r0, [r7, #12]
 800983e:	60b9      	str	r1, [r7, #8]
 8009840:	603b      	str	r3, [r7, #0]
 8009842:	4613      	mov	r3, r2
 8009844:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009846:	88fb      	ldrh	r3, [r7, #6]
 8009848:	009b      	lsls	r3, r3, #2
 800984a:	4618      	mov	r0, r3
 800984c:	f001 fc5c 	bl	800b108 <pvPortMalloc>
 8009850:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009852:	697b      	ldr	r3, [r7, #20]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d00e      	beq.n	8009876 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009858:	20a8      	movs	r0, #168	; 0xa8
 800985a:	f001 fc55 	bl	800b108 <pvPortMalloc>
 800985e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009860:	69fb      	ldr	r3, [r7, #28]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d003      	beq.n	800986e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009866:	69fb      	ldr	r3, [r7, #28]
 8009868:	697a      	ldr	r2, [r7, #20]
 800986a:	631a      	str	r2, [r3, #48]	; 0x30
 800986c:	e005      	b.n	800987a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800986e:	6978      	ldr	r0, [r7, #20]
 8009870:	f001 fd16 	bl	800b2a0 <vPortFree>
 8009874:	e001      	b.n	800987a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009876:	2300      	movs	r3, #0
 8009878:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800987a:	69fb      	ldr	r3, [r7, #28]
 800987c:	2b00      	cmp	r3, #0
 800987e:	d017      	beq.n	80098b0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009880:	69fb      	ldr	r3, [r7, #28]
 8009882:	2200      	movs	r2, #0
 8009884:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009888:	88fa      	ldrh	r2, [r7, #6]
 800988a:	2300      	movs	r3, #0
 800988c:	9303      	str	r3, [sp, #12]
 800988e:	69fb      	ldr	r3, [r7, #28]
 8009890:	9302      	str	r3, [sp, #8]
 8009892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009894:	9301      	str	r3, [sp, #4]
 8009896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009898:	9300      	str	r3, [sp, #0]
 800989a:	683b      	ldr	r3, [r7, #0]
 800989c:	68b9      	ldr	r1, [r7, #8]
 800989e:	68f8      	ldr	r0, [r7, #12]
 80098a0:	f000 f80e 	bl	80098c0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80098a4:	69f8      	ldr	r0, [r7, #28]
 80098a6:	f000 f8b1 	bl	8009a0c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80098aa:	2301      	movs	r3, #1
 80098ac:	61bb      	str	r3, [r7, #24]
 80098ae:	e002      	b.n	80098b6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80098b0:	f04f 33ff 	mov.w	r3, #4294967295
 80098b4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80098b6:	69bb      	ldr	r3, [r7, #24]
	}
 80098b8:	4618      	mov	r0, r3
 80098ba:	3720      	adds	r7, #32
 80098bc:	46bd      	mov	sp, r7
 80098be:	bd80      	pop	{r7, pc}

080098c0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80098c0:	b580      	push	{r7, lr}
 80098c2:	b088      	sub	sp, #32
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	60f8      	str	r0, [r7, #12]
 80098c8:	60b9      	str	r1, [r7, #8]
 80098ca:	607a      	str	r2, [r7, #4]
 80098cc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80098ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098d0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	009b      	lsls	r3, r3, #2
 80098d6:	461a      	mov	r2, r3
 80098d8:	21a5      	movs	r1, #165	; 0xa5
 80098da:	f002 fb1d 	bl	800bf18 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80098de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80098e8:	3b01      	subs	r3, #1
 80098ea:	009b      	lsls	r3, r3, #2
 80098ec:	4413      	add	r3, r2
 80098ee:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80098f0:	69bb      	ldr	r3, [r7, #24]
 80098f2:	f023 0307 	bic.w	r3, r3, #7
 80098f6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80098f8:	69bb      	ldr	r3, [r7, #24]
 80098fa:	f003 0307 	and.w	r3, r3, #7
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d00a      	beq.n	8009918 <prvInitialiseNewTask+0x58>
	__asm volatile
 8009902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009906:	f383 8811 	msr	BASEPRI, r3
 800990a:	f3bf 8f6f 	isb	sy
 800990e:	f3bf 8f4f 	dsb	sy
 8009912:	617b      	str	r3, [r7, #20]
}
 8009914:	bf00      	nop
 8009916:	e7fe      	b.n	8009916 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009918:	68bb      	ldr	r3, [r7, #8]
 800991a:	2b00      	cmp	r3, #0
 800991c:	d01f      	beq.n	800995e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800991e:	2300      	movs	r3, #0
 8009920:	61fb      	str	r3, [r7, #28]
 8009922:	e012      	b.n	800994a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009924:	68ba      	ldr	r2, [r7, #8]
 8009926:	69fb      	ldr	r3, [r7, #28]
 8009928:	4413      	add	r3, r2
 800992a:	7819      	ldrb	r1, [r3, #0]
 800992c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800992e:	69fb      	ldr	r3, [r7, #28]
 8009930:	4413      	add	r3, r2
 8009932:	3334      	adds	r3, #52	; 0x34
 8009934:	460a      	mov	r2, r1
 8009936:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009938:	68ba      	ldr	r2, [r7, #8]
 800993a:	69fb      	ldr	r3, [r7, #28]
 800993c:	4413      	add	r3, r2
 800993e:	781b      	ldrb	r3, [r3, #0]
 8009940:	2b00      	cmp	r3, #0
 8009942:	d006      	beq.n	8009952 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009944:	69fb      	ldr	r3, [r7, #28]
 8009946:	3301      	adds	r3, #1
 8009948:	61fb      	str	r3, [r7, #28]
 800994a:	69fb      	ldr	r3, [r7, #28]
 800994c:	2b0f      	cmp	r3, #15
 800994e:	d9e9      	bls.n	8009924 <prvInitialiseNewTask+0x64>
 8009950:	e000      	b.n	8009954 <prvInitialiseNewTask+0x94>
			{
				break;
 8009952:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009956:	2200      	movs	r2, #0
 8009958:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800995c:	e003      	b.n	8009966 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800995e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009960:	2200      	movs	r2, #0
 8009962:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009968:	2b37      	cmp	r3, #55	; 0x37
 800996a:	d901      	bls.n	8009970 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800996c:	2337      	movs	r3, #55	; 0x37
 800996e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009972:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009974:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009978:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800997a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800997c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800997e:	2200      	movs	r2, #0
 8009980:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009984:	3304      	adds	r3, #4
 8009986:	4618      	mov	r0, r3
 8009988:	f7ff f93e 	bl	8008c08 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800998c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800998e:	3318      	adds	r3, #24
 8009990:	4618      	mov	r0, r3
 8009992:	f7ff f939 	bl	8008c08 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009998:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800999a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800999c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800999e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80099a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099a4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80099a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80099aa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80099ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099ae:	2200      	movs	r2, #0
 80099b0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80099b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099b6:	2200      	movs	r2, #0
 80099b8:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80099bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099be:	3354      	adds	r3, #84	; 0x54
 80099c0:	224c      	movs	r2, #76	; 0x4c
 80099c2:	2100      	movs	r1, #0
 80099c4:	4618      	mov	r0, r3
 80099c6:	f002 faa7 	bl	800bf18 <memset>
 80099ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099cc:	4a0c      	ldr	r2, [pc, #48]	; (8009a00 <prvInitialiseNewTask+0x140>)
 80099ce:	659a      	str	r2, [r3, #88]	; 0x58
 80099d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099d2:	4a0c      	ldr	r2, [pc, #48]	; (8009a04 <prvInitialiseNewTask+0x144>)
 80099d4:	65da      	str	r2, [r3, #92]	; 0x5c
 80099d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099d8:	4a0b      	ldr	r2, [pc, #44]	; (8009a08 <prvInitialiseNewTask+0x148>)
 80099da:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80099dc:	683a      	ldr	r2, [r7, #0]
 80099de:	68f9      	ldr	r1, [r7, #12]
 80099e0:	69b8      	ldr	r0, [r7, #24]
 80099e2:	f001 f941 	bl	800ac68 <pxPortInitialiseStack>
 80099e6:	4602      	mov	r2, r0
 80099e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099ea:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80099ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d002      	beq.n	80099f8 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80099f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80099f6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80099f8:	bf00      	nop
 80099fa:	3720      	adds	r7, #32
 80099fc:	46bd      	mov	sp, r7
 80099fe:	bd80      	pop	{r7, pc}
 8009a00:	20006864 	.word	0x20006864
 8009a04:	200068cc 	.word	0x200068cc
 8009a08:	20006934 	.word	0x20006934

08009a0c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009a0c:	b580      	push	{r7, lr}
 8009a0e:	b082      	sub	sp, #8
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009a14:	f001 fa56 	bl	800aec4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009a18:	4b2d      	ldr	r3, [pc, #180]	; (8009ad0 <prvAddNewTaskToReadyList+0xc4>)
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	3301      	adds	r3, #1
 8009a1e:	4a2c      	ldr	r2, [pc, #176]	; (8009ad0 <prvAddNewTaskToReadyList+0xc4>)
 8009a20:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009a22:	4b2c      	ldr	r3, [pc, #176]	; (8009ad4 <prvAddNewTaskToReadyList+0xc8>)
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d109      	bne.n	8009a3e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009a2a:	4a2a      	ldr	r2, [pc, #168]	; (8009ad4 <prvAddNewTaskToReadyList+0xc8>)
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009a30:	4b27      	ldr	r3, [pc, #156]	; (8009ad0 <prvAddNewTaskToReadyList+0xc4>)
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	2b01      	cmp	r3, #1
 8009a36:	d110      	bne.n	8009a5a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009a38:	f000 fc26 	bl	800a288 <prvInitialiseTaskLists>
 8009a3c:	e00d      	b.n	8009a5a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009a3e:	4b26      	ldr	r3, [pc, #152]	; (8009ad8 <prvAddNewTaskToReadyList+0xcc>)
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d109      	bne.n	8009a5a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009a46:	4b23      	ldr	r3, [pc, #140]	; (8009ad4 <prvAddNewTaskToReadyList+0xc8>)
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a50:	429a      	cmp	r2, r3
 8009a52:	d802      	bhi.n	8009a5a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009a54:	4a1f      	ldr	r2, [pc, #124]	; (8009ad4 <prvAddNewTaskToReadyList+0xc8>)
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009a5a:	4b20      	ldr	r3, [pc, #128]	; (8009adc <prvAddNewTaskToReadyList+0xd0>)
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	3301      	adds	r3, #1
 8009a60:	4a1e      	ldr	r2, [pc, #120]	; (8009adc <prvAddNewTaskToReadyList+0xd0>)
 8009a62:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009a64:	4b1d      	ldr	r3, [pc, #116]	; (8009adc <prvAddNewTaskToReadyList+0xd0>)
 8009a66:	681a      	ldr	r2, [r3, #0]
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a70:	4b1b      	ldr	r3, [pc, #108]	; (8009ae0 <prvAddNewTaskToReadyList+0xd4>)
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	429a      	cmp	r2, r3
 8009a76:	d903      	bls.n	8009a80 <prvAddNewTaskToReadyList+0x74>
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a7c:	4a18      	ldr	r2, [pc, #96]	; (8009ae0 <prvAddNewTaskToReadyList+0xd4>)
 8009a7e:	6013      	str	r3, [r2, #0]
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a84:	4613      	mov	r3, r2
 8009a86:	009b      	lsls	r3, r3, #2
 8009a88:	4413      	add	r3, r2
 8009a8a:	009b      	lsls	r3, r3, #2
 8009a8c:	4a15      	ldr	r2, [pc, #84]	; (8009ae4 <prvAddNewTaskToReadyList+0xd8>)
 8009a8e:	441a      	add	r2, r3
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	3304      	adds	r3, #4
 8009a94:	4619      	mov	r1, r3
 8009a96:	4610      	mov	r0, r2
 8009a98:	f7ff f8c3 	bl	8008c22 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009a9c:	f001 fa42 	bl	800af24 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009aa0:	4b0d      	ldr	r3, [pc, #52]	; (8009ad8 <prvAddNewTaskToReadyList+0xcc>)
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d00e      	beq.n	8009ac6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009aa8:	4b0a      	ldr	r3, [pc, #40]	; (8009ad4 <prvAddNewTaskToReadyList+0xc8>)
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ab2:	429a      	cmp	r2, r3
 8009ab4:	d207      	bcs.n	8009ac6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009ab6:	4b0c      	ldr	r3, [pc, #48]	; (8009ae8 <prvAddNewTaskToReadyList+0xdc>)
 8009ab8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009abc:	601a      	str	r2, [r3, #0]
 8009abe:	f3bf 8f4f 	dsb	sy
 8009ac2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009ac6:	bf00      	nop
 8009ac8:	3708      	adds	r7, #8
 8009aca:	46bd      	mov	sp, r7
 8009acc:	bd80      	pop	{r7, pc}
 8009ace:	bf00      	nop
 8009ad0:	20000edc 	.word	0x20000edc
 8009ad4:	20000a08 	.word	0x20000a08
 8009ad8:	20000ee8 	.word	0x20000ee8
 8009adc:	20000ef8 	.word	0x20000ef8
 8009ae0:	20000ee4 	.word	0x20000ee4
 8009ae4:	20000a0c 	.word	0x20000a0c
 8009ae8:	e000ed04 	.word	0xe000ed04

08009aec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009aec:	b580      	push	{r7, lr}
 8009aee:	b084      	sub	sp, #16
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009af4:	2300      	movs	r3, #0
 8009af6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d017      	beq.n	8009b2e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009afe:	4b13      	ldr	r3, [pc, #76]	; (8009b4c <vTaskDelay+0x60>)
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d00a      	beq.n	8009b1c <vTaskDelay+0x30>
	__asm volatile
 8009b06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b0a:	f383 8811 	msr	BASEPRI, r3
 8009b0e:	f3bf 8f6f 	isb	sy
 8009b12:	f3bf 8f4f 	dsb	sy
 8009b16:	60bb      	str	r3, [r7, #8]
}
 8009b18:	bf00      	nop
 8009b1a:	e7fe      	b.n	8009b1a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009b1c:	f000 f88a 	bl	8009c34 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009b20:	2100      	movs	r1, #0
 8009b22:	6878      	ldr	r0, [r7, #4]
 8009b24:	f000 fcfe 	bl	800a524 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009b28:	f000 f892 	bl	8009c50 <xTaskResumeAll>
 8009b2c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d107      	bne.n	8009b44 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009b34:	4b06      	ldr	r3, [pc, #24]	; (8009b50 <vTaskDelay+0x64>)
 8009b36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b3a:	601a      	str	r2, [r3, #0]
 8009b3c:	f3bf 8f4f 	dsb	sy
 8009b40:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009b44:	bf00      	nop
 8009b46:	3710      	adds	r7, #16
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	bd80      	pop	{r7, pc}
 8009b4c:	20000f04 	.word	0x20000f04
 8009b50:	e000ed04 	.word	0xe000ed04

08009b54 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009b54:	b580      	push	{r7, lr}
 8009b56:	b08a      	sub	sp, #40	; 0x28
 8009b58:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009b5e:	2300      	movs	r3, #0
 8009b60:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009b62:	463a      	mov	r2, r7
 8009b64:	1d39      	adds	r1, r7, #4
 8009b66:	f107 0308 	add.w	r3, r7, #8
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	f7fe fff8 	bl	8008b60 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009b70:	6839      	ldr	r1, [r7, #0]
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	68ba      	ldr	r2, [r7, #8]
 8009b76:	9202      	str	r2, [sp, #8]
 8009b78:	9301      	str	r3, [sp, #4]
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	9300      	str	r3, [sp, #0]
 8009b7e:	2300      	movs	r3, #0
 8009b80:	460a      	mov	r2, r1
 8009b82:	4924      	ldr	r1, [pc, #144]	; (8009c14 <vTaskStartScheduler+0xc0>)
 8009b84:	4824      	ldr	r0, [pc, #144]	; (8009c18 <vTaskStartScheduler+0xc4>)
 8009b86:	f7ff fdf9 	bl	800977c <xTaskCreateStatic>
 8009b8a:	4603      	mov	r3, r0
 8009b8c:	4a23      	ldr	r2, [pc, #140]	; (8009c1c <vTaskStartScheduler+0xc8>)
 8009b8e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009b90:	4b22      	ldr	r3, [pc, #136]	; (8009c1c <vTaskStartScheduler+0xc8>)
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d002      	beq.n	8009b9e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009b98:	2301      	movs	r3, #1
 8009b9a:	617b      	str	r3, [r7, #20]
 8009b9c:	e001      	b.n	8009ba2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009ba2:	697b      	ldr	r3, [r7, #20]
 8009ba4:	2b01      	cmp	r3, #1
 8009ba6:	d102      	bne.n	8009bae <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009ba8:	f000 fd10 	bl	800a5cc <xTimerCreateTimerTask>
 8009bac:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009bae:	697b      	ldr	r3, [r7, #20]
 8009bb0:	2b01      	cmp	r3, #1
 8009bb2:	d11b      	bne.n	8009bec <vTaskStartScheduler+0x98>
	__asm volatile
 8009bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bb8:	f383 8811 	msr	BASEPRI, r3
 8009bbc:	f3bf 8f6f 	isb	sy
 8009bc0:	f3bf 8f4f 	dsb	sy
 8009bc4:	613b      	str	r3, [r7, #16]
}
 8009bc6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009bc8:	4b15      	ldr	r3, [pc, #84]	; (8009c20 <vTaskStartScheduler+0xcc>)
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	3354      	adds	r3, #84	; 0x54
 8009bce:	4a15      	ldr	r2, [pc, #84]	; (8009c24 <vTaskStartScheduler+0xd0>)
 8009bd0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009bd2:	4b15      	ldr	r3, [pc, #84]	; (8009c28 <vTaskStartScheduler+0xd4>)
 8009bd4:	f04f 32ff 	mov.w	r2, #4294967295
 8009bd8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009bda:	4b14      	ldr	r3, [pc, #80]	; (8009c2c <vTaskStartScheduler+0xd8>)
 8009bdc:	2201      	movs	r2, #1
 8009bde:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009be0:	4b13      	ldr	r3, [pc, #76]	; (8009c30 <vTaskStartScheduler+0xdc>)
 8009be2:	2200      	movs	r2, #0
 8009be4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009be6:	f001 f8cb 	bl	800ad80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009bea:	e00e      	b.n	8009c0a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009bec:	697b      	ldr	r3, [r7, #20]
 8009bee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bf2:	d10a      	bne.n	8009c0a <vTaskStartScheduler+0xb6>
	__asm volatile
 8009bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bf8:	f383 8811 	msr	BASEPRI, r3
 8009bfc:	f3bf 8f6f 	isb	sy
 8009c00:	f3bf 8f4f 	dsb	sy
 8009c04:	60fb      	str	r3, [r7, #12]
}
 8009c06:	bf00      	nop
 8009c08:	e7fe      	b.n	8009c08 <vTaskStartScheduler+0xb4>
}
 8009c0a:	bf00      	nop
 8009c0c:	3718      	adds	r7, #24
 8009c0e:	46bd      	mov	sp, r7
 8009c10:	bd80      	pop	{r7, pc}
 8009c12:	bf00      	nop
 8009c14:	0800c198 	.word	0x0800c198
 8009c18:	0800a259 	.word	0x0800a259
 8009c1c:	20000f00 	.word	0x20000f00
 8009c20:	20000a08 	.word	0x20000a08
 8009c24:	2000014c 	.word	0x2000014c
 8009c28:	20000efc 	.word	0x20000efc
 8009c2c:	20000ee8 	.word	0x20000ee8
 8009c30:	20000ee0 	.word	0x20000ee0

08009c34 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009c34:	b480      	push	{r7}
 8009c36:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009c38:	4b04      	ldr	r3, [pc, #16]	; (8009c4c <vTaskSuspendAll+0x18>)
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	3301      	adds	r3, #1
 8009c3e:	4a03      	ldr	r2, [pc, #12]	; (8009c4c <vTaskSuspendAll+0x18>)
 8009c40:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009c42:	bf00      	nop
 8009c44:	46bd      	mov	sp, r7
 8009c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4a:	4770      	bx	lr
 8009c4c:	20000f04 	.word	0x20000f04

08009c50 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009c50:	b580      	push	{r7, lr}
 8009c52:	b084      	sub	sp, #16
 8009c54:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009c56:	2300      	movs	r3, #0
 8009c58:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009c5e:	4b42      	ldr	r3, [pc, #264]	; (8009d68 <xTaskResumeAll+0x118>)
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d10a      	bne.n	8009c7c <xTaskResumeAll+0x2c>
	__asm volatile
 8009c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c6a:	f383 8811 	msr	BASEPRI, r3
 8009c6e:	f3bf 8f6f 	isb	sy
 8009c72:	f3bf 8f4f 	dsb	sy
 8009c76:	603b      	str	r3, [r7, #0]
}
 8009c78:	bf00      	nop
 8009c7a:	e7fe      	b.n	8009c7a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009c7c:	f001 f922 	bl	800aec4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009c80:	4b39      	ldr	r3, [pc, #228]	; (8009d68 <xTaskResumeAll+0x118>)
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	3b01      	subs	r3, #1
 8009c86:	4a38      	ldr	r2, [pc, #224]	; (8009d68 <xTaskResumeAll+0x118>)
 8009c88:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009c8a:	4b37      	ldr	r3, [pc, #220]	; (8009d68 <xTaskResumeAll+0x118>)
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d162      	bne.n	8009d58 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009c92:	4b36      	ldr	r3, [pc, #216]	; (8009d6c <xTaskResumeAll+0x11c>)
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d05e      	beq.n	8009d58 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009c9a:	e02f      	b.n	8009cfc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c9c:	4b34      	ldr	r3, [pc, #208]	; (8009d70 <xTaskResumeAll+0x120>)
 8009c9e:	68db      	ldr	r3, [r3, #12]
 8009ca0:	68db      	ldr	r3, [r3, #12]
 8009ca2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	3318      	adds	r3, #24
 8009ca8:	4618      	mov	r0, r3
 8009caa:	f7ff f817 	bl	8008cdc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	3304      	adds	r3, #4
 8009cb2:	4618      	mov	r0, r3
 8009cb4:	f7ff f812 	bl	8008cdc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cbc:	4b2d      	ldr	r3, [pc, #180]	; (8009d74 <xTaskResumeAll+0x124>)
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	429a      	cmp	r2, r3
 8009cc2:	d903      	bls.n	8009ccc <xTaskResumeAll+0x7c>
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cc8:	4a2a      	ldr	r2, [pc, #168]	; (8009d74 <xTaskResumeAll+0x124>)
 8009cca:	6013      	str	r3, [r2, #0]
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cd0:	4613      	mov	r3, r2
 8009cd2:	009b      	lsls	r3, r3, #2
 8009cd4:	4413      	add	r3, r2
 8009cd6:	009b      	lsls	r3, r3, #2
 8009cd8:	4a27      	ldr	r2, [pc, #156]	; (8009d78 <xTaskResumeAll+0x128>)
 8009cda:	441a      	add	r2, r3
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	3304      	adds	r3, #4
 8009ce0:	4619      	mov	r1, r3
 8009ce2:	4610      	mov	r0, r2
 8009ce4:	f7fe ff9d 	bl	8008c22 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cec:	4b23      	ldr	r3, [pc, #140]	; (8009d7c <xTaskResumeAll+0x12c>)
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cf2:	429a      	cmp	r2, r3
 8009cf4:	d302      	bcc.n	8009cfc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8009cf6:	4b22      	ldr	r3, [pc, #136]	; (8009d80 <xTaskResumeAll+0x130>)
 8009cf8:	2201      	movs	r2, #1
 8009cfa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009cfc:	4b1c      	ldr	r3, [pc, #112]	; (8009d70 <xTaskResumeAll+0x120>)
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d1cb      	bne.n	8009c9c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d001      	beq.n	8009d0e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009d0a:	f000 fb5f 	bl	800a3cc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009d0e:	4b1d      	ldr	r3, [pc, #116]	; (8009d84 <xTaskResumeAll+0x134>)
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d010      	beq.n	8009d3c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009d1a:	f000 f847 	bl	8009dac <xTaskIncrementTick>
 8009d1e:	4603      	mov	r3, r0
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d002      	beq.n	8009d2a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009d24:	4b16      	ldr	r3, [pc, #88]	; (8009d80 <xTaskResumeAll+0x130>)
 8009d26:	2201      	movs	r2, #1
 8009d28:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	3b01      	subs	r3, #1
 8009d2e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d1f1      	bne.n	8009d1a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8009d36:	4b13      	ldr	r3, [pc, #76]	; (8009d84 <xTaskResumeAll+0x134>)
 8009d38:	2200      	movs	r2, #0
 8009d3a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009d3c:	4b10      	ldr	r3, [pc, #64]	; (8009d80 <xTaskResumeAll+0x130>)
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d009      	beq.n	8009d58 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009d44:	2301      	movs	r3, #1
 8009d46:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009d48:	4b0f      	ldr	r3, [pc, #60]	; (8009d88 <xTaskResumeAll+0x138>)
 8009d4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d4e:	601a      	str	r2, [r3, #0]
 8009d50:	f3bf 8f4f 	dsb	sy
 8009d54:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009d58:	f001 f8e4 	bl	800af24 <vPortExitCritical>

	return xAlreadyYielded;
 8009d5c:	68bb      	ldr	r3, [r7, #8]
}
 8009d5e:	4618      	mov	r0, r3
 8009d60:	3710      	adds	r7, #16
 8009d62:	46bd      	mov	sp, r7
 8009d64:	bd80      	pop	{r7, pc}
 8009d66:	bf00      	nop
 8009d68:	20000f04 	.word	0x20000f04
 8009d6c:	20000edc 	.word	0x20000edc
 8009d70:	20000e9c 	.word	0x20000e9c
 8009d74:	20000ee4 	.word	0x20000ee4
 8009d78:	20000a0c 	.word	0x20000a0c
 8009d7c:	20000a08 	.word	0x20000a08
 8009d80:	20000ef0 	.word	0x20000ef0
 8009d84:	20000eec 	.word	0x20000eec
 8009d88:	e000ed04 	.word	0xe000ed04

08009d8c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009d8c:	b480      	push	{r7}
 8009d8e:	b083      	sub	sp, #12
 8009d90:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009d92:	4b05      	ldr	r3, [pc, #20]	; (8009da8 <xTaskGetTickCount+0x1c>)
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009d98:	687b      	ldr	r3, [r7, #4]
}
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	370c      	adds	r7, #12
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da4:	4770      	bx	lr
 8009da6:	bf00      	nop
 8009da8:	20000ee0 	.word	0x20000ee0

08009dac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009dac:	b580      	push	{r7, lr}
 8009dae:	b086      	sub	sp, #24
 8009db0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009db2:	2300      	movs	r3, #0
 8009db4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009db6:	4b4f      	ldr	r3, [pc, #316]	; (8009ef4 <xTaskIncrementTick+0x148>)
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	f040 808f 	bne.w	8009ede <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009dc0:	4b4d      	ldr	r3, [pc, #308]	; (8009ef8 <xTaskIncrementTick+0x14c>)
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	3301      	adds	r3, #1
 8009dc6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009dc8:	4a4b      	ldr	r2, [pc, #300]	; (8009ef8 <xTaskIncrementTick+0x14c>)
 8009dca:	693b      	ldr	r3, [r7, #16]
 8009dcc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009dce:	693b      	ldr	r3, [r7, #16]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d120      	bne.n	8009e16 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009dd4:	4b49      	ldr	r3, [pc, #292]	; (8009efc <xTaskIncrementTick+0x150>)
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d00a      	beq.n	8009df4 <xTaskIncrementTick+0x48>
	__asm volatile
 8009dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009de2:	f383 8811 	msr	BASEPRI, r3
 8009de6:	f3bf 8f6f 	isb	sy
 8009dea:	f3bf 8f4f 	dsb	sy
 8009dee:	603b      	str	r3, [r7, #0]
}
 8009df0:	bf00      	nop
 8009df2:	e7fe      	b.n	8009df2 <xTaskIncrementTick+0x46>
 8009df4:	4b41      	ldr	r3, [pc, #260]	; (8009efc <xTaskIncrementTick+0x150>)
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	60fb      	str	r3, [r7, #12]
 8009dfa:	4b41      	ldr	r3, [pc, #260]	; (8009f00 <xTaskIncrementTick+0x154>)
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	4a3f      	ldr	r2, [pc, #252]	; (8009efc <xTaskIncrementTick+0x150>)
 8009e00:	6013      	str	r3, [r2, #0]
 8009e02:	4a3f      	ldr	r2, [pc, #252]	; (8009f00 <xTaskIncrementTick+0x154>)
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	6013      	str	r3, [r2, #0]
 8009e08:	4b3e      	ldr	r3, [pc, #248]	; (8009f04 <xTaskIncrementTick+0x158>)
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	3301      	adds	r3, #1
 8009e0e:	4a3d      	ldr	r2, [pc, #244]	; (8009f04 <xTaskIncrementTick+0x158>)
 8009e10:	6013      	str	r3, [r2, #0]
 8009e12:	f000 fadb 	bl	800a3cc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009e16:	4b3c      	ldr	r3, [pc, #240]	; (8009f08 <xTaskIncrementTick+0x15c>)
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	693a      	ldr	r2, [r7, #16]
 8009e1c:	429a      	cmp	r2, r3
 8009e1e:	d349      	bcc.n	8009eb4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009e20:	4b36      	ldr	r3, [pc, #216]	; (8009efc <xTaskIncrementTick+0x150>)
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d104      	bne.n	8009e34 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e2a:	4b37      	ldr	r3, [pc, #220]	; (8009f08 <xTaskIncrementTick+0x15c>)
 8009e2c:	f04f 32ff 	mov.w	r2, #4294967295
 8009e30:	601a      	str	r2, [r3, #0]
					break;
 8009e32:	e03f      	b.n	8009eb4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e34:	4b31      	ldr	r3, [pc, #196]	; (8009efc <xTaskIncrementTick+0x150>)
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	68db      	ldr	r3, [r3, #12]
 8009e3a:	68db      	ldr	r3, [r3, #12]
 8009e3c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009e3e:	68bb      	ldr	r3, [r7, #8]
 8009e40:	685b      	ldr	r3, [r3, #4]
 8009e42:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009e44:	693a      	ldr	r2, [r7, #16]
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	429a      	cmp	r2, r3
 8009e4a:	d203      	bcs.n	8009e54 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009e4c:	4a2e      	ldr	r2, [pc, #184]	; (8009f08 <xTaskIncrementTick+0x15c>)
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009e52:	e02f      	b.n	8009eb4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009e54:	68bb      	ldr	r3, [r7, #8]
 8009e56:	3304      	adds	r3, #4
 8009e58:	4618      	mov	r0, r3
 8009e5a:	f7fe ff3f 	bl	8008cdc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009e5e:	68bb      	ldr	r3, [r7, #8]
 8009e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d004      	beq.n	8009e70 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009e66:	68bb      	ldr	r3, [r7, #8]
 8009e68:	3318      	adds	r3, #24
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	f7fe ff36 	bl	8008cdc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009e70:	68bb      	ldr	r3, [r7, #8]
 8009e72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e74:	4b25      	ldr	r3, [pc, #148]	; (8009f0c <xTaskIncrementTick+0x160>)
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	429a      	cmp	r2, r3
 8009e7a:	d903      	bls.n	8009e84 <xTaskIncrementTick+0xd8>
 8009e7c:	68bb      	ldr	r3, [r7, #8]
 8009e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e80:	4a22      	ldr	r2, [pc, #136]	; (8009f0c <xTaskIncrementTick+0x160>)
 8009e82:	6013      	str	r3, [r2, #0]
 8009e84:	68bb      	ldr	r3, [r7, #8]
 8009e86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e88:	4613      	mov	r3, r2
 8009e8a:	009b      	lsls	r3, r3, #2
 8009e8c:	4413      	add	r3, r2
 8009e8e:	009b      	lsls	r3, r3, #2
 8009e90:	4a1f      	ldr	r2, [pc, #124]	; (8009f10 <xTaskIncrementTick+0x164>)
 8009e92:	441a      	add	r2, r3
 8009e94:	68bb      	ldr	r3, [r7, #8]
 8009e96:	3304      	adds	r3, #4
 8009e98:	4619      	mov	r1, r3
 8009e9a:	4610      	mov	r0, r2
 8009e9c:	f7fe fec1 	bl	8008c22 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009ea0:	68bb      	ldr	r3, [r7, #8]
 8009ea2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ea4:	4b1b      	ldr	r3, [pc, #108]	; (8009f14 <xTaskIncrementTick+0x168>)
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009eaa:	429a      	cmp	r2, r3
 8009eac:	d3b8      	bcc.n	8009e20 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009eae:	2301      	movs	r3, #1
 8009eb0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009eb2:	e7b5      	b.n	8009e20 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009eb4:	4b17      	ldr	r3, [pc, #92]	; (8009f14 <xTaskIncrementTick+0x168>)
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009eba:	4915      	ldr	r1, [pc, #84]	; (8009f10 <xTaskIncrementTick+0x164>)
 8009ebc:	4613      	mov	r3, r2
 8009ebe:	009b      	lsls	r3, r3, #2
 8009ec0:	4413      	add	r3, r2
 8009ec2:	009b      	lsls	r3, r3, #2
 8009ec4:	440b      	add	r3, r1
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	2b01      	cmp	r3, #1
 8009eca:	d901      	bls.n	8009ed0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009ecc:	2301      	movs	r3, #1
 8009ece:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009ed0:	4b11      	ldr	r3, [pc, #68]	; (8009f18 <xTaskIncrementTick+0x16c>)
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d007      	beq.n	8009ee8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009ed8:	2301      	movs	r3, #1
 8009eda:	617b      	str	r3, [r7, #20]
 8009edc:	e004      	b.n	8009ee8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009ede:	4b0f      	ldr	r3, [pc, #60]	; (8009f1c <xTaskIncrementTick+0x170>)
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	3301      	adds	r3, #1
 8009ee4:	4a0d      	ldr	r2, [pc, #52]	; (8009f1c <xTaskIncrementTick+0x170>)
 8009ee6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009ee8:	697b      	ldr	r3, [r7, #20]
}
 8009eea:	4618      	mov	r0, r3
 8009eec:	3718      	adds	r7, #24
 8009eee:	46bd      	mov	sp, r7
 8009ef0:	bd80      	pop	{r7, pc}
 8009ef2:	bf00      	nop
 8009ef4:	20000f04 	.word	0x20000f04
 8009ef8:	20000ee0 	.word	0x20000ee0
 8009efc:	20000e94 	.word	0x20000e94
 8009f00:	20000e98 	.word	0x20000e98
 8009f04:	20000ef4 	.word	0x20000ef4
 8009f08:	20000efc 	.word	0x20000efc
 8009f0c:	20000ee4 	.word	0x20000ee4
 8009f10:	20000a0c 	.word	0x20000a0c
 8009f14:	20000a08 	.word	0x20000a08
 8009f18:	20000ef0 	.word	0x20000ef0
 8009f1c:	20000eec 	.word	0x20000eec

08009f20 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009f20:	b480      	push	{r7}
 8009f22:	b085      	sub	sp, #20
 8009f24:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009f26:	4b2a      	ldr	r3, [pc, #168]	; (8009fd0 <vTaskSwitchContext+0xb0>)
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d003      	beq.n	8009f36 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009f2e:	4b29      	ldr	r3, [pc, #164]	; (8009fd4 <vTaskSwitchContext+0xb4>)
 8009f30:	2201      	movs	r2, #1
 8009f32:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009f34:	e046      	b.n	8009fc4 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8009f36:	4b27      	ldr	r3, [pc, #156]	; (8009fd4 <vTaskSwitchContext+0xb4>)
 8009f38:	2200      	movs	r2, #0
 8009f3a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f3c:	4b26      	ldr	r3, [pc, #152]	; (8009fd8 <vTaskSwitchContext+0xb8>)
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	60fb      	str	r3, [r7, #12]
 8009f42:	e010      	b.n	8009f66 <vTaskSwitchContext+0x46>
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d10a      	bne.n	8009f60 <vTaskSwitchContext+0x40>
	__asm volatile
 8009f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f4e:	f383 8811 	msr	BASEPRI, r3
 8009f52:	f3bf 8f6f 	isb	sy
 8009f56:	f3bf 8f4f 	dsb	sy
 8009f5a:	607b      	str	r3, [r7, #4]
}
 8009f5c:	bf00      	nop
 8009f5e:	e7fe      	b.n	8009f5e <vTaskSwitchContext+0x3e>
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	3b01      	subs	r3, #1
 8009f64:	60fb      	str	r3, [r7, #12]
 8009f66:	491d      	ldr	r1, [pc, #116]	; (8009fdc <vTaskSwitchContext+0xbc>)
 8009f68:	68fa      	ldr	r2, [r7, #12]
 8009f6a:	4613      	mov	r3, r2
 8009f6c:	009b      	lsls	r3, r3, #2
 8009f6e:	4413      	add	r3, r2
 8009f70:	009b      	lsls	r3, r3, #2
 8009f72:	440b      	add	r3, r1
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d0e4      	beq.n	8009f44 <vTaskSwitchContext+0x24>
 8009f7a:	68fa      	ldr	r2, [r7, #12]
 8009f7c:	4613      	mov	r3, r2
 8009f7e:	009b      	lsls	r3, r3, #2
 8009f80:	4413      	add	r3, r2
 8009f82:	009b      	lsls	r3, r3, #2
 8009f84:	4a15      	ldr	r2, [pc, #84]	; (8009fdc <vTaskSwitchContext+0xbc>)
 8009f86:	4413      	add	r3, r2
 8009f88:	60bb      	str	r3, [r7, #8]
 8009f8a:	68bb      	ldr	r3, [r7, #8]
 8009f8c:	685b      	ldr	r3, [r3, #4]
 8009f8e:	685a      	ldr	r2, [r3, #4]
 8009f90:	68bb      	ldr	r3, [r7, #8]
 8009f92:	605a      	str	r2, [r3, #4]
 8009f94:	68bb      	ldr	r3, [r7, #8]
 8009f96:	685a      	ldr	r2, [r3, #4]
 8009f98:	68bb      	ldr	r3, [r7, #8]
 8009f9a:	3308      	adds	r3, #8
 8009f9c:	429a      	cmp	r2, r3
 8009f9e:	d104      	bne.n	8009faa <vTaskSwitchContext+0x8a>
 8009fa0:	68bb      	ldr	r3, [r7, #8]
 8009fa2:	685b      	ldr	r3, [r3, #4]
 8009fa4:	685a      	ldr	r2, [r3, #4]
 8009fa6:	68bb      	ldr	r3, [r7, #8]
 8009fa8:	605a      	str	r2, [r3, #4]
 8009faa:	68bb      	ldr	r3, [r7, #8]
 8009fac:	685b      	ldr	r3, [r3, #4]
 8009fae:	68db      	ldr	r3, [r3, #12]
 8009fb0:	4a0b      	ldr	r2, [pc, #44]	; (8009fe0 <vTaskSwitchContext+0xc0>)
 8009fb2:	6013      	str	r3, [r2, #0]
 8009fb4:	4a08      	ldr	r2, [pc, #32]	; (8009fd8 <vTaskSwitchContext+0xb8>)
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009fba:	4b09      	ldr	r3, [pc, #36]	; (8009fe0 <vTaskSwitchContext+0xc0>)
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	3354      	adds	r3, #84	; 0x54
 8009fc0:	4a08      	ldr	r2, [pc, #32]	; (8009fe4 <vTaskSwitchContext+0xc4>)
 8009fc2:	6013      	str	r3, [r2, #0]
}
 8009fc4:	bf00      	nop
 8009fc6:	3714      	adds	r7, #20
 8009fc8:	46bd      	mov	sp, r7
 8009fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fce:	4770      	bx	lr
 8009fd0:	20000f04 	.word	0x20000f04
 8009fd4:	20000ef0 	.word	0x20000ef0
 8009fd8:	20000ee4 	.word	0x20000ee4
 8009fdc:	20000a0c 	.word	0x20000a0c
 8009fe0:	20000a08 	.word	0x20000a08
 8009fe4:	2000014c 	.word	0x2000014c

08009fe8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009fe8:	b580      	push	{r7, lr}
 8009fea:	b084      	sub	sp, #16
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
 8009ff0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d10a      	bne.n	800a00e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ffc:	f383 8811 	msr	BASEPRI, r3
 800a000:	f3bf 8f6f 	isb	sy
 800a004:	f3bf 8f4f 	dsb	sy
 800a008:	60fb      	str	r3, [r7, #12]
}
 800a00a:	bf00      	nop
 800a00c:	e7fe      	b.n	800a00c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a00e:	4b07      	ldr	r3, [pc, #28]	; (800a02c <vTaskPlaceOnEventList+0x44>)
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	3318      	adds	r3, #24
 800a014:	4619      	mov	r1, r3
 800a016:	6878      	ldr	r0, [r7, #4]
 800a018:	f7fe fe27 	bl	8008c6a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a01c:	2101      	movs	r1, #1
 800a01e:	6838      	ldr	r0, [r7, #0]
 800a020:	f000 fa80 	bl	800a524 <prvAddCurrentTaskToDelayedList>
}
 800a024:	bf00      	nop
 800a026:	3710      	adds	r7, #16
 800a028:	46bd      	mov	sp, r7
 800a02a:	bd80      	pop	{r7, pc}
 800a02c:	20000a08 	.word	0x20000a08

0800a030 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a030:	b580      	push	{r7, lr}
 800a032:	b086      	sub	sp, #24
 800a034:	af00      	add	r7, sp, #0
 800a036:	60f8      	str	r0, [r7, #12]
 800a038:	60b9      	str	r1, [r7, #8]
 800a03a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d10a      	bne.n	800a058 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800a042:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a046:	f383 8811 	msr	BASEPRI, r3
 800a04a:	f3bf 8f6f 	isb	sy
 800a04e:	f3bf 8f4f 	dsb	sy
 800a052:	617b      	str	r3, [r7, #20]
}
 800a054:	bf00      	nop
 800a056:	e7fe      	b.n	800a056 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a058:	4b0a      	ldr	r3, [pc, #40]	; (800a084 <vTaskPlaceOnEventListRestricted+0x54>)
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	3318      	adds	r3, #24
 800a05e:	4619      	mov	r1, r3
 800a060:	68f8      	ldr	r0, [r7, #12]
 800a062:	f7fe fdde 	bl	8008c22 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d002      	beq.n	800a072 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800a06c:	f04f 33ff 	mov.w	r3, #4294967295
 800a070:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a072:	6879      	ldr	r1, [r7, #4]
 800a074:	68b8      	ldr	r0, [r7, #8]
 800a076:	f000 fa55 	bl	800a524 <prvAddCurrentTaskToDelayedList>
	}
 800a07a:	bf00      	nop
 800a07c:	3718      	adds	r7, #24
 800a07e:	46bd      	mov	sp, r7
 800a080:	bd80      	pop	{r7, pc}
 800a082:	bf00      	nop
 800a084:	20000a08 	.word	0x20000a08

0800a088 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a088:	b580      	push	{r7, lr}
 800a08a:	b086      	sub	sp, #24
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	68db      	ldr	r3, [r3, #12]
 800a094:	68db      	ldr	r3, [r3, #12]
 800a096:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a098:	693b      	ldr	r3, [r7, #16]
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d10a      	bne.n	800a0b4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a09e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0a2:	f383 8811 	msr	BASEPRI, r3
 800a0a6:	f3bf 8f6f 	isb	sy
 800a0aa:	f3bf 8f4f 	dsb	sy
 800a0ae:	60fb      	str	r3, [r7, #12]
}
 800a0b0:	bf00      	nop
 800a0b2:	e7fe      	b.n	800a0b2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a0b4:	693b      	ldr	r3, [r7, #16]
 800a0b6:	3318      	adds	r3, #24
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	f7fe fe0f 	bl	8008cdc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a0be:	4b1e      	ldr	r3, [pc, #120]	; (800a138 <xTaskRemoveFromEventList+0xb0>)
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d11d      	bne.n	800a102 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a0c6:	693b      	ldr	r3, [r7, #16]
 800a0c8:	3304      	adds	r3, #4
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	f7fe fe06 	bl	8008cdc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a0d0:	693b      	ldr	r3, [r7, #16]
 800a0d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0d4:	4b19      	ldr	r3, [pc, #100]	; (800a13c <xTaskRemoveFromEventList+0xb4>)
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	429a      	cmp	r2, r3
 800a0da:	d903      	bls.n	800a0e4 <xTaskRemoveFromEventList+0x5c>
 800a0dc:	693b      	ldr	r3, [r7, #16]
 800a0de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0e0:	4a16      	ldr	r2, [pc, #88]	; (800a13c <xTaskRemoveFromEventList+0xb4>)
 800a0e2:	6013      	str	r3, [r2, #0]
 800a0e4:	693b      	ldr	r3, [r7, #16]
 800a0e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0e8:	4613      	mov	r3, r2
 800a0ea:	009b      	lsls	r3, r3, #2
 800a0ec:	4413      	add	r3, r2
 800a0ee:	009b      	lsls	r3, r3, #2
 800a0f0:	4a13      	ldr	r2, [pc, #76]	; (800a140 <xTaskRemoveFromEventList+0xb8>)
 800a0f2:	441a      	add	r2, r3
 800a0f4:	693b      	ldr	r3, [r7, #16]
 800a0f6:	3304      	adds	r3, #4
 800a0f8:	4619      	mov	r1, r3
 800a0fa:	4610      	mov	r0, r2
 800a0fc:	f7fe fd91 	bl	8008c22 <vListInsertEnd>
 800a100:	e005      	b.n	800a10e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a102:	693b      	ldr	r3, [r7, #16]
 800a104:	3318      	adds	r3, #24
 800a106:	4619      	mov	r1, r3
 800a108:	480e      	ldr	r0, [pc, #56]	; (800a144 <xTaskRemoveFromEventList+0xbc>)
 800a10a:	f7fe fd8a 	bl	8008c22 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a10e:	693b      	ldr	r3, [r7, #16]
 800a110:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a112:	4b0d      	ldr	r3, [pc, #52]	; (800a148 <xTaskRemoveFromEventList+0xc0>)
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a118:	429a      	cmp	r2, r3
 800a11a:	d905      	bls.n	800a128 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a11c:	2301      	movs	r3, #1
 800a11e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a120:	4b0a      	ldr	r3, [pc, #40]	; (800a14c <xTaskRemoveFromEventList+0xc4>)
 800a122:	2201      	movs	r2, #1
 800a124:	601a      	str	r2, [r3, #0]
 800a126:	e001      	b.n	800a12c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a128:	2300      	movs	r3, #0
 800a12a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a12c:	697b      	ldr	r3, [r7, #20]
}
 800a12e:	4618      	mov	r0, r3
 800a130:	3718      	adds	r7, #24
 800a132:	46bd      	mov	sp, r7
 800a134:	bd80      	pop	{r7, pc}
 800a136:	bf00      	nop
 800a138:	20000f04 	.word	0x20000f04
 800a13c:	20000ee4 	.word	0x20000ee4
 800a140:	20000a0c 	.word	0x20000a0c
 800a144:	20000e9c 	.word	0x20000e9c
 800a148:	20000a08 	.word	0x20000a08
 800a14c:	20000ef0 	.word	0x20000ef0

0800a150 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a150:	b480      	push	{r7}
 800a152:	b083      	sub	sp, #12
 800a154:	af00      	add	r7, sp, #0
 800a156:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a158:	4b06      	ldr	r3, [pc, #24]	; (800a174 <vTaskInternalSetTimeOutState+0x24>)
 800a15a:	681a      	ldr	r2, [r3, #0]
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a160:	4b05      	ldr	r3, [pc, #20]	; (800a178 <vTaskInternalSetTimeOutState+0x28>)
 800a162:	681a      	ldr	r2, [r3, #0]
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	605a      	str	r2, [r3, #4]
}
 800a168:	bf00      	nop
 800a16a:	370c      	adds	r7, #12
 800a16c:	46bd      	mov	sp, r7
 800a16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a172:	4770      	bx	lr
 800a174:	20000ef4 	.word	0x20000ef4
 800a178:	20000ee0 	.word	0x20000ee0

0800a17c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a17c:	b580      	push	{r7, lr}
 800a17e:	b088      	sub	sp, #32
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
 800a184:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d10a      	bne.n	800a1a2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a18c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a190:	f383 8811 	msr	BASEPRI, r3
 800a194:	f3bf 8f6f 	isb	sy
 800a198:	f3bf 8f4f 	dsb	sy
 800a19c:	613b      	str	r3, [r7, #16]
}
 800a19e:	bf00      	nop
 800a1a0:	e7fe      	b.n	800a1a0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a1a2:	683b      	ldr	r3, [r7, #0]
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d10a      	bne.n	800a1be <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a1a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1ac:	f383 8811 	msr	BASEPRI, r3
 800a1b0:	f3bf 8f6f 	isb	sy
 800a1b4:	f3bf 8f4f 	dsb	sy
 800a1b8:	60fb      	str	r3, [r7, #12]
}
 800a1ba:	bf00      	nop
 800a1bc:	e7fe      	b.n	800a1bc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a1be:	f000 fe81 	bl	800aec4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a1c2:	4b1d      	ldr	r3, [pc, #116]	; (800a238 <xTaskCheckForTimeOut+0xbc>)
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	685b      	ldr	r3, [r3, #4]
 800a1cc:	69ba      	ldr	r2, [r7, #24]
 800a1ce:	1ad3      	subs	r3, r2, r3
 800a1d0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a1d2:	683b      	ldr	r3, [r7, #0]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1da:	d102      	bne.n	800a1e2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a1dc:	2300      	movs	r3, #0
 800a1de:	61fb      	str	r3, [r7, #28]
 800a1e0:	e023      	b.n	800a22a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681a      	ldr	r2, [r3, #0]
 800a1e6:	4b15      	ldr	r3, [pc, #84]	; (800a23c <xTaskCheckForTimeOut+0xc0>)
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	429a      	cmp	r2, r3
 800a1ec:	d007      	beq.n	800a1fe <xTaskCheckForTimeOut+0x82>
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	685b      	ldr	r3, [r3, #4]
 800a1f2:	69ba      	ldr	r2, [r7, #24]
 800a1f4:	429a      	cmp	r2, r3
 800a1f6:	d302      	bcc.n	800a1fe <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a1f8:	2301      	movs	r3, #1
 800a1fa:	61fb      	str	r3, [r7, #28]
 800a1fc:	e015      	b.n	800a22a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a1fe:	683b      	ldr	r3, [r7, #0]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	697a      	ldr	r2, [r7, #20]
 800a204:	429a      	cmp	r2, r3
 800a206:	d20b      	bcs.n	800a220 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a208:	683b      	ldr	r3, [r7, #0]
 800a20a:	681a      	ldr	r2, [r3, #0]
 800a20c:	697b      	ldr	r3, [r7, #20]
 800a20e:	1ad2      	subs	r2, r2, r3
 800a210:	683b      	ldr	r3, [r7, #0]
 800a212:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a214:	6878      	ldr	r0, [r7, #4]
 800a216:	f7ff ff9b 	bl	800a150 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a21a:	2300      	movs	r3, #0
 800a21c:	61fb      	str	r3, [r7, #28]
 800a21e:	e004      	b.n	800a22a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a220:	683b      	ldr	r3, [r7, #0]
 800a222:	2200      	movs	r2, #0
 800a224:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a226:	2301      	movs	r3, #1
 800a228:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a22a:	f000 fe7b 	bl	800af24 <vPortExitCritical>

	return xReturn;
 800a22e:	69fb      	ldr	r3, [r7, #28]
}
 800a230:	4618      	mov	r0, r3
 800a232:	3720      	adds	r7, #32
 800a234:	46bd      	mov	sp, r7
 800a236:	bd80      	pop	{r7, pc}
 800a238:	20000ee0 	.word	0x20000ee0
 800a23c:	20000ef4 	.word	0x20000ef4

0800a240 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a240:	b480      	push	{r7}
 800a242:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a244:	4b03      	ldr	r3, [pc, #12]	; (800a254 <vTaskMissedYield+0x14>)
 800a246:	2201      	movs	r2, #1
 800a248:	601a      	str	r2, [r3, #0]
}
 800a24a:	bf00      	nop
 800a24c:	46bd      	mov	sp, r7
 800a24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a252:	4770      	bx	lr
 800a254:	20000ef0 	.word	0x20000ef0

0800a258 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a258:	b580      	push	{r7, lr}
 800a25a:	b082      	sub	sp, #8
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a260:	f000 f852 	bl	800a308 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a264:	4b06      	ldr	r3, [pc, #24]	; (800a280 <prvIdleTask+0x28>)
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	2b01      	cmp	r3, #1
 800a26a:	d9f9      	bls.n	800a260 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a26c:	4b05      	ldr	r3, [pc, #20]	; (800a284 <prvIdleTask+0x2c>)
 800a26e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a272:	601a      	str	r2, [r3, #0]
 800a274:	f3bf 8f4f 	dsb	sy
 800a278:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a27c:	e7f0      	b.n	800a260 <prvIdleTask+0x8>
 800a27e:	bf00      	nop
 800a280:	20000a0c 	.word	0x20000a0c
 800a284:	e000ed04 	.word	0xe000ed04

0800a288 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a288:	b580      	push	{r7, lr}
 800a28a:	b082      	sub	sp, #8
 800a28c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a28e:	2300      	movs	r3, #0
 800a290:	607b      	str	r3, [r7, #4]
 800a292:	e00c      	b.n	800a2ae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a294:	687a      	ldr	r2, [r7, #4]
 800a296:	4613      	mov	r3, r2
 800a298:	009b      	lsls	r3, r3, #2
 800a29a:	4413      	add	r3, r2
 800a29c:	009b      	lsls	r3, r3, #2
 800a29e:	4a12      	ldr	r2, [pc, #72]	; (800a2e8 <prvInitialiseTaskLists+0x60>)
 800a2a0:	4413      	add	r3, r2
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	f7fe fc90 	bl	8008bc8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	3301      	adds	r3, #1
 800a2ac:	607b      	str	r3, [r7, #4]
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	2b37      	cmp	r3, #55	; 0x37
 800a2b2:	d9ef      	bls.n	800a294 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a2b4:	480d      	ldr	r0, [pc, #52]	; (800a2ec <prvInitialiseTaskLists+0x64>)
 800a2b6:	f7fe fc87 	bl	8008bc8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a2ba:	480d      	ldr	r0, [pc, #52]	; (800a2f0 <prvInitialiseTaskLists+0x68>)
 800a2bc:	f7fe fc84 	bl	8008bc8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a2c0:	480c      	ldr	r0, [pc, #48]	; (800a2f4 <prvInitialiseTaskLists+0x6c>)
 800a2c2:	f7fe fc81 	bl	8008bc8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a2c6:	480c      	ldr	r0, [pc, #48]	; (800a2f8 <prvInitialiseTaskLists+0x70>)
 800a2c8:	f7fe fc7e 	bl	8008bc8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a2cc:	480b      	ldr	r0, [pc, #44]	; (800a2fc <prvInitialiseTaskLists+0x74>)
 800a2ce:	f7fe fc7b 	bl	8008bc8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a2d2:	4b0b      	ldr	r3, [pc, #44]	; (800a300 <prvInitialiseTaskLists+0x78>)
 800a2d4:	4a05      	ldr	r2, [pc, #20]	; (800a2ec <prvInitialiseTaskLists+0x64>)
 800a2d6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a2d8:	4b0a      	ldr	r3, [pc, #40]	; (800a304 <prvInitialiseTaskLists+0x7c>)
 800a2da:	4a05      	ldr	r2, [pc, #20]	; (800a2f0 <prvInitialiseTaskLists+0x68>)
 800a2dc:	601a      	str	r2, [r3, #0]
}
 800a2de:	bf00      	nop
 800a2e0:	3708      	adds	r7, #8
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	bd80      	pop	{r7, pc}
 800a2e6:	bf00      	nop
 800a2e8:	20000a0c 	.word	0x20000a0c
 800a2ec:	20000e6c 	.word	0x20000e6c
 800a2f0:	20000e80 	.word	0x20000e80
 800a2f4:	20000e9c 	.word	0x20000e9c
 800a2f8:	20000eb0 	.word	0x20000eb0
 800a2fc:	20000ec8 	.word	0x20000ec8
 800a300:	20000e94 	.word	0x20000e94
 800a304:	20000e98 	.word	0x20000e98

0800a308 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a308:	b580      	push	{r7, lr}
 800a30a:	b082      	sub	sp, #8
 800a30c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a30e:	e019      	b.n	800a344 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a310:	f000 fdd8 	bl	800aec4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a314:	4b10      	ldr	r3, [pc, #64]	; (800a358 <prvCheckTasksWaitingTermination+0x50>)
 800a316:	68db      	ldr	r3, [r3, #12]
 800a318:	68db      	ldr	r3, [r3, #12]
 800a31a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	3304      	adds	r3, #4
 800a320:	4618      	mov	r0, r3
 800a322:	f7fe fcdb 	bl	8008cdc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a326:	4b0d      	ldr	r3, [pc, #52]	; (800a35c <prvCheckTasksWaitingTermination+0x54>)
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	3b01      	subs	r3, #1
 800a32c:	4a0b      	ldr	r2, [pc, #44]	; (800a35c <prvCheckTasksWaitingTermination+0x54>)
 800a32e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a330:	4b0b      	ldr	r3, [pc, #44]	; (800a360 <prvCheckTasksWaitingTermination+0x58>)
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	3b01      	subs	r3, #1
 800a336:	4a0a      	ldr	r2, [pc, #40]	; (800a360 <prvCheckTasksWaitingTermination+0x58>)
 800a338:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a33a:	f000 fdf3 	bl	800af24 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a33e:	6878      	ldr	r0, [r7, #4]
 800a340:	f000 f810 	bl	800a364 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a344:	4b06      	ldr	r3, [pc, #24]	; (800a360 <prvCheckTasksWaitingTermination+0x58>)
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d1e1      	bne.n	800a310 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a34c:	bf00      	nop
 800a34e:	bf00      	nop
 800a350:	3708      	adds	r7, #8
 800a352:	46bd      	mov	sp, r7
 800a354:	bd80      	pop	{r7, pc}
 800a356:	bf00      	nop
 800a358:	20000eb0 	.word	0x20000eb0
 800a35c:	20000edc 	.word	0x20000edc
 800a360:	20000ec4 	.word	0x20000ec4

0800a364 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a364:	b580      	push	{r7, lr}
 800a366:	b084      	sub	sp, #16
 800a368:	af00      	add	r7, sp, #0
 800a36a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	3354      	adds	r3, #84	; 0x54
 800a370:	4618      	mov	r0, r3
 800a372:	f001 fdd9 	bl	800bf28 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d108      	bne.n	800a392 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a384:	4618      	mov	r0, r3
 800a386:	f000 ff8b 	bl	800b2a0 <vPortFree>
				vPortFree( pxTCB );
 800a38a:	6878      	ldr	r0, [r7, #4]
 800a38c:	f000 ff88 	bl	800b2a0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a390:	e018      	b.n	800a3c4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800a398:	2b01      	cmp	r3, #1
 800a39a:	d103      	bne.n	800a3a4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a39c:	6878      	ldr	r0, [r7, #4]
 800a39e:	f000 ff7f 	bl	800b2a0 <vPortFree>
	}
 800a3a2:	e00f      	b.n	800a3c4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800a3aa:	2b02      	cmp	r3, #2
 800a3ac:	d00a      	beq.n	800a3c4 <prvDeleteTCB+0x60>
	__asm volatile
 800a3ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3b2:	f383 8811 	msr	BASEPRI, r3
 800a3b6:	f3bf 8f6f 	isb	sy
 800a3ba:	f3bf 8f4f 	dsb	sy
 800a3be:	60fb      	str	r3, [r7, #12]
}
 800a3c0:	bf00      	nop
 800a3c2:	e7fe      	b.n	800a3c2 <prvDeleteTCB+0x5e>
	}
 800a3c4:	bf00      	nop
 800a3c6:	3710      	adds	r7, #16
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	bd80      	pop	{r7, pc}

0800a3cc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a3cc:	b480      	push	{r7}
 800a3ce:	b083      	sub	sp, #12
 800a3d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a3d2:	4b0c      	ldr	r3, [pc, #48]	; (800a404 <prvResetNextTaskUnblockTime+0x38>)
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d104      	bne.n	800a3e6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a3dc:	4b0a      	ldr	r3, [pc, #40]	; (800a408 <prvResetNextTaskUnblockTime+0x3c>)
 800a3de:	f04f 32ff 	mov.w	r2, #4294967295
 800a3e2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a3e4:	e008      	b.n	800a3f8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a3e6:	4b07      	ldr	r3, [pc, #28]	; (800a404 <prvResetNextTaskUnblockTime+0x38>)
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	68db      	ldr	r3, [r3, #12]
 800a3ec:	68db      	ldr	r3, [r3, #12]
 800a3ee:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	685b      	ldr	r3, [r3, #4]
 800a3f4:	4a04      	ldr	r2, [pc, #16]	; (800a408 <prvResetNextTaskUnblockTime+0x3c>)
 800a3f6:	6013      	str	r3, [r2, #0]
}
 800a3f8:	bf00      	nop
 800a3fa:	370c      	adds	r7, #12
 800a3fc:	46bd      	mov	sp, r7
 800a3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a402:	4770      	bx	lr
 800a404:	20000e94 	.word	0x20000e94
 800a408:	20000efc 	.word	0x20000efc

0800a40c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a40c:	b480      	push	{r7}
 800a40e:	b083      	sub	sp, #12
 800a410:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a412:	4b0b      	ldr	r3, [pc, #44]	; (800a440 <xTaskGetSchedulerState+0x34>)
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	2b00      	cmp	r3, #0
 800a418:	d102      	bne.n	800a420 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a41a:	2301      	movs	r3, #1
 800a41c:	607b      	str	r3, [r7, #4]
 800a41e:	e008      	b.n	800a432 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a420:	4b08      	ldr	r3, [pc, #32]	; (800a444 <xTaskGetSchedulerState+0x38>)
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	2b00      	cmp	r3, #0
 800a426:	d102      	bne.n	800a42e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a428:	2302      	movs	r3, #2
 800a42a:	607b      	str	r3, [r7, #4]
 800a42c:	e001      	b.n	800a432 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a42e:	2300      	movs	r3, #0
 800a430:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a432:	687b      	ldr	r3, [r7, #4]
	}
 800a434:	4618      	mov	r0, r3
 800a436:	370c      	adds	r7, #12
 800a438:	46bd      	mov	sp, r7
 800a43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43e:	4770      	bx	lr
 800a440:	20000ee8 	.word	0x20000ee8
 800a444:	20000f04 	.word	0x20000f04

0800a448 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a448:	b580      	push	{r7, lr}
 800a44a:	b086      	sub	sp, #24
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a454:	2300      	movs	r3, #0
 800a456:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d056      	beq.n	800a50c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a45e:	4b2e      	ldr	r3, [pc, #184]	; (800a518 <xTaskPriorityDisinherit+0xd0>)
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	693a      	ldr	r2, [r7, #16]
 800a464:	429a      	cmp	r2, r3
 800a466:	d00a      	beq.n	800a47e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a46c:	f383 8811 	msr	BASEPRI, r3
 800a470:	f3bf 8f6f 	isb	sy
 800a474:	f3bf 8f4f 	dsb	sy
 800a478:	60fb      	str	r3, [r7, #12]
}
 800a47a:	bf00      	nop
 800a47c:	e7fe      	b.n	800a47c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a47e:	693b      	ldr	r3, [r7, #16]
 800a480:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a482:	2b00      	cmp	r3, #0
 800a484:	d10a      	bne.n	800a49c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a48a:	f383 8811 	msr	BASEPRI, r3
 800a48e:	f3bf 8f6f 	isb	sy
 800a492:	f3bf 8f4f 	dsb	sy
 800a496:	60bb      	str	r3, [r7, #8]
}
 800a498:	bf00      	nop
 800a49a:	e7fe      	b.n	800a49a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a49c:	693b      	ldr	r3, [r7, #16]
 800a49e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a4a0:	1e5a      	subs	r2, r3, #1
 800a4a2:	693b      	ldr	r3, [r7, #16]
 800a4a4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a4a6:	693b      	ldr	r3, [r7, #16]
 800a4a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4aa:	693b      	ldr	r3, [r7, #16]
 800a4ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a4ae:	429a      	cmp	r2, r3
 800a4b0:	d02c      	beq.n	800a50c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a4b2:	693b      	ldr	r3, [r7, #16]
 800a4b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d128      	bne.n	800a50c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a4ba:	693b      	ldr	r3, [r7, #16]
 800a4bc:	3304      	adds	r3, #4
 800a4be:	4618      	mov	r0, r3
 800a4c0:	f7fe fc0c 	bl	8008cdc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a4c4:	693b      	ldr	r3, [r7, #16]
 800a4c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a4c8:	693b      	ldr	r3, [r7, #16]
 800a4ca:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a4cc:	693b      	ldr	r3, [r7, #16]
 800a4ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4d0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a4d4:	693b      	ldr	r3, [r7, #16]
 800a4d6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a4d8:	693b      	ldr	r3, [r7, #16]
 800a4da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4dc:	4b0f      	ldr	r3, [pc, #60]	; (800a51c <xTaskPriorityDisinherit+0xd4>)
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	429a      	cmp	r2, r3
 800a4e2:	d903      	bls.n	800a4ec <xTaskPriorityDisinherit+0xa4>
 800a4e4:	693b      	ldr	r3, [r7, #16]
 800a4e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4e8:	4a0c      	ldr	r2, [pc, #48]	; (800a51c <xTaskPriorityDisinherit+0xd4>)
 800a4ea:	6013      	str	r3, [r2, #0]
 800a4ec:	693b      	ldr	r3, [r7, #16]
 800a4ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4f0:	4613      	mov	r3, r2
 800a4f2:	009b      	lsls	r3, r3, #2
 800a4f4:	4413      	add	r3, r2
 800a4f6:	009b      	lsls	r3, r3, #2
 800a4f8:	4a09      	ldr	r2, [pc, #36]	; (800a520 <xTaskPriorityDisinherit+0xd8>)
 800a4fa:	441a      	add	r2, r3
 800a4fc:	693b      	ldr	r3, [r7, #16]
 800a4fe:	3304      	adds	r3, #4
 800a500:	4619      	mov	r1, r3
 800a502:	4610      	mov	r0, r2
 800a504:	f7fe fb8d 	bl	8008c22 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a508:	2301      	movs	r3, #1
 800a50a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a50c:	697b      	ldr	r3, [r7, #20]
	}
 800a50e:	4618      	mov	r0, r3
 800a510:	3718      	adds	r7, #24
 800a512:	46bd      	mov	sp, r7
 800a514:	bd80      	pop	{r7, pc}
 800a516:	bf00      	nop
 800a518:	20000a08 	.word	0x20000a08
 800a51c:	20000ee4 	.word	0x20000ee4
 800a520:	20000a0c 	.word	0x20000a0c

0800a524 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a524:	b580      	push	{r7, lr}
 800a526:	b084      	sub	sp, #16
 800a528:	af00      	add	r7, sp, #0
 800a52a:	6078      	str	r0, [r7, #4]
 800a52c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a52e:	4b21      	ldr	r3, [pc, #132]	; (800a5b4 <prvAddCurrentTaskToDelayedList+0x90>)
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a534:	4b20      	ldr	r3, [pc, #128]	; (800a5b8 <prvAddCurrentTaskToDelayedList+0x94>)
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	3304      	adds	r3, #4
 800a53a:	4618      	mov	r0, r3
 800a53c:	f7fe fbce 	bl	8008cdc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a546:	d10a      	bne.n	800a55e <prvAddCurrentTaskToDelayedList+0x3a>
 800a548:	683b      	ldr	r3, [r7, #0]
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d007      	beq.n	800a55e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a54e:	4b1a      	ldr	r3, [pc, #104]	; (800a5b8 <prvAddCurrentTaskToDelayedList+0x94>)
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	3304      	adds	r3, #4
 800a554:	4619      	mov	r1, r3
 800a556:	4819      	ldr	r0, [pc, #100]	; (800a5bc <prvAddCurrentTaskToDelayedList+0x98>)
 800a558:	f7fe fb63 	bl	8008c22 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a55c:	e026      	b.n	800a5ac <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a55e:	68fa      	ldr	r2, [r7, #12]
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	4413      	add	r3, r2
 800a564:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a566:	4b14      	ldr	r3, [pc, #80]	; (800a5b8 <prvAddCurrentTaskToDelayedList+0x94>)
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	68ba      	ldr	r2, [r7, #8]
 800a56c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a56e:	68ba      	ldr	r2, [r7, #8]
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	429a      	cmp	r2, r3
 800a574:	d209      	bcs.n	800a58a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a576:	4b12      	ldr	r3, [pc, #72]	; (800a5c0 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a578:	681a      	ldr	r2, [r3, #0]
 800a57a:	4b0f      	ldr	r3, [pc, #60]	; (800a5b8 <prvAddCurrentTaskToDelayedList+0x94>)
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	3304      	adds	r3, #4
 800a580:	4619      	mov	r1, r3
 800a582:	4610      	mov	r0, r2
 800a584:	f7fe fb71 	bl	8008c6a <vListInsert>
}
 800a588:	e010      	b.n	800a5ac <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a58a:	4b0e      	ldr	r3, [pc, #56]	; (800a5c4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a58c:	681a      	ldr	r2, [r3, #0]
 800a58e:	4b0a      	ldr	r3, [pc, #40]	; (800a5b8 <prvAddCurrentTaskToDelayedList+0x94>)
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	3304      	adds	r3, #4
 800a594:	4619      	mov	r1, r3
 800a596:	4610      	mov	r0, r2
 800a598:	f7fe fb67 	bl	8008c6a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a59c:	4b0a      	ldr	r3, [pc, #40]	; (800a5c8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	68ba      	ldr	r2, [r7, #8]
 800a5a2:	429a      	cmp	r2, r3
 800a5a4:	d202      	bcs.n	800a5ac <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a5a6:	4a08      	ldr	r2, [pc, #32]	; (800a5c8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a5a8:	68bb      	ldr	r3, [r7, #8]
 800a5aa:	6013      	str	r3, [r2, #0]
}
 800a5ac:	bf00      	nop
 800a5ae:	3710      	adds	r7, #16
 800a5b0:	46bd      	mov	sp, r7
 800a5b2:	bd80      	pop	{r7, pc}
 800a5b4:	20000ee0 	.word	0x20000ee0
 800a5b8:	20000a08 	.word	0x20000a08
 800a5bc:	20000ec8 	.word	0x20000ec8
 800a5c0:	20000e98 	.word	0x20000e98
 800a5c4:	20000e94 	.word	0x20000e94
 800a5c8:	20000efc 	.word	0x20000efc

0800a5cc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a5cc:	b580      	push	{r7, lr}
 800a5ce:	b08a      	sub	sp, #40	; 0x28
 800a5d0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a5d6:	f000 fb07 	bl	800abe8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a5da:	4b1c      	ldr	r3, [pc, #112]	; (800a64c <xTimerCreateTimerTask+0x80>)
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d021      	beq.n	800a626 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a5e6:	2300      	movs	r3, #0
 800a5e8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a5ea:	1d3a      	adds	r2, r7, #4
 800a5ec:	f107 0108 	add.w	r1, r7, #8
 800a5f0:	f107 030c 	add.w	r3, r7, #12
 800a5f4:	4618      	mov	r0, r3
 800a5f6:	f7fe facd 	bl	8008b94 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a5fa:	6879      	ldr	r1, [r7, #4]
 800a5fc:	68bb      	ldr	r3, [r7, #8]
 800a5fe:	68fa      	ldr	r2, [r7, #12]
 800a600:	9202      	str	r2, [sp, #8]
 800a602:	9301      	str	r3, [sp, #4]
 800a604:	2302      	movs	r3, #2
 800a606:	9300      	str	r3, [sp, #0]
 800a608:	2300      	movs	r3, #0
 800a60a:	460a      	mov	r2, r1
 800a60c:	4910      	ldr	r1, [pc, #64]	; (800a650 <xTimerCreateTimerTask+0x84>)
 800a60e:	4811      	ldr	r0, [pc, #68]	; (800a654 <xTimerCreateTimerTask+0x88>)
 800a610:	f7ff f8b4 	bl	800977c <xTaskCreateStatic>
 800a614:	4603      	mov	r3, r0
 800a616:	4a10      	ldr	r2, [pc, #64]	; (800a658 <xTimerCreateTimerTask+0x8c>)
 800a618:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a61a:	4b0f      	ldr	r3, [pc, #60]	; (800a658 <xTimerCreateTimerTask+0x8c>)
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d001      	beq.n	800a626 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a622:	2301      	movs	r3, #1
 800a624:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a626:	697b      	ldr	r3, [r7, #20]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d10a      	bne.n	800a642 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800a62c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a630:	f383 8811 	msr	BASEPRI, r3
 800a634:	f3bf 8f6f 	isb	sy
 800a638:	f3bf 8f4f 	dsb	sy
 800a63c:	613b      	str	r3, [r7, #16]
}
 800a63e:	bf00      	nop
 800a640:	e7fe      	b.n	800a640 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a642:	697b      	ldr	r3, [r7, #20]
}
 800a644:	4618      	mov	r0, r3
 800a646:	3718      	adds	r7, #24
 800a648:	46bd      	mov	sp, r7
 800a64a:	bd80      	pop	{r7, pc}
 800a64c:	20000f38 	.word	0x20000f38
 800a650:	0800c1a0 	.word	0x0800c1a0
 800a654:	0800a791 	.word	0x0800a791
 800a658:	20000f3c 	.word	0x20000f3c

0800a65c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a65c:	b580      	push	{r7, lr}
 800a65e:	b08a      	sub	sp, #40	; 0x28
 800a660:	af00      	add	r7, sp, #0
 800a662:	60f8      	str	r0, [r7, #12]
 800a664:	60b9      	str	r1, [r7, #8]
 800a666:	607a      	str	r2, [r7, #4]
 800a668:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a66a:	2300      	movs	r3, #0
 800a66c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	2b00      	cmp	r3, #0
 800a672:	d10a      	bne.n	800a68a <xTimerGenericCommand+0x2e>
	__asm volatile
 800a674:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a678:	f383 8811 	msr	BASEPRI, r3
 800a67c:	f3bf 8f6f 	isb	sy
 800a680:	f3bf 8f4f 	dsb	sy
 800a684:	623b      	str	r3, [r7, #32]
}
 800a686:	bf00      	nop
 800a688:	e7fe      	b.n	800a688 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a68a:	4b1a      	ldr	r3, [pc, #104]	; (800a6f4 <xTimerGenericCommand+0x98>)
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d02a      	beq.n	800a6e8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a692:	68bb      	ldr	r3, [r7, #8]
 800a694:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a69e:	68bb      	ldr	r3, [r7, #8]
 800a6a0:	2b05      	cmp	r3, #5
 800a6a2:	dc18      	bgt.n	800a6d6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a6a4:	f7ff feb2 	bl	800a40c <xTaskGetSchedulerState>
 800a6a8:	4603      	mov	r3, r0
 800a6aa:	2b02      	cmp	r3, #2
 800a6ac:	d109      	bne.n	800a6c2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a6ae:	4b11      	ldr	r3, [pc, #68]	; (800a6f4 <xTimerGenericCommand+0x98>)
 800a6b0:	6818      	ldr	r0, [r3, #0]
 800a6b2:	f107 0110 	add.w	r1, r7, #16
 800a6b6:	2300      	movs	r3, #0
 800a6b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a6ba:	f7fe fc77 	bl	8008fac <xQueueGenericSend>
 800a6be:	6278      	str	r0, [r7, #36]	; 0x24
 800a6c0:	e012      	b.n	800a6e8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a6c2:	4b0c      	ldr	r3, [pc, #48]	; (800a6f4 <xTimerGenericCommand+0x98>)
 800a6c4:	6818      	ldr	r0, [r3, #0]
 800a6c6:	f107 0110 	add.w	r1, r7, #16
 800a6ca:	2300      	movs	r3, #0
 800a6cc:	2200      	movs	r2, #0
 800a6ce:	f7fe fc6d 	bl	8008fac <xQueueGenericSend>
 800a6d2:	6278      	str	r0, [r7, #36]	; 0x24
 800a6d4:	e008      	b.n	800a6e8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a6d6:	4b07      	ldr	r3, [pc, #28]	; (800a6f4 <xTimerGenericCommand+0x98>)
 800a6d8:	6818      	ldr	r0, [r3, #0]
 800a6da:	f107 0110 	add.w	r1, r7, #16
 800a6de:	2300      	movs	r3, #0
 800a6e0:	683a      	ldr	r2, [r7, #0]
 800a6e2:	f7fe fd61 	bl	80091a8 <xQueueGenericSendFromISR>
 800a6e6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a6e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	3728      	adds	r7, #40	; 0x28
 800a6ee:	46bd      	mov	sp, r7
 800a6f0:	bd80      	pop	{r7, pc}
 800a6f2:	bf00      	nop
 800a6f4:	20000f38 	.word	0x20000f38

0800a6f8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a6f8:	b580      	push	{r7, lr}
 800a6fa:	b088      	sub	sp, #32
 800a6fc:	af02      	add	r7, sp, #8
 800a6fe:	6078      	str	r0, [r7, #4]
 800a700:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a702:	4b22      	ldr	r3, [pc, #136]	; (800a78c <prvProcessExpiredTimer+0x94>)
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	68db      	ldr	r3, [r3, #12]
 800a708:	68db      	ldr	r3, [r3, #12]
 800a70a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a70c:	697b      	ldr	r3, [r7, #20]
 800a70e:	3304      	adds	r3, #4
 800a710:	4618      	mov	r0, r3
 800a712:	f7fe fae3 	bl	8008cdc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a716:	697b      	ldr	r3, [r7, #20]
 800a718:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a71c:	f003 0304 	and.w	r3, r3, #4
 800a720:	2b00      	cmp	r3, #0
 800a722:	d022      	beq.n	800a76a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a724:	697b      	ldr	r3, [r7, #20]
 800a726:	699a      	ldr	r2, [r3, #24]
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	18d1      	adds	r1, r2, r3
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	683a      	ldr	r2, [r7, #0]
 800a730:	6978      	ldr	r0, [r7, #20]
 800a732:	f000 f8d1 	bl	800a8d8 <prvInsertTimerInActiveList>
 800a736:	4603      	mov	r3, r0
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d01f      	beq.n	800a77c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a73c:	2300      	movs	r3, #0
 800a73e:	9300      	str	r3, [sp, #0]
 800a740:	2300      	movs	r3, #0
 800a742:	687a      	ldr	r2, [r7, #4]
 800a744:	2100      	movs	r1, #0
 800a746:	6978      	ldr	r0, [r7, #20]
 800a748:	f7ff ff88 	bl	800a65c <xTimerGenericCommand>
 800a74c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a74e:	693b      	ldr	r3, [r7, #16]
 800a750:	2b00      	cmp	r3, #0
 800a752:	d113      	bne.n	800a77c <prvProcessExpiredTimer+0x84>
	__asm volatile
 800a754:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a758:	f383 8811 	msr	BASEPRI, r3
 800a75c:	f3bf 8f6f 	isb	sy
 800a760:	f3bf 8f4f 	dsb	sy
 800a764:	60fb      	str	r3, [r7, #12]
}
 800a766:	bf00      	nop
 800a768:	e7fe      	b.n	800a768 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a76a:	697b      	ldr	r3, [r7, #20]
 800a76c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a770:	f023 0301 	bic.w	r3, r3, #1
 800a774:	b2da      	uxtb	r2, r3
 800a776:	697b      	ldr	r3, [r7, #20]
 800a778:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a77c:	697b      	ldr	r3, [r7, #20]
 800a77e:	6a1b      	ldr	r3, [r3, #32]
 800a780:	6978      	ldr	r0, [r7, #20]
 800a782:	4798      	blx	r3
}
 800a784:	bf00      	nop
 800a786:	3718      	adds	r7, #24
 800a788:	46bd      	mov	sp, r7
 800a78a:	bd80      	pop	{r7, pc}
 800a78c:	20000f30 	.word	0x20000f30

0800a790 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a790:	b580      	push	{r7, lr}
 800a792:	b084      	sub	sp, #16
 800a794:	af00      	add	r7, sp, #0
 800a796:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a798:	f107 0308 	add.w	r3, r7, #8
 800a79c:	4618      	mov	r0, r3
 800a79e:	f000 f857 	bl	800a850 <prvGetNextExpireTime>
 800a7a2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a7a4:	68bb      	ldr	r3, [r7, #8]
 800a7a6:	4619      	mov	r1, r3
 800a7a8:	68f8      	ldr	r0, [r7, #12]
 800a7aa:	f000 f803 	bl	800a7b4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a7ae:	f000 f8d5 	bl	800a95c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a7b2:	e7f1      	b.n	800a798 <prvTimerTask+0x8>

0800a7b4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a7b4:	b580      	push	{r7, lr}
 800a7b6:	b084      	sub	sp, #16
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	6078      	str	r0, [r7, #4]
 800a7bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a7be:	f7ff fa39 	bl	8009c34 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a7c2:	f107 0308 	add.w	r3, r7, #8
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	f000 f866 	bl	800a898 <prvSampleTimeNow>
 800a7cc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a7ce:	68bb      	ldr	r3, [r7, #8]
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d130      	bne.n	800a836 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a7d4:	683b      	ldr	r3, [r7, #0]
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d10a      	bne.n	800a7f0 <prvProcessTimerOrBlockTask+0x3c>
 800a7da:	687a      	ldr	r2, [r7, #4]
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	429a      	cmp	r2, r3
 800a7e0:	d806      	bhi.n	800a7f0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a7e2:	f7ff fa35 	bl	8009c50 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a7e6:	68f9      	ldr	r1, [r7, #12]
 800a7e8:	6878      	ldr	r0, [r7, #4]
 800a7ea:	f7ff ff85 	bl	800a6f8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a7ee:	e024      	b.n	800a83a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a7f0:	683b      	ldr	r3, [r7, #0]
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d008      	beq.n	800a808 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a7f6:	4b13      	ldr	r3, [pc, #76]	; (800a844 <prvProcessTimerOrBlockTask+0x90>)
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d101      	bne.n	800a804 <prvProcessTimerOrBlockTask+0x50>
 800a800:	2301      	movs	r3, #1
 800a802:	e000      	b.n	800a806 <prvProcessTimerOrBlockTask+0x52>
 800a804:	2300      	movs	r3, #0
 800a806:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a808:	4b0f      	ldr	r3, [pc, #60]	; (800a848 <prvProcessTimerOrBlockTask+0x94>)
 800a80a:	6818      	ldr	r0, [r3, #0]
 800a80c:	687a      	ldr	r2, [r7, #4]
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	1ad3      	subs	r3, r2, r3
 800a812:	683a      	ldr	r2, [r7, #0]
 800a814:	4619      	mov	r1, r3
 800a816:	f7fe ff7d 	bl	8009714 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a81a:	f7ff fa19 	bl	8009c50 <xTaskResumeAll>
 800a81e:	4603      	mov	r3, r0
 800a820:	2b00      	cmp	r3, #0
 800a822:	d10a      	bne.n	800a83a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a824:	4b09      	ldr	r3, [pc, #36]	; (800a84c <prvProcessTimerOrBlockTask+0x98>)
 800a826:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a82a:	601a      	str	r2, [r3, #0]
 800a82c:	f3bf 8f4f 	dsb	sy
 800a830:	f3bf 8f6f 	isb	sy
}
 800a834:	e001      	b.n	800a83a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a836:	f7ff fa0b 	bl	8009c50 <xTaskResumeAll>
}
 800a83a:	bf00      	nop
 800a83c:	3710      	adds	r7, #16
 800a83e:	46bd      	mov	sp, r7
 800a840:	bd80      	pop	{r7, pc}
 800a842:	bf00      	nop
 800a844:	20000f34 	.word	0x20000f34
 800a848:	20000f38 	.word	0x20000f38
 800a84c:	e000ed04 	.word	0xe000ed04

0800a850 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a850:	b480      	push	{r7}
 800a852:	b085      	sub	sp, #20
 800a854:	af00      	add	r7, sp, #0
 800a856:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a858:	4b0e      	ldr	r3, [pc, #56]	; (800a894 <prvGetNextExpireTime+0x44>)
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d101      	bne.n	800a866 <prvGetNextExpireTime+0x16>
 800a862:	2201      	movs	r2, #1
 800a864:	e000      	b.n	800a868 <prvGetNextExpireTime+0x18>
 800a866:	2200      	movs	r2, #0
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	2b00      	cmp	r3, #0
 800a872:	d105      	bne.n	800a880 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a874:	4b07      	ldr	r3, [pc, #28]	; (800a894 <prvGetNextExpireTime+0x44>)
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	68db      	ldr	r3, [r3, #12]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	60fb      	str	r3, [r7, #12]
 800a87e:	e001      	b.n	800a884 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a880:	2300      	movs	r3, #0
 800a882:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a884:	68fb      	ldr	r3, [r7, #12]
}
 800a886:	4618      	mov	r0, r3
 800a888:	3714      	adds	r7, #20
 800a88a:	46bd      	mov	sp, r7
 800a88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a890:	4770      	bx	lr
 800a892:	bf00      	nop
 800a894:	20000f30 	.word	0x20000f30

0800a898 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a898:	b580      	push	{r7, lr}
 800a89a:	b084      	sub	sp, #16
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a8a0:	f7ff fa74 	bl	8009d8c <xTaskGetTickCount>
 800a8a4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a8a6:	4b0b      	ldr	r3, [pc, #44]	; (800a8d4 <prvSampleTimeNow+0x3c>)
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	68fa      	ldr	r2, [r7, #12]
 800a8ac:	429a      	cmp	r2, r3
 800a8ae:	d205      	bcs.n	800a8bc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a8b0:	f000 f936 	bl	800ab20 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	2201      	movs	r2, #1
 800a8b8:	601a      	str	r2, [r3, #0]
 800a8ba:	e002      	b.n	800a8c2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	2200      	movs	r2, #0
 800a8c0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a8c2:	4a04      	ldr	r2, [pc, #16]	; (800a8d4 <prvSampleTimeNow+0x3c>)
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a8c8:	68fb      	ldr	r3, [r7, #12]
}
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	3710      	adds	r7, #16
 800a8ce:	46bd      	mov	sp, r7
 800a8d0:	bd80      	pop	{r7, pc}
 800a8d2:	bf00      	nop
 800a8d4:	20000f40 	.word	0x20000f40

0800a8d8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a8d8:	b580      	push	{r7, lr}
 800a8da:	b086      	sub	sp, #24
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	60f8      	str	r0, [r7, #12]
 800a8e0:	60b9      	str	r1, [r7, #8]
 800a8e2:	607a      	str	r2, [r7, #4]
 800a8e4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a8e6:	2300      	movs	r3, #0
 800a8e8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	68ba      	ldr	r2, [r7, #8]
 800a8ee:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	68fa      	ldr	r2, [r7, #12]
 800a8f4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a8f6:	68ba      	ldr	r2, [r7, #8]
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	429a      	cmp	r2, r3
 800a8fc:	d812      	bhi.n	800a924 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a8fe:	687a      	ldr	r2, [r7, #4]
 800a900:	683b      	ldr	r3, [r7, #0]
 800a902:	1ad2      	subs	r2, r2, r3
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	699b      	ldr	r3, [r3, #24]
 800a908:	429a      	cmp	r2, r3
 800a90a:	d302      	bcc.n	800a912 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a90c:	2301      	movs	r3, #1
 800a90e:	617b      	str	r3, [r7, #20]
 800a910:	e01b      	b.n	800a94a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a912:	4b10      	ldr	r3, [pc, #64]	; (800a954 <prvInsertTimerInActiveList+0x7c>)
 800a914:	681a      	ldr	r2, [r3, #0]
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	3304      	adds	r3, #4
 800a91a:	4619      	mov	r1, r3
 800a91c:	4610      	mov	r0, r2
 800a91e:	f7fe f9a4 	bl	8008c6a <vListInsert>
 800a922:	e012      	b.n	800a94a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a924:	687a      	ldr	r2, [r7, #4]
 800a926:	683b      	ldr	r3, [r7, #0]
 800a928:	429a      	cmp	r2, r3
 800a92a:	d206      	bcs.n	800a93a <prvInsertTimerInActiveList+0x62>
 800a92c:	68ba      	ldr	r2, [r7, #8]
 800a92e:	683b      	ldr	r3, [r7, #0]
 800a930:	429a      	cmp	r2, r3
 800a932:	d302      	bcc.n	800a93a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a934:	2301      	movs	r3, #1
 800a936:	617b      	str	r3, [r7, #20]
 800a938:	e007      	b.n	800a94a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a93a:	4b07      	ldr	r3, [pc, #28]	; (800a958 <prvInsertTimerInActiveList+0x80>)
 800a93c:	681a      	ldr	r2, [r3, #0]
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	3304      	adds	r3, #4
 800a942:	4619      	mov	r1, r3
 800a944:	4610      	mov	r0, r2
 800a946:	f7fe f990 	bl	8008c6a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a94a:	697b      	ldr	r3, [r7, #20]
}
 800a94c:	4618      	mov	r0, r3
 800a94e:	3718      	adds	r7, #24
 800a950:	46bd      	mov	sp, r7
 800a952:	bd80      	pop	{r7, pc}
 800a954:	20000f34 	.word	0x20000f34
 800a958:	20000f30 	.word	0x20000f30

0800a95c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a95c:	b580      	push	{r7, lr}
 800a95e:	b08e      	sub	sp, #56	; 0x38
 800a960:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a962:	e0ca      	b.n	800aafa <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	2b00      	cmp	r3, #0
 800a968:	da18      	bge.n	800a99c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a96a:	1d3b      	adds	r3, r7, #4
 800a96c:	3304      	adds	r3, #4
 800a96e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a972:	2b00      	cmp	r3, #0
 800a974:	d10a      	bne.n	800a98c <prvProcessReceivedCommands+0x30>
	__asm volatile
 800a976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a97a:	f383 8811 	msr	BASEPRI, r3
 800a97e:	f3bf 8f6f 	isb	sy
 800a982:	f3bf 8f4f 	dsb	sy
 800a986:	61fb      	str	r3, [r7, #28]
}
 800a988:	bf00      	nop
 800a98a:	e7fe      	b.n	800a98a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a98c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a992:	6850      	ldr	r0, [r2, #4]
 800a994:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a996:	6892      	ldr	r2, [r2, #8]
 800a998:	4611      	mov	r1, r2
 800a99a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	f2c0 80ab 	blt.w	800aafa <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a9a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9aa:	695b      	ldr	r3, [r3, #20]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d004      	beq.n	800a9ba <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a9b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9b2:	3304      	adds	r3, #4
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	f7fe f991 	bl	8008cdc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a9ba:	463b      	mov	r3, r7
 800a9bc:	4618      	mov	r0, r3
 800a9be:	f7ff ff6b 	bl	800a898 <prvSampleTimeNow>
 800a9c2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	2b09      	cmp	r3, #9
 800a9c8:	f200 8096 	bhi.w	800aaf8 <prvProcessReceivedCommands+0x19c>
 800a9cc:	a201      	add	r2, pc, #4	; (adr r2, 800a9d4 <prvProcessReceivedCommands+0x78>)
 800a9ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9d2:	bf00      	nop
 800a9d4:	0800a9fd 	.word	0x0800a9fd
 800a9d8:	0800a9fd 	.word	0x0800a9fd
 800a9dc:	0800a9fd 	.word	0x0800a9fd
 800a9e0:	0800aa71 	.word	0x0800aa71
 800a9e4:	0800aa85 	.word	0x0800aa85
 800a9e8:	0800aacf 	.word	0x0800aacf
 800a9ec:	0800a9fd 	.word	0x0800a9fd
 800a9f0:	0800a9fd 	.word	0x0800a9fd
 800a9f4:	0800aa71 	.word	0x0800aa71
 800a9f8:	0800aa85 	.word	0x0800aa85
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a9fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aa02:	f043 0301 	orr.w	r3, r3, #1
 800aa06:	b2da      	uxtb	r2, r3
 800aa08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa0a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800aa0e:	68ba      	ldr	r2, [r7, #8]
 800aa10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa12:	699b      	ldr	r3, [r3, #24]
 800aa14:	18d1      	adds	r1, r2, r3
 800aa16:	68bb      	ldr	r3, [r7, #8]
 800aa18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa1c:	f7ff ff5c 	bl	800a8d8 <prvInsertTimerInActiveList>
 800aa20:	4603      	mov	r3, r0
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d069      	beq.n	800aafa <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800aa26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa28:	6a1b      	ldr	r3, [r3, #32]
 800aa2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa2c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800aa2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aa34:	f003 0304 	and.w	r3, r3, #4
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d05e      	beq.n	800aafa <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800aa3c:	68ba      	ldr	r2, [r7, #8]
 800aa3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa40:	699b      	ldr	r3, [r3, #24]
 800aa42:	441a      	add	r2, r3
 800aa44:	2300      	movs	r3, #0
 800aa46:	9300      	str	r3, [sp, #0]
 800aa48:	2300      	movs	r3, #0
 800aa4a:	2100      	movs	r1, #0
 800aa4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa4e:	f7ff fe05 	bl	800a65c <xTimerGenericCommand>
 800aa52:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800aa54:	6a3b      	ldr	r3, [r7, #32]
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d14f      	bne.n	800aafa <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800aa5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa5e:	f383 8811 	msr	BASEPRI, r3
 800aa62:	f3bf 8f6f 	isb	sy
 800aa66:	f3bf 8f4f 	dsb	sy
 800aa6a:	61bb      	str	r3, [r7, #24]
}
 800aa6c:	bf00      	nop
 800aa6e:	e7fe      	b.n	800aa6e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800aa70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa72:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aa76:	f023 0301 	bic.w	r3, r3, #1
 800aa7a:	b2da      	uxtb	r2, r3
 800aa7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa7e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800aa82:	e03a      	b.n	800aafa <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800aa84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa86:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aa8a:	f043 0301 	orr.w	r3, r3, #1
 800aa8e:	b2da      	uxtb	r2, r3
 800aa90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa92:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800aa96:	68ba      	ldr	r2, [r7, #8]
 800aa98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa9a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800aa9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa9e:	699b      	ldr	r3, [r3, #24]
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d10a      	bne.n	800aaba <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800aaa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaa8:	f383 8811 	msr	BASEPRI, r3
 800aaac:	f3bf 8f6f 	isb	sy
 800aab0:	f3bf 8f4f 	dsb	sy
 800aab4:	617b      	str	r3, [r7, #20]
}
 800aab6:	bf00      	nop
 800aab8:	e7fe      	b.n	800aab8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800aaba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aabc:	699a      	ldr	r2, [r3, #24]
 800aabe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aac0:	18d1      	adds	r1, r2, r3
 800aac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aac4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aac6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aac8:	f7ff ff06 	bl	800a8d8 <prvInsertTimerInActiveList>
					break;
 800aacc:	e015      	b.n	800aafa <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800aace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aad0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aad4:	f003 0302 	and.w	r3, r3, #2
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d103      	bne.n	800aae4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800aadc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aade:	f000 fbdf 	bl	800b2a0 <vPortFree>
 800aae2:	e00a      	b.n	800aafa <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800aae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aae6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aaea:	f023 0301 	bic.w	r3, r3, #1
 800aaee:	b2da      	uxtb	r2, r3
 800aaf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaf2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800aaf6:	e000      	b.n	800aafa <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800aaf8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800aafa:	4b08      	ldr	r3, [pc, #32]	; (800ab1c <prvProcessReceivedCommands+0x1c0>)
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	1d39      	adds	r1, r7, #4
 800ab00:	2200      	movs	r2, #0
 800ab02:	4618      	mov	r0, r3
 800ab04:	f7fe fbec 	bl	80092e0 <xQueueReceive>
 800ab08:	4603      	mov	r3, r0
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	f47f af2a 	bne.w	800a964 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800ab10:	bf00      	nop
 800ab12:	bf00      	nop
 800ab14:	3730      	adds	r7, #48	; 0x30
 800ab16:	46bd      	mov	sp, r7
 800ab18:	bd80      	pop	{r7, pc}
 800ab1a:	bf00      	nop
 800ab1c:	20000f38 	.word	0x20000f38

0800ab20 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ab20:	b580      	push	{r7, lr}
 800ab22:	b088      	sub	sp, #32
 800ab24:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ab26:	e048      	b.n	800abba <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ab28:	4b2d      	ldr	r3, [pc, #180]	; (800abe0 <prvSwitchTimerLists+0xc0>)
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	68db      	ldr	r3, [r3, #12]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ab32:	4b2b      	ldr	r3, [pc, #172]	; (800abe0 <prvSwitchTimerLists+0xc0>)
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	68db      	ldr	r3, [r3, #12]
 800ab38:	68db      	ldr	r3, [r3, #12]
 800ab3a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	3304      	adds	r3, #4
 800ab40:	4618      	mov	r0, r3
 800ab42:	f7fe f8cb 	bl	8008cdc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	6a1b      	ldr	r3, [r3, #32]
 800ab4a:	68f8      	ldr	r0, [r7, #12]
 800ab4c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ab54:	f003 0304 	and.w	r3, r3, #4
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d02e      	beq.n	800abba <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	699b      	ldr	r3, [r3, #24]
 800ab60:	693a      	ldr	r2, [r7, #16]
 800ab62:	4413      	add	r3, r2
 800ab64:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ab66:	68ba      	ldr	r2, [r7, #8]
 800ab68:	693b      	ldr	r3, [r7, #16]
 800ab6a:	429a      	cmp	r2, r3
 800ab6c:	d90e      	bls.n	800ab8c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	68ba      	ldr	r2, [r7, #8]
 800ab72:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	68fa      	ldr	r2, [r7, #12]
 800ab78:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ab7a:	4b19      	ldr	r3, [pc, #100]	; (800abe0 <prvSwitchTimerLists+0xc0>)
 800ab7c:	681a      	ldr	r2, [r3, #0]
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	3304      	adds	r3, #4
 800ab82:	4619      	mov	r1, r3
 800ab84:	4610      	mov	r0, r2
 800ab86:	f7fe f870 	bl	8008c6a <vListInsert>
 800ab8a:	e016      	b.n	800abba <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ab8c:	2300      	movs	r3, #0
 800ab8e:	9300      	str	r3, [sp, #0]
 800ab90:	2300      	movs	r3, #0
 800ab92:	693a      	ldr	r2, [r7, #16]
 800ab94:	2100      	movs	r1, #0
 800ab96:	68f8      	ldr	r0, [r7, #12]
 800ab98:	f7ff fd60 	bl	800a65c <xTimerGenericCommand>
 800ab9c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d10a      	bne.n	800abba <prvSwitchTimerLists+0x9a>
	__asm volatile
 800aba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aba8:	f383 8811 	msr	BASEPRI, r3
 800abac:	f3bf 8f6f 	isb	sy
 800abb0:	f3bf 8f4f 	dsb	sy
 800abb4:	603b      	str	r3, [r7, #0]
}
 800abb6:	bf00      	nop
 800abb8:	e7fe      	b.n	800abb8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800abba:	4b09      	ldr	r3, [pc, #36]	; (800abe0 <prvSwitchTimerLists+0xc0>)
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d1b1      	bne.n	800ab28 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800abc4:	4b06      	ldr	r3, [pc, #24]	; (800abe0 <prvSwitchTimerLists+0xc0>)
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800abca:	4b06      	ldr	r3, [pc, #24]	; (800abe4 <prvSwitchTimerLists+0xc4>)
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	4a04      	ldr	r2, [pc, #16]	; (800abe0 <prvSwitchTimerLists+0xc0>)
 800abd0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800abd2:	4a04      	ldr	r2, [pc, #16]	; (800abe4 <prvSwitchTimerLists+0xc4>)
 800abd4:	697b      	ldr	r3, [r7, #20]
 800abd6:	6013      	str	r3, [r2, #0]
}
 800abd8:	bf00      	nop
 800abda:	3718      	adds	r7, #24
 800abdc:	46bd      	mov	sp, r7
 800abde:	bd80      	pop	{r7, pc}
 800abe0:	20000f30 	.word	0x20000f30
 800abe4:	20000f34 	.word	0x20000f34

0800abe8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800abe8:	b580      	push	{r7, lr}
 800abea:	b082      	sub	sp, #8
 800abec:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800abee:	f000 f969 	bl	800aec4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800abf2:	4b15      	ldr	r3, [pc, #84]	; (800ac48 <prvCheckForValidListAndQueue+0x60>)
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d120      	bne.n	800ac3c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800abfa:	4814      	ldr	r0, [pc, #80]	; (800ac4c <prvCheckForValidListAndQueue+0x64>)
 800abfc:	f7fd ffe4 	bl	8008bc8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ac00:	4813      	ldr	r0, [pc, #76]	; (800ac50 <prvCheckForValidListAndQueue+0x68>)
 800ac02:	f7fd ffe1 	bl	8008bc8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ac06:	4b13      	ldr	r3, [pc, #76]	; (800ac54 <prvCheckForValidListAndQueue+0x6c>)
 800ac08:	4a10      	ldr	r2, [pc, #64]	; (800ac4c <prvCheckForValidListAndQueue+0x64>)
 800ac0a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ac0c:	4b12      	ldr	r3, [pc, #72]	; (800ac58 <prvCheckForValidListAndQueue+0x70>)
 800ac0e:	4a10      	ldr	r2, [pc, #64]	; (800ac50 <prvCheckForValidListAndQueue+0x68>)
 800ac10:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ac12:	2300      	movs	r3, #0
 800ac14:	9300      	str	r3, [sp, #0]
 800ac16:	4b11      	ldr	r3, [pc, #68]	; (800ac5c <prvCheckForValidListAndQueue+0x74>)
 800ac18:	4a11      	ldr	r2, [pc, #68]	; (800ac60 <prvCheckForValidListAndQueue+0x78>)
 800ac1a:	2110      	movs	r1, #16
 800ac1c:	200a      	movs	r0, #10
 800ac1e:	f7fe f8ef 	bl	8008e00 <xQueueGenericCreateStatic>
 800ac22:	4603      	mov	r3, r0
 800ac24:	4a08      	ldr	r2, [pc, #32]	; (800ac48 <prvCheckForValidListAndQueue+0x60>)
 800ac26:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ac28:	4b07      	ldr	r3, [pc, #28]	; (800ac48 <prvCheckForValidListAndQueue+0x60>)
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d005      	beq.n	800ac3c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ac30:	4b05      	ldr	r3, [pc, #20]	; (800ac48 <prvCheckForValidListAndQueue+0x60>)
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	490b      	ldr	r1, [pc, #44]	; (800ac64 <prvCheckForValidListAndQueue+0x7c>)
 800ac36:	4618      	mov	r0, r3
 800ac38:	f7fe fd42 	bl	80096c0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ac3c:	f000 f972 	bl	800af24 <vPortExitCritical>
}
 800ac40:	bf00      	nop
 800ac42:	46bd      	mov	sp, r7
 800ac44:	bd80      	pop	{r7, pc}
 800ac46:	bf00      	nop
 800ac48:	20000f38 	.word	0x20000f38
 800ac4c:	20000f08 	.word	0x20000f08
 800ac50:	20000f1c 	.word	0x20000f1c
 800ac54:	20000f30 	.word	0x20000f30
 800ac58:	20000f34 	.word	0x20000f34
 800ac5c:	20000fe4 	.word	0x20000fe4
 800ac60:	20000f44 	.word	0x20000f44
 800ac64:	0800c1a8 	.word	0x0800c1a8

0800ac68 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ac68:	b480      	push	{r7}
 800ac6a:	b085      	sub	sp, #20
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	60f8      	str	r0, [r7, #12]
 800ac70:	60b9      	str	r1, [r7, #8]
 800ac72:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	3b04      	subs	r3, #4
 800ac78:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ac80:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	3b04      	subs	r3, #4
 800ac86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ac88:	68bb      	ldr	r3, [r7, #8]
 800ac8a:	f023 0201 	bic.w	r2, r3, #1
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	3b04      	subs	r3, #4
 800ac96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ac98:	4a0c      	ldr	r2, [pc, #48]	; (800accc <pxPortInitialiseStack+0x64>)
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	3b14      	subs	r3, #20
 800aca2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800aca4:	687a      	ldr	r2, [r7, #4]
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	3b04      	subs	r3, #4
 800acae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	f06f 0202 	mvn.w	r2, #2
 800acb6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	3b20      	subs	r3, #32
 800acbc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800acbe:	68fb      	ldr	r3, [r7, #12]
}
 800acc0:	4618      	mov	r0, r3
 800acc2:	3714      	adds	r7, #20
 800acc4:	46bd      	mov	sp, r7
 800acc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acca:	4770      	bx	lr
 800accc:	0800acd1 	.word	0x0800acd1

0800acd0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800acd0:	b480      	push	{r7}
 800acd2:	b085      	sub	sp, #20
 800acd4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800acd6:	2300      	movs	r3, #0
 800acd8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800acda:	4b12      	ldr	r3, [pc, #72]	; (800ad24 <prvTaskExitError+0x54>)
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ace2:	d00a      	beq.n	800acfa <prvTaskExitError+0x2a>
	__asm volatile
 800ace4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ace8:	f383 8811 	msr	BASEPRI, r3
 800acec:	f3bf 8f6f 	isb	sy
 800acf0:	f3bf 8f4f 	dsb	sy
 800acf4:	60fb      	str	r3, [r7, #12]
}
 800acf6:	bf00      	nop
 800acf8:	e7fe      	b.n	800acf8 <prvTaskExitError+0x28>
	__asm volatile
 800acfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acfe:	f383 8811 	msr	BASEPRI, r3
 800ad02:	f3bf 8f6f 	isb	sy
 800ad06:	f3bf 8f4f 	dsb	sy
 800ad0a:	60bb      	str	r3, [r7, #8]
}
 800ad0c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ad0e:	bf00      	nop
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d0fc      	beq.n	800ad10 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ad16:	bf00      	nop
 800ad18:	bf00      	nop
 800ad1a:	3714      	adds	r7, #20
 800ad1c:	46bd      	mov	sp, r7
 800ad1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad22:	4770      	bx	lr
 800ad24:	20000098 	.word	0x20000098
	...

0800ad30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ad30:	4b07      	ldr	r3, [pc, #28]	; (800ad50 <pxCurrentTCBConst2>)
 800ad32:	6819      	ldr	r1, [r3, #0]
 800ad34:	6808      	ldr	r0, [r1, #0]
 800ad36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad3a:	f380 8809 	msr	PSP, r0
 800ad3e:	f3bf 8f6f 	isb	sy
 800ad42:	f04f 0000 	mov.w	r0, #0
 800ad46:	f380 8811 	msr	BASEPRI, r0
 800ad4a:	4770      	bx	lr
 800ad4c:	f3af 8000 	nop.w

0800ad50 <pxCurrentTCBConst2>:
 800ad50:	20000a08 	.word	0x20000a08
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ad54:	bf00      	nop
 800ad56:	bf00      	nop

0800ad58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ad58:	4808      	ldr	r0, [pc, #32]	; (800ad7c <prvPortStartFirstTask+0x24>)
 800ad5a:	6800      	ldr	r0, [r0, #0]
 800ad5c:	6800      	ldr	r0, [r0, #0]
 800ad5e:	f380 8808 	msr	MSP, r0
 800ad62:	f04f 0000 	mov.w	r0, #0
 800ad66:	f380 8814 	msr	CONTROL, r0
 800ad6a:	b662      	cpsie	i
 800ad6c:	b661      	cpsie	f
 800ad6e:	f3bf 8f4f 	dsb	sy
 800ad72:	f3bf 8f6f 	isb	sy
 800ad76:	df00      	svc	0
 800ad78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ad7a:	bf00      	nop
 800ad7c:	e000ed08 	.word	0xe000ed08

0800ad80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ad80:	b580      	push	{r7, lr}
 800ad82:	b086      	sub	sp, #24
 800ad84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ad86:	4b46      	ldr	r3, [pc, #280]	; (800aea0 <xPortStartScheduler+0x120>)
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	4a46      	ldr	r2, [pc, #280]	; (800aea4 <xPortStartScheduler+0x124>)
 800ad8c:	4293      	cmp	r3, r2
 800ad8e:	d10a      	bne.n	800ada6 <xPortStartScheduler+0x26>
	__asm volatile
 800ad90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad94:	f383 8811 	msr	BASEPRI, r3
 800ad98:	f3bf 8f6f 	isb	sy
 800ad9c:	f3bf 8f4f 	dsb	sy
 800ada0:	613b      	str	r3, [r7, #16]
}
 800ada2:	bf00      	nop
 800ada4:	e7fe      	b.n	800ada4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ada6:	4b3e      	ldr	r3, [pc, #248]	; (800aea0 <xPortStartScheduler+0x120>)
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	4a3f      	ldr	r2, [pc, #252]	; (800aea8 <xPortStartScheduler+0x128>)
 800adac:	4293      	cmp	r3, r2
 800adae:	d10a      	bne.n	800adc6 <xPortStartScheduler+0x46>
	__asm volatile
 800adb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adb4:	f383 8811 	msr	BASEPRI, r3
 800adb8:	f3bf 8f6f 	isb	sy
 800adbc:	f3bf 8f4f 	dsb	sy
 800adc0:	60fb      	str	r3, [r7, #12]
}
 800adc2:	bf00      	nop
 800adc4:	e7fe      	b.n	800adc4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800adc6:	4b39      	ldr	r3, [pc, #228]	; (800aeac <xPortStartScheduler+0x12c>)
 800adc8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800adca:	697b      	ldr	r3, [r7, #20]
 800adcc:	781b      	ldrb	r3, [r3, #0]
 800adce:	b2db      	uxtb	r3, r3
 800add0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800add2:	697b      	ldr	r3, [r7, #20]
 800add4:	22ff      	movs	r2, #255	; 0xff
 800add6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800add8:	697b      	ldr	r3, [r7, #20]
 800adda:	781b      	ldrb	r3, [r3, #0]
 800addc:	b2db      	uxtb	r3, r3
 800adde:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ade0:	78fb      	ldrb	r3, [r7, #3]
 800ade2:	b2db      	uxtb	r3, r3
 800ade4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ade8:	b2da      	uxtb	r2, r3
 800adea:	4b31      	ldr	r3, [pc, #196]	; (800aeb0 <xPortStartScheduler+0x130>)
 800adec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800adee:	4b31      	ldr	r3, [pc, #196]	; (800aeb4 <xPortStartScheduler+0x134>)
 800adf0:	2207      	movs	r2, #7
 800adf2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800adf4:	e009      	b.n	800ae0a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800adf6:	4b2f      	ldr	r3, [pc, #188]	; (800aeb4 <xPortStartScheduler+0x134>)
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	3b01      	subs	r3, #1
 800adfc:	4a2d      	ldr	r2, [pc, #180]	; (800aeb4 <xPortStartScheduler+0x134>)
 800adfe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ae00:	78fb      	ldrb	r3, [r7, #3]
 800ae02:	b2db      	uxtb	r3, r3
 800ae04:	005b      	lsls	r3, r3, #1
 800ae06:	b2db      	uxtb	r3, r3
 800ae08:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ae0a:	78fb      	ldrb	r3, [r7, #3]
 800ae0c:	b2db      	uxtb	r3, r3
 800ae0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae12:	2b80      	cmp	r3, #128	; 0x80
 800ae14:	d0ef      	beq.n	800adf6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ae16:	4b27      	ldr	r3, [pc, #156]	; (800aeb4 <xPortStartScheduler+0x134>)
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	f1c3 0307 	rsb	r3, r3, #7
 800ae1e:	2b04      	cmp	r3, #4
 800ae20:	d00a      	beq.n	800ae38 <xPortStartScheduler+0xb8>
	__asm volatile
 800ae22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae26:	f383 8811 	msr	BASEPRI, r3
 800ae2a:	f3bf 8f6f 	isb	sy
 800ae2e:	f3bf 8f4f 	dsb	sy
 800ae32:	60bb      	str	r3, [r7, #8]
}
 800ae34:	bf00      	nop
 800ae36:	e7fe      	b.n	800ae36 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ae38:	4b1e      	ldr	r3, [pc, #120]	; (800aeb4 <xPortStartScheduler+0x134>)
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	021b      	lsls	r3, r3, #8
 800ae3e:	4a1d      	ldr	r2, [pc, #116]	; (800aeb4 <xPortStartScheduler+0x134>)
 800ae40:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ae42:	4b1c      	ldr	r3, [pc, #112]	; (800aeb4 <xPortStartScheduler+0x134>)
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ae4a:	4a1a      	ldr	r2, [pc, #104]	; (800aeb4 <xPortStartScheduler+0x134>)
 800ae4c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	b2da      	uxtb	r2, r3
 800ae52:	697b      	ldr	r3, [r7, #20]
 800ae54:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ae56:	4b18      	ldr	r3, [pc, #96]	; (800aeb8 <xPortStartScheduler+0x138>)
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	4a17      	ldr	r2, [pc, #92]	; (800aeb8 <xPortStartScheduler+0x138>)
 800ae5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ae60:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ae62:	4b15      	ldr	r3, [pc, #84]	; (800aeb8 <xPortStartScheduler+0x138>)
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	4a14      	ldr	r2, [pc, #80]	; (800aeb8 <xPortStartScheduler+0x138>)
 800ae68:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ae6c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ae6e:	f000 f8dd 	bl	800b02c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ae72:	4b12      	ldr	r3, [pc, #72]	; (800aebc <xPortStartScheduler+0x13c>)
 800ae74:	2200      	movs	r2, #0
 800ae76:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ae78:	f000 f8fc 	bl	800b074 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ae7c:	4b10      	ldr	r3, [pc, #64]	; (800aec0 <xPortStartScheduler+0x140>)
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	4a0f      	ldr	r2, [pc, #60]	; (800aec0 <xPortStartScheduler+0x140>)
 800ae82:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ae86:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ae88:	f7ff ff66 	bl	800ad58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ae8c:	f7ff f848 	bl	8009f20 <vTaskSwitchContext>
	prvTaskExitError();
 800ae90:	f7ff ff1e 	bl	800acd0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ae94:	2300      	movs	r3, #0
}
 800ae96:	4618      	mov	r0, r3
 800ae98:	3718      	adds	r7, #24
 800ae9a:	46bd      	mov	sp, r7
 800ae9c:	bd80      	pop	{r7, pc}
 800ae9e:	bf00      	nop
 800aea0:	e000ed00 	.word	0xe000ed00
 800aea4:	410fc271 	.word	0x410fc271
 800aea8:	410fc270 	.word	0x410fc270
 800aeac:	e000e400 	.word	0xe000e400
 800aeb0:	20001034 	.word	0x20001034
 800aeb4:	20001038 	.word	0x20001038
 800aeb8:	e000ed20 	.word	0xe000ed20
 800aebc:	20000098 	.word	0x20000098
 800aec0:	e000ef34 	.word	0xe000ef34

0800aec4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800aec4:	b480      	push	{r7}
 800aec6:	b083      	sub	sp, #12
 800aec8:	af00      	add	r7, sp, #0
	__asm volatile
 800aeca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aece:	f383 8811 	msr	BASEPRI, r3
 800aed2:	f3bf 8f6f 	isb	sy
 800aed6:	f3bf 8f4f 	dsb	sy
 800aeda:	607b      	str	r3, [r7, #4]
}
 800aedc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800aede:	4b0f      	ldr	r3, [pc, #60]	; (800af1c <vPortEnterCritical+0x58>)
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	3301      	adds	r3, #1
 800aee4:	4a0d      	ldr	r2, [pc, #52]	; (800af1c <vPortEnterCritical+0x58>)
 800aee6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800aee8:	4b0c      	ldr	r3, [pc, #48]	; (800af1c <vPortEnterCritical+0x58>)
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	2b01      	cmp	r3, #1
 800aeee:	d10f      	bne.n	800af10 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800aef0:	4b0b      	ldr	r3, [pc, #44]	; (800af20 <vPortEnterCritical+0x5c>)
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	b2db      	uxtb	r3, r3
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d00a      	beq.n	800af10 <vPortEnterCritical+0x4c>
	__asm volatile
 800aefa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aefe:	f383 8811 	msr	BASEPRI, r3
 800af02:	f3bf 8f6f 	isb	sy
 800af06:	f3bf 8f4f 	dsb	sy
 800af0a:	603b      	str	r3, [r7, #0]
}
 800af0c:	bf00      	nop
 800af0e:	e7fe      	b.n	800af0e <vPortEnterCritical+0x4a>
	}
}
 800af10:	bf00      	nop
 800af12:	370c      	adds	r7, #12
 800af14:	46bd      	mov	sp, r7
 800af16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af1a:	4770      	bx	lr
 800af1c:	20000098 	.word	0x20000098
 800af20:	e000ed04 	.word	0xe000ed04

0800af24 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800af24:	b480      	push	{r7}
 800af26:	b083      	sub	sp, #12
 800af28:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800af2a:	4b12      	ldr	r3, [pc, #72]	; (800af74 <vPortExitCritical+0x50>)
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d10a      	bne.n	800af48 <vPortExitCritical+0x24>
	__asm volatile
 800af32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af36:	f383 8811 	msr	BASEPRI, r3
 800af3a:	f3bf 8f6f 	isb	sy
 800af3e:	f3bf 8f4f 	dsb	sy
 800af42:	607b      	str	r3, [r7, #4]
}
 800af44:	bf00      	nop
 800af46:	e7fe      	b.n	800af46 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800af48:	4b0a      	ldr	r3, [pc, #40]	; (800af74 <vPortExitCritical+0x50>)
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	3b01      	subs	r3, #1
 800af4e:	4a09      	ldr	r2, [pc, #36]	; (800af74 <vPortExitCritical+0x50>)
 800af50:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800af52:	4b08      	ldr	r3, [pc, #32]	; (800af74 <vPortExitCritical+0x50>)
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	2b00      	cmp	r3, #0
 800af58:	d105      	bne.n	800af66 <vPortExitCritical+0x42>
 800af5a:	2300      	movs	r3, #0
 800af5c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800af5e:	683b      	ldr	r3, [r7, #0]
 800af60:	f383 8811 	msr	BASEPRI, r3
}
 800af64:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800af66:	bf00      	nop
 800af68:	370c      	adds	r7, #12
 800af6a:	46bd      	mov	sp, r7
 800af6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af70:	4770      	bx	lr
 800af72:	bf00      	nop
 800af74:	20000098 	.word	0x20000098
	...

0800af80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800af80:	f3ef 8009 	mrs	r0, PSP
 800af84:	f3bf 8f6f 	isb	sy
 800af88:	4b15      	ldr	r3, [pc, #84]	; (800afe0 <pxCurrentTCBConst>)
 800af8a:	681a      	ldr	r2, [r3, #0]
 800af8c:	f01e 0f10 	tst.w	lr, #16
 800af90:	bf08      	it	eq
 800af92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800af96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af9a:	6010      	str	r0, [r2, #0]
 800af9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800afa0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800afa4:	f380 8811 	msr	BASEPRI, r0
 800afa8:	f3bf 8f4f 	dsb	sy
 800afac:	f3bf 8f6f 	isb	sy
 800afb0:	f7fe ffb6 	bl	8009f20 <vTaskSwitchContext>
 800afb4:	f04f 0000 	mov.w	r0, #0
 800afb8:	f380 8811 	msr	BASEPRI, r0
 800afbc:	bc09      	pop	{r0, r3}
 800afbe:	6819      	ldr	r1, [r3, #0]
 800afc0:	6808      	ldr	r0, [r1, #0]
 800afc2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afc6:	f01e 0f10 	tst.w	lr, #16
 800afca:	bf08      	it	eq
 800afcc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800afd0:	f380 8809 	msr	PSP, r0
 800afd4:	f3bf 8f6f 	isb	sy
 800afd8:	4770      	bx	lr
 800afda:	bf00      	nop
 800afdc:	f3af 8000 	nop.w

0800afe0 <pxCurrentTCBConst>:
 800afe0:	20000a08 	.word	0x20000a08
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800afe4:	bf00      	nop
 800afe6:	bf00      	nop

0800afe8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800afe8:	b580      	push	{r7, lr}
 800afea:	b082      	sub	sp, #8
 800afec:	af00      	add	r7, sp, #0
	__asm volatile
 800afee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aff2:	f383 8811 	msr	BASEPRI, r3
 800aff6:	f3bf 8f6f 	isb	sy
 800affa:	f3bf 8f4f 	dsb	sy
 800affe:	607b      	str	r3, [r7, #4]
}
 800b000:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b002:	f7fe fed3 	bl	8009dac <xTaskIncrementTick>
 800b006:	4603      	mov	r3, r0
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d003      	beq.n	800b014 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b00c:	4b06      	ldr	r3, [pc, #24]	; (800b028 <xPortSysTickHandler+0x40>)
 800b00e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b012:	601a      	str	r2, [r3, #0]
 800b014:	2300      	movs	r3, #0
 800b016:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b018:	683b      	ldr	r3, [r7, #0]
 800b01a:	f383 8811 	msr	BASEPRI, r3
}
 800b01e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b020:	bf00      	nop
 800b022:	3708      	adds	r7, #8
 800b024:	46bd      	mov	sp, r7
 800b026:	bd80      	pop	{r7, pc}
 800b028:	e000ed04 	.word	0xe000ed04

0800b02c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b02c:	b480      	push	{r7}
 800b02e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b030:	4b0b      	ldr	r3, [pc, #44]	; (800b060 <vPortSetupTimerInterrupt+0x34>)
 800b032:	2200      	movs	r2, #0
 800b034:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b036:	4b0b      	ldr	r3, [pc, #44]	; (800b064 <vPortSetupTimerInterrupt+0x38>)
 800b038:	2200      	movs	r2, #0
 800b03a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b03c:	4b0a      	ldr	r3, [pc, #40]	; (800b068 <vPortSetupTimerInterrupt+0x3c>)
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	4a0a      	ldr	r2, [pc, #40]	; (800b06c <vPortSetupTimerInterrupt+0x40>)
 800b042:	fba2 2303 	umull	r2, r3, r2, r3
 800b046:	099b      	lsrs	r3, r3, #6
 800b048:	4a09      	ldr	r2, [pc, #36]	; (800b070 <vPortSetupTimerInterrupt+0x44>)
 800b04a:	3b01      	subs	r3, #1
 800b04c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b04e:	4b04      	ldr	r3, [pc, #16]	; (800b060 <vPortSetupTimerInterrupt+0x34>)
 800b050:	2207      	movs	r2, #7
 800b052:	601a      	str	r2, [r3, #0]
}
 800b054:	bf00      	nop
 800b056:	46bd      	mov	sp, r7
 800b058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b05c:	4770      	bx	lr
 800b05e:	bf00      	nop
 800b060:	e000e010 	.word	0xe000e010
 800b064:	e000e018 	.word	0xe000e018
 800b068:	20000000 	.word	0x20000000
 800b06c:	10624dd3 	.word	0x10624dd3
 800b070:	e000e014 	.word	0xe000e014

0800b074 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b074:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b084 <vPortEnableVFP+0x10>
 800b078:	6801      	ldr	r1, [r0, #0]
 800b07a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b07e:	6001      	str	r1, [r0, #0]
 800b080:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b082:	bf00      	nop
 800b084:	e000ed88 	.word	0xe000ed88

0800b088 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b088:	b480      	push	{r7}
 800b08a:	b085      	sub	sp, #20
 800b08c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b08e:	f3ef 8305 	mrs	r3, IPSR
 800b092:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	2b0f      	cmp	r3, #15
 800b098:	d914      	bls.n	800b0c4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b09a:	4a17      	ldr	r2, [pc, #92]	; (800b0f8 <vPortValidateInterruptPriority+0x70>)
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	4413      	add	r3, r2
 800b0a0:	781b      	ldrb	r3, [r3, #0]
 800b0a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b0a4:	4b15      	ldr	r3, [pc, #84]	; (800b0fc <vPortValidateInterruptPriority+0x74>)
 800b0a6:	781b      	ldrb	r3, [r3, #0]
 800b0a8:	7afa      	ldrb	r2, [r7, #11]
 800b0aa:	429a      	cmp	r2, r3
 800b0ac:	d20a      	bcs.n	800b0c4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b0ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0b2:	f383 8811 	msr	BASEPRI, r3
 800b0b6:	f3bf 8f6f 	isb	sy
 800b0ba:	f3bf 8f4f 	dsb	sy
 800b0be:	607b      	str	r3, [r7, #4]
}
 800b0c0:	bf00      	nop
 800b0c2:	e7fe      	b.n	800b0c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b0c4:	4b0e      	ldr	r3, [pc, #56]	; (800b100 <vPortValidateInterruptPriority+0x78>)
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b0cc:	4b0d      	ldr	r3, [pc, #52]	; (800b104 <vPortValidateInterruptPriority+0x7c>)
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	429a      	cmp	r2, r3
 800b0d2:	d90a      	bls.n	800b0ea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b0d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0d8:	f383 8811 	msr	BASEPRI, r3
 800b0dc:	f3bf 8f6f 	isb	sy
 800b0e0:	f3bf 8f4f 	dsb	sy
 800b0e4:	603b      	str	r3, [r7, #0]
}
 800b0e6:	bf00      	nop
 800b0e8:	e7fe      	b.n	800b0e8 <vPortValidateInterruptPriority+0x60>
	}
 800b0ea:	bf00      	nop
 800b0ec:	3714      	adds	r7, #20
 800b0ee:	46bd      	mov	sp, r7
 800b0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f4:	4770      	bx	lr
 800b0f6:	bf00      	nop
 800b0f8:	e000e3f0 	.word	0xe000e3f0
 800b0fc:	20001034 	.word	0x20001034
 800b100:	e000ed0c 	.word	0xe000ed0c
 800b104:	20001038 	.word	0x20001038

0800b108 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b108:	b580      	push	{r7, lr}
 800b10a:	b08a      	sub	sp, #40	; 0x28
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b110:	2300      	movs	r3, #0
 800b112:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b114:	f7fe fd8e 	bl	8009c34 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b118:	4b5b      	ldr	r3, [pc, #364]	; (800b288 <pvPortMalloc+0x180>)
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d101      	bne.n	800b124 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b120:	f000 f920 	bl	800b364 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b124:	4b59      	ldr	r3, [pc, #356]	; (800b28c <pvPortMalloc+0x184>)
 800b126:	681a      	ldr	r2, [r3, #0]
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	4013      	ands	r3, r2
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	f040 8093 	bne.w	800b258 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	2b00      	cmp	r3, #0
 800b136:	d01d      	beq.n	800b174 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b138:	2208      	movs	r2, #8
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	4413      	add	r3, r2
 800b13e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	f003 0307 	and.w	r3, r3, #7
 800b146:	2b00      	cmp	r3, #0
 800b148:	d014      	beq.n	800b174 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	f023 0307 	bic.w	r3, r3, #7
 800b150:	3308      	adds	r3, #8
 800b152:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	f003 0307 	and.w	r3, r3, #7
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d00a      	beq.n	800b174 <pvPortMalloc+0x6c>
	__asm volatile
 800b15e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b162:	f383 8811 	msr	BASEPRI, r3
 800b166:	f3bf 8f6f 	isb	sy
 800b16a:	f3bf 8f4f 	dsb	sy
 800b16e:	617b      	str	r3, [r7, #20]
}
 800b170:	bf00      	nop
 800b172:	e7fe      	b.n	800b172 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	2b00      	cmp	r3, #0
 800b178:	d06e      	beq.n	800b258 <pvPortMalloc+0x150>
 800b17a:	4b45      	ldr	r3, [pc, #276]	; (800b290 <pvPortMalloc+0x188>)
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	687a      	ldr	r2, [r7, #4]
 800b180:	429a      	cmp	r2, r3
 800b182:	d869      	bhi.n	800b258 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b184:	4b43      	ldr	r3, [pc, #268]	; (800b294 <pvPortMalloc+0x18c>)
 800b186:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b188:	4b42      	ldr	r3, [pc, #264]	; (800b294 <pvPortMalloc+0x18c>)
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b18e:	e004      	b.n	800b19a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b192:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b19a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b19c:	685b      	ldr	r3, [r3, #4]
 800b19e:	687a      	ldr	r2, [r7, #4]
 800b1a0:	429a      	cmp	r2, r3
 800b1a2:	d903      	bls.n	800b1ac <pvPortMalloc+0xa4>
 800b1a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d1f1      	bne.n	800b190 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b1ac:	4b36      	ldr	r3, [pc, #216]	; (800b288 <pvPortMalloc+0x180>)
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b1b2:	429a      	cmp	r2, r3
 800b1b4:	d050      	beq.n	800b258 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b1b6:	6a3b      	ldr	r3, [r7, #32]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	2208      	movs	r2, #8
 800b1bc:	4413      	add	r3, r2
 800b1be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b1c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1c2:	681a      	ldr	r2, [r3, #0]
 800b1c4:	6a3b      	ldr	r3, [r7, #32]
 800b1c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b1c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1ca:	685a      	ldr	r2, [r3, #4]
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	1ad2      	subs	r2, r2, r3
 800b1d0:	2308      	movs	r3, #8
 800b1d2:	005b      	lsls	r3, r3, #1
 800b1d4:	429a      	cmp	r2, r3
 800b1d6:	d91f      	bls.n	800b218 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b1d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	4413      	add	r3, r2
 800b1de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b1e0:	69bb      	ldr	r3, [r7, #24]
 800b1e2:	f003 0307 	and.w	r3, r3, #7
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d00a      	beq.n	800b200 <pvPortMalloc+0xf8>
	__asm volatile
 800b1ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1ee:	f383 8811 	msr	BASEPRI, r3
 800b1f2:	f3bf 8f6f 	isb	sy
 800b1f6:	f3bf 8f4f 	dsb	sy
 800b1fa:	613b      	str	r3, [r7, #16]
}
 800b1fc:	bf00      	nop
 800b1fe:	e7fe      	b.n	800b1fe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b202:	685a      	ldr	r2, [r3, #4]
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	1ad2      	subs	r2, r2, r3
 800b208:	69bb      	ldr	r3, [r7, #24]
 800b20a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b20c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b20e:	687a      	ldr	r2, [r7, #4]
 800b210:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b212:	69b8      	ldr	r0, [r7, #24]
 800b214:	f000 f908 	bl	800b428 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b218:	4b1d      	ldr	r3, [pc, #116]	; (800b290 <pvPortMalloc+0x188>)
 800b21a:	681a      	ldr	r2, [r3, #0]
 800b21c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b21e:	685b      	ldr	r3, [r3, #4]
 800b220:	1ad3      	subs	r3, r2, r3
 800b222:	4a1b      	ldr	r2, [pc, #108]	; (800b290 <pvPortMalloc+0x188>)
 800b224:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b226:	4b1a      	ldr	r3, [pc, #104]	; (800b290 <pvPortMalloc+0x188>)
 800b228:	681a      	ldr	r2, [r3, #0]
 800b22a:	4b1b      	ldr	r3, [pc, #108]	; (800b298 <pvPortMalloc+0x190>)
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	429a      	cmp	r2, r3
 800b230:	d203      	bcs.n	800b23a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b232:	4b17      	ldr	r3, [pc, #92]	; (800b290 <pvPortMalloc+0x188>)
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	4a18      	ldr	r2, [pc, #96]	; (800b298 <pvPortMalloc+0x190>)
 800b238:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b23a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b23c:	685a      	ldr	r2, [r3, #4]
 800b23e:	4b13      	ldr	r3, [pc, #76]	; (800b28c <pvPortMalloc+0x184>)
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	431a      	orrs	r2, r3
 800b244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b246:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b24a:	2200      	movs	r2, #0
 800b24c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b24e:	4b13      	ldr	r3, [pc, #76]	; (800b29c <pvPortMalloc+0x194>)
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	3301      	adds	r3, #1
 800b254:	4a11      	ldr	r2, [pc, #68]	; (800b29c <pvPortMalloc+0x194>)
 800b256:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b258:	f7fe fcfa 	bl	8009c50 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b25c:	69fb      	ldr	r3, [r7, #28]
 800b25e:	f003 0307 	and.w	r3, r3, #7
 800b262:	2b00      	cmp	r3, #0
 800b264:	d00a      	beq.n	800b27c <pvPortMalloc+0x174>
	__asm volatile
 800b266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b26a:	f383 8811 	msr	BASEPRI, r3
 800b26e:	f3bf 8f6f 	isb	sy
 800b272:	f3bf 8f4f 	dsb	sy
 800b276:	60fb      	str	r3, [r7, #12]
}
 800b278:	bf00      	nop
 800b27a:	e7fe      	b.n	800b27a <pvPortMalloc+0x172>
	return pvReturn;
 800b27c:	69fb      	ldr	r3, [r7, #28]
}
 800b27e:	4618      	mov	r0, r3
 800b280:	3728      	adds	r7, #40	; 0x28
 800b282:	46bd      	mov	sp, r7
 800b284:	bd80      	pop	{r7, pc}
 800b286:	bf00      	nop
 800b288:	20004c44 	.word	0x20004c44
 800b28c:	20004c58 	.word	0x20004c58
 800b290:	20004c48 	.word	0x20004c48
 800b294:	20004c3c 	.word	0x20004c3c
 800b298:	20004c4c 	.word	0x20004c4c
 800b29c:	20004c50 	.word	0x20004c50

0800b2a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b2a0:	b580      	push	{r7, lr}
 800b2a2:	b086      	sub	sp, #24
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d04d      	beq.n	800b34e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b2b2:	2308      	movs	r3, #8
 800b2b4:	425b      	negs	r3, r3
 800b2b6:	697a      	ldr	r2, [r7, #20]
 800b2b8:	4413      	add	r3, r2
 800b2ba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b2bc:	697b      	ldr	r3, [r7, #20]
 800b2be:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b2c0:	693b      	ldr	r3, [r7, #16]
 800b2c2:	685a      	ldr	r2, [r3, #4]
 800b2c4:	4b24      	ldr	r3, [pc, #144]	; (800b358 <vPortFree+0xb8>)
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	4013      	ands	r3, r2
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d10a      	bne.n	800b2e4 <vPortFree+0x44>
	__asm volatile
 800b2ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2d2:	f383 8811 	msr	BASEPRI, r3
 800b2d6:	f3bf 8f6f 	isb	sy
 800b2da:	f3bf 8f4f 	dsb	sy
 800b2de:	60fb      	str	r3, [r7, #12]
}
 800b2e0:	bf00      	nop
 800b2e2:	e7fe      	b.n	800b2e2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b2e4:	693b      	ldr	r3, [r7, #16]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d00a      	beq.n	800b302 <vPortFree+0x62>
	__asm volatile
 800b2ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2f0:	f383 8811 	msr	BASEPRI, r3
 800b2f4:	f3bf 8f6f 	isb	sy
 800b2f8:	f3bf 8f4f 	dsb	sy
 800b2fc:	60bb      	str	r3, [r7, #8]
}
 800b2fe:	bf00      	nop
 800b300:	e7fe      	b.n	800b300 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b302:	693b      	ldr	r3, [r7, #16]
 800b304:	685a      	ldr	r2, [r3, #4]
 800b306:	4b14      	ldr	r3, [pc, #80]	; (800b358 <vPortFree+0xb8>)
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	4013      	ands	r3, r2
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d01e      	beq.n	800b34e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b310:	693b      	ldr	r3, [r7, #16]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	2b00      	cmp	r3, #0
 800b316:	d11a      	bne.n	800b34e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b318:	693b      	ldr	r3, [r7, #16]
 800b31a:	685a      	ldr	r2, [r3, #4]
 800b31c:	4b0e      	ldr	r3, [pc, #56]	; (800b358 <vPortFree+0xb8>)
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	43db      	mvns	r3, r3
 800b322:	401a      	ands	r2, r3
 800b324:	693b      	ldr	r3, [r7, #16]
 800b326:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b328:	f7fe fc84 	bl	8009c34 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b32c:	693b      	ldr	r3, [r7, #16]
 800b32e:	685a      	ldr	r2, [r3, #4]
 800b330:	4b0a      	ldr	r3, [pc, #40]	; (800b35c <vPortFree+0xbc>)
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	4413      	add	r3, r2
 800b336:	4a09      	ldr	r2, [pc, #36]	; (800b35c <vPortFree+0xbc>)
 800b338:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b33a:	6938      	ldr	r0, [r7, #16]
 800b33c:	f000 f874 	bl	800b428 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b340:	4b07      	ldr	r3, [pc, #28]	; (800b360 <vPortFree+0xc0>)
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	3301      	adds	r3, #1
 800b346:	4a06      	ldr	r2, [pc, #24]	; (800b360 <vPortFree+0xc0>)
 800b348:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b34a:	f7fe fc81 	bl	8009c50 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b34e:	bf00      	nop
 800b350:	3718      	adds	r7, #24
 800b352:	46bd      	mov	sp, r7
 800b354:	bd80      	pop	{r7, pc}
 800b356:	bf00      	nop
 800b358:	20004c58 	.word	0x20004c58
 800b35c:	20004c48 	.word	0x20004c48
 800b360:	20004c54 	.word	0x20004c54

0800b364 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b364:	b480      	push	{r7}
 800b366:	b085      	sub	sp, #20
 800b368:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b36a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800b36e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b370:	4b27      	ldr	r3, [pc, #156]	; (800b410 <prvHeapInit+0xac>)
 800b372:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	f003 0307 	and.w	r3, r3, #7
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d00c      	beq.n	800b398 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	3307      	adds	r3, #7
 800b382:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	f023 0307 	bic.w	r3, r3, #7
 800b38a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b38c:	68ba      	ldr	r2, [r7, #8]
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	1ad3      	subs	r3, r2, r3
 800b392:	4a1f      	ldr	r2, [pc, #124]	; (800b410 <prvHeapInit+0xac>)
 800b394:	4413      	add	r3, r2
 800b396:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b39c:	4a1d      	ldr	r2, [pc, #116]	; (800b414 <prvHeapInit+0xb0>)
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b3a2:	4b1c      	ldr	r3, [pc, #112]	; (800b414 <prvHeapInit+0xb0>)
 800b3a4:	2200      	movs	r2, #0
 800b3a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	68ba      	ldr	r2, [r7, #8]
 800b3ac:	4413      	add	r3, r2
 800b3ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b3b0:	2208      	movs	r2, #8
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	1a9b      	subs	r3, r3, r2
 800b3b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	f023 0307 	bic.w	r3, r3, #7
 800b3be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	4a15      	ldr	r2, [pc, #84]	; (800b418 <prvHeapInit+0xb4>)
 800b3c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b3c6:	4b14      	ldr	r3, [pc, #80]	; (800b418 <prvHeapInit+0xb4>)
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	2200      	movs	r2, #0
 800b3cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b3ce:	4b12      	ldr	r3, [pc, #72]	; (800b418 <prvHeapInit+0xb4>)
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	2200      	movs	r2, #0
 800b3d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b3da:	683b      	ldr	r3, [r7, #0]
 800b3dc:	68fa      	ldr	r2, [r7, #12]
 800b3de:	1ad2      	subs	r2, r2, r3
 800b3e0:	683b      	ldr	r3, [r7, #0]
 800b3e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b3e4:	4b0c      	ldr	r3, [pc, #48]	; (800b418 <prvHeapInit+0xb4>)
 800b3e6:	681a      	ldr	r2, [r3, #0]
 800b3e8:	683b      	ldr	r3, [r7, #0]
 800b3ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b3ec:	683b      	ldr	r3, [r7, #0]
 800b3ee:	685b      	ldr	r3, [r3, #4]
 800b3f0:	4a0a      	ldr	r2, [pc, #40]	; (800b41c <prvHeapInit+0xb8>)
 800b3f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b3f4:	683b      	ldr	r3, [r7, #0]
 800b3f6:	685b      	ldr	r3, [r3, #4]
 800b3f8:	4a09      	ldr	r2, [pc, #36]	; (800b420 <prvHeapInit+0xbc>)
 800b3fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b3fc:	4b09      	ldr	r3, [pc, #36]	; (800b424 <prvHeapInit+0xc0>)
 800b3fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b402:	601a      	str	r2, [r3, #0]
}
 800b404:	bf00      	nop
 800b406:	3714      	adds	r7, #20
 800b408:	46bd      	mov	sp, r7
 800b40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b40e:	4770      	bx	lr
 800b410:	2000103c 	.word	0x2000103c
 800b414:	20004c3c 	.word	0x20004c3c
 800b418:	20004c44 	.word	0x20004c44
 800b41c:	20004c4c 	.word	0x20004c4c
 800b420:	20004c48 	.word	0x20004c48
 800b424:	20004c58 	.word	0x20004c58

0800b428 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b428:	b480      	push	{r7}
 800b42a:	b085      	sub	sp, #20
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b430:	4b28      	ldr	r3, [pc, #160]	; (800b4d4 <prvInsertBlockIntoFreeList+0xac>)
 800b432:	60fb      	str	r3, [r7, #12]
 800b434:	e002      	b.n	800b43c <prvInsertBlockIntoFreeList+0x14>
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	60fb      	str	r3, [r7, #12]
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	687a      	ldr	r2, [r7, #4]
 800b442:	429a      	cmp	r2, r3
 800b444:	d8f7      	bhi.n	800b436 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	685b      	ldr	r3, [r3, #4]
 800b44e:	68ba      	ldr	r2, [r7, #8]
 800b450:	4413      	add	r3, r2
 800b452:	687a      	ldr	r2, [r7, #4]
 800b454:	429a      	cmp	r2, r3
 800b456:	d108      	bne.n	800b46a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	685a      	ldr	r2, [r3, #4]
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	685b      	ldr	r3, [r3, #4]
 800b460:	441a      	add	r2, r3
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	685b      	ldr	r3, [r3, #4]
 800b472:	68ba      	ldr	r2, [r7, #8]
 800b474:	441a      	add	r2, r3
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	429a      	cmp	r2, r3
 800b47c:	d118      	bne.n	800b4b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	681a      	ldr	r2, [r3, #0]
 800b482:	4b15      	ldr	r3, [pc, #84]	; (800b4d8 <prvInsertBlockIntoFreeList+0xb0>)
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	429a      	cmp	r2, r3
 800b488:	d00d      	beq.n	800b4a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	685a      	ldr	r2, [r3, #4]
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	685b      	ldr	r3, [r3, #4]
 800b494:	441a      	add	r2, r3
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	681a      	ldr	r2, [r3, #0]
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	601a      	str	r2, [r3, #0]
 800b4a4:	e008      	b.n	800b4b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b4a6:	4b0c      	ldr	r3, [pc, #48]	; (800b4d8 <prvInsertBlockIntoFreeList+0xb0>)
 800b4a8:	681a      	ldr	r2, [r3, #0]
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	601a      	str	r2, [r3, #0]
 800b4ae:	e003      	b.n	800b4b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	681a      	ldr	r2, [r3, #0]
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b4b8:	68fa      	ldr	r2, [r7, #12]
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	429a      	cmp	r2, r3
 800b4be:	d002      	beq.n	800b4c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	687a      	ldr	r2, [r7, #4]
 800b4c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b4c6:	bf00      	nop
 800b4c8:	3714      	adds	r7, #20
 800b4ca:	46bd      	mov	sp, r7
 800b4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d0:	4770      	bx	lr
 800b4d2:	bf00      	nop
 800b4d4:	20004c3c 	.word	0x20004c3c
 800b4d8:	20004c44 	.word	0x20004c44

0800b4dc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b4dc:	b580      	push	{r7, lr}
 800b4de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b4e0:	2200      	movs	r2, #0
 800b4e2:	4912      	ldr	r1, [pc, #72]	; (800b52c <MX_USB_DEVICE_Init+0x50>)
 800b4e4:	4812      	ldr	r0, [pc, #72]	; (800b530 <MX_USB_DEVICE_Init+0x54>)
 800b4e6:	f7fb ff0d 	bl	8007304 <USBD_Init>
 800b4ea:	4603      	mov	r3, r0
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d001      	beq.n	800b4f4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b4f0:	f7f5 fc10 	bl	8000d14 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b4f4:	490f      	ldr	r1, [pc, #60]	; (800b534 <MX_USB_DEVICE_Init+0x58>)
 800b4f6:	480e      	ldr	r0, [pc, #56]	; (800b530 <MX_USB_DEVICE_Init+0x54>)
 800b4f8:	f7fb ff34 	bl	8007364 <USBD_RegisterClass>
 800b4fc:	4603      	mov	r3, r0
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d001      	beq.n	800b506 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b502:	f7f5 fc07 	bl	8000d14 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b506:	490c      	ldr	r1, [pc, #48]	; (800b538 <MX_USB_DEVICE_Init+0x5c>)
 800b508:	4809      	ldr	r0, [pc, #36]	; (800b530 <MX_USB_DEVICE_Init+0x54>)
 800b50a:	f7fb fe25 	bl	8007158 <USBD_CDC_RegisterInterface>
 800b50e:	4603      	mov	r3, r0
 800b510:	2b00      	cmp	r3, #0
 800b512:	d001      	beq.n	800b518 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b514:	f7f5 fbfe 	bl	8000d14 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b518:	4805      	ldr	r0, [pc, #20]	; (800b530 <MX_USB_DEVICE_Init+0x54>)
 800b51a:	f7fb ff59 	bl	80073d0 <USBD_Start>
 800b51e:	4603      	mov	r3, r0
 800b520:	2b00      	cmp	r3, #0
 800b522:	d001      	beq.n	800b528 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b524:	f7f5 fbf6 	bl	8000d14 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b528:	bf00      	nop
 800b52a:	bd80      	pop	{r7, pc}
 800b52c:	200000b0 	.word	0x200000b0
 800b530:	20004c5c 	.word	0x20004c5c
 800b534:	20000018 	.word	0x20000018
 800b538:	2000009c 	.word	0x2000009c

0800b53c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b53c:	b580      	push	{r7, lr}
 800b53e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b540:	2200      	movs	r2, #0
 800b542:	4905      	ldr	r1, [pc, #20]	; (800b558 <CDC_Init_FS+0x1c>)
 800b544:	4805      	ldr	r0, [pc, #20]	; (800b55c <CDC_Init_FS+0x20>)
 800b546:	f7fb fe21 	bl	800718c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b54a:	4905      	ldr	r1, [pc, #20]	; (800b560 <CDC_Init_FS+0x24>)
 800b54c:	4803      	ldr	r0, [pc, #12]	; (800b55c <CDC_Init_FS+0x20>)
 800b54e:	f7fb fe3f 	bl	80071d0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b552:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b554:	4618      	mov	r0, r3
 800b556:	bd80      	pop	{r7, pc}
 800b558:	20005738 	.word	0x20005738
 800b55c:	20004c5c 	.word	0x20004c5c
 800b560:	20004f38 	.word	0x20004f38

0800b564 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b564:	b480      	push	{r7}
 800b566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b568:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b56a:	4618      	mov	r0, r3
 800b56c:	46bd      	mov	sp, r7
 800b56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b572:	4770      	bx	lr

0800b574 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b574:	b480      	push	{r7}
 800b576:	b083      	sub	sp, #12
 800b578:	af00      	add	r7, sp, #0
 800b57a:	4603      	mov	r3, r0
 800b57c:	6039      	str	r1, [r7, #0]
 800b57e:	71fb      	strb	r3, [r7, #7]
 800b580:	4613      	mov	r3, r2
 800b582:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b584:	79fb      	ldrb	r3, [r7, #7]
 800b586:	2b23      	cmp	r3, #35	; 0x23
 800b588:	d84a      	bhi.n	800b620 <CDC_Control_FS+0xac>
 800b58a:	a201      	add	r2, pc, #4	; (adr r2, 800b590 <CDC_Control_FS+0x1c>)
 800b58c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b590:	0800b621 	.word	0x0800b621
 800b594:	0800b621 	.word	0x0800b621
 800b598:	0800b621 	.word	0x0800b621
 800b59c:	0800b621 	.word	0x0800b621
 800b5a0:	0800b621 	.word	0x0800b621
 800b5a4:	0800b621 	.word	0x0800b621
 800b5a8:	0800b621 	.word	0x0800b621
 800b5ac:	0800b621 	.word	0x0800b621
 800b5b0:	0800b621 	.word	0x0800b621
 800b5b4:	0800b621 	.word	0x0800b621
 800b5b8:	0800b621 	.word	0x0800b621
 800b5bc:	0800b621 	.word	0x0800b621
 800b5c0:	0800b621 	.word	0x0800b621
 800b5c4:	0800b621 	.word	0x0800b621
 800b5c8:	0800b621 	.word	0x0800b621
 800b5cc:	0800b621 	.word	0x0800b621
 800b5d0:	0800b621 	.word	0x0800b621
 800b5d4:	0800b621 	.word	0x0800b621
 800b5d8:	0800b621 	.word	0x0800b621
 800b5dc:	0800b621 	.word	0x0800b621
 800b5e0:	0800b621 	.word	0x0800b621
 800b5e4:	0800b621 	.word	0x0800b621
 800b5e8:	0800b621 	.word	0x0800b621
 800b5ec:	0800b621 	.word	0x0800b621
 800b5f0:	0800b621 	.word	0x0800b621
 800b5f4:	0800b621 	.word	0x0800b621
 800b5f8:	0800b621 	.word	0x0800b621
 800b5fc:	0800b621 	.word	0x0800b621
 800b600:	0800b621 	.word	0x0800b621
 800b604:	0800b621 	.word	0x0800b621
 800b608:	0800b621 	.word	0x0800b621
 800b60c:	0800b621 	.word	0x0800b621
 800b610:	0800b621 	.word	0x0800b621
 800b614:	0800b621 	.word	0x0800b621
 800b618:	0800b621 	.word	0x0800b621
 800b61c:	0800b621 	.word	0x0800b621
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b620:	bf00      	nop
  }

  return (USBD_OK);
 800b622:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b624:	4618      	mov	r0, r3
 800b626:	370c      	adds	r7, #12
 800b628:	46bd      	mov	sp, r7
 800b62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b62e:	4770      	bx	lr

0800b630 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b630:	b580      	push	{r7, lr}
 800b632:	b082      	sub	sp, #8
 800b634:	af00      	add	r7, sp, #0
 800b636:	6078      	str	r0, [r7, #4]
 800b638:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b63a:	6879      	ldr	r1, [r7, #4]
 800b63c:	4805      	ldr	r0, [pc, #20]	; (800b654 <CDC_Receive_FS+0x24>)
 800b63e:	f7fb fdc7 	bl	80071d0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b642:	4804      	ldr	r0, [pc, #16]	; (800b654 <CDC_Receive_FS+0x24>)
 800b644:	f7fb fe28 	bl	8007298 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b648:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b64a:	4618      	mov	r0, r3
 800b64c:	3708      	adds	r7, #8
 800b64e:	46bd      	mov	sp, r7
 800b650:	bd80      	pop	{r7, pc}
 800b652:	bf00      	nop
 800b654:	20004c5c 	.word	0x20004c5c

0800b658 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b658:	b580      	push	{r7, lr}
 800b65a:	b084      	sub	sp, #16
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	6078      	str	r0, [r7, #4]
 800b660:	460b      	mov	r3, r1
 800b662:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800b664:	2300      	movs	r3, #0
 800b666:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b668:	4b0d      	ldr	r3, [pc, #52]	; (800b6a0 <CDC_Transmit_FS+0x48>)
 800b66a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b66e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800b670:	68bb      	ldr	r3, [r7, #8]
 800b672:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b676:	2b00      	cmp	r3, #0
 800b678:	d001      	beq.n	800b67e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800b67a:	2301      	movs	r3, #1
 800b67c:	e00b      	b.n	800b696 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b67e:	887b      	ldrh	r3, [r7, #2]
 800b680:	461a      	mov	r2, r3
 800b682:	6879      	ldr	r1, [r7, #4]
 800b684:	4806      	ldr	r0, [pc, #24]	; (800b6a0 <CDC_Transmit_FS+0x48>)
 800b686:	f7fb fd81 	bl	800718c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b68a:	4805      	ldr	r0, [pc, #20]	; (800b6a0 <CDC_Transmit_FS+0x48>)
 800b68c:	f7fb fdbe 	bl	800720c <USBD_CDC_TransmitPacket>
 800b690:	4603      	mov	r3, r0
 800b692:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800b694:	7bfb      	ldrb	r3, [r7, #15]
}
 800b696:	4618      	mov	r0, r3
 800b698:	3710      	adds	r7, #16
 800b69a:	46bd      	mov	sp, r7
 800b69c:	bd80      	pop	{r7, pc}
 800b69e:	bf00      	nop
 800b6a0:	20004c5c 	.word	0x20004c5c

0800b6a4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b6a4:	b480      	push	{r7}
 800b6a6:	b087      	sub	sp, #28
 800b6a8:	af00      	add	r7, sp, #0
 800b6aa:	60f8      	str	r0, [r7, #12]
 800b6ac:	60b9      	str	r1, [r7, #8]
 800b6ae:	4613      	mov	r3, r2
 800b6b0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b6b2:	2300      	movs	r3, #0
 800b6b4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800b6b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b6ba:	4618      	mov	r0, r3
 800b6bc:	371c      	adds	r7, #28
 800b6be:	46bd      	mov	sp, r7
 800b6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c4:	4770      	bx	lr
	...

0800b6c8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b6c8:	b480      	push	{r7}
 800b6ca:	b083      	sub	sp, #12
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	4603      	mov	r3, r0
 800b6d0:	6039      	str	r1, [r7, #0]
 800b6d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b6d4:	683b      	ldr	r3, [r7, #0]
 800b6d6:	2212      	movs	r2, #18
 800b6d8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b6da:	4b03      	ldr	r3, [pc, #12]	; (800b6e8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b6dc:	4618      	mov	r0, r3
 800b6de:	370c      	adds	r7, #12
 800b6e0:	46bd      	mov	sp, r7
 800b6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e6:	4770      	bx	lr
 800b6e8:	200000cc 	.word	0x200000cc

0800b6ec <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b6ec:	b480      	push	{r7}
 800b6ee:	b083      	sub	sp, #12
 800b6f0:	af00      	add	r7, sp, #0
 800b6f2:	4603      	mov	r3, r0
 800b6f4:	6039      	str	r1, [r7, #0]
 800b6f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b6f8:	683b      	ldr	r3, [r7, #0]
 800b6fa:	2204      	movs	r2, #4
 800b6fc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b6fe:	4b03      	ldr	r3, [pc, #12]	; (800b70c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b700:	4618      	mov	r0, r3
 800b702:	370c      	adds	r7, #12
 800b704:	46bd      	mov	sp, r7
 800b706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b70a:	4770      	bx	lr
 800b70c:	200000e0 	.word	0x200000e0

0800b710 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b710:	b580      	push	{r7, lr}
 800b712:	b082      	sub	sp, #8
 800b714:	af00      	add	r7, sp, #0
 800b716:	4603      	mov	r3, r0
 800b718:	6039      	str	r1, [r7, #0]
 800b71a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b71c:	79fb      	ldrb	r3, [r7, #7]
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d105      	bne.n	800b72e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b722:	683a      	ldr	r2, [r7, #0]
 800b724:	4907      	ldr	r1, [pc, #28]	; (800b744 <USBD_FS_ProductStrDescriptor+0x34>)
 800b726:	4808      	ldr	r0, [pc, #32]	; (800b748 <USBD_FS_ProductStrDescriptor+0x38>)
 800b728:	f7fc fffe 	bl	8008728 <USBD_GetString>
 800b72c:	e004      	b.n	800b738 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b72e:	683a      	ldr	r2, [r7, #0]
 800b730:	4904      	ldr	r1, [pc, #16]	; (800b744 <USBD_FS_ProductStrDescriptor+0x34>)
 800b732:	4805      	ldr	r0, [pc, #20]	; (800b748 <USBD_FS_ProductStrDescriptor+0x38>)
 800b734:	f7fc fff8 	bl	8008728 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b738:	4b02      	ldr	r3, [pc, #8]	; (800b744 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b73a:	4618      	mov	r0, r3
 800b73c:	3708      	adds	r7, #8
 800b73e:	46bd      	mov	sp, r7
 800b740:	bd80      	pop	{r7, pc}
 800b742:	bf00      	nop
 800b744:	20005f38 	.word	0x20005f38
 800b748:	0800c1b0 	.word	0x0800c1b0

0800b74c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b74c:	b580      	push	{r7, lr}
 800b74e:	b082      	sub	sp, #8
 800b750:	af00      	add	r7, sp, #0
 800b752:	4603      	mov	r3, r0
 800b754:	6039      	str	r1, [r7, #0]
 800b756:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b758:	683a      	ldr	r2, [r7, #0]
 800b75a:	4904      	ldr	r1, [pc, #16]	; (800b76c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b75c:	4804      	ldr	r0, [pc, #16]	; (800b770 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b75e:	f7fc ffe3 	bl	8008728 <USBD_GetString>
  return USBD_StrDesc;
 800b762:	4b02      	ldr	r3, [pc, #8]	; (800b76c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b764:	4618      	mov	r0, r3
 800b766:	3708      	adds	r7, #8
 800b768:	46bd      	mov	sp, r7
 800b76a:	bd80      	pop	{r7, pc}
 800b76c:	20005f38 	.word	0x20005f38
 800b770:	0800c1c8 	.word	0x0800c1c8

0800b774 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b774:	b580      	push	{r7, lr}
 800b776:	b082      	sub	sp, #8
 800b778:	af00      	add	r7, sp, #0
 800b77a:	4603      	mov	r3, r0
 800b77c:	6039      	str	r1, [r7, #0]
 800b77e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b780:	683b      	ldr	r3, [r7, #0]
 800b782:	221a      	movs	r2, #26
 800b784:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b786:	f000 f843 	bl	800b810 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b78a:	4b02      	ldr	r3, [pc, #8]	; (800b794 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b78c:	4618      	mov	r0, r3
 800b78e:	3708      	adds	r7, #8
 800b790:	46bd      	mov	sp, r7
 800b792:	bd80      	pop	{r7, pc}
 800b794:	200000e4 	.word	0x200000e4

0800b798 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b798:	b580      	push	{r7, lr}
 800b79a:	b082      	sub	sp, #8
 800b79c:	af00      	add	r7, sp, #0
 800b79e:	4603      	mov	r3, r0
 800b7a0:	6039      	str	r1, [r7, #0]
 800b7a2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b7a4:	79fb      	ldrb	r3, [r7, #7]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d105      	bne.n	800b7b6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b7aa:	683a      	ldr	r2, [r7, #0]
 800b7ac:	4907      	ldr	r1, [pc, #28]	; (800b7cc <USBD_FS_ConfigStrDescriptor+0x34>)
 800b7ae:	4808      	ldr	r0, [pc, #32]	; (800b7d0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b7b0:	f7fc ffba 	bl	8008728 <USBD_GetString>
 800b7b4:	e004      	b.n	800b7c0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b7b6:	683a      	ldr	r2, [r7, #0]
 800b7b8:	4904      	ldr	r1, [pc, #16]	; (800b7cc <USBD_FS_ConfigStrDescriptor+0x34>)
 800b7ba:	4805      	ldr	r0, [pc, #20]	; (800b7d0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b7bc:	f7fc ffb4 	bl	8008728 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b7c0:	4b02      	ldr	r3, [pc, #8]	; (800b7cc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b7c2:	4618      	mov	r0, r3
 800b7c4:	3708      	adds	r7, #8
 800b7c6:	46bd      	mov	sp, r7
 800b7c8:	bd80      	pop	{r7, pc}
 800b7ca:	bf00      	nop
 800b7cc:	20005f38 	.word	0x20005f38
 800b7d0:	0800c1dc 	.word	0x0800c1dc

0800b7d4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b7d4:	b580      	push	{r7, lr}
 800b7d6:	b082      	sub	sp, #8
 800b7d8:	af00      	add	r7, sp, #0
 800b7da:	4603      	mov	r3, r0
 800b7dc:	6039      	str	r1, [r7, #0]
 800b7de:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b7e0:	79fb      	ldrb	r3, [r7, #7]
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d105      	bne.n	800b7f2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b7e6:	683a      	ldr	r2, [r7, #0]
 800b7e8:	4907      	ldr	r1, [pc, #28]	; (800b808 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b7ea:	4808      	ldr	r0, [pc, #32]	; (800b80c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b7ec:	f7fc ff9c 	bl	8008728 <USBD_GetString>
 800b7f0:	e004      	b.n	800b7fc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b7f2:	683a      	ldr	r2, [r7, #0]
 800b7f4:	4904      	ldr	r1, [pc, #16]	; (800b808 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b7f6:	4805      	ldr	r0, [pc, #20]	; (800b80c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b7f8:	f7fc ff96 	bl	8008728 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b7fc:	4b02      	ldr	r3, [pc, #8]	; (800b808 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b7fe:	4618      	mov	r0, r3
 800b800:	3708      	adds	r7, #8
 800b802:	46bd      	mov	sp, r7
 800b804:	bd80      	pop	{r7, pc}
 800b806:	bf00      	nop
 800b808:	20005f38 	.word	0x20005f38
 800b80c:	0800c1e8 	.word	0x0800c1e8

0800b810 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b810:	b580      	push	{r7, lr}
 800b812:	b084      	sub	sp, #16
 800b814:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b816:	4b0f      	ldr	r3, [pc, #60]	; (800b854 <Get_SerialNum+0x44>)
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b81c:	4b0e      	ldr	r3, [pc, #56]	; (800b858 <Get_SerialNum+0x48>)
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b822:	4b0e      	ldr	r3, [pc, #56]	; (800b85c <Get_SerialNum+0x4c>)
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b828:	68fa      	ldr	r2, [r7, #12]
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	4413      	add	r3, r2
 800b82e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	2b00      	cmp	r3, #0
 800b834:	d009      	beq.n	800b84a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b836:	2208      	movs	r2, #8
 800b838:	4909      	ldr	r1, [pc, #36]	; (800b860 <Get_SerialNum+0x50>)
 800b83a:	68f8      	ldr	r0, [r7, #12]
 800b83c:	f000 f814 	bl	800b868 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b840:	2204      	movs	r2, #4
 800b842:	4908      	ldr	r1, [pc, #32]	; (800b864 <Get_SerialNum+0x54>)
 800b844:	68b8      	ldr	r0, [r7, #8]
 800b846:	f000 f80f 	bl	800b868 <IntToUnicode>
  }
}
 800b84a:	bf00      	nop
 800b84c:	3710      	adds	r7, #16
 800b84e:	46bd      	mov	sp, r7
 800b850:	bd80      	pop	{r7, pc}
 800b852:	bf00      	nop
 800b854:	1fff7a10 	.word	0x1fff7a10
 800b858:	1fff7a14 	.word	0x1fff7a14
 800b85c:	1fff7a18 	.word	0x1fff7a18
 800b860:	200000e6 	.word	0x200000e6
 800b864:	200000f6 	.word	0x200000f6

0800b868 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b868:	b480      	push	{r7}
 800b86a:	b087      	sub	sp, #28
 800b86c:	af00      	add	r7, sp, #0
 800b86e:	60f8      	str	r0, [r7, #12]
 800b870:	60b9      	str	r1, [r7, #8]
 800b872:	4613      	mov	r3, r2
 800b874:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b876:	2300      	movs	r3, #0
 800b878:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b87a:	2300      	movs	r3, #0
 800b87c:	75fb      	strb	r3, [r7, #23]
 800b87e:	e027      	b.n	800b8d0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	0f1b      	lsrs	r3, r3, #28
 800b884:	2b09      	cmp	r3, #9
 800b886:	d80b      	bhi.n	800b8a0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	0f1b      	lsrs	r3, r3, #28
 800b88c:	b2da      	uxtb	r2, r3
 800b88e:	7dfb      	ldrb	r3, [r7, #23]
 800b890:	005b      	lsls	r3, r3, #1
 800b892:	4619      	mov	r1, r3
 800b894:	68bb      	ldr	r3, [r7, #8]
 800b896:	440b      	add	r3, r1
 800b898:	3230      	adds	r2, #48	; 0x30
 800b89a:	b2d2      	uxtb	r2, r2
 800b89c:	701a      	strb	r2, [r3, #0]
 800b89e:	e00a      	b.n	800b8b6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	0f1b      	lsrs	r3, r3, #28
 800b8a4:	b2da      	uxtb	r2, r3
 800b8a6:	7dfb      	ldrb	r3, [r7, #23]
 800b8a8:	005b      	lsls	r3, r3, #1
 800b8aa:	4619      	mov	r1, r3
 800b8ac:	68bb      	ldr	r3, [r7, #8]
 800b8ae:	440b      	add	r3, r1
 800b8b0:	3237      	adds	r2, #55	; 0x37
 800b8b2:	b2d2      	uxtb	r2, r2
 800b8b4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	011b      	lsls	r3, r3, #4
 800b8ba:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b8bc:	7dfb      	ldrb	r3, [r7, #23]
 800b8be:	005b      	lsls	r3, r3, #1
 800b8c0:	3301      	adds	r3, #1
 800b8c2:	68ba      	ldr	r2, [r7, #8]
 800b8c4:	4413      	add	r3, r2
 800b8c6:	2200      	movs	r2, #0
 800b8c8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b8ca:	7dfb      	ldrb	r3, [r7, #23]
 800b8cc:	3301      	adds	r3, #1
 800b8ce:	75fb      	strb	r3, [r7, #23]
 800b8d0:	7dfa      	ldrb	r2, [r7, #23]
 800b8d2:	79fb      	ldrb	r3, [r7, #7]
 800b8d4:	429a      	cmp	r2, r3
 800b8d6:	d3d3      	bcc.n	800b880 <IntToUnicode+0x18>
  }
}
 800b8d8:	bf00      	nop
 800b8da:	bf00      	nop
 800b8dc:	371c      	adds	r7, #28
 800b8de:	46bd      	mov	sp, r7
 800b8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e4:	4770      	bx	lr
	...

0800b8e8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b8e8:	b580      	push	{r7, lr}
 800b8ea:	b08a      	sub	sp, #40	; 0x28
 800b8ec:	af00      	add	r7, sp, #0
 800b8ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b8f0:	f107 0314 	add.w	r3, r7, #20
 800b8f4:	2200      	movs	r2, #0
 800b8f6:	601a      	str	r2, [r3, #0]
 800b8f8:	605a      	str	r2, [r3, #4]
 800b8fa:	609a      	str	r2, [r3, #8]
 800b8fc:	60da      	str	r2, [r3, #12]
 800b8fe:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b908:	d147      	bne.n	800b99a <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b90a:	2300      	movs	r3, #0
 800b90c:	613b      	str	r3, [r7, #16]
 800b90e:	4b25      	ldr	r3, [pc, #148]	; (800b9a4 <HAL_PCD_MspInit+0xbc>)
 800b910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b912:	4a24      	ldr	r2, [pc, #144]	; (800b9a4 <HAL_PCD_MspInit+0xbc>)
 800b914:	f043 0301 	orr.w	r3, r3, #1
 800b918:	6313      	str	r3, [r2, #48]	; 0x30
 800b91a:	4b22      	ldr	r3, [pc, #136]	; (800b9a4 <HAL_PCD_MspInit+0xbc>)
 800b91c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b91e:	f003 0301 	and.w	r3, r3, #1
 800b922:	613b      	str	r3, [r7, #16]
 800b924:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800b926:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b92a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b92c:	2300      	movs	r3, #0
 800b92e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b930:	2300      	movs	r3, #0
 800b932:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800b934:	f107 0314 	add.w	r3, r7, #20
 800b938:	4619      	mov	r1, r3
 800b93a:	481b      	ldr	r0, [pc, #108]	; (800b9a8 <HAL_PCD_MspInit+0xc0>)
 800b93c:	f7f5 fcd6 	bl	80012ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800b940:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800b944:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b946:	2302      	movs	r3, #2
 800b948:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b94a:	2300      	movs	r3, #0
 800b94c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b94e:	2303      	movs	r3, #3
 800b950:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b952:	230a      	movs	r3, #10
 800b954:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b956:	f107 0314 	add.w	r3, r7, #20
 800b95a:	4619      	mov	r1, r3
 800b95c:	4812      	ldr	r0, [pc, #72]	; (800b9a8 <HAL_PCD_MspInit+0xc0>)
 800b95e:	f7f5 fcc5 	bl	80012ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b962:	4b10      	ldr	r3, [pc, #64]	; (800b9a4 <HAL_PCD_MspInit+0xbc>)
 800b964:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b966:	4a0f      	ldr	r2, [pc, #60]	; (800b9a4 <HAL_PCD_MspInit+0xbc>)
 800b968:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b96c:	6353      	str	r3, [r2, #52]	; 0x34
 800b96e:	2300      	movs	r3, #0
 800b970:	60fb      	str	r3, [r7, #12]
 800b972:	4b0c      	ldr	r3, [pc, #48]	; (800b9a4 <HAL_PCD_MspInit+0xbc>)
 800b974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b976:	4a0b      	ldr	r2, [pc, #44]	; (800b9a4 <HAL_PCD_MspInit+0xbc>)
 800b978:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b97c:	6453      	str	r3, [r2, #68]	; 0x44
 800b97e:	4b09      	ldr	r3, [pc, #36]	; (800b9a4 <HAL_PCD_MspInit+0xbc>)
 800b980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b982:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b986:	60fb      	str	r3, [r7, #12]
 800b988:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800b98a:	2200      	movs	r2, #0
 800b98c:	2105      	movs	r1, #5
 800b98e:	2043      	movs	r0, #67	; 0x43
 800b990:	f7f5 fc82 	bl	8001298 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b994:	2043      	movs	r0, #67	; 0x43
 800b996:	f7f5 fc9b 	bl	80012d0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b99a:	bf00      	nop
 800b99c:	3728      	adds	r7, #40	; 0x28
 800b99e:	46bd      	mov	sp, r7
 800b9a0:	bd80      	pop	{r7, pc}
 800b9a2:	bf00      	nop
 800b9a4:	40023800 	.word	0x40023800
 800b9a8:	40020000 	.word	0x40020000

0800b9ac <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b9ac:	b580      	push	{r7, lr}
 800b9ae:	b082      	sub	sp, #8
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800b9c0:	4619      	mov	r1, r3
 800b9c2:	4610      	mov	r0, r2
 800b9c4:	f7fb fd51 	bl	800746a <USBD_LL_SetupStage>
}
 800b9c8:	bf00      	nop
 800b9ca:	3708      	adds	r7, #8
 800b9cc:	46bd      	mov	sp, r7
 800b9ce:	bd80      	pop	{r7, pc}

0800b9d0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b9d0:	b580      	push	{r7, lr}
 800b9d2:	b082      	sub	sp, #8
 800b9d4:	af00      	add	r7, sp, #0
 800b9d6:	6078      	str	r0, [r7, #4]
 800b9d8:	460b      	mov	r3, r1
 800b9da:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800b9e2:	78fa      	ldrb	r2, [r7, #3]
 800b9e4:	6879      	ldr	r1, [r7, #4]
 800b9e6:	4613      	mov	r3, r2
 800b9e8:	00db      	lsls	r3, r3, #3
 800b9ea:	4413      	add	r3, r2
 800b9ec:	009b      	lsls	r3, r3, #2
 800b9ee:	440b      	add	r3, r1
 800b9f0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800b9f4:	681a      	ldr	r2, [r3, #0]
 800b9f6:	78fb      	ldrb	r3, [r7, #3]
 800b9f8:	4619      	mov	r1, r3
 800b9fa:	f7fb fd8b 	bl	8007514 <USBD_LL_DataOutStage>
}
 800b9fe:	bf00      	nop
 800ba00:	3708      	adds	r7, #8
 800ba02:	46bd      	mov	sp, r7
 800ba04:	bd80      	pop	{r7, pc}

0800ba06 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba06:	b580      	push	{r7, lr}
 800ba08:	b082      	sub	sp, #8
 800ba0a:	af00      	add	r7, sp, #0
 800ba0c:	6078      	str	r0, [r7, #4]
 800ba0e:	460b      	mov	r3, r1
 800ba10:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800ba18:	78fa      	ldrb	r2, [r7, #3]
 800ba1a:	6879      	ldr	r1, [r7, #4]
 800ba1c:	4613      	mov	r3, r2
 800ba1e:	00db      	lsls	r3, r3, #3
 800ba20:	4413      	add	r3, r2
 800ba22:	009b      	lsls	r3, r3, #2
 800ba24:	440b      	add	r3, r1
 800ba26:	334c      	adds	r3, #76	; 0x4c
 800ba28:	681a      	ldr	r2, [r3, #0]
 800ba2a:	78fb      	ldrb	r3, [r7, #3]
 800ba2c:	4619      	mov	r1, r3
 800ba2e:	f7fb fe24 	bl	800767a <USBD_LL_DataInStage>
}
 800ba32:	bf00      	nop
 800ba34:	3708      	adds	r7, #8
 800ba36:	46bd      	mov	sp, r7
 800ba38:	bd80      	pop	{r7, pc}

0800ba3a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba3a:	b580      	push	{r7, lr}
 800ba3c:	b082      	sub	sp, #8
 800ba3e:	af00      	add	r7, sp, #0
 800ba40:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ba48:	4618      	mov	r0, r3
 800ba4a:	f7fb ff58 	bl	80078fe <USBD_LL_SOF>
}
 800ba4e:	bf00      	nop
 800ba50:	3708      	adds	r7, #8
 800ba52:	46bd      	mov	sp, r7
 800ba54:	bd80      	pop	{r7, pc}

0800ba56 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba56:	b580      	push	{r7, lr}
 800ba58:	b084      	sub	sp, #16
 800ba5a:	af00      	add	r7, sp, #0
 800ba5c:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ba5e:	2301      	movs	r3, #1
 800ba60:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	68db      	ldr	r3, [r3, #12]
 800ba66:	2b02      	cmp	r3, #2
 800ba68:	d001      	beq.n	800ba6e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800ba6a:	f7f5 f953 	bl	8000d14 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ba74:	7bfa      	ldrb	r2, [r7, #15]
 800ba76:	4611      	mov	r1, r2
 800ba78:	4618      	mov	r0, r3
 800ba7a:	f7fb ff02 	bl	8007882 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ba84:	4618      	mov	r0, r3
 800ba86:	f7fb feaa 	bl	80077de <USBD_LL_Reset>
}
 800ba8a:	bf00      	nop
 800ba8c:	3710      	adds	r7, #16
 800ba8e:	46bd      	mov	sp, r7
 800ba90:	bd80      	pop	{r7, pc}
	...

0800ba94 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba94:	b580      	push	{r7, lr}
 800ba96:	b082      	sub	sp, #8
 800ba98:	af00      	add	r7, sp, #0
 800ba9a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800baa2:	4618      	mov	r0, r3
 800baa4:	f7fb fefd 	bl	80078a2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	687a      	ldr	r2, [r7, #4]
 800bab4:	6812      	ldr	r2, [r2, #0]
 800bab6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800baba:	f043 0301 	orr.w	r3, r3, #1
 800babe:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	6a1b      	ldr	r3, [r3, #32]
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d005      	beq.n	800bad4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bac8:	4b04      	ldr	r3, [pc, #16]	; (800badc <HAL_PCD_SuspendCallback+0x48>)
 800baca:	691b      	ldr	r3, [r3, #16]
 800bacc:	4a03      	ldr	r2, [pc, #12]	; (800badc <HAL_PCD_SuspendCallback+0x48>)
 800bace:	f043 0306 	orr.w	r3, r3, #6
 800bad2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800bad4:	bf00      	nop
 800bad6:	3708      	adds	r7, #8
 800bad8:	46bd      	mov	sp, r7
 800bada:	bd80      	pop	{r7, pc}
 800badc:	e000ed00 	.word	0xe000ed00

0800bae0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bae0:	b580      	push	{r7, lr}
 800bae2:	b082      	sub	sp, #8
 800bae4:	af00      	add	r7, sp, #0
 800bae6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800baee:	4618      	mov	r0, r3
 800baf0:	f7fb feed 	bl	80078ce <USBD_LL_Resume>
}
 800baf4:	bf00      	nop
 800baf6:	3708      	adds	r7, #8
 800baf8:	46bd      	mov	sp, r7
 800bafa:	bd80      	pop	{r7, pc}

0800bafc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bafc:	b580      	push	{r7, lr}
 800bafe:	b082      	sub	sp, #8
 800bb00:	af00      	add	r7, sp, #0
 800bb02:	6078      	str	r0, [r7, #4]
 800bb04:	460b      	mov	r3, r1
 800bb06:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bb0e:	78fa      	ldrb	r2, [r7, #3]
 800bb10:	4611      	mov	r1, r2
 800bb12:	4618      	mov	r0, r3
 800bb14:	f7fb ff45 	bl	80079a2 <USBD_LL_IsoOUTIncomplete>
}
 800bb18:	bf00      	nop
 800bb1a:	3708      	adds	r7, #8
 800bb1c:	46bd      	mov	sp, r7
 800bb1e:	bd80      	pop	{r7, pc}

0800bb20 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb20:	b580      	push	{r7, lr}
 800bb22:	b082      	sub	sp, #8
 800bb24:	af00      	add	r7, sp, #0
 800bb26:	6078      	str	r0, [r7, #4]
 800bb28:	460b      	mov	r3, r1
 800bb2a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bb32:	78fa      	ldrb	r2, [r7, #3]
 800bb34:	4611      	mov	r1, r2
 800bb36:	4618      	mov	r0, r3
 800bb38:	f7fb ff01 	bl	800793e <USBD_LL_IsoINIncomplete>
}
 800bb3c:	bf00      	nop
 800bb3e:	3708      	adds	r7, #8
 800bb40:	46bd      	mov	sp, r7
 800bb42:	bd80      	pop	{r7, pc}

0800bb44 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb44:	b580      	push	{r7, lr}
 800bb46:	b082      	sub	sp, #8
 800bb48:	af00      	add	r7, sp, #0
 800bb4a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bb52:	4618      	mov	r0, r3
 800bb54:	f7fb ff57 	bl	8007a06 <USBD_LL_DevConnected>
}
 800bb58:	bf00      	nop
 800bb5a:	3708      	adds	r7, #8
 800bb5c:	46bd      	mov	sp, r7
 800bb5e:	bd80      	pop	{r7, pc}

0800bb60 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb60:	b580      	push	{r7, lr}
 800bb62:	b082      	sub	sp, #8
 800bb64:	af00      	add	r7, sp, #0
 800bb66:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bb6e:	4618      	mov	r0, r3
 800bb70:	f7fb ff54 	bl	8007a1c <USBD_LL_DevDisconnected>
}
 800bb74:	bf00      	nop
 800bb76:	3708      	adds	r7, #8
 800bb78:	46bd      	mov	sp, r7
 800bb7a:	bd80      	pop	{r7, pc}

0800bb7c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800bb7c:	b580      	push	{r7, lr}
 800bb7e:	b082      	sub	sp, #8
 800bb80:	af00      	add	r7, sp, #0
 800bb82:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	781b      	ldrb	r3, [r3, #0]
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d13c      	bne.n	800bc06 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800bb8c:	4a20      	ldr	r2, [pc, #128]	; (800bc10 <USBD_LL_Init+0x94>)
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	4a1e      	ldr	r2, [pc, #120]	; (800bc10 <USBD_LL_Init+0x94>)
 800bb98:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800bb9c:	4b1c      	ldr	r3, [pc, #112]	; (800bc10 <USBD_LL_Init+0x94>)
 800bb9e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800bba2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800bba4:	4b1a      	ldr	r3, [pc, #104]	; (800bc10 <USBD_LL_Init+0x94>)
 800bba6:	2204      	movs	r2, #4
 800bba8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800bbaa:	4b19      	ldr	r3, [pc, #100]	; (800bc10 <USBD_LL_Init+0x94>)
 800bbac:	2202      	movs	r2, #2
 800bbae:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800bbb0:	4b17      	ldr	r3, [pc, #92]	; (800bc10 <USBD_LL_Init+0x94>)
 800bbb2:	2200      	movs	r2, #0
 800bbb4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800bbb6:	4b16      	ldr	r3, [pc, #88]	; (800bc10 <USBD_LL_Init+0x94>)
 800bbb8:	2202      	movs	r2, #2
 800bbba:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800bbbc:	4b14      	ldr	r3, [pc, #80]	; (800bc10 <USBD_LL_Init+0x94>)
 800bbbe:	2200      	movs	r2, #0
 800bbc0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800bbc2:	4b13      	ldr	r3, [pc, #76]	; (800bc10 <USBD_LL_Init+0x94>)
 800bbc4:	2200      	movs	r2, #0
 800bbc6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800bbc8:	4b11      	ldr	r3, [pc, #68]	; (800bc10 <USBD_LL_Init+0x94>)
 800bbca:	2200      	movs	r2, #0
 800bbcc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800bbce:	4b10      	ldr	r3, [pc, #64]	; (800bc10 <USBD_LL_Init+0x94>)
 800bbd0:	2200      	movs	r2, #0
 800bbd2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800bbd4:	4b0e      	ldr	r3, [pc, #56]	; (800bc10 <USBD_LL_Init+0x94>)
 800bbd6:	2200      	movs	r2, #0
 800bbd8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800bbda:	480d      	ldr	r0, [pc, #52]	; (800bc10 <USBD_LL_Init+0x94>)
 800bbdc:	f7f6 fb12 	bl	8002204 <HAL_PCD_Init>
 800bbe0:	4603      	mov	r3, r0
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d001      	beq.n	800bbea <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800bbe6:	f7f5 f895 	bl	8000d14 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800bbea:	2180      	movs	r1, #128	; 0x80
 800bbec:	4808      	ldr	r0, [pc, #32]	; (800bc10 <USBD_LL_Init+0x94>)
 800bbee:	f7f7 fd6a 	bl	80036c6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800bbf2:	2240      	movs	r2, #64	; 0x40
 800bbf4:	2100      	movs	r1, #0
 800bbf6:	4806      	ldr	r0, [pc, #24]	; (800bc10 <USBD_LL_Init+0x94>)
 800bbf8:	f7f7 fd1e 	bl	8003638 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800bbfc:	2280      	movs	r2, #128	; 0x80
 800bbfe:	2101      	movs	r1, #1
 800bc00:	4803      	ldr	r0, [pc, #12]	; (800bc10 <USBD_LL_Init+0x94>)
 800bc02:	f7f7 fd19 	bl	8003638 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800bc06:	2300      	movs	r3, #0
}
 800bc08:	4618      	mov	r0, r3
 800bc0a:	3708      	adds	r7, #8
 800bc0c:	46bd      	mov	sp, r7
 800bc0e:	bd80      	pop	{r7, pc}
 800bc10:	20006138 	.word	0x20006138

0800bc14 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800bc14:	b580      	push	{r7, lr}
 800bc16:	b084      	sub	sp, #16
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc1c:	2300      	movs	r3, #0
 800bc1e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc20:	2300      	movs	r3, #0
 800bc22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bc2a:	4618      	mov	r0, r3
 800bc2c:	f7f6 fc07 	bl	800243e <HAL_PCD_Start>
 800bc30:	4603      	mov	r3, r0
 800bc32:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bc34:	7bfb      	ldrb	r3, [r7, #15]
 800bc36:	4618      	mov	r0, r3
 800bc38:	f000 f942 	bl	800bec0 <USBD_Get_USB_Status>
 800bc3c:	4603      	mov	r3, r0
 800bc3e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bc40:	7bbb      	ldrb	r3, [r7, #14]
}
 800bc42:	4618      	mov	r0, r3
 800bc44:	3710      	adds	r7, #16
 800bc46:	46bd      	mov	sp, r7
 800bc48:	bd80      	pop	{r7, pc}

0800bc4a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800bc4a:	b580      	push	{r7, lr}
 800bc4c:	b084      	sub	sp, #16
 800bc4e:	af00      	add	r7, sp, #0
 800bc50:	6078      	str	r0, [r7, #4]
 800bc52:	4608      	mov	r0, r1
 800bc54:	4611      	mov	r1, r2
 800bc56:	461a      	mov	r2, r3
 800bc58:	4603      	mov	r3, r0
 800bc5a:	70fb      	strb	r3, [r7, #3]
 800bc5c:	460b      	mov	r3, r1
 800bc5e:	70bb      	strb	r3, [r7, #2]
 800bc60:	4613      	mov	r3, r2
 800bc62:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc64:	2300      	movs	r3, #0
 800bc66:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc68:	2300      	movs	r3, #0
 800bc6a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800bc72:	78bb      	ldrb	r3, [r7, #2]
 800bc74:	883a      	ldrh	r2, [r7, #0]
 800bc76:	78f9      	ldrb	r1, [r7, #3]
 800bc78:	f7f7 f8d8 	bl	8002e2c <HAL_PCD_EP_Open>
 800bc7c:	4603      	mov	r3, r0
 800bc7e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bc80:	7bfb      	ldrb	r3, [r7, #15]
 800bc82:	4618      	mov	r0, r3
 800bc84:	f000 f91c 	bl	800bec0 <USBD_Get_USB_Status>
 800bc88:	4603      	mov	r3, r0
 800bc8a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bc8c:	7bbb      	ldrb	r3, [r7, #14]
}
 800bc8e:	4618      	mov	r0, r3
 800bc90:	3710      	adds	r7, #16
 800bc92:	46bd      	mov	sp, r7
 800bc94:	bd80      	pop	{r7, pc}

0800bc96 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bc96:	b580      	push	{r7, lr}
 800bc98:	b084      	sub	sp, #16
 800bc9a:	af00      	add	r7, sp, #0
 800bc9c:	6078      	str	r0, [r7, #4]
 800bc9e:	460b      	mov	r3, r1
 800bca0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bca2:	2300      	movs	r3, #0
 800bca4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bca6:	2300      	movs	r3, #0
 800bca8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bcb0:	78fa      	ldrb	r2, [r7, #3]
 800bcb2:	4611      	mov	r1, r2
 800bcb4:	4618      	mov	r0, r3
 800bcb6:	f7f7 f921 	bl	8002efc <HAL_PCD_EP_Close>
 800bcba:	4603      	mov	r3, r0
 800bcbc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bcbe:	7bfb      	ldrb	r3, [r7, #15]
 800bcc0:	4618      	mov	r0, r3
 800bcc2:	f000 f8fd 	bl	800bec0 <USBD_Get_USB_Status>
 800bcc6:	4603      	mov	r3, r0
 800bcc8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bcca:	7bbb      	ldrb	r3, [r7, #14]
}
 800bccc:	4618      	mov	r0, r3
 800bcce:	3710      	adds	r7, #16
 800bcd0:	46bd      	mov	sp, r7
 800bcd2:	bd80      	pop	{r7, pc}

0800bcd4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bcd4:	b580      	push	{r7, lr}
 800bcd6:	b084      	sub	sp, #16
 800bcd8:	af00      	add	r7, sp, #0
 800bcda:	6078      	str	r0, [r7, #4]
 800bcdc:	460b      	mov	r3, r1
 800bcde:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bce0:	2300      	movs	r3, #0
 800bce2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bce4:	2300      	movs	r3, #0
 800bce6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bcee:	78fa      	ldrb	r2, [r7, #3]
 800bcf0:	4611      	mov	r1, r2
 800bcf2:	4618      	mov	r0, r3
 800bcf4:	f7f7 f9f9 	bl	80030ea <HAL_PCD_EP_SetStall>
 800bcf8:	4603      	mov	r3, r0
 800bcfa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bcfc:	7bfb      	ldrb	r3, [r7, #15]
 800bcfe:	4618      	mov	r0, r3
 800bd00:	f000 f8de 	bl	800bec0 <USBD_Get_USB_Status>
 800bd04:	4603      	mov	r3, r0
 800bd06:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bd08:	7bbb      	ldrb	r3, [r7, #14]
}
 800bd0a:	4618      	mov	r0, r3
 800bd0c:	3710      	adds	r7, #16
 800bd0e:	46bd      	mov	sp, r7
 800bd10:	bd80      	pop	{r7, pc}

0800bd12 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bd12:	b580      	push	{r7, lr}
 800bd14:	b084      	sub	sp, #16
 800bd16:	af00      	add	r7, sp, #0
 800bd18:	6078      	str	r0, [r7, #4]
 800bd1a:	460b      	mov	r3, r1
 800bd1c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd1e:	2300      	movs	r3, #0
 800bd20:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd22:	2300      	movs	r3, #0
 800bd24:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bd2c:	78fa      	ldrb	r2, [r7, #3]
 800bd2e:	4611      	mov	r1, r2
 800bd30:	4618      	mov	r0, r3
 800bd32:	f7f7 fa3e 	bl	80031b2 <HAL_PCD_EP_ClrStall>
 800bd36:	4603      	mov	r3, r0
 800bd38:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bd3a:	7bfb      	ldrb	r3, [r7, #15]
 800bd3c:	4618      	mov	r0, r3
 800bd3e:	f000 f8bf 	bl	800bec0 <USBD_Get_USB_Status>
 800bd42:	4603      	mov	r3, r0
 800bd44:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bd46:	7bbb      	ldrb	r3, [r7, #14]
}
 800bd48:	4618      	mov	r0, r3
 800bd4a:	3710      	adds	r7, #16
 800bd4c:	46bd      	mov	sp, r7
 800bd4e:	bd80      	pop	{r7, pc}

0800bd50 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bd50:	b480      	push	{r7}
 800bd52:	b085      	sub	sp, #20
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	6078      	str	r0, [r7, #4]
 800bd58:	460b      	mov	r3, r1
 800bd5a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bd62:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800bd64:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	da0b      	bge.n	800bd84 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800bd6c:	78fb      	ldrb	r3, [r7, #3]
 800bd6e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bd72:	68f9      	ldr	r1, [r7, #12]
 800bd74:	4613      	mov	r3, r2
 800bd76:	00db      	lsls	r3, r3, #3
 800bd78:	4413      	add	r3, r2
 800bd7a:	009b      	lsls	r3, r3, #2
 800bd7c:	440b      	add	r3, r1
 800bd7e:	333e      	adds	r3, #62	; 0x3e
 800bd80:	781b      	ldrb	r3, [r3, #0]
 800bd82:	e00b      	b.n	800bd9c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800bd84:	78fb      	ldrb	r3, [r7, #3]
 800bd86:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bd8a:	68f9      	ldr	r1, [r7, #12]
 800bd8c:	4613      	mov	r3, r2
 800bd8e:	00db      	lsls	r3, r3, #3
 800bd90:	4413      	add	r3, r2
 800bd92:	009b      	lsls	r3, r3, #2
 800bd94:	440b      	add	r3, r1
 800bd96:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800bd9a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800bd9c:	4618      	mov	r0, r3
 800bd9e:	3714      	adds	r7, #20
 800bda0:	46bd      	mov	sp, r7
 800bda2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda6:	4770      	bx	lr

0800bda8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800bda8:	b580      	push	{r7, lr}
 800bdaa:	b084      	sub	sp, #16
 800bdac:	af00      	add	r7, sp, #0
 800bdae:	6078      	str	r0, [r7, #4]
 800bdb0:	460b      	mov	r3, r1
 800bdb2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bdb4:	2300      	movs	r3, #0
 800bdb6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bdb8:	2300      	movs	r3, #0
 800bdba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bdc2:	78fa      	ldrb	r2, [r7, #3]
 800bdc4:	4611      	mov	r1, r2
 800bdc6:	4618      	mov	r0, r3
 800bdc8:	f7f7 f80b 	bl	8002de2 <HAL_PCD_SetAddress>
 800bdcc:	4603      	mov	r3, r0
 800bdce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bdd0:	7bfb      	ldrb	r3, [r7, #15]
 800bdd2:	4618      	mov	r0, r3
 800bdd4:	f000 f874 	bl	800bec0 <USBD_Get_USB_Status>
 800bdd8:	4603      	mov	r3, r0
 800bdda:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bddc:	7bbb      	ldrb	r3, [r7, #14]
}
 800bdde:	4618      	mov	r0, r3
 800bde0:	3710      	adds	r7, #16
 800bde2:	46bd      	mov	sp, r7
 800bde4:	bd80      	pop	{r7, pc}

0800bde6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bde6:	b580      	push	{r7, lr}
 800bde8:	b086      	sub	sp, #24
 800bdea:	af00      	add	r7, sp, #0
 800bdec:	60f8      	str	r0, [r7, #12]
 800bdee:	607a      	str	r2, [r7, #4]
 800bdf0:	603b      	str	r3, [r7, #0]
 800bdf2:	460b      	mov	r3, r1
 800bdf4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bdf6:	2300      	movs	r3, #0
 800bdf8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bdfa:	2300      	movs	r3, #0
 800bdfc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800be04:	7af9      	ldrb	r1, [r7, #11]
 800be06:	683b      	ldr	r3, [r7, #0]
 800be08:	687a      	ldr	r2, [r7, #4]
 800be0a:	f7f7 f924 	bl	8003056 <HAL_PCD_EP_Transmit>
 800be0e:	4603      	mov	r3, r0
 800be10:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800be12:	7dfb      	ldrb	r3, [r7, #23]
 800be14:	4618      	mov	r0, r3
 800be16:	f000 f853 	bl	800bec0 <USBD_Get_USB_Status>
 800be1a:	4603      	mov	r3, r0
 800be1c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800be1e:	7dbb      	ldrb	r3, [r7, #22]
}
 800be20:	4618      	mov	r0, r3
 800be22:	3718      	adds	r7, #24
 800be24:	46bd      	mov	sp, r7
 800be26:	bd80      	pop	{r7, pc}

0800be28 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800be28:	b580      	push	{r7, lr}
 800be2a:	b086      	sub	sp, #24
 800be2c:	af00      	add	r7, sp, #0
 800be2e:	60f8      	str	r0, [r7, #12]
 800be30:	607a      	str	r2, [r7, #4]
 800be32:	603b      	str	r3, [r7, #0]
 800be34:	460b      	mov	r3, r1
 800be36:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be38:	2300      	movs	r3, #0
 800be3a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800be3c:	2300      	movs	r3, #0
 800be3e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800be46:	7af9      	ldrb	r1, [r7, #11]
 800be48:	683b      	ldr	r3, [r7, #0]
 800be4a:	687a      	ldr	r2, [r7, #4]
 800be4c:	f7f7 f8a0 	bl	8002f90 <HAL_PCD_EP_Receive>
 800be50:	4603      	mov	r3, r0
 800be52:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800be54:	7dfb      	ldrb	r3, [r7, #23]
 800be56:	4618      	mov	r0, r3
 800be58:	f000 f832 	bl	800bec0 <USBD_Get_USB_Status>
 800be5c:	4603      	mov	r3, r0
 800be5e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800be60:	7dbb      	ldrb	r3, [r7, #22]
}
 800be62:	4618      	mov	r0, r3
 800be64:	3718      	adds	r7, #24
 800be66:	46bd      	mov	sp, r7
 800be68:	bd80      	pop	{r7, pc}

0800be6a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800be6a:	b580      	push	{r7, lr}
 800be6c:	b082      	sub	sp, #8
 800be6e:	af00      	add	r7, sp, #0
 800be70:	6078      	str	r0, [r7, #4]
 800be72:	460b      	mov	r3, r1
 800be74:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800be7c:	78fa      	ldrb	r2, [r7, #3]
 800be7e:	4611      	mov	r1, r2
 800be80:	4618      	mov	r0, r3
 800be82:	f7f7 f8d0 	bl	8003026 <HAL_PCD_EP_GetRxCount>
 800be86:	4603      	mov	r3, r0
}
 800be88:	4618      	mov	r0, r3
 800be8a:	3708      	adds	r7, #8
 800be8c:	46bd      	mov	sp, r7
 800be8e:	bd80      	pop	{r7, pc}

0800be90 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800be90:	b480      	push	{r7}
 800be92:	b083      	sub	sp, #12
 800be94:	af00      	add	r7, sp, #0
 800be96:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800be98:	4b03      	ldr	r3, [pc, #12]	; (800bea8 <USBD_static_malloc+0x18>)
}
 800be9a:	4618      	mov	r0, r3
 800be9c:	370c      	adds	r7, #12
 800be9e:	46bd      	mov	sp, r7
 800bea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea4:	4770      	bx	lr
 800bea6:	bf00      	nop
 800bea8:	20006644 	.word	0x20006644

0800beac <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800beac:	b480      	push	{r7}
 800beae:	b083      	sub	sp, #12
 800beb0:	af00      	add	r7, sp, #0
 800beb2:	6078      	str	r0, [r7, #4]

}
 800beb4:	bf00      	nop
 800beb6:	370c      	adds	r7, #12
 800beb8:	46bd      	mov	sp, r7
 800beba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bebe:	4770      	bx	lr

0800bec0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bec0:	b480      	push	{r7}
 800bec2:	b085      	sub	sp, #20
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	4603      	mov	r3, r0
 800bec8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800beca:	2300      	movs	r3, #0
 800becc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bece:	79fb      	ldrb	r3, [r7, #7]
 800bed0:	2b03      	cmp	r3, #3
 800bed2:	d817      	bhi.n	800bf04 <USBD_Get_USB_Status+0x44>
 800bed4:	a201      	add	r2, pc, #4	; (adr r2, 800bedc <USBD_Get_USB_Status+0x1c>)
 800bed6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800beda:	bf00      	nop
 800bedc:	0800beed 	.word	0x0800beed
 800bee0:	0800bef3 	.word	0x0800bef3
 800bee4:	0800bef9 	.word	0x0800bef9
 800bee8:	0800beff 	.word	0x0800beff
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800beec:	2300      	movs	r3, #0
 800beee:	73fb      	strb	r3, [r7, #15]
    break;
 800bef0:	e00b      	b.n	800bf0a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bef2:	2303      	movs	r3, #3
 800bef4:	73fb      	strb	r3, [r7, #15]
    break;
 800bef6:	e008      	b.n	800bf0a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bef8:	2301      	movs	r3, #1
 800befa:	73fb      	strb	r3, [r7, #15]
    break;
 800befc:	e005      	b.n	800bf0a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800befe:	2303      	movs	r3, #3
 800bf00:	73fb      	strb	r3, [r7, #15]
    break;
 800bf02:	e002      	b.n	800bf0a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800bf04:	2303      	movs	r3, #3
 800bf06:	73fb      	strb	r3, [r7, #15]
    break;
 800bf08:	bf00      	nop
  }
  return usb_status;
 800bf0a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf0c:	4618      	mov	r0, r3
 800bf0e:	3714      	adds	r7, #20
 800bf10:	46bd      	mov	sp, r7
 800bf12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf16:	4770      	bx	lr

0800bf18 <memset>:
 800bf18:	4402      	add	r2, r0
 800bf1a:	4603      	mov	r3, r0
 800bf1c:	4293      	cmp	r3, r2
 800bf1e:	d100      	bne.n	800bf22 <memset+0xa>
 800bf20:	4770      	bx	lr
 800bf22:	f803 1b01 	strb.w	r1, [r3], #1
 800bf26:	e7f9      	b.n	800bf1c <memset+0x4>

0800bf28 <_reclaim_reent>:
 800bf28:	4b29      	ldr	r3, [pc, #164]	; (800bfd0 <_reclaim_reent+0xa8>)
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	4283      	cmp	r3, r0
 800bf2e:	b570      	push	{r4, r5, r6, lr}
 800bf30:	4604      	mov	r4, r0
 800bf32:	d04b      	beq.n	800bfcc <_reclaim_reent+0xa4>
 800bf34:	69c3      	ldr	r3, [r0, #28]
 800bf36:	b143      	cbz	r3, 800bf4a <_reclaim_reent+0x22>
 800bf38:	68db      	ldr	r3, [r3, #12]
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d144      	bne.n	800bfc8 <_reclaim_reent+0xa0>
 800bf3e:	69e3      	ldr	r3, [r4, #28]
 800bf40:	6819      	ldr	r1, [r3, #0]
 800bf42:	b111      	cbz	r1, 800bf4a <_reclaim_reent+0x22>
 800bf44:	4620      	mov	r0, r4
 800bf46:	f000 f879 	bl	800c03c <_free_r>
 800bf4a:	6961      	ldr	r1, [r4, #20]
 800bf4c:	b111      	cbz	r1, 800bf54 <_reclaim_reent+0x2c>
 800bf4e:	4620      	mov	r0, r4
 800bf50:	f000 f874 	bl	800c03c <_free_r>
 800bf54:	69e1      	ldr	r1, [r4, #28]
 800bf56:	b111      	cbz	r1, 800bf5e <_reclaim_reent+0x36>
 800bf58:	4620      	mov	r0, r4
 800bf5a:	f000 f86f 	bl	800c03c <_free_r>
 800bf5e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800bf60:	b111      	cbz	r1, 800bf68 <_reclaim_reent+0x40>
 800bf62:	4620      	mov	r0, r4
 800bf64:	f000 f86a 	bl	800c03c <_free_r>
 800bf68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bf6a:	b111      	cbz	r1, 800bf72 <_reclaim_reent+0x4a>
 800bf6c:	4620      	mov	r0, r4
 800bf6e:	f000 f865 	bl	800c03c <_free_r>
 800bf72:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800bf74:	b111      	cbz	r1, 800bf7c <_reclaim_reent+0x54>
 800bf76:	4620      	mov	r0, r4
 800bf78:	f000 f860 	bl	800c03c <_free_r>
 800bf7c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800bf7e:	b111      	cbz	r1, 800bf86 <_reclaim_reent+0x5e>
 800bf80:	4620      	mov	r0, r4
 800bf82:	f000 f85b 	bl	800c03c <_free_r>
 800bf86:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800bf88:	b111      	cbz	r1, 800bf90 <_reclaim_reent+0x68>
 800bf8a:	4620      	mov	r0, r4
 800bf8c:	f000 f856 	bl	800c03c <_free_r>
 800bf90:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800bf92:	b111      	cbz	r1, 800bf9a <_reclaim_reent+0x72>
 800bf94:	4620      	mov	r0, r4
 800bf96:	f000 f851 	bl	800c03c <_free_r>
 800bf9a:	6a23      	ldr	r3, [r4, #32]
 800bf9c:	b1b3      	cbz	r3, 800bfcc <_reclaim_reent+0xa4>
 800bf9e:	4620      	mov	r0, r4
 800bfa0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bfa4:	4718      	bx	r3
 800bfa6:	5949      	ldr	r1, [r1, r5]
 800bfa8:	b941      	cbnz	r1, 800bfbc <_reclaim_reent+0x94>
 800bfaa:	3504      	adds	r5, #4
 800bfac:	69e3      	ldr	r3, [r4, #28]
 800bfae:	2d80      	cmp	r5, #128	; 0x80
 800bfb0:	68d9      	ldr	r1, [r3, #12]
 800bfb2:	d1f8      	bne.n	800bfa6 <_reclaim_reent+0x7e>
 800bfb4:	4620      	mov	r0, r4
 800bfb6:	f000 f841 	bl	800c03c <_free_r>
 800bfba:	e7c0      	b.n	800bf3e <_reclaim_reent+0x16>
 800bfbc:	680e      	ldr	r6, [r1, #0]
 800bfbe:	4620      	mov	r0, r4
 800bfc0:	f000 f83c 	bl	800c03c <_free_r>
 800bfc4:	4631      	mov	r1, r6
 800bfc6:	e7ef      	b.n	800bfa8 <_reclaim_reent+0x80>
 800bfc8:	2500      	movs	r5, #0
 800bfca:	e7ef      	b.n	800bfac <_reclaim_reent+0x84>
 800bfcc:	bd70      	pop	{r4, r5, r6, pc}
 800bfce:	bf00      	nop
 800bfd0:	2000014c 	.word	0x2000014c

0800bfd4 <__libc_init_array>:
 800bfd4:	b570      	push	{r4, r5, r6, lr}
 800bfd6:	4d0d      	ldr	r5, [pc, #52]	; (800c00c <__libc_init_array+0x38>)
 800bfd8:	4c0d      	ldr	r4, [pc, #52]	; (800c010 <__libc_init_array+0x3c>)
 800bfda:	1b64      	subs	r4, r4, r5
 800bfdc:	10a4      	asrs	r4, r4, #2
 800bfde:	2600      	movs	r6, #0
 800bfe0:	42a6      	cmp	r6, r4
 800bfe2:	d109      	bne.n	800bff8 <__libc_init_array+0x24>
 800bfe4:	4d0b      	ldr	r5, [pc, #44]	; (800c014 <__libc_init_array+0x40>)
 800bfe6:	4c0c      	ldr	r4, [pc, #48]	; (800c018 <__libc_init_array+0x44>)
 800bfe8:	f000 f880 	bl	800c0ec <_init>
 800bfec:	1b64      	subs	r4, r4, r5
 800bfee:	10a4      	asrs	r4, r4, #2
 800bff0:	2600      	movs	r6, #0
 800bff2:	42a6      	cmp	r6, r4
 800bff4:	d105      	bne.n	800c002 <__libc_init_array+0x2e>
 800bff6:	bd70      	pop	{r4, r5, r6, pc}
 800bff8:	f855 3b04 	ldr.w	r3, [r5], #4
 800bffc:	4798      	blx	r3
 800bffe:	3601      	adds	r6, #1
 800c000:	e7ee      	b.n	800bfe0 <__libc_init_array+0xc>
 800c002:	f855 3b04 	ldr.w	r3, [r5], #4
 800c006:	4798      	blx	r3
 800c008:	3601      	adds	r6, #1
 800c00a:	e7f2      	b.n	800bff2 <__libc_init_array+0x1e>
 800c00c:	0800c23c 	.word	0x0800c23c
 800c010:	0800c23c 	.word	0x0800c23c
 800c014:	0800c23c 	.word	0x0800c23c
 800c018:	0800c240 	.word	0x0800c240

0800c01c <__retarget_lock_acquire_recursive>:
 800c01c:	4770      	bx	lr

0800c01e <__retarget_lock_release_recursive>:
 800c01e:	4770      	bx	lr

0800c020 <memcpy>:
 800c020:	440a      	add	r2, r1
 800c022:	4291      	cmp	r1, r2
 800c024:	f100 33ff 	add.w	r3, r0, #4294967295
 800c028:	d100      	bne.n	800c02c <memcpy+0xc>
 800c02a:	4770      	bx	lr
 800c02c:	b510      	push	{r4, lr}
 800c02e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c032:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c036:	4291      	cmp	r1, r2
 800c038:	d1f9      	bne.n	800c02e <memcpy+0xe>
 800c03a:	bd10      	pop	{r4, pc}

0800c03c <_free_r>:
 800c03c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c03e:	2900      	cmp	r1, #0
 800c040:	d044      	beq.n	800c0cc <_free_r+0x90>
 800c042:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c046:	9001      	str	r0, [sp, #4]
 800c048:	2b00      	cmp	r3, #0
 800c04a:	f1a1 0404 	sub.w	r4, r1, #4
 800c04e:	bfb8      	it	lt
 800c050:	18e4      	addlt	r4, r4, r3
 800c052:	f000 f83f 	bl	800c0d4 <__malloc_lock>
 800c056:	4a1e      	ldr	r2, [pc, #120]	; (800c0d0 <_free_r+0x94>)
 800c058:	9801      	ldr	r0, [sp, #4]
 800c05a:	6813      	ldr	r3, [r2, #0]
 800c05c:	b933      	cbnz	r3, 800c06c <_free_r+0x30>
 800c05e:	6063      	str	r3, [r4, #4]
 800c060:	6014      	str	r4, [r2, #0]
 800c062:	b003      	add	sp, #12
 800c064:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c068:	f000 b83a 	b.w	800c0e0 <__malloc_unlock>
 800c06c:	42a3      	cmp	r3, r4
 800c06e:	d908      	bls.n	800c082 <_free_r+0x46>
 800c070:	6825      	ldr	r5, [r4, #0]
 800c072:	1961      	adds	r1, r4, r5
 800c074:	428b      	cmp	r3, r1
 800c076:	bf01      	itttt	eq
 800c078:	6819      	ldreq	r1, [r3, #0]
 800c07a:	685b      	ldreq	r3, [r3, #4]
 800c07c:	1949      	addeq	r1, r1, r5
 800c07e:	6021      	streq	r1, [r4, #0]
 800c080:	e7ed      	b.n	800c05e <_free_r+0x22>
 800c082:	461a      	mov	r2, r3
 800c084:	685b      	ldr	r3, [r3, #4]
 800c086:	b10b      	cbz	r3, 800c08c <_free_r+0x50>
 800c088:	42a3      	cmp	r3, r4
 800c08a:	d9fa      	bls.n	800c082 <_free_r+0x46>
 800c08c:	6811      	ldr	r1, [r2, #0]
 800c08e:	1855      	adds	r5, r2, r1
 800c090:	42a5      	cmp	r5, r4
 800c092:	d10b      	bne.n	800c0ac <_free_r+0x70>
 800c094:	6824      	ldr	r4, [r4, #0]
 800c096:	4421      	add	r1, r4
 800c098:	1854      	adds	r4, r2, r1
 800c09a:	42a3      	cmp	r3, r4
 800c09c:	6011      	str	r1, [r2, #0]
 800c09e:	d1e0      	bne.n	800c062 <_free_r+0x26>
 800c0a0:	681c      	ldr	r4, [r3, #0]
 800c0a2:	685b      	ldr	r3, [r3, #4]
 800c0a4:	6053      	str	r3, [r2, #4]
 800c0a6:	440c      	add	r4, r1
 800c0a8:	6014      	str	r4, [r2, #0]
 800c0aa:	e7da      	b.n	800c062 <_free_r+0x26>
 800c0ac:	d902      	bls.n	800c0b4 <_free_r+0x78>
 800c0ae:	230c      	movs	r3, #12
 800c0b0:	6003      	str	r3, [r0, #0]
 800c0b2:	e7d6      	b.n	800c062 <_free_r+0x26>
 800c0b4:	6825      	ldr	r5, [r4, #0]
 800c0b6:	1961      	adds	r1, r4, r5
 800c0b8:	428b      	cmp	r3, r1
 800c0ba:	bf04      	itt	eq
 800c0bc:	6819      	ldreq	r1, [r3, #0]
 800c0be:	685b      	ldreq	r3, [r3, #4]
 800c0c0:	6063      	str	r3, [r4, #4]
 800c0c2:	bf04      	itt	eq
 800c0c4:	1949      	addeq	r1, r1, r5
 800c0c6:	6021      	streq	r1, [r4, #0]
 800c0c8:	6054      	str	r4, [r2, #4]
 800c0ca:	e7ca      	b.n	800c062 <_free_r+0x26>
 800c0cc:	b003      	add	sp, #12
 800c0ce:	bd30      	pop	{r4, r5, pc}
 800c0d0:	200069a0 	.word	0x200069a0

0800c0d4 <__malloc_lock>:
 800c0d4:	4801      	ldr	r0, [pc, #4]	; (800c0dc <__malloc_lock+0x8>)
 800c0d6:	f7ff bfa1 	b.w	800c01c <__retarget_lock_acquire_recursive>
 800c0da:	bf00      	nop
 800c0dc:	2000699c 	.word	0x2000699c

0800c0e0 <__malloc_unlock>:
 800c0e0:	4801      	ldr	r0, [pc, #4]	; (800c0e8 <__malloc_unlock+0x8>)
 800c0e2:	f7ff bf9c 	b.w	800c01e <__retarget_lock_release_recursive>
 800c0e6:	bf00      	nop
 800c0e8:	2000699c 	.word	0x2000699c

0800c0ec <_init>:
 800c0ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0ee:	bf00      	nop
 800c0f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c0f2:	bc08      	pop	{r3}
 800c0f4:	469e      	mov	lr, r3
 800c0f6:	4770      	bx	lr

0800c0f8 <_fini>:
 800c0f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0fa:	bf00      	nop
 800c0fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c0fe:	bc08      	pop	{r3}
 800c100:	469e      	mov	lr, r3
 800c102:	4770      	bx	lr
