
freeRTOS Projektna.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e3dc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  0800e57c  0800e57c  0001e57c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e694  0800e694  00020150  2**0
                  CONTENTS
  4 .ARM          00000008  0800e694  0800e694  0001e694  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e69c  0800e69c  00020150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e69c  0800e69c  0001e69c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e6a0  0800e6a0  0001e6a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000150  20000000  0800e6a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006d08  20000150  0800e7f4  00020150  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20006e58  0800e7f4  00026e58  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020150  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 13 .debug_info   00028271  00000000  00000000  000201c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000059b4  00000000  00000000  00048434  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002188  00000000  00000000  0004dde8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001a06  00000000  00000000  0004ff70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d211  00000000  00000000  00051976  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002994c  00000000  00000000  0006eb87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a1f02  00000000  00000000  000984d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00009230  00000000  00000000  0013a3d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  00143608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000150 	.word	0x20000150
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800e564 	.word	0x0800e564

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000154 	.word	0x20000154
 80001dc:	0800e564 	.word	0x0800e564

080001e0 <__aeabi_dmul>:
 80001e0:	b570      	push	{r4, r5, r6, lr}
 80001e2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001e6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001ea:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001ee:	bf1d      	ittte	ne
 80001f0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001f4:	ea94 0f0c 	teqne	r4, ip
 80001f8:	ea95 0f0c 	teqne	r5, ip
 80001fc:	f000 f8de 	bleq	80003bc <__aeabi_dmul+0x1dc>
 8000200:	442c      	add	r4, r5
 8000202:	ea81 0603 	eor.w	r6, r1, r3
 8000206:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800020a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800020e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000212:	bf18      	it	ne
 8000214:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000218:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800021c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000220:	d038      	beq.n	8000294 <__aeabi_dmul+0xb4>
 8000222:	fba0 ce02 	umull	ip, lr, r0, r2
 8000226:	f04f 0500 	mov.w	r5, #0
 800022a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800022e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000232:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000236:	f04f 0600 	mov.w	r6, #0
 800023a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800023e:	f09c 0f00 	teq	ip, #0
 8000242:	bf18      	it	ne
 8000244:	f04e 0e01 	orrne.w	lr, lr, #1
 8000248:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800024c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000250:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000254:	d204      	bcs.n	8000260 <__aeabi_dmul+0x80>
 8000256:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800025a:	416d      	adcs	r5, r5
 800025c:	eb46 0606 	adc.w	r6, r6, r6
 8000260:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000264:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000268:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800026c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000270:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000274:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000278:	bf88      	it	hi
 800027a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800027e:	d81e      	bhi.n	80002be <__aeabi_dmul+0xde>
 8000280:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000284:	bf08      	it	eq
 8000286:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800028a:	f150 0000 	adcs.w	r0, r0, #0
 800028e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000292:	bd70      	pop	{r4, r5, r6, pc}
 8000294:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000298:	ea46 0101 	orr.w	r1, r6, r1
 800029c:	ea40 0002 	orr.w	r0, r0, r2
 80002a0:	ea81 0103 	eor.w	r1, r1, r3
 80002a4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002a8:	bfc2      	ittt	gt
 80002aa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002ae:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002b2:	bd70      	popgt	{r4, r5, r6, pc}
 80002b4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002b8:	f04f 0e00 	mov.w	lr, #0
 80002bc:	3c01      	subs	r4, #1
 80002be:	f300 80ab 	bgt.w	8000418 <__aeabi_dmul+0x238>
 80002c2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002c6:	bfde      	ittt	le
 80002c8:	2000      	movle	r0, #0
 80002ca:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002ce:	bd70      	pople	{r4, r5, r6, pc}
 80002d0:	f1c4 0400 	rsb	r4, r4, #0
 80002d4:	3c20      	subs	r4, #32
 80002d6:	da35      	bge.n	8000344 <__aeabi_dmul+0x164>
 80002d8:	340c      	adds	r4, #12
 80002da:	dc1b      	bgt.n	8000314 <__aeabi_dmul+0x134>
 80002dc:	f104 0414 	add.w	r4, r4, #20
 80002e0:	f1c4 0520 	rsb	r5, r4, #32
 80002e4:	fa00 f305 	lsl.w	r3, r0, r5
 80002e8:	fa20 f004 	lsr.w	r0, r0, r4
 80002ec:	fa01 f205 	lsl.w	r2, r1, r5
 80002f0:	ea40 0002 	orr.w	r0, r0, r2
 80002f4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002fc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000300:	fa21 f604 	lsr.w	r6, r1, r4
 8000304:	eb42 0106 	adc.w	r1, r2, r6
 8000308:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800030c:	bf08      	it	eq
 800030e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000312:	bd70      	pop	{r4, r5, r6, pc}
 8000314:	f1c4 040c 	rsb	r4, r4, #12
 8000318:	f1c4 0520 	rsb	r5, r4, #32
 800031c:	fa00 f304 	lsl.w	r3, r0, r4
 8000320:	fa20 f005 	lsr.w	r0, r0, r5
 8000324:	fa01 f204 	lsl.w	r2, r1, r4
 8000328:	ea40 0002 	orr.w	r0, r0, r2
 800032c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000330:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000334:	f141 0100 	adc.w	r1, r1, #0
 8000338:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800033c:	bf08      	it	eq
 800033e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000342:	bd70      	pop	{r4, r5, r6, pc}
 8000344:	f1c4 0520 	rsb	r5, r4, #32
 8000348:	fa00 f205 	lsl.w	r2, r0, r5
 800034c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000350:	fa20 f304 	lsr.w	r3, r0, r4
 8000354:	fa01 f205 	lsl.w	r2, r1, r5
 8000358:	ea43 0302 	orr.w	r3, r3, r2
 800035c:	fa21 f004 	lsr.w	r0, r1, r4
 8000360:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000364:	fa21 f204 	lsr.w	r2, r1, r4
 8000368:	ea20 0002 	bic.w	r0, r0, r2
 800036c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000370:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000374:	bf08      	it	eq
 8000376:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800037a:	bd70      	pop	{r4, r5, r6, pc}
 800037c:	f094 0f00 	teq	r4, #0
 8000380:	d10f      	bne.n	80003a2 <__aeabi_dmul+0x1c2>
 8000382:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000386:	0040      	lsls	r0, r0, #1
 8000388:	eb41 0101 	adc.w	r1, r1, r1
 800038c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000390:	bf08      	it	eq
 8000392:	3c01      	subeq	r4, #1
 8000394:	d0f7      	beq.n	8000386 <__aeabi_dmul+0x1a6>
 8000396:	ea41 0106 	orr.w	r1, r1, r6
 800039a:	f095 0f00 	teq	r5, #0
 800039e:	bf18      	it	ne
 80003a0:	4770      	bxne	lr
 80003a2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003a6:	0052      	lsls	r2, r2, #1
 80003a8:	eb43 0303 	adc.w	r3, r3, r3
 80003ac:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003b0:	bf08      	it	eq
 80003b2:	3d01      	subeq	r5, #1
 80003b4:	d0f7      	beq.n	80003a6 <__aeabi_dmul+0x1c6>
 80003b6:	ea43 0306 	orr.w	r3, r3, r6
 80003ba:	4770      	bx	lr
 80003bc:	ea94 0f0c 	teq	r4, ip
 80003c0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003c4:	bf18      	it	ne
 80003c6:	ea95 0f0c 	teqne	r5, ip
 80003ca:	d00c      	beq.n	80003e6 <__aeabi_dmul+0x206>
 80003cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d0:	bf18      	it	ne
 80003d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003d6:	d1d1      	bne.n	800037c <__aeabi_dmul+0x19c>
 80003d8:	ea81 0103 	eor.w	r1, r1, r3
 80003dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003e0:	f04f 0000 	mov.w	r0, #0
 80003e4:	bd70      	pop	{r4, r5, r6, pc}
 80003e6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003ea:	bf06      	itte	eq
 80003ec:	4610      	moveq	r0, r2
 80003ee:	4619      	moveq	r1, r3
 80003f0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003f4:	d019      	beq.n	800042a <__aeabi_dmul+0x24a>
 80003f6:	ea94 0f0c 	teq	r4, ip
 80003fa:	d102      	bne.n	8000402 <__aeabi_dmul+0x222>
 80003fc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000400:	d113      	bne.n	800042a <__aeabi_dmul+0x24a>
 8000402:	ea95 0f0c 	teq	r5, ip
 8000406:	d105      	bne.n	8000414 <__aeabi_dmul+0x234>
 8000408:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800040c:	bf1c      	itt	ne
 800040e:	4610      	movne	r0, r2
 8000410:	4619      	movne	r1, r3
 8000412:	d10a      	bne.n	800042a <__aeabi_dmul+0x24a>
 8000414:	ea81 0103 	eor.w	r1, r1, r3
 8000418:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800041c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd70      	pop	{r4, r5, r6, pc}
 800042a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800042e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000432:	bd70      	pop	{r4, r5, r6, pc}

08000434 <__aeabi_drsub>:
 8000434:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000438:	e002      	b.n	8000440 <__adddf3>
 800043a:	bf00      	nop

0800043c <__aeabi_dsub>:
 800043c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000440 <__adddf3>:
 8000440:	b530      	push	{r4, r5, lr}
 8000442:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000446:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800044a:	ea94 0f05 	teq	r4, r5
 800044e:	bf08      	it	eq
 8000450:	ea90 0f02 	teqeq	r0, r2
 8000454:	bf1f      	itttt	ne
 8000456:	ea54 0c00 	orrsne.w	ip, r4, r0
 800045a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800045e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000462:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000466:	f000 80e2 	beq.w	800062e <__adddf3+0x1ee>
 800046a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800046e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000472:	bfb8      	it	lt
 8000474:	426d      	neglt	r5, r5
 8000476:	dd0c      	ble.n	8000492 <__adddf3+0x52>
 8000478:	442c      	add	r4, r5
 800047a:	ea80 0202 	eor.w	r2, r0, r2
 800047e:	ea81 0303 	eor.w	r3, r1, r3
 8000482:	ea82 0000 	eor.w	r0, r2, r0
 8000486:	ea83 0101 	eor.w	r1, r3, r1
 800048a:	ea80 0202 	eor.w	r2, r0, r2
 800048e:	ea81 0303 	eor.w	r3, r1, r3
 8000492:	2d36      	cmp	r5, #54	; 0x36
 8000494:	bf88      	it	hi
 8000496:	bd30      	pophi	{r4, r5, pc}
 8000498:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800049c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004a0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004a4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004a8:	d002      	beq.n	80004b0 <__adddf3+0x70>
 80004aa:	4240      	negs	r0, r0
 80004ac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004b0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004b4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004b8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004bc:	d002      	beq.n	80004c4 <__adddf3+0x84>
 80004be:	4252      	negs	r2, r2
 80004c0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004c4:	ea94 0f05 	teq	r4, r5
 80004c8:	f000 80a7 	beq.w	800061a <__adddf3+0x1da>
 80004cc:	f1a4 0401 	sub.w	r4, r4, #1
 80004d0:	f1d5 0e20 	rsbs	lr, r5, #32
 80004d4:	db0d      	blt.n	80004f2 <__adddf3+0xb2>
 80004d6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004da:	fa22 f205 	lsr.w	r2, r2, r5
 80004de:	1880      	adds	r0, r0, r2
 80004e0:	f141 0100 	adc.w	r1, r1, #0
 80004e4:	fa03 f20e 	lsl.w	r2, r3, lr
 80004e8:	1880      	adds	r0, r0, r2
 80004ea:	fa43 f305 	asr.w	r3, r3, r5
 80004ee:	4159      	adcs	r1, r3
 80004f0:	e00e      	b.n	8000510 <__adddf3+0xd0>
 80004f2:	f1a5 0520 	sub.w	r5, r5, #32
 80004f6:	f10e 0e20 	add.w	lr, lr, #32
 80004fa:	2a01      	cmp	r2, #1
 80004fc:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000500:	bf28      	it	cs
 8000502:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000506:	fa43 f305 	asr.w	r3, r3, r5
 800050a:	18c0      	adds	r0, r0, r3
 800050c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000514:	d507      	bpl.n	8000526 <__adddf3+0xe6>
 8000516:	f04f 0e00 	mov.w	lr, #0
 800051a:	f1dc 0c00 	rsbs	ip, ip, #0
 800051e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000522:	eb6e 0101 	sbc.w	r1, lr, r1
 8000526:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800052a:	d31b      	bcc.n	8000564 <__adddf3+0x124>
 800052c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000530:	d30c      	bcc.n	800054c <__adddf3+0x10c>
 8000532:	0849      	lsrs	r1, r1, #1
 8000534:	ea5f 0030 	movs.w	r0, r0, rrx
 8000538:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800053c:	f104 0401 	add.w	r4, r4, #1
 8000540:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000544:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000548:	f080 809a 	bcs.w	8000680 <__adddf3+0x240>
 800054c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000550:	bf08      	it	eq
 8000552:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000556:	f150 0000 	adcs.w	r0, r0, #0
 800055a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800055e:	ea41 0105 	orr.w	r1, r1, r5
 8000562:	bd30      	pop	{r4, r5, pc}
 8000564:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000568:	4140      	adcs	r0, r0
 800056a:	eb41 0101 	adc.w	r1, r1, r1
 800056e:	3c01      	subs	r4, #1
 8000570:	bf28      	it	cs
 8000572:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000576:	d2e9      	bcs.n	800054c <__adddf3+0x10c>
 8000578:	f091 0f00 	teq	r1, #0
 800057c:	bf04      	itt	eq
 800057e:	4601      	moveq	r1, r0
 8000580:	2000      	moveq	r0, #0
 8000582:	fab1 f381 	clz	r3, r1
 8000586:	bf08      	it	eq
 8000588:	3320      	addeq	r3, #32
 800058a:	f1a3 030b 	sub.w	r3, r3, #11
 800058e:	f1b3 0220 	subs.w	r2, r3, #32
 8000592:	da0c      	bge.n	80005ae <__adddf3+0x16e>
 8000594:	320c      	adds	r2, #12
 8000596:	dd08      	ble.n	80005aa <__adddf3+0x16a>
 8000598:	f102 0c14 	add.w	ip, r2, #20
 800059c:	f1c2 020c 	rsb	r2, r2, #12
 80005a0:	fa01 f00c 	lsl.w	r0, r1, ip
 80005a4:	fa21 f102 	lsr.w	r1, r1, r2
 80005a8:	e00c      	b.n	80005c4 <__adddf3+0x184>
 80005aa:	f102 0214 	add.w	r2, r2, #20
 80005ae:	bfd8      	it	le
 80005b0:	f1c2 0c20 	rsble	ip, r2, #32
 80005b4:	fa01 f102 	lsl.w	r1, r1, r2
 80005b8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005bc:	bfdc      	itt	le
 80005be:	ea41 010c 	orrle.w	r1, r1, ip
 80005c2:	4090      	lslle	r0, r2
 80005c4:	1ae4      	subs	r4, r4, r3
 80005c6:	bfa2      	ittt	ge
 80005c8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005cc:	4329      	orrge	r1, r5
 80005ce:	bd30      	popge	{r4, r5, pc}
 80005d0:	ea6f 0404 	mvn.w	r4, r4
 80005d4:	3c1f      	subs	r4, #31
 80005d6:	da1c      	bge.n	8000612 <__adddf3+0x1d2>
 80005d8:	340c      	adds	r4, #12
 80005da:	dc0e      	bgt.n	80005fa <__adddf3+0x1ba>
 80005dc:	f104 0414 	add.w	r4, r4, #20
 80005e0:	f1c4 0220 	rsb	r2, r4, #32
 80005e4:	fa20 f004 	lsr.w	r0, r0, r4
 80005e8:	fa01 f302 	lsl.w	r3, r1, r2
 80005ec:	ea40 0003 	orr.w	r0, r0, r3
 80005f0:	fa21 f304 	lsr.w	r3, r1, r4
 80005f4:	ea45 0103 	orr.w	r1, r5, r3
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	f1c4 040c 	rsb	r4, r4, #12
 80005fe:	f1c4 0220 	rsb	r2, r4, #32
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 f304 	lsl.w	r3, r1, r4
 800060a:	ea40 0003 	orr.w	r0, r0, r3
 800060e:	4629      	mov	r1, r5
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	fa21 f004 	lsr.w	r0, r1, r4
 8000616:	4629      	mov	r1, r5
 8000618:	bd30      	pop	{r4, r5, pc}
 800061a:	f094 0f00 	teq	r4, #0
 800061e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000622:	bf06      	itte	eq
 8000624:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000628:	3401      	addeq	r4, #1
 800062a:	3d01      	subne	r5, #1
 800062c:	e74e      	b.n	80004cc <__adddf3+0x8c>
 800062e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000632:	bf18      	it	ne
 8000634:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000638:	d029      	beq.n	800068e <__adddf3+0x24e>
 800063a:	ea94 0f05 	teq	r4, r5
 800063e:	bf08      	it	eq
 8000640:	ea90 0f02 	teqeq	r0, r2
 8000644:	d005      	beq.n	8000652 <__adddf3+0x212>
 8000646:	ea54 0c00 	orrs.w	ip, r4, r0
 800064a:	bf04      	itt	eq
 800064c:	4619      	moveq	r1, r3
 800064e:	4610      	moveq	r0, r2
 8000650:	bd30      	pop	{r4, r5, pc}
 8000652:	ea91 0f03 	teq	r1, r3
 8000656:	bf1e      	ittt	ne
 8000658:	2100      	movne	r1, #0
 800065a:	2000      	movne	r0, #0
 800065c:	bd30      	popne	{r4, r5, pc}
 800065e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000662:	d105      	bne.n	8000670 <__adddf3+0x230>
 8000664:	0040      	lsls	r0, r0, #1
 8000666:	4149      	adcs	r1, r1
 8000668:	bf28      	it	cs
 800066a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd30      	pop	{r4, r5, pc}
 8000670:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000674:	bf3c      	itt	cc
 8000676:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800067a:	bd30      	popcc	{r4, r5, pc}
 800067c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000680:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000684:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000688:	f04f 0000 	mov.w	r0, #0
 800068c:	bd30      	pop	{r4, r5, pc}
 800068e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000692:	bf1a      	itte	ne
 8000694:	4619      	movne	r1, r3
 8000696:	4610      	movne	r0, r2
 8000698:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800069c:	bf1c      	itt	ne
 800069e:	460b      	movne	r3, r1
 80006a0:	4602      	movne	r2, r0
 80006a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006a6:	bf06      	itte	eq
 80006a8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006ac:	ea91 0f03 	teqeq	r1, r3
 80006b0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006b4:	bd30      	pop	{r4, r5, pc}
 80006b6:	bf00      	nop

080006b8 <__aeabi_ui2d>:
 80006b8:	f090 0f00 	teq	r0, #0
 80006bc:	bf04      	itt	eq
 80006be:	2100      	moveq	r1, #0
 80006c0:	4770      	bxeq	lr
 80006c2:	b530      	push	{r4, r5, lr}
 80006c4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006cc:	f04f 0500 	mov.w	r5, #0
 80006d0:	f04f 0100 	mov.w	r1, #0
 80006d4:	e750      	b.n	8000578 <__adddf3+0x138>
 80006d6:	bf00      	nop

080006d8 <__aeabi_i2d>:
 80006d8:	f090 0f00 	teq	r0, #0
 80006dc:	bf04      	itt	eq
 80006de:	2100      	moveq	r1, #0
 80006e0:	4770      	bxeq	lr
 80006e2:	b530      	push	{r4, r5, lr}
 80006e4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006e8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ec:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006f0:	bf48      	it	mi
 80006f2:	4240      	negmi	r0, r0
 80006f4:	f04f 0100 	mov.w	r1, #0
 80006f8:	e73e      	b.n	8000578 <__adddf3+0x138>
 80006fa:	bf00      	nop

080006fc <__aeabi_f2d>:
 80006fc:	0042      	lsls	r2, r0, #1
 80006fe:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000702:	ea4f 0131 	mov.w	r1, r1, rrx
 8000706:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800070a:	bf1f      	itttt	ne
 800070c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000710:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000714:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000718:	4770      	bxne	lr
 800071a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800071e:	bf08      	it	eq
 8000720:	4770      	bxeq	lr
 8000722:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000726:	bf04      	itt	eq
 8000728:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800072c:	4770      	bxeq	lr
 800072e:	b530      	push	{r4, r5, lr}
 8000730:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000734:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000738:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800073c:	e71c      	b.n	8000578 <__adddf3+0x138>
 800073e:	bf00      	nop

08000740 <__aeabi_ul2d>:
 8000740:	ea50 0201 	orrs.w	r2, r0, r1
 8000744:	bf08      	it	eq
 8000746:	4770      	bxeq	lr
 8000748:	b530      	push	{r4, r5, lr}
 800074a:	f04f 0500 	mov.w	r5, #0
 800074e:	e00a      	b.n	8000766 <__aeabi_l2d+0x16>

08000750 <__aeabi_l2d>:
 8000750:	ea50 0201 	orrs.w	r2, r0, r1
 8000754:	bf08      	it	eq
 8000756:	4770      	bxeq	lr
 8000758:	b530      	push	{r4, r5, lr}
 800075a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800075e:	d502      	bpl.n	8000766 <__aeabi_l2d+0x16>
 8000760:	4240      	negs	r0, r0
 8000762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000766:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800076a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800076e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000772:	f43f aed8 	beq.w	8000526 <__adddf3+0xe6>
 8000776:	f04f 0203 	mov.w	r2, #3
 800077a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800077e:	bf18      	it	ne
 8000780:	3203      	addne	r2, #3
 8000782:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000786:	bf18      	it	ne
 8000788:	3203      	addne	r2, #3
 800078a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800078e:	f1c2 0320 	rsb	r3, r2, #32
 8000792:	fa00 fc03 	lsl.w	ip, r0, r3
 8000796:	fa20 f002 	lsr.w	r0, r0, r2
 800079a:	fa01 fe03 	lsl.w	lr, r1, r3
 800079e:	ea40 000e 	orr.w	r0, r0, lr
 80007a2:	fa21 f102 	lsr.w	r1, r1, r2
 80007a6:	4414      	add	r4, r2
 80007a8:	e6bd      	b.n	8000526 <__adddf3+0xe6>
 80007aa:	bf00      	nop

080007ac <__aeabi_d2f>:
 80007ac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007b0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80007b4:	bf24      	itt	cs
 80007b6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80007ba:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80007be:	d90d      	bls.n	80007dc <__aeabi_d2f+0x30>
 80007c0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80007c4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80007c8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80007cc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80007d0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80007d4:	bf08      	it	eq
 80007d6:	f020 0001 	biceq.w	r0, r0, #1
 80007da:	4770      	bx	lr
 80007dc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80007e0:	d121      	bne.n	8000826 <__aeabi_d2f+0x7a>
 80007e2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80007e6:	bfbc      	itt	lt
 80007e8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80007ec:	4770      	bxlt	lr
 80007ee:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007f2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80007f6:	f1c2 0218 	rsb	r2, r2, #24
 80007fa:	f1c2 0c20 	rsb	ip, r2, #32
 80007fe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000802:	fa20 f002 	lsr.w	r0, r0, r2
 8000806:	bf18      	it	ne
 8000808:	f040 0001 	orrne.w	r0, r0, #1
 800080c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000810:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000814:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000818:	ea40 000c 	orr.w	r0, r0, ip
 800081c:	fa23 f302 	lsr.w	r3, r3, r2
 8000820:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000824:	e7cc      	b.n	80007c0 <__aeabi_d2f+0x14>
 8000826:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800082a:	d107      	bne.n	800083c <__aeabi_d2f+0x90>
 800082c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000830:	bf1e      	ittt	ne
 8000832:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000836:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800083a:	4770      	bxne	lr
 800083c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000840:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000844:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000848:	4770      	bx	lr
 800084a:	bf00      	nop

0800084c <__aeabi_uldivmod>:
 800084c:	b953      	cbnz	r3, 8000864 <__aeabi_uldivmod+0x18>
 800084e:	b94a      	cbnz	r2, 8000864 <__aeabi_uldivmod+0x18>
 8000850:	2900      	cmp	r1, #0
 8000852:	bf08      	it	eq
 8000854:	2800      	cmpeq	r0, #0
 8000856:	bf1c      	itt	ne
 8000858:	f04f 31ff 	movne.w	r1, #4294967295
 800085c:	f04f 30ff 	movne.w	r0, #4294967295
 8000860:	f000 b970 	b.w	8000b44 <__aeabi_idiv0>
 8000864:	f1ad 0c08 	sub.w	ip, sp, #8
 8000868:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800086c:	f000 f806 	bl	800087c <__udivmoddi4>
 8000870:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000874:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000878:	b004      	add	sp, #16
 800087a:	4770      	bx	lr

0800087c <__udivmoddi4>:
 800087c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000880:	9e08      	ldr	r6, [sp, #32]
 8000882:	460d      	mov	r5, r1
 8000884:	4604      	mov	r4, r0
 8000886:	460f      	mov	r7, r1
 8000888:	2b00      	cmp	r3, #0
 800088a:	d14a      	bne.n	8000922 <__udivmoddi4+0xa6>
 800088c:	428a      	cmp	r2, r1
 800088e:	4694      	mov	ip, r2
 8000890:	d965      	bls.n	800095e <__udivmoddi4+0xe2>
 8000892:	fab2 f382 	clz	r3, r2
 8000896:	b143      	cbz	r3, 80008aa <__udivmoddi4+0x2e>
 8000898:	fa02 fc03 	lsl.w	ip, r2, r3
 800089c:	f1c3 0220 	rsb	r2, r3, #32
 80008a0:	409f      	lsls	r7, r3
 80008a2:	fa20 f202 	lsr.w	r2, r0, r2
 80008a6:	4317      	orrs	r7, r2
 80008a8:	409c      	lsls	r4, r3
 80008aa:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80008ae:	fa1f f58c 	uxth.w	r5, ip
 80008b2:	fbb7 f1fe 	udiv	r1, r7, lr
 80008b6:	0c22      	lsrs	r2, r4, #16
 80008b8:	fb0e 7711 	mls	r7, lr, r1, r7
 80008bc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80008c0:	fb01 f005 	mul.w	r0, r1, r5
 80008c4:	4290      	cmp	r0, r2
 80008c6:	d90a      	bls.n	80008de <__udivmoddi4+0x62>
 80008c8:	eb1c 0202 	adds.w	r2, ip, r2
 80008cc:	f101 37ff 	add.w	r7, r1, #4294967295
 80008d0:	f080 811c 	bcs.w	8000b0c <__udivmoddi4+0x290>
 80008d4:	4290      	cmp	r0, r2
 80008d6:	f240 8119 	bls.w	8000b0c <__udivmoddi4+0x290>
 80008da:	3902      	subs	r1, #2
 80008dc:	4462      	add	r2, ip
 80008de:	1a12      	subs	r2, r2, r0
 80008e0:	b2a4      	uxth	r4, r4
 80008e2:	fbb2 f0fe 	udiv	r0, r2, lr
 80008e6:	fb0e 2210 	mls	r2, lr, r0, r2
 80008ea:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80008ee:	fb00 f505 	mul.w	r5, r0, r5
 80008f2:	42a5      	cmp	r5, r4
 80008f4:	d90a      	bls.n	800090c <__udivmoddi4+0x90>
 80008f6:	eb1c 0404 	adds.w	r4, ip, r4
 80008fa:	f100 32ff 	add.w	r2, r0, #4294967295
 80008fe:	f080 8107 	bcs.w	8000b10 <__udivmoddi4+0x294>
 8000902:	42a5      	cmp	r5, r4
 8000904:	f240 8104 	bls.w	8000b10 <__udivmoddi4+0x294>
 8000908:	4464      	add	r4, ip
 800090a:	3802      	subs	r0, #2
 800090c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000910:	1b64      	subs	r4, r4, r5
 8000912:	2100      	movs	r1, #0
 8000914:	b11e      	cbz	r6, 800091e <__udivmoddi4+0xa2>
 8000916:	40dc      	lsrs	r4, r3
 8000918:	2300      	movs	r3, #0
 800091a:	e9c6 4300 	strd	r4, r3, [r6]
 800091e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000922:	428b      	cmp	r3, r1
 8000924:	d908      	bls.n	8000938 <__udivmoddi4+0xbc>
 8000926:	2e00      	cmp	r6, #0
 8000928:	f000 80ed 	beq.w	8000b06 <__udivmoddi4+0x28a>
 800092c:	2100      	movs	r1, #0
 800092e:	e9c6 0500 	strd	r0, r5, [r6]
 8000932:	4608      	mov	r0, r1
 8000934:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000938:	fab3 f183 	clz	r1, r3
 800093c:	2900      	cmp	r1, #0
 800093e:	d149      	bne.n	80009d4 <__udivmoddi4+0x158>
 8000940:	42ab      	cmp	r3, r5
 8000942:	d302      	bcc.n	800094a <__udivmoddi4+0xce>
 8000944:	4282      	cmp	r2, r0
 8000946:	f200 80f8 	bhi.w	8000b3a <__udivmoddi4+0x2be>
 800094a:	1a84      	subs	r4, r0, r2
 800094c:	eb65 0203 	sbc.w	r2, r5, r3
 8000950:	2001      	movs	r0, #1
 8000952:	4617      	mov	r7, r2
 8000954:	2e00      	cmp	r6, #0
 8000956:	d0e2      	beq.n	800091e <__udivmoddi4+0xa2>
 8000958:	e9c6 4700 	strd	r4, r7, [r6]
 800095c:	e7df      	b.n	800091e <__udivmoddi4+0xa2>
 800095e:	b902      	cbnz	r2, 8000962 <__udivmoddi4+0xe6>
 8000960:	deff      	udf	#255	; 0xff
 8000962:	fab2 f382 	clz	r3, r2
 8000966:	2b00      	cmp	r3, #0
 8000968:	f040 8090 	bne.w	8000a8c <__udivmoddi4+0x210>
 800096c:	1a8a      	subs	r2, r1, r2
 800096e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000972:	fa1f fe8c 	uxth.w	lr, ip
 8000976:	2101      	movs	r1, #1
 8000978:	fbb2 f5f7 	udiv	r5, r2, r7
 800097c:	fb07 2015 	mls	r0, r7, r5, r2
 8000980:	0c22      	lsrs	r2, r4, #16
 8000982:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000986:	fb0e f005 	mul.w	r0, lr, r5
 800098a:	4290      	cmp	r0, r2
 800098c:	d908      	bls.n	80009a0 <__udivmoddi4+0x124>
 800098e:	eb1c 0202 	adds.w	r2, ip, r2
 8000992:	f105 38ff 	add.w	r8, r5, #4294967295
 8000996:	d202      	bcs.n	800099e <__udivmoddi4+0x122>
 8000998:	4290      	cmp	r0, r2
 800099a:	f200 80cb 	bhi.w	8000b34 <__udivmoddi4+0x2b8>
 800099e:	4645      	mov	r5, r8
 80009a0:	1a12      	subs	r2, r2, r0
 80009a2:	b2a4      	uxth	r4, r4
 80009a4:	fbb2 f0f7 	udiv	r0, r2, r7
 80009a8:	fb07 2210 	mls	r2, r7, r0, r2
 80009ac:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80009b0:	fb0e fe00 	mul.w	lr, lr, r0
 80009b4:	45a6      	cmp	lr, r4
 80009b6:	d908      	bls.n	80009ca <__udivmoddi4+0x14e>
 80009b8:	eb1c 0404 	adds.w	r4, ip, r4
 80009bc:	f100 32ff 	add.w	r2, r0, #4294967295
 80009c0:	d202      	bcs.n	80009c8 <__udivmoddi4+0x14c>
 80009c2:	45a6      	cmp	lr, r4
 80009c4:	f200 80bb 	bhi.w	8000b3e <__udivmoddi4+0x2c2>
 80009c8:	4610      	mov	r0, r2
 80009ca:	eba4 040e 	sub.w	r4, r4, lr
 80009ce:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80009d2:	e79f      	b.n	8000914 <__udivmoddi4+0x98>
 80009d4:	f1c1 0720 	rsb	r7, r1, #32
 80009d8:	408b      	lsls	r3, r1
 80009da:	fa22 fc07 	lsr.w	ip, r2, r7
 80009de:	ea4c 0c03 	orr.w	ip, ip, r3
 80009e2:	fa05 f401 	lsl.w	r4, r5, r1
 80009e6:	fa20 f307 	lsr.w	r3, r0, r7
 80009ea:	40fd      	lsrs	r5, r7
 80009ec:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80009f0:	4323      	orrs	r3, r4
 80009f2:	fbb5 f8f9 	udiv	r8, r5, r9
 80009f6:	fa1f fe8c 	uxth.w	lr, ip
 80009fa:	fb09 5518 	mls	r5, r9, r8, r5
 80009fe:	0c1c      	lsrs	r4, r3, #16
 8000a00:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000a04:	fb08 f50e 	mul.w	r5, r8, lr
 8000a08:	42a5      	cmp	r5, r4
 8000a0a:	fa02 f201 	lsl.w	r2, r2, r1
 8000a0e:	fa00 f001 	lsl.w	r0, r0, r1
 8000a12:	d90b      	bls.n	8000a2c <__udivmoddi4+0x1b0>
 8000a14:	eb1c 0404 	adds.w	r4, ip, r4
 8000a18:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a1c:	f080 8088 	bcs.w	8000b30 <__udivmoddi4+0x2b4>
 8000a20:	42a5      	cmp	r5, r4
 8000a22:	f240 8085 	bls.w	8000b30 <__udivmoddi4+0x2b4>
 8000a26:	f1a8 0802 	sub.w	r8, r8, #2
 8000a2a:	4464      	add	r4, ip
 8000a2c:	1b64      	subs	r4, r4, r5
 8000a2e:	b29d      	uxth	r5, r3
 8000a30:	fbb4 f3f9 	udiv	r3, r4, r9
 8000a34:	fb09 4413 	mls	r4, r9, r3, r4
 8000a38:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000a3c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000a40:	45a6      	cmp	lr, r4
 8000a42:	d908      	bls.n	8000a56 <__udivmoddi4+0x1da>
 8000a44:	eb1c 0404 	adds.w	r4, ip, r4
 8000a48:	f103 35ff 	add.w	r5, r3, #4294967295
 8000a4c:	d26c      	bcs.n	8000b28 <__udivmoddi4+0x2ac>
 8000a4e:	45a6      	cmp	lr, r4
 8000a50:	d96a      	bls.n	8000b28 <__udivmoddi4+0x2ac>
 8000a52:	3b02      	subs	r3, #2
 8000a54:	4464      	add	r4, ip
 8000a56:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a5a:	fba3 9502 	umull	r9, r5, r3, r2
 8000a5e:	eba4 040e 	sub.w	r4, r4, lr
 8000a62:	42ac      	cmp	r4, r5
 8000a64:	46c8      	mov	r8, r9
 8000a66:	46ae      	mov	lr, r5
 8000a68:	d356      	bcc.n	8000b18 <__udivmoddi4+0x29c>
 8000a6a:	d053      	beq.n	8000b14 <__udivmoddi4+0x298>
 8000a6c:	b156      	cbz	r6, 8000a84 <__udivmoddi4+0x208>
 8000a6e:	ebb0 0208 	subs.w	r2, r0, r8
 8000a72:	eb64 040e 	sbc.w	r4, r4, lr
 8000a76:	fa04 f707 	lsl.w	r7, r4, r7
 8000a7a:	40ca      	lsrs	r2, r1
 8000a7c:	40cc      	lsrs	r4, r1
 8000a7e:	4317      	orrs	r7, r2
 8000a80:	e9c6 7400 	strd	r7, r4, [r6]
 8000a84:	4618      	mov	r0, r3
 8000a86:	2100      	movs	r1, #0
 8000a88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a8c:	f1c3 0120 	rsb	r1, r3, #32
 8000a90:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a94:	fa20 f201 	lsr.w	r2, r0, r1
 8000a98:	fa25 f101 	lsr.w	r1, r5, r1
 8000a9c:	409d      	lsls	r5, r3
 8000a9e:	432a      	orrs	r2, r5
 8000aa0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000aa4:	fa1f fe8c 	uxth.w	lr, ip
 8000aa8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000aac:	fb07 1510 	mls	r5, r7, r0, r1
 8000ab0:	0c11      	lsrs	r1, r2, #16
 8000ab2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ab6:	fb00 f50e 	mul.w	r5, r0, lr
 8000aba:	428d      	cmp	r5, r1
 8000abc:	fa04 f403 	lsl.w	r4, r4, r3
 8000ac0:	d908      	bls.n	8000ad4 <__udivmoddi4+0x258>
 8000ac2:	eb1c 0101 	adds.w	r1, ip, r1
 8000ac6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000aca:	d22f      	bcs.n	8000b2c <__udivmoddi4+0x2b0>
 8000acc:	428d      	cmp	r5, r1
 8000ace:	d92d      	bls.n	8000b2c <__udivmoddi4+0x2b0>
 8000ad0:	3802      	subs	r0, #2
 8000ad2:	4461      	add	r1, ip
 8000ad4:	1b49      	subs	r1, r1, r5
 8000ad6:	b292      	uxth	r2, r2
 8000ad8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000adc:	fb07 1115 	mls	r1, r7, r5, r1
 8000ae0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ae4:	fb05 f10e 	mul.w	r1, r5, lr
 8000ae8:	4291      	cmp	r1, r2
 8000aea:	d908      	bls.n	8000afe <__udivmoddi4+0x282>
 8000aec:	eb1c 0202 	adds.w	r2, ip, r2
 8000af0:	f105 38ff 	add.w	r8, r5, #4294967295
 8000af4:	d216      	bcs.n	8000b24 <__udivmoddi4+0x2a8>
 8000af6:	4291      	cmp	r1, r2
 8000af8:	d914      	bls.n	8000b24 <__udivmoddi4+0x2a8>
 8000afa:	3d02      	subs	r5, #2
 8000afc:	4462      	add	r2, ip
 8000afe:	1a52      	subs	r2, r2, r1
 8000b00:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000b04:	e738      	b.n	8000978 <__udivmoddi4+0xfc>
 8000b06:	4631      	mov	r1, r6
 8000b08:	4630      	mov	r0, r6
 8000b0a:	e708      	b.n	800091e <__udivmoddi4+0xa2>
 8000b0c:	4639      	mov	r1, r7
 8000b0e:	e6e6      	b.n	80008de <__udivmoddi4+0x62>
 8000b10:	4610      	mov	r0, r2
 8000b12:	e6fb      	b.n	800090c <__udivmoddi4+0x90>
 8000b14:	4548      	cmp	r0, r9
 8000b16:	d2a9      	bcs.n	8000a6c <__udivmoddi4+0x1f0>
 8000b18:	ebb9 0802 	subs.w	r8, r9, r2
 8000b1c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000b20:	3b01      	subs	r3, #1
 8000b22:	e7a3      	b.n	8000a6c <__udivmoddi4+0x1f0>
 8000b24:	4645      	mov	r5, r8
 8000b26:	e7ea      	b.n	8000afe <__udivmoddi4+0x282>
 8000b28:	462b      	mov	r3, r5
 8000b2a:	e794      	b.n	8000a56 <__udivmoddi4+0x1da>
 8000b2c:	4640      	mov	r0, r8
 8000b2e:	e7d1      	b.n	8000ad4 <__udivmoddi4+0x258>
 8000b30:	46d0      	mov	r8, sl
 8000b32:	e77b      	b.n	8000a2c <__udivmoddi4+0x1b0>
 8000b34:	3d02      	subs	r5, #2
 8000b36:	4462      	add	r2, ip
 8000b38:	e732      	b.n	80009a0 <__udivmoddi4+0x124>
 8000b3a:	4608      	mov	r0, r1
 8000b3c:	e70a      	b.n	8000954 <__udivmoddi4+0xd8>
 8000b3e:	4464      	add	r4, ip
 8000b40:	3802      	subs	r0, #2
 8000b42:	e742      	b.n	80009ca <__udivmoddi4+0x14e>

08000b44 <__aeabi_idiv0>:
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop

08000b48 <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000b4c:	4b09      	ldr	r3, [pc, #36]	; (8000b74 <configureTimerForRunTimeStats+0x2c>)
 8000b4e:	68db      	ldr	r3, [r3, #12]
 8000b50:	4a08      	ldr	r2, [pc, #32]	; (8000b74 <configureTimerForRunTimeStats+0x2c>)
 8000b52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000b56:	60d3      	str	r3, [r2, #12]
	DWT->CTRL |= 1;
 8000b58:	4b07      	ldr	r3, [pc, #28]	; (8000b78 <configureTimerForRunTimeStats+0x30>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a06      	ldr	r2, [pc, #24]	; (8000b78 <configureTimerForRunTimeStats+0x30>)
 8000b5e:	f043 0301 	orr.w	r3, r3, #1
 8000b62:	6013      	str	r3, [r2, #0]
	DWT->CYCCNT = 0;
 8000b64:	4b04      	ldr	r3, [pc, #16]	; (8000b78 <configureTimerForRunTimeStats+0x30>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	605a      	str	r2, [r3, #4]
}
 8000b6a:	bf00      	nop
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr
 8000b74:	e000edf0 	.word	0xe000edf0
 8000b78:	e0001000 	.word	0xe0001000

08000b7c <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
return DWT->CYCCNT;
 8000b80:	4b03      	ldr	r3, [pc, #12]	; (8000b90 <getRunTimeCounterValue+0x14>)
 8000b82:	685b      	ldr	r3, [r3, #4]
}
 8000b84:	4618      	mov	r0, r3
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	e0001000 	.word	0xe0001000

08000b94 <spi1_beriRegister>:
void initAccel(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t spi1_beriRegister(uint8_t reg) {
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b086      	sub	sp, #24
 8000b98:	af02      	add	r7, sp, #8
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	71fb      	strb	r3, [r7, #7]
    uint16_t buf_out, buf_in;
    reg |= 0x80; // najpomembnejsi bit na 1
 8000b9e:	79fb      	ldrb	r3, [r7, #7]
 8000ba0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000ba4:	71fb      	strb	r3, [r7, #7]
    buf_out = reg; // little endian, se postavi na pravo mesto ....
 8000ba6:	79fb      	ldrb	r3, [r7, #7]
 8000ba8:	b29b      	uxth	r3, r3
 8000baa:	81fb      	strh	r3, [r7, #14]
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8000bac:	2200      	movs	r2, #0
 8000bae:	2108      	movs	r1, #8
 8000bb0:	480c      	ldr	r0, [pc, #48]	; (8000be4 <spi1_beriRegister+0x50>)
 8000bb2:	f001 facb 	bl	800214c <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&buf_out, (uint8_t*)&buf_in, 2, 2); // blocking posiljanje ....
 8000bb6:	f107 020c 	add.w	r2, r7, #12
 8000bba:	f107 010e 	add.w	r1, r7, #14
 8000bbe:	2302      	movs	r3, #2
 8000bc0:	9300      	str	r3, [sp, #0]
 8000bc2:	2302      	movs	r3, #2
 8000bc4:	4808      	ldr	r0, [pc, #32]	; (8000be8 <spi1_beriRegister+0x54>)
 8000bc6:	f004 fcb7 	bl	8005538 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 8000bca:	2201      	movs	r2, #1
 8000bcc:	2108      	movs	r1, #8
 8000bce:	4805      	ldr	r0, [pc, #20]	; (8000be4 <spi1_beriRegister+0x50>)
 8000bd0:	f001 fabc 	bl	800214c <HAL_GPIO_WritePin>
    return buf_in >> 8; // little endian...
 8000bd4:	89bb      	ldrh	r3, [r7, #12]
 8000bd6:	0a1b      	lsrs	r3, r3, #8
 8000bd8:	b29b      	uxth	r3, r3
 8000bda:	b2db      	uxtb	r3, r3
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	3710      	adds	r7, #16
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	40021000 	.word	0x40021000
 8000be8:	200001c0 	.word	0x200001c0

08000bec <spi1_pisiRegister>:
void spi1_pisiRegister(uint8_t reg, uint8_t vrednost) {
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b084      	sub	sp, #16
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	460a      	mov	r2, r1
 8000bf6:	71fb      	strb	r3, [r7, #7]
 8000bf8:	4613      	mov	r3, r2
 8000bfa:	71bb      	strb	r3, [r7, #6]
    uint16_t buf_out;
    buf_out = reg | (vrednost<<8); // little endian, se postavi na pravo mesto ....
 8000bfc:	79fb      	ldrb	r3, [r7, #7]
 8000bfe:	b21a      	sxth	r2, r3
 8000c00:	79bb      	ldrb	r3, [r7, #6]
 8000c02:	021b      	lsls	r3, r3, #8
 8000c04:	b21b      	sxth	r3, r3
 8000c06:	4313      	orrs	r3, r2
 8000c08:	b21b      	sxth	r3, r3
 8000c0a:	b29b      	uxth	r3, r3
 8000c0c:	81fb      	strh	r3, [r7, #14]
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8000c0e:	2200      	movs	r2, #0
 8000c10:	2108      	movs	r1, #8
 8000c12:	4809      	ldr	r0, [pc, #36]	; (8000c38 <spi1_pisiRegister+0x4c>)
 8000c14:	f001 fa9a 	bl	800214c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, (uint8_t*)&buf_out, 2, 2); // blocking posiljanje ....
 8000c18:	f107 010e 	add.w	r1, r7, #14
 8000c1c:	2302      	movs	r3, #2
 8000c1e:	2202      	movs	r2, #2
 8000c20:	4806      	ldr	r0, [pc, #24]	; (8000c3c <spi1_pisiRegister+0x50>)
 8000c22:	f004 fa3c 	bl	800509e <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 8000c26:	2201      	movs	r2, #1
 8000c28:	2108      	movs	r1, #8
 8000c2a:	4803      	ldr	r0, [pc, #12]	; (8000c38 <spi1_pisiRegister+0x4c>)
 8000c2c:	f001 fa8e 	bl	800214c <HAL_GPIO_WritePin>
}
 8000c30:	bf00      	nop
 8000c32:	3710      	adds	r7, #16
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	40021000 	.word	0x40021000
 8000c3c:	200001c0 	.word	0x200001c0

08000c40 <spi1_beriRegistre>:
void spi1_beriRegistre(uint8_t reg, uint8_t* buffer, uint8_t velikost) {
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	4603      	mov	r3, r0
 8000c48:	6039      	str	r1, [r7, #0]
 8000c4a:	71fb      	strb	r3, [r7, #7]
 8000c4c:	4613      	mov	r3, r2
 8000c4e:	71bb      	strb	r3, [r7, #6]
    reg |= 0xC0; // najpomembnejsa bita na 1
 8000c50:	79fb      	ldrb	r3, [r7, #7]
 8000c52:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8000c56:	b2db      	uxtb	r3, r3
 8000c58:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	2108      	movs	r1, #8
 8000c5e:	480c      	ldr	r0, [pc, #48]	; (8000c90 <spi1_beriRegistre+0x50>)
 8000c60:	f001 fa74 	bl	800214c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &reg, 1, 10); // blocking posiljanje....
 8000c64:	1df9      	adds	r1, r7, #7
 8000c66:	230a      	movs	r3, #10
 8000c68:	2201      	movs	r2, #1
 8000c6a:	480a      	ldr	r0, [pc, #40]	; (8000c94 <spi1_beriRegistre+0x54>)
 8000c6c:	f004 fa17 	bl	800509e <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi1,  buffer, velikost, velikost); // blocking posiljanje....
 8000c70:	79bb      	ldrb	r3, [r7, #6]
 8000c72:	b29a      	uxth	r2, r3
 8000c74:	79bb      	ldrb	r3, [r7, #6]
 8000c76:	6839      	ldr	r1, [r7, #0]
 8000c78:	4806      	ldr	r0, [pc, #24]	; (8000c94 <spi1_beriRegistre+0x54>)
 8000c7a:	f004 fb4c 	bl	8005316 <HAL_SPI_Receive>
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 8000c7e:	2201      	movs	r2, #1
 8000c80:	2108      	movs	r1, #8
 8000c82:	4803      	ldr	r0, [pc, #12]	; (8000c90 <spi1_beriRegistre+0x50>)
 8000c84:	f001 fa62 	bl	800214c <HAL_GPIO_WritePin>
}
 8000c88:	bf00      	nop
 8000c8a:	3708      	adds	r7, #8
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	40021000 	.word	0x40021000
 8000c94:	200001c0 	.word	0x200001c0

08000c98 <initGyro>:
void initGyro() { // ne pozabit klicat te funkcije
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
    uint8_t cip = spi1_beriRegister(0x0F);
 8000c9e:	200f      	movs	r0, #15
 8000ca0:	f7ff ff78 	bl	8000b94 <spi1_beriRegister>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	71fb      	strb	r3, [r7, #7]
    if (cip!=0xD4 && cip!=0xD3) {
 8000ca8:	79fb      	ldrb	r3, [r7, #7]
 8000caa:	2bd4      	cmp	r3, #212	; 0xd4
 8000cac:	d003      	beq.n	8000cb6 <initGyro+0x1e>
 8000cae:	79fb      	ldrb	r3, [r7, #7]
 8000cb0:	2bd3      	cmp	r3, #211	; 0xd3
 8000cb2:	d000      	beq.n	8000cb6 <initGyro+0x1e>
        for (;;);
 8000cb4:	e7fe      	b.n	8000cb4 <initGyro+0x1c>
    }
    spi1_pisiRegister(0x20, 0x4F); // CTRL_REG1 PD Zen Yen Xen 200hz
 8000cb6:	214f      	movs	r1, #79	; 0x4f
 8000cb8:	2020      	movs	r0, #32
 8000cba:	f7ff ff97 	bl	8000bec <spi1_pisiRegister>
    //TUKAJ NASTAVI Hz pa sensitivity +-500dps
    spi1_pisiRegister(0x22, 0x08); //DRDY
 8000cbe:	2108      	movs	r1, #8
 8000cc0:	2022      	movs	r0, #34	; 0x22
 8000cc2:	f7ff ff93 	bl	8000bec <spi1_pisiRegister>
    spi1_pisiRegister(0x23, 0x10);
 8000cc6:	2110      	movs	r1, #16
 8000cc8:	2023      	movs	r0, #35	; 0x23
 8000cca:	f7ff ff8f 	bl	8000bec <spi1_pisiRegister>
}
 8000cce:	bf00      	nop
 8000cd0:	3708      	adds	r7, #8
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
	...

08000cd8 <i2c1_pisiRegister>:
uint8_t i2c1_pisiRegister(uint8_t naprava, uint8_t reg, uint8_t podatek) {
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b086      	sub	sp, #24
 8000cdc:	af04      	add	r7, sp, #16
 8000cde:	4603      	mov	r3, r0
 8000ce0:	71fb      	strb	r3, [r7, #7]
 8000ce2:	460b      	mov	r3, r1
 8000ce4:	71bb      	strb	r3, [r7, #6]
 8000ce6:	4613      	mov	r3, r2
 8000ce8:	717b      	strb	r3, [r7, #5]
    naprava <<= 1;
 8000cea:	79fb      	ldrb	r3, [r7, #7]
 8000cec:	005b      	lsls	r3, r3, #1
 8000cee:	71fb      	strb	r3, [r7, #7]
    return HAL_I2C_Mem_Write(&hi2c1, naprava, reg, I2C_MEMADD_SIZE_8BIT, &podatek, 1, 10);
 8000cf0:	79fb      	ldrb	r3, [r7, #7]
 8000cf2:	b299      	uxth	r1, r3
 8000cf4:	79bb      	ldrb	r3, [r7, #6]
 8000cf6:	b29a      	uxth	r2, r3
 8000cf8:	230a      	movs	r3, #10
 8000cfa:	9302      	str	r3, [sp, #8]
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	9301      	str	r3, [sp, #4]
 8000d00:	1d7b      	adds	r3, r7, #5
 8000d02:	9300      	str	r3, [sp, #0]
 8000d04:	2301      	movs	r3, #1
 8000d06:	4804      	ldr	r0, [pc, #16]	; (8000d18 <i2c1_pisiRegister+0x40>)
 8000d08:	f001 fb7e 	bl	8002408 <HAL_I2C_Mem_Write>
 8000d0c:	4603      	mov	r3, r0
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	3708      	adds	r7, #8
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	2000016c 	.word	0x2000016c

08000d1c <i2c1_beriRegistre>:
void i2c1_beriRegistre(uint8_t naprava, uint8_t reg, uint8_t* podatek, uint8_t dolzina) {
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b086      	sub	sp, #24
 8000d20:	af04      	add	r7, sp, #16
 8000d22:	603a      	str	r2, [r7, #0]
 8000d24:	461a      	mov	r2, r3
 8000d26:	4603      	mov	r3, r0
 8000d28:	71fb      	strb	r3, [r7, #7]
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	71bb      	strb	r3, [r7, #6]
 8000d2e:	4613      	mov	r3, r2
 8000d30:	717b      	strb	r3, [r7, #5]
    if ((dolzina>1)&&(naprava==0x19))  // ce je naprava 0x19 moramo postaviti ta bit, ce zelimo brati vec zlogov
 8000d32:	797b      	ldrb	r3, [r7, #5]
 8000d34:	2b01      	cmp	r3, #1
 8000d36:	d906      	bls.n	8000d46 <i2c1_beriRegistre+0x2a>
 8000d38:	79fb      	ldrb	r3, [r7, #7]
 8000d3a:	2b19      	cmp	r3, #25
 8000d3c:	d103      	bne.n	8000d46 <i2c1_beriRegistre+0x2a>
        reg |= 0x80;
 8000d3e:	79bb      	ldrb	r3, [r7, #6]
 8000d40:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d44:	71bb      	strb	r3, [r7, #6]
    naprava <<= 1;
 8000d46:	79fb      	ldrb	r3, [r7, #7]
 8000d48:	005b      	lsls	r3, r3, #1
 8000d4a:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Read(&hi2c1, naprava, reg, I2C_MEMADD_SIZE_8BIT, podatek, dolzina, dolzina);
 8000d4c:	79fb      	ldrb	r3, [r7, #7]
 8000d4e:	b299      	uxth	r1, r3
 8000d50:	79bb      	ldrb	r3, [r7, #6]
 8000d52:	b298      	uxth	r0, r3
 8000d54:	797b      	ldrb	r3, [r7, #5]
 8000d56:	b29b      	uxth	r3, r3
 8000d58:	797a      	ldrb	r2, [r7, #5]
 8000d5a:	9202      	str	r2, [sp, #8]
 8000d5c:	9301      	str	r3, [sp, #4]
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	9300      	str	r3, [sp, #0]
 8000d62:	2301      	movs	r3, #1
 8000d64:	4602      	mov	r2, r0
 8000d66:	4803      	ldr	r0, [pc, #12]	; (8000d74 <i2c1_beriRegistre+0x58>)
 8000d68:	f001 fc48 	bl	80025fc <HAL_I2C_Mem_Read>
}
 8000d6c:	bf00      	nop
 8000d6e:	3708      	adds	r7, #8
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	2000016c 	.word	0x2000016c

08000d78 <initAccel>:
void initAccel() {
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
    i2c1_pisiRegister(0x19, 0x20, 0x27);
 8000d7c:	2227      	movs	r2, #39	; 0x27
 8000d7e:	2120      	movs	r1, #32
 8000d80:	2019      	movs	r0, #25
 8000d82:	f7ff ffa9 	bl	8000cd8 <i2c1_pisiRegister>
    i2c1_pisiRegister(0x19, 0x23, 0xA8);
 8000d86:	22a8      	movs	r2, #168	; 0xa8
 8000d88:	2123      	movs	r1, #35	; 0x23
 8000d8a:	2019      	movs	r0, #25
 8000d8c:	f7ff ffa4 	bl	8000cd8 <i2c1_pisiRegister>
}
 8000d90:	bf00      	nop
 8000d92:	bd80      	pop	{r7, pc}

08000d94 <TaskReadGyro>:
void TaskReadGyro(void *pvParameters){
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b088      	sub	sp, #32
 8000d98:	af02      	add	r7, sp, #8
 8000d9a:	6078      	str	r0, [r7, #4]
	int16_t gyroX;
	int16_t gyroY;
	int16_t gyroZ;

	const EventBits_t xBitsToWaitFor = (TaskReadAccel_BIT | TaskSendAccel_BIT);
 8000d9c:	2303      	movs	r3, #3
 8000d9e:	617b      	str	r3, [r7, #20]
	while(1){
		xEventGroupWaitBits(xEventGroup, xBitsToWaitFor, pdTRUE, pdFALSE, portMAX_DELAY);
 8000da0:	4b1b      	ldr	r3, [pc, #108]	; (8000e10 <TaskReadGyro+0x7c>)
 8000da2:	6818      	ldr	r0, [r3, #0]
 8000da4:	f04f 33ff 	mov.w	r3, #4294967295
 8000da8:	9300      	str	r3, [sp, #0]
 8000daa:	2300      	movs	r3, #0
 8000dac:	2201      	movs	r2, #1
 8000dae:	6979      	ldr	r1, [r7, #20]
 8000db0:	f009 fdbe 	bl	800a930 <xEventGroupWaitBits>


		spi1_beriRegistre(0x28, (uint8_t*)&gyroX, 2);
 8000db4:	f107 0312 	add.w	r3, r7, #18
 8000db8:	2202      	movs	r2, #2
 8000dba:	4619      	mov	r1, r3
 8000dbc:	2028      	movs	r0, #40	; 0x28
 8000dbe:	f7ff ff3f 	bl	8000c40 <spi1_beriRegistre>
		spi1_beriRegistre(0x2A, (uint8_t*)&gyroY, 2);
 8000dc2:	f107 0310 	add.w	r3, r7, #16
 8000dc6:	2202      	movs	r2, #2
 8000dc8:	4619      	mov	r1, r3
 8000dca:	202a      	movs	r0, #42	; 0x2a
 8000dcc:	f7ff ff38 	bl	8000c40 <spi1_beriRegistre>
		spi1_beriRegistre(0x2C, (uint8_t*)&gyroZ, 2);
 8000dd0:	f107 030e 	add.w	r3, r7, #14
 8000dd4:	2202      	movs	r2, #2
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	202c      	movs	r0, #44	; 0x2c
 8000dda:	f7ff ff31 	bl	8000c40 <spi1_beriRegistre>

		xQueueSendToBack(QueueGyro, &gyroX, 0);
 8000dde:	4b0d      	ldr	r3, [pc, #52]	; (8000e14 <TaskReadGyro+0x80>)
 8000de0:	6818      	ldr	r0, [r3, #0]
 8000de2:	f107 0112 	add.w	r1, r7, #18
 8000de6:	2300      	movs	r3, #0
 8000de8:	2200      	movs	r2, #0
 8000dea:	f00a f90f 	bl	800b00c <xQueueGenericSend>
		xQueueSendToBack(QueueGyro, &gyroY, 0);
 8000dee:	4b09      	ldr	r3, [pc, #36]	; (8000e14 <TaskReadGyro+0x80>)
 8000df0:	6818      	ldr	r0, [r3, #0]
 8000df2:	f107 0110 	add.w	r1, r7, #16
 8000df6:	2300      	movs	r3, #0
 8000df8:	2200      	movs	r2, #0
 8000dfa:	f00a f907 	bl	800b00c <xQueueGenericSend>
		xQueueSendToBack(QueueGyro, &gyroZ, 0);
 8000dfe:	4b05      	ldr	r3, [pc, #20]	; (8000e14 <TaskReadGyro+0x80>)
 8000e00:	6818      	ldr	r0, [r3, #0]
 8000e02:	f107 010e 	add.w	r1, r7, #14
 8000e06:	2300      	movs	r3, #0
 8000e08:	2200      	movs	r2, #0
 8000e0a:	f00a f8ff 	bl	800b00c <xQueueGenericSend>
		xEventGroupWaitBits(xEventGroup, xBitsToWaitFor, pdTRUE, pdFALSE, portMAX_DELAY);
 8000e0e:	e7c7      	b.n	8000da0 <TaskReadGyro+0xc>
 8000e10:	200002b4 	.word	0x200002b4
 8000e14:	200002ac 	.word	0x200002ac

08000e18 <TaskReadAccel>:
	}
}
void TaskReadAccel(void *pvParameters){
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b088      	sub	sp, #32
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]

	while(1){
		//i2c1_beriRegistre(0x19, 0x28,(uint8_t*)&meritve[0], 2);
		//i2c1_beriRegistre(0x19, 0x2A,(uint8_t*)&meritve[1], 2);
		//i2c1_beriRegistre(0x19, 0x2C,(uint8_t*)&meritve[2], 2);
		i2c1_beriRegistre(0x19, 0x28,(uint8_t*)&meritve, 6);
 8000e20:	f107 020c 	add.w	r2, r7, #12
 8000e24:	2306      	movs	r3, #6
 8000e26:	2128      	movs	r1, #40	; 0x28
 8000e28:	2019      	movs	r0, #25
 8000e2a:	f7ff ff77 	bl	8000d1c <i2c1_beriRegistre>

		meritve[0] = meritve[0] >> 4;
 8000e2e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000e32:	111b      	asrs	r3, r3, #4
 8000e34:	b21b      	sxth	r3, r3
 8000e36:	81bb      	strh	r3, [r7, #12]
		meritve[1] = meritve[1] >> 4;
 8000e38:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000e3c:	111b      	asrs	r3, r3, #4
 8000e3e:	b21b      	sxth	r3, r3
 8000e40:	81fb      	strh	r3, [r7, #14]
		meritve[2] = meritve[2] >> 4;
 8000e42:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000e46:	111b      	asrs	r3, r3, #4
 8000e48:	b21b      	sxth	r3, r3
 8000e4a:	823b      	strh	r3, [r7, #16]

		accelX = meritve[0] * 0.0039;
 8000e4c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000e50:	4618      	mov	r0, r3
 8000e52:	f7ff fc41 	bl	80006d8 <__aeabi_i2d>
 8000e56:	a32a      	add	r3, pc, #168	; (adr r3, 8000f00 <TaskReadAccel+0xe8>)
 8000e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e5c:	f7ff f9c0 	bl	80001e0 <__aeabi_dmul>
 8000e60:	4602      	mov	r2, r0
 8000e62:	460b      	mov	r3, r1
 8000e64:	4610      	mov	r0, r2
 8000e66:	4619      	mov	r1, r3
 8000e68:	f7ff fca0 	bl	80007ac <__aeabi_d2f>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	61fb      	str	r3, [r7, #28]
		accelY = meritve[1] * 0.0039;
 8000e70:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000e74:	4618      	mov	r0, r3
 8000e76:	f7ff fc2f 	bl	80006d8 <__aeabi_i2d>
 8000e7a:	a321      	add	r3, pc, #132	; (adr r3, 8000f00 <TaskReadAccel+0xe8>)
 8000e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e80:	f7ff f9ae 	bl	80001e0 <__aeabi_dmul>
 8000e84:	4602      	mov	r2, r0
 8000e86:	460b      	mov	r3, r1
 8000e88:	4610      	mov	r0, r2
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	f7ff fc8e 	bl	80007ac <__aeabi_d2f>
 8000e90:	4603      	mov	r3, r0
 8000e92:	61bb      	str	r3, [r7, #24]
		accelZ = meritve[2] * 0.0039;
 8000e94:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f7ff fc1d 	bl	80006d8 <__aeabi_i2d>
 8000e9e:	a318      	add	r3, pc, #96	; (adr r3, 8000f00 <TaskReadAccel+0xe8>)
 8000ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ea4:	f7ff f99c 	bl	80001e0 <__aeabi_dmul>
 8000ea8:	4602      	mov	r2, r0
 8000eaa:	460b      	mov	r3, r1
 8000eac:	4610      	mov	r0, r2
 8000eae:	4619      	mov	r1, r3
 8000eb0:	f7ff fc7c 	bl	80007ac <__aeabi_d2f>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	617b      	str	r3, [r7, #20]

		xQueueSendToBack(QueueAccel, &accelX, 0);
 8000eb8:	4b0f      	ldr	r3, [pc, #60]	; (8000ef8 <TaskReadAccel+0xe0>)
 8000eba:	6818      	ldr	r0, [r3, #0]
 8000ebc:	f107 011c 	add.w	r1, r7, #28
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	f00a f8a2 	bl	800b00c <xQueueGenericSend>
		xQueueSendToBack(QueueAccel, &accelY, 0);
 8000ec8:	4b0b      	ldr	r3, [pc, #44]	; (8000ef8 <TaskReadAccel+0xe0>)
 8000eca:	6818      	ldr	r0, [r3, #0]
 8000ecc:	f107 0118 	add.w	r1, r7, #24
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	f00a f89a 	bl	800b00c <xQueueGenericSend>
		xQueueSendToBack(QueueAccel, &accelZ, 0);
 8000ed8:	4b07      	ldr	r3, [pc, #28]	; (8000ef8 <TaskReadAccel+0xe0>)
 8000eda:	6818      	ldr	r0, [r3, #0]
 8000edc:	f107 0114 	add.w	r1, r7, #20
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	f00a f892 	bl	800b00c <xQueueGenericSend>

		xEventGroupSetBits(xEventGroup, TaskReadAccel_BIT);
 8000ee8:	4b04      	ldr	r3, [pc, #16]	; (8000efc <TaskReadAccel+0xe4>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	2101      	movs	r1, #1
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f009 fdec 	bl	800aacc <xEventGroupSetBits>
		i2c1_beriRegistre(0x19, 0x28,(uint8_t*)&meritve, 6);
 8000ef4:	e794      	b.n	8000e20 <TaskReadAccel+0x8>
 8000ef6:	bf00      	nop
 8000ef8:	200002b0 	.word	0x200002b0
 8000efc:	200002b4 	.word	0x200002b4
 8000f00:	8e8a71de 	.word	0x8e8a71de
 8000f04:	3f6ff2e4 	.word	0x3f6ff2e4

08000f08 <TaskSendGyro>:
	}

}
void TaskSendGyro(void *pvParameters){
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b090      	sub	sp, #64	; 0x40
 8000f0c:	af02      	add	r7, sp, #8
 8000f0e:	6078      	str	r0, [r7, #4]
	int16_t meritev[10];
	float meritev_send[5];

	meritev_send[0] = 0xaaaa;
 8000f10:	4b1c      	ldr	r3, [pc, #112]	; (8000f84 <TaskSendGyro+0x7c>)
 8000f12:	60bb      	str	r3, [r7, #8]

	meritev[0] = 0xaaaa;
 8000f14:	f64a 23aa 	movw	r3, #43690	; 0xaaaa
 8000f18:	83bb      	strh	r3, [r7, #28]
	const EventBits_t xBitsToWaitFor = (TaskReadAccel_BIT | TaskSendAccel_BIT | TaskReadGyro_BIT);
 8000f1a:	2307      	movs	r3, #7
 8000f1c:	637b      	str	r3, [r7, #52]	; 0x34
	const TickType_t xTicksToWait = pdMS_TO_TICKS(100);
 8000f1e:	2364      	movs	r3, #100	; 0x64
 8000f20:	633b      	str	r3, [r7, #48]	; 0x30
	while(1){
		xEventGroupWaitBits(xEventGroup, xBitsToWaitFor, pdTRUE, pdFALSE, portMAX_DELAY);
 8000f22:	4b19      	ldr	r3, [pc, #100]	; (8000f88 <TaskSendGyro+0x80>)
 8000f24:	6818      	ldr	r0, [r3, #0]
 8000f26:	f04f 33ff 	mov.w	r3, #4294967295
 8000f2a:	9300      	str	r3, [sp, #0]
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	2201      	movs	r2, #1
 8000f30:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000f32:	f009 fcfd 	bl	800a930 <xEventGroupWaitBits>


		xQueueReceive(QueueGyro, &meritev[1], xTicksToWait);
 8000f36:	4b15      	ldr	r3, [pc, #84]	; (8000f8c <TaskSendGyro+0x84>)
 8000f38:	6818      	ldr	r0, [r3, #0]
 8000f3a:	f107 031c 	add.w	r3, r7, #28
 8000f3e:	3302      	adds	r3, #2
 8000f40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000f42:	4619      	mov	r1, r3
 8000f44:	f00a f9fc 	bl	800b340 <xQueueReceive>
		xQueueReceive(QueueGyro, &meritev[2], xTicksToWait);
 8000f48:	4b10      	ldr	r3, [pc, #64]	; (8000f8c <TaskSendGyro+0x84>)
 8000f4a:	6818      	ldr	r0, [r3, #0]
 8000f4c:	f107 031c 	add.w	r3, r7, #28
 8000f50:	3304      	adds	r3, #4
 8000f52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000f54:	4619      	mov	r1, r3
 8000f56:	f00a f9f3 	bl	800b340 <xQueueReceive>
		xQueueReceive(QueueGyro, &meritev[3], xTicksToWait);
 8000f5a:	4b0c      	ldr	r3, [pc, #48]	; (8000f8c <TaskSendGyro+0x84>)
 8000f5c:	6818      	ldr	r0, [r3, #0]
 8000f5e:	f107 031c 	add.w	r3, r7, #28
 8000f62:	3306      	adds	r3, #6
 8000f64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000f66:	4619      	mov	r1, r3
 8000f68:	f00a f9ea 	bl	800b340 <xQueueReceive>

//		meritev_send[1] =meritev[1] * 0.0175;
//		meritev_send[2] =meritev[2] * 0.0175;
//		meritev_send[3] =meritev[3] * 0.0175;

		meritev[4] = DWT->CYCCNT;
 8000f6c:	4b08      	ldr	r3, [pc, #32]	; (8000f90 <TaskSendGyro+0x88>)
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	b21b      	sxth	r3, r3
 8000f72:	84bb      	strh	r3, [r7, #36]	; 0x24
		//float clock = DWT->CYCCNT;

		//posli
		CDC_Transmit_FS((uint8_t*)&meritev, sizeof(meritev));
 8000f74:	f107 031c 	add.w	r3, r7, #28
 8000f78:	2114      	movs	r1, #20
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f00c fda8 	bl	800dad0 <CDC_Transmit_FS>
	while(1){
 8000f80:	e7cf      	b.n	8000f22 <TaskSendGyro+0x1a>
 8000f82:	bf00      	nop
 8000f84:	472aaa00 	.word	0x472aaa00
 8000f88:	200002b4 	.word	0x200002b4
 8000f8c:	200002ac 	.word	0x200002ac
 8000f90:	e0001000 	.word	0xe0001000

08000f94 <TaskSendAccel>:
		//CDC_Transmit_FS((uint8_t*)&clock, sizeof(clock));
	}
}
void TaskSendAccel(void *pvParameters){
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b088      	sub	sp, #32
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
	float meritev[5];

	meritev[0] = 0xbbbb;
 8000f9c:	4b19      	ldr	r3, [pc, #100]	; (8001004 <TaskSendAccel+0x70>)
 8000f9e:	60bb      	str	r3, [r7, #8]
	const TickType_t xTicksToWait = pdMS_TO_TICKS(100);
 8000fa0:	2364      	movs	r3, #100	; 0x64
 8000fa2:	61fb      	str	r3, [r7, #28]
	while(1){
		xQueueReceive(QueueAccel, &meritev[1], xTicksToWait);
 8000fa4:	4b18      	ldr	r3, [pc, #96]	; (8001008 <TaskSendAccel+0x74>)
 8000fa6:	6818      	ldr	r0, [r3, #0]
 8000fa8:	f107 0308 	add.w	r3, r7, #8
 8000fac:	3304      	adds	r3, #4
 8000fae:	69fa      	ldr	r2, [r7, #28]
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	f00a f9c5 	bl	800b340 <xQueueReceive>
		xQueueReceive(QueueAccel, &meritev[2], xTicksToWait);
 8000fb6:	4b14      	ldr	r3, [pc, #80]	; (8001008 <TaskSendAccel+0x74>)
 8000fb8:	6818      	ldr	r0, [r3, #0]
 8000fba:	f107 0308 	add.w	r3, r7, #8
 8000fbe:	3308      	adds	r3, #8
 8000fc0:	69fa      	ldr	r2, [r7, #28]
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	f00a f9bc 	bl	800b340 <xQueueReceive>
		xQueueReceive(QueueAccel, &meritev[3], xTicksToWait);
 8000fc8:	4b0f      	ldr	r3, [pc, #60]	; (8001008 <TaskSendAccel+0x74>)
 8000fca:	6818      	ldr	r0, [r3, #0]
 8000fcc:	f107 0308 	add.w	r3, r7, #8
 8000fd0:	330c      	adds	r3, #12
 8000fd2:	69fa      	ldr	r2, [r7, #28]
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	f00a f9b3 	bl	800b340 <xQueueReceive>

		meritev[4] = DWT->CYCCNT;
 8000fda:	4b0c      	ldr	r3, [pc, #48]	; (800100c <TaskSendAccel+0x78>)
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	ee07 3a90 	vmov	s15, r3
 8000fe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000fe6:	edc7 7a06 	vstr	s15, [r7, #24]
		//posli
		//CDC_Transmit_FS((uint8_t*)&glava, sizeof(glava));
		CDC_Transmit_FS((uint8_t*)&meritev, sizeof(meritev));
 8000fea:	f107 0308 	add.w	r3, r7, #8
 8000fee:	2114      	movs	r1, #20
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f00c fd6d 	bl	800dad0 <CDC_Transmit_FS>

		xEventGroupSetBits(xEventGroup, TaskSendAccel_BIT);
 8000ff6:	4b06      	ldr	r3, [pc, #24]	; (8001010 <TaskSendAccel+0x7c>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	2102      	movs	r1, #2
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f009 fd65 	bl	800aacc <xEventGroupSetBits>
	while(1){
 8001002:	e7cf      	b.n	8000fa4 <TaskSendAccel+0x10>
 8001004:	473bbb00 	.word	0x473bbb00
 8001008:	200002b0 	.word	0x200002b0
 800100c:	e0001000 	.word	0xe0001000
 8001010:	200002b4 	.word	0x200002b4

08001014 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800101a:	f000 fd39 	bl	8001a90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800101e:	f000 f88f 	bl	8001140 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001022:	f000 f9a9 	bl	8001378 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001026:	f000 f8f3 	bl	8001210 <MX_I2C1_Init>
  MX_SPI1_Init();
 800102a:	f000 f921 	bl	8001270 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 800102e:	f000 f979 	bl	8001324 <MX_USART2_UART_Init>
  MX_TIM10_Init();
 8001032:	f000 f953 	bl	80012dc <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */
  __HAL_I2C_ENABLE(&hi2c1);
 8001036:	4b31      	ldr	r3, [pc, #196]	; (80010fc <main+0xe8>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	681a      	ldr	r2, [r3, #0]
 800103c:	4b2f      	ldr	r3, [pc, #188]	; (80010fc <main+0xe8>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f042 0201 	orr.w	r2, r2, #1
 8001044:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE(&hspi1);
 8001046:	4b2e      	ldr	r3, [pc, #184]	; (8001100 <main+0xec>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	681a      	ldr	r2, [r3, #0]
 800104c:	4b2c      	ldr	r3, [pc, #176]	; (8001100 <main+0xec>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001054:	601a      	str	r2, [r3, #0]
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 8001056:	2201      	movs	r2, #1
 8001058:	2108      	movs	r1, #8
 800105a:	482a      	ldr	r0, [pc, #168]	; (8001104 <main+0xf0>)
 800105c:	f001 f876 	bl	800214c <HAL_GPIO_WritePin>

  initGyro();
 8001060:	f7ff fe1a 	bl	8000c98 <initGyro>
  initAccel();
 8001064:	f7ff fe88 	bl	8000d78 <initAccel>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001068:	f009 fb1c 	bl	800a6a4 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  QueueGyro = xQueueCreate( 5, sizeof( int16_t ) );
 800106c:	2200      	movs	r2, #0
 800106e:	2102      	movs	r1, #2
 8001070:	2005      	movs	r0, #5
 8001072:	f009 ff6d 	bl	800af50 <xQueueGenericCreate>
 8001076:	4603      	mov	r3, r0
 8001078:	4a23      	ldr	r2, [pc, #140]	; (8001108 <main+0xf4>)
 800107a:	6013      	str	r3, [r2, #0]
  QueueAccel = xQueueCreate( 5, sizeof( float ) );
 800107c:	2200      	movs	r2, #0
 800107e:	2104      	movs	r1, #4
 8001080:	2005      	movs	r0, #5
 8001082:	f009 ff65 	bl	800af50 <xQueueGenericCreate>
 8001086:	4603      	mov	r3, r0
 8001088:	4a20      	ldr	r2, [pc, #128]	; (800110c <main+0xf8>)
 800108a:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800108c:	4a20      	ldr	r2, [pc, #128]	; (8001110 <main+0xfc>)
 800108e:	2100      	movs	r1, #0
 8001090:	4820      	ldr	r0, [pc, #128]	; (8001114 <main+0x100>)
 8001092:	f009 fb51 	bl	800a738 <osThreadNew>
 8001096:	4603      	mov	r3, r0
 8001098:	4a1f      	ldr	r2, [pc, #124]	; (8001118 <main+0x104>)
 800109a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  xTaskCreate(TaskSendGyro, "CDC_Gyro", configMINIMAL_STACK_SIZE, NULL, 2, NULL);
 800109c:	2300      	movs	r3, #0
 800109e:	9301      	str	r3, [sp, #4]
 80010a0:	2302      	movs	r3, #2
 80010a2:	9300      	str	r3, [sp, #0]
 80010a4:	2300      	movs	r3, #0
 80010a6:	2280      	movs	r2, #128	; 0x80
 80010a8:	491c      	ldr	r1, [pc, #112]	; (800111c <main+0x108>)
 80010aa:	481d      	ldr	r0, [pc, #116]	; (8001120 <main+0x10c>)
 80010ac:	f00a fbf3 	bl	800b896 <xTaskCreate>
  xTaskCreate(TaskSendAccel, "CDC_Accel", configMINIMAL_STACK_SIZE, NULL, 2, NULL);
 80010b0:	2300      	movs	r3, #0
 80010b2:	9301      	str	r3, [sp, #4]
 80010b4:	2302      	movs	r3, #2
 80010b6:	9300      	str	r3, [sp, #0]
 80010b8:	2300      	movs	r3, #0
 80010ba:	2280      	movs	r2, #128	; 0x80
 80010bc:	4919      	ldr	r1, [pc, #100]	; (8001124 <main+0x110>)
 80010be:	481a      	ldr	r0, [pc, #104]	; (8001128 <main+0x114>)
 80010c0:	f00a fbe9 	bl	800b896 <xTaskCreate>
  xTaskCreate(TaskReadGyro, "Data_Gyro", configMINIMAL_STACK_SIZE, NULL, 1, NULL);
 80010c4:	2300      	movs	r3, #0
 80010c6:	9301      	str	r3, [sp, #4]
 80010c8:	2301      	movs	r3, #1
 80010ca:	9300      	str	r3, [sp, #0]
 80010cc:	2300      	movs	r3, #0
 80010ce:	2280      	movs	r2, #128	; 0x80
 80010d0:	4916      	ldr	r1, [pc, #88]	; (800112c <main+0x118>)
 80010d2:	4817      	ldr	r0, [pc, #92]	; (8001130 <main+0x11c>)
 80010d4:	f00a fbdf 	bl	800b896 <xTaskCreate>
  xTaskCreate(TaskReadAccel, "Data_Accel", configMINIMAL_STACK_SIZE, NULL, 1, NULL);
 80010d8:	2300      	movs	r3, #0
 80010da:	9301      	str	r3, [sp, #4]
 80010dc:	2301      	movs	r3, #1
 80010de:	9300      	str	r3, [sp, #0]
 80010e0:	2300      	movs	r3, #0
 80010e2:	2280      	movs	r2, #128	; 0x80
 80010e4:	4913      	ldr	r1, [pc, #76]	; (8001134 <main+0x120>)
 80010e6:	4814      	ldr	r0, [pc, #80]	; (8001138 <main+0x124>)
 80010e8:	f00a fbd5 	bl	800b896 <xTaskCreate>

  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  xEventGroup = xEventGroupCreate();
 80010ec:	f009 fc06 	bl	800a8fc <xEventGroupCreate>
 80010f0:	4603      	mov	r3, r0
 80010f2:	4a12      	ldr	r2, [pc, #72]	; (800113c <main+0x128>)
 80010f4:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80010f6:	f009 faf9 	bl	800a6ec <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010fa:	e7fe      	b.n	80010fa <main+0xe6>
 80010fc:	2000016c 	.word	0x2000016c
 8001100:	200001c0 	.word	0x200001c0
 8001104:	40021000 	.word	0x40021000
 8001108:	200002ac 	.word	0x200002ac
 800110c:	200002b0 	.word	0x200002b0
 8001110:	0800e658 	.word	0x0800e658
 8001114:	080015b5 	.word	0x080015b5
 8001118:	200002a4 	.word	0x200002a4
 800111c:	0800e5a0 	.word	0x0800e5a0
 8001120:	08000f09 	.word	0x08000f09
 8001124:	0800e5ac 	.word	0x0800e5ac
 8001128:	08000f95 	.word	0x08000f95
 800112c:	0800e5b8 	.word	0x0800e5b8
 8001130:	08000d95 	.word	0x08000d95
 8001134:	0800e5c4 	.word	0x0800e5c4
 8001138:	08000e19 	.word	0x08000e19
 800113c:	200002b4 	.word	0x200002b4

08001140 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b094      	sub	sp, #80	; 0x50
 8001144:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001146:	f107 0320 	add.w	r3, r7, #32
 800114a:	2230      	movs	r2, #48	; 0x30
 800114c:	2100      	movs	r1, #0
 800114e:	4618      	mov	r0, r3
 8001150:	f00d f91e 	bl	800e390 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001154:	f107 030c 	add.w	r3, r7, #12
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	605a      	str	r2, [r3, #4]
 800115e:	609a      	str	r2, [r3, #8]
 8001160:	60da      	str	r2, [r3, #12]
 8001162:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001164:	2300      	movs	r3, #0
 8001166:	60bb      	str	r3, [r7, #8]
 8001168:	4b27      	ldr	r3, [pc, #156]	; (8001208 <SystemClock_Config+0xc8>)
 800116a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116c:	4a26      	ldr	r2, [pc, #152]	; (8001208 <SystemClock_Config+0xc8>)
 800116e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001172:	6413      	str	r3, [r2, #64]	; 0x40
 8001174:	4b24      	ldr	r3, [pc, #144]	; (8001208 <SystemClock_Config+0xc8>)
 8001176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001178:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800117c:	60bb      	str	r3, [r7, #8]
 800117e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001180:	2300      	movs	r3, #0
 8001182:	607b      	str	r3, [r7, #4]
 8001184:	4b21      	ldr	r3, [pc, #132]	; (800120c <SystemClock_Config+0xcc>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a20      	ldr	r2, [pc, #128]	; (800120c <SystemClock_Config+0xcc>)
 800118a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800118e:	6013      	str	r3, [r2, #0]
 8001190:	4b1e      	ldr	r3, [pc, #120]	; (800120c <SystemClock_Config+0xcc>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001198:	607b      	str	r3, [r7, #4]
 800119a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800119c:	2301      	movs	r3, #1
 800119e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011a4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011a6:	2302      	movs	r3, #2
 80011a8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011aa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80011ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80011b0:	2304      	movs	r3, #4
 80011b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80011b4:	2348      	movs	r3, #72	; 0x48
 80011b6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011b8:	2302      	movs	r3, #2
 80011ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80011bc:	2303      	movs	r3, #3
 80011be:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011c0:	f107 0320 	add.w	r3, r7, #32
 80011c4:	4618      	mov	r0, r3
 80011c6:	f003 fa17 	bl	80045f8 <HAL_RCC_OscConfig>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80011d0:	f000 fa0c 	bl	80015ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011d4:	230f      	movs	r3, #15
 80011d6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011d8:	2302      	movs	r3, #2
 80011da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011dc:	2300      	movs	r3, #0
 80011de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011e6:	2300      	movs	r3, #0
 80011e8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011ea:	f107 030c 	add.w	r3, r7, #12
 80011ee:	2102      	movs	r1, #2
 80011f0:	4618      	mov	r0, r3
 80011f2:	f003 fc79 	bl	8004ae8 <HAL_RCC_ClockConfig>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80011fc:	f000 f9f6 	bl	80015ec <Error_Handler>
  }
}
 8001200:	bf00      	nop
 8001202:	3750      	adds	r7, #80	; 0x50
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	40023800 	.word	0x40023800
 800120c:	40007000 	.word	0x40007000

08001210 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001214:	4b13      	ldr	r3, [pc, #76]	; (8001264 <MX_I2C1_Init+0x54>)
 8001216:	4a14      	ldr	r2, [pc, #80]	; (8001268 <MX_I2C1_Init+0x58>)
 8001218:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800121a:	4b12      	ldr	r3, [pc, #72]	; (8001264 <MX_I2C1_Init+0x54>)
 800121c:	4a13      	ldr	r2, [pc, #76]	; (800126c <MX_I2C1_Init+0x5c>)
 800121e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_16_9;
 8001220:	4b10      	ldr	r3, [pc, #64]	; (8001264 <MX_I2C1_Init+0x54>)
 8001222:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001226:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001228:	4b0e      	ldr	r3, [pc, #56]	; (8001264 <MX_I2C1_Init+0x54>)
 800122a:	2200      	movs	r2, #0
 800122c:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800122e:	4b0d      	ldr	r3, [pc, #52]	; (8001264 <MX_I2C1_Init+0x54>)
 8001230:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001234:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001236:	4b0b      	ldr	r3, [pc, #44]	; (8001264 <MX_I2C1_Init+0x54>)
 8001238:	2200      	movs	r2, #0
 800123a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800123c:	4b09      	ldr	r3, [pc, #36]	; (8001264 <MX_I2C1_Init+0x54>)
 800123e:	2200      	movs	r2, #0
 8001240:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001242:	4b08      	ldr	r3, [pc, #32]	; (8001264 <MX_I2C1_Init+0x54>)
 8001244:	2200      	movs	r2, #0
 8001246:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001248:	4b06      	ldr	r3, [pc, #24]	; (8001264 <MX_I2C1_Init+0x54>)
 800124a:	2200      	movs	r2, #0
 800124c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800124e:	4805      	ldr	r0, [pc, #20]	; (8001264 <MX_I2C1_Init+0x54>)
 8001250:	f000 ff96 	bl	8002180 <HAL_I2C_Init>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 800125a:	f000 f9c7 	bl	80015ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800125e:	bf00      	nop
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	2000016c 	.word	0x2000016c
 8001268:	40005400 	.word	0x40005400
 800126c:	00061a80 	.word	0x00061a80

08001270 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001274:	4b17      	ldr	r3, [pc, #92]	; (80012d4 <MX_SPI1_Init+0x64>)
 8001276:	4a18      	ldr	r2, [pc, #96]	; (80012d8 <MX_SPI1_Init+0x68>)
 8001278:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800127a:	4b16      	ldr	r3, [pc, #88]	; (80012d4 <MX_SPI1_Init+0x64>)
 800127c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001280:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001282:	4b14      	ldr	r3, [pc, #80]	; (80012d4 <MX_SPI1_Init+0x64>)
 8001284:	2200      	movs	r2, #0
 8001286:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001288:	4b12      	ldr	r3, [pc, #72]	; (80012d4 <MX_SPI1_Init+0x64>)
 800128a:	2200      	movs	r2, #0
 800128c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800128e:	4b11      	ldr	r3, [pc, #68]	; (80012d4 <MX_SPI1_Init+0x64>)
 8001290:	2202      	movs	r2, #2
 8001292:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001294:	4b0f      	ldr	r3, [pc, #60]	; (80012d4 <MX_SPI1_Init+0x64>)
 8001296:	2201      	movs	r2, #1
 8001298:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800129a:	4b0e      	ldr	r3, [pc, #56]	; (80012d4 <MX_SPI1_Init+0x64>)
 800129c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012a0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80012a2:	4b0c      	ldr	r3, [pc, #48]	; (80012d4 <MX_SPI1_Init+0x64>)
 80012a4:	2218      	movs	r2, #24
 80012a6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012a8:	4b0a      	ldr	r3, [pc, #40]	; (80012d4 <MX_SPI1_Init+0x64>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80012ae:	4b09      	ldr	r3, [pc, #36]	; (80012d4 <MX_SPI1_Init+0x64>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012b4:	4b07      	ldr	r3, [pc, #28]	; (80012d4 <MX_SPI1_Init+0x64>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80012ba:	4b06      	ldr	r3, [pc, #24]	; (80012d4 <MX_SPI1_Init+0x64>)
 80012bc:	220a      	movs	r2, #10
 80012be:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80012c0:	4804      	ldr	r0, [pc, #16]	; (80012d4 <MX_SPI1_Init+0x64>)
 80012c2:	f003 fe63 	bl	8004f8c <HAL_SPI_Init>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80012cc:	f000 f98e 	bl	80015ec <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80012d0:	bf00      	nop
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	200001c0 	.word	0x200001c0
 80012d8:	40013000 	.word	0x40013000

080012dc <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80012e0:	4b0e      	ldr	r3, [pc, #56]	; (800131c <MX_TIM10_Init+0x40>)
 80012e2:	4a0f      	ldr	r2, [pc, #60]	; (8001320 <MX_TIM10_Init+0x44>)
 80012e4:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 80012e6:	4b0d      	ldr	r3, [pc, #52]	; (800131c <MX_TIM10_Init+0x40>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ec:	4b0b      	ldr	r3, [pc, #44]	; (800131c <MX_TIM10_Init+0x40>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 80012f2:	4b0a      	ldr	r3, [pc, #40]	; (800131c <MX_TIM10_Init+0x40>)
 80012f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012f8:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012fa:	4b08      	ldr	r3, [pc, #32]	; (800131c <MX_TIM10_Init+0x40>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001300:	4b06      	ldr	r3, [pc, #24]	; (800131c <MX_TIM10_Init+0x40>)
 8001302:	2200      	movs	r2, #0
 8001304:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001306:	4805      	ldr	r0, [pc, #20]	; (800131c <MX_TIM10_Init+0x40>)
 8001308:	f004 fbe8 	bl	8005adc <HAL_TIM_Base_Init>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8001312:	f000 f96b 	bl	80015ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001316:	bf00      	nop
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	20000218 	.word	0x20000218
 8001320:	40014400 	.word	0x40014400

08001324 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001328:	4b11      	ldr	r3, [pc, #68]	; (8001370 <MX_USART2_UART_Init+0x4c>)
 800132a:	4a12      	ldr	r2, [pc, #72]	; (8001374 <MX_USART2_UART_Init+0x50>)
 800132c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800132e:	4b10      	ldr	r3, [pc, #64]	; (8001370 <MX_USART2_UART_Init+0x4c>)
 8001330:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001334:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001336:	4b0e      	ldr	r3, [pc, #56]	; (8001370 <MX_USART2_UART_Init+0x4c>)
 8001338:	2200      	movs	r2, #0
 800133a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800133c:	4b0c      	ldr	r3, [pc, #48]	; (8001370 <MX_USART2_UART_Init+0x4c>)
 800133e:	2200      	movs	r2, #0
 8001340:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001342:	4b0b      	ldr	r3, [pc, #44]	; (8001370 <MX_USART2_UART_Init+0x4c>)
 8001344:	2200      	movs	r2, #0
 8001346:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001348:	4b09      	ldr	r3, [pc, #36]	; (8001370 <MX_USART2_UART_Init+0x4c>)
 800134a:	220c      	movs	r2, #12
 800134c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800134e:	4b08      	ldr	r3, [pc, #32]	; (8001370 <MX_USART2_UART_Init+0x4c>)
 8001350:	2200      	movs	r2, #0
 8001352:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001354:	4b06      	ldr	r3, [pc, #24]	; (8001370 <MX_USART2_UART_Init+0x4c>)
 8001356:	2200      	movs	r2, #0
 8001358:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800135a:	4805      	ldr	r0, [pc, #20]	; (8001370 <MX_USART2_UART_Init+0x4c>)
 800135c:	f004 fe34 	bl	8005fc8 <HAL_UART_Init>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001366:	f000 f941 	bl	80015ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800136a:	bf00      	nop
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	20000260 	.word	0x20000260
 8001374:	40004400 	.word	0x40004400

08001378 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b08c      	sub	sp, #48	; 0x30
 800137c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800137e:	f107 031c 	add.w	r3, r7, #28
 8001382:	2200      	movs	r2, #0
 8001384:	601a      	str	r2, [r3, #0]
 8001386:	605a      	str	r2, [r3, #4]
 8001388:	609a      	str	r2, [r3, #8]
 800138a:	60da      	str	r2, [r3, #12]
 800138c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800138e:	2300      	movs	r3, #0
 8001390:	61bb      	str	r3, [r7, #24]
 8001392:	4b82      	ldr	r3, [pc, #520]	; (800159c <MX_GPIO_Init+0x224>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001396:	4a81      	ldr	r2, [pc, #516]	; (800159c <MX_GPIO_Init+0x224>)
 8001398:	f043 0310 	orr.w	r3, r3, #16
 800139c:	6313      	str	r3, [r2, #48]	; 0x30
 800139e:	4b7f      	ldr	r3, [pc, #508]	; (800159c <MX_GPIO_Init+0x224>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a2:	f003 0310 	and.w	r3, r3, #16
 80013a6:	61bb      	str	r3, [r7, #24]
 80013a8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013aa:	2300      	movs	r3, #0
 80013ac:	617b      	str	r3, [r7, #20]
 80013ae:	4b7b      	ldr	r3, [pc, #492]	; (800159c <MX_GPIO_Init+0x224>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b2:	4a7a      	ldr	r2, [pc, #488]	; (800159c <MX_GPIO_Init+0x224>)
 80013b4:	f043 0304 	orr.w	r3, r3, #4
 80013b8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ba:	4b78      	ldr	r3, [pc, #480]	; (800159c <MX_GPIO_Init+0x224>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013be:	f003 0304 	and.w	r3, r3, #4
 80013c2:	617b      	str	r3, [r7, #20]
 80013c4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013c6:	2300      	movs	r3, #0
 80013c8:	613b      	str	r3, [r7, #16]
 80013ca:	4b74      	ldr	r3, [pc, #464]	; (800159c <MX_GPIO_Init+0x224>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ce:	4a73      	ldr	r2, [pc, #460]	; (800159c <MX_GPIO_Init+0x224>)
 80013d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013d4:	6313      	str	r3, [r2, #48]	; 0x30
 80013d6:	4b71      	ldr	r3, [pc, #452]	; (800159c <MX_GPIO_Init+0x224>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013de:	613b      	str	r3, [r7, #16]
 80013e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e2:	2300      	movs	r3, #0
 80013e4:	60fb      	str	r3, [r7, #12]
 80013e6:	4b6d      	ldr	r3, [pc, #436]	; (800159c <MX_GPIO_Init+0x224>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ea:	4a6c      	ldr	r2, [pc, #432]	; (800159c <MX_GPIO_Init+0x224>)
 80013ec:	f043 0301 	orr.w	r3, r3, #1
 80013f0:	6313      	str	r3, [r2, #48]	; 0x30
 80013f2:	4b6a      	ldr	r3, [pc, #424]	; (800159c <MX_GPIO_Init+0x224>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f6:	f003 0301 	and.w	r3, r3, #1
 80013fa:	60fb      	str	r3, [r7, #12]
 80013fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013fe:	2300      	movs	r3, #0
 8001400:	60bb      	str	r3, [r7, #8]
 8001402:	4b66      	ldr	r3, [pc, #408]	; (800159c <MX_GPIO_Init+0x224>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001406:	4a65      	ldr	r2, [pc, #404]	; (800159c <MX_GPIO_Init+0x224>)
 8001408:	f043 0302 	orr.w	r3, r3, #2
 800140c:	6313      	str	r3, [r2, #48]	; 0x30
 800140e:	4b63      	ldr	r3, [pc, #396]	; (800159c <MX_GPIO_Init+0x224>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001412:	f003 0302 	and.w	r3, r3, #2
 8001416:	60bb      	str	r3, [r7, #8]
 8001418:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800141a:	2300      	movs	r3, #0
 800141c:	607b      	str	r3, [r7, #4]
 800141e:	4b5f      	ldr	r3, [pc, #380]	; (800159c <MX_GPIO_Init+0x224>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001422:	4a5e      	ldr	r2, [pc, #376]	; (800159c <MX_GPIO_Init+0x224>)
 8001424:	f043 0308 	orr.w	r3, r3, #8
 8001428:	6313      	str	r3, [r2, #48]	; 0x30
 800142a:	4b5c      	ldr	r3, [pc, #368]	; (800159c <MX_GPIO_Init+0x224>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142e:	f003 0308 	and.w	r3, r3, #8
 8001432:	607b      	str	r3, [r7, #4]
 8001434:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001436:	2200      	movs	r2, #0
 8001438:	2108      	movs	r1, #8
 800143a:	4859      	ldr	r0, [pc, #356]	; (80015a0 <MX_GPIO_Init+0x228>)
 800143c:	f000 fe86 	bl	800214c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001440:	2201      	movs	r2, #1
 8001442:	2101      	movs	r1, #1
 8001444:	4857      	ldr	r0, [pc, #348]	; (80015a4 <MX_GPIO_Init+0x22c>)
 8001446:	f000 fe81 	bl	800214c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800144a:	2200      	movs	r2, #0
 800144c:	f24f 0110 	movw	r1, #61456	; 0xf010
 8001450:	4855      	ldr	r0, [pc, #340]	; (80015a8 <MX_GPIO_Init+0x230>)
 8001452:	f000 fe7b 	bl	800214c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001456:	2304      	movs	r3, #4
 8001458:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800145a:	2300      	movs	r3, #0
 800145c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145e:	2300      	movs	r3, #0
 8001460:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001462:	f107 031c 	add.w	r3, r7, #28
 8001466:	4619      	mov	r1, r3
 8001468:	484d      	ldr	r0, [pc, #308]	; (80015a0 <MX_GPIO_Init+0x228>)
 800146a:	f000 fceb 	bl	8001e44 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800146e:	2308      	movs	r3, #8
 8001470:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001472:	2301      	movs	r3, #1
 8001474:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001476:	2300      	movs	r3, #0
 8001478:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800147a:	2302      	movs	r3, #2
 800147c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800147e:	f107 031c 	add.w	r3, r7, #28
 8001482:	4619      	mov	r1, r3
 8001484:	4846      	ldr	r0, [pc, #280]	; (80015a0 <MX_GPIO_Init+0x228>)
 8001486:	f000 fcdd 	bl	8001e44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE4 PE5 MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|MEMS_INT2_Pin;
 800148a:	2332      	movs	r3, #50	; 0x32
 800148c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800148e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001492:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001494:	2300      	movs	r3, #0
 8001496:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001498:	f107 031c 	add.w	r3, r7, #28
 800149c:	4619      	mov	r1, r3
 800149e:	4840      	ldr	r0, [pc, #256]	; (80015a0 <MX_GPIO_Init+0x228>)
 80014a0:	f000 fcd0 	bl	8001e44 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80014a4:	2301      	movs	r3, #1
 80014a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014a8:	2301      	movs	r3, #1
 80014aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ac:	2300      	movs	r3, #0
 80014ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b0:	2300      	movs	r3, #0
 80014b2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80014b4:	f107 031c 	add.w	r3, r7, #28
 80014b8:	4619      	mov	r1, r3
 80014ba:	483a      	ldr	r0, [pc, #232]	; (80015a4 <MX_GPIO_Init+0x22c>)
 80014bc:	f000 fcc2 	bl	8001e44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80014c0:	2308      	movs	r3, #8
 80014c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c4:	2302      	movs	r3, #2
 80014c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c8:	2300      	movs	r3, #0
 80014ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014cc:	2300      	movs	r3, #0
 80014ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80014d0:	2305      	movs	r3, #5
 80014d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80014d4:	f107 031c 	add.w	r3, r7, #28
 80014d8:	4619      	mov	r1, r3
 80014da:	4832      	ldr	r0, [pc, #200]	; (80015a4 <MX_GPIO_Init+0x22c>)
 80014dc:	f000 fcb2 	bl	8001e44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80014e0:	2301      	movs	r3, #1
 80014e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80014e4:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80014e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ea:	2300      	movs	r3, #0
 80014ec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ee:	f107 031c 	add.w	r3, r7, #28
 80014f2:	4619      	mov	r1, r3
 80014f4:	482d      	ldr	r0, [pc, #180]	; (80015ac <MX_GPIO_Init+0x234>)
 80014f6:	f000 fca5 	bl	8001e44 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80014fa:	2310      	movs	r3, #16
 80014fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014fe:	2302      	movs	r3, #2
 8001500:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001502:	2300      	movs	r3, #0
 8001504:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001506:	2300      	movs	r3, #0
 8001508:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800150a:	2306      	movs	r3, #6
 800150c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800150e:	f107 031c 	add.w	r3, r7, #28
 8001512:	4619      	mov	r1, r3
 8001514:	4825      	ldr	r0, [pc, #148]	; (80015ac <MX_GPIO_Init+0x234>)
 8001516:	f000 fc95 	bl	8001e44 <HAL_GPIO_Init>

  /*Configure GPIO pins : CLK_IN_Pin PB12 */
  GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 800151a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800151e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001520:	2302      	movs	r3, #2
 8001522:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001524:	2300      	movs	r3, #0
 8001526:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001528:	2300      	movs	r3, #0
 800152a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800152c:	2305      	movs	r3, #5
 800152e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001530:	f107 031c 	add.w	r3, r7, #28
 8001534:	4619      	mov	r1, r3
 8001536:	481e      	ldr	r0, [pc, #120]	; (80015b0 <MX_GPIO_Init+0x238>)
 8001538:	f000 fc84 	bl	8001e44 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800153c:	f24f 0310 	movw	r3, #61456	; 0xf010
 8001540:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001542:	2301      	movs	r3, #1
 8001544:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001546:	2300      	movs	r3, #0
 8001548:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800154a:	2300      	movs	r3, #0
 800154c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800154e:	f107 031c 	add.w	r3, r7, #28
 8001552:	4619      	mov	r1, r3
 8001554:	4814      	ldr	r0, [pc, #80]	; (80015a8 <MX_GPIO_Init+0x230>)
 8001556:	f000 fc75 	bl	8001e44 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800155a:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800155e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001560:	2302      	movs	r3, #2
 8001562:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001564:	2300      	movs	r3, #0
 8001566:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001568:	2300      	movs	r3, #0
 800156a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800156c:	2306      	movs	r3, #6
 800156e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001570:	f107 031c 	add.w	r3, r7, #28
 8001574:	4619      	mov	r1, r3
 8001576:	480b      	ldr	r0, [pc, #44]	; (80015a4 <MX_GPIO_Init+0x22c>)
 8001578:	f000 fc64 	bl	8001e44 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800157c:	2320      	movs	r3, #32
 800157e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001580:	2300      	movs	r3, #0
 8001582:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001584:	2300      	movs	r3, #0
 8001586:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001588:	f107 031c 	add.w	r3, r7, #28
 800158c:	4619      	mov	r1, r3
 800158e:	4806      	ldr	r0, [pc, #24]	; (80015a8 <MX_GPIO_Init+0x230>)
 8001590:	f000 fc58 	bl	8001e44 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001594:	bf00      	nop
 8001596:	3730      	adds	r7, #48	; 0x30
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	40023800 	.word	0x40023800
 80015a0:	40021000 	.word	0x40021000
 80015a4:	40020800 	.word	0x40020800
 80015a8:	40020c00 	.word	0x40020c00
 80015ac:	40020000 	.word	0x40020000
 80015b0:	40020400 	.word	0x40020400

080015b4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80015bc:	f00c f9ca 	bl	800d954 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80015c0:	2001      	movs	r0, #1
 80015c2:	f009 f94b 	bl	800a85c <osDelay>
 80015c6:	e7fb      	b.n	80015c0 <StartDefaultTask+0xc>

080015c8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a04      	ldr	r2, [pc, #16]	; (80015e8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d101      	bne.n	80015de <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80015da:	f000 fa7b 	bl	8001ad4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80015de:	bf00      	nop
 80015e0:	3708      	adds	r7, #8
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	40000800 	.word	0x40000800

080015ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015f0:	b672      	cpsid	i
}
 80015f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015f4:	e7fe      	b.n	80015f4 <Error_Handler+0x8>
	...

080015f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015fe:	2300      	movs	r3, #0
 8001600:	607b      	str	r3, [r7, #4]
 8001602:	4b12      	ldr	r3, [pc, #72]	; (800164c <HAL_MspInit+0x54>)
 8001604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001606:	4a11      	ldr	r2, [pc, #68]	; (800164c <HAL_MspInit+0x54>)
 8001608:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800160c:	6453      	str	r3, [r2, #68]	; 0x44
 800160e:	4b0f      	ldr	r3, [pc, #60]	; (800164c <HAL_MspInit+0x54>)
 8001610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001612:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001616:	607b      	str	r3, [r7, #4]
 8001618:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800161a:	2300      	movs	r3, #0
 800161c:	603b      	str	r3, [r7, #0]
 800161e:	4b0b      	ldr	r3, [pc, #44]	; (800164c <HAL_MspInit+0x54>)
 8001620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001622:	4a0a      	ldr	r2, [pc, #40]	; (800164c <HAL_MspInit+0x54>)
 8001624:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001628:	6413      	str	r3, [r2, #64]	; 0x40
 800162a:	4b08      	ldr	r3, [pc, #32]	; (800164c <HAL_MspInit+0x54>)
 800162c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001632:	603b      	str	r3, [r7, #0]
 8001634:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001636:	2200      	movs	r2, #0
 8001638:	210f      	movs	r1, #15
 800163a:	f06f 0001 	mvn.w	r0, #1
 800163e:	f000 fb45 	bl	8001ccc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001642:	bf00      	nop
 8001644:	3708      	adds	r7, #8
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	40023800 	.word	0x40023800

08001650 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b08a      	sub	sp, #40	; 0x28
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001658:	f107 0314 	add.w	r3, r7, #20
 800165c:	2200      	movs	r2, #0
 800165e:	601a      	str	r2, [r3, #0]
 8001660:	605a      	str	r2, [r3, #4]
 8001662:	609a      	str	r2, [r3, #8]
 8001664:	60da      	str	r2, [r3, #12]
 8001666:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a19      	ldr	r2, [pc, #100]	; (80016d4 <HAL_I2C_MspInit+0x84>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d12c      	bne.n	80016cc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001672:	2300      	movs	r3, #0
 8001674:	613b      	str	r3, [r7, #16]
 8001676:	4b18      	ldr	r3, [pc, #96]	; (80016d8 <HAL_I2C_MspInit+0x88>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167a:	4a17      	ldr	r2, [pc, #92]	; (80016d8 <HAL_I2C_MspInit+0x88>)
 800167c:	f043 0302 	orr.w	r3, r3, #2
 8001680:	6313      	str	r3, [r2, #48]	; 0x30
 8001682:	4b15      	ldr	r3, [pc, #84]	; (80016d8 <HAL_I2C_MspInit+0x88>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001686:	f003 0302 	and.w	r3, r3, #2
 800168a:	613b      	str	r3, [r7, #16]
 800168c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800168e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001692:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001694:	2312      	movs	r3, #18
 8001696:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001698:	2300      	movs	r3, #0
 800169a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800169c:	2300      	movs	r3, #0
 800169e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016a0:	2304      	movs	r3, #4
 80016a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016a4:	f107 0314 	add.w	r3, r7, #20
 80016a8:	4619      	mov	r1, r3
 80016aa:	480c      	ldr	r0, [pc, #48]	; (80016dc <HAL_I2C_MspInit+0x8c>)
 80016ac:	f000 fbca 	bl	8001e44 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016b0:	2300      	movs	r3, #0
 80016b2:	60fb      	str	r3, [r7, #12]
 80016b4:	4b08      	ldr	r3, [pc, #32]	; (80016d8 <HAL_I2C_MspInit+0x88>)
 80016b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b8:	4a07      	ldr	r2, [pc, #28]	; (80016d8 <HAL_I2C_MspInit+0x88>)
 80016ba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016be:	6413      	str	r3, [r2, #64]	; 0x40
 80016c0:	4b05      	ldr	r3, [pc, #20]	; (80016d8 <HAL_I2C_MspInit+0x88>)
 80016c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016c8:	60fb      	str	r3, [r7, #12]
 80016ca:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80016cc:	bf00      	nop
 80016ce:	3728      	adds	r7, #40	; 0x28
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	40005400 	.word	0x40005400
 80016d8:	40023800 	.word	0x40023800
 80016dc:	40020400 	.word	0x40020400

080016e0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b08a      	sub	sp, #40	; 0x28
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e8:	f107 0314 	add.w	r3, r7, #20
 80016ec:	2200      	movs	r2, #0
 80016ee:	601a      	str	r2, [r3, #0]
 80016f0:	605a      	str	r2, [r3, #4]
 80016f2:	609a      	str	r2, [r3, #8]
 80016f4:	60da      	str	r2, [r3, #12]
 80016f6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a19      	ldr	r2, [pc, #100]	; (8001764 <HAL_SPI_MspInit+0x84>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d12b      	bne.n	800175a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001702:	2300      	movs	r3, #0
 8001704:	613b      	str	r3, [r7, #16]
 8001706:	4b18      	ldr	r3, [pc, #96]	; (8001768 <HAL_SPI_MspInit+0x88>)
 8001708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800170a:	4a17      	ldr	r2, [pc, #92]	; (8001768 <HAL_SPI_MspInit+0x88>)
 800170c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001710:	6453      	str	r3, [r2, #68]	; 0x44
 8001712:	4b15      	ldr	r3, [pc, #84]	; (8001768 <HAL_SPI_MspInit+0x88>)
 8001714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001716:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800171a:	613b      	str	r3, [r7, #16]
 800171c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800171e:	2300      	movs	r3, #0
 8001720:	60fb      	str	r3, [r7, #12]
 8001722:	4b11      	ldr	r3, [pc, #68]	; (8001768 <HAL_SPI_MspInit+0x88>)
 8001724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001726:	4a10      	ldr	r2, [pc, #64]	; (8001768 <HAL_SPI_MspInit+0x88>)
 8001728:	f043 0301 	orr.w	r3, r3, #1
 800172c:	6313      	str	r3, [r2, #48]	; 0x30
 800172e:	4b0e      	ldr	r3, [pc, #56]	; (8001768 <HAL_SPI_MspInit+0x88>)
 8001730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001732:	f003 0301 	and.w	r3, r3, #1
 8001736:	60fb      	str	r3, [r7, #12]
 8001738:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800173a:	23e0      	movs	r3, #224	; 0xe0
 800173c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800173e:	2302      	movs	r3, #2
 8001740:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001742:	2300      	movs	r3, #0
 8001744:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001746:	2303      	movs	r3, #3
 8001748:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800174a:	2305      	movs	r3, #5
 800174c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800174e:	f107 0314 	add.w	r3, r7, #20
 8001752:	4619      	mov	r1, r3
 8001754:	4805      	ldr	r0, [pc, #20]	; (800176c <HAL_SPI_MspInit+0x8c>)
 8001756:	f000 fb75 	bl	8001e44 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800175a:	bf00      	nop
 800175c:	3728      	adds	r7, #40	; 0x28
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	40013000 	.word	0x40013000
 8001768:	40023800 	.word	0x40023800
 800176c:	40020000 	.word	0x40020000

08001770 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001770:	b480      	push	{r7}
 8001772:	b085      	sub	sp, #20
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a0b      	ldr	r2, [pc, #44]	; (80017ac <HAL_TIM_Base_MspInit+0x3c>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d10d      	bne.n	800179e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001782:	2300      	movs	r3, #0
 8001784:	60fb      	str	r3, [r7, #12]
 8001786:	4b0a      	ldr	r3, [pc, #40]	; (80017b0 <HAL_TIM_Base_MspInit+0x40>)
 8001788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800178a:	4a09      	ldr	r2, [pc, #36]	; (80017b0 <HAL_TIM_Base_MspInit+0x40>)
 800178c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001790:	6453      	str	r3, [r2, #68]	; 0x44
 8001792:	4b07      	ldr	r3, [pc, #28]	; (80017b0 <HAL_TIM_Base_MspInit+0x40>)
 8001794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800179a:	60fb      	str	r3, [r7, #12]
 800179c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 800179e:	bf00      	nop
 80017a0:	3714      	adds	r7, #20
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	40014400 	.word	0x40014400
 80017b0:	40023800 	.word	0x40023800

080017b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b08a      	sub	sp, #40	; 0x28
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017bc:	f107 0314 	add.w	r3, r7, #20
 80017c0:	2200      	movs	r2, #0
 80017c2:	601a      	str	r2, [r3, #0]
 80017c4:	605a      	str	r2, [r3, #4]
 80017c6:	609a      	str	r2, [r3, #8]
 80017c8:	60da      	str	r2, [r3, #12]
 80017ca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a1d      	ldr	r2, [pc, #116]	; (8001848 <HAL_UART_MspInit+0x94>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d133      	bne.n	800183e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80017d6:	2300      	movs	r3, #0
 80017d8:	613b      	str	r3, [r7, #16]
 80017da:	4b1c      	ldr	r3, [pc, #112]	; (800184c <HAL_UART_MspInit+0x98>)
 80017dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017de:	4a1b      	ldr	r2, [pc, #108]	; (800184c <HAL_UART_MspInit+0x98>)
 80017e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017e4:	6413      	str	r3, [r2, #64]	; 0x40
 80017e6:	4b19      	ldr	r3, [pc, #100]	; (800184c <HAL_UART_MspInit+0x98>)
 80017e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ee:	613b      	str	r3, [r7, #16]
 80017f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017f2:	2300      	movs	r3, #0
 80017f4:	60fb      	str	r3, [r7, #12]
 80017f6:	4b15      	ldr	r3, [pc, #84]	; (800184c <HAL_UART_MspInit+0x98>)
 80017f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fa:	4a14      	ldr	r2, [pc, #80]	; (800184c <HAL_UART_MspInit+0x98>)
 80017fc:	f043 0301 	orr.w	r3, r3, #1
 8001800:	6313      	str	r3, [r2, #48]	; 0x30
 8001802:	4b12      	ldr	r3, [pc, #72]	; (800184c <HAL_UART_MspInit+0x98>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001806:	f003 0301 	and.w	r3, r3, #1
 800180a:	60fb      	str	r3, [r7, #12]
 800180c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800180e:	230c      	movs	r3, #12
 8001810:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001812:	2302      	movs	r3, #2
 8001814:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001816:	2300      	movs	r3, #0
 8001818:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800181a:	2303      	movs	r3, #3
 800181c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800181e:	2307      	movs	r3, #7
 8001820:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001822:	f107 0314 	add.w	r3, r7, #20
 8001826:	4619      	mov	r1, r3
 8001828:	4809      	ldr	r0, [pc, #36]	; (8001850 <HAL_UART_MspInit+0x9c>)
 800182a:	f000 fb0b 	bl	8001e44 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800182e:	2200      	movs	r2, #0
 8001830:	2105      	movs	r1, #5
 8001832:	2026      	movs	r0, #38	; 0x26
 8001834:	f000 fa4a 	bl	8001ccc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001838:	2026      	movs	r0, #38	; 0x26
 800183a:	f000 fa63 	bl	8001d04 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800183e:	bf00      	nop
 8001840:	3728      	adds	r7, #40	; 0x28
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	40004400 	.word	0x40004400
 800184c:	40023800 	.word	0x40023800
 8001850:	40020000 	.word	0x40020000

08001854 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b08e      	sub	sp, #56	; 0x38
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800185c:	2300      	movs	r3, #0
 800185e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001860:	2300      	movs	r3, #0
 8001862:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001864:	2300      	movs	r3, #0
 8001866:	60fb      	str	r3, [r7, #12]
 8001868:	4b33      	ldr	r3, [pc, #204]	; (8001938 <HAL_InitTick+0xe4>)
 800186a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186c:	4a32      	ldr	r2, [pc, #200]	; (8001938 <HAL_InitTick+0xe4>)
 800186e:	f043 0304 	orr.w	r3, r3, #4
 8001872:	6413      	str	r3, [r2, #64]	; 0x40
 8001874:	4b30      	ldr	r3, [pc, #192]	; (8001938 <HAL_InitTick+0xe4>)
 8001876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001878:	f003 0304 	and.w	r3, r3, #4
 800187c:	60fb      	str	r3, [r7, #12]
 800187e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001880:	f107 0210 	add.w	r2, r7, #16
 8001884:	f107 0314 	add.w	r3, r7, #20
 8001888:	4611      	mov	r1, r2
 800188a:	4618      	mov	r0, r3
 800188c:	f003 fb4c 	bl	8004f28 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001890:	6a3b      	ldr	r3, [r7, #32]
 8001892:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001896:	2b00      	cmp	r3, #0
 8001898:	d103      	bne.n	80018a2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800189a:	f003 fb1d 	bl	8004ed8 <HAL_RCC_GetPCLK1Freq>
 800189e:	6378      	str	r0, [r7, #52]	; 0x34
 80018a0:	e004      	b.n	80018ac <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80018a2:	f003 fb19 	bl	8004ed8 <HAL_RCC_GetPCLK1Freq>
 80018a6:	4603      	mov	r3, r0
 80018a8:	005b      	lsls	r3, r3, #1
 80018aa:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80018ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018ae:	4a23      	ldr	r2, [pc, #140]	; (800193c <HAL_InitTick+0xe8>)
 80018b0:	fba2 2303 	umull	r2, r3, r2, r3
 80018b4:	0c9b      	lsrs	r3, r3, #18
 80018b6:	3b01      	subs	r3, #1
 80018b8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80018ba:	4b21      	ldr	r3, [pc, #132]	; (8001940 <HAL_InitTick+0xec>)
 80018bc:	4a21      	ldr	r2, [pc, #132]	; (8001944 <HAL_InitTick+0xf0>)
 80018be:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80018c0:	4b1f      	ldr	r3, [pc, #124]	; (8001940 <HAL_InitTick+0xec>)
 80018c2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80018c6:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80018c8:	4a1d      	ldr	r2, [pc, #116]	; (8001940 <HAL_InitTick+0xec>)
 80018ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018cc:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80018ce:	4b1c      	ldr	r3, [pc, #112]	; (8001940 <HAL_InitTick+0xec>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018d4:	4b1a      	ldr	r3, [pc, #104]	; (8001940 <HAL_InitTick+0xec>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018da:	4b19      	ldr	r3, [pc, #100]	; (8001940 <HAL_InitTick+0xec>)
 80018dc:	2200      	movs	r2, #0
 80018de:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 80018e0:	4817      	ldr	r0, [pc, #92]	; (8001940 <HAL_InitTick+0xec>)
 80018e2:	f004 f8fb 	bl	8005adc <HAL_TIM_Base_Init>
 80018e6:	4603      	mov	r3, r0
 80018e8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80018ec:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d11b      	bne.n	800192c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 80018f4:	4812      	ldr	r0, [pc, #72]	; (8001940 <HAL_InitTick+0xec>)
 80018f6:	f004 f941 	bl	8005b7c <HAL_TIM_Base_Start_IT>
 80018fa:	4603      	mov	r3, r0
 80018fc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001900:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001904:	2b00      	cmp	r3, #0
 8001906:	d111      	bne.n	800192c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001908:	201e      	movs	r0, #30
 800190a:	f000 f9fb 	bl	8001d04 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2b0f      	cmp	r3, #15
 8001912:	d808      	bhi.n	8001926 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8001914:	2200      	movs	r2, #0
 8001916:	6879      	ldr	r1, [r7, #4]
 8001918:	201e      	movs	r0, #30
 800191a:	f000 f9d7 	bl	8001ccc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800191e:	4a0a      	ldr	r2, [pc, #40]	; (8001948 <HAL_InitTick+0xf4>)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6013      	str	r3, [r2, #0]
 8001924:	e002      	b.n	800192c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800192c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001930:	4618      	mov	r0, r3
 8001932:	3738      	adds	r7, #56	; 0x38
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	40023800 	.word	0x40023800
 800193c:	431bde83 	.word	0x431bde83
 8001940:	200002b8 	.word	0x200002b8
 8001944:	40000800 	.word	0x40000800
 8001948:	20000004 	.word	0x20000004

0800194c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001950:	e7fe      	b.n	8001950 <NMI_Handler+0x4>

08001952 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001952:	b480      	push	{r7}
 8001954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001956:	e7fe      	b.n	8001956 <HardFault_Handler+0x4>

08001958 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800195c:	e7fe      	b.n	800195c <MemManage_Handler+0x4>

0800195e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800195e:	b480      	push	{r7}
 8001960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001962:	e7fe      	b.n	8001962 <BusFault_Handler+0x4>

08001964 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001968:	e7fe      	b.n	8001968 <UsageFault_Handler+0x4>

0800196a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800196a:	b480      	push	{r7}
 800196c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800196e:	bf00      	nop
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr

08001978 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800197c:	4802      	ldr	r0, [pc, #8]	; (8001988 <TIM4_IRQHandler+0x10>)
 800197e:	f004 f95f 	bl	8005c40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001982:	bf00      	nop
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	200002b8 	.word	0x200002b8

0800198c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800198c:	b590      	push	{r4, r7, lr}
 800198e:	b085      	sub	sp, #20
 8001990:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN USART2_IRQn 0 */
USART_QUEUE_RX_ISR_SNIPPET
 8001992:	4b19      	ldr	r3, [pc, #100]	; (80019f8 <USART2_IRQHandler+0x6c>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 0320 	and.w	r3, r3, #32
 800199a:	2b00      	cmp	r3, #0
 800199c:	d025      	beq.n	80019ea <USART2_IRQHandler+0x5e>
 800199e:	4b16      	ldr	r3, [pc, #88]	; (80019f8 <USART2_IRQHandler+0x6c>)
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	b2db      	uxtb	r3, r3
 80019a4:	4618      	mov	r0, r3
 80019a6:	f00b ff89 	bl	800d8bc <rx_queue_put>
 80019aa:	4b13      	ldr	r3, [pc, #76]	; (80019f8 <USART2_IRQHandler+0x6c>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a12      	ldr	r2, [pc, #72]	; (80019f8 <USART2_IRQHandler+0x6c>)
 80019b0:	f023 0320 	bic.w	r3, r3, #32
 80019b4:	6013      	str	r3, [r2, #0]
 80019b6:	2300      	movs	r3, #0
 80019b8:	607b      	str	r3, [r7, #4]
 80019ba:	f00b ffbf 	bl	800d93c <getTaskHandle>
 80019be:	4604      	mov	r4, r0
 80019c0:	f00b ff9e 	bl	800d900 <count>
 80019c4:	4601      	mov	r1, r0
 80019c6:	1d3b      	adds	r3, r7, #4
 80019c8:	9300      	str	r3, [sp, #0]
 80019ca:	2300      	movs	r3, #0
 80019cc:	2203      	movs	r2, #3
 80019ce:	4620      	mov	r0, r4
 80019d0:	f00a feb2 	bl	800c738 <xTaskGenericNotifyFromISR>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d007      	beq.n	80019ea <USART2_IRQHandler+0x5e>
 80019da:	4b08      	ldr	r3, [pc, #32]	; (80019fc <USART2_IRQHandler+0x70>)
 80019dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80019e0:	601a      	str	r2, [r3, #0]
 80019e2:	f3bf 8f4f 	dsb	sy
 80019e6:	f3bf 8f6f 	isb	sy
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80019ea:	4805      	ldr	r0, [pc, #20]	; (8001a00 <USART2_IRQHandler+0x74>)
 80019ec:	f004 fb3a 	bl	8006064 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80019f0:	bf00      	nop
 80019f2:	370c      	adds	r7, #12
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd90      	pop	{r4, r7, pc}
 80019f8:	40004400 	.word	0x40004400
 80019fc:	e000ed04 	.word	0xe000ed04
 8001a00:	20000260 	.word	0x20000260

08001a04 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001a08:	4802      	ldr	r0, [pc, #8]	; (8001a14 <OTG_FS_IRQHandler+0x10>)
 8001a0a:	f001 fcc8 	bl	800339e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001a0e:	bf00      	nop
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	200065ec 	.word	0x200065ec

08001a18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a1c:	4b06      	ldr	r3, [pc, #24]	; (8001a38 <SystemInit+0x20>)
 8001a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a22:	4a05      	ldr	r2, [pc, #20]	; (8001a38 <SystemInit+0x20>)
 8001a24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a2c:	bf00      	nop
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	e000ed00 	.word	0xe000ed00

08001a3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a74 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a40:	480d      	ldr	r0, [pc, #52]	; (8001a78 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a42:	490e      	ldr	r1, [pc, #56]	; (8001a7c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a44:	4a0e      	ldr	r2, [pc, #56]	; (8001a80 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a48:	e002      	b.n	8001a50 <LoopCopyDataInit>

08001a4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a4e:	3304      	adds	r3, #4

08001a50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a54:	d3f9      	bcc.n	8001a4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a56:	4a0b      	ldr	r2, [pc, #44]	; (8001a84 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001a58:	4c0b      	ldr	r4, [pc, #44]	; (8001a88 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001a5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a5c:	e001      	b.n	8001a62 <LoopFillZerobss>

08001a5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a60:	3204      	adds	r2, #4

08001a62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a64:	d3fb      	bcc.n	8001a5e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001a66:	f7ff ffd7 	bl	8001a18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a6a:	f00c fcef 	bl	800e44c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a6e:	f7ff fad1 	bl	8001014 <main>
  bx  lr    
 8001a72:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a74:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a7c:	20000150 	.word	0x20000150
  ldr r2, =_sidata
 8001a80:	0800e6a4 	.word	0x0800e6a4
  ldr r2, =_sbss
 8001a84:	20000150 	.word	0x20000150
  ldr r4, =_ebss
 8001a88:	20006e58 	.word	0x20006e58

08001a8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a8c:	e7fe      	b.n	8001a8c <ADC_IRQHandler>
	...

08001a90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a94:	4b0e      	ldr	r3, [pc, #56]	; (8001ad0 <HAL_Init+0x40>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a0d      	ldr	r2, [pc, #52]	; (8001ad0 <HAL_Init+0x40>)
 8001a9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a9e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001aa0:	4b0b      	ldr	r3, [pc, #44]	; (8001ad0 <HAL_Init+0x40>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a0a      	ldr	r2, [pc, #40]	; (8001ad0 <HAL_Init+0x40>)
 8001aa6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001aaa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001aac:	4b08      	ldr	r3, [pc, #32]	; (8001ad0 <HAL_Init+0x40>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a07      	ldr	r2, [pc, #28]	; (8001ad0 <HAL_Init+0x40>)
 8001ab2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ab6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ab8:	2003      	movs	r0, #3
 8001aba:	f000 f8fc 	bl	8001cb6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001abe:	200f      	movs	r0, #15
 8001ac0:	f7ff fec8 	bl	8001854 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ac4:	f7ff fd98 	bl	80015f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ac8:	2300      	movs	r3, #0
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	40023c00 	.word	0x40023c00

08001ad4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ad8:	4b06      	ldr	r3, [pc, #24]	; (8001af4 <HAL_IncTick+0x20>)
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	461a      	mov	r2, r3
 8001ade:	4b06      	ldr	r3, [pc, #24]	; (8001af8 <HAL_IncTick+0x24>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4413      	add	r3, r2
 8001ae4:	4a04      	ldr	r2, [pc, #16]	; (8001af8 <HAL_IncTick+0x24>)
 8001ae6:	6013      	str	r3, [r2, #0]
}
 8001ae8:	bf00      	nop
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	20000008 	.word	0x20000008
 8001af8:	20000300 	.word	0x20000300

08001afc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  return uwTick;
 8001b00:	4b03      	ldr	r3, [pc, #12]	; (8001b10 <HAL_GetTick+0x14>)
 8001b02:	681b      	ldr	r3, [r3, #0]
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	20000300 	.word	0x20000300

08001b14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b084      	sub	sp, #16
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b1c:	f7ff ffee 	bl	8001afc <HAL_GetTick>
 8001b20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b2c:	d005      	beq.n	8001b3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b2e:	4b0a      	ldr	r3, [pc, #40]	; (8001b58 <HAL_Delay+0x44>)
 8001b30:	781b      	ldrb	r3, [r3, #0]
 8001b32:	461a      	mov	r2, r3
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	4413      	add	r3, r2
 8001b38:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b3a:	bf00      	nop
 8001b3c:	f7ff ffde 	bl	8001afc <HAL_GetTick>
 8001b40:	4602      	mov	r2, r0
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	68fa      	ldr	r2, [r7, #12]
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d8f7      	bhi.n	8001b3c <HAL_Delay+0x28>
  {
  }
}
 8001b4c:	bf00      	nop
 8001b4e:	bf00      	nop
 8001b50:	3710      	adds	r7, #16
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	20000008 	.word	0x20000008

08001b5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b085      	sub	sp, #20
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	f003 0307 	and.w	r3, r3, #7
 8001b6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b6c:	4b0c      	ldr	r3, [pc, #48]	; (8001ba0 <__NVIC_SetPriorityGrouping+0x44>)
 8001b6e:	68db      	ldr	r3, [r3, #12]
 8001b70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b72:	68ba      	ldr	r2, [r7, #8]
 8001b74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b78:	4013      	ands	r3, r2
 8001b7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b8e:	4a04      	ldr	r2, [pc, #16]	; (8001ba0 <__NVIC_SetPriorityGrouping+0x44>)
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	60d3      	str	r3, [r2, #12]
}
 8001b94:	bf00      	nop
 8001b96:	3714      	adds	r7, #20
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr
 8001ba0:	e000ed00 	.word	0xe000ed00

08001ba4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ba8:	4b04      	ldr	r3, [pc, #16]	; (8001bbc <__NVIC_GetPriorityGrouping+0x18>)
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	0a1b      	lsrs	r3, r3, #8
 8001bae:	f003 0307 	and.w	r3, r3, #7
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr
 8001bbc:	e000ed00 	.word	0xe000ed00

08001bc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	db0b      	blt.n	8001bea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bd2:	79fb      	ldrb	r3, [r7, #7]
 8001bd4:	f003 021f 	and.w	r2, r3, #31
 8001bd8:	4907      	ldr	r1, [pc, #28]	; (8001bf8 <__NVIC_EnableIRQ+0x38>)
 8001bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bde:	095b      	lsrs	r3, r3, #5
 8001be0:	2001      	movs	r0, #1
 8001be2:	fa00 f202 	lsl.w	r2, r0, r2
 8001be6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001bea:	bf00      	nop
 8001bec:	370c      	adds	r7, #12
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	e000e100 	.word	0xe000e100

08001bfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	4603      	mov	r3, r0
 8001c04:	6039      	str	r1, [r7, #0]
 8001c06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	db0a      	blt.n	8001c26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	b2da      	uxtb	r2, r3
 8001c14:	490c      	ldr	r1, [pc, #48]	; (8001c48 <__NVIC_SetPriority+0x4c>)
 8001c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c1a:	0112      	lsls	r2, r2, #4
 8001c1c:	b2d2      	uxtb	r2, r2
 8001c1e:	440b      	add	r3, r1
 8001c20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c24:	e00a      	b.n	8001c3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	b2da      	uxtb	r2, r3
 8001c2a:	4908      	ldr	r1, [pc, #32]	; (8001c4c <__NVIC_SetPriority+0x50>)
 8001c2c:	79fb      	ldrb	r3, [r7, #7]
 8001c2e:	f003 030f 	and.w	r3, r3, #15
 8001c32:	3b04      	subs	r3, #4
 8001c34:	0112      	lsls	r2, r2, #4
 8001c36:	b2d2      	uxtb	r2, r2
 8001c38:	440b      	add	r3, r1
 8001c3a:	761a      	strb	r2, [r3, #24]
}
 8001c3c:	bf00      	nop
 8001c3e:	370c      	adds	r7, #12
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr
 8001c48:	e000e100 	.word	0xe000e100
 8001c4c:	e000ed00 	.word	0xe000ed00

08001c50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b089      	sub	sp, #36	; 0x24
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	60f8      	str	r0, [r7, #12]
 8001c58:	60b9      	str	r1, [r7, #8]
 8001c5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	f003 0307 	and.w	r3, r3, #7
 8001c62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c64:	69fb      	ldr	r3, [r7, #28]
 8001c66:	f1c3 0307 	rsb	r3, r3, #7
 8001c6a:	2b04      	cmp	r3, #4
 8001c6c:	bf28      	it	cs
 8001c6e:	2304      	movcs	r3, #4
 8001c70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	3304      	adds	r3, #4
 8001c76:	2b06      	cmp	r3, #6
 8001c78:	d902      	bls.n	8001c80 <NVIC_EncodePriority+0x30>
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	3b03      	subs	r3, #3
 8001c7e:	e000      	b.n	8001c82 <NVIC_EncodePriority+0x32>
 8001c80:	2300      	movs	r3, #0
 8001c82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c84:	f04f 32ff 	mov.w	r2, #4294967295
 8001c88:	69bb      	ldr	r3, [r7, #24]
 8001c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8e:	43da      	mvns	r2, r3
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	401a      	ands	r2, r3
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c98:	f04f 31ff 	mov.w	r1, #4294967295
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	fa01 f303 	lsl.w	r3, r1, r3
 8001ca2:	43d9      	mvns	r1, r3
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ca8:	4313      	orrs	r3, r2
         );
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3724      	adds	r7, #36	; 0x24
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr

08001cb6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cb6:	b580      	push	{r7, lr}
 8001cb8:	b082      	sub	sp, #8
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f7ff ff4c 	bl	8001b5c <__NVIC_SetPriorityGrouping>
}
 8001cc4:	bf00      	nop
 8001cc6:	3708      	adds	r7, #8
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}

08001ccc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b086      	sub	sp, #24
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	60b9      	str	r1, [r7, #8]
 8001cd6:	607a      	str	r2, [r7, #4]
 8001cd8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cde:	f7ff ff61 	bl	8001ba4 <__NVIC_GetPriorityGrouping>
 8001ce2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ce4:	687a      	ldr	r2, [r7, #4]
 8001ce6:	68b9      	ldr	r1, [r7, #8]
 8001ce8:	6978      	ldr	r0, [r7, #20]
 8001cea:	f7ff ffb1 	bl	8001c50 <NVIC_EncodePriority>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cf4:	4611      	mov	r1, r2
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f7ff ff80 	bl	8001bfc <__NVIC_SetPriority>
}
 8001cfc:	bf00      	nop
 8001cfe:	3718      	adds	r7, #24
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}

08001d04 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d12:	4618      	mov	r0, r3
 8001d14:	f7ff ff54 	bl	8001bc0 <__NVIC_EnableIRQ>
}
 8001d18:	bf00      	nop
 8001d1a:	3708      	adds	r7, #8
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}

08001d20 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b084      	sub	sp, #16
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d2c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001d2e:	f7ff fee5 	bl	8001afc <HAL_GetTick>
 8001d32:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d3a:	b2db      	uxtb	r3, r3
 8001d3c:	2b02      	cmp	r3, #2
 8001d3e:	d008      	beq.n	8001d52 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2280      	movs	r2, #128	; 0x80
 8001d44:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e052      	b.n	8001df8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f022 0216 	bic.w	r2, r2, #22
 8001d60:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	695a      	ldr	r2, [r3, #20]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d70:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d103      	bne.n	8001d82 <HAL_DMA_Abort+0x62>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d007      	beq.n	8001d92 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f022 0208 	bic.w	r2, r2, #8
 8001d90:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f022 0201 	bic.w	r2, r2, #1
 8001da0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001da2:	e013      	b.n	8001dcc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001da4:	f7ff feaa 	bl	8001afc <HAL_GetTick>
 8001da8:	4602      	mov	r2, r0
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	2b05      	cmp	r3, #5
 8001db0:	d90c      	bls.n	8001dcc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2220      	movs	r2, #32
 8001db6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2203      	movs	r2, #3
 8001dbc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001dc8:	2303      	movs	r3, #3
 8001dca:	e015      	b.n	8001df8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 0301 	and.w	r3, r3, #1
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d1e4      	bne.n	8001da4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dde:	223f      	movs	r2, #63	; 0x3f
 8001de0:	409a      	lsls	r2, r3
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2201      	movs	r2, #1
 8001dea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2200      	movs	r2, #0
 8001df2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001df6:	2300      	movs	r3, #0
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	3710      	adds	r7, #16
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}

08001e00 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	2b02      	cmp	r3, #2
 8001e12:	d004      	beq.n	8001e1e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2280      	movs	r2, #128	; 0x80
 8001e18:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e00c      	b.n	8001e38 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2205      	movs	r2, #5
 8001e22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f022 0201 	bic.w	r2, r2, #1
 8001e34:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001e36:	2300      	movs	r3, #0
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	370c      	adds	r7, #12
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr

08001e44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b089      	sub	sp, #36	; 0x24
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e52:	2300      	movs	r3, #0
 8001e54:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e56:	2300      	movs	r3, #0
 8001e58:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	61fb      	str	r3, [r7, #28]
 8001e5e:	e159      	b.n	8002114 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e60:	2201      	movs	r2, #1
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	fa02 f303 	lsl.w	r3, r2, r3
 8001e68:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	697a      	ldr	r2, [r7, #20]
 8001e70:	4013      	ands	r3, r2
 8001e72:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e74:	693a      	ldr	r2, [r7, #16]
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	f040 8148 	bne.w	800210e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	f003 0303 	and.w	r3, r3, #3
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d005      	beq.n	8001e96 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e92:	2b02      	cmp	r3, #2
 8001e94:	d130      	bne.n	8001ef8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e9c:	69fb      	ldr	r3, [r7, #28]
 8001e9e:	005b      	lsls	r3, r3, #1
 8001ea0:	2203      	movs	r2, #3
 8001ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea6:	43db      	mvns	r3, r3
 8001ea8:	69ba      	ldr	r2, [r7, #24]
 8001eaa:	4013      	ands	r3, r2
 8001eac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	68da      	ldr	r2, [r3, #12]
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	005b      	lsls	r3, r3, #1
 8001eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eba:	69ba      	ldr	r2, [r7, #24]
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	69ba      	ldr	r2, [r7, #24]
 8001ec4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ecc:	2201      	movs	r2, #1
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed4:	43db      	mvns	r3, r3
 8001ed6:	69ba      	ldr	r2, [r7, #24]
 8001ed8:	4013      	ands	r3, r2
 8001eda:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	091b      	lsrs	r3, r3, #4
 8001ee2:	f003 0201 	and.w	r2, r3, #1
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eec:	69ba      	ldr	r2, [r7, #24]
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	69ba      	ldr	r2, [r7, #24]
 8001ef6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f003 0303 	and.w	r3, r3, #3
 8001f00:	2b03      	cmp	r3, #3
 8001f02:	d017      	beq.n	8001f34 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	005b      	lsls	r3, r3, #1
 8001f0e:	2203      	movs	r2, #3
 8001f10:	fa02 f303 	lsl.w	r3, r2, r3
 8001f14:	43db      	mvns	r3, r3
 8001f16:	69ba      	ldr	r2, [r7, #24]
 8001f18:	4013      	ands	r3, r2
 8001f1a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	689a      	ldr	r2, [r3, #8]
 8001f20:	69fb      	ldr	r3, [r7, #28]
 8001f22:	005b      	lsls	r3, r3, #1
 8001f24:	fa02 f303 	lsl.w	r3, r2, r3
 8001f28:	69ba      	ldr	r2, [r7, #24]
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	69ba      	ldr	r2, [r7, #24]
 8001f32:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	f003 0303 	and.w	r3, r3, #3
 8001f3c:	2b02      	cmp	r3, #2
 8001f3e:	d123      	bne.n	8001f88 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f40:	69fb      	ldr	r3, [r7, #28]
 8001f42:	08da      	lsrs	r2, r3, #3
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	3208      	adds	r2, #8
 8001f48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	f003 0307 	and.w	r3, r3, #7
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	220f      	movs	r2, #15
 8001f58:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5c:	43db      	mvns	r3, r3
 8001f5e:	69ba      	ldr	r2, [r7, #24]
 8001f60:	4013      	ands	r3, r2
 8001f62:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	691a      	ldr	r2, [r3, #16]
 8001f68:	69fb      	ldr	r3, [r7, #28]
 8001f6a:	f003 0307 	and.w	r3, r3, #7
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	fa02 f303 	lsl.w	r3, r2, r3
 8001f74:	69ba      	ldr	r2, [r7, #24]
 8001f76:	4313      	orrs	r3, r2
 8001f78:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	08da      	lsrs	r2, r3, #3
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	3208      	adds	r2, #8
 8001f82:	69b9      	ldr	r1, [r7, #24]
 8001f84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	005b      	lsls	r3, r3, #1
 8001f92:	2203      	movs	r2, #3
 8001f94:	fa02 f303 	lsl.w	r3, r2, r3
 8001f98:	43db      	mvns	r3, r3
 8001f9a:	69ba      	ldr	r2, [r7, #24]
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f003 0203 	and.w	r2, r3, #3
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	005b      	lsls	r3, r3, #1
 8001fac:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb0:	69ba      	ldr	r2, [r7, #24]
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	69ba      	ldr	r2, [r7, #24]
 8001fba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	f000 80a2 	beq.w	800210e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fca:	2300      	movs	r3, #0
 8001fcc:	60fb      	str	r3, [r7, #12]
 8001fce:	4b57      	ldr	r3, [pc, #348]	; (800212c <HAL_GPIO_Init+0x2e8>)
 8001fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fd2:	4a56      	ldr	r2, [pc, #344]	; (800212c <HAL_GPIO_Init+0x2e8>)
 8001fd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fd8:	6453      	str	r3, [r2, #68]	; 0x44
 8001fda:	4b54      	ldr	r3, [pc, #336]	; (800212c <HAL_GPIO_Init+0x2e8>)
 8001fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fe2:	60fb      	str	r3, [r7, #12]
 8001fe4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fe6:	4a52      	ldr	r2, [pc, #328]	; (8002130 <HAL_GPIO_Init+0x2ec>)
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	089b      	lsrs	r3, r3, #2
 8001fec:	3302      	adds	r3, #2
 8001fee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ff2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ff4:	69fb      	ldr	r3, [r7, #28]
 8001ff6:	f003 0303 	and.w	r3, r3, #3
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	220f      	movs	r2, #15
 8001ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8002002:	43db      	mvns	r3, r3
 8002004:	69ba      	ldr	r2, [r7, #24]
 8002006:	4013      	ands	r3, r2
 8002008:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4a49      	ldr	r2, [pc, #292]	; (8002134 <HAL_GPIO_Init+0x2f0>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d019      	beq.n	8002046 <HAL_GPIO_Init+0x202>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4a48      	ldr	r2, [pc, #288]	; (8002138 <HAL_GPIO_Init+0x2f4>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d013      	beq.n	8002042 <HAL_GPIO_Init+0x1fe>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4a47      	ldr	r2, [pc, #284]	; (800213c <HAL_GPIO_Init+0x2f8>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d00d      	beq.n	800203e <HAL_GPIO_Init+0x1fa>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4a46      	ldr	r2, [pc, #280]	; (8002140 <HAL_GPIO_Init+0x2fc>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d007      	beq.n	800203a <HAL_GPIO_Init+0x1f6>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4a45      	ldr	r2, [pc, #276]	; (8002144 <HAL_GPIO_Init+0x300>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d101      	bne.n	8002036 <HAL_GPIO_Init+0x1f2>
 8002032:	2304      	movs	r3, #4
 8002034:	e008      	b.n	8002048 <HAL_GPIO_Init+0x204>
 8002036:	2307      	movs	r3, #7
 8002038:	e006      	b.n	8002048 <HAL_GPIO_Init+0x204>
 800203a:	2303      	movs	r3, #3
 800203c:	e004      	b.n	8002048 <HAL_GPIO_Init+0x204>
 800203e:	2302      	movs	r3, #2
 8002040:	e002      	b.n	8002048 <HAL_GPIO_Init+0x204>
 8002042:	2301      	movs	r3, #1
 8002044:	e000      	b.n	8002048 <HAL_GPIO_Init+0x204>
 8002046:	2300      	movs	r3, #0
 8002048:	69fa      	ldr	r2, [r7, #28]
 800204a:	f002 0203 	and.w	r2, r2, #3
 800204e:	0092      	lsls	r2, r2, #2
 8002050:	4093      	lsls	r3, r2
 8002052:	69ba      	ldr	r2, [r7, #24]
 8002054:	4313      	orrs	r3, r2
 8002056:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002058:	4935      	ldr	r1, [pc, #212]	; (8002130 <HAL_GPIO_Init+0x2ec>)
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	089b      	lsrs	r3, r3, #2
 800205e:	3302      	adds	r3, #2
 8002060:	69ba      	ldr	r2, [r7, #24]
 8002062:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002066:	4b38      	ldr	r3, [pc, #224]	; (8002148 <HAL_GPIO_Init+0x304>)
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	43db      	mvns	r3, r3
 8002070:	69ba      	ldr	r2, [r7, #24]
 8002072:	4013      	ands	r3, r2
 8002074:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800207e:	2b00      	cmp	r3, #0
 8002080:	d003      	beq.n	800208a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002082:	69ba      	ldr	r2, [r7, #24]
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	4313      	orrs	r3, r2
 8002088:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800208a:	4a2f      	ldr	r2, [pc, #188]	; (8002148 <HAL_GPIO_Init+0x304>)
 800208c:	69bb      	ldr	r3, [r7, #24]
 800208e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002090:	4b2d      	ldr	r3, [pc, #180]	; (8002148 <HAL_GPIO_Init+0x304>)
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	43db      	mvns	r3, r3
 800209a:	69ba      	ldr	r2, [r7, #24]
 800209c:	4013      	ands	r3, r2
 800209e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d003      	beq.n	80020b4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80020ac:	69ba      	ldr	r2, [r7, #24]
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	4313      	orrs	r3, r2
 80020b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020b4:	4a24      	ldr	r2, [pc, #144]	; (8002148 <HAL_GPIO_Init+0x304>)
 80020b6:	69bb      	ldr	r3, [r7, #24]
 80020b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80020ba:	4b23      	ldr	r3, [pc, #140]	; (8002148 <HAL_GPIO_Init+0x304>)
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	43db      	mvns	r3, r3
 80020c4:	69ba      	ldr	r2, [r7, #24]
 80020c6:	4013      	ands	r3, r2
 80020c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d003      	beq.n	80020de <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80020d6:	69ba      	ldr	r2, [r7, #24]
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	4313      	orrs	r3, r2
 80020dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020de:	4a1a      	ldr	r2, [pc, #104]	; (8002148 <HAL_GPIO_Init+0x304>)
 80020e0:	69bb      	ldr	r3, [r7, #24]
 80020e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020e4:	4b18      	ldr	r3, [pc, #96]	; (8002148 <HAL_GPIO_Init+0x304>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	43db      	mvns	r3, r3
 80020ee:	69ba      	ldr	r2, [r7, #24]
 80020f0:	4013      	ands	r3, r2
 80020f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d003      	beq.n	8002108 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002100:	69ba      	ldr	r2, [r7, #24]
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	4313      	orrs	r3, r2
 8002106:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002108:	4a0f      	ldr	r2, [pc, #60]	; (8002148 <HAL_GPIO_Init+0x304>)
 800210a:	69bb      	ldr	r3, [r7, #24]
 800210c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	3301      	adds	r3, #1
 8002112:	61fb      	str	r3, [r7, #28]
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	2b0f      	cmp	r3, #15
 8002118:	f67f aea2 	bls.w	8001e60 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800211c:	bf00      	nop
 800211e:	bf00      	nop
 8002120:	3724      	adds	r7, #36	; 0x24
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr
 800212a:	bf00      	nop
 800212c:	40023800 	.word	0x40023800
 8002130:	40013800 	.word	0x40013800
 8002134:	40020000 	.word	0x40020000
 8002138:	40020400 	.word	0x40020400
 800213c:	40020800 	.word	0x40020800
 8002140:	40020c00 	.word	0x40020c00
 8002144:	40021000 	.word	0x40021000
 8002148:	40013c00 	.word	0x40013c00

0800214c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
 8002154:	460b      	mov	r3, r1
 8002156:	807b      	strh	r3, [r7, #2]
 8002158:	4613      	mov	r3, r2
 800215a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800215c:	787b      	ldrb	r3, [r7, #1]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d003      	beq.n	800216a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002162:	887a      	ldrh	r2, [r7, #2]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002168:	e003      	b.n	8002172 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800216a:	887b      	ldrh	r3, [r7, #2]
 800216c:	041a      	lsls	r2, r3, #16
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	619a      	str	r2, [r3, #24]
}
 8002172:	bf00      	nop
 8002174:	370c      	adds	r7, #12
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
	...

08002180 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b084      	sub	sp, #16
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d101      	bne.n	8002192 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e12b      	b.n	80023ea <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002198:	b2db      	uxtb	r3, r3
 800219a:	2b00      	cmp	r3, #0
 800219c:	d106      	bne.n	80021ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2200      	movs	r2, #0
 80021a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f7ff fa52 	bl	8001650 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2224      	movs	r2, #36	; 0x24
 80021b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f022 0201 	bic.w	r2, r2, #1
 80021c2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80021d2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80021e2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80021e4:	f002 fe78 	bl	8004ed8 <HAL_RCC_GetPCLK1Freq>
 80021e8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	4a81      	ldr	r2, [pc, #516]	; (80023f4 <HAL_I2C_Init+0x274>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d807      	bhi.n	8002204 <HAL_I2C_Init+0x84>
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	4a80      	ldr	r2, [pc, #512]	; (80023f8 <HAL_I2C_Init+0x278>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	bf94      	ite	ls
 80021fc:	2301      	movls	r3, #1
 80021fe:	2300      	movhi	r3, #0
 8002200:	b2db      	uxtb	r3, r3
 8002202:	e006      	b.n	8002212 <HAL_I2C_Init+0x92>
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	4a7d      	ldr	r2, [pc, #500]	; (80023fc <HAL_I2C_Init+0x27c>)
 8002208:	4293      	cmp	r3, r2
 800220a:	bf94      	ite	ls
 800220c:	2301      	movls	r3, #1
 800220e:	2300      	movhi	r3, #0
 8002210:	b2db      	uxtb	r3, r3
 8002212:	2b00      	cmp	r3, #0
 8002214:	d001      	beq.n	800221a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e0e7      	b.n	80023ea <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	4a78      	ldr	r2, [pc, #480]	; (8002400 <HAL_I2C_Init+0x280>)
 800221e:	fba2 2303 	umull	r2, r3, r2, r3
 8002222:	0c9b      	lsrs	r3, r3, #18
 8002224:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	68ba      	ldr	r2, [r7, #8]
 8002236:	430a      	orrs	r2, r1
 8002238:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	6a1b      	ldr	r3, [r3, #32]
 8002240:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	4a6a      	ldr	r2, [pc, #424]	; (80023f4 <HAL_I2C_Init+0x274>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d802      	bhi.n	8002254 <HAL_I2C_Init+0xd4>
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	3301      	adds	r3, #1
 8002252:	e009      	b.n	8002268 <HAL_I2C_Init+0xe8>
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800225a:	fb02 f303 	mul.w	r3, r2, r3
 800225e:	4a69      	ldr	r2, [pc, #420]	; (8002404 <HAL_I2C_Init+0x284>)
 8002260:	fba2 2303 	umull	r2, r3, r2, r3
 8002264:	099b      	lsrs	r3, r3, #6
 8002266:	3301      	adds	r3, #1
 8002268:	687a      	ldr	r2, [r7, #4]
 800226a:	6812      	ldr	r2, [r2, #0]
 800226c:	430b      	orrs	r3, r1
 800226e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	69db      	ldr	r3, [r3, #28]
 8002276:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800227a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	495c      	ldr	r1, [pc, #368]	; (80023f4 <HAL_I2C_Init+0x274>)
 8002284:	428b      	cmp	r3, r1
 8002286:	d819      	bhi.n	80022bc <HAL_I2C_Init+0x13c>
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	1e59      	subs	r1, r3, #1
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	005b      	lsls	r3, r3, #1
 8002292:	fbb1 f3f3 	udiv	r3, r1, r3
 8002296:	1c59      	adds	r1, r3, #1
 8002298:	f640 73fc 	movw	r3, #4092	; 0xffc
 800229c:	400b      	ands	r3, r1
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d00a      	beq.n	80022b8 <HAL_I2C_Init+0x138>
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	1e59      	subs	r1, r3, #1
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	005b      	lsls	r3, r3, #1
 80022ac:	fbb1 f3f3 	udiv	r3, r1, r3
 80022b0:	3301      	adds	r3, #1
 80022b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022b6:	e051      	b.n	800235c <HAL_I2C_Init+0x1dc>
 80022b8:	2304      	movs	r3, #4
 80022ba:	e04f      	b.n	800235c <HAL_I2C_Init+0x1dc>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d111      	bne.n	80022e8 <HAL_I2C_Init+0x168>
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	1e58      	subs	r0, r3, #1
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6859      	ldr	r1, [r3, #4]
 80022cc:	460b      	mov	r3, r1
 80022ce:	005b      	lsls	r3, r3, #1
 80022d0:	440b      	add	r3, r1
 80022d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80022d6:	3301      	adds	r3, #1
 80022d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022dc:	2b00      	cmp	r3, #0
 80022de:	bf0c      	ite	eq
 80022e0:	2301      	moveq	r3, #1
 80022e2:	2300      	movne	r3, #0
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	e012      	b.n	800230e <HAL_I2C_Init+0x18e>
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	1e58      	subs	r0, r3, #1
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6859      	ldr	r1, [r3, #4]
 80022f0:	460b      	mov	r3, r1
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	440b      	add	r3, r1
 80022f6:	0099      	lsls	r1, r3, #2
 80022f8:	440b      	add	r3, r1
 80022fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80022fe:	3301      	adds	r3, #1
 8002300:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002304:	2b00      	cmp	r3, #0
 8002306:	bf0c      	ite	eq
 8002308:	2301      	moveq	r3, #1
 800230a:	2300      	movne	r3, #0
 800230c:	b2db      	uxtb	r3, r3
 800230e:	2b00      	cmp	r3, #0
 8002310:	d001      	beq.n	8002316 <HAL_I2C_Init+0x196>
 8002312:	2301      	movs	r3, #1
 8002314:	e022      	b.n	800235c <HAL_I2C_Init+0x1dc>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d10e      	bne.n	800233c <HAL_I2C_Init+0x1bc>
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	1e58      	subs	r0, r3, #1
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6859      	ldr	r1, [r3, #4]
 8002326:	460b      	mov	r3, r1
 8002328:	005b      	lsls	r3, r3, #1
 800232a:	440b      	add	r3, r1
 800232c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002330:	3301      	adds	r3, #1
 8002332:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002336:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800233a:	e00f      	b.n	800235c <HAL_I2C_Init+0x1dc>
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	1e58      	subs	r0, r3, #1
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6859      	ldr	r1, [r3, #4]
 8002344:	460b      	mov	r3, r1
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	440b      	add	r3, r1
 800234a:	0099      	lsls	r1, r3, #2
 800234c:	440b      	add	r3, r1
 800234e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002352:	3301      	adds	r3, #1
 8002354:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002358:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800235c:	6879      	ldr	r1, [r7, #4]
 800235e:	6809      	ldr	r1, [r1, #0]
 8002360:	4313      	orrs	r3, r2
 8002362:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	69da      	ldr	r2, [r3, #28]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6a1b      	ldr	r3, [r3, #32]
 8002376:	431a      	orrs	r2, r3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	430a      	orrs	r2, r1
 800237e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800238a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	6911      	ldr	r1, [r2, #16]
 8002392:	687a      	ldr	r2, [r7, #4]
 8002394:	68d2      	ldr	r2, [r2, #12]
 8002396:	4311      	orrs	r1, r2
 8002398:	687a      	ldr	r2, [r7, #4]
 800239a:	6812      	ldr	r2, [r2, #0]
 800239c:	430b      	orrs	r3, r1
 800239e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	68db      	ldr	r3, [r3, #12]
 80023a6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	695a      	ldr	r2, [r3, #20]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	699b      	ldr	r3, [r3, #24]
 80023b2:	431a      	orrs	r2, r3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	430a      	orrs	r2, r1
 80023ba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f042 0201 	orr.w	r2, r2, #1
 80023ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2200      	movs	r2, #0
 80023d0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2220      	movs	r2, #32
 80023d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2200      	movs	r2, #0
 80023de:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2200      	movs	r2, #0
 80023e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80023e8:	2300      	movs	r3, #0
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3710      	adds	r7, #16
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	000186a0 	.word	0x000186a0
 80023f8:	001e847f 	.word	0x001e847f
 80023fc:	003d08ff 	.word	0x003d08ff
 8002400:	431bde83 	.word	0x431bde83
 8002404:	10624dd3 	.word	0x10624dd3

08002408 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b088      	sub	sp, #32
 800240c:	af02      	add	r7, sp, #8
 800240e:	60f8      	str	r0, [r7, #12]
 8002410:	4608      	mov	r0, r1
 8002412:	4611      	mov	r1, r2
 8002414:	461a      	mov	r2, r3
 8002416:	4603      	mov	r3, r0
 8002418:	817b      	strh	r3, [r7, #10]
 800241a:	460b      	mov	r3, r1
 800241c:	813b      	strh	r3, [r7, #8]
 800241e:	4613      	mov	r3, r2
 8002420:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002422:	f7ff fb6b 	bl	8001afc <HAL_GetTick>
 8002426:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800242e:	b2db      	uxtb	r3, r3
 8002430:	2b20      	cmp	r3, #32
 8002432:	f040 80d9 	bne.w	80025e8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	9300      	str	r3, [sp, #0]
 800243a:	2319      	movs	r3, #25
 800243c:	2201      	movs	r2, #1
 800243e:	496d      	ldr	r1, [pc, #436]	; (80025f4 <HAL_I2C_Mem_Write+0x1ec>)
 8002440:	68f8      	ldr	r0, [r7, #12]
 8002442:	f000 fc7f 	bl	8002d44 <I2C_WaitOnFlagUntilTimeout>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d001      	beq.n	8002450 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800244c:	2302      	movs	r3, #2
 800244e:	e0cc      	b.n	80025ea <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002456:	2b01      	cmp	r3, #1
 8002458:	d101      	bne.n	800245e <HAL_I2C_Mem_Write+0x56>
 800245a:	2302      	movs	r3, #2
 800245c:	e0c5      	b.n	80025ea <HAL_I2C_Mem_Write+0x1e2>
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2201      	movs	r2, #1
 8002462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 0301 	and.w	r3, r3, #1
 8002470:	2b01      	cmp	r3, #1
 8002472:	d007      	beq.n	8002484 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f042 0201 	orr.w	r2, r2, #1
 8002482:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002492:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	2221      	movs	r2, #33	; 0x21
 8002498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	2240      	movs	r2, #64	; 0x40
 80024a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	2200      	movs	r2, #0
 80024a8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	6a3a      	ldr	r2, [r7, #32]
 80024ae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80024b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024ba:	b29a      	uxth	r2, r3
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	4a4d      	ldr	r2, [pc, #308]	; (80025f8 <HAL_I2C_Mem_Write+0x1f0>)
 80024c4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80024c6:	88f8      	ldrh	r0, [r7, #6]
 80024c8:	893a      	ldrh	r2, [r7, #8]
 80024ca:	8979      	ldrh	r1, [r7, #10]
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	9301      	str	r3, [sp, #4]
 80024d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024d2:	9300      	str	r3, [sp, #0]
 80024d4:	4603      	mov	r3, r0
 80024d6:	68f8      	ldr	r0, [r7, #12]
 80024d8:	f000 fab6 	bl	8002a48 <I2C_RequestMemoryWrite>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d052      	beq.n	8002588 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e081      	b.n	80025ea <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024e6:	697a      	ldr	r2, [r7, #20]
 80024e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80024ea:	68f8      	ldr	r0, [r7, #12]
 80024ec:	f000 fd00 	bl	8002ef0 <I2C_WaitOnTXEFlagUntilTimeout>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d00d      	beq.n	8002512 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fa:	2b04      	cmp	r3, #4
 80024fc:	d107      	bne.n	800250e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800250c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e06b      	b.n	80025ea <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002516:	781a      	ldrb	r2, [r3, #0]
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002522:	1c5a      	adds	r2, r3, #1
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800252c:	3b01      	subs	r3, #1
 800252e:	b29a      	uxth	r2, r3
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002538:	b29b      	uxth	r3, r3
 800253a:	3b01      	subs	r3, #1
 800253c:	b29a      	uxth	r2, r3
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	695b      	ldr	r3, [r3, #20]
 8002548:	f003 0304 	and.w	r3, r3, #4
 800254c:	2b04      	cmp	r3, #4
 800254e:	d11b      	bne.n	8002588 <HAL_I2C_Mem_Write+0x180>
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002554:	2b00      	cmp	r3, #0
 8002556:	d017      	beq.n	8002588 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800255c:	781a      	ldrb	r2, [r3, #0]
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002568:	1c5a      	adds	r2, r3, #1
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002572:	3b01      	subs	r3, #1
 8002574:	b29a      	uxth	r2, r3
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800257e:	b29b      	uxth	r3, r3
 8002580:	3b01      	subs	r3, #1
 8002582:	b29a      	uxth	r2, r3
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800258c:	2b00      	cmp	r3, #0
 800258e:	d1aa      	bne.n	80024e6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002590:	697a      	ldr	r2, [r7, #20]
 8002592:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002594:	68f8      	ldr	r0, [r7, #12]
 8002596:	f000 fcec 	bl	8002f72 <I2C_WaitOnBTFFlagUntilTimeout>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d00d      	beq.n	80025bc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a4:	2b04      	cmp	r3, #4
 80025a6:	d107      	bne.n	80025b8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025b6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e016      	b.n	80025ea <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2220      	movs	r2, #32
 80025d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2200      	movs	r2, #0
 80025d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2200      	movs	r2, #0
 80025e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80025e4:	2300      	movs	r3, #0
 80025e6:	e000      	b.n	80025ea <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80025e8:	2302      	movs	r3, #2
  }
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3718      	adds	r7, #24
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	00100002 	.word	0x00100002
 80025f8:	ffff0000 	.word	0xffff0000

080025fc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b08c      	sub	sp, #48	; 0x30
 8002600:	af02      	add	r7, sp, #8
 8002602:	60f8      	str	r0, [r7, #12]
 8002604:	4608      	mov	r0, r1
 8002606:	4611      	mov	r1, r2
 8002608:	461a      	mov	r2, r3
 800260a:	4603      	mov	r3, r0
 800260c:	817b      	strh	r3, [r7, #10]
 800260e:	460b      	mov	r3, r1
 8002610:	813b      	strh	r3, [r7, #8]
 8002612:	4613      	mov	r3, r2
 8002614:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002616:	f7ff fa71 	bl	8001afc <HAL_GetTick>
 800261a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002622:	b2db      	uxtb	r3, r3
 8002624:	2b20      	cmp	r3, #32
 8002626:	f040 8208 	bne.w	8002a3a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800262a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262c:	9300      	str	r3, [sp, #0]
 800262e:	2319      	movs	r3, #25
 8002630:	2201      	movs	r2, #1
 8002632:	497b      	ldr	r1, [pc, #492]	; (8002820 <HAL_I2C_Mem_Read+0x224>)
 8002634:	68f8      	ldr	r0, [r7, #12]
 8002636:	f000 fb85 	bl	8002d44 <I2C_WaitOnFlagUntilTimeout>
 800263a:	4603      	mov	r3, r0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d001      	beq.n	8002644 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002640:	2302      	movs	r3, #2
 8002642:	e1fb      	b.n	8002a3c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800264a:	2b01      	cmp	r3, #1
 800264c:	d101      	bne.n	8002652 <HAL_I2C_Mem_Read+0x56>
 800264e:	2302      	movs	r3, #2
 8002650:	e1f4      	b.n	8002a3c <HAL_I2C_Mem_Read+0x440>
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2201      	movs	r2, #1
 8002656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0301 	and.w	r3, r3, #1
 8002664:	2b01      	cmp	r3, #1
 8002666:	d007      	beq.n	8002678 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f042 0201 	orr.w	r2, r2, #1
 8002676:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002686:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2222      	movs	r2, #34	; 0x22
 800268c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2240      	movs	r2, #64	; 0x40
 8002694:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	2200      	movs	r2, #0
 800269c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026a2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80026a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026ae:	b29a      	uxth	r2, r3
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	4a5b      	ldr	r2, [pc, #364]	; (8002824 <HAL_I2C_Mem_Read+0x228>)
 80026b8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80026ba:	88f8      	ldrh	r0, [r7, #6]
 80026bc:	893a      	ldrh	r2, [r7, #8]
 80026be:	8979      	ldrh	r1, [r7, #10]
 80026c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c2:	9301      	str	r3, [sp, #4]
 80026c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026c6:	9300      	str	r3, [sp, #0]
 80026c8:	4603      	mov	r3, r0
 80026ca:	68f8      	ldr	r0, [r7, #12]
 80026cc:	f000 fa52 	bl	8002b74 <I2C_RequestMemoryRead>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d001      	beq.n	80026da <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e1b0      	b.n	8002a3c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d113      	bne.n	800270a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026e2:	2300      	movs	r3, #0
 80026e4:	623b      	str	r3, [r7, #32]
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	695b      	ldr	r3, [r3, #20]
 80026ec:	623b      	str	r3, [r7, #32]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	699b      	ldr	r3, [r3, #24]
 80026f4:	623b      	str	r3, [r7, #32]
 80026f6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002706:	601a      	str	r2, [r3, #0]
 8002708:	e184      	b.n	8002a14 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800270e:	2b01      	cmp	r3, #1
 8002710:	d11b      	bne.n	800274a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002720:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002722:	2300      	movs	r3, #0
 8002724:	61fb      	str	r3, [r7, #28]
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	695b      	ldr	r3, [r3, #20]
 800272c:	61fb      	str	r3, [r7, #28]
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	699b      	ldr	r3, [r3, #24]
 8002734:	61fb      	str	r3, [r7, #28]
 8002736:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002746:	601a      	str	r2, [r3, #0]
 8002748:	e164      	b.n	8002a14 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800274e:	2b02      	cmp	r3, #2
 8002750:	d11b      	bne.n	800278a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002760:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002770:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002772:	2300      	movs	r3, #0
 8002774:	61bb      	str	r3, [r7, #24]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	695b      	ldr	r3, [r3, #20]
 800277c:	61bb      	str	r3, [r7, #24]
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	699b      	ldr	r3, [r3, #24]
 8002784:	61bb      	str	r3, [r7, #24]
 8002786:	69bb      	ldr	r3, [r7, #24]
 8002788:	e144      	b.n	8002a14 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800278a:	2300      	movs	r3, #0
 800278c:	617b      	str	r3, [r7, #20]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	695b      	ldr	r3, [r3, #20]
 8002794:	617b      	str	r3, [r7, #20]
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	699b      	ldr	r3, [r3, #24]
 800279c:	617b      	str	r3, [r7, #20]
 800279e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80027a0:	e138      	b.n	8002a14 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027a6:	2b03      	cmp	r3, #3
 80027a8:	f200 80f1 	bhi.w	800298e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d123      	bne.n	80027fc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027b6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80027b8:	68f8      	ldr	r0, [r7, #12]
 80027ba:	f000 fc1b 	bl	8002ff4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d001      	beq.n	80027c8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	e139      	b.n	8002a3c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	691a      	ldr	r2, [r3, #16]
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d2:	b2d2      	uxtb	r2, r2
 80027d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027da:	1c5a      	adds	r2, r3, #1
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027e4:	3b01      	subs	r3, #1
 80027e6:	b29a      	uxth	r2, r3
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027f0:	b29b      	uxth	r3, r3
 80027f2:	3b01      	subs	r3, #1
 80027f4:	b29a      	uxth	r2, r3
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80027fa:	e10b      	b.n	8002a14 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002800:	2b02      	cmp	r3, #2
 8002802:	d14e      	bne.n	80028a2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002806:	9300      	str	r3, [sp, #0]
 8002808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800280a:	2200      	movs	r2, #0
 800280c:	4906      	ldr	r1, [pc, #24]	; (8002828 <HAL_I2C_Mem_Read+0x22c>)
 800280e:	68f8      	ldr	r0, [r7, #12]
 8002810:	f000 fa98 	bl	8002d44 <I2C_WaitOnFlagUntilTimeout>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d008      	beq.n	800282c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e10e      	b.n	8002a3c <HAL_I2C_Mem_Read+0x440>
 800281e:	bf00      	nop
 8002820:	00100002 	.word	0x00100002
 8002824:	ffff0000 	.word	0xffff0000
 8002828:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800283a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	691a      	ldr	r2, [r3, #16]
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002846:	b2d2      	uxtb	r2, r2
 8002848:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800284e:	1c5a      	adds	r2, r3, #1
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002858:	3b01      	subs	r3, #1
 800285a:	b29a      	uxth	r2, r3
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002864:	b29b      	uxth	r3, r3
 8002866:	3b01      	subs	r3, #1
 8002868:	b29a      	uxth	r2, r3
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	691a      	ldr	r2, [r3, #16]
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002878:	b2d2      	uxtb	r2, r2
 800287a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002880:	1c5a      	adds	r2, r3, #1
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800288a:	3b01      	subs	r3, #1
 800288c:	b29a      	uxth	r2, r3
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002896:	b29b      	uxth	r3, r3
 8002898:	3b01      	subs	r3, #1
 800289a:	b29a      	uxth	r2, r3
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	855a      	strh	r2, [r3, #42]	; 0x2a
 80028a0:	e0b8      	b.n	8002a14 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80028a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a4:	9300      	str	r3, [sp, #0]
 80028a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028a8:	2200      	movs	r2, #0
 80028aa:	4966      	ldr	r1, [pc, #408]	; (8002a44 <HAL_I2C_Mem_Read+0x448>)
 80028ac:	68f8      	ldr	r0, [r7, #12]
 80028ae:	f000 fa49 	bl	8002d44 <I2C_WaitOnFlagUntilTimeout>
 80028b2:	4603      	mov	r3, r0
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d001      	beq.n	80028bc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	e0bf      	b.n	8002a3c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	691a      	ldr	r2, [r3, #16]
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d6:	b2d2      	uxtb	r2, r2
 80028d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028de:	1c5a      	adds	r2, r3, #1
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028e8:	3b01      	subs	r3, #1
 80028ea:	b29a      	uxth	r2, r3
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028f4:	b29b      	uxth	r3, r3
 80028f6:	3b01      	subs	r3, #1
 80028f8:	b29a      	uxth	r2, r3
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80028fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002900:	9300      	str	r3, [sp, #0]
 8002902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002904:	2200      	movs	r2, #0
 8002906:	494f      	ldr	r1, [pc, #316]	; (8002a44 <HAL_I2C_Mem_Read+0x448>)
 8002908:	68f8      	ldr	r0, [r7, #12]
 800290a:	f000 fa1b 	bl	8002d44 <I2C_WaitOnFlagUntilTimeout>
 800290e:	4603      	mov	r3, r0
 8002910:	2b00      	cmp	r3, #0
 8002912:	d001      	beq.n	8002918 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e091      	b.n	8002a3c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002926:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	691a      	ldr	r2, [r3, #16]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002932:	b2d2      	uxtb	r2, r2
 8002934:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293a:	1c5a      	adds	r2, r3, #1
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002944:	3b01      	subs	r3, #1
 8002946:	b29a      	uxth	r2, r3
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002950:	b29b      	uxth	r3, r3
 8002952:	3b01      	subs	r3, #1
 8002954:	b29a      	uxth	r2, r3
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	691a      	ldr	r2, [r3, #16]
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002964:	b2d2      	uxtb	r2, r2
 8002966:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296c:	1c5a      	adds	r2, r3, #1
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002976:	3b01      	subs	r3, #1
 8002978:	b29a      	uxth	r2, r3
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002982:	b29b      	uxth	r3, r3
 8002984:	3b01      	subs	r3, #1
 8002986:	b29a      	uxth	r2, r3
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800298c:	e042      	b.n	8002a14 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800298e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002990:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002992:	68f8      	ldr	r0, [r7, #12]
 8002994:	f000 fb2e 	bl	8002ff4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002998:	4603      	mov	r3, r0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d001      	beq.n	80029a2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e04c      	b.n	8002a3c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	691a      	ldr	r2, [r3, #16]
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ac:	b2d2      	uxtb	r2, r2
 80029ae:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b4:	1c5a      	adds	r2, r3, #1
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029be:	3b01      	subs	r3, #1
 80029c0:	b29a      	uxth	r2, r3
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029ca:	b29b      	uxth	r3, r3
 80029cc:	3b01      	subs	r3, #1
 80029ce:	b29a      	uxth	r2, r3
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	695b      	ldr	r3, [r3, #20]
 80029da:	f003 0304 	and.w	r3, r3, #4
 80029de:	2b04      	cmp	r3, #4
 80029e0:	d118      	bne.n	8002a14 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	691a      	ldr	r2, [r3, #16]
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ec:	b2d2      	uxtb	r2, r2
 80029ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f4:	1c5a      	adds	r2, r3, #1
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029fe:	3b01      	subs	r3, #1
 8002a00:	b29a      	uxth	r2, r3
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a0a:	b29b      	uxth	r3, r3
 8002a0c:	3b01      	subs	r3, #1
 8002a0e:	b29a      	uxth	r2, r3
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	f47f aec2 	bne.w	80027a2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2220      	movs	r2, #32
 8002a22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2200      	movs	r2, #0
 8002a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002a36:	2300      	movs	r3, #0
 8002a38:	e000      	b.n	8002a3c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002a3a:	2302      	movs	r3, #2
  }
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	3728      	adds	r7, #40	; 0x28
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	00010004 	.word	0x00010004

08002a48 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b088      	sub	sp, #32
 8002a4c:	af02      	add	r7, sp, #8
 8002a4e:	60f8      	str	r0, [r7, #12]
 8002a50:	4608      	mov	r0, r1
 8002a52:	4611      	mov	r1, r2
 8002a54:	461a      	mov	r2, r3
 8002a56:	4603      	mov	r3, r0
 8002a58:	817b      	strh	r3, [r7, #10]
 8002a5a:	460b      	mov	r3, r1
 8002a5c:	813b      	strh	r3, [r7, #8]
 8002a5e:	4613      	mov	r3, r2
 8002a60:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a70:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a74:	9300      	str	r3, [sp, #0]
 8002a76:	6a3b      	ldr	r3, [r7, #32]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002a7e:	68f8      	ldr	r0, [r7, #12]
 8002a80:	f000 f960 	bl	8002d44 <I2C_WaitOnFlagUntilTimeout>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d00d      	beq.n	8002aa6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a98:	d103      	bne.n	8002aa2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002aa0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e05f      	b.n	8002b66 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002aa6:	897b      	ldrh	r3, [r7, #10]
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	461a      	mov	r2, r3
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002ab4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab8:	6a3a      	ldr	r2, [r7, #32]
 8002aba:	492d      	ldr	r1, [pc, #180]	; (8002b70 <I2C_RequestMemoryWrite+0x128>)
 8002abc:	68f8      	ldr	r0, [r7, #12]
 8002abe:	f000 f998 	bl	8002df2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d001      	beq.n	8002acc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e04c      	b.n	8002b66 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002acc:	2300      	movs	r3, #0
 8002ace:	617b      	str	r3, [r7, #20]
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	695b      	ldr	r3, [r3, #20]
 8002ad6:	617b      	str	r3, [r7, #20]
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	699b      	ldr	r3, [r3, #24]
 8002ade:	617b      	str	r3, [r7, #20]
 8002ae0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ae2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ae4:	6a39      	ldr	r1, [r7, #32]
 8002ae6:	68f8      	ldr	r0, [r7, #12]
 8002ae8:	f000 fa02 	bl	8002ef0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d00d      	beq.n	8002b0e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af6:	2b04      	cmp	r3, #4
 8002af8:	d107      	bne.n	8002b0a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b08:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e02b      	b.n	8002b66 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002b0e:	88fb      	ldrh	r3, [r7, #6]
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d105      	bne.n	8002b20 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002b14:	893b      	ldrh	r3, [r7, #8]
 8002b16:	b2da      	uxtb	r2, r3
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	611a      	str	r2, [r3, #16]
 8002b1e:	e021      	b.n	8002b64 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002b20:	893b      	ldrh	r3, [r7, #8]
 8002b22:	0a1b      	lsrs	r3, r3, #8
 8002b24:	b29b      	uxth	r3, r3
 8002b26:	b2da      	uxtb	r2, r3
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b30:	6a39      	ldr	r1, [r7, #32]
 8002b32:	68f8      	ldr	r0, [r7, #12]
 8002b34:	f000 f9dc 	bl	8002ef0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d00d      	beq.n	8002b5a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b42:	2b04      	cmp	r3, #4
 8002b44:	d107      	bne.n	8002b56 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b54:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e005      	b.n	8002b66 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002b5a:	893b      	ldrh	r3, [r7, #8]
 8002b5c:	b2da      	uxtb	r2, r3
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002b64:	2300      	movs	r3, #0
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3718      	adds	r7, #24
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	00010002 	.word	0x00010002

08002b74 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b088      	sub	sp, #32
 8002b78:	af02      	add	r7, sp, #8
 8002b7a:	60f8      	str	r0, [r7, #12]
 8002b7c:	4608      	mov	r0, r1
 8002b7e:	4611      	mov	r1, r2
 8002b80:	461a      	mov	r2, r3
 8002b82:	4603      	mov	r3, r0
 8002b84:	817b      	strh	r3, [r7, #10]
 8002b86:	460b      	mov	r3, r1
 8002b88:	813b      	strh	r3, [r7, #8]
 8002b8a:	4613      	mov	r3, r2
 8002b8c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002b9c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb0:	9300      	str	r3, [sp, #0]
 8002bb2:	6a3b      	ldr	r3, [r7, #32]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002bba:	68f8      	ldr	r0, [r7, #12]
 8002bbc:	f000 f8c2 	bl	8002d44 <I2C_WaitOnFlagUntilTimeout>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d00d      	beq.n	8002be2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bd4:	d103      	bne.n	8002bde <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bdc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002bde:	2303      	movs	r3, #3
 8002be0:	e0aa      	b.n	8002d38 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002be2:	897b      	ldrh	r3, [r7, #10]
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	461a      	mov	r2, r3
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002bf0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf4:	6a3a      	ldr	r2, [r7, #32]
 8002bf6:	4952      	ldr	r1, [pc, #328]	; (8002d40 <I2C_RequestMemoryRead+0x1cc>)
 8002bf8:	68f8      	ldr	r0, [r7, #12]
 8002bfa:	f000 f8fa 	bl	8002df2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d001      	beq.n	8002c08 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	e097      	b.n	8002d38 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c08:	2300      	movs	r3, #0
 8002c0a:	617b      	str	r3, [r7, #20]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	695b      	ldr	r3, [r3, #20]
 8002c12:	617b      	str	r3, [r7, #20]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	699b      	ldr	r3, [r3, #24]
 8002c1a:	617b      	str	r3, [r7, #20]
 8002c1c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c20:	6a39      	ldr	r1, [r7, #32]
 8002c22:	68f8      	ldr	r0, [r7, #12]
 8002c24:	f000 f964 	bl	8002ef0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d00d      	beq.n	8002c4a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c32:	2b04      	cmp	r3, #4
 8002c34:	d107      	bne.n	8002c46 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c44:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e076      	b.n	8002d38 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002c4a:	88fb      	ldrh	r3, [r7, #6]
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d105      	bne.n	8002c5c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002c50:	893b      	ldrh	r3, [r7, #8]
 8002c52:	b2da      	uxtb	r2, r3
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	611a      	str	r2, [r3, #16]
 8002c5a:	e021      	b.n	8002ca0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002c5c:	893b      	ldrh	r3, [r7, #8]
 8002c5e:	0a1b      	lsrs	r3, r3, #8
 8002c60:	b29b      	uxth	r3, r3
 8002c62:	b2da      	uxtb	r2, r3
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c6c:	6a39      	ldr	r1, [r7, #32]
 8002c6e:	68f8      	ldr	r0, [r7, #12]
 8002c70:	f000 f93e 	bl	8002ef0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d00d      	beq.n	8002c96 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7e:	2b04      	cmp	r3, #4
 8002c80:	d107      	bne.n	8002c92 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c90:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e050      	b.n	8002d38 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002c96:	893b      	ldrh	r3, [r7, #8]
 8002c98:	b2da      	uxtb	r2, r3
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ca0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ca2:	6a39      	ldr	r1, [r7, #32]
 8002ca4:	68f8      	ldr	r0, [r7, #12]
 8002ca6:	f000 f923 	bl	8002ef0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d00d      	beq.n	8002ccc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb4:	2b04      	cmp	r3, #4
 8002cb6:	d107      	bne.n	8002cc8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cc6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e035      	b.n	8002d38 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cda:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cde:	9300      	str	r3, [sp, #0]
 8002ce0:	6a3b      	ldr	r3, [r7, #32]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002ce8:	68f8      	ldr	r0, [r7, #12]
 8002cea:	f000 f82b 	bl	8002d44 <I2C_WaitOnFlagUntilTimeout>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d00d      	beq.n	8002d10 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d02:	d103      	bne.n	8002d0c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d0a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002d0c:	2303      	movs	r3, #3
 8002d0e:	e013      	b.n	8002d38 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002d10:	897b      	ldrh	r3, [r7, #10]
 8002d12:	b2db      	uxtb	r3, r3
 8002d14:	f043 0301 	orr.w	r3, r3, #1
 8002d18:	b2da      	uxtb	r2, r3
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d22:	6a3a      	ldr	r2, [r7, #32]
 8002d24:	4906      	ldr	r1, [pc, #24]	; (8002d40 <I2C_RequestMemoryRead+0x1cc>)
 8002d26:	68f8      	ldr	r0, [r7, #12]
 8002d28:	f000 f863 	bl	8002df2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d001      	beq.n	8002d36 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e000      	b.n	8002d38 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002d36:	2300      	movs	r3, #0
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	3718      	adds	r7, #24
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	00010002 	.word	0x00010002

08002d44 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b084      	sub	sp, #16
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	60f8      	str	r0, [r7, #12]
 8002d4c:	60b9      	str	r1, [r7, #8]
 8002d4e:	603b      	str	r3, [r7, #0]
 8002d50:	4613      	mov	r3, r2
 8002d52:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d54:	e025      	b.n	8002da2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d5c:	d021      	beq.n	8002da2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d5e:	f7fe fecd 	bl	8001afc <HAL_GetTick>
 8002d62:	4602      	mov	r2, r0
 8002d64:	69bb      	ldr	r3, [r7, #24]
 8002d66:	1ad3      	subs	r3, r2, r3
 8002d68:	683a      	ldr	r2, [r7, #0]
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d302      	bcc.n	8002d74 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d116      	bne.n	8002da2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2200      	movs	r2, #0
 8002d78:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2220      	movs	r2, #32
 8002d7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	2200      	movs	r2, #0
 8002d86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8e:	f043 0220 	orr.w	r2, r3, #32
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e023      	b.n	8002dea <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	0c1b      	lsrs	r3, r3, #16
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d10d      	bne.n	8002dc8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	695b      	ldr	r3, [r3, #20]
 8002db2:	43da      	mvns	r2, r3
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	4013      	ands	r3, r2
 8002db8:	b29b      	uxth	r3, r3
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	bf0c      	ite	eq
 8002dbe:	2301      	moveq	r3, #1
 8002dc0:	2300      	movne	r3, #0
 8002dc2:	b2db      	uxtb	r3, r3
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	e00c      	b.n	8002de2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	699b      	ldr	r3, [r3, #24]
 8002dce:	43da      	mvns	r2, r3
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	bf0c      	ite	eq
 8002dda:	2301      	moveq	r3, #1
 8002ddc:	2300      	movne	r3, #0
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	461a      	mov	r2, r3
 8002de2:	79fb      	ldrb	r3, [r7, #7]
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d0b6      	beq.n	8002d56 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002de8:	2300      	movs	r3, #0
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3710      	adds	r7, #16
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}

08002df2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002df2:	b580      	push	{r7, lr}
 8002df4:	b084      	sub	sp, #16
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	60f8      	str	r0, [r7, #12]
 8002dfa:	60b9      	str	r1, [r7, #8]
 8002dfc:	607a      	str	r2, [r7, #4]
 8002dfe:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e00:	e051      	b.n	8002ea6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	695b      	ldr	r3, [r3, #20]
 8002e08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e10:	d123      	bne.n	8002e5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e20:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002e2a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2220      	movs	r2, #32
 8002e36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e46:	f043 0204 	orr.w	r2, r3, #4
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2200      	movs	r2, #0
 8002e52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e046      	b.n	8002ee8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e60:	d021      	beq.n	8002ea6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e62:	f7fe fe4b 	bl	8001afc <HAL_GetTick>
 8002e66:	4602      	mov	r2, r0
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	1ad3      	subs	r3, r2, r3
 8002e6c:	687a      	ldr	r2, [r7, #4]
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	d302      	bcc.n	8002e78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d116      	bne.n	8002ea6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2220      	movs	r2, #32
 8002e82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e92:	f043 0220 	orr.w	r2, r3, #32
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e020      	b.n	8002ee8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	0c1b      	lsrs	r3, r3, #16
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d10c      	bne.n	8002eca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	695b      	ldr	r3, [r3, #20]
 8002eb6:	43da      	mvns	r2, r3
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	4013      	ands	r3, r2
 8002ebc:	b29b      	uxth	r3, r3
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	bf14      	ite	ne
 8002ec2:	2301      	movne	r3, #1
 8002ec4:	2300      	moveq	r3, #0
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	e00b      	b.n	8002ee2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	699b      	ldr	r3, [r3, #24]
 8002ed0:	43da      	mvns	r2, r3
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	b29b      	uxth	r3, r3
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	bf14      	ite	ne
 8002edc:	2301      	movne	r3, #1
 8002ede:	2300      	moveq	r3, #0
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d18d      	bne.n	8002e02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002ee6:	2300      	movs	r3, #0
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3710      	adds	r7, #16
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}

08002ef0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b084      	sub	sp, #16
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	60f8      	str	r0, [r7, #12]
 8002ef8:	60b9      	str	r1, [r7, #8]
 8002efa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002efc:	e02d      	b.n	8002f5a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002efe:	68f8      	ldr	r0, [r7, #12]
 8002f00:	f000 f8ce 	bl	80030a0 <I2C_IsAcknowledgeFailed>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d001      	beq.n	8002f0e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e02d      	b.n	8002f6a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f14:	d021      	beq.n	8002f5a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f16:	f7fe fdf1 	bl	8001afc <HAL_GetTick>
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	1ad3      	subs	r3, r2, r3
 8002f20:	68ba      	ldr	r2, [r7, #8]
 8002f22:	429a      	cmp	r2, r3
 8002f24:	d302      	bcc.n	8002f2c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d116      	bne.n	8002f5a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2220      	movs	r2, #32
 8002f36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f46:	f043 0220 	orr.w	r2, r3, #32
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2200      	movs	r2, #0
 8002f52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e007      	b.n	8002f6a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	695b      	ldr	r3, [r3, #20]
 8002f60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f64:	2b80      	cmp	r3, #128	; 0x80
 8002f66:	d1ca      	bne.n	8002efe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002f68:	2300      	movs	r3, #0
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3710      	adds	r7, #16
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}

08002f72 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f72:	b580      	push	{r7, lr}
 8002f74:	b084      	sub	sp, #16
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	60f8      	str	r0, [r7, #12]
 8002f7a:	60b9      	str	r1, [r7, #8]
 8002f7c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002f7e:	e02d      	b.n	8002fdc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f80:	68f8      	ldr	r0, [r7, #12]
 8002f82:	f000 f88d 	bl	80030a0 <I2C_IsAcknowledgeFailed>
 8002f86:	4603      	mov	r3, r0
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d001      	beq.n	8002f90 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	e02d      	b.n	8002fec <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f96:	d021      	beq.n	8002fdc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f98:	f7fe fdb0 	bl	8001afc <HAL_GetTick>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	68ba      	ldr	r2, [r7, #8]
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d302      	bcc.n	8002fae <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d116      	bne.n	8002fdc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2220      	movs	r2, #32
 8002fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc8:	f043 0220 	orr.w	r2, r3, #32
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e007      	b.n	8002fec <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	695b      	ldr	r3, [r3, #20]
 8002fe2:	f003 0304 	and.w	r3, r3, #4
 8002fe6:	2b04      	cmp	r3, #4
 8002fe8:	d1ca      	bne.n	8002f80 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002fea:	2300      	movs	r3, #0
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	3710      	adds	r7, #16
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}

08002ff4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b084      	sub	sp, #16
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	60f8      	str	r0, [r7, #12]
 8002ffc:	60b9      	str	r1, [r7, #8]
 8002ffe:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003000:	e042      	b.n	8003088 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	695b      	ldr	r3, [r3, #20]
 8003008:	f003 0310 	and.w	r3, r3, #16
 800300c:	2b10      	cmp	r3, #16
 800300e:	d119      	bne.n	8003044 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f06f 0210 	mvn.w	r2, #16
 8003018:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2200      	movs	r2, #0
 800301e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2220      	movs	r2, #32
 8003024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2200      	movs	r2, #0
 800302c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2200      	movs	r2, #0
 800303c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e029      	b.n	8003098 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003044:	f7fe fd5a 	bl	8001afc <HAL_GetTick>
 8003048:	4602      	mov	r2, r0
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	68ba      	ldr	r2, [r7, #8]
 8003050:	429a      	cmp	r2, r3
 8003052:	d302      	bcc.n	800305a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d116      	bne.n	8003088 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2200      	movs	r2, #0
 800305e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2220      	movs	r2, #32
 8003064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2200      	movs	r2, #0
 800306c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003074:	f043 0220 	orr.w	r2, r3, #32
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2200      	movs	r2, #0
 8003080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e007      	b.n	8003098 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	695b      	ldr	r3, [r3, #20]
 800308e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003092:	2b40      	cmp	r3, #64	; 0x40
 8003094:	d1b5      	bne.n	8003002 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003096:	2300      	movs	r3, #0
}
 8003098:	4618      	mov	r0, r3
 800309a:	3710      	adds	r7, #16
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}

080030a0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b083      	sub	sp, #12
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	695b      	ldr	r3, [r3, #20]
 80030ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030b6:	d11b      	bne.n	80030f0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80030c0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2200      	movs	r2, #0
 80030c6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2220      	movs	r2, #32
 80030cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2200      	movs	r2, #0
 80030d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030dc:	f043 0204 	orr.w	r2, r3, #4
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2200      	movs	r2, #0
 80030e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	e000      	b.n	80030f2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80030f0:	2300      	movs	r3, #0
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	370c      	adds	r7, #12
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr

080030fe <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80030fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003100:	b08f      	sub	sp, #60	; 0x3c
 8003102:	af0a      	add	r7, sp, #40	; 0x28
 8003104:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d101      	bne.n	8003110 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	e10f      	b.n	8003330 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800311c:	b2db      	uxtb	r3, r3
 800311e:	2b00      	cmp	r3, #0
 8003120:	d106      	bne.n	8003130 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2200      	movs	r2, #0
 8003126:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	f00a fe18 	bl	800dd60 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2203      	movs	r2, #3
 8003134:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800313c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003140:	2b00      	cmp	r3, #0
 8003142:	d102      	bne.n	800314a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2200      	movs	r2, #0
 8003148:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4618      	mov	r0, r3
 8003150:	f003 ff63 	bl	800701a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	603b      	str	r3, [r7, #0]
 800315a:	687e      	ldr	r6, [r7, #4]
 800315c:	466d      	mov	r5, sp
 800315e:	f106 0410 	add.w	r4, r6, #16
 8003162:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003164:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003166:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003168:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800316a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800316e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003172:	1d33      	adds	r3, r6, #4
 8003174:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003176:	6838      	ldr	r0, [r7, #0]
 8003178:	f003 fe3a 	bl	8006df0 <USB_CoreInit>
 800317c:	4603      	mov	r3, r0
 800317e:	2b00      	cmp	r3, #0
 8003180:	d005      	beq.n	800318e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2202      	movs	r2, #2
 8003186:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e0d0      	b.n	8003330 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	2100      	movs	r1, #0
 8003194:	4618      	mov	r0, r3
 8003196:	f003 ff51 	bl	800703c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800319a:	2300      	movs	r3, #0
 800319c:	73fb      	strb	r3, [r7, #15]
 800319e:	e04a      	b.n	8003236 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80031a0:	7bfa      	ldrb	r2, [r7, #15]
 80031a2:	6879      	ldr	r1, [r7, #4]
 80031a4:	4613      	mov	r3, r2
 80031a6:	00db      	lsls	r3, r3, #3
 80031a8:	4413      	add	r3, r2
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	440b      	add	r3, r1
 80031ae:	333d      	adds	r3, #61	; 0x3d
 80031b0:	2201      	movs	r2, #1
 80031b2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80031b4:	7bfa      	ldrb	r2, [r7, #15]
 80031b6:	6879      	ldr	r1, [r7, #4]
 80031b8:	4613      	mov	r3, r2
 80031ba:	00db      	lsls	r3, r3, #3
 80031bc:	4413      	add	r3, r2
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	440b      	add	r3, r1
 80031c2:	333c      	adds	r3, #60	; 0x3c
 80031c4:	7bfa      	ldrb	r2, [r7, #15]
 80031c6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80031c8:	7bfa      	ldrb	r2, [r7, #15]
 80031ca:	7bfb      	ldrb	r3, [r7, #15]
 80031cc:	b298      	uxth	r0, r3
 80031ce:	6879      	ldr	r1, [r7, #4]
 80031d0:	4613      	mov	r3, r2
 80031d2:	00db      	lsls	r3, r3, #3
 80031d4:	4413      	add	r3, r2
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	440b      	add	r3, r1
 80031da:	3344      	adds	r3, #68	; 0x44
 80031dc:	4602      	mov	r2, r0
 80031de:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80031e0:	7bfa      	ldrb	r2, [r7, #15]
 80031e2:	6879      	ldr	r1, [r7, #4]
 80031e4:	4613      	mov	r3, r2
 80031e6:	00db      	lsls	r3, r3, #3
 80031e8:	4413      	add	r3, r2
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	440b      	add	r3, r1
 80031ee:	3340      	adds	r3, #64	; 0x40
 80031f0:	2200      	movs	r2, #0
 80031f2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80031f4:	7bfa      	ldrb	r2, [r7, #15]
 80031f6:	6879      	ldr	r1, [r7, #4]
 80031f8:	4613      	mov	r3, r2
 80031fa:	00db      	lsls	r3, r3, #3
 80031fc:	4413      	add	r3, r2
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	440b      	add	r3, r1
 8003202:	3348      	adds	r3, #72	; 0x48
 8003204:	2200      	movs	r2, #0
 8003206:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003208:	7bfa      	ldrb	r2, [r7, #15]
 800320a:	6879      	ldr	r1, [r7, #4]
 800320c:	4613      	mov	r3, r2
 800320e:	00db      	lsls	r3, r3, #3
 8003210:	4413      	add	r3, r2
 8003212:	009b      	lsls	r3, r3, #2
 8003214:	440b      	add	r3, r1
 8003216:	334c      	adds	r3, #76	; 0x4c
 8003218:	2200      	movs	r2, #0
 800321a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800321c:	7bfa      	ldrb	r2, [r7, #15]
 800321e:	6879      	ldr	r1, [r7, #4]
 8003220:	4613      	mov	r3, r2
 8003222:	00db      	lsls	r3, r3, #3
 8003224:	4413      	add	r3, r2
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	440b      	add	r3, r1
 800322a:	3354      	adds	r3, #84	; 0x54
 800322c:	2200      	movs	r2, #0
 800322e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003230:	7bfb      	ldrb	r3, [r7, #15]
 8003232:	3301      	adds	r3, #1
 8003234:	73fb      	strb	r3, [r7, #15]
 8003236:	7bfa      	ldrb	r2, [r7, #15]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	429a      	cmp	r2, r3
 800323e:	d3af      	bcc.n	80031a0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003240:	2300      	movs	r3, #0
 8003242:	73fb      	strb	r3, [r7, #15]
 8003244:	e044      	b.n	80032d0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003246:	7bfa      	ldrb	r2, [r7, #15]
 8003248:	6879      	ldr	r1, [r7, #4]
 800324a:	4613      	mov	r3, r2
 800324c:	00db      	lsls	r3, r3, #3
 800324e:	4413      	add	r3, r2
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	440b      	add	r3, r1
 8003254:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003258:	2200      	movs	r2, #0
 800325a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800325c:	7bfa      	ldrb	r2, [r7, #15]
 800325e:	6879      	ldr	r1, [r7, #4]
 8003260:	4613      	mov	r3, r2
 8003262:	00db      	lsls	r3, r3, #3
 8003264:	4413      	add	r3, r2
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	440b      	add	r3, r1
 800326a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800326e:	7bfa      	ldrb	r2, [r7, #15]
 8003270:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003272:	7bfa      	ldrb	r2, [r7, #15]
 8003274:	6879      	ldr	r1, [r7, #4]
 8003276:	4613      	mov	r3, r2
 8003278:	00db      	lsls	r3, r3, #3
 800327a:	4413      	add	r3, r2
 800327c:	009b      	lsls	r3, r3, #2
 800327e:	440b      	add	r3, r1
 8003280:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003284:	2200      	movs	r2, #0
 8003286:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003288:	7bfa      	ldrb	r2, [r7, #15]
 800328a:	6879      	ldr	r1, [r7, #4]
 800328c:	4613      	mov	r3, r2
 800328e:	00db      	lsls	r3, r3, #3
 8003290:	4413      	add	r3, r2
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	440b      	add	r3, r1
 8003296:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800329a:	2200      	movs	r2, #0
 800329c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800329e:	7bfa      	ldrb	r2, [r7, #15]
 80032a0:	6879      	ldr	r1, [r7, #4]
 80032a2:	4613      	mov	r3, r2
 80032a4:	00db      	lsls	r3, r3, #3
 80032a6:	4413      	add	r3, r2
 80032a8:	009b      	lsls	r3, r3, #2
 80032aa:	440b      	add	r3, r1
 80032ac:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80032b0:	2200      	movs	r2, #0
 80032b2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80032b4:	7bfa      	ldrb	r2, [r7, #15]
 80032b6:	6879      	ldr	r1, [r7, #4]
 80032b8:	4613      	mov	r3, r2
 80032ba:	00db      	lsls	r3, r3, #3
 80032bc:	4413      	add	r3, r2
 80032be:	009b      	lsls	r3, r3, #2
 80032c0:	440b      	add	r3, r1
 80032c2:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80032c6:	2200      	movs	r2, #0
 80032c8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032ca:	7bfb      	ldrb	r3, [r7, #15]
 80032cc:	3301      	adds	r3, #1
 80032ce:	73fb      	strb	r3, [r7, #15]
 80032d0:	7bfa      	ldrb	r2, [r7, #15]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d3b5      	bcc.n	8003246 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	603b      	str	r3, [r7, #0]
 80032e0:	687e      	ldr	r6, [r7, #4]
 80032e2:	466d      	mov	r5, sp
 80032e4:	f106 0410 	add.w	r4, r6, #16
 80032e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80032ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80032ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80032ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80032f0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80032f4:	e885 0003 	stmia.w	r5, {r0, r1}
 80032f8:	1d33      	adds	r3, r6, #4
 80032fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80032fc:	6838      	ldr	r0, [r7, #0]
 80032fe:	f003 fee9 	bl	80070d4 <USB_DevInit>
 8003302:	4603      	mov	r3, r0
 8003304:	2b00      	cmp	r3, #0
 8003306:	d005      	beq.n	8003314 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2202      	movs	r2, #2
 800330c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	e00d      	b.n	8003330 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2200      	movs	r2, #0
 8003318:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2201      	movs	r2, #1
 8003320:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4618      	mov	r0, r3
 800332a:	f005 f838 	bl	800839e <USB_DevDisconnect>

  return HAL_OK;
 800332e:	2300      	movs	r3, #0
}
 8003330:	4618      	mov	r0, r3
 8003332:	3714      	adds	r7, #20
 8003334:	46bd      	mov	sp, r7
 8003336:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003338 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b084      	sub	sp, #16
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800334c:	2b01      	cmp	r3, #1
 800334e:	d101      	bne.n	8003354 <HAL_PCD_Start+0x1c>
 8003350:	2302      	movs	r3, #2
 8003352:	e020      	b.n	8003396 <HAL_PCD_Start+0x5e>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2201      	movs	r2, #1
 8003358:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003360:	2b01      	cmp	r3, #1
 8003362:	d109      	bne.n	8003378 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003368:	2b01      	cmp	r3, #1
 800336a:	d005      	beq.n	8003378 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003370:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4618      	mov	r0, r3
 800337e:	f003 fe3b 	bl	8006ff8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4618      	mov	r0, r3
 8003388:	f004 ffe8 	bl	800835c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2200      	movs	r2, #0
 8003390:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003394:	2300      	movs	r3, #0
}
 8003396:	4618      	mov	r0, r3
 8003398:	3710      	adds	r7, #16
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}

0800339e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800339e:	b590      	push	{r4, r7, lr}
 80033a0:	b08d      	sub	sp, #52	; 0x34
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033ac:	6a3b      	ldr	r3, [r7, #32]
 80033ae:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4618      	mov	r0, r3
 80033b6:	f005 f8a6 	bl	8008506 <USB_GetMode>
 80033ba:	4603      	mov	r3, r0
 80033bc:	2b00      	cmp	r3, #0
 80033be:	f040 848a 	bne.w	8003cd6 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4618      	mov	r0, r3
 80033c8:	f005 f80a 	bl	80083e0 <USB_ReadInterrupts>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	f000 8480 	beq.w	8003cd4 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80033d4:	69fb      	ldr	r3, [r7, #28]
 80033d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	0a1b      	lsrs	r3, r3, #8
 80033de:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4618      	mov	r0, r3
 80033ee:	f004 fff7 	bl	80083e0 <USB_ReadInterrupts>
 80033f2:	4603      	mov	r3, r0
 80033f4:	f003 0302 	and.w	r3, r3, #2
 80033f8:	2b02      	cmp	r3, #2
 80033fa:	d107      	bne.n	800340c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	695a      	ldr	r2, [r3, #20]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f002 0202 	and.w	r2, r2, #2
 800340a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4618      	mov	r0, r3
 8003412:	f004 ffe5 	bl	80083e0 <USB_ReadInterrupts>
 8003416:	4603      	mov	r3, r0
 8003418:	f003 0310 	and.w	r3, r3, #16
 800341c:	2b10      	cmp	r3, #16
 800341e:	d161      	bne.n	80034e4 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	699a      	ldr	r2, [r3, #24]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f022 0210 	bic.w	r2, r2, #16
 800342e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003430:	6a3b      	ldr	r3, [r7, #32]
 8003432:	6a1b      	ldr	r3, [r3, #32]
 8003434:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003436:	69bb      	ldr	r3, [r7, #24]
 8003438:	f003 020f 	and.w	r2, r3, #15
 800343c:	4613      	mov	r3, r2
 800343e:	00db      	lsls	r3, r3, #3
 8003440:	4413      	add	r3, r2
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003448:	687a      	ldr	r2, [r7, #4]
 800344a:	4413      	add	r3, r2
 800344c:	3304      	adds	r3, #4
 800344e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003450:	69bb      	ldr	r3, [r7, #24]
 8003452:	0c5b      	lsrs	r3, r3, #17
 8003454:	f003 030f 	and.w	r3, r3, #15
 8003458:	2b02      	cmp	r3, #2
 800345a:	d124      	bne.n	80034a6 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800345c:	69ba      	ldr	r2, [r7, #24]
 800345e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003462:	4013      	ands	r3, r2
 8003464:	2b00      	cmp	r3, #0
 8003466:	d035      	beq.n	80034d4 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800346c:	69bb      	ldr	r3, [r7, #24]
 800346e:	091b      	lsrs	r3, r3, #4
 8003470:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003472:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003476:	b29b      	uxth	r3, r3
 8003478:	461a      	mov	r2, r3
 800347a:	6a38      	ldr	r0, [r7, #32]
 800347c:	f004 fe1c 	bl	80080b8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	691a      	ldr	r2, [r3, #16]
 8003484:	69bb      	ldr	r3, [r7, #24]
 8003486:	091b      	lsrs	r3, r3, #4
 8003488:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800348c:	441a      	add	r2, r3
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	6a1a      	ldr	r2, [r3, #32]
 8003496:	69bb      	ldr	r3, [r7, #24]
 8003498:	091b      	lsrs	r3, r3, #4
 800349a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800349e:	441a      	add	r2, r3
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	621a      	str	r2, [r3, #32]
 80034a4:	e016      	b.n	80034d4 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80034a6:	69bb      	ldr	r3, [r7, #24]
 80034a8:	0c5b      	lsrs	r3, r3, #17
 80034aa:	f003 030f 	and.w	r3, r3, #15
 80034ae:	2b06      	cmp	r3, #6
 80034b0:	d110      	bne.n	80034d4 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80034b8:	2208      	movs	r2, #8
 80034ba:	4619      	mov	r1, r3
 80034bc:	6a38      	ldr	r0, [r7, #32]
 80034be:	f004 fdfb 	bl	80080b8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	6a1a      	ldr	r2, [r3, #32]
 80034c6:	69bb      	ldr	r3, [r7, #24]
 80034c8:	091b      	lsrs	r3, r3, #4
 80034ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80034ce:	441a      	add	r2, r3
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	699a      	ldr	r2, [r3, #24]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f042 0210 	orr.w	r2, r2, #16
 80034e2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4618      	mov	r0, r3
 80034ea:	f004 ff79 	bl	80083e0 <USB_ReadInterrupts>
 80034ee:	4603      	mov	r3, r0
 80034f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034f4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80034f8:	f040 80a7 	bne.w	800364a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80034fc:	2300      	movs	r3, #0
 80034fe:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4618      	mov	r0, r3
 8003506:	f004 ff7e 	bl	8008406 <USB_ReadDevAllOutEpInterrupt>
 800350a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800350c:	e099      	b.n	8003642 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800350e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003510:	f003 0301 	and.w	r3, r3, #1
 8003514:	2b00      	cmp	r3, #0
 8003516:	f000 808e 	beq.w	8003636 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003520:	b2d2      	uxtb	r2, r2
 8003522:	4611      	mov	r1, r2
 8003524:	4618      	mov	r0, r3
 8003526:	f004 ffa2 	bl	800846e <USB_ReadDevOutEPInterrupt>
 800352a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	f003 0301 	and.w	r3, r3, #1
 8003532:	2b00      	cmp	r3, #0
 8003534:	d00c      	beq.n	8003550 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003538:	015a      	lsls	r2, r3, #5
 800353a:	69fb      	ldr	r3, [r7, #28]
 800353c:	4413      	add	r3, r2
 800353e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003542:	461a      	mov	r2, r3
 8003544:	2301      	movs	r3, #1
 8003546:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003548:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f000 fec2 	bl	80042d4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	f003 0308 	and.w	r3, r3, #8
 8003556:	2b00      	cmp	r3, #0
 8003558:	d00c      	beq.n	8003574 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800355a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355c:	015a      	lsls	r2, r3, #5
 800355e:	69fb      	ldr	r3, [r7, #28]
 8003560:	4413      	add	r3, r2
 8003562:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003566:	461a      	mov	r2, r3
 8003568:	2308      	movs	r3, #8
 800356a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800356c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f000 ff98 	bl	80044a4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	f003 0310 	and.w	r3, r3, #16
 800357a:	2b00      	cmp	r3, #0
 800357c:	d008      	beq.n	8003590 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800357e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003580:	015a      	lsls	r2, r3, #5
 8003582:	69fb      	ldr	r3, [r7, #28]
 8003584:	4413      	add	r3, r2
 8003586:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800358a:	461a      	mov	r2, r3
 800358c:	2310      	movs	r3, #16
 800358e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	f003 0302 	and.w	r3, r3, #2
 8003596:	2b00      	cmp	r3, #0
 8003598:	d030      	beq.n	80035fc <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800359a:	6a3b      	ldr	r3, [r7, #32]
 800359c:	695b      	ldr	r3, [r3, #20]
 800359e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035a2:	2b80      	cmp	r3, #128	; 0x80
 80035a4:	d109      	bne.n	80035ba <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80035a6:	69fb      	ldr	r3, [r7, #28]
 80035a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	69fa      	ldr	r2, [r7, #28]
 80035b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80035b4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80035b8:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80035ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035bc:	4613      	mov	r3, r2
 80035be:	00db      	lsls	r3, r3, #3
 80035c0:	4413      	add	r3, r2
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80035c8:	687a      	ldr	r2, [r7, #4]
 80035ca:	4413      	add	r3, r2
 80035cc:	3304      	adds	r3, #4
 80035ce:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	78db      	ldrb	r3, [r3, #3]
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d108      	bne.n	80035ea <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	2200      	movs	r2, #0
 80035dc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80035de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	4619      	mov	r1, r3
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	f00a fcc5 	bl	800df74 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80035ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ec:	015a      	lsls	r2, r3, #5
 80035ee:	69fb      	ldr	r3, [r7, #28]
 80035f0:	4413      	add	r3, r2
 80035f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035f6:	461a      	mov	r2, r3
 80035f8:	2302      	movs	r3, #2
 80035fa:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	f003 0320 	and.w	r3, r3, #32
 8003602:	2b00      	cmp	r3, #0
 8003604:	d008      	beq.n	8003618 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003608:	015a      	lsls	r2, r3, #5
 800360a:	69fb      	ldr	r3, [r7, #28]
 800360c:	4413      	add	r3, r2
 800360e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003612:	461a      	mov	r2, r3
 8003614:	2320      	movs	r3, #32
 8003616:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800361e:	2b00      	cmp	r3, #0
 8003620:	d009      	beq.n	8003636 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003624:	015a      	lsls	r2, r3, #5
 8003626:	69fb      	ldr	r3, [r7, #28]
 8003628:	4413      	add	r3, r2
 800362a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800362e:	461a      	mov	r2, r3
 8003630:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003634:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003638:	3301      	adds	r3, #1
 800363a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800363c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800363e:	085b      	lsrs	r3, r3, #1
 8003640:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003644:	2b00      	cmp	r3, #0
 8003646:	f47f af62 	bne.w	800350e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4618      	mov	r0, r3
 8003650:	f004 fec6 	bl	80083e0 <USB_ReadInterrupts>
 8003654:	4603      	mov	r3, r0
 8003656:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800365a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800365e:	f040 80db 	bne.w	8003818 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4618      	mov	r0, r3
 8003668:	f004 fee7 	bl	800843a <USB_ReadDevAllInEpInterrupt>
 800366c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800366e:	2300      	movs	r3, #0
 8003670:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003672:	e0cd      	b.n	8003810 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003676:	f003 0301 	and.w	r3, r3, #1
 800367a:	2b00      	cmp	r3, #0
 800367c:	f000 80c2 	beq.w	8003804 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003686:	b2d2      	uxtb	r2, r2
 8003688:	4611      	mov	r1, r2
 800368a:	4618      	mov	r0, r3
 800368c:	f004 ff0d 	bl	80084aa <USB_ReadDevInEPInterrupt>
 8003690:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	f003 0301 	and.w	r3, r3, #1
 8003698:	2b00      	cmp	r3, #0
 800369a:	d057      	beq.n	800374c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800369c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369e:	f003 030f 	and.w	r3, r3, #15
 80036a2:	2201      	movs	r2, #1
 80036a4:	fa02 f303 	lsl.w	r3, r2, r3
 80036a8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	43db      	mvns	r3, r3
 80036b6:	69f9      	ldr	r1, [r7, #28]
 80036b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80036bc:	4013      	ands	r3, r2
 80036be:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80036c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c2:	015a      	lsls	r2, r3, #5
 80036c4:	69fb      	ldr	r3, [r7, #28]
 80036c6:	4413      	add	r3, r2
 80036c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036cc:	461a      	mov	r2, r3
 80036ce:	2301      	movs	r3, #1
 80036d0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	691b      	ldr	r3, [r3, #16]
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d132      	bne.n	8003740 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80036da:	6879      	ldr	r1, [r7, #4]
 80036dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036de:	4613      	mov	r3, r2
 80036e0:	00db      	lsls	r3, r3, #3
 80036e2:	4413      	add	r3, r2
 80036e4:	009b      	lsls	r3, r3, #2
 80036e6:	440b      	add	r3, r1
 80036e8:	334c      	adds	r3, #76	; 0x4c
 80036ea:	6819      	ldr	r1, [r3, #0]
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036f0:	4613      	mov	r3, r2
 80036f2:	00db      	lsls	r3, r3, #3
 80036f4:	4413      	add	r3, r2
 80036f6:	009b      	lsls	r3, r3, #2
 80036f8:	4403      	add	r3, r0
 80036fa:	3348      	adds	r3, #72	; 0x48
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4419      	add	r1, r3
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003704:	4613      	mov	r3, r2
 8003706:	00db      	lsls	r3, r3, #3
 8003708:	4413      	add	r3, r2
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	4403      	add	r3, r0
 800370e:	334c      	adds	r3, #76	; 0x4c
 8003710:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003714:	2b00      	cmp	r3, #0
 8003716:	d113      	bne.n	8003740 <HAL_PCD_IRQHandler+0x3a2>
 8003718:	6879      	ldr	r1, [r7, #4]
 800371a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800371c:	4613      	mov	r3, r2
 800371e:	00db      	lsls	r3, r3, #3
 8003720:	4413      	add	r3, r2
 8003722:	009b      	lsls	r3, r3, #2
 8003724:	440b      	add	r3, r1
 8003726:	3354      	adds	r3, #84	; 0x54
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d108      	bne.n	8003740 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6818      	ldr	r0, [r3, #0]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003738:	461a      	mov	r2, r3
 800373a:	2101      	movs	r1, #1
 800373c:	f004 ff14 	bl	8008568 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003742:	b2db      	uxtb	r3, r3
 8003744:	4619      	mov	r1, r3
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f00a fb99 	bl	800de7e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	f003 0308 	and.w	r3, r3, #8
 8003752:	2b00      	cmp	r3, #0
 8003754:	d008      	beq.n	8003768 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003758:	015a      	lsls	r2, r3, #5
 800375a:	69fb      	ldr	r3, [r7, #28]
 800375c:	4413      	add	r3, r2
 800375e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003762:	461a      	mov	r2, r3
 8003764:	2308      	movs	r3, #8
 8003766:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	f003 0310 	and.w	r3, r3, #16
 800376e:	2b00      	cmp	r3, #0
 8003770:	d008      	beq.n	8003784 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003774:	015a      	lsls	r2, r3, #5
 8003776:	69fb      	ldr	r3, [r7, #28]
 8003778:	4413      	add	r3, r2
 800377a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800377e:	461a      	mov	r2, r3
 8003780:	2310      	movs	r3, #16
 8003782:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800378a:	2b00      	cmp	r3, #0
 800378c:	d008      	beq.n	80037a0 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800378e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003790:	015a      	lsls	r2, r3, #5
 8003792:	69fb      	ldr	r3, [r7, #28]
 8003794:	4413      	add	r3, r2
 8003796:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800379a:	461a      	mov	r2, r3
 800379c:	2340      	movs	r3, #64	; 0x40
 800379e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	f003 0302 	and.w	r3, r3, #2
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d023      	beq.n	80037f2 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80037aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80037ac:	6a38      	ldr	r0, [r7, #32]
 80037ae:	f003 fdf5 	bl	800739c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80037b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037b4:	4613      	mov	r3, r2
 80037b6:	00db      	lsls	r3, r3, #3
 80037b8:	4413      	add	r3, r2
 80037ba:	009b      	lsls	r3, r3, #2
 80037bc:	3338      	adds	r3, #56	; 0x38
 80037be:	687a      	ldr	r2, [r7, #4]
 80037c0:	4413      	add	r3, r2
 80037c2:	3304      	adds	r3, #4
 80037c4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	78db      	ldrb	r3, [r3, #3]
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d108      	bne.n	80037e0 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	2200      	movs	r2, #0
 80037d2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80037d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	4619      	mov	r1, r3
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f00a fbdc 	bl	800df98 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80037e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e2:	015a      	lsls	r2, r3, #5
 80037e4:	69fb      	ldr	r3, [r7, #28]
 80037e6:	4413      	add	r3, r2
 80037e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037ec:	461a      	mov	r2, r3
 80037ee:	2302      	movs	r3, #2
 80037f0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d003      	beq.n	8003804 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80037fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f000 fcdb 	bl	80041ba <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003806:	3301      	adds	r3, #1
 8003808:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800380a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800380c:	085b      	lsrs	r3, r3, #1
 800380e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003812:	2b00      	cmp	r3, #0
 8003814:	f47f af2e 	bne.w	8003674 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4618      	mov	r0, r3
 800381e:	f004 fddf 	bl	80083e0 <USB_ReadInterrupts>
 8003822:	4603      	mov	r3, r0
 8003824:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003828:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800382c:	d122      	bne.n	8003874 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	69fa      	ldr	r2, [r7, #28]
 8003838:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800383c:	f023 0301 	bic.w	r3, r3, #1
 8003840:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003848:	2b01      	cmp	r3, #1
 800384a:	d108      	bne.n	800385e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2200      	movs	r2, #0
 8003850:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003854:	2100      	movs	r1, #0
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f000 fec2 	bl	80045e0 <HAL_PCDEx_LPM_Callback>
 800385c:	e002      	b.n	8003864 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f00a fb7a 	bl	800df58 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	695a      	ldr	r2, [r3, #20]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003872:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4618      	mov	r0, r3
 800387a:	f004 fdb1 	bl	80083e0 <USB_ReadInterrupts>
 800387e:	4603      	mov	r3, r0
 8003880:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003884:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003888:	d112      	bne.n	80038b0 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800388a:	69fb      	ldr	r3, [r7, #28]
 800388c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	f003 0301 	and.w	r3, r3, #1
 8003896:	2b01      	cmp	r3, #1
 8003898:	d102      	bne.n	80038a0 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f00a fb36 	bl	800df0c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	695a      	ldr	r2, [r3, #20]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80038ae:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4618      	mov	r0, r3
 80038b6:	f004 fd93 	bl	80083e0 <USB_ReadInterrupts>
 80038ba:	4603      	mov	r3, r0
 80038bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038c4:	f040 80b7 	bne.w	8003a36 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80038c8:	69fb      	ldr	r3, [r7, #28]
 80038ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	69fa      	ldr	r2, [r7, #28]
 80038d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038d6:	f023 0301 	bic.w	r3, r3, #1
 80038da:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	2110      	movs	r1, #16
 80038e2:	4618      	mov	r0, r3
 80038e4:	f003 fd5a 	bl	800739c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038e8:	2300      	movs	r3, #0
 80038ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038ec:	e046      	b.n	800397c <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80038ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038f0:	015a      	lsls	r2, r3, #5
 80038f2:	69fb      	ldr	r3, [r7, #28]
 80038f4:	4413      	add	r3, r2
 80038f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038fa:	461a      	mov	r2, r3
 80038fc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003900:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003904:	015a      	lsls	r2, r3, #5
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	4413      	add	r3, r2
 800390a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003912:	0151      	lsls	r1, r2, #5
 8003914:	69fa      	ldr	r2, [r7, #28]
 8003916:	440a      	add	r2, r1
 8003918:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800391c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003920:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003924:	015a      	lsls	r2, r3, #5
 8003926:	69fb      	ldr	r3, [r7, #28]
 8003928:	4413      	add	r3, r2
 800392a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800392e:	461a      	mov	r2, r3
 8003930:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003934:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003938:	015a      	lsls	r2, r3, #5
 800393a:	69fb      	ldr	r3, [r7, #28]
 800393c:	4413      	add	r3, r2
 800393e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003946:	0151      	lsls	r1, r2, #5
 8003948:	69fa      	ldr	r2, [r7, #28]
 800394a:	440a      	add	r2, r1
 800394c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003950:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003954:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003958:	015a      	lsls	r2, r3, #5
 800395a:	69fb      	ldr	r3, [r7, #28]
 800395c:	4413      	add	r3, r2
 800395e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003966:	0151      	lsls	r1, r2, #5
 8003968:	69fa      	ldr	r2, [r7, #28]
 800396a:	440a      	add	r2, r1
 800396c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003970:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003974:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003978:	3301      	adds	r3, #1
 800397a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003982:	429a      	cmp	r2, r3
 8003984:	d3b3      	bcc.n	80038ee <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003986:	69fb      	ldr	r3, [r7, #28]
 8003988:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800398c:	69db      	ldr	r3, [r3, #28]
 800398e:	69fa      	ldr	r2, [r7, #28]
 8003990:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003994:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003998:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d016      	beq.n	80039d0 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80039a2:	69fb      	ldr	r3, [r7, #28]
 80039a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039ac:	69fa      	ldr	r2, [r7, #28]
 80039ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80039b2:	f043 030b 	orr.w	r3, r3, #11
 80039b6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80039ba:	69fb      	ldr	r3, [r7, #28]
 80039bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039c2:	69fa      	ldr	r2, [r7, #28]
 80039c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80039c8:	f043 030b 	orr.w	r3, r3, #11
 80039cc:	6453      	str	r3, [r2, #68]	; 0x44
 80039ce:	e015      	b.n	80039fc <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80039d0:	69fb      	ldr	r3, [r7, #28]
 80039d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039d6:	695b      	ldr	r3, [r3, #20]
 80039d8:	69fa      	ldr	r2, [r7, #28]
 80039da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80039de:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80039e2:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80039e6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80039e8:	69fb      	ldr	r3, [r7, #28]
 80039ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039ee:	691b      	ldr	r3, [r3, #16]
 80039f0:	69fa      	ldr	r2, [r7, #28]
 80039f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80039f6:	f043 030b 	orr.w	r3, r3, #11
 80039fa:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80039fc:	69fb      	ldr	r3, [r7, #28]
 80039fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	69fa      	ldr	r2, [r7, #28]
 8003a06:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a0a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003a0e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6818      	ldr	r0, [r3, #0]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	691b      	ldr	r3, [r3, #16]
 8003a18:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003a20:	461a      	mov	r2, r3
 8003a22:	f004 fda1 	bl	8008568 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	695a      	ldr	r2, [r3, #20]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003a34:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f004 fcd0 	bl	80083e0 <USB_ReadInterrupts>
 8003a40:	4603      	mov	r3, r0
 8003a42:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a4a:	d124      	bne.n	8003a96 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4618      	mov	r0, r3
 8003a52:	f004 fd66 	bl	8008522 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f003 fd1b 	bl	8007496 <USB_GetDevSpeed>
 8003a60:	4603      	mov	r3, r0
 8003a62:	461a      	mov	r2, r3
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681c      	ldr	r4, [r3, #0]
 8003a6c:	f001 fa28 	bl	8004ec0 <HAL_RCC_GetHCLKFreq>
 8003a70:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003a76:	b2db      	uxtb	r3, r3
 8003a78:	461a      	mov	r2, r3
 8003a7a:	4620      	mov	r0, r4
 8003a7c:	f003 fa1a 	bl	8006eb4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003a80:	6878      	ldr	r0, [r7, #4]
 8003a82:	f00a fa24 	bl	800dece <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	695a      	ldr	r2, [r3, #20]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003a94:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f004 fca0 	bl	80083e0 <USB_ReadInterrupts>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	f003 0308 	and.w	r3, r3, #8
 8003aa6:	2b08      	cmp	r3, #8
 8003aa8:	d10a      	bne.n	8003ac0 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f00a fa01 	bl	800deb2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	695a      	ldr	r2, [r3, #20]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f002 0208 	and.w	r2, r2, #8
 8003abe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f004 fc8b 	bl	80083e0 <USB_ReadInterrupts>
 8003aca:	4603      	mov	r3, r0
 8003acc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ad0:	2b80      	cmp	r3, #128	; 0x80
 8003ad2:	d122      	bne.n	8003b1a <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003ad4:	6a3b      	ldr	r3, [r7, #32]
 8003ad6:	699b      	ldr	r3, [r3, #24]
 8003ad8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003adc:	6a3b      	ldr	r3, [r7, #32]
 8003ade:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	627b      	str	r3, [r7, #36]	; 0x24
 8003ae4:	e014      	b.n	8003b10 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003ae6:	6879      	ldr	r1, [r7, #4]
 8003ae8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003aea:	4613      	mov	r3, r2
 8003aec:	00db      	lsls	r3, r3, #3
 8003aee:	4413      	add	r3, r2
 8003af0:	009b      	lsls	r3, r3, #2
 8003af2:	440b      	add	r3, r1
 8003af4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003af8:	781b      	ldrb	r3, [r3, #0]
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	d105      	bne.n	8003b0a <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	4619      	mov	r1, r3
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	f000 fb27 	bl	8004158 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0c:	3301      	adds	r3, #1
 8003b0e:	627b      	str	r3, [r7, #36]	; 0x24
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b16:	429a      	cmp	r2, r3
 8003b18:	d3e5      	bcc.n	8003ae6 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f004 fc5e 	bl	80083e0 <USB_ReadInterrupts>
 8003b24:	4603      	mov	r3, r0
 8003b26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b2e:	d13b      	bne.n	8003ba8 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b30:	2301      	movs	r3, #1
 8003b32:	627b      	str	r3, [r7, #36]	; 0x24
 8003b34:	e02b      	b.n	8003b8e <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b38:	015a      	lsls	r2, r3, #5
 8003b3a:	69fb      	ldr	r3, [r7, #28]
 8003b3c:	4413      	add	r3, r2
 8003b3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003b46:	6879      	ldr	r1, [r7, #4]
 8003b48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b4a:	4613      	mov	r3, r2
 8003b4c:	00db      	lsls	r3, r3, #3
 8003b4e:	4413      	add	r3, r2
 8003b50:	009b      	lsls	r3, r3, #2
 8003b52:	440b      	add	r3, r1
 8003b54:	3340      	adds	r3, #64	; 0x40
 8003b56:	781b      	ldrb	r3, [r3, #0]
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d115      	bne.n	8003b88 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003b5c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	da12      	bge.n	8003b88 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003b62:	6879      	ldr	r1, [r7, #4]
 8003b64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b66:	4613      	mov	r3, r2
 8003b68:	00db      	lsls	r3, r3, #3
 8003b6a:	4413      	add	r3, r2
 8003b6c:	009b      	lsls	r3, r3, #2
 8003b6e:	440b      	add	r3, r1
 8003b70:	333f      	adds	r3, #63	; 0x3f
 8003b72:	2201      	movs	r2, #1
 8003b74:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003b7e:	b2db      	uxtb	r3, r3
 8003b80:	4619      	mov	r1, r3
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f000 fae8 	bl	8004158 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b8a:	3301      	adds	r3, #1
 8003b8c:	627b      	str	r3, [r7, #36]	; 0x24
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b94:	429a      	cmp	r2, r3
 8003b96:	d3ce      	bcc.n	8003b36 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	695a      	ldr	r2, [r3, #20]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003ba6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4618      	mov	r0, r3
 8003bae:	f004 fc17 	bl	80083e0 <USB_ReadInterrupts>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bb8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003bbc:	d155      	bne.n	8003c6a <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	627b      	str	r3, [r7, #36]	; 0x24
 8003bc2:	e045      	b.n	8003c50 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc6:	015a      	lsls	r2, r3, #5
 8003bc8:	69fb      	ldr	r3, [r7, #28]
 8003bca:	4413      	add	r3, r2
 8003bcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003bd4:	6879      	ldr	r1, [r7, #4]
 8003bd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bd8:	4613      	mov	r3, r2
 8003bda:	00db      	lsls	r3, r3, #3
 8003bdc:	4413      	add	r3, r2
 8003bde:	009b      	lsls	r3, r3, #2
 8003be0:	440b      	add	r3, r1
 8003be2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003be6:	781b      	ldrb	r3, [r3, #0]
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d12e      	bne.n	8003c4a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003bec:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	da2b      	bge.n	8003c4a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003bf2:	69bb      	ldr	r3, [r7, #24]
 8003bf4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003bfe:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d121      	bne.n	8003c4a <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003c06:	6879      	ldr	r1, [r7, #4]
 8003c08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c0a:	4613      	mov	r3, r2
 8003c0c:	00db      	lsls	r3, r3, #3
 8003c0e:	4413      	add	r3, r2
 8003c10:	009b      	lsls	r3, r3, #2
 8003c12:	440b      	add	r3, r1
 8003c14:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003c18:	2201      	movs	r2, #1
 8003c1a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003c1c:	6a3b      	ldr	r3, [r7, #32]
 8003c1e:	699b      	ldr	r3, [r3, #24]
 8003c20:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003c24:	6a3b      	ldr	r3, [r7, #32]
 8003c26:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003c28:	6a3b      	ldr	r3, [r7, #32]
 8003c2a:	695b      	ldr	r3, [r3, #20]
 8003c2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d10a      	bne.n	8003c4a <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003c34:	69fb      	ldr	r3, [r7, #28]
 8003c36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	69fa      	ldr	r2, [r7, #28]
 8003c3e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c46:	6053      	str	r3, [r2, #4]
            break;
 8003c48:	e007      	b.n	8003c5a <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c4c:	3301      	adds	r3, #1
 8003c4e:	627b      	str	r3, [r7, #36]	; 0x24
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c56:	429a      	cmp	r2, r3
 8003c58:	d3b4      	bcc.n	8003bc4 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	695a      	ldr	r2, [r3, #20]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003c68:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f004 fbb6 	bl	80083e0 <USB_ReadInterrupts>
 8003c74:	4603      	mov	r3, r0
 8003c76:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003c7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c7e:	d10a      	bne.n	8003c96 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003c80:	6878      	ldr	r0, [r7, #4]
 8003c82:	f00a f99b 	bl	800dfbc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	695a      	ldr	r2, [r3, #20]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003c94:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f004 fba0 	bl	80083e0 <USB_ReadInterrupts>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	f003 0304 	and.w	r3, r3, #4
 8003ca6:	2b04      	cmp	r3, #4
 8003ca8:	d115      	bne.n	8003cd6 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003cb2:	69bb      	ldr	r3, [r7, #24]
 8003cb4:	f003 0304 	and.w	r3, r3, #4
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d002      	beq.n	8003cc2 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	f00a f98b 	bl	800dfd8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	6859      	ldr	r1, [r3, #4]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	69ba      	ldr	r2, [r7, #24]
 8003cce:	430a      	orrs	r2, r1
 8003cd0:	605a      	str	r2, [r3, #4]
 8003cd2:	e000      	b.n	8003cd6 <HAL_PCD_IRQHandler+0x938>
      return;
 8003cd4:	bf00      	nop
    }
  }
}
 8003cd6:	3734      	adds	r7, #52	; 0x34
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd90      	pop	{r4, r7, pc}

08003cdc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b082      	sub	sp, #8
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
 8003ce4:	460b      	mov	r3, r1
 8003ce6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	d101      	bne.n	8003cf6 <HAL_PCD_SetAddress+0x1a>
 8003cf2:	2302      	movs	r3, #2
 8003cf4:	e013      	b.n	8003d1e <HAL_PCD_SetAddress+0x42>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	78fa      	ldrb	r2, [r7, #3]
 8003d02:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	78fa      	ldrb	r2, [r7, #3]
 8003d0c:	4611      	mov	r1, r2
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f004 fafe 	bl	8008310 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2200      	movs	r2, #0
 8003d18:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003d1c:	2300      	movs	r3, #0
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3708      	adds	r7, #8
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}

08003d26 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003d26:	b580      	push	{r7, lr}
 8003d28:	b084      	sub	sp, #16
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	6078      	str	r0, [r7, #4]
 8003d2e:	4608      	mov	r0, r1
 8003d30:	4611      	mov	r1, r2
 8003d32:	461a      	mov	r2, r3
 8003d34:	4603      	mov	r3, r0
 8003d36:	70fb      	strb	r3, [r7, #3]
 8003d38:	460b      	mov	r3, r1
 8003d3a:	803b      	strh	r3, [r7, #0]
 8003d3c:	4613      	mov	r3, r2
 8003d3e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003d40:	2300      	movs	r3, #0
 8003d42:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003d44:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	da0f      	bge.n	8003d6c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d4c:	78fb      	ldrb	r3, [r7, #3]
 8003d4e:	f003 020f 	and.w	r2, r3, #15
 8003d52:	4613      	mov	r3, r2
 8003d54:	00db      	lsls	r3, r3, #3
 8003d56:	4413      	add	r3, r2
 8003d58:	009b      	lsls	r3, r3, #2
 8003d5a:	3338      	adds	r3, #56	; 0x38
 8003d5c:	687a      	ldr	r2, [r7, #4]
 8003d5e:	4413      	add	r3, r2
 8003d60:	3304      	adds	r3, #4
 8003d62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2201      	movs	r2, #1
 8003d68:	705a      	strb	r2, [r3, #1]
 8003d6a:	e00f      	b.n	8003d8c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d6c:	78fb      	ldrb	r3, [r7, #3]
 8003d6e:	f003 020f 	and.w	r2, r3, #15
 8003d72:	4613      	mov	r3, r2
 8003d74:	00db      	lsls	r3, r3, #3
 8003d76:	4413      	add	r3, r2
 8003d78:	009b      	lsls	r3, r3, #2
 8003d7a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003d7e:	687a      	ldr	r2, [r7, #4]
 8003d80:	4413      	add	r3, r2
 8003d82:	3304      	adds	r3, #4
 8003d84:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003d8c:	78fb      	ldrb	r3, [r7, #3]
 8003d8e:	f003 030f 	and.w	r3, r3, #15
 8003d92:	b2da      	uxtb	r2, r3
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003d98:	883a      	ldrh	r2, [r7, #0]
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	78ba      	ldrb	r2, [r7, #2]
 8003da2:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	785b      	ldrb	r3, [r3, #1]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d004      	beq.n	8003db6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	781b      	ldrb	r3, [r3, #0]
 8003db0:	b29a      	uxth	r2, r3
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003db6:	78bb      	ldrb	r3, [r7, #2]
 8003db8:	2b02      	cmp	r3, #2
 8003dba:	d102      	bne.n	8003dc2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	d101      	bne.n	8003dd0 <HAL_PCD_EP_Open+0xaa>
 8003dcc:	2302      	movs	r3, #2
 8003dce:	e00e      	b.n	8003dee <HAL_PCD_EP_Open+0xc8>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	68f9      	ldr	r1, [r7, #12]
 8003dde:	4618      	mov	r0, r3
 8003de0:	f003 fb7e 	bl	80074e0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2200      	movs	r2, #0
 8003de8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003dec:	7afb      	ldrb	r3, [r7, #11]
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3710      	adds	r7, #16
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}

08003df6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003df6:	b580      	push	{r7, lr}
 8003df8:	b084      	sub	sp, #16
 8003dfa:	af00      	add	r7, sp, #0
 8003dfc:	6078      	str	r0, [r7, #4]
 8003dfe:	460b      	mov	r3, r1
 8003e00:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003e02:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	da0f      	bge.n	8003e2a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e0a:	78fb      	ldrb	r3, [r7, #3]
 8003e0c:	f003 020f 	and.w	r2, r3, #15
 8003e10:	4613      	mov	r3, r2
 8003e12:	00db      	lsls	r3, r3, #3
 8003e14:	4413      	add	r3, r2
 8003e16:	009b      	lsls	r3, r3, #2
 8003e18:	3338      	adds	r3, #56	; 0x38
 8003e1a:	687a      	ldr	r2, [r7, #4]
 8003e1c:	4413      	add	r3, r2
 8003e1e:	3304      	adds	r3, #4
 8003e20:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2201      	movs	r2, #1
 8003e26:	705a      	strb	r2, [r3, #1]
 8003e28:	e00f      	b.n	8003e4a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e2a:	78fb      	ldrb	r3, [r7, #3]
 8003e2c:	f003 020f 	and.w	r2, r3, #15
 8003e30:	4613      	mov	r3, r2
 8003e32:	00db      	lsls	r3, r3, #3
 8003e34:	4413      	add	r3, r2
 8003e36:	009b      	lsls	r3, r3, #2
 8003e38:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003e3c:	687a      	ldr	r2, [r7, #4]
 8003e3e:	4413      	add	r3, r2
 8003e40:	3304      	adds	r3, #4
 8003e42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2200      	movs	r2, #0
 8003e48:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003e4a:	78fb      	ldrb	r3, [r7, #3]
 8003e4c:	f003 030f 	and.w	r3, r3, #15
 8003e50:	b2da      	uxtb	r2, r3
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d101      	bne.n	8003e64 <HAL_PCD_EP_Close+0x6e>
 8003e60:	2302      	movs	r3, #2
 8003e62:	e00e      	b.n	8003e82 <HAL_PCD_EP_Close+0x8c>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2201      	movs	r2, #1
 8003e68:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	68f9      	ldr	r1, [r7, #12]
 8003e72:	4618      	mov	r0, r3
 8003e74:	f003 fbbc 	bl	80075f0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003e80:	2300      	movs	r3, #0
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3710      	adds	r7, #16
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}

08003e8a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003e8a:	b580      	push	{r7, lr}
 8003e8c:	b086      	sub	sp, #24
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	60f8      	str	r0, [r7, #12]
 8003e92:	607a      	str	r2, [r7, #4]
 8003e94:	603b      	str	r3, [r7, #0]
 8003e96:	460b      	mov	r3, r1
 8003e98:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e9a:	7afb      	ldrb	r3, [r7, #11]
 8003e9c:	f003 020f 	and.w	r2, r3, #15
 8003ea0:	4613      	mov	r3, r2
 8003ea2:	00db      	lsls	r3, r3, #3
 8003ea4:	4413      	add	r3, r2
 8003ea6:	009b      	lsls	r3, r3, #2
 8003ea8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003eac:	68fa      	ldr	r2, [r7, #12]
 8003eae:	4413      	add	r3, r2
 8003eb0:	3304      	adds	r3, #4
 8003eb2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	687a      	ldr	r2, [r7, #4]
 8003eb8:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	683a      	ldr	r2, [r7, #0]
 8003ebe:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ecc:	7afb      	ldrb	r3, [r7, #11]
 8003ece:	f003 030f 	and.w	r3, r3, #15
 8003ed2:	b2da      	uxtb	r2, r3
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	691b      	ldr	r3, [r3, #16]
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	d102      	bne.n	8003ee6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003ee0:	687a      	ldr	r2, [r7, #4]
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003ee6:	7afb      	ldrb	r3, [r7, #11]
 8003ee8:	f003 030f 	and.w	r3, r3, #15
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d109      	bne.n	8003f04 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	6818      	ldr	r0, [r3, #0]
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	691b      	ldr	r3, [r3, #16]
 8003ef8:	b2db      	uxtb	r3, r3
 8003efa:	461a      	mov	r2, r3
 8003efc:	6979      	ldr	r1, [r7, #20]
 8003efe:	f003 fe9b 	bl	8007c38 <USB_EP0StartXfer>
 8003f02:	e008      	b.n	8003f16 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	6818      	ldr	r0, [r3, #0]
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	691b      	ldr	r3, [r3, #16]
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	461a      	mov	r2, r3
 8003f10:	6979      	ldr	r1, [r7, #20]
 8003f12:	f003 fc49 	bl	80077a8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003f16:	2300      	movs	r3, #0
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	3718      	adds	r7, #24
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}

08003f20 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b083      	sub	sp, #12
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
 8003f28:	460b      	mov	r3, r1
 8003f2a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003f2c:	78fb      	ldrb	r3, [r7, #3]
 8003f2e:	f003 020f 	and.w	r2, r3, #15
 8003f32:	6879      	ldr	r1, [r7, #4]
 8003f34:	4613      	mov	r3, r2
 8003f36:	00db      	lsls	r3, r3, #3
 8003f38:	4413      	add	r3, r2
 8003f3a:	009b      	lsls	r3, r3, #2
 8003f3c:	440b      	add	r3, r1
 8003f3e:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8003f42:	681b      	ldr	r3, [r3, #0]
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	370c      	adds	r7, #12
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4e:	4770      	bx	lr

08003f50 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b086      	sub	sp, #24
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	60f8      	str	r0, [r7, #12]
 8003f58:	607a      	str	r2, [r7, #4]
 8003f5a:	603b      	str	r3, [r7, #0]
 8003f5c:	460b      	mov	r3, r1
 8003f5e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f60:	7afb      	ldrb	r3, [r7, #11]
 8003f62:	f003 020f 	and.w	r2, r3, #15
 8003f66:	4613      	mov	r3, r2
 8003f68:	00db      	lsls	r3, r3, #3
 8003f6a:	4413      	add	r3, r2
 8003f6c:	009b      	lsls	r3, r3, #2
 8003f6e:	3338      	adds	r3, #56	; 0x38
 8003f70:	68fa      	ldr	r2, [r7, #12]
 8003f72:	4413      	add	r3, r2
 8003f74:	3304      	adds	r3, #4
 8003f76:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	687a      	ldr	r2, [r7, #4]
 8003f7c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	683a      	ldr	r2, [r7, #0]
 8003f82:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	2200      	movs	r2, #0
 8003f88:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f90:	7afb      	ldrb	r3, [r7, #11]
 8003f92:	f003 030f 	and.w	r3, r3, #15
 8003f96:	b2da      	uxtb	r2, r3
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	691b      	ldr	r3, [r3, #16]
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d102      	bne.n	8003faa <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003fa4:	687a      	ldr	r2, [r7, #4]
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003faa:	7afb      	ldrb	r3, [r7, #11]
 8003fac:	f003 030f 	and.w	r3, r3, #15
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d109      	bne.n	8003fc8 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	6818      	ldr	r0, [r3, #0]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	691b      	ldr	r3, [r3, #16]
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	461a      	mov	r2, r3
 8003fc0:	6979      	ldr	r1, [r7, #20]
 8003fc2:	f003 fe39 	bl	8007c38 <USB_EP0StartXfer>
 8003fc6:	e008      	b.n	8003fda <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	6818      	ldr	r0, [r3, #0]
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	691b      	ldr	r3, [r3, #16]
 8003fd0:	b2db      	uxtb	r3, r3
 8003fd2:	461a      	mov	r2, r3
 8003fd4:	6979      	ldr	r1, [r7, #20]
 8003fd6:	f003 fbe7 	bl	80077a8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003fda:	2300      	movs	r3, #0
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	3718      	adds	r7, #24
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}

08003fe4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b084      	sub	sp, #16
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
 8003fec:	460b      	mov	r3, r1
 8003fee:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003ff0:	78fb      	ldrb	r3, [r7, #3]
 8003ff2:	f003 020f 	and.w	r2, r3, #15
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	d901      	bls.n	8004002 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	e050      	b.n	80040a4 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004002:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004006:	2b00      	cmp	r3, #0
 8004008:	da0f      	bge.n	800402a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800400a:	78fb      	ldrb	r3, [r7, #3]
 800400c:	f003 020f 	and.w	r2, r3, #15
 8004010:	4613      	mov	r3, r2
 8004012:	00db      	lsls	r3, r3, #3
 8004014:	4413      	add	r3, r2
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	3338      	adds	r3, #56	; 0x38
 800401a:	687a      	ldr	r2, [r7, #4]
 800401c:	4413      	add	r3, r2
 800401e:	3304      	adds	r3, #4
 8004020:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2201      	movs	r2, #1
 8004026:	705a      	strb	r2, [r3, #1]
 8004028:	e00d      	b.n	8004046 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800402a:	78fa      	ldrb	r2, [r7, #3]
 800402c:	4613      	mov	r3, r2
 800402e:	00db      	lsls	r3, r3, #3
 8004030:	4413      	add	r3, r2
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004038:	687a      	ldr	r2, [r7, #4]
 800403a:	4413      	add	r3, r2
 800403c:	3304      	adds	r3, #4
 800403e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2200      	movs	r2, #0
 8004044:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2201      	movs	r2, #1
 800404a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800404c:	78fb      	ldrb	r3, [r7, #3]
 800404e:	f003 030f 	and.w	r3, r3, #15
 8004052:	b2da      	uxtb	r2, r3
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800405e:	2b01      	cmp	r3, #1
 8004060:	d101      	bne.n	8004066 <HAL_PCD_EP_SetStall+0x82>
 8004062:	2302      	movs	r3, #2
 8004064:	e01e      	b.n	80040a4 <HAL_PCD_EP_SetStall+0xc0>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2201      	movs	r2, #1
 800406a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	68f9      	ldr	r1, [r7, #12]
 8004074:	4618      	mov	r0, r3
 8004076:	f004 f877 	bl	8008168 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800407a:	78fb      	ldrb	r3, [r7, #3]
 800407c:	f003 030f 	and.w	r3, r3, #15
 8004080:	2b00      	cmp	r3, #0
 8004082:	d10a      	bne.n	800409a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6818      	ldr	r0, [r3, #0]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	691b      	ldr	r3, [r3, #16]
 800408c:	b2d9      	uxtb	r1, r3
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004094:	461a      	mov	r2, r3
 8004096:	f004 fa67 	bl	8008568 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2200      	movs	r2, #0
 800409e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80040a2:	2300      	movs	r3, #0
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	3710      	adds	r7, #16
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}

080040ac <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b084      	sub	sp, #16
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
 80040b4:	460b      	mov	r3, r1
 80040b6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80040b8:	78fb      	ldrb	r3, [r7, #3]
 80040ba:	f003 020f 	and.w	r2, r3, #15
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	429a      	cmp	r2, r3
 80040c4:	d901      	bls.n	80040ca <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	e042      	b.n	8004150 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80040ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	da0f      	bge.n	80040f2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80040d2:	78fb      	ldrb	r3, [r7, #3]
 80040d4:	f003 020f 	and.w	r2, r3, #15
 80040d8:	4613      	mov	r3, r2
 80040da:	00db      	lsls	r3, r3, #3
 80040dc:	4413      	add	r3, r2
 80040de:	009b      	lsls	r3, r3, #2
 80040e0:	3338      	adds	r3, #56	; 0x38
 80040e2:	687a      	ldr	r2, [r7, #4]
 80040e4:	4413      	add	r3, r2
 80040e6:	3304      	adds	r3, #4
 80040e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2201      	movs	r2, #1
 80040ee:	705a      	strb	r2, [r3, #1]
 80040f0:	e00f      	b.n	8004112 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80040f2:	78fb      	ldrb	r3, [r7, #3]
 80040f4:	f003 020f 	and.w	r2, r3, #15
 80040f8:	4613      	mov	r3, r2
 80040fa:	00db      	lsls	r3, r3, #3
 80040fc:	4413      	add	r3, r2
 80040fe:	009b      	lsls	r3, r3, #2
 8004100:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004104:	687a      	ldr	r2, [r7, #4]
 8004106:	4413      	add	r3, r2
 8004108:	3304      	adds	r3, #4
 800410a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2200      	movs	r2, #0
 8004110:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2200      	movs	r2, #0
 8004116:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004118:	78fb      	ldrb	r3, [r7, #3]
 800411a:	f003 030f 	and.w	r3, r3, #15
 800411e:	b2da      	uxtb	r2, r3
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800412a:	2b01      	cmp	r3, #1
 800412c:	d101      	bne.n	8004132 <HAL_PCD_EP_ClrStall+0x86>
 800412e:	2302      	movs	r3, #2
 8004130:	e00e      	b.n	8004150 <HAL_PCD_EP_ClrStall+0xa4>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2201      	movs	r2, #1
 8004136:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	68f9      	ldr	r1, [r7, #12]
 8004140:	4618      	mov	r0, r3
 8004142:	f004 f87f 	bl	8008244 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2200      	movs	r2, #0
 800414a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800414e:	2300      	movs	r3, #0
}
 8004150:	4618      	mov	r0, r3
 8004152:	3710      	adds	r7, #16
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}

08004158 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b084      	sub	sp, #16
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
 8004160:	460b      	mov	r3, r1
 8004162:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004164:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004168:	2b00      	cmp	r3, #0
 800416a:	da0c      	bge.n	8004186 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800416c:	78fb      	ldrb	r3, [r7, #3]
 800416e:	f003 020f 	and.w	r2, r3, #15
 8004172:	4613      	mov	r3, r2
 8004174:	00db      	lsls	r3, r3, #3
 8004176:	4413      	add	r3, r2
 8004178:	009b      	lsls	r3, r3, #2
 800417a:	3338      	adds	r3, #56	; 0x38
 800417c:	687a      	ldr	r2, [r7, #4]
 800417e:	4413      	add	r3, r2
 8004180:	3304      	adds	r3, #4
 8004182:	60fb      	str	r3, [r7, #12]
 8004184:	e00c      	b.n	80041a0 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004186:	78fb      	ldrb	r3, [r7, #3]
 8004188:	f003 020f 	and.w	r2, r3, #15
 800418c:	4613      	mov	r3, r2
 800418e:	00db      	lsls	r3, r3, #3
 8004190:	4413      	add	r3, r2
 8004192:	009b      	lsls	r3, r3, #2
 8004194:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004198:	687a      	ldr	r2, [r7, #4]
 800419a:	4413      	add	r3, r2
 800419c:	3304      	adds	r3, #4
 800419e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	68f9      	ldr	r1, [r7, #12]
 80041a6:	4618      	mov	r0, r3
 80041a8:	f003 fe9e 	bl	8007ee8 <USB_EPStopXfer>
 80041ac:	4603      	mov	r3, r0
 80041ae:	72fb      	strb	r3, [r7, #11]

  return ret;
 80041b0:	7afb      	ldrb	r3, [r7, #11]
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	3710      	adds	r7, #16
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}

080041ba <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80041ba:	b580      	push	{r7, lr}
 80041bc:	b08a      	sub	sp, #40	; 0x28
 80041be:	af02      	add	r7, sp, #8
 80041c0:	6078      	str	r0, [r7, #4]
 80041c2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80041ce:	683a      	ldr	r2, [r7, #0]
 80041d0:	4613      	mov	r3, r2
 80041d2:	00db      	lsls	r3, r3, #3
 80041d4:	4413      	add	r3, r2
 80041d6:	009b      	lsls	r3, r3, #2
 80041d8:	3338      	adds	r3, #56	; 0x38
 80041da:	687a      	ldr	r2, [r7, #4]
 80041dc:	4413      	add	r3, r2
 80041de:	3304      	adds	r3, #4
 80041e0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	6a1a      	ldr	r2, [r3, #32]
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	699b      	ldr	r3, [r3, #24]
 80041ea:	429a      	cmp	r2, r3
 80041ec:	d901      	bls.n	80041f2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e06c      	b.n	80042cc <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	699a      	ldr	r2, [r3, #24]
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	6a1b      	ldr	r3, [r3, #32]
 80041fa:	1ad3      	subs	r3, r2, r3
 80041fc:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	68db      	ldr	r3, [r3, #12]
 8004202:	69fa      	ldr	r2, [r7, #28]
 8004204:	429a      	cmp	r2, r3
 8004206:	d902      	bls.n	800420e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	68db      	ldr	r3, [r3, #12]
 800420c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800420e:	69fb      	ldr	r3, [r7, #28]
 8004210:	3303      	adds	r3, #3
 8004212:	089b      	lsrs	r3, r3, #2
 8004214:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004216:	e02b      	b.n	8004270 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	699a      	ldr	r2, [r3, #24]
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	6a1b      	ldr	r3, [r3, #32]
 8004220:	1ad3      	subs	r3, r2, r3
 8004222:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	68db      	ldr	r3, [r3, #12]
 8004228:	69fa      	ldr	r2, [r7, #28]
 800422a:	429a      	cmp	r2, r3
 800422c:	d902      	bls.n	8004234 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	68db      	ldr	r3, [r3, #12]
 8004232:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004234:	69fb      	ldr	r3, [r7, #28]
 8004236:	3303      	adds	r3, #3
 8004238:	089b      	lsrs	r3, r3, #2
 800423a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	6919      	ldr	r1, [r3, #16]
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	b2da      	uxtb	r2, r3
 8004244:	69fb      	ldr	r3, [r7, #28]
 8004246:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800424c:	b2db      	uxtb	r3, r3
 800424e:	9300      	str	r3, [sp, #0]
 8004250:	4603      	mov	r3, r0
 8004252:	6978      	ldr	r0, [r7, #20]
 8004254:	f003 fef2 	bl	800803c <USB_WritePacket>

    ep->xfer_buff  += len;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	691a      	ldr	r2, [r3, #16]
 800425c:	69fb      	ldr	r3, [r7, #28]
 800425e:	441a      	add	r2, r3
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	6a1a      	ldr	r2, [r3, #32]
 8004268:	69fb      	ldr	r3, [r7, #28]
 800426a:	441a      	add	r2, r3
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	015a      	lsls	r2, r3, #5
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	4413      	add	r3, r2
 8004278:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800427c:	699b      	ldr	r3, [r3, #24]
 800427e:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004280:	69ba      	ldr	r2, [r7, #24]
 8004282:	429a      	cmp	r2, r3
 8004284:	d809      	bhi.n	800429a <PCD_WriteEmptyTxFifo+0xe0>
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	6a1a      	ldr	r2, [r3, #32]
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800428e:	429a      	cmp	r2, r3
 8004290:	d203      	bcs.n	800429a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	699b      	ldr	r3, [r3, #24]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d1be      	bne.n	8004218 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	699a      	ldr	r2, [r3, #24]
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	6a1b      	ldr	r3, [r3, #32]
 80042a2:	429a      	cmp	r2, r3
 80042a4:	d811      	bhi.n	80042ca <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	f003 030f 	and.w	r3, r3, #15
 80042ac:	2201      	movs	r2, #1
 80042ae:	fa02 f303 	lsl.w	r3, r2, r3
 80042b2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	43db      	mvns	r3, r3
 80042c0:	6939      	ldr	r1, [r7, #16]
 80042c2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80042c6:	4013      	ands	r3, r2
 80042c8:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80042ca:	2300      	movs	r3, #0
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	3720      	adds	r7, #32
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}

080042d4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b088      	sub	sp, #32
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
 80042dc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042e4:	69fb      	ldr	r3, [r7, #28]
 80042e6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80042e8:	69fb      	ldr	r3, [r7, #28]
 80042ea:	333c      	adds	r3, #60	; 0x3c
 80042ec:	3304      	adds	r3, #4
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	015a      	lsls	r2, r3, #5
 80042f6:	69bb      	ldr	r3, [r7, #24]
 80042f8:	4413      	add	r3, r2
 80042fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	691b      	ldr	r3, [r3, #16]
 8004306:	2b01      	cmp	r3, #1
 8004308:	d17b      	bne.n	8004402 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	f003 0308 	and.w	r3, r3, #8
 8004310:	2b00      	cmp	r3, #0
 8004312:	d015      	beq.n	8004340 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	4a61      	ldr	r2, [pc, #388]	; (800449c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004318:	4293      	cmp	r3, r2
 800431a:	f240 80b9 	bls.w	8004490 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004324:	2b00      	cmp	r3, #0
 8004326:	f000 80b3 	beq.w	8004490 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	015a      	lsls	r2, r3, #5
 800432e:	69bb      	ldr	r3, [r7, #24]
 8004330:	4413      	add	r3, r2
 8004332:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004336:	461a      	mov	r2, r3
 8004338:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800433c:	6093      	str	r3, [r2, #8]
 800433e:	e0a7      	b.n	8004490 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	f003 0320 	and.w	r3, r3, #32
 8004346:	2b00      	cmp	r3, #0
 8004348:	d009      	beq.n	800435e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	015a      	lsls	r2, r3, #5
 800434e:	69bb      	ldr	r3, [r7, #24]
 8004350:	4413      	add	r3, r2
 8004352:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004356:	461a      	mov	r2, r3
 8004358:	2320      	movs	r3, #32
 800435a:	6093      	str	r3, [r2, #8]
 800435c:	e098      	b.n	8004490 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004364:	2b00      	cmp	r3, #0
 8004366:	f040 8093 	bne.w	8004490 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	4a4b      	ldr	r2, [pc, #300]	; (800449c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d90f      	bls.n	8004392 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004378:	2b00      	cmp	r3, #0
 800437a:	d00a      	beq.n	8004392 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	015a      	lsls	r2, r3, #5
 8004380:	69bb      	ldr	r3, [r7, #24]
 8004382:	4413      	add	r3, r2
 8004384:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004388:	461a      	mov	r2, r3
 800438a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800438e:	6093      	str	r3, [r2, #8]
 8004390:	e07e      	b.n	8004490 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004392:	683a      	ldr	r2, [r7, #0]
 8004394:	4613      	mov	r3, r2
 8004396:	00db      	lsls	r3, r3, #3
 8004398:	4413      	add	r3, r2
 800439a:	009b      	lsls	r3, r3, #2
 800439c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80043a0:	687a      	ldr	r2, [r7, #4]
 80043a2:	4413      	add	r3, r2
 80043a4:	3304      	adds	r3, #4
 80043a6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	69da      	ldr	r2, [r3, #28]
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	0159      	lsls	r1, r3, #5
 80043b0:	69bb      	ldr	r3, [r7, #24]
 80043b2:	440b      	add	r3, r1
 80043b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043b8:	691b      	ldr	r3, [r3, #16]
 80043ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043be:	1ad2      	subs	r2, r2, r3
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d114      	bne.n	80043f4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	699b      	ldr	r3, [r3, #24]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d109      	bne.n	80043e6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6818      	ldr	r0, [r3, #0]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80043dc:	461a      	mov	r2, r3
 80043de:	2101      	movs	r1, #1
 80043e0:	f004 f8c2 	bl	8008568 <USB_EP0_OutStart>
 80043e4:	e006      	b.n	80043f4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	691a      	ldr	r2, [r3, #16]
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	6a1b      	ldr	r3, [r3, #32]
 80043ee:	441a      	add	r2, r3
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	b2db      	uxtb	r3, r3
 80043f8:	4619      	mov	r1, r3
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f009 fd24 	bl	800de48 <HAL_PCD_DataOutStageCallback>
 8004400:	e046      	b.n	8004490 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	4a26      	ldr	r2, [pc, #152]	; (80044a0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d124      	bne.n	8004454 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004410:	2b00      	cmp	r3, #0
 8004412:	d00a      	beq.n	800442a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	015a      	lsls	r2, r3, #5
 8004418:	69bb      	ldr	r3, [r7, #24]
 800441a:	4413      	add	r3, r2
 800441c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004420:	461a      	mov	r2, r3
 8004422:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004426:	6093      	str	r3, [r2, #8]
 8004428:	e032      	b.n	8004490 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	f003 0320 	and.w	r3, r3, #32
 8004430:	2b00      	cmp	r3, #0
 8004432:	d008      	beq.n	8004446 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	015a      	lsls	r2, r3, #5
 8004438:	69bb      	ldr	r3, [r7, #24]
 800443a:	4413      	add	r3, r2
 800443c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004440:	461a      	mov	r2, r3
 8004442:	2320      	movs	r3, #32
 8004444:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	b2db      	uxtb	r3, r3
 800444a:	4619      	mov	r1, r3
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	f009 fcfb 	bl	800de48 <HAL_PCD_DataOutStageCallback>
 8004452:	e01d      	b.n	8004490 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d114      	bne.n	8004484 <PCD_EP_OutXfrComplete_int+0x1b0>
 800445a:	6879      	ldr	r1, [r7, #4]
 800445c:	683a      	ldr	r2, [r7, #0]
 800445e:	4613      	mov	r3, r2
 8004460:	00db      	lsls	r3, r3, #3
 8004462:	4413      	add	r3, r2
 8004464:	009b      	lsls	r3, r3, #2
 8004466:	440b      	add	r3, r1
 8004468:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d108      	bne.n	8004484 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6818      	ldr	r0, [r3, #0]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800447c:	461a      	mov	r2, r3
 800447e:	2100      	movs	r1, #0
 8004480:	f004 f872 	bl	8008568 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	b2db      	uxtb	r3, r3
 8004488:	4619      	mov	r1, r3
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f009 fcdc 	bl	800de48 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004490:	2300      	movs	r3, #0
}
 8004492:	4618      	mov	r0, r3
 8004494:	3720      	adds	r7, #32
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}
 800449a:	bf00      	nop
 800449c:	4f54300a 	.word	0x4f54300a
 80044a0:	4f54310a 	.word	0x4f54310a

080044a4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b086      	sub	sp, #24
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
 80044ac:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	333c      	adds	r3, #60	; 0x3c
 80044bc:	3304      	adds	r3, #4
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	015a      	lsls	r2, r3, #5
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	4413      	add	r3, r2
 80044ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	4a15      	ldr	r2, [pc, #84]	; (800452c <PCD_EP_OutSetupPacket_int+0x88>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d90e      	bls.n	80044f8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d009      	beq.n	80044f8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	015a      	lsls	r2, r3, #5
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	4413      	add	r3, r2
 80044ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044f0:	461a      	mov	r2, r3
 80044f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044f6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80044f8:	6878      	ldr	r0, [r7, #4]
 80044fa:	f009 fc93 	bl	800de24 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	4a0a      	ldr	r2, [pc, #40]	; (800452c <PCD_EP_OutSetupPacket_int+0x88>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d90c      	bls.n	8004520 <PCD_EP_OutSetupPacket_int+0x7c>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	691b      	ldr	r3, [r3, #16]
 800450a:	2b01      	cmp	r3, #1
 800450c:	d108      	bne.n	8004520 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6818      	ldr	r0, [r3, #0]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004518:	461a      	mov	r2, r3
 800451a:	2101      	movs	r1, #1
 800451c:	f004 f824 	bl	8008568 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004520:	2300      	movs	r3, #0
}
 8004522:	4618      	mov	r0, r3
 8004524:	3718      	adds	r7, #24
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}
 800452a:	bf00      	nop
 800452c:	4f54300a 	.word	0x4f54300a

08004530 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004530:	b480      	push	{r7}
 8004532:	b085      	sub	sp, #20
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
 8004538:	460b      	mov	r3, r1
 800453a:	70fb      	strb	r3, [r7, #3]
 800453c:	4613      	mov	r3, r2
 800453e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004546:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004548:	78fb      	ldrb	r3, [r7, #3]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d107      	bne.n	800455e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800454e:	883b      	ldrh	r3, [r7, #0]
 8004550:	0419      	lsls	r1, r3, #16
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	68ba      	ldr	r2, [r7, #8]
 8004558:	430a      	orrs	r2, r1
 800455a:	629a      	str	r2, [r3, #40]	; 0x28
 800455c:	e028      	b.n	80045b0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004564:	0c1b      	lsrs	r3, r3, #16
 8004566:	68ba      	ldr	r2, [r7, #8]
 8004568:	4413      	add	r3, r2
 800456a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800456c:	2300      	movs	r3, #0
 800456e:	73fb      	strb	r3, [r7, #15]
 8004570:	e00d      	b.n	800458e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	7bfb      	ldrb	r3, [r7, #15]
 8004578:	3340      	adds	r3, #64	; 0x40
 800457a:	009b      	lsls	r3, r3, #2
 800457c:	4413      	add	r3, r2
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	0c1b      	lsrs	r3, r3, #16
 8004582:	68ba      	ldr	r2, [r7, #8]
 8004584:	4413      	add	r3, r2
 8004586:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004588:	7bfb      	ldrb	r3, [r7, #15]
 800458a:	3301      	adds	r3, #1
 800458c:	73fb      	strb	r3, [r7, #15]
 800458e:	7bfa      	ldrb	r2, [r7, #15]
 8004590:	78fb      	ldrb	r3, [r7, #3]
 8004592:	3b01      	subs	r3, #1
 8004594:	429a      	cmp	r2, r3
 8004596:	d3ec      	bcc.n	8004572 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004598:	883b      	ldrh	r3, [r7, #0]
 800459a:	0418      	lsls	r0, r3, #16
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6819      	ldr	r1, [r3, #0]
 80045a0:	78fb      	ldrb	r3, [r7, #3]
 80045a2:	3b01      	subs	r3, #1
 80045a4:	68ba      	ldr	r2, [r7, #8]
 80045a6:	4302      	orrs	r2, r0
 80045a8:	3340      	adds	r3, #64	; 0x40
 80045aa:	009b      	lsls	r3, r3, #2
 80045ac:	440b      	add	r3, r1
 80045ae:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80045b0:	2300      	movs	r3, #0
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	3714      	adds	r7, #20
 80045b6:	46bd      	mov	sp, r7
 80045b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045bc:	4770      	bx	lr

080045be <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80045be:	b480      	push	{r7}
 80045c0:	b083      	sub	sp, #12
 80045c2:	af00      	add	r7, sp, #0
 80045c4:	6078      	str	r0, [r7, #4]
 80045c6:	460b      	mov	r3, r1
 80045c8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	887a      	ldrh	r2, [r7, #2]
 80045d0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80045d2:	2300      	movs	r3, #0
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	370c      	adds	r7, #12
 80045d8:	46bd      	mov	sp, r7
 80045da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045de:	4770      	bx	lr

080045e0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b083      	sub	sp, #12
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
 80045e8:	460b      	mov	r3, r1
 80045ea:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80045ec:	bf00      	nop
 80045ee:	370c      	adds	r7, #12
 80045f0:	46bd      	mov	sp, r7
 80045f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f6:	4770      	bx	lr

080045f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b086      	sub	sp, #24
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d101      	bne.n	800460a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	e267      	b.n	8004ada <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 0301 	and.w	r3, r3, #1
 8004612:	2b00      	cmp	r3, #0
 8004614:	d075      	beq.n	8004702 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004616:	4b88      	ldr	r3, [pc, #544]	; (8004838 <HAL_RCC_OscConfig+0x240>)
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	f003 030c 	and.w	r3, r3, #12
 800461e:	2b04      	cmp	r3, #4
 8004620:	d00c      	beq.n	800463c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004622:	4b85      	ldr	r3, [pc, #532]	; (8004838 <HAL_RCC_OscConfig+0x240>)
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800462a:	2b08      	cmp	r3, #8
 800462c:	d112      	bne.n	8004654 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800462e:	4b82      	ldr	r3, [pc, #520]	; (8004838 <HAL_RCC_OscConfig+0x240>)
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004636:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800463a:	d10b      	bne.n	8004654 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800463c:	4b7e      	ldr	r3, [pc, #504]	; (8004838 <HAL_RCC_OscConfig+0x240>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004644:	2b00      	cmp	r3, #0
 8004646:	d05b      	beq.n	8004700 <HAL_RCC_OscConfig+0x108>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d157      	bne.n	8004700 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	e242      	b.n	8004ada <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800465c:	d106      	bne.n	800466c <HAL_RCC_OscConfig+0x74>
 800465e:	4b76      	ldr	r3, [pc, #472]	; (8004838 <HAL_RCC_OscConfig+0x240>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a75      	ldr	r2, [pc, #468]	; (8004838 <HAL_RCC_OscConfig+0x240>)
 8004664:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004668:	6013      	str	r3, [r2, #0]
 800466a:	e01d      	b.n	80046a8 <HAL_RCC_OscConfig+0xb0>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004674:	d10c      	bne.n	8004690 <HAL_RCC_OscConfig+0x98>
 8004676:	4b70      	ldr	r3, [pc, #448]	; (8004838 <HAL_RCC_OscConfig+0x240>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a6f      	ldr	r2, [pc, #444]	; (8004838 <HAL_RCC_OscConfig+0x240>)
 800467c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004680:	6013      	str	r3, [r2, #0]
 8004682:	4b6d      	ldr	r3, [pc, #436]	; (8004838 <HAL_RCC_OscConfig+0x240>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a6c      	ldr	r2, [pc, #432]	; (8004838 <HAL_RCC_OscConfig+0x240>)
 8004688:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800468c:	6013      	str	r3, [r2, #0]
 800468e:	e00b      	b.n	80046a8 <HAL_RCC_OscConfig+0xb0>
 8004690:	4b69      	ldr	r3, [pc, #420]	; (8004838 <HAL_RCC_OscConfig+0x240>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a68      	ldr	r2, [pc, #416]	; (8004838 <HAL_RCC_OscConfig+0x240>)
 8004696:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800469a:	6013      	str	r3, [r2, #0]
 800469c:	4b66      	ldr	r3, [pc, #408]	; (8004838 <HAL_RCC_OscConfig+0x240>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a65      	ldr	r2, [pc, #404]	; (8004838 <HAL_RCC_OscConfig+0x240>)
 80046a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80046a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d013      	beq.n	80046d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046b0:	f7fd fa24 	bl	8001afc <HAL_GetTick>
 80046b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046b6:	e008      	b.n	80046ca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80046b8:	f7fd fa20 	bl	8001afc <HAL_GetTick>
 80046bc:	4602      	mov	r2, r0
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	1ad3      	subs	r3, r2, r3
 80046c2:	2b64      	cmp	r3, #100	; 0x64
 80046c4:	d901      	bls.n	80046ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80046c6:	2303      	movs	r3, #3
 80046c8:	e207      	b.n	8004ada <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046ca:	4b5b      	ldr	r3, [pc, #364]	; (8004838 <HAL_RCC_OscConfig+0x240>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d0f0      	beq.n	80046b8 <HAL_RCC_OscConfig+0xc0>
 80046d6:	e014      	b.n	8004702 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046d8:	f7fd fa10 	bl	8001afc <HAL_GetTick>
 80046dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046de:	e008      	b.n	80046f2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80046e0:	f7fd fa0c 	bl	8001afc <HAL_GetTick>
 80046e4:	4602      	mov	r2, r0
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	1ad3      	subs	r3, r2, r3
 80046ea:	2b64      	cmp	r3, #100	; 0x64
 80046ec:	d901      	bls.n	80046f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80046ee:	2303      	movs	r3, #3
 80046f0:	e1f3      	b.n	8004ada <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046f2:	4b51      	ldr	r3, [pc, #324]	; (8004838 <HAL_RCC_OscConfig+0x240>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d1f0      	bne.n	80046e0 <HAL_RCC_OscConfig+0xe8>
 80046fe:	e000      	b.n	8004702 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004700:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f003 0302 	and.w	r3, r3, #2
 800470a:	2b00      	cmp	r3, #0
 800470c:	d063      	beq.n	80047d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800470e:	4b4a      	ldr	r3, [pc, #296]	; (8004838 <HAL_RCC_OscConfig+0x240>)
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	f003 030c 	and.w	r3, r3, #12
 8004716:	2b00      	cmp	r3, #0
 8004718:	d00b      	beq.n	8004732 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800471a:	4b47      	ldr	r3, [pc, #284]	; (8004838 <HAL_RCC_OscConfig+0x240>)
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004722:	2b08      	cmp	r3, #8
 8004724:	d11c      	bne.n	8004760 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004726:	4b44      	ldr	r3, [pc, #272]	; (8004838 <HAL_RCC_OscConfig+0x240>)
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800472e:	2b00      	cmp	r3, #0
 8004730:	d116      	bne.n	8004760 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004732:	4b41      	ldr	r3, [pc, #260]	; (8004838 <HAL_RCC_OscConfig+0x240>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f003 0302 	and.w	r3, r3, #2
 800473a:	2b00      	cmp	r3, #0
 800473c:	d005      	beq.n	800474a <HAL_RCC_OscConfig+0x152>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	68db      	ldr	r3, [r3, #12]
 8004742:	2b01      	cmp	r3, #1
 8004744:	d001      	beq.n	800474a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	e1c7      	b.n	8004ada <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800474a:	4b3b      	ldr	r3, [pc, #236]	; (8004838 <HAL_RCC_OscConfig+0x240>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	691b      	ldr	r3, [r3, #16]
 8004756:	00db      	lsls	r3, r3, #3
 8004758:	4937      	ldr	r1, [pc, #220]	; (8004838 <HAL_RCC_OscConfig+0x240>)
 800475a:	4313      	orrs	r3, r2
 800475c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800475e:	e03a      	b.n	80047d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	68db      	ldr	r3, [r3, #12]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d020      	beq.n	80047aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004768:	4b34      	ldr	r3, [pc, #208]	; (800483c <HAL_RCC_OscConfig+0x244>)
 800476a:	2201      	movs	r2, #1
 800476c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800476e:	f7fd f9c5 	bl	8001afc <HAL_GetTick>
 8004772:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004774:	e008      	b.n	8004788 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004776:	f7fd f9c1 	bl	8001afc <HAL_GetTick>
 800477a:	4602      	mov	r2, r0
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	1ad3      	subs	r3, r2, r3
 8004780:	2b02      	cmp	r3, #2
 8004782:	d901      	bls.n	8004788 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004784:	2303      	movs	r3, #3
 8004786:	e1a8      	b.n	8004ada <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004788:	4b2b      	ldr	r3, [pc, #172]	; (8004838 <HAL_RCC_OscConfig+0x240>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f003 0302 	and.w	r3, r3, #2
 8004790:	2b00      	cmp	r3, #0
 8004792:	d0f0      	beq.n	8004776 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004794:	4b28      	ldr	r3, [pc, #160]	; (8004838 <HAL_RCC_OscConfig+0x240>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	691b      	ldr	r3, [r3, #16]
 80047a0:	00db      	lsls	r3, r3, #3
 80047a2:	4925      	ldr	r1, [pc, #148]	; (8004838 <HAL_RCC_OscConfig+0x240>)
 80047a4:	4313      	orrs	r3, r2
 80047a6:	600b      	str	r3, [r1, #0]
 80047a8:	e015      	b.n	80047d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047aa:	4b24      	ldr	r3, [pc, #144]	; (800483c <HAL_RCC_OscConfig+0x244>)
 80047ac:	2200      	movs	r2, #0
 80047ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047b0:	f7fd f9a4 	bl	8001afc <HAL_GetTick>
 80047b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047b6:	e008      	b.n	80047ca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047b8:	f7fd f9a0 	bl	8001afc <HAL_GetTick>
 80047bc:	4602      	mov	r2, r0
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	1ad3      	subs	r3, r2, r3
 80047c2:	2b02      	cmp	r3, #2
 80047c4:	d901      	bls.n	80047ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80047c6:	2303      	movs	r3, #3
 80047c8:	e187      	b.n	8004ada <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047ca:	4b1b      	ldr	r3, [pc, #108]	; (8004838 <HAL_RCC_OscConfig+0x240>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 0302 	and.w	r3, r3, #2
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d1f0      	bne.n	80047b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 0308 	and.w	r3, r3, #8
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d036      	beq.n	8004850 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	695b      	ldr	r3, [r3, #20]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d016      	beq.n	8004818 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80047ea:	4b15      	ldr	r3, [pc, #84]	; (8004840 <HAL_RCC_OscConfig+0x248>)
 80047ec:	2201      	movs	r2, #1
 80047ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047f0:	f7fd f984 	bl	8001afc <HAL_GetTick>
 80047f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047f6:	e008      	b.n	800480a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80047f8:	f7fd f980 	bl	8001afc <HAL_GetTick>
 80047fc:	4602      	mov	r2, r0
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	1ad3      	subs	r3, r2, r3
 8004802:	2b02      	cmp	r3, #2
 8004804:	d901      	bls.n	800480a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004806:	2303      	movs	r3, #3
 8004808:	e167      	b.n	8004ada <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800480a:	4b0b      	ldr	r3, [pc, #44]	; (8004838 <HAL_RCC_OscConfig+0x240>)
 800480c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800480e:	f003 0302 	and.w	r3, r3, #2
 8004812:	2b00      	cmp	r3, #0
 8004814:	d0f0      	beq.n	80047f8 <HAL_RCC_OscConfig+0x200>
 8004816:	e01b      	b.n	8004850 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004818:	4b09      	ldr	r3, [pc, #36]	; (8004840 <HAL_RCC_OscConfig+0x248>)
 800481a:	2200      	movs	r2, #0
 800481c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800481e:	f7fd f96d 	bl	8001afc <HAL_GetTick>
 8004822:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004824:	e00e      	b.n	8004844 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004826:	f7fd f969 	bl	8001afc <HAL_GetTick>
 800482a:	4602      	mov	r2, r0
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	1ad3      	subs	r3, r2, r3
 8004830:	2b02      	cmp	r3, #2
 8004832:	d907      	bls.n	8004844 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004834:	2303      	movs	r3, #3
 8004836:	e150      	b.n	8004ada <HAL_RCC_OscConfig+0x4e2>
 8004838:	40023800 	.word	0x40023800
 800483c:	42470000 	.word	0x42470000
 8004840:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004844:	4b88      	ldr	r3, [pc, #544]	; (8004a68 <HAL_RCC_OscConfig+0x470>)
 8004846:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004848:	f003 0302 	and.w	r3, r3, #2
 800484c:	2b00      	cmp	r3, #0
 800484e:	d1ea      	bne.n	8004826 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f003 0304 	and.w	r3, r3, #4
 8004858:	2b00      	cmp	r3, #0
 800485a:	f000 8097 	beq.w	800498c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800485e:	2300      	movs	r3, #0
 8004860:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004862:	4b81      	ldr	r3, [pc, #516]	; (8004a68 <HAL_RCC_OscConfig+0x470>)
 8004864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004866:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800486a:	2b00      	cmp	r3, #0
 800486c:	d10f      	bne.n	800488e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800486e:	2300      	movs	r3, #0
 8004870:	60bb      	str	r3, [r7, #8]
 8004872:	4b7d      	ldr	r3, [pc, #500]	; (8004a68 <HAL_RCC_OscConfig+0x470>)
 8004874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004876:	4a7c      	ldr	r2, [pc, #496]	; (8004a68 <HAL_RCC_OscConfig+0x470>)
 8004878:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800487c:	6413      	str	r3, [r2, #64]	; 0x40
 800487e:	4b7a      	ldr	r3, [pc, #488]	; (8004a68 <HAL_RCC_OscConfig+0x470>)
 8004880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004882:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004886:	60bb      	str	r3, [r7, #8]
 8004888:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800488a:	2301      	movs	r3, #1
 800488c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800488e:	4b77      	ldr	r3, [pc, #476]	; (8004a6c <HAL_RCC_OscConfig+0x474>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004896:	2b00      	cmp	r3, #0
 8004898:	d118      	bne.n	80048cc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800489a:	4b74      	ldr	r3, [pc, #464]	; (8004a6c <HAL_RCC_OscConfig+0x474>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a73      	ldr	r2, [pc, #460]	; (8004a6c <HAL_RCC_OscConfig+0x474>)
 80048a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048a6:	f7fd f929 	bl	8001afc <HAL_GetTick>
 80048aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048ac:	e008      	b.n	80048c0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048ae:	f7fd f925 	bl	8001afc <HAL_GetTick>
 80048b2:	4602      	mov	r2, r0
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	1ad3      	subs	r3, r2, r3
 80048b8:	2b02      	cmp	r3, #2
 80048ba:	d901      	bls.n	80048c0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80048bc:	2303      	movs	r3, #3
 80048be:	e10c      	b.n	8004ada <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048c0:	4b6a      	ldr	r3, [pc, #424]	; (8004a6c <HAL_RCC_OscConfig+0x474>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d0f0      	beq.n	80048ae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	d106      	bne.n	80048e2 <HAL_RCC_OscConfig+0x2ea>
 80048d4:	4b64      	ldr	r3, [pc, #400]	; (8004a68 <HAL_RCC_OscConfig+0x470>)
 80048d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048d8:	4a63      	ldr	r2, [pc, #396]	; (8004a68 <HAL_RCC_OscConfig+0x470>)
 80048da:	f043 0301 	orr.w	r3, r3, #1
 80048de:	6713      	str	r3, [r2, #112]	; 0x70
 80048e0:	e01c      	b.n	800491c <HAL_RCC_OscConfig+0x324>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	2b05      	cmp	r3, #5
 80048e8:	d10c      	bne.n	8004904 <HAL_RCC_OscConfig+0x30c>
 80048ea:	4b5f      	ldr	r3, [pc, #380]	; (8004a68 <HAL_RCC_OscConfig+0x470>)
 80048ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048ee:	4a5e      	ldr	r2, [pc, #376]	; (8004a68 <HAL_RCC_OscConfig+0x470>)
 80048f0:	f043 0304 	orr.w	r3, r3, #4
 80048f4:	6713      	str	r3, [r2, #112]	; 0x70
 80048f6:	4b5c      	ldr	r3, [pc, #368]	; (8004a68 <HAL_RCC_OscConfig+0x470>)
 80048f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048fa:	4a5b      	ldr	r2, [pc, #364]	; (8004a68 <HAL_RCC_OscConfig+0x470>)
 80048fc:	f043 0301 	orr.w	r3, r3, #1
 8004900:	6713      	str	r3, [r2, #112]	; 0x70
 8004902:	e00b      	b.n	800491c <HAL_RCC_OscConfig+0x324>
 8004904:	4b58      	ldr	r3, [pc, #352]	; (8004a68 <HAL_RCC_OscConfig+0x470>)
 8004906:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004908:	4a57      	ldr	r2, [pc, #348]	; (8004a68 <HAL_RCC_OscConfig+0x470>)
 800490a:	f023 0301 	bic.w	r3, r3, #1
 800490e:	6713      	str	r3, [r2, #112]	; 0x70
 8004910:	4b55      	ldr	r3, [pc, #340]	; (8004a68 <HAL_RCC_OscConfig+0x470>)
 8004912:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004914:	4a54      	ldr	r2, [pc, #336]	; (8004a68 <HAL_RCC_OscConfig+0x470>)
 8004916:	f023 0304 	bic.w	r3, r3, #4
 800491a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d015      	beq.n	8004950 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004924:	f7fd f8ea 	bl	8001afc <HAL_GetTick>
 8004928:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800492a:	e00a      	b.n	8004942 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800492c:	f7fd f8e6 	bl	8001afc <HAL_GetTick>
 8004930:	4602      	mov	r2, r0
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	1ad3      	subs	r3, r2, r3
 8004936:	f241 3288 	movw	r2, #5000	; 0x1388
 800493a:	4293      	cmp	r3, r2
 800493c:	d901      	bls.n	8004942 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800493e:	2303      	movs	r3, #3
 8004940:	e0cb      	b.n	8004ada <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004942:	4b49      	ldr	r3, [pc, #292]	; (8004a68 <HAL_RCC_OscConfig+0x470>)
 8004944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004946:	f003 0302 	and.w	r3, r3, #2
 800494a:	2b00      	cmp	r3, #0
 800494c:	d0ee      	beq.n	800492c <HAL_RCC_OscConfig+0x334>
 800494e:	e014      	b.n	800497a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004950:	f7fd f8d4 	bl	8001afc <HAL_GetTick>
 8004954:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004956:	e00a      	b.n	800496e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004958:	f7fd f8d0 	bl	8001afc <HAL_GetTick>
 800495c:	4602      	mov	r2, r0
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	1ad3      	subs	r3, r2, r3
 8004962:	f241 3288 	movw	r2, #5000	; 0x1388
 8004966:	4293      	cmp	r3, r2
 8004968:	d901      	bls.n	800496e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800496a:	2303      	movs	r3, #3
 800496c:	e0b5      	b.n	8004ada <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800496e:	4b3e      	ldr	r3, [pc, #248]	; (8004a68 <HAL_RCC_OscConfig+0x470>)
 8004970:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004972:	f003 0302 	and.w	r3, r3, #2
 8004976:	2b00      	cmp	r3, #0
 8004978:	d1ee      	bne.n	8004958 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800497a:	7dfb      	ldrb	r3, [r7, #23]
 800497c:	2b01      	cmp	r3, #1
 800497e:	d105      	bne.n	800498c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004980:	4b39      	ldr	r3, [pc, #228]	; (8004a68 <HAL_RCC_OscConfig+0x470>)
 8004982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004984:	4a38      	ldr	r2, [pc, #224]	; (8004a68 <HAL_RCC_OscConfig+0x470>)
 8004986:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800498a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	699b      	ldr	r3, [r3, #24]
 8004990:	2b00      	cmp	r3, #0
 8004992:	f000 80a1 	beq.w	8004ad8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004996:	4b34      	ldr	r3, [pc, #208]	; (8004a68 <HAL_RCC_OscConfig+0x470>)
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	f003 030c 	and.w	r3, r3, #12
 800499e:	2b08      	cmp	r3, #8
 80049a0:	d05c      	beq.n	8004a5c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	699b      	ldr	r3, [r3, #24]
 80049a6:	2b02      	cmp	r3, #2
 80049a8:	d141      	bne.n	8004a2e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049aa:	4b31      	ldr	r3, [pc, #196]	; (8004a70 <HAL_RCC_OscConfig+0x478>)
 80049ac:	2200      	movs	r2, #0
 80049ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049b0:	f7fd f8a4 	bl	8001afc <HAL_GetTick>
 80049b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049b6:	e008      	b.n	80049ca <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049b8:	f7fd f8a0 	bl	8001afc <HAL_GetTick>
 80049bc:	4602      	mov	r2, r0
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	1ad3      	subs	r3, r2, r3
 80049c2:	2b02      	cmp	r3, #2
 80049c4:	d901      	bls.n	80049ca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80049c6:	2303      	movs	r3, #3
 80049c8:	e087      	b.n	8004ada <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049ca:	4b27      	ldr	r3, [pc, #156]	; (8004a68 <HAL_RCC_OscConfig+0x470>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d1f0      	bne.n	80049b8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	69da      	ldr	r2, [r3, #28]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6a1b      	ldr	r3, [r3, #32]
 80049de:	431a      	orrs	r2, r3
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e4:	019b      	lsls	r3, r3, #6
 80049e6:	431a      	orrs	r2, r3
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ec:	085b      	lsrs	r3, r3, #1
 80049ee:	3b01      	subs	r3, #1
 80049f0:	041b      	lsls	r3, r3, #16
 80049f2:	431a      	orrs	r2, r3
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049f8:	061b      	lsls	r3, r3, #24
 80049fa:	491b      	ldr	r1, [pc, #108]	; (8004a68 <HAL_RCC_OscConfig+0x470>)
 80049fc:	4313      	orrs	r3, r2
 80049fe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a00:	4b1b      	ldr	r3, [pc, #108]	; (8004a70 <HAL_RCC_OscConfig+0x478>)
 8004a02:	2201      	movs	r2, #1
 8004a04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a06:	f7fd f879 	bl	8001afc <HAL_GetTick>
 8004a0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a0c:	e008      	b.n	8004a20 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a0e:	f7fd f875 	bl	8001afc <HAL_GetTick>
 8004a12:	4602      	mov	r2, r0
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	1ad3      	subs	r3, r2, r3
 8004a18:	2b02      	cmp	r3, #2
 8004a1a:	d901      	bls.n	8004a20 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004a1c:	2303      	movs	r3, #3
 8004a1e:	e05c      	b.n	8004ada <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a20:	4b11      	ldr	r3, [pc, #68]	; (8004a68 <HAL_RCC_OscConfig+0x470>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d0f0      	beq.n	8004a0e <HAL_RCC_OscConfig+0x416>
 8004a2c:	e054      	b.n	8004ad8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a2e:	4b10      	ldr	r3, [pc, #64]	; (8004a70 <HAL_RCC_OscConfig+0x478>)
 8004a30:	2200      	movs	r2, #0
 8004a32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a34:	f7fd f862 	bl	8001afc <HAL_GetTick>
 8004a38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a3a:	e008      	b.n	8004a4e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a3c:	f7fd f85e 	bl	8001afc <HAL_GetTick>
 8004a40:	4602      	mov	r2, r0
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	1ad3      	subs	r3, r2, r3
 8004a46:	2b02      	cmp	r3, #2
 8004a48:	d901      	bls.n	8004a4e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004a4a:	2303      	movs	r3, #3
 8004a4c:	e045      	b.n	8004ada <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a4e:	4b06      	ldr	r3, [pc, #24]	; (8004a68 <HAL_RCC_OscConfig+0x470>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d1f0      	bne.n	8004a3c <HAL_RCC_OscConfig+0x444>
 8004a5a:	e03d      	b.n	8004ad8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	699b      	ldr	r3, [r3, #24]
 8004a60:	2b01      	cmp	r3, #1
 8004a62:	d107      	bne.n	8004a74 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	e038      	b.n	8004ada <HAL_RCC_OscConfig+0x4e2>
 8004a68:	40023800 	.word	0x40023800
 8004a6c:	40007000 	.word	0x40007000
 8004a70:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004a74:	4b1b      	ldr	r3, [pc, #108]	; (8004ae4 <HAL_RCC_OscConfig+0x4ec>)
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	699b      	ldr	r3, [r3, #24]
 8004a7e:	2b01      	cmp	r3, #1
 8004a80:	d028      	beq.n	8004ad4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	d121      	bne.n	8004ad4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a9a:	429a      	cmp	r2, r3
 8004a9c:	d11a      	bne.n	8004ad4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a9e:	68fa      	ldr	r2, [r7, #12]
 8004aa0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004aa4:	4013      	ands	r3, r2
 8004aa6:	687a      	ldr	r2, [r7, #4]
 8004aa8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004aaa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d111      	bne.n	8004ad4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aba:	085b      	lsrs	r3, r3, #1
 8004abc:	3b01      	subs	r3, #1
 8004abe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	d107      	bne.n	8004ad4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ace:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ad0:	429a      	cmp	r2, r3
 8004ad2:	d001      	beq.n	8004ad8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	e000      	b.n	8004ada <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004ad8:	2300      	movs	r3, #0
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	3718      	adds	r7, #24
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}
 8004ae2:	bf00      	nop
 8004ae4:	40023800 	.word	0x40023800

08004ae8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b084      	sub	sp, #16
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
 8004af0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d101      	bne.n	8004afc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	e0cc      	b.n	8004c96 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004afc:	4b68      	ldr	r3, [pc, #416]	; (8004ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f003 0307 	and.w	r3, r3, #7
 8004b04:	683a      	ldr	r2, [r7, #0]
 8004b06:	429a      	cmp	r2, r3
 8004b08:	d90c      	bls.n	8004b24 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b0a:	4b65      	ldr	r3, [pc, #404]	; (8004ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8004b0c:	683a      	ldr	r2, [r7, #0]
 8004b0e:	b2d2      	uxtb	r2, r2
 8004b10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b12:	4b63      	ldr	r3, [pc, #396]	; (8004ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f003 0307 	and.w	r3, r3, #7
 8004b1a:	683a      	ldr	r2, [r7, #0]
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	d001      	beq.n	8004b24 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	e0b8      	b.n	8004c96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f003 0302 	and.w	r3, r3, #2
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d020      	beq.n	8004b72 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f003 0304 	and.w	r3, r3, #4
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d005      	beq.n	8004b48 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b3c:	4b59      	ldr	r3, [pc, #356]	; (8004ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	4a58      	ldr	r2, [pc, #352]	; (8004ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b42:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004b46:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f003 0308 	and.w	r3, r3, #8
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d005      	beq.n	8004b60 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b54:	4b53      	ldr	r3, [pc, #332]	; (8004ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	4a52      	ldr	r2, [pc, #328]	; (8004ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b5a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004b5e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b60:	4b50      	ldr	r3, [pc, #320]	; (8004ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	494d      	ldr	r1, [pc, #308]	; (8004ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f003 0301 	and.w	r3, r3, #1
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d044      	beq.n	8004c08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	2b01      	cmp	r3, #1
 8004b84:	d107      	bne.n	8004b96 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b86:	4b47      	ldr	r3, [pc, #284]	; (8004ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d119      	bne.n	8004bc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	e07f      	b.n	8004c96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	2b02      	cmp	r3, #2
 8004b9c:	d003      	beq.n	8004ba6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ba2:	2b03      	cmp	r3, #3
 8004ba4:	d107      	bne.n	8004bb6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ba6:	4b3f      	ldr	r3, [pc, #252]	; (8004ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d109      	bne.n	8004bc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e06f      	b.n	8004c96 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bb6:	4b3b      	ldr	r3, [pc, #236]	; (8004ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f003 0302 	and.w	r3, r3, #2
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d101      	bne.n	8004bc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e067      	b.n	8004c96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004bc6:	4b37      	ldr	r3, [pc, #220]	; (8004ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	f023 0203 	bic.w	r2, r3, #3
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	4934      	ldr	r1, [pc, #208]	; (8004ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004bd8:	f7fc ff90 	bl	8001afc <HAL_GetTick>
 8004bdc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bde:	e00a      	b.n	8004bf6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004be0:	f7fc ff8c 	bl	8001afc <HAL_GetTick>
 8004be4:	4602      	mov	r2, r0
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	1ad3      	subs	r3, r2, r3
 8004bea:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d901      	bls.n	8004bf6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004bf2:	2303      	movs	r3, #3
 8004bf4:	e04f      	b.n	8004c96 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bf6:	4b2b      	ldr	r3, [pc, #172]	; (8004ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8004bf8:	689b      	ldr	r3, [r3, #8]
 8004bfa:	f003 020c 	and.w	r2, r3, #12
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	009b      	lsls	r3, r3, #2
 8004c04:	429a      	cmp	r2, r3
 8004c06:	d1eb      	bne.n	8004be0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c08:	4b25      	ldr	r3, [pc, #148]	; (8004ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f003 0307 	and.w	r3, r3, #7
 8004c10:	683a      	ldr	r2, [r7, #0]
 8004c12:	429a      	cmp	r2, r3
 8004c14:	d20c      	bcs.n	8004c30 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c16:	4b22      	ldr	r3, [pc, #136]	; (8004ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8004c18:	683a      	ldr	r2, [r7, #0]
 8004c1a:	b2d2      	uxtb	r2, r2
 8004c1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c1e:	4b20      	ldr	r3, [pc, #128]	; (8004ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f003 0307 	and.w	r3, r3, #7
 8004c26:	683a      	ldr	r2, [r7, #0]
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	d001      	beq.n	8004c30 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	e032      	b.n	8004c96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f003 0304 	and.w	r3, r3, #4
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d008      	beq.n	8004c4e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c3c:	4b19      	ldr	r3, [pc, #100]	; (8004ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	68db      	ldr	r3, [r3, #12]
 8004c48:	4916      	ldr	r1, [pc, #88]	; (8004ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f003 0308 	and.w	r3, r3, #8
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d009      	beq.n	8004c6e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c5a:	4b12      	ldr	r3, [pc, #72]	; (8004ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	691b      	ldr	r3, [r3, #16]
 8004c66:	00db      	lsls	r3, r3, #3
 8004c68:	490e      	ldr	r1, [pc, #56]	; (8004ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004c6e:	f000 f821 	bl	8004cb4 <HAL_RCC_GetSysClockFreq>
 8004c72:	4602      	mov	r2, r0
 8004c74:	4b0b      	ldr	r3, [pc, #44]	; (8004ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	091b      	lsrs	r3, r3, #4
 8004c7a:	f003 030f 	and.w	r3, r3, #15
 8004c7e:	490a      	ldr	r1, [pc, #40]	; (8004ca8 <HAL_RCC_ClockConfig+0x1c0>)
 8004c80:	5ccb      	ldrb	r3, [r1, r3]
 8004c82:	fa22 f303 	lsr.w	r3, r2, r3
 8004c86:	4a09      	ldr	r2, [pc, #36]	; (8004cac <HAL_RCC_ClockConfig+0x1c4>)
 8004c88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004c8a:	4b09      	ldr	r3, [pc, #36]	; (8004cb0 <HAL_RCC_ClockConfig+0x1c8>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f7fc fde0 	bl	8001854 <HAL_InitTick>

  return HAL_OK;
 8004c94:	2300      	movs	r3, #0
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3710      	adds	r7, #16
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}
 8004c9e:	bf00      	nop
 8004ca0:	40023c00 	.word	0x40023c00
 8004ca4:	40023800 	.word	0x40023800
 8004ca8:	0800e67c 	.word	0x0800e67c
 8004cac:	20000000 	.word	0x20000000
 8004cb0:	20000004 	.word	0x20000004

08004cb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004cb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004cb8:	b094      	sub	sp, #80	; 0x50
 8004cba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	647b      	str	r3, [r7, #68]	; 0x44
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004cc8:	2300      	movs	r3, #0
 8004cca:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ccc:	4b79      	ldr	r3, [pc, #484]	; (8004eb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	f003 030c 	and.w	r3, r3, #12
 8004cd4:	2b08      	cmp	r3, #8
 8004cd6:	d00d      	beq.n	8004cf4 <HAL_RCC_GetSysClockFreq+0x40>
 8004cd8:	2b08      	cmp	r3, #8
 8004cda:	f200 80e1 	bhi.w	8004ea0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d002      	beq.n	8004ce8 <HAL_RCC_GetSysClockFreq+0x34>
 8004ce2:	2b04      	cmp	r3, #4
 8004ce4:	d003      	beq.n	8004cee <HAL_RCC_GetSysClockFreq+0x3a>
 8004ce6:	e0db      	b.n	8004ea0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ce8:	4b73      	ldr	r3, [pc, #460]	; (8004eb8 <HAL_RCC_GetSysClockFreq+0x204>)
 8004cea:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004cec:	e0db      	b.n	8004ea6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004cee:	4b73      	ldr	r3, [pc, #460]	; (8004ebc <HAL_RCC_GetSysClockFreq+0x208>)
 8004cf0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004cf2:	e0d8      	b.n	8004ea6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004cf4:	4b6f      	ldr	r3, [pc, #444]	; (8004eb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004cfc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004cfe:	4b6d      	ldr	r3, [pc, #436]	; (8004eb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d063      	beq.n	8004dd2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d0a:	4b6a      	ldr	r3, [pc, #424]	; (8004eb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	099b      	lsrs	r3, r3, #6
 8004d10:	2200      	movs	r2, #0
 8004d12:	63bb      	str	r3, [r7, #56]	; 0x38
 8004d14:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d1c:	633b      	str	r3, [r7, #48]	; 0x30
 8004d1e:	2300      	movs	r3, #0
 8004d20:	637b      	str	r3, [r7, #52]	; 0x34
 8004d22:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004d26:	4622      	mov	r2, r4
 8004d28:	462b      	mov	r3, r5
 8004d2a:	f04f 0000 	mov.w	r0, #0
 8004d2e:	f04f 0100 	mov.w	r1, #0
 8004d32:	0159      	lsls	r1, r3, #5
 8004d34:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d38:	0150      	lsls	r0, r2, #5
 8004d3a:	4602      	mov	r2, r0
 8004d3c:	460b      	mov	r3, r1
 8004d3e:	4621      	mov	r1, r4
 8004d40:	1a51      	subs	r1, r2, r1
 8004d42:	6139      	str	r1, [r7, #16]
 8004d44:	4629      	mov	r1, r5
 8004d46:	eb63 0301 	sbc.w	r3, r3, r1
 8004d4a:	617b      	str	r3, [r7, #20]
 8004d4c:	f04f 0200 	mov.w	r2, #0
 8004d50:	f04f 0300 	mov.w	r3, #0
 8004d54:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004d58:	4659      	mov	r1, fp
 8004d5a:	018b      	lsls	r3, r1, #6
 8004d5c:	4651      	mov	r1, sl
 8004d5e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004d62:	4651      	mov	r1, sl
 8004d64:	018a      	lsls	r2, r1, #6
 8004d66:	4651      	mov	r1, sl
 8004d68:	ebb2 0801 	subs.w	r8, r2, r1
 8004d6c:	4659      	mov	r1, fp
 8004d6e:	eb63 0901 	sbc.w	r9, r3, r1
 8004d72:	f04f 0200 	mov.w	r2, #0
 8004d76:	f04f 0300 	mov.w	r3, #0
 8004d7a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004d7e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004d82:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004d86:	4690      	mov	r8, r2
 8004d88:	4699      	mov	r9, r3
 8004d8a:	4623      	mov	r3, r4
 8004d8c:	eb18 0303 	adds.w	r3, r8, r3
 8004d90:	60bb      	str	r3, [r7, #8]
 8004d92:	462b      	mov	r3, r5
 8004d94:	eb49 0303 	adc.w	r3, r9, r3
 8004d98:	60fb      	str	r3, [r7, #12]
 8004d9a:	f04f 0200 	mov.w	r2, #0
 8004d9e:	f04f 0300 	mov.w	r3, #0
 8004da2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004da6:	4629      	mov	r1, r5
 8004da8:	024b      	lsls	r3, r1, #9
 8004daa:	4621      	mov	r1, r4
 8004dac:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004db0:	4621      	mov	r1, r4
 8004db2:	024a      	lsls	r2, r1, #9
 8004db4:	4610      	mov	r0, r2
 8004db6:	4619      	mov	r1, r3
 8004db8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004dba:	2200      	movs	r2, #0
 8004dbc:	62bb      	str	r3, [r7, #40]	; 0x28
 8004dbe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004dc0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004dc4:	f7fb fd42 	bl	800084c <__aeabi_uldivmod>
 8004dc8:	4602      	mov	r2, r0
 8004dca:	460b      	mov	r3, r1
 8004dcc:	4613      	mov	r3, r2
 8004dce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004dd0:	e058      	b.n	8004e84 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004dd2:	4b38      	ldr	r3, [pc, #224]	; (8004eb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	099b      	lsrs	r3, r3, #6
 8004dd8:	2200      	movs	r2, #0
 8004dda:	4618      	mov	r0, r3
 8004ddc:	4611      	mov	r1, r2
 8004dde:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004de2:	623b      	str	r3, [r7, #32]
 8004de4:	2300      	movs	r3, #0
 8004de6:	627b      	str	r3, [r7, #36]	; 0x24
 8004de8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004dec:	4642      	mov	r2, r8
 8004dee:	464b      	mov	r3, r9
 8004df0:	f04f 0000 	mov.w	r0, #0
 8004df4:	f04f 0100 	mov.w	r1, #0
 8004df8:	0159      	lsls	r1, r3, #5
 8004dfa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004dfe:	0150      	lsls	r0, r2, #5
 8004e00:	4602      	mov	r2, r0
 8004e02:	460b      	mov	r3, r1
 8004e04:	4641      	mov	r1, r8
 8004e06:	ebb2 0a01 	subs.w	sl, r2, r1
 8004e0a:	4649      	mov	r1, r9
 8004e0c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004e10:	f04f 0200 	mov.w	r2, #0
 8004e14:	f04f 0300 	mov.w	r3, #0
 8004e18:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004e1c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004e20:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004e24:	ebb2 040a 	subs.w	r4, r2, sl
 8004e28:	eb63 050b 	sbc.w	r5, r3, fp
 8004e2c:	f04f 0200 	mov.w	r2, #0
 8004e30:	f04f 0300 	mov.w	r3, #0
 8004e34:	00eb      	lsls	r3, r5, #3
 8004e36:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e3a:	00e2      	lsls	r2, r4, #3
 8004e3c:	4614      	mov	r4, r2
 8004e3e:	461d      	mov	r5, r3
 8004e40:	4643      	mov	r3, r8
 8004e42:	18e3      	adds	r3, r4, r3
 8004e44:	603b      	str	r3, [r7, #0]
 8004e46:	464b      	mov	r3, r9
 8004e48:	eb45 0303 	adc.w	r3, r5, r3
 8004e4c:	607b      	str	r3, [r7, #4]
 8004e4e:	f04f 0200 	mov.w	r2, #0
 8004e52:	f04f 0300 	mov.w	r3, #0
 8004e56:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004e5a:	4629      	mov	r1, r5
 8004e5c:	028b      	lsls	r3, r1, #10
 8004e5e:	4621      	mov	r1, r4
 8004e60:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004e64:	4621      	mov	r1, r4
 8004e66:	028a      	lsls	r2, r1, #10
 8004e68:	4610      	mov	r0, r2
 8004e6a:	4619      	mov	r1, r3
 8004e6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e6e:	2200      	movs	r2, #0
 8004e70:	61bb      	str	r3, [r7, #24]
 8004e72:	61fa      	str	r2, [r7, #28]
 8004e74:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e78:	f7fb fce8 	bl	800084c <__aeabi_uldivmod>
 8004e7c:	4602      	mov	r2, r0
 8004e7e:	460b      	mov	r3, r1
 8004e80:	4613      	mov	r3, r2
 8004e82:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004e84:	4b0b      	ldr	r3, [pc, #44]	; (8004eb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	0c1b      	lsrs	r3, r3, #16
 8004e8a:	f003 0303 	and.w	r3, r3, #3
 8004e8e:	3301      	adds	r3, #1
 8004e90:	005b      	lsls	r3, r3, #1
 8004e92:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004e94:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004e96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e98:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e9c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004e9e:	e002      	b.n	8004ea6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004ea0:	4b05      	ldr	r3, [pc, #20]	; (8004eb8 <HAL_RCC_GetSysClockFreq+0x204>)
 8004ea2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004ea4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ea6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	3750      	adds	r7, #80	; 0x50
 8004eac:	46bd      	mov	sp, r7
 8004eae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004eb2:	bf00      	nop
 8004eb4:	40023800 	.word	0x40023800
 8004eb8:	00f42400 	.word	0x00f42400
 8004ebc:	007a1200 	.word	0x007a1200

08004ec0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ec4:	4b03      	ldr	r3, [pc, #12]	; (8004ed4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed0:	4770      	bx	lr
 8004ed2:	bf00      	nop
 8004ed4:	20000000 	.word	0x20000000

08004ed8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004edc:	f7ff fff0 	bl	8004ec0 <HAL_RCC_GetHCLKFreq>
 8004ee0:	4602      	mov	r2, r0
 8004ee2:	4b05      	ldr	r3, [pc, #20]	; (8004ef8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ee4:	689b      	ldr	r3, [r3, #8]
 8004ee6:	0a9b      	lsrs	r3, r3, #10
 8004ee8:	f003 0307 	and.w	r3, r3, #7
 8004eec:	4903      	ldr	r1, [pc, #12]	; (8004efc <HAL_RCC_GetPCLK1Freq+0x24>)
 8004eee:	5ccb      	ldrb	r3, [r1, r3]
 8004ef0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	bd80      	pop	{r7, pc}
 8004ef8:	40023800 	.word	0x40023800
 8004efc:	0800e68c 	.word	0x0800e68c

08004f00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004f04:	f7ff ffdc 	bl	8004ec0 <HAL_RCC_GetHCLKFreq>
 8004f08:	4602      	mov	r2, r0
 8004f0a:	4b05      	ldr	r3, [pc, #20]	; (8004f20 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	0b5b      	lsrs	r3, r3, #13
 8004f10:	f003 0307 	and.w	r3, r3, #7
 8004f14:	4903      	ldr	r1, [pc, #12]	; (8004f24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f16:	5ccb      	ldrb	r3, [r1, r3]
 8004f18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	bd80      	pop	{r7, pc}
 8004f20:	40023800 	.word	0x40023800
 8004f24:	0800e68c 	.word	0x0800e68c

08004f28 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b083      	sub	sp, #12
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
 8004f30:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	220f      	movs	r2, #15
 8004f36:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004f38:	4b12      	ldr	r3, [pc, #72]	; (8004f84 <HAL_RCC_GetClockConfig+0x5c>)
 8004f3a:	689b      	ldr	r3, [r3, #8]
 8004f3c:	f003 0203 	and.w	r2, r3, #3
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004f44:	4b0f      	ldr	r3, [pc, #60]	; (8004f84 <HAL_RCC_GetClockConfig+0x5c>)
 8004f46:	689b      	ldr	r3, [r3, #8]
 8004f48:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004f50:	4b0c      	ldr	r3, [pc, #48]	; (8004f84 <HAL_RCC_GetClockConfig+0x5c>)
 8004f52:	689b      	ldr	r3, [r3, #8]
 8004f54:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004f5c:	4b09      	ldr	r3, [pc, #36]	; (8004f84 <HAL_RCC_GetClockConfig+0x5c>)
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	08db      	lsrs	r3, r3, #3
 8004f62:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004f6a:	4b07      	ldr	r3, [pc, #28]	; (8004f88 <HAL_RCC_GetClockConfig+0x60>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f003 0207 	and.w	r2, r3, #7
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	601a      	str	r2, [r3, #0]
}
 8004f76:	bf00      	nop
 8004f78:	370c      	adds	r7, #12
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f80:	4770      	bx	lr
 8004f82:	bf00      	nop
 8004f84:	40023800 	.word	0x40023800
 8004f88:	40023c00 	.word	0x40023c00

08004f8c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b082      	sub	sp, #8
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d101      	bne.n	8004f9e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	e07b      	b.n	8005096 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d108      	bne.n	8004fb8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004fae:	d009      	beq.n	8004fc4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	61da      	str	r2, [r3, #28]
 8004fb6:	e005      	b.n	8004fc4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004fd0:	b2db      	uxtb	r3, r3
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d106      	bne.n	8004fe4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f7fc fb7e 	bl	80016e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2202      	movs	r2, #2
 8004fe8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	681a      	ldr	r2, [r3, #0]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ffa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800500c:	431a      	orrs	r2, r3
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	68db      	ldr	r3, [r3, #12]
 8005012:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005016:	431a      	orrs	r2, r3
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	691b      	ldr	r3, [r3, #16]
 800501c:	f003 0302 	and.w	r3, r3, #2
 8005020:	431a      	orrs	r2, r3
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	695b      	ldr	r3, [r3, #20]
 8005026:	f003 0301 	and.w	r3, r3, #1
 800502a:	431a      	orrs	r2, r3
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	699b      	ldr	r3, [r3, #24]
 8005030:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005034:	431a      	orrs	r2, r3
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	69db      	ldr	r3, [r3, #28]
 800503a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800503e:	431a      	orrs	r2, r3
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6a1b      	ldr	r3, [r3, #32]
 8005044:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005048:	ea42 0103 	orr.w	r1, r2, r3
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005050:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	430a      	orrs	r2, r1
 800505a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	699b      	ldr	r3, [r3, #24]
 8005060:	0c1b      	lsrs	r3, r3, #16
 8005062:	f003 0104 	and.w	r1, r3, #4
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800506a:	f003 0210 	and.w	r2, r3, #16
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	430a      	orrs	r2, r1
 8005074:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	69da      	ldr	r2, [r3, #28]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005084:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2200      	movs	r2, #0
 800508a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2201      	movs	r2, #1
 8005090:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005094:	2300      	movs	r3, #0
}
 8005096:	4618      	mov	r0, r3
 8005098:	3708      	adds	r7, #8
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}

0800509e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800509e:	b580      	push	{r7, lr}
 80050a0:	b088      	sub	sp, #32
 80050a2:	af00      	add	r7, sp, #0
 80050a4:	60f8      	str	r0, [r7, #12]
 80050a6:	60b9      	str	r1, [r7, #8]
 80050a8:	603b      	str	r3, [r7, #0]
 80050aa:	4613      	mov	r3, r2
 80050ac:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80050ae:	2300      	movs	r3, #0
 80050b0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80050b8:	2b01      	cmp	r3, #1
 80050ba:	d101      	bne.n	80050c0 <HAL_SPI_Transmit+0x22>
 80050bc:	2302      	movs	r3, #2
 80050be:	e126      	b.n	800530e <HAL_SPI_Transmit+0x270>
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2201      	movs	r2, #1
 80050c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80050c8:	f7fc fd18 	bl	8001afc <HAL_GetTick>
 80050cc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80050ce:	88fb      	ldrh	r3, [r7, #6]
 80050d0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80050d8:	b2db      	uxtb	r3, r3
 80050da:	2b01      	cmp	r3, #1
 80050dc:	d002      	beq.n	80050e4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80050de:	2302      	movs	r3, #2
 80050e0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80050e2:	e10b      	b.n	80052fc <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d002      	beq.n	80050f0 <HAL_SPI_Transmit+0x52>
 80050ea:	88fb      	ldrh	r3, [r7, #6]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d102      	bne.n	80050f6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80050f0:	2301      	movs	r3, #1
 80050f2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80050f4:	e102      	b.n	80052fc <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	2203      	movs	r2, #3
 80050fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	2200      	movs	r2, #0
 8005102:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	68ba      	ldr	r2, [r7, #8]
 8005108:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	88fa      	ldrh	r2, [r7, #6]
 800510e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	88fa      	ldrh	r2, [r7, #6]
 8005114:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2200      	movs	r2, #0
 800511a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	2200      	movs	r2, #0
 8005120:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	2200      	movs	r2, #0
 8005126:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2200      	movs	r2, #0
 800512c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	2200      	movs	r2, #0
 8005132:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	689b      	ldr	r3, [r3, #8]
 8005138:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800513c:	d10f      	bne.n	800515e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800514c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	681a      	ldr	r2, [r3, #0]
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800515c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005168:	2b40      	cmp	r3, #64	; 0x40
 800516a:	d007      	beq.n	800517c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	681a      	ldr	r2, [r3, #0]
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800517a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	68db      	ldr	r3, [r3, #12]
 8005180:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005184:	d14b      	bne.n	800521e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d002      	beq.n	8005194 <HAL_SPI_Transmit+0xf6>
 800518e:	8afb      	ldrh	r3, [r7, #22]
 8005190:	2b01      	cmp	r3, #1
 8005192:	d13e      	bne.n	8005212 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005198:	881a      	ldrh	r2, [r3, #0]
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051a4:	1c9a      	adds	r2, r3, #2
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051ae:	b29b      	uxth	r3, r3
 80051b0:	3b01      	subs	r3, #1
 80051b2:	b29a      	uxth	r2, r3
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80051b8:	e02b      	b.n	8005212 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	689b      	ldr	r3, [r3, #8]
 80051c0:	f003 0302 	and.w	r3, r3, #2
 80051c4:	2b02      	cmp	r3, #2
 80051c6:	d112      	bne.n	80051ee <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051cc:	881a      	ldrh	r2, [r3, #0]
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051d8:	1c9a      	adds	r2, r3, #2
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051e2:	b29b      	uxth	r3, r3
 80051e4:	3b01      	subs	r3, #1
 80051e6:	b29a      	uxth	r2, r3
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	86da      	strh	r2, [r3, #54]	; 0x36
 80051ec:	e011      	b.n	8005212 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80051ee:	f7fc fc85 	bl	8001afc <HAL_GetTick>
 80051f2:	4602      	mov	r2, r0
 80051f4:	69bb      	ldr	r3, [r7, #24]
 80051f6:	1ad3      	subs	r3, r2, r3
 80051f8:	683a      	ldr	r2, [r7, #0]
 80051fa:	429a      	cmp	r2, r3
 80051fc:	d803      	bhi.n	8005206 <HAL_SPI_Transmit+0x168>
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005204:	d102      	bne.n	800520c <HAL_SPI_Transmit+0x16e>
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d102      	bne.n	8005212 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800520c:	2303      	movs	r3, #3
 800520e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005210:	e074      	b.n	80052fc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005216:	b29b      	uxth	r3, r3
 8005218:	2b00      	cmp	r3, #0
 800521a:	d1ce      	bne.n	80051ba <HAL_SPI_Transmit+0x11c>
 800521c:	e04c      	b.n	80052b8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d002      	beq.n	800522c <HAL_SPI_Transmit+0x18e>
 8005226:	8afb      	ldrh	r3, [r7, #22]
 8005228:	2b01      	cmp	r3, #1
 800522a:	d140      	bne.n	80052ae <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	330c      	adds	r3, #12
 8005236:	7812      	ldrb	r2, [r2, #0]
 8005238:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800523e:	1c5a      	adds	r2, r3, #1
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005248:	b29b      	uxth	r3, r3
 800524a:	3b01      	subs	r3, #1
 800524c:	b29a      	uxth	r2, r3
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005252:	e02c      	b.n	80052ae <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	689b      	ldr	r3, [r3, #8]
 800525a:	f003 0302 	and.w	r3, r3, #2
 800525e:	2b02      	cmp	r3, #2
 8005260:	d113      	bne.n	800528a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	330c      	adds	r3, #12
 800526c:	7812      	ldrb	r2, [r2, #0]
 800526e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005274:	1c5a      	adds	r2, r3, #1
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800527e:	b29b      	uxth	r3, r3
 8005280:	3b01      	subs	r3, #1
 8005282:	b29a      	uxth	r2, r3
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	86da      	strh	r2, [r3, #54]	; 0x36
 8005288:	e011      	b.n	80052ae <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800528a:	f7fc fc37 	bl	8001afc <HAL_GetTick>
 800528e:	4602      	mov	r2, r0
 8005290:	69bb      	ldr	r3, [r7, #24]
 8005292:	1ad3      	subs	r3, r2, r3
 8005294:	683a      	ldr	r2, [r7, #0]
 8005296:	429a      	cmp	r2, r3
 8005298:	d803      	bhi.n	80052a2 <HAL_SPI_Transmit+0x204>
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052a0:	d102      	bne.n	80052a8 <HAL_SPI_Transmit+0x20a>
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d102      	bne.n	80052ae <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80052a8:	2303      	movs	r3, #3
 80052aa:	77fb      	strb	r3, [r7, #31]
          goto error;
 80052ac:	e026      	b.n	80052fc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052b2:	b29b      	uxth	r3, r3
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d1cd      	bne.n	8005254 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80052b8:	69ba      	ldr	r2, [r7, #24]
 80052ba:	6839      	ldr	r1, [r7, #0]
 80052bc:	68f8      	ldr	r0, [r7, #12]
 80052be:	f000 fbcb 	bl	8005a58 <SPI_EndRxTxTransaction>
 80052c2:	4603      	mov	r3, r0
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d002      	beq.n	80052ce <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2220      	movs	r2, #32
 80052cc:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	689b      	ldr	r3, [r3, #8]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d10a      	bne.n	80052ec <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80052d6:	2300      	movs	r3, #0
 80052d8:	613b      	str	r3, [r7, #16]
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	68db      	ldr	r3, [r3, #12]
 80052e0:	613b      	str	r3, [r7, #16]
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	689b      	ldr	r3, [r3, #8]
 80052e8:	613b      	str	r3, [r7, #16]
 80052ea:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d002      	beq.n	80052fa <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80052f4:	2301      	movs	r3, #1
 80052f6:	77fb      	strb	r3, [r7, #31]
 80052f8:	e000      	b.n	80052fc <HAL_SPI_Transmit+0x25e>
  }

error:
 80052fa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	2201      	movs	r2, #1
 8005300:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2200      	movs	r2, #0
 8005308:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800530c:	7ffb      	ldrb	r3, [r7, #31]
}
 800530e:	4618      	mov	r0, r3
 8005310:	3720      	adds	r7, #32
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}

08005316 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005316:	b580      	push	{r7, lr}
 8005318:	b088      	sub	sp, #32
 800531a:	af02      	add	r7, sp, #8
 800531c:	60f8      	str	r0, [r7, #12]
 800531e:	60b9      	str	r1, [r7, #8]
 8005320:	603b      	str	r3, [r7, #0]
 8005322:	4613      	mov	r3, r2
 8005324:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005326:	2300      	movs	r3, #0
 8005328:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005332:	d112      	bne.n	800535a <HAL_SPI_Receive+0x44>
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	689b      	ldr	r3, [r3, #8]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d10e      	bne.n	800535a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	2204      	movs	r2, #4
 8005340:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005344:	88fa      	ldrh	r2, [r7, #6]
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	9300      	str	r3, [sp, #0]
 800534a:	4613      	mov	r3, r2
 800534c:	68ba      	ldr	r2, [r7, #8]
 800534e:	68b9      	ldr	r1, [r7, #8]
 8005350:	68f8      	ldr	r0, [r7, #12]
 8005352:	f000 f8f1 	bl	8005538 <HAL_SPI_TransmitReceive>
 8005356:	4603      	mov	r3, r0
 8005358:	e0ea      	b.n	8005530 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005360:	2b01      	cmp	r3, #1
 8005362:	d101      	bne.n	8005368 <HAL_SPI_Receive+0x52>
 8005364:	2302      	movs	r3, #2
 8005366:	e0e3      	b.n	8005530 <HAL_SPI_Receive+0x21a>
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	2201      	movs	r2, #1
 800536c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005370:	f7fc fbc4 	bl	8001afc <HAL_GetTick>
 8005374:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800537c:	b2db      	uxtb	r3, r3
 800537e:	2b01      	cmp	r3, #1
 8005380:	d002      	beq.n	8005388 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005382:	2302      	movs	r3, #2
 8005384:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005386:	e0ca      	b.n	800551e <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d002      	beq.n	8005394 <HAL_SPI_Receive+0x7e>
 800538e:	88fb      	ldrh	r3, [r7, #6]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d102      	bne.n	800539a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005394:	2301      	movs	r3, #1
 8005396:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005398:	e0c1      	b.n	800551e <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	2204      	movs	r2, #4
 800539e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	2200      	movs	r2, #0
 80053a6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	68ba      	ldr	r2, [r7, #8]
 80053ac:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	88fa      	ldrh	r2, [r7, #6]
 80053b2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	88fa      	ldrh	r2, [r7, #6]
 80053b8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2200      	movs	r2, #0
 80053be:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2200      	movs	r2, #0
 80053c4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2200      	movs	r2, #0
 80053ca:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	2200      	movs	r2, #0
 80053d0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2200      	movs	r2, #0
 80053d6:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053e0:	d10f      	bne.n	8005402 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	681a      	ldr	r2, [r3, #0]
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053f0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	681a      	ldr	r2, [r3, #0]
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005400:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800540c:	2b40      	cmp	r3, #64	; 0x40
 800540e:	d007      	beq.n	8005420 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	681a      	ldr	r2, [r3, #0]
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800541e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	68db      	ldr	r3, [r3, #12]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d162      	bne.n	80054ee <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005428:	e02e      	b.n	8005488 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	689b      	ldr	r3, [r3, #8]
 8005430:	f003 0301 	and.w	r3, r3, #1
 8005434:	2b01      	cmp	r3, #1
 8005436:	d115      	bne.n	8005464 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f103 020c 	add.w	r2, r3, #12
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005444:	7812      	ldrb	r2, [r2, #0]
 8005446:	b2d2      	uxtb	r2, r2
 8005448:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800544e:	1c5a      	adds	r2, r3, #1
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005458:	b29b      	uxth	r3, r3
 800545a:	3b01      	subs	r3, #1
 800545c:	b29a      	uxth	r2, r3
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005462:	e011      	b.n	8005488 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005464:	f7fc fb4a 	bl	8001afc <HAL_GetTick>
 8005468:	4602      	mov	r2, r0
 800546a:	693b      	ldr	r3, [r7, #16]
 800546c:	1ad3      	subs	r3, r2, r3
 800546e:	683a      	ldr	r2, [r7, #0]
 8005470:	429a      	cmp	r2, r3
 8005472:	d803      	bhi.n	800547c <HAL_SPI_Receive+0x166>
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	f1b3 3fff 	cmp.w	r3, #4294967295
 800547a:	d102      	bne.n	8005482 <HAL_SPI_Receive+0x16c>
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d102      	bne.n	8005488 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8005482:	2303      	movs	r3, #3
 8005484:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005486:	e04a      	b.n	800551e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800548c:	b29b      	uxth	r3, r3
 800548e:	2b00      	cmp	r3, #0
 8005490:	d1cb      	bne.n	800542a <HAL_SPI_Receive+0x114>
 8005492:	e031      	b.n	80054f8 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	689b      	ldr	r3, [r3, #8]
 800549a:	f003 0301 	and.w	r3, r3, #1
 800549e:	2b01      	cmp	r3, #1
 80054a0:	d113      	bne.n	80054ca <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	68da      	ldr	r2, [r3, #12]
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054ac:	b292      	uxth	r2, r2
 80054ae:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054b4:	1c9a      	adds	r2, r3, #2
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054be:	b29b      	uxth	r3, r3
 80054c0:	3b01      	subs	r3, #1
 80054c2:	b29a      	uxth	r2, r3
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80054c8:	e011      	b.n	80054ee <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80054ca:	f7fc fb17 	bl	8001afc <HAL_GetTick>
 80054ce:	4602      	mov	r2, r0
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	1ad3      	subs	r3, r2, r3
 80054d4:	683a      	ldr	r2, [r7, #0]
 80054d6:	429a      	cmp	r2, r3
 80054d8:	d803      	bhi.n	80054e2 <HAL_SPI_Receive+0x1cc>
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054e0:	d102      	bne.n	80054e8 <HAL_SPI_Receive+0x1d2>
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d102      	bne.n	80054ee <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80054e8:	2303      	movs	r3, #3
 80054ea:	75fb      	strb	r3, [r7, #23]
          goto error;
 80054ec:	e017      	b.n	800551e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054f2:	b29b      	uxth	r3, r3
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d1cd      	bne.n	8005494 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80054f8:	693a      	ldr	r2, [r7, #16]
 80054fa:	6839      	ldr	r1, [r7, #0]
 80054fc:	68f8      	ldr	r0, [r7, #12]
 80054fe:	f000 fa45 	bl	800598c <SPI_EndRxTransaction>
 8005502:	4603      	mov	r3, r0
 8005504:	2b00      	cmp	r3, #0
 8005506:	d002      	beq.n	800550e <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2220      	movs	r2, #32
 800550c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005512:	2b00      	cmp	r3, #0
 8005514:	d002      	beq.n	800551c <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8005516:	2301      	movs	r3, #1
 8005518:	75fb      	strb	r3, [r7, #23]
 800551a:	e000      	b.n	800551e <HAL_SPI_Receive+0x208>
  }

error :
 800551c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	2201      	movs	r2, #1
 8005522:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2200      	movs	r2, #0
 800552a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800552e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005530:	4618      	mov	r0, r3
 8005532:	3718      	adds	r7, #24
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}

08005538 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b08c      	sub	sp, #48	; 0x30
 800553c:	af00      	add	r7, sp, #0
 800553e:	60f8      	str	r0, [r7, #12]
 8005540:	60b9      	str	r1, [r7, #8]
 8005542:	607a      	str	r2, [r7, #4]
 8005544:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005546:	2301      	movs	r3, #1
 8005548:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800554a:	2300      	movs	r3, #0
 800554c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005556:	2b01      	cmp	r3, #1
 8005558:	d101      	bne.n	800555e <HAL_SPI_TransmitReceive+0x26>
 800555a:	2302      	movs	r3, #2
 800555c:	e18a      	b.n	8005874 <HAL_SPI_TransmitReceive+0x33c>
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2201      	movs	r2, #1
 8005562:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005566:	f7fc fac9 	bl	8001afc <HAL_GetTick>
 800556a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005572:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800557c:	887b      	ldrh	r3, [r7, #2]
 800557e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005580:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005584:	2b01      	cmp	r3, #1
 8005586:	d00f      	beq.n	80055a8 <HAL_SPI_TransmitReceive+0x70>
 8005588:	69fb      	ldr	r3, [r7, #28]
 800558a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800558e:	d107      	bne.n	80055a0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	689b      	ldr	r3, [r3, #8]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d103      	bne.n	80055a0 <HAL_SPI_TransmitReceive+0x68>
 8005598:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800559c:	2b04      	cmp	r3, #4
 800559e:	d003      	beq.n	80055a8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80055a0:	2302      	movs	r3, #2
 80055a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80055a6:	e15b      	b.n	8005860 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d005      	beq.n	80055ba <HAL_SPI_TransmitReceive+0x82>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d002      	beq.n	80055ba <HAL_SPI_TransmitReceive+0x82>
 80055b4:	887b      	ldrh	r3, [r7, #2]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d103      	bne.n	80055c2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80055ba:	2301      	movs	r3, #1
 80055bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80055c0:	e14e      	b.n	8005860 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80055c8:	b2db      	uxtb	r3, r3
 80055ca:	2b04      	cmp	r3, #4
 80055cc:	d003      	beq.n	80055d6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	2205      	movs	r2, #5
 80055d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2200      	movs	r2, #0
 80055da:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	687a      	ldr	r2, [r7, #4]
 80055e0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	887a      	ldrh	r2, [r7, #2]
 80055e6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	887a      	ldrh	r2, [r7, #2]
 80055ec:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	68ba      	ldr	r2, [r7, #8]
 80055f2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	887a      	ldrh	r2, [r7, #2]
 80055f8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	887a      	ldrh	r2, [r7, #2]
 80055fe:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	2200      	movs	r2, #0
 8005604:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2200      	movs	r2, #0
 800560a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005616:	2b40      	cmp	r3, #64	; 0x40
 8005618:	d007      	beq.n	800562a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	681a      	ldr	r2, [r3, #0]
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005628:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	68db      	ldr	r3, [r3, #12]
 800562e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005632:	d178      	bne.n	8005726 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d002      	beq.n	8005642 <HAL_SPI_TransmitReceive+0x10a>
 800563c:	8b7b      	ldrh	r3, [r7, #26]
 800563e:	2b01      	cmp	r3, #1
 8005640:	d166      	bne.n	8005710 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005646:	881a      	ldrh	r2, [r3, #0]
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005652:	1c9a      	adds	r2, r3, #2
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800565c:	b29b      	uxth	r3, r3
 800565e:	3b01      	subs	r3, #1
 8005660:	b29a      	uxth	r2, r3
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005666:	e053      	b.n	8005710 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	689b      	ldr	r3, [r3, #8]
 800566e:	f003 0302 	and.w	r3, r3, #2
 8005672:	2b02      	cmp	r3, #2
 8005674:	d11b      	bne.n	80056ae <HAL_SPI_TransmitReceive+0x176>
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800567a:	b29b      	uxth	r3, r3
 800567c:	2b00      	cmp	r3, #0
 800567e:	d016      	beq.n	80056ae <HAL_SPI_TransmitReceive+0x176>
 8005680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005682:	2b01      	cmp	r3, #1
 8005684:	d113      	bne.n	80056ae <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800568a:	881a      	ldrh	r2, [r3, #0]
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005696:	1c9a      	adds	r2, r3, #2
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056a0:	b29b      	uxth	r3, r3
 80056a2:	3b01      	subs	r3, #1
 80056a4:	b29a      	uxth	r2, r3
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80056aa:	2300      	movs	r3, #0
 80056ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	689b      	ldr	r3, [r3, #8]
 80056b4:	f003 0301 	and.w	r3, r3, #1
 80056b8:	2b01      	cmp	r3, #1
 80056ba:	d119      	bne.n	80056f0 <HAL_SPI_TransmitReceive+0x1b8>
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056c0:	b29b      	uxth	r3, r3
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d014      	beq.n	80056f0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	68da      	ldr	r2, [r3, #12]
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056d0:	b292      	uxth	r2, r2
 80056d2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056d8:	1c9a      	adds	r2, r3, #2
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056e2:	b29b      	uxth	r3, r3
 80056e4:	3b01      	subs	r3, #1
 80056e6:	b29a      	uxth	r2, r3
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80056ec:	2301      	movs	r3, #1
 80056ee:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80056f0:	f7fc fa04 	bl	8001afc <HAL_GetTick>
 80056f4:	4602      	mov	r2, r0
 80056f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f8:	1ad3      	subs	r3, r2, r3
 80056fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80056fc:	429a      	cmp	r2, r3
 80056fe:	d807      	bhi.n	8005710 <HAL_SPI_TransmitReceive+0x1d8>
 8005700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005702:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005706:	d003      	beq.n	8005710 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005708:	2303      	movs	r3, #3
 800570a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800570e:	e0a7      	b.n	8005860 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005714:	b29b      	uxth	r3, r3
 8005716:	2b00      	cmp	r3, #0
 8005718:	d1a6      	bne.n	8005668 <HAL_SPI_TransmitReceive+0x130>
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800571e:	b29b      	uxth	r3, r3
 8005720:	2b00      	cmp	r3, #0
 8005722:	d1a1      	bne.n	8005668 <HAL_SPI_TransmitReceive+0x130>
 8005724:	e07c      	b.n	8005820 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d002      	beq.n	8005734 <HAL_SPI_TransmitReceive+0x1fc>
 800572e:	8b7b      	ldrh	r3, [r7, #26]
 8005730:	2b01      	cmp	r3, #1
 8005732:	d16b      	bne.n	800580c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	330c      	adds	r3, #12
 800573e:	7812      	ldrb	r2, [r2, #0]
 8005740:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005746:	1c5a      	adds	r2, r3, #1
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005750:	b29b      	uxth	r3, r3
 8005752:	3b01      	subs	r3, #1
 8005754:	b29a      	uxth	r2, r3
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800575a:	e057      	b.n	800580c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	689b      	ldr	r3, [r3, #8]
 8005762:	f003 0302 	and.w	r3, r3, #2
 8005766:	2b02      	cmp	r3, #2
 8005768:	d11c      	bne.n	80057a4 <HAL_SPI_TransmitReceive+0x26c>
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800576e:	b29b      	uxth	r3, r3
 8005770:	2b00      	cmp	r3, #0
 8005772:	d017      	beq.n	80057a4 <HAL_SPI_TransmitReceive+0x26c>
 8005774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005776:	2b01      	cmp	r3, #1
 8005778:	d114      	bne.n	80057a4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	330c      	adds	r3, #12
 8005784:	7812      	ldrb	r2, [r2, #0]
 8005786:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800578c:	1c5a      	adds	r2, r3, #1
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005796:	b29b      	uxth	r3, r3
 8005798:	3b01      	subs	r3, #1
 800579a:	b29a      	uxth	r2, r3
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80057a0:	2300      	movs	r3, #0
 80057a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	689b      	ldr	r3, [r3, #8]
 80057aa:	f003 0301 	and.w	r3, r3, #1
 80057ae:	2b01      	cmp	r3, #1
 80057b0:	d119      	bne.n	80057e6 <HAL_SPI_TransmitReceive+0x2ae>
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057b6:	b29b      	uxth	r3, r3
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d014      	beq.n	80057e6 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	68da      	ldr	r2, [r3, #12]
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057c6:	b2d2      	uxtb	r2, r2
 80057c8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ce:	1c5a      	adds	r2, r3, #1
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057d8:	b29b      	uxth	r3, r3
 80057da:	3b01      	subs	r3, #1
 80057dc:	b29a      	uxth	r2, r3
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80057e2:	2301      	movs	r3, #1
 80057e4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80057e6:	f7fc f989 	bl	8001afc <HAL_GetTick>
 80057ea:	4602      	mov	r2, r0
 80057ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ee:	1ad3      	subs	r3, r2, r3
 80057f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80057f2:	429a      	cmp	r2, r3
 80057f4:	d803      	bhi.n	80057fe <HAL_SPI_TransmitReceive+0x2c6>
 80057f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057fc:	d102      	bne.n	8005804 <HAL_SPI_TransmitReceive+0x2cc>
 80057fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005800:	2b00      	cmp	r3, #0
 8005802:	d103      	bne.n	800580c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005804:	2303      	movs	r3, #3
 8005806:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800580a:	e029      	b.n	8005860 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005810:	b29b      	uxth	r3, r3
 8005812:	2b00      	cmp	r3, #0
 8005814:	d1a2      	bne.n	800575c <HAL_SPI_TransmitReceive+0x224>
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800581a:	b29b      	uxth	r3, r3
 800581c:	2b00      	cmp	r3, #0
 800581e:	d19d      	bne.n	800575c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005820:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005822:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005824:	68f8      	ldr	r0, [r7, #12]
 8005826:	f000 f917 	bl	8005a58 <SPI_EndRxTxTransaction>
 800582a:	4603      	mov	r3, r0
 800582c:	2b00      	cmp	r3, #0
 800582e:	d006      	beq.n	800583e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005830:	2301      	movs	r3, #1
 8005832:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	2220      	movs	r2, #32
 800583a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800583c:	e010      	b.n	8005860 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	689b      	ldr	r3, [r3, #8]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d10b      	bne.n	800585e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005846:	2300      	movs	r3, #0
 8005848:	617b      	str	r3, [r7, #20]
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	68db      	ldr	r3, [r3, #12]
 8005850:	617b      	str	r3, [r7, #20]
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	689b      	ldr	r3, [r3, #8]
 8005858:	617b      	str	r3, [r7, #20]
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	e000      	b.n	8005860 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800585e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2201      	movs	r2, #1
 8005864:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	2200      	movs	r2, #0
 800586c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005870:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005874:	4618      	mov	r0, r3
 8005876:	3730      	adds	r7, #48	; 0x30
 8005878:	46bd      	mov	sp, r7
 800587a:	bd80      	pop	{r7, pc}

0800587c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b088      	sub	sp, #32
 8005880:	af00      	add	r7, sp, #0
 8005882:	60f8      	str	r0, [r7, #12]
 8005884:	60b9      	str	r1, [r7, #8]
 8005886:	603b      	str	r3, [r7, #0]
 8005888:	4613      	mov	r3, r2
 800588a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800588c:	f7fc f936 	bl	8001afc <HAL_GetTick>
 8005890:	4602      	mov	r2, r0
 8005892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005894:	1a9b      	subs	r3, r3, r2
 8005896:	683a      	ldr	r2, [r7, #0]
 8005898:	4413      	add	r3, r2
 800589a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800589c:	f7fc f92e 	bl	8001afc <HAL_GetTick>
 80058a0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80058a2:	4b39      	ldr	r3, [pc, #228]	; (8005988 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	015b      	lsls	r3, r3, #5
 80058a8:	0d1b      	lsrs	r3, r3, #20
 80058aa:	69fa      	ldr	r2, [r7, #28]
 80058ac:	fb02 f303 	mul.w	r3, r2, r3
 80058b0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80058b2:	e054      	b.n	800595e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058ba:	d050      	beq.n	800595e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80058bc:	f7fc f91e 	bl	8001afc <HAL_GetTick>
 80058c0:	4602      	mov	r2, r0
 80058c2:	69bb      	ldr	r3, [r7, #24]
 80058c4:	1ad3      	subs	r3, r2, r3
 80058c6:	69fa      	ldr	r2, [r7, #28]
 80058c8:	429a      	cmp	r2, r3
 80058ca:	d902      	bls.n	80058d2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80058cc:	69fb      	ldr	r3, [r7, #28]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d13d      	bne.n	800594e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	685a      	ldr	r2, [r3, #4]
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80058e0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80058ea:	d111      	bne.n	8005910 <SPI_WaitFlagStateUntilTimeout+0x94>
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058f4:	d004      	beq.n	8005900 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	689b      	ldr	r3, [r3, #8]
 80058fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058fe:	d107      	bne.n	8005910 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	681a      	ldr	r2, [r3, #0]
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800590e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005914:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005918:	d10f      	bne.n	800593a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	681a      	ldr	r2, [r3, #0]
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005928:	601a      	str	r2, [r3, #0]
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	681a      	ldr	r2, [r3, #0]
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005938:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	2201      	movs	r2, #1
 800593e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	2200      	movs	r2, #0
 8005946:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800594a:	2303      	movs	r3, #3
 800594c:	e017      	b.n	800597e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d101      	bne.n	8005958 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005954:	2300      	movs	r3, #0
 8005956:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	3b01      	subs	r3, #1
 800595c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	689a      	ldr	r2, [r3, #8]
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	4013      	ands	r3, r2
 8005968:	68ba      	ldr	r2, [r7, #8]
 800596a:	429a      	cmp	r2, r3
 800596c:	bf0c      	ite	eq
 800596e:	2301      	moveq	r3, #1
 8005970:	2300      	movne	r3, #0
 8005972:	b2db      	uxtb	r3, r3
 8005974:	461a      	mov	r2, r3
 8005976:	79fb      	ldrb	r3, [r7, #7]
 8005978:	429a      	cmp	r2, r3
 800597a:	d19b      	bne.n	80058b4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800597c:	2300      	movs	r3, #0
}
 800597e:	4618      	mov	r0, r3
 8005980:	3720      	adds	r7, #32
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}
 8005986:	bf00      	nop
 8005988:	20000000 	.word	0x20000000

0800598c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b086      	sub	sp, #24
 8005990:	af02      	add	r7, sp, #8
 8005992:	60f8      	str	r0, [r7, #12]
 8005994:	60b9      	str	r1, [r7, #8]
 8005996:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80059a0:	d111      	bne.n	80059c6 <SPI_EndRxTransaction+0x3a>
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	689b      	ldr	r3, [r3, #8]
 80059a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059aa:	d004      	beq.n	80059b6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	689b      	ldr	r3, [r3, #8]
 80059b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059b4:	d107      	bne.n	80059c6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	681a      	ldr	r2, [r3, #0]
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059c4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	685b      	ldr	r3, [r3, #4]
 80059ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80059ce:	d12a      	bne.n	8005a26 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	689b      	ldr	r3, [r3, #8]
 80059d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059d8:	d012      	beq.n	8005a00 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	9300      	str	r3, [sp, #0]
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	2200      	movs	r2, #0
 80059e2:	2180      	movs	r1, #128	; 0x80
 80059e4:	68f8      	ldr	r0, [r7, #12]
 80059e6:	f7ff ff49 	bl	800587c <SPI_WaitFlagStateUntilTimeout>
 80059ea:	4603      	mov	r3, r0
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d02d      	beq.n	8005a4c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059f4:	f043 0220 	orr.w	r2, r3, #32
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80059fc:	2303      	movs	r3, #3
 80059fe:	e026      	b.n	8005a4e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	9300      	str	r3, [sp, #0]
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	2200      	movs	r2, #0
 8005a08:	2101      	movs	r1, #1
 8005a0a:	68f8      	ldr	r0, [r7, #12]
 8005a0c:	f7ff ff36 	bl	800587c <SPI_WaitFlagStateUntilTimeout>
 8005a10:	4603      	mov	r3, r0
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d01a      	beq.n	8005a4c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a1a:	f043 0220 	orr.w	r2, r3, #32
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005a22:	2303      	movs	r3, #3
 8005a24:	e013      	b.n	8005a4e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	9300      	str	r3, [sp, #0]
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	2101      	movs	r1, #1
 8005a30:	68f8      	ldr	r0, [r7, #12]
 8005a32:	f7ff ff23 	bl	800587c <SPI_WaitFlagStateUntilTimeout>
 8005a36:	4603      	mov	r3, r0
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d007      	beq.n	8005a4c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a40:	f043 0220 	orr.w	r2, r3, #32
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005a48:	2303      	movs	r3, #3
 8005a4a:	e000      	b.n	8005a4e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005a4c:	2300      	movs	r3, #0
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3710      	adds	r7, #16
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}
	...

08005a58 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b088      	sub	sp, #32
 8005a5c:	af02      	add	r7, sp, #8
 8005a5e:	60f8      	str	r0, [r7, #12]
 8005a60:	60b9      	str	r1, [r7, #8]
 8005a62:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005a64:	4b1b      	ldr	r3, [pc, #108]	; (8005ad4 <SPI_EndRxTxTransaction+0x7c>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a1b      	ldr	r2, [pc, #108]	; (8005ad8 <SPI_EndRxTxTransaction+0x80>)
 8005a6a:	fba2 2303 	umull	r2, r3, r2, r3
 8005a6e:	0d5b      	lsrs	r3, r3, #21
 8005a70:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005a74:	fb02 f303 	mul.w	r3, r2, r3
 8005a78:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a82:	d112      	bne.n	8005aaa <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	9300      	str	r3, [sp, #0]
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	2180      	movs	r1, #128	; 0x80
 8005a8e:	68f8      	ldr	r0, [r7, #12]
 8005a90:	f7ff fef4 	bl	800587c <SPI_WaitFlagStateUntilTimeout>
 8005a94:	4603      	mov	r3, r0
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d016      	beq.n	8005ac8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a9e:	f043 0220 	orr.w	r2, r3, #32
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005aa6:	2303      	movs	r3, #3
 8005aa8:	e00f      	b.n	8005aca <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d00a      	beq.n	8005ac6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	3b01      	subs	r3, #1
 8005ab4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	689b      	ldr	r3, [r3, #8]
 8005abc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ac0:	2b80      	cmp	r3, #128	; 0x80
 8005ac2:	d0f2      	beq.n	8005aaa <SPI_EndRxTxTransaction+0x52>
 8005ac4:	e000      	b.n	8005ac8 <SPI_EndRxTxTransaction+0x70>
        break;
 8005ac6:	bf00      	nop
  }

  return HAL_OK;
 8005ac8:	2300      	movs	r3, #0
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	3718      	adds	r7, #24
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}
 8005ad2:	bf00      	nop
 8005ad4:	20000000 	.word	0x20000000
 8005ad8:	165e9f81 	.word	0x165e9f81

08005adc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b082      	sub	sp, #8
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d101      	bne.n	8005aee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005aea:	2301      	movs	r3, #1
 8005aec:	e041      	b.n	8005b72 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005af4:	b2db      	uxtb	r3, r3
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d106      	bne.n	8005b08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2200      	movs	r2, #0
 8005afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f7fb fe34 	bl	8001770 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2202      	movs	r2, #2
 8005b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681a      	ldr	r2, [r3, #0]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	3304      	adds	r3, #4
 8005b18:	4619      	mov	r1, r3
 8005b1a:	4610      	mov	r0, r2
 8005b1c:	f000 f9c0 	bl	8005ea0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2201      	movs	r2, #1
 8005b24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2201      	movs	r2, #1
 8005b34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2201      	movs	r2, #1
 8005b44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2201      	movs	r2, #1
 8005b54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2201      	movs	r2, #1
 8005b64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b70:	2300      	movs	r3, #0
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	3708      	adds	r7, #8
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}
	...

08005b7c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b085      	sub	sp, #20
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b8a:	b2db      	uxtb	r3, r3
 8005b8c:	2b01      	cmp	r3, #1
 8005b8e:	d001      	beq.n	8005b94 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005b90:	2301      	movs	r3, #1
 8005b92:	e044      	b.n	8005c1e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2202      	movs	r2, #2
 8005b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	68da      	ldr	r2, [r3, #12]
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f042 0201 	orr.w	r2, r2, #1
 8005baa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4a1e      	ldr	r2, [pc, #120]	; (8005c2c <HAL_TIM_Base_Start_IT+0xb0>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d018      	beq.n	8005be8 <HAL_TIM_Base_Start_IT+0x6c>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bbe:	d013      	beq.n	8005be8 <HAL_TIM_Base_Start_IT+0x6c>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4a1a      	ldr	r2, [pc, #104]	; (8005c30 <HAL_TIM_Base_Start_IT+0xb4>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d00e      	beq.n	8005be8 <HAL_TIM_Base_Start_IT+0x6c>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4a19      	ldr	r2, [pc, #100]	; (8005c34 <HAL_TIM_Base_Start_IT+0xb8>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d009      	beq.n	8005be8 <HAL_TIM_Base_Start_IT+0x6c>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4a17      	ldr	r2, [pc, #92]	; (8005c38 <HAL_TIM_Base_Start_IT+0xbc>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d004      	beq.n	8005be8 <HAL_TIM_Base_Start_IT+0x6c>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4a16      	ldr	r2, [pc, #88]	; (8005c3c <HAL_TIM_Base_Start_IT+0xc0>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d111      	bne.n	8005c0c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	689b      	ldr	r3, [r3, #8]
 8005bee:	f003 0307 	and.w	r3, r3, #7
 8005bf2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	2b06      	cmp	r3, #6
 8005bf8:	d010      	beq.n	8005c1c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	681a      	ldr	r2, [r3, #0]
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f042 0201 	orr.w	r2, r2, #1
 8005c08:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c0a:	e007      	b.n	8005c1c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	681a      	ldr	r2, [r3, #0]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f042 0201 	orr.w	r2, r2, #1
 8005c1a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005c1c:	2300      	movs	r3, #0
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	3714      	adds	r7, #20
 8005c22:	46bd      	mov	sp, r7
 8005c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c28:	4770      	bx	lr
 8005c2a:	bf00      	nop
 8005c2c:	40010000 	.word	0x40010000
 8005c30:	40000400 	.word	0x40000400
 8005c34:	40000800 	.word	0x40000800
 8005c38:	40000c00 	.word	0x40000c00
 8005c3c:	40014000 	.word	0x40014000

08005c40 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b082      	sub	sp, #8
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	691b      	ldr	r3, [r3, #16]
 8005c4e:	f003 0302 	and.w	r3, r3, #2
 8005c52:	2b02      	cmp	r3, #2
 8005c54:	d122      	bne.n	8005c9c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	68db      	ldr	r3, [r3, #12]
 8005c5c:	f003 0302 	and.w	r3, r3, #2
 8005c60:	2b02      	cmp	r3, #2
 8005c62:	d11b      	bne.n	8005c9c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f06f 0202 	mvn.w	r2, #2
 8005c6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2201      	movs	r2, #1
 8005c72:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	699b      	ldr	r3, [r3, #24]
 8005c7a:	f003 0303 	and.w	r3, r3, #3
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d003      	beq.n	8005c8a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	f000 f8ee 	bl	8005e64 <HAL_TIM_IC_CaptureCallback>
 8005c88:	e005      	b.n	8005c96 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f000 f8e0 	bl	8005e50 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c90:	6878      	ldr	r0, [r7, #4]
 8005c92:	f000 f8f1 	bl	8005e78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	691b      	ldr	r3, [r3, #16]
 8005ca2:	f003 0304 	and.w	r3, r3, #4
 8005ca6:	2b04      	cmp	r3, #4
 8005ca8:	d122      	bne.n	8005cf0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	68db      	ldr	r3, [r3, #12]
 8005cb0:	f003 0304 	and.w	r3, r3, #4
 8005cb4:	2b04      	cmp	r3, #4
 8005cb6:	d11b      	bne.n	8005cf0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f06f 0204 	mvn.w	r2, #4
 8005cc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2202      	movs	r2, #2
 8005cc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	699b      	ldr	r3, [r3, #24]
 8005cce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d003      	beq.n	8005cde <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	f000 f8c4 	bl	8005e64 <HAL_TIM_IC_CaptureCallback>
 8005cdc:	e005      	b.n	8005cea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f000 f8b6 	bl	8005e50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f000 f8c7 	bl	8005e78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2200      	movs	r2, #0
 8005cee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	691b      	ldr	r3, [r3, #16]
 8005cf6:	f003 0308 	and.w	r3, r3, #8
 8005cfa:	2b08      	cmp	r3, #8
 8005cfc:	d122      	bne.n	8005d44 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	68db      	ldr	r3, [r3, #12]
 8005d04:	f003 0308 	and.w	r3, r3, #8
 8005d08:	2b08      	cmp	r3, #8
 8005d0a:	d11b      	bne.n	8005d44 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f06f 0208 	mvn.w	r2, #8
 8005d14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2204      	movs	r2, #4
 8005d1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	69db      	ldr	r3, [r3, #28]
 8005d22:	f003 0303 	and.w	r3, r3, #3
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d003      	beq.n	8005d32 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f000 f89a 	bl	8005e64 <HAL_TIM_IC_CaptureCallback>
 8005d30:	e005      	b.n	8005d3e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f000 f88c 	bl	8005e50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f000 f89d 	bl	8005e78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2200      	movs	r2, #0
 8005d42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	691b      	ldr	r3, [r3, #16]
 8005d4a:	f003 0310 	and.w	r3, r3, #16
 8005d4e:	2b10      	cmp	r3, #16
 8005d50:	d122      	bne.n	8005d98 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	68db      	ldr	r3, [r3, #12]
 8005d58:	f003 0310 	and.w	r3, r3, #16
 8005d5c:	2b10      	cmp	r3, #16
 8005d5e:	d11b      	bne.n	8005d98 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f06f 0210 	mvn.w	r2, #16
 8005d68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2208      	movs	r2, #8
 8005d6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	69db      	ldr	r3, [r3, #28]
 8005d76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d003      	beq.n	8005d86 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	f000 f870 	bl	8005e64 <HAL_TIM_IC_CaptureCallback>
 8005d84:	e005      	b.n	8005d92 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d86:	6878      	ldr	r0, [r7, #4]
 8005d88:	f000 f862 	bl	8005e50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d8c:	6878      	ldr	r0, [r7, #4]
 8005d8e:	f000 f873 	bl	8005e78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2200      	movs	r2, #0
 8005d96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	691b      	ldr	r3, [r3, #16]
 8005d9e:	f003 0301 	and.w	r3, r3, #1
 8005da2:	2b01      	cmp	r3, #1
 8005da4:	d10e      	bne.n	8005dc4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	68db      	ldr	r3, [r3, #12]
 8005dac:	f003 0301 	and.w	r3, r3, #1
 8005db0:	2b01      	cmp	r3, #1
 8005db2:	d107      	bne.n	8005dc4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f06f 0201 	mvn.w	r2, #1
 8005dbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005dbe:	6878      	ldr	r0, [r7, #4]
 8005dc0:	f7fb fc02 	bl	80015c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	691b      	ldr	r3, [r3, #16]
 8005dca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dce:	2b80      	cmp	r3, #128	; 0x80
 8005dd0:	d10e      	bne.n	8005df0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	68db      	ldr	r3, [r3, #12]
 8005dd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ddc:	2b80      	cmp	r3, #128	; 0x80
 8005dde:	d107      	bne.n	8005df0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005de8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f000 f8e2 	bl	8005fb4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	691b      	ldr	r3, [r3, #16]
 8005df6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dfa:	2b40      	cmp	r3, #64	; 0x40
 8005dfc:	d10e      	bne.n	8005e1c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	68db      	ldr	r3, [r3, #12]
 8005e04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e08:	2b40      	cmp	r3, #64	; 0x40
 8005e0a:	d107      	bne.n	8005e1c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005e14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005e16:	6878      	ldr	r0, [r7, #4]
 8005e18:	f000 f838 	bl	8005e8c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	691b      	ldr	r3, [r3, #16]
 8005e22:	f003 0320 	and.w	r3, r3, #32
 8005e26:	2b20      	cmp	r3, #32
 8005e28:	d10e      	bne.n	8005e48 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	68db      	ldr	r3, [r3, #12]
 8005e30:	f003 0320 	and.w	r3, r3, #32
 8005e34:	2b20      	cmp	r3, #32
 8005e36:	d107      	bne.n	8005e48 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f06f 0220 	mvn.w	r2, #32
 8005e40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f000 f8ac 	bl	8005fa0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005e48:	bf00      	nop
 8005e4a:	3708      	adds	r7, #8
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bd80      	pop	{r7, pc}

08005e50 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b083      	sub	sp, #12
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005e58:	bf00      	nop
 8005e5a:	370c      	adds	r7, #12
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e62:	4770      	bx	lr

08005e64 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005e64:	b480      	push	{r7}
 8005e66:	b083      	sub	sp, #12
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005e6c:	bf00      	nop
 8005e6e:	370c      	adds	r7, #12
 8005e70:	46bd      	mov	sp, r7
 8005e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e76:	4770      	bx	lr

08005e78 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b083      	sub	sp, #12
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005e80:	bf00      	nop
 8005e82:	370c      	adds	r7, #12
 8005e84:	46bd      	mov	sp, r7
 8005e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8a:	4770      	bx	lr

08005e8c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b083      	sub	sp, #12
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005e94:	bf00      	nop
 8005e96:	370c      	adds	r7, #12
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9e:	4770      	bx	lr

08005ea0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b085      	sub	sp, #20
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
 8005ea8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	4a34      	ldr	r2, [pc, #208]	; (8005f84 <TIM_Base_SetConfig+0xe4>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d00f      	beq.n	8005ed8 <TIM_Base_SetConfig+0x38>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ebe:	d00b      	beq.n	8005ed8 <TIM_Base_SetConfig+0x38>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	4a31      	ldr	r2, [pc, #196]	; (8005f88 <TIM_Base_SetConfig+0xe8>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d007      	beq.n	8005ed8 <TIM_Base_SetConfig+0x38>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	4a30      	ldr	r2, [pc, #192]	; (8005f8c <TIM_Base_SetConfig+0xec>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d003      	beq.n	8005ed8 <TIM_Base_SetConfig+0x38>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	4a2f      	ldr	r2, [pc, #188]	; (8005f90 <TIM_Base_SetConfig+0xf0>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d108      	bne.n	8005eea <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ede:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	68fa      	ldr	r2, [r7, #12]
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	4a25      	ldr	r2, [pc, #148]	; (8005f84 <TIM_Base_SetConfig+0xe4>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d01b      	beq.n	8005f2a <TIM_Base_SetConfig+0x8a>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ef8:	d017      	beq.n	8005f2a <TIM_Base_SetConfig+0x8a>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	4a22      	ldr	r2, [pc, #136]	; (8005f88 <TIM_Base_SetConfig+0xe8>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d013      	beq.n	8005f2a <TIM_Base_SetConfig+0x8a>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	4a21      	ldr	r2, [pc, #132]	; (8005f8c <TIM_Base_SetConfig+0xec>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d00f      	beq.n	8005f2a <TIM_Base_SetConfig+0x8a>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	4a20      	ldr	r2, [pc, #128]	; (8005f90 <TIM_Base_SetConfig+0xf0>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d00b      	beq.n	8005f2a <TIM_Base_SetConfig+0x8a>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	4a1f      	ldr	r2, [pc, #124]	; (8005f94 <TIM_Base_SetConfig+0xf4>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d007      	beq.n	8005f2a <TIM_Base_SetConfig+0x8a>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	4a1e      	ldr	r2, [pc, #120]	; (8005f98 <TIM_Base_SetConfig+0xf8>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d003      	beq.n	8005f2a <TIM_Base_SetConfig+0x8a>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	4a1d      	ldr	r2, [pc, #116]	; (8005f9c <TIM_Base_SetConfig+0xfc>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d108      	bne.n	8005f3c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	68db      	ldr	r3, [r3, #12]
 8005f36:	68fa      	ldr	r2, [r7, #12]
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	695b      	ldr	r3, [r3, #20]
 8005f46:	4313      	orrs	r3, r2
 8005f48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	68fa      	ldr	r2, [r7, #12]
 8005f4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	689a      	ldr	r2, [r3, #8]
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	681a      	ldr	r2, [r3, #0]
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	4a08      	ldr	r2, [pc, #32]	; (8005f84 <TIM_Base_SetConfig+0xe4>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d103      	bne.n	8005f70 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	691a      	ldr	r2, [r3, #16]
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2201      	movs	r2, #1
 8005f74:	615a      	str	r2, [r3, #20]
}
 8005f76:	bf00      	nop
 8005f78:	3714      	adds	r7, #20
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f80:	4770      	bx	lr
 8005f82:	bf00      	nop
 8005f84:	40010000 	.word	0x40010000
 8005f88:	40000400 	.word	0x40000400
 8005f8c:	40000800 	.word	0x40000800
 8005f90:	40000c00 	.word	0x40000c00
 8005f94:	40014000 	.word	0x40014000
 8005f98:	40014400 	.word	0x40014400
 8005f9c:	40014800 	.word	0x40014800

08005fa0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b083      	sub	sp, #12
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005fa8:	bf00      	nop
 8005faa:	370c      	adds	r7, #12
 8005fac:	46bd      	mov	sp, r7
 8005fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb2:	4770      	bx	lr

08005fb4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b083      	sub	sp, #12
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005fbc:	bf00      	nop
 8005fbe:	370c      	adds	r7, #12
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc6:	4770      	bx	lr

08005fc8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b082      	sub	sp, #8
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d101      	bne.n	8005fda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	e03f      	b.n	800605a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fe0:	b2db      	uxtb	r3, r3
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d106      	bne.n	8005ff4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f7fb fbe0 	bl	80017b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2224      	movs	r2, #36	; 0x24
 8005ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	68da      	ldr	r2, [r3, #12]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800600a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800600c:	6878      	ldr	r0, [r7, #4]
 800600e:	f000 fc7b 	bl	8006908 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	691a      	ldr	r2, [r3, #16]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006020:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	695a      	ldr	r2, [r3, #20]
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006030:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	68da      	ldr	r2, [r3, #12]
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006040:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2200      	movs	r2, #0
 8006046:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2220      	movs	r2, #32
 800604c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2220      	movs	r2, #32
 8006054:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006058:	2300      	movs	r3, #0
}
 800605a:	4618      	mov	r0, r3
 800605c:	3708      	adds	r7, #8
 800605e:	46bd      	mov	sp, r7
 8006060:	bd80      	pop	{r7, pc}
	...

08006064 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b0ba      	sub	sp, #232	; 0xe8
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	68db      	ldr	r3, [r3, #12]
 800607c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	695b      	ldr	r3, [r3, #20]
 8006086:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800608a:	2300      	movs	r3, #0
 800608c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006090:	2300      	movs	r3, #0
 8006092:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006096:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800609a:	f003 030f 	and.w	r3, r3, #15
 800609e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80060a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d10f      	bne.n	80060ca <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80060aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060ae:	f003 0320 	and.w	r3, r3, #32
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d009      	beq.n	80060ca <HAL_UART_IRQHandler+0x66>
 80060b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060ba:	f003 0320 	and.w	r3, r3, #32
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d003      	beq.n	80060ca <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f000 fb65 	bl	8006792 <UART_Receive_IT>
      return;
 80060c8:	e256      	b.n	8006578 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80060ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	f000 80de 	beq.w	8006290 <HAL_UART_IRQHandler+0x22c>
 80060d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80060d8:	f003 0301 	and.w	r3, r3, #1
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d106      	bne.n	80060ee <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80060e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060e4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	f000 80d1 	beq.w	8006290 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80060ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060f2:	f003 0301 	and.w	r3, r3, #1
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d00b      	beq.n	8006112 <HAL_UART_IRQHandler+0xae>
 80060fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006102:	2b00      	cmp	r3, #0
 8006104:	d005      	beq.n	8006112 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800610a:	f043 0201 	orr.w	r2, r3, #1
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006112:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006116:	f003 0304 	and.w	r3, r3, #4
 800611a:	2b00      	cmp	r3, #0
 800611c:	d00b      	beq.n	8006136 <HAL_UART_IRQHandler+0xd2>
 800611e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006122:	f003 0301 	and.w	r3, r3, #1
 8006126:	2b00      	cmp	r3, #0
 8006128:	d005      	beq.n	8006136 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800612e:	f043 0202 	orr.w	r2, r3, #2
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006136:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800613a:	f003 0302 	and.w	r3, r3, #2
 800613e:	2b00      	cmp	r3, #0
 8006140:	d00b      	beq.n	800615a <HAL_UART_IRQHandler+0xf6>
 8006142:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006146:	f003 0301 	and.w	r3, r3, #1
 800614a:	2b00      	cmp	r3, #0
 800614c:	d005      	beq.n	800615a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006152:	f043 0204 	orr.w	r2, r3, #4
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800615a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800615e:	f003 0308 	and.w	r3, r3, #8
 8006162:	2b00      	cmp	r3, #0
 8006164:	d011      	beq.n	800618a <HAL_UART_IRQHandler+0x126>
 8006166:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800616a:	f003 0320 	and.w	r3, r3, #32
 800616e:	2b00      	cmp	r3, #0
 8006170:	d105      	bne.n	800617e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006172:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006176:	f003 0301 	and.w	r3, r3, #1
 800617a:	2b00      	cmp	r3, #0
 800617c:	d005      	beq.n	800618a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006182:	f043 0208 	orr.w	r2, r3, #8
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800618e:	2b00      	cmp	r3, #0
 8006190:	f000 81ed 	beq.w	800656e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006194:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006198:	f003 0320 	and.w	r3, r3, #32
 800619c:	2b00      	cmp	r3, #0
 800619e:	d008      	beq.n	80061b2 <HAL_UART_IRQHandler+0x14e>
 80061a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061a4:	f003 0320 	and.w	r3, r3, #32
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d002      	beq.n	80061b2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80061ac:	6878      	ldr	r0, [r7, #4]
 80061ae:	f000 faf0 	bl	8006792 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	695b      	ldr	r3, [r3, #20]
 80061b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061bc:	2b40      	cmp	r3, #64	; 0x40
 80061be:	bf0c      	ite	eq
 80061c0:	2301      	moveq	r3, #1
 80061c2:	2300      	movne	r3, #0
 80061c4:	b2db      	uxtb	r3, r3
 80061c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ce:	f003 0308 	and.w	r3, r3, #8
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d103      	bne.n	80061de <HAL_UART_IRQHandler+0x17a>
 80061d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d04f      	beq.n	800627e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	f000 f9f8 	bl	80065d4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	695b      	ldr	r3, [r3, #20]
 80061ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061ee:	2b40      	cmp	r3, #64	; 0x40
 80061f0:	d141      	bne.n	8006276 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	3314      	adds	r3, #20
 80061f8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006200:	e853 3f00 	ldrex	r3, [r3]
 8006204:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006208:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800620c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006210:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	3314      	adds	r3, #20
 800621a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800621e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006222:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006226:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800622a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800622e:	e841 2300 	strex	r3, r2, [r1]
 8006232:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006236:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800623a:	2b00      	cmp	r3, #0
 800623c:	d1d9      	bne.n	80061f2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006242:	2b00      	cmp	r3, #0
 8006244:	d013      	beq.n	800626e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800624a:	4a7d      	ldr	r2, [pc, #500]	; (8006440 <HAL_UART_IRQHandler+0x3dc>)
 800624c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006252:	4618      	mov	r0, r3
 8006254:	f7fb fdd4 	bl	8001e00 <HAL_DMA_Abort_IT>
 8006258:	4603      	mov	r3, r0
 800625a:	2b00      	cmp	r3, #0
 800625c:	d016      	beq.n	800628c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006262:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006264:	687a      	ldr	r2, [r7, #4]
 8006266:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006268:	4610      	mov	r0, r2
 800626a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800626c:	e00e      	b.n	800628c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f000 f99a 	bl	80065a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006274:	e00a      	b.n	800628c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	f000 f996 	bl	80065a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800627c:	e006      	b.n	800628c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	f000 f992 	bl	80065a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2200      	movs	r2, #0
 8006288:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800628a:	e170      	b.n	800656e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800628c:	bf00      	nop
    return;
 800628e:	e16e      	b.n	800656e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006294:	2b01      	cmp	r3, #1
 8006296:	f040 814a 	bne.w	800652e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800629a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800629e:	f003 0310 	and.w	r3, r3, #16
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	f000 8143 	beq.w	800652e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80062a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062ac:	f003 0310 	and.w	r3, r3, #16
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	f000 813c 	beq.w	800652e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80062b6:	2300      	movs	r3, #0
 80062b8:	60bb      	str	r3, [r7, #8]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	60bb      	str	r3, [r7, #8]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	60bb      	str	r3, [r7, #8]
 80062ca:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	695b      	ldr	r3, [r3, #20]
 80062d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062d6:	2b40      	cmp	r3, #64	; 0x40
 80062d8:	f040 80b4 	bne.w	8006444 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	685b      	ldr	r3, [r3, #4]
 80062e4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80062e8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	f000 8140 	beq.w	8006572 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80062f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80062fa:	429a      	cmp	r2, r3
 80062fc:	f080 8139 	bcs.w	8006572 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006306:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800630c:	69db      	ldr	r3, [r3, #28]
 800630e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006312:	f000 8088 	beq.w	8006426 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	330c      	adds	r3, #12
 800631c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006320:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006324:	e853 3f00 	ldrex	r3, [r3]
 8006328:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800632c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006330:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006334:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	330c      	adds	r3, #12
 800633e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006342:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006346:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800634a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800634e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006352:	e841 2300 	strex	r3, r2, [r1]
 8006356:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800635a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800635e:	2b00      	cmp	r3, #0
 8006360:	d1d9      	bne.n	8006316 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	3314      	adds	r3, #20
 8006368:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800636a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800636c:	e853 3f00 	ldrex	r3, [r3]
 8006370:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006372:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006374:	f023 0301 	bic.w	r3, r3, #1
 8006378:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	3314      	adds	r3, #20
 8006382:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006386:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800638a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800638c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800638e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006392:	e841 2300 	strex	r3, r2, [r1]
 8006396:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006398:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800639a:	2b00      	cmp	r3, #0
 800639c:	d1e1      	bne.n	8006362 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	3314      	adds	r3, #20
 80063a4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80063a8:	e853 3f00 	ldrex	r3, [r3]
 80063ac:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80063ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80063b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	3314      	adds	r3, #20
 80063be:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80063c2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80063c4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063c6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80063c8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80063ca:	e841 2300 	strex	r3, r2, [r1]
 80063ce:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80063d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d1e3      	bne.n	800639e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2220      	movs	r2, #32
 80063da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2200      	movs	r2, #0
 80063e2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	330c      	adds	r3, #12
 80063ea:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063ee:	e853 3f00 	ldrex	r3, [r3]
 80063f2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80063f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063f6:	f023 0310 	bic.w	r3, r3, #16
 80063fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	330c      	adds	r3, #12
 8006404:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006408:	65ba      	str	r2, [r7, #88]	; 0x58
 800640a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800640c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800640e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006410:	e841 2300 	strex	r3, r2, [r1]
 8006414:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006416:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006418:	2b00      	cmp	r3, #0
 800641a:	d1e3      	bne.n	80063e4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006420:	4618      	mov	r0, r3
 8006422:	f7fb fc7d 	bl	8001d20 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800642e:	b29b      	uxth	r3, r3
 8006430:	1ad3      	subs	r3, r2, r3
 8006432:	b29b      	uxth	r3, r3
 8006434:	4619      	mov	r1, r3
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f000 f8c0 	bl	80065bc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800643c:	e099      	b.n	8006572 <HAL_UART_IRQHandler+0x50e>
 800643e:	bf00      	nop
 8006440:	0800669b 	.word	0x0800669b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800644c:	b29b      	uxth	r3, r3
 800644e:	1ad3      	subs	r3, r2, r3
 8006450:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006458:	b29b      	uxth	r3, r3
 800645a:	2b00      	cmp	r3, #0
 800645c:	f000 808b 	beq.w	8006576 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006460:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006464:	2b00      	cmp	r3, #0
 8006466:	f000 8086 	beq.w	8006576 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	330c      	adds	r3, #12
 8006470:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006474:	e853 3f00 	ldrex	r3, [r3]
 8006478:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800647a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800647c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006480:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	330c      	adds	r3, #12
 800648a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800648e:	647a      	str	r2, [r7, #68]	; 0x44
 8006490:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006492:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006494:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006496:	e841 2300 	strex	r3, r2, [r1]
 800649a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800649c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d1e3      	bne.n	800646a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	3314      	adds	r3, #20
 80064a8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ac:	e853 3f00 	ldrex	r3, [r3]
 80064b0:	623b      	str	r3, [r7, #32]
   return(result);
 80064b2:	6a3b      	ldr	r3, [r7, #32]
 80064b4:	f023 0301 	bic.w	r3, r3, #1
 80064b8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	3314      	adds	r3, #20
 80064c2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80064c6:	633a      	str	r2, [r7, #48]	; 0x30
 80064c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80064cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064ce:	e841 2300 	strex	r3, r2, [r1]
 80064d2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80064d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d1e3      	bne.n	80064a2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2220      	movs	r2, #32
 80064de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2200      	movs	r2, #0
 80064e6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	330c      	adds	r3, #12
 80064ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064f0:	693b      	ldr	r3, [r7, #16]
 80064f2:	e853 3f00 	ldrex	r3, [r3]
 80064f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	f023 0310 	bic.w	r3, r3, #16
 80064fe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	330c      	adds	r3, #12
 8006508:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800650c:	61fa      	str	r2, [r7, #28]
 800650e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006510:	69b9      	ldr	r1, [r7, #24]
 8006512:	69fa      	ldr	r2, [r7, #28]
 8006514:	e841 2300 	strex	r3, r2, [r1]
 8006518:	617b      	str	r3, [r7, #20]
   return(result);
 800651a:	697b      	ldr	r3, [r7, #20]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d1e3      	bne.n	80064e8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006520:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006524:	4619      	mov	r1, r3
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	f000 f848 	bl	80065bc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800652c:	e023      	b.n	8006576 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800652e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006532:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006536:	2b00      	cmp	r3, #0
 8006538:	d009      	beq.n	800654e <HAL_UART_IRQHandler+0x4ea>
 800653a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800653e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006542:	2b00      	cmp	r3, #0
 8006544:	d003      	beq.n	800654e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	f000 f8bb 	bl	80066c2 <UART_Transmit_IT>
    return;
 800654c:	e014      	b.n	8006578 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800654e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006552:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006556:	2b00      	cmp	r3, #0
 8006558:	d00e      	beq.n	8006578 <HAL_UART_IRQHandler+0x514>
 800655a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800655e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006562:	2b00      	cmp	r3, #0
 8006564:	d008      	beq.n	8006578 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	f000 f8fb 	bl	8006762 <UART_EndTransmit_IT>
    return;
 800656c:	e004      	b.n	8006578 <HAL_UART_IRQHandler+0x514>
    return;
 800656e:	bf00      	nop
 8006570:	e002      	b.n	8006578 <HAL_UART_IRQHandler+0x514>
      return;
 8006572:	bf00      	nop
 8006574:	e000      	b.n	8006578 <HAL_UART_IRQHandler+0x514>
      return;
 8006576:	bf00      	nop
  }
}
 8006578:	37e8      	adds	r7, #232	; 0xe8
 800657a:	46bd      	mov	sp, r7
 800657c:	bd80      	pop	{r7, pc}
 800657e:	bf00      	nop

08006580 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006580:	b480      	push	{r7}
 8006582:	b083      	sub	sp, #12
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006588:	bf00      	nop
 800658a:	370c      	adds	r7, #12
 800658c:	46bd      	mov	sp, r7
 800658e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006592:	4770      	bx	lr

08006594 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006594:	b480      	push	{r7}
 8006596:	b083      	sub	sp, #12
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800659c:	bf00      	nop
 800659e:	370c      	adds	r7, #12
 80065a0:	46bd      	mov	sp, r7
 80065a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a6:	4770      	bx	lr

080065a8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80065a8:	b480      	push	{r7}
 80065aa:	b083      	sub	sp, #12
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80065b0:	bf00      	nop
 80065b2:	370c      	adds	r7, #12
 80065b4:	46bd      	mov	sp, r7
 80065b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ba:	4770      	bx	lr

080065bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80065bc:	b480      	push	{r7}
 80065be:	b083      	sub	sp, #12
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
 80065c4:	460b      	mov	r3, r1
 80065c6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80065c8:	bf00      	nop
 80065ca:	370c      	adds	r7, #12
 80065cc:	46bd      	mov	sp, r7
 80065ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d2:	4770      	bx	lr

080065d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80065d4:	b480      	push	{r7}
 80065d6:	b095      	sub	sp, #84	; 0x54
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	330c      	adds	r3, #12
 80065e2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065e6:	e853 3f00 	ldrex	r3, [r3]
 80065ea:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80065ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80065f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	330c      	adds	r3, #12
 80065fa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80065fc:	643a      	str	r2, [r7, #64]	; 0x40
 80065fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006600:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006602:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006604:	e841 2300 	strex	r3, r2, [r1]
 8006608:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800660a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800660c:	2b00      	cmp	r3, #0
 800660e:	d1e5      	bne.n	80065dc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	3314      	adds	r3, #20
 8006616:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006618:	6a3b      	ldr	r3, [r7, #32]
 800661a:	e853 3f00 	ldrex	r3, [r3]
 800661e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006620:	69fb      	ldr	r3, [r7, #28]
 8006622:	f023 0301 	bic.w	r3, r3, #1
 8006626:	64bb      	str	r3, [r7, #72]	; 0x48
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	3314      	adds	r3, #20
 800662e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006630:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006632:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006634:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006636:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006638:	e841 2300 	strex	r3, r2, [r1]
 800663c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800663e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006640:	2b00      	cmp	r3, #0
 8006642:	d1e5      	bne.n	8006610 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006648:	2b01      	cmp	r3, #1
 800664a:	d119      	bne.n	8006680 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	330c      	adds	r3, #12
 8006652:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	e853 3f00 	ldrex	r3, [r3]
 800665a:	60bb      	str	r3, [r7, #8]
   return(result);
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	f023 0310 	bic.w	r3, r3, #16
 8006662:	647b      	str	r3, [r7, #68]	; 0x44
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	330c      	adds	r3, #12
 800666a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800666c:	61ba      	str	r2, [r7, #24]
 800666e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006670:	6979      	ldr	r1, [r7, #20]
 8006672:	69ba      	ldr	r2, [r7, #24]
 8006674:	e841 2300 	strex	r3, r2, [r1]
 8006678:	613b      	str	r3, [r7, #16]
   return(result);
 800667a:	693b      	ldr	r3, [r7, #16]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d1e5      	bne.n	800664c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2220      	movs	r2, #32
 8006684:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2200      	movs	r2, #0
 800668c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800668e:	bf00      	nop
 8006690:	3754      	adds	r7, #84	; 0x54
 8006692:	46bd      	mov	sp, r7
 8006694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006698:	4770      	bx	lr

0800669a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800669a:	b580      	push	{r7, lr}
 800669c:	b084      	sub	sp, #16
 800669e:	af00      	add	r7, sp, #0
 80066a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066a6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	2200      	movs	r2, #0
 80066ac:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	2200      	movs	r2, #0
 80066b2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80066b4:	68f8      	ldr	r0, [r7, #12]
 80066b6:	f7ff ff77 	bl	80065a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80066ba:	bf00      	nop
 80066bc:	3710      	adds	r7, #16
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}

080066c2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80066c2:	b480      	push	{r7}
 80066c4:	b085      	sub	sp, #20
 80066c6:	af00      	add	r7, sp, #0
 80066c8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066d0:	b2db      	uxtb	r3, r3
 80066d2:	2b21      	cmp	r3, #33	; 0x21
 80066d4:	d13e      	bne.n	8006754 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	689b      	ldr	r3, [r3, #8]
 80066da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066de:	d114      	bne.n	800670a <UART_Transmit_IT+0x48>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	691b      	ldr	r3, [r3, #16]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d110      	bne.n	800670a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6a1b      	ldr	r3, [r3, #32]
 80066ec:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	881b      	ldrh	r3, [r3, #0]
 80066f2:	461a      	mov	r2, r3
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80066fc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6a1b      	ldr	r3, [r3, #32]
 8006702:	1c9a      	adds	r2, r3, #2
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	621a      	str	r2, [r3, #32]
 8006708:	e008      	b.n	800671c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6a1b      	ldr	r3, [r3, #32]
 800670e:	1c59      	adds	r1, r3, #1
 8006710:	687a      	ldr	r2, [r7, #4]
 8006712:	6211      	str	r1, [r2, #32]
 8006714:	781a      	ldrb	r2, [r3, #0]
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006720:	b29b      	uxth	r3, r3
 8006722:	3b01      	subs	r3, #1
 8006724:	b29b      	uxth	r3, r3
 8006726:	687a      	ldr	r2, [r7, #4]
 8006728:	4619      	mov	r1, r3
 800672a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800672c:	2b00      	cmp	r3, #0
 800672e:	d10f      	bne.n	8006750 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	68da      	ldr	r2, [r3, #12]
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800673e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	68da      	ldr	r2, [r3, #12]
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800674e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006750:	2300      	movs	r3, #0
 8006752:	e000      	b.n	8006756 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006754:	2302      	movs	r3, #2
  }
}
 8006756:	4618      	mov	r0, r3
 8006758:	3714      	adds	r7, #20
 800675a:	46bd      	mov	sp, r7
 800675c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006760:	4770      	bx	lr

08006762 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006762:	b580      	push	{r7, lr}
 8006764:	b082      	sub	sp, #8
 8006766:	af00      	add	r7, sp, #0
 8006768:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	68da      	ldr	r2, [r3, #12]
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006778:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2220      	movs	r2, #32
 800677e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	f7ff fefc 	bl	8006580 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006788:	2300      	movs	r3, #0
}
 800678a:	4618      	mov	r0, r3
 800678c:	3708      	adds	r7, #8
 800678e:	46bd      	mov	sp, r7
 8006790:	bd80      	pop	{r7, pc}

08006792 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006792:	b580      	push	{r7, lr}
 8006794:	b08c      	sub	sp, #48	; 0x30
 8006796:	af00      	add	r7, sp, #0
 8006798:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80067a0:	b2db      	uxtb	r3, r3
 80067a2:	2b22      	cmp	r3, #34	; 0x22
 80067a4:	f040 80ab 	bne.w	80068fe <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	689b      	ldr	r3, [r3, #8]
 80067ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067b0:	d117      	bne.n	80067e2 <UART_Receive_IT+0x50>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	691b      	ldr	r3, [r3, #16]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d113      	bne.n	80067e2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80067ba:	2300      	movs	r3, #0
 80067bc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067c2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	685b      	ldr	r3, [r3, #4]
 80067ca:	b29b      	uxth	r3, r3
 80067cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067d0:	b29a      	uxth	r2, r3
 80067d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067d4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067da:	1c9a      	adds	r2, r3, #2
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	629a      	str	r2, [r3, #40]	; 0x28
 80067e0:	e026      	b.n	8006830 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067e6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80067e8:	2300      	movs	r3, #0
 80067ea:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	689b      	ldr	r3, [r3, #8]
 80067f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067f4:	d007      	beq.n	8006806 <UART_Receive_IT+0x74>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	689b      	ldr	r3, [r3, #8]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d10a      	bne.n	8006814 <UART_Receive_IT+0x82>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	691b      	ldr	r3, [r3, #16]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d106      	bne.n	8006814 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	685b      	ldr	r3, [r3, #4]
 800680c:	b2da      	uxtb	r2, r3
 800680e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006810:	701a      	strb	r2, [r3, #0]
 8006812:	e008      	b.n	8006826 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	685b      	ldr	r3, [r3, #4]
 800681a:	b2db      	uxtb	r3, r3
 800681c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006820:	b2da      	uxtb	r2, r3
 8006822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006824:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800682a:	1c5a      	adds	r2, r3, #1
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006834:	b29b      	uxth	r3, r3
 8006836:	3b01      	subs	r3, #1
 8006838:	b29b      	uxth	r3, r3
 800683a:	687a      	ldr	r2, [r7, #4]
 800683c:	4619      	mov	r1, r3
 800683e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006840:	2b00      	cmp	r3, #0
 8006842:	d15a      	bne.n	80068fa <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	68da      	ldr	r2, [r3, #12]
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f022 0220 	bic.w	r2, r2, #32
 8006852:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	68da      	ldr	r2, [r3, #12]
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006862:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	695a      	ldr	r2, [r3, #20]
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f022 0201 	bic.w	r2, r2, #1
 8006872:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2220      	movs	r2, #32
 8006878:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006880:	2b01      	cmp	r3, #1
 8006882:	d135      	bne.n	80068f0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2200      	movs	r2, #0
 8006888:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	330c      	adds	r3, #12
 8006890:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006892:	697b      	ldr	r3, [r7, #20]
 8006894:	e853 3f00 	ldrex	r3, [r3]
 8006898:	613b      	str	r3, [r7, #16]
   return(result);
 800689a:	693b      	ldr	r3, [r7, #16]
 800689c:	f023 0310 	bic.w	r3, r3, #16
 80068a0:	627b      	str	r3, [r7, #36]	; 0x24
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	330c      	adds	r3, #12
 80068a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068aa:	623a      	str	r2, [r7, #32]
 80068ac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ae:	69f9      	ldr	r1, [r7, #28]
 80068b0:	6a3a      	ldr	r2, [r7, #32]
 80068b2:	e841 2300 	strex	r3, r2, [r1]
 80068b6:	61bb      	str	r3, [r7, #24]
   return(result);
 80068b8:	69bb      	ldr	r3, [r7, #24]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d1e5      	bne.n	800688a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f003 0310 	and.w	r3, r3, #16
 80068c8:	2b10      	cmp	r3, #16
 80068ca:	d10a      	bne.n	80068e2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80068cc:	2300      	movs	r3, #0
 80068ce:	60fb      	str	r3, [r7, #12]
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	60fb      	str	r3, [r7, #12]
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	685b      	ldr	r3, [r3, #4]
 80068de:	60fb      	str	r3, [r7, #12]
 80068e0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80068e6:	4619      	mov	r1, r3
 80068e8:	6878      	ldr	r0, [r7, #4]
 80068ea:	f7ff fe67 	bl	80065bc <HAL_UARTEx_RxEventCallback>
 80068ee:	e002      	b.n	80068f6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	f7ff fe4f 	bl	8006594 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80068f6:	2300      	movs	r3, #0
 80068f8:	e002      	b.n	8006900 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80068fa:	2300      	movs	r3, #0
 80068fc:	e000      	b.n	8006900 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80068fe:	2302      	movs	r3, #2
  }
}
 8006900:	4618      	mov	r0, r3
 8006902:	3730      	adds	r7, #48	; 0x30
 8006904:	46bd      	mov	sp, r7
 8006906:	bd80      	pop	{r7, pc}

08006908 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006908:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800690c:	b0c0      	sub	sp, #256	; 0x100
 800690e:	af00      	add	r7, sp, #0
 8006910:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006914:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	691b      	ldr	r3, [r3, #16]
 800691c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006924:	68d9      	ldr	r1, [r3, #12]
 8006926:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800692a:	681a      	ldr	r2, [r3, #0]
 800692c:	ea40 0301 	orr.w	r3, r0, r1
 8006930:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006932:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006936:	689a      	ldr	r2, [r3, #8]
 8006938:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800693c:	691b      	ldr	r3, [r3, #16]
 800693e:	431a      	orrs	r2, r3
 8006940:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006944:	695b      	ldr	r3, [r3, #20]
 8006946:	431a      	orrs	r2, r3
 8006948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800694c:	69db      	ldr	r3, [r3, #28]
 800694e:	4313      	orrs	r3, r2
 8006950:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006954:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	68db      	ldr	r3, [r3, #12]
 800695c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006960:	f021 010c 	bic.w	r1, r1, #12
 8006964:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006968:	681a      	ldr	r2, [r3, #0]
 800696a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800696e:	430b      	orrs	r3, r1
 8006970:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006972:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	695b      	ldr	r3, [r3, #20]
 800697a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800697e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006982:	6999      	ldr	r1, [r3, #24]
 8006984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006988:	681a      	ldr	r2, [r3, #0]
 800698a:	ea40 0301 	orr.w	r3, r0, r1
 800698e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006990:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006994:	681a      	ldr	r2, [r3, #0]
 8006996:	4b8f      	ldr	r3, [pc, #572]	; (8006bd4 <UART_SetConfig+0x2cc>)
 8006998:	429a      	cmp	r2, r3
 800699a:	d005      	beq.n	80069a8 <UART_SetConfig+0xa0>
 800699c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069a0:	681a      	ldr	r2, [r3, #0]
 80069a2:	4b8d      	ldr	r3, [pc, #564]	; (8006bd8 <UART_SetConfig+0x2d0>)
 80069a4:	429a      	cmp	r2, r3
 80069a6:	d104      	bne.n	80069b2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80069a8:	f7fe faaa 	bl	8004f00 <HAL_RCC_GetPCLK2Freq>
 80069ac:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80069b0:	e003      	b.n	80069ba <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80069b2:	f7fe fa91 	bl	8004ed8 <HAL_RCC_GetPCLK1Freq>
 80069b6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80069ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069be:	69db      	ldr	r3, [r3, #28]
 80069c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069c4:	f040 810c 	bne.w	8006be0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80069c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80069cc:	2200      	movs	r2, #0
 80069ce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80069d2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80069d6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80069da:	4622      	mov	r2, r4
 80069dc:	462b      	mov	r3, r5
 80069de:	1891      	adds	r1, r2, r2
 80069e0:	65b9      	str	r1, [r7, #88]	; 0x58
 80069e2:	415b      	adcs	r3, r3
 80069e4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80069e6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80069ea:	4621      	mov	r1, r4
 80069ec:	eb12 0801 	adds.w	r8, r2, r1
 80069f0:	4629      	mov	r1, r5
 80069f2:	eb43 0901 	adc.w	r9, r3, r1
 80069f6:	f04f 0200 	mov.w	r2, #0
 80069fa:	f04f 0300 	mov.w	r3, #0
 80069fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006a02:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006a06:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006a0a:	4690      	mov	r8, r2
 8006a0c:	4699      	mov	r9, r3
 8006a0e:	4623      	mov	r3, r4
 8006a10:	eb18 0303 	adds.w	r3, r8, r3
 8006a14:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006a18:	462b      	mov	r3, r5
 8006a1a:	eb49 0303 	adc.w	r3, r9, r3
 8006a1e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006a22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a26:	685b      	ldr	r3, [r3, #4]
 8006a28:	2200      	movs	r2, #0
 8006a2a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006a2e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006a32:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006a36:	460b      	mov	r3, r1
 8006a38:	18db      	adds	r3, r3, r3
 8006a3a:	653b      	str	r3, [r7, #80]	; 0x50
 8006a3c:	4613      	mov	r3, r2
 8006a3e:	eb42 0303 	adc.w	r3, r2, r3
 8006a42:	657b      	str	r3, [r7, #84]	; 0x54
 8006a44:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006a48:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006a4c:	f7f9 fefe 	bl	800084c <__aeabi_uldivmod>
 8006a50:	4602      	mov	r2, r0
 8006a52:	460b      	mov	r3, r1
 8006a54:	4b61      	ldr	r3, [pc, #388]	; (8006bdc <UART_SetConfig+0x2d4>)
 8006a56:	fba3 2302 	umull	r2, r3, r3, r2
 8006a5a:	095b      	lsrs	r3, r3, #5
 8006a5c:	011c      	lsls	r4, r3, #4
 8006a5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a62:	2200      	movs	r2, #0
 8006a64:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006a68:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006a6c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006a70:	4642      	mov	r2, r8
 8006a72:	464b      	mov	r3, r9
 8006a74:	1891      	adds	r1, r2, r2
 8006a76:	64b9      	str	r1, [r7, #72]	; 0x48
 8006a78:	415b      	adcs	r3, r3
 8006a7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a7c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006a80:	4641      	mov	r1, r8
 8006a82:	eb12 0a01 	adds.w	sl, r2, r1
 8006a86:	4649      	mov	r1, r9
 8006a88:	eb43 0b01 	adc.w	fp, r3, r1
 8006a8c:	f04f 0200 	mov.w	r2, #0
 8006a90:	f04f 0300 	mov.w	r3, #0
 8006a94:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006a98:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006a9c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006aa0:	4692      	mov	sl, r2
 8006aa2:	469b      	mov	fp, r3
 8006aa4:	4643      	mov	r3, r8
 8006aa6:	eb1a 0303 	adds.w	r3, sl, r3
 8006aaa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006aae:	464b      	mov	r3, r9
 8006ab0:	eb4b 0303 	adc.w	r3, fp, r3
 8006ab4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006ab8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006abc:	685b      	ldr	r3, [r3, #4]
 8006abe:	2200      	movs	r2, #0
 8006ac0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006ac4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006ac8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006acc:	460b      	mov	r3, r1
 8006ace:	18db      	adds	r3, r3, r3
 8006ad0:	643b      	str	r3, [r7, #64]	; 0x40
 8006ad2:	4613      	mov	r3, r2
 8006ad4:	eb42 0303 	adc.w	r3, r2, r3
 8006ad8:	647b      	str	r3, [r7, #68]	; 0x44
 8006ada:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006ade:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006ae2:	f7f9 feb3 	bl	800084c <__aeabi_uldivmod>
 8006ae6:	4602      	mov	r2, r0
 8006ae8:	460b      	mov	r3, r1
 8006aea:	4611      	mov	r1, r2
 8006aec:	4b3b      	ldr	r3, [pc, #236]	; (8006bdc <UART_SetConfig+0x2d4>)
 8006aee:	fba3 2301 	umull	r2, r3, r3, r1
 8006af2:	095b      	lsrs	r3, r3, #5
 8006af4:	2264      	movs	r2, #100	; 0x64
 8006af6:	fb02 f303 	mul.w	r3, r2, r3
 8006afa:	1acb      	subs	r3, r1, r3
 8006afc:	00db      	lsls	r3, r3, #3
 8006afe:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006b02:	4b36      	ldr	r3, [pc, #216]	; (8006bdc <UART_SetConfig+0x2d4>)
 8006b04:	fba3 2302 	umull	r2, r3, r3, r2
 8006b08:	095b      	lsrs	r3, r3, #5
 8006b0a:	005b      	lsls	r3, r3, #1
 8006b0c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006b10:	441c      	add	r4, r3
 8006b12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b16:	2200      	movs	r2, #0
 8006b18:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006b1c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006b20:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006b24:	4642      	mov	r2, r8
 8006b26:	464b      	mov	r3, r9
 8006b28:	1891      	adds	r1, r2, r2
 8006b2a:	63b9      	str	r1, [r7, #56]	; 0x38
 8006b2c:	415b      	adcs	r3, r3
 8006b2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b30:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006b34:	4641      	mov	r1, r8
 8006b36:	1851      	adds	r1, r2, r1
 8006b38:	6339      	str	r1, [r7, #48]	; 0x30
 8006b3a:	4649      	mov	r1, r9
 8006b3c:	414b      	adcs	r3, r1
 8006b3e:	637b      	str	r3, [r7, #52]	; 0x34
 8006b40:	f04f 0200 	mov.w	r2, #0
 8006b44:	f04f 0300 	mov.w	r3, #0
 8006b48:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006b4c:	4659      	mov	r1, fp
 8006b4e:	00cb      	lsls	r3, r1, #3
 8006b50:	4651      	mov	r1, sl
 8006b52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006b56:	4651      	mov	r1, sl
 8006b58:	00ca      	lsls	r2, r1, #3
 8006b5a:	4610      	mov	r0, r2
 8006b5c:	4619      	mov	r1, r3
 8006b5e:	4603      	mov	r3, r0
 8006b60:	4642      	mov	r2, r8
 8006b62:	189b      	adds	r3, r3, r2
 8006b64:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006b68:	464b      	mov	r3, r9
 8006b6a:	460a      	mov	r2, r1
 8006b6c:	eb42 0303 	adc.w	r3, r2, r3
 8006b70:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006b74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b78:	685b      	ldr	r3, [r3, #4]
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006b80:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006b84:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006b88:	460b      	mov	r3, r1
 8006b8a:	18db      	adds	r3, r3, r3
 8006b8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b8e:	4613      	mov	r3, r2
 8006b90:	eb42 0303 	adc.w	r3, r2, r3
 8006b94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b96:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006b9a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006b9e:	f7f9 fe55 	bl	800084c <__aeabi_uldivmod>
 8006ba2:	4602      	mov	r2, r0
 8006ba4:	460b      	mov	r3, r1
 8006ba6:	4b0d      	ldr	r3, [pc, #52]	; (8006bdc <UART_SetConfig+0x2d4>)
 8006ba8:	fba3 1302 	umull	r1, r3, r3, r2
 8006bac:	095b      	lsrs	r3, r3, #5
 8006bae:	2164      	movs	r1, #100	; 0x64
 8006bb0:	fb01 f303 	mul.w	r3, r1, r3
 8006bb4:	1ad3      	subs	r3, r2, r3
 8006bb6:	00db      	lsls	r3, r3, #3
 8006bb8:	3332      	adds	r3, #50	; 0x32
 8006bba:	4a08      	ldr	r2, [pc, #32]	; (8006bdc <UART_SetConfig+0x2d4>)
 8006bbc:	fba2 2303 	umull	r2, r3, r2, r3
 8006bc0:	095b      	lsrs	r3, r3, #5
 8006bc2:	f003 0207 	and.w	r2, r3, #7
 8006bc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	4422      	add	r2, r4
 8006bce:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006bd0:	e106      	b.n	8006de0 <UART_SetConfig+0x4d8>
 8006bd2:	bf00      	nop
 8006bd4:	40011000 	.word	0x40011000
 8006bd8:	40011400 	.word	0x40011400
 8006bdc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006be0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006be4:	2200      	movs	r2, #0
 8006be6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006bea:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006bee:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006bf2:	4642      	mov	r2, r8
 8006bf4:	464b      	mov	r3, r9
 8006bf6:	1891      	adds	r1, r2, r2
 8006bf8:	6239      	str	r1, [r7, #32]
 8006bfa:	415b      	adcs	r3, r3
 8006bfc:	627b      	str	r3, [r7, #36]	; 0x24
 8006bfe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006c02:	4641      	mov	r1, r8
 8006c04:	1854      	adds	r4, r2, r1
 8006c06:	4649      	mov	r1, r9
 8006c08:	eb43 0501 	adc.w	r5, r3, r1
 8006c0c:	f04f 0200 	mov.w	r2, #0
 8006c10:	f04f 0300 	mov.w	r3, #0
 8006c14:	00eb      	lsls	r3, r5, #3
 8006c16:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006c1a:	00e2      	lsls	r2, r4, #3
 8006c1c:	4614      	mov	r4, r2
 8006c1e:	461d      	mov	r5, r3
 8006c20:	4643      	mov	r3, r8
 8006c22:	18e3      	adds	r3, r4, r3
 8006c24:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006c28:	464b      	mov	r3, r9
 8006c2a:	eb45 0303 	adc.w	r3, r5, r3
 8006c2e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006c32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c36:	685b      	ldr	r3, [r3, #4]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006c3e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006c42:	f04f 0200 	mov.w	r2, #0
 8006c46:	f04f 0300 	mov.w	r3, #0
 8006c4a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006c4e:	4629      	mov	r1, r5
 8006c50:	008b      	lsls	r3, r1, #2
 8006c52:	4621      	mov	r1, r4
 8006c54:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006c58:	4621      	mov	r1, r4
 8006c5a:	008a      	lsls	r2, r1, #2
 8006c5c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006c60:	f7f9 fdf4 	bl	800084c <__aeabi_uldivmod>
 8006c64:	4602      	mov	r2, r0
 8006c66:	460b      	mov	r3, r1
 8006c68:	4b60      	ldr	r3, [pc, #384]	; (8006dec <UART_SetConfig+0x4e4>)
 8006c6a:	fba3 2302 	umull	r2, r3, r3, r2
 8006c6e:	095b      	lsrs	r3, r3, #5
 8006c70:	011c      	lsls	r4, r3, #4
 8006c72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c76:	2200      	movs	r2, #0
 8006c78:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006c7c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006c80:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006c84:	4642      	mov	r2, r8
 8006c86:	464b      	mov	r3, r9
 8006c88:	1891      	adds	r1, r2, r2
 8006c8a:	61b9      	str	r1, [r7, #24]
 8006c8c:	415b      	adcs	r3, r3
 8006c8e:	61fb      	str	r3, [r7, #28]
 8006c90:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006c94:	4641      	mov	r1, r8
 8006c96:	1851      	adds	r1, r2, r1
 8006c98:	6139      	str	r1, [r7, #16]
 8006c9a:	4649      	mov	r1, r9
 8006c9c:	414b      	adcs	r3, r1
 8006c9e:	617b      	str	r3, [r7, #20]
 8006ca0:	f04f 0200 	mov.w	r2, #0
 8006ca4:	f04f 0300 	mov.w	r3, #0
 8006ca8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006cac:	4659      	mov	r1, fp
 8006cae:	00cb      	lsls	r3, r1, #3
 8006cb0:	4651      	mov	r1, sl
 8006cb2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006cb6:	4651      	mov	r1, sl
 8006cb8:	00ca      	lsls	r2, r1, #3
 8006cba:	4610      	mov	r0, r2
 8006cbc:	4619      	mov	r1, r3
 8006cbe:	4603      	mov	r3, r0
 8006cc0:	4642      	mov	r2, r8
 8006cc2:	189b      	adds	r3, r3, r2
 8006cc4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006cc8:	464b      	mov	r3, r9
 8006cca:	460a      	mov	r2, r1
 8006ccc:	eb42 0303 	adc.w	r3, r2, r3
 8006cd0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006cd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cd8:	685b      	ldr	r3, [r3, #4]
 8006cda:	2200      	movs	r2, #0
 8006cdc:	67bb      	str	r3, [r7, #120]	; 0x78
 8006cde:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006ce0:	f04f 0200 	mov.w	r2, #0
 8006ce4:	f04f 0300 	mov.w	r3, #0
 8006ce8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006cec:	4649      	mov	r1, r9
 8006cee:	008b      	lsls	r3, r1, #2
 8006cf0:	4641      	mov	r1, r8
 8006cf2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006cf6:	4641      	mov	r1, r8
 8006cf8:	008a      	lsls	r2, r1, #2
 8006cfa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006cfe:	f7f9 fda5 	bl	800084c <__aeabi_uldivmod>
 8006d02:	4602      	mov	r2, r0
 8006d04:	460b      	mov	r3, r1
 8006d06:	4611      	mov	r1, r2
 8006d08:	4b38      	ldr	r3, [pc, #224]	; (8006dec <UART_SetConfig+0x4e4>)
 8006d0a:	fba3 2301 	umull	r2, r3, r3, r1
 8006d0e:	095b      	lsrs	r3, r3, #5
 8006d10:	2264      	movs	r2, #100	; 0x64
 8006d12:	fb02 f303 	mul.w	r3, r2, r3
 8006d16:	1acb      	subs	r3, r1, r3
 8006d18:	011b      	lsls	r3, r3, #4
 8006d1a:	3332      	adds	r3, #50	; 0x32
 8006d1c:	4a33      	ldr	r2, [pc, #204]	; (8006dec <UART_SetConfig+0x4e4>)
 8006d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8006d22:	095b      	lsrs	r3, r3, #5
 8006d24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006d28:	441c      	add	r4, r3
 8006d2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d2e:	2200      	movs	r2, #0
 8006d30:	673b      	str	r3, [r7, #112]	; 0x70
 8006d32:	677a      	str	r2, [r7, #116]	; 0x74
 8006d34:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006d38:	4642      	mov	r2, r8
 8006d3a:	464b      	mov	r3, r9
 8006d3c:	1891      	adds	r1, r2, r2
 8006d3e:	60b9      	str	r1, [r7, #8]
 8006d40:	415b      	adcs	r3, r3
 8006d42:	60fb      	str	r3, [r7, #12]
 8006d44:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006d48:	4641      	mov	r1, r8
 8006d4a:	1851      	adds	r1, r2, r1
 8006d4c:	6039      	str	r1, [r7, #0]
 8006d4e:	4649      	mov	r1, r9
 8006d50:	414b      	adcs	r3, r1
 8006d52:	607b      	str	r3, [r7, #4]
 8006d54:	f04f 0200 	mov.w	r2, #0
 8006d58:	f04f 0300 	mov.w	r3, #0
 8006d5c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006d60:	4659      	mov	r1, fp
 8006d62:	00cb      	lsls	r3, r1, #3
 8006d64:	4651      	mov	r1, sl
 8006d66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006d6a:	4651      	mov	r1, sl
 8006d6c:	00ca      	lsls	r2, r1, #3
 8006d6e:	4610      	mov	r0, r2
 8006d70:	4619      	mov	r1, r3
 8006d72:	4603      	mov	r3, r0
 8006d74:	4642      	mov	r2, r8
 8006d76:	189b      	adds	r3, r3, r2
 8006d78:	66bb      	str	r3, [r7, #104]	; 0x68
 8006d7a:	464b      	mov	r3, r9
 8006d7c:	460a      	mov	r2, r1
 8006d7e:	eb42 0303 	adc.w	r3, r2, r3
 8006d82:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006d84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d88:	685b      	ldr	r3, [r3, #4]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	663b      	str	r3, [r7, #96]	; 0x60
 8006d8e:	667a      	str	r2, [r7, #100]	; 0x64
 8006d90:	f04f 0200 	mov.w	r2, #0
 8006d94:	f04f 0300 	mov.w	r3, #0
 8006d98:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006d9c:	4649      	mov	r1, r9
 8006d9e:	008b      	lsls	r3, r1, #2
 8006da0:	4641      	mov	r1, r8
 8006da2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006da6:	4641      	mov	r1, r8
 8006da8:	008a      	lsls	r2, r1, #2
 8006daa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006dae:	f7f9 fd4d 	bl	800084c <__aeabi_uldivmod>
 8006db2:	4602      	mov	r2, r0
 8006db4:	460b      	mov	r3, r1
 8006db6:	4b0d      	ldr	r3, [pc, #52]	; (8006dec <UART_SetConfig+0x4e4>)
 8006db8:	fba3 1302 	umull	r1, r3, r3, r2
 8006dbc:	095b      	lsrs	r3, r3, #5
 8006dbe:	2164      	movs	r1, #100	; 0x64
 8006dc0:	fb01 f303 	mul.w	r3, r1, r3
 8006dc4:	1ad3      	subs	r3, r2, r3
 8006dc6:	011b      	lsls	r3, r3, #4
 8006dc8:	3332      	adds	r3, #50	; 0x32
 8006dca:	4a08      	ldr	r2, [pc, #32]	; (8006dec <UART_SetConfig+0x4e4>)
 8006dcc:	fba2 2303 	umull	r2, r3, r2, r3
 8006dd0:	095b      	lsrs	r3, r3, #5
 8006dd2:	f003 020f 	and.w	r2, r3, #15
 8006dd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	4422      	add	r2, r4
 8006dde:	609a      	str	r2, [r3, #8]
}
 8006de0:	bf00      	nop
 8006de2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006de6:	46bd      	mov	sp, r7
 8006de8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006dec:	51eb851f 	.word	0x51eb851f

08006df0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006df0:	b084      	sub	sp, #16
 8006df2:	b580      	push	{r7, lr}
 8006df4:	b084      	sub	sp, #16
 8006df6:	af00      	add	r7, sp, #0
 8006df8:	6078      	str	r0, [r7, #4]
 8006dfa:	f107 001c 	add.w	r0, r7, #28
 8006dfe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e04:	2b01      	cmp	r3, #1
 8006e06:	d122      	bne.n	8006e4e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e0c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	68db      	ldr	r3, [r3, #12]
 8006e18:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006e1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e20:	687a      	ldr	r2, [r7, #4]
 8006e22:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	68db      	ldr	r3, [r3, #12]
 8006e28:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006e30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e32:	2b01      	cmp	r3, #1
 8006e34:	d105      	bne.n	8006e42 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	68db      	ldr	r3, [r3, #12]
 8006e3a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	f001 fbee 	bl	8008624 <USB_CoreReset>
 8006e48:	4603      	mov	r3, r0
 8006e4a:	73fb      	strb	r3, [r7, #15]
 8006e4c:	e01a      	b.n	8006e84 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	68db      	ldr	r3, [r3, #12]
 8006e52:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	f001 fbe2 	bl	8008624 <USB_CoreReset>
 8006e60:	4603      	mov	r3, r0
 8006e62:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006e64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d106      	bne.n	8006e78 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e6e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	639a      	str	r2, [r3, #56]	; 0x38
 8006e76:	e005      	b.n	8006e84 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e7c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e86:	2b01      	cmp	r3, #1
 8006e88:	d10b      	bne.n	8006ea2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	689b      	ldr	r3, [r3, #8]
 8006e8e:	f043 0206 	orr.w	r2, r3, #6
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	689b      	ldr	r3, [r3, #8]
 8006e9a:	f043 0220 	orr.w	r2, r3, #32
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006ea2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	3710      	adds	r7, #16
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006eae:	b004      	add	sp, #16
 8006eb0:	4770      	bx	lr
	...

08006eb4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006eb4:	b480      	push	{r7}
 8006eb6:	b087      	sub	sp, #28
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	60f8      	str	r0, [r7, #12]
 8006ebc:	60b9      	str	r1, [r7, #8]
 8006ebe:	4613      	mov	r3, r2
 8006ec0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006ec2:	79fb      	ldrb	r3, [r7, #7]
 8006ec4:	2b02      	cmp	r3, #2
 8006ec6:	d165      	bne.n	8006f94 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	4a41      	ldr	r2, [pc, #260]	; (8006fd0 <USB_SetTurnaroundTime+0x11c>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d906      	bls.n	8006ede <USB_SetTurnaroundTime+0x2a>
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	4a40      	ldr	r2, [pc, #256]	; (8006fd4 <USB_SetTurnaroundTime+0x120>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d202      	bcs.n	8006ede <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006ed8:	230f      	movs	r3, #15
 8006eda:	617b      	str	r3, [r7, #20]
 8006edc:	e062      	b.n	8006fa4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	4a3c      	ldr	r2, [pc, #240]	; (8006fd4 <USB_SetTurnaroundTime+0x120>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d306      	bcc.n	8006ef4 <USB_SetTurnaroundTime+0x40>
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	4a3b      	ldr	r2, [pc, #236]	; (8006fd8 <USB_SetTurnaroundTime+0x124>)
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d202      	bcs.n	8006ef4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006eee:	230e      	movs	r3, #14
 8006ef0:	617b      	str	r3, [r7, #20]
 8006ef2:	e057      	b.n	8006fa4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006ef4:	68bb      	ldr	r3, [r7, #8]
 8006ef6:	4a38      	ldr	r2, [pc, #224]	; (8006fd8 <USB_SetTurnaroundTime+0x124>)
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d306      	bcc.n	8006f0a <USB_SetTurnaroundTime+0x56>
 8006efc:	68bb      	ldr	r3, [r7, #8]
 8006efe:	4a37      	ldr	r2, [pc, #220]	; (8006fdc <USB_SetTurnaroundTime+0x128>)
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d202      	bcs.n	8006f0a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006f04:	230d      	movs	r3, #13
 8006f06:	617b      	str	r3, [r7, #20]
 8006f08:	e04c      	b.n	8006fa4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	4a33      	ldr	r2, [pc, #204]	; (8006fdc <USB_SetTurnaroundTime+0x128>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d306      	bcc.n	8006f20 <USB_SetTurnaroundTime+0x6c>
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	4a32      	ldr	r2, [pc, #200]	; (8006fe0 <USB_SetTurnaroundTime+0x12c>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d802      	bhi.n	8006f20 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006f1a:	230c      	movs	r3, #12
 8006f1c:	617b      	str	r3, [r7, #20]
 8006f1e:	e041      	b.n	8006fa4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	4a2f      	ldr	r2, [pc, #188]	; (8006fe0 <USB_SetTurnaroundTime+0x12c>)
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d906      	bls.n	8006f36 <USB_SetTurnaroundTime+0x82>
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	4a2e      	ldr	r2, [pc, #184]	; (8006fe4 <USB_SetTurnaroundTime+0x130>)
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	d802      	bhi.n	8006f36 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006f30:	230b      	movs	r3, #11
 8006f32:	617b      	str	r3, [r7, #20]
 8006f34:	e036      	b.n	8006fa4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006f36:	68bb      	ldr	r3, [r7, #8]
 8006f38:	4a2a      	ldr	r2, [pc, #168]	; (8006fe4 <USB_SetTurnaroundTime+0x130>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d906      	bls.n	8006f4c <USB_SetTurnaroundTime+0x98>
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	4a29      	ldr	r2, [pc, #164]	; (8006fe8 <USB_SetTurnaroundTime+0x134>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d802      	bhi.n	8006f4c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006f46:	230a      	movs	r3, #10
 8006f48:	617b      	str	r3, [r7, #20]
 8006f4a:	e02b      	b.n	8006fa4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	4a26      	ldr	r2, [pc, #152]	; (8006fe8 <USB_SetTurnaroundTime+0x134>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d906      	bls.n	8006f62 <USB_SetTurnaroundTime+0xae>
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	4a25      	ldr	r2, [pc, #148]	; (8006fec <USB_SetTurnaroundTime+0x138>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d202      	bcs.n	8006f62 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006f5c:	2309      	movs	r3, #9
 8006f5e:	617b      	str	r3, [r7, #20]
 8006f60:	e020      	b.n	8006fa4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	4a21      	ldr	r2, [pc, #132]	; (8006fec <USB_SetTurnaroundTime+0x138>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d306      	bcc.n	8006f78 <USB_SetTurnaroundTime+0xc4>
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	4a20      	ldr	r2, [pc, #128]	; (8006ff0 <USB_SetTurnaroundTime+0x13c>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d802      	bhi.n	8006f78 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006f72:	2308      	movs	r3, #8
 8006f74:	617b      	str	r3, [r7, #20]
 8006f76:	e015      	b.n	8006fa4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	4a1d      	ldr	r2, [pc, #116]	; (8006ff0 <USB_SetTurnaroundTime+0x13c>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d906      	bls.n	8006f8e <USB_SetTurnaroundTime+0xda>
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	4a1c      	ldr	r2, [pc, #112]	; (8006ff4 <USB_SetTurnaroundTime+0x140>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d202      	bcs.n	8006f8e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006f88:	2307      	movs	r3, #7
 8006f8a:	617b      	str	r3, [r7, #20]
 8006f8c:	e00a      	b.n	8006fa4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006f8e:	2306      	movs	r3, #6
 8006f90:	617b      	str	r3, [r7, #20]
 8006f92:	e007      	b.n	8006fa4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006f94:	79fb      	ldrb	r3, [r7, #7]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d102      	bne.n	8006fa0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006f9a:	2309      	movs	r3, #9
 8006f9c:	617b      	str	r3, [r7, #20]
 8006f9e:	e001      	b.n	8006fa4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006fa0:	2309      	movs	r3, #9
 8006fa2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	68db      	ldr	r3, [r3, #12]
 8006fa8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	68da      	ldr	r2, [r3, #12]
 8006fb4:	697b      	ldr	r3, [r7, #20]
 8006fb6:	029b      	lsls	r3, r3, #10
 8006fb8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006fbc:	431a      	orrs	r2, r3
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006fc2:	2300      	movs	r3, #0
}
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	371c      	adds	r7, #28
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fce:	4770      	bx	lr
 8006fd0:	00d8acbf 	.word	0x00d8acbf
 8006fd4:	00e4e1c0 	.word	0x00e4e1c0
 8006fd8:	00f42400 	.word	0x00f42400
 8006fdc:	01067380 	.word	0x01067380
 8006fe0:	011a499f 	.word	0x011a499f
 8006fe4:	01312cff 	.word	0x01312cff
 8006fe8:	014ca43f 	.word	0x014ca43f
 8006fec:	016e3600 	.word	0x016e3600
 8006ff0:	01a6ab1f 	.word	0x01a6ab1f
 8006ff4:	01e84800 	.word	0x01e84800

08006ff8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	b083      	sub	sp, #12
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	689b      	ldr	r3, [r3, #8]
 8007004:	f043 0201 	orr.w	r2, r3, #1
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800700c:	2300      	movs	r3, #0
}
 800700e:	4618      	mov	r0, r3
 8007010:	370c      	adds	r7, #12
 8007012:	46bd      	mov	sp, r7
 8007014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007018:	4770      	bx	lr

0800701a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800701a:	b480      	push	{r7}
 800701c:	b083      	sub	sp, #12
 800701e:	af00      	add	r7, sp, #0
 8007020:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	689b      	ldr	r3, [r3, #8]
 8007026:	f023 0201 	bic.w	r2, r3, #1
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800702e:	2300      	movs	r3, #0
}
 8007030:	4618      	mov	r0, r3
 8007032:	370c      	adds	r7, #12
 8007034:	46bd      	mov	sp, r7
 8007036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703a:	4770      	bx	lr

0800703c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b084      	sub	sp, #16
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
 8007044:	460b      	mov	r3, r1
 8007046:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007048:	2300      	movs	r3, #0
 800704a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	68db      	ldr	r3, [r3, #12]
 8007050:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007058:	78fb      	ldrb	r3, [r7, #3]
 800705a:	2b01      	cmp	r3, #1
 800705c:	d115      	bne.n	800708a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	68db      	ldr	r3, [r3, #12]
 8007062:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800706a:	2001      	movs	r0, #1
 800706c:	f7fa fd52 	bl	8001b14 <HAL_Delay>
      ms++;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	3301      	adds	r3, #1
 8007074:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f001 fa45 	bl	8008506 <USB_GetMode>
 800707c:	4603      	mov	r3, r0
 800707e:	2b01      	cmp	r3, #1
 8007080:	d01e      	beq.n	80070c0 <USB_SetCurrentMode+0x84>
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	2b31      	cmp	r3, #49	; 0x31
 8007086:	d9f0      	bls.n	800706a <USB_SetCurrentMode+0x2e>
 8007088:	e01a      	b.n	80070c0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800708a:	78fb      	ldrb	r3, [r7, #3]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d115      	bne.n	80070bc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	68db      	ldr	r3, [r3, #12]
 8007094:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800709c:	2001      	movs	r0, #1
 800709e:	f7fa fd39 	bl	8001b14 <HAL_Delay>
      ms++;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	3301      	adds	r3, #1
 80070a6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80070a8:	6878      	ldr	r0, [r7, #4]
 80070aa:	f001 fa2c 	bl	8008506 <USB_GetMode>
 80070ae:	4603      	mov	r3, r0
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d005      	beq.n	80070c0 <USB_SetCurrentMode+0x84>
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	2b31      	cmp	r3, #49	; 0x31
 80070b8:	d9f0      	bls.n	800709c <USB_SetCurrentMode+0x60>
 80070ba:	e001      	b.n	80070c0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80070bc:	2301      	movs	r3, #1
 80070be:	e005      	b.n	80070cc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	2b32      	cmp	r3, #50	; 0x32
 80070c4:	d101      	bne.n	80070ca <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80070c6:	2301      	movs	r3, #1
 80070c8:	e000      	b.n	80070cc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80070ca:	2300      	movs	r3, #0
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	3710      	adds	r7, #16
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}

080070d4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80070d4:	b084      	sub	sp, #16
 80070d6:	b580      	push	{r7, lr}
 80070d8:	b086      	sub	sp, #24
 80070da:	af00      	add	r7, sp, #0
 80070dc:	6078      	str	r0, [r7, #4]
 80070de:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80070e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80070e6:	2300      	movs	r3, #0
 80070e8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80070ee:	2300      	movs	r3, #0
 80070f0:	613b      	str	r3, [r7, #16]
 80070f2:	e009      	b.n	8007108 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80070f4:	687a      	ldr	r2, [r7, #4]
 80070f6:	693b      	ldr	r3, [r7, #16]
 80070f8:	3340      	adds	r3, #64	; 0x40
 80070fa:	009b      	lsls	r3, r3, #2
 80070fc:	4413      	add	r3, r2
 80070fe:	2200      	movs	r2, #0
 8007100:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007102:	693b      	ldr	r3, [r7, #16]
 8007104:	3301      	adds	r3, #1
 8007106:	613b      	str	r3, [r7, #16]
 8007108:	693b      	ldr	r3, [r7, #16]
 800710a:	2b0e      	cmp	r3, #14
 800710c:	d9f2      	bls.n	80070f4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800710e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007110:	2b00      	cmp	r3, #0
 8007112:	d11c      	bne.n	800714e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800711a:	685b      	ldr	r3, [r3, #4]
 800711c:	68fa      	ldr	r2, [r7, #12]
 800711e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007122:	f043 0302 	orr.w	r3, r3, #2
 8007126:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800712c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007138:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007144:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	639a      	str	r2, [r3, #56]	; 0x38
 800714c:	e00b      	b.n	8007166 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007152:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800715e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800716c:	461a      	mov	r2, r3
 800716e:	2300      	movs	r3, #0
 8007170:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007178:	4619      	mov	r1, r3
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007180:	461a      	mov	r2, r3
 8007182:	680b      	ldr	r3, [r1, #0]
 8007184:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007188:	2b01      	cmp	r3, #1
 800718a:	d10c      	bne.n	80071a6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800718c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800718e:	2b00      	cmp	r3, #0
 8007190:	d104      	bne.n	800719c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007192:	2100      	movs	r1, #0
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	f000 f965 	bl	8007464 <USB_SetDevSpeed>
 800719a:	e008      	b.n	80071ae <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800719c:	2101      	movs	r1, #1
 800719e:	6878      	ldr	r0, [r7, #4]
 80071a0:	f000 f960 	bl	8007464 <USB_SetDevSpeed>
 80071a4:	e003      	b.n	80071ae <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80071a6:	2103      	movs	r1, #3
 80071a8:	6878      	ldr	r0, [r7, #4]
 80071aa:	f000 f95b 	bl	8007464 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80071ae:	2110      	movs	r1, #16
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	f000 f8f3 	bl	800739c <USB_FlushTxFifo>
 80071b6:	4603      	mov	r3, r0
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d001      	beq.n	80071c0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80071bc:	2301      	movs	r3, #1
 80071be:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	f000 f91f 	bl	8007404 <USB_FlushRxFifo>
 80071c6:	4603      	mov	r3, r0
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d001      	beq.n	80071d0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80071cc:	2301      	movs	r3, #1
 80071ce:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071d6:	461a      	mov	r2, r3
 80071d8:	2300      	movs	r3, #0
 80071da:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071e2:	461a      	mov	r2, r3
 80071e4:	2300      	movs	r3, #0
 80071e6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071ee:	461a      	mov	r2, r3
 80071f0:	2300      	movs	r3, #0
 80071f2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80071f4:	2300      	movs	r3, #0
 80071f6:	613b      	str	r3, [r7, #16]
 80071f8:	e043      	b.n	8007282 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80071fa:	693b      	ldr	r3, [r7, #16]
 80071fc:	015a      	lsls	r2, r3, #5
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	4413      	add	r3, r2
 8007202:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800720c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007210:	d118      	bne.n	8007244 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8007212:	693b      	ldr	r3, [r7, #16]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d10a      	bne.n	800722e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007218:	693b      	ldr	r3, [r7, #16]
 800721a:	015a      	lsls	r2, r3, #5
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	4413      	add	r3, r2
 8007220:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007224:	461a      	mov	r2, r3
 8007226:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800722a:	6013      	str	r3, [r2, #0]
 800722c:	e013      	b.n	8007256 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800722e:	693b      	ldr	r3, [r7, #16]
 8007230:	015a      	lsls	r2, r3, #5
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	4413      	add	r3, r2
 8007236:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800723a:	461a      	mov	r2, r3
 800723c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007240:	6013      	str	r3, [r2, #0]
 8007242:	e008      	b.n	8007256 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007244:	693b      	ldr	r3, [r7, #16]
 8007246:	015a      	lsls	r2, r3, #5
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	4413      	add	r3, r2
 800724c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007250:	461a      	mov	r2, r3
 8007252:	2300      	movs	r3, #0
 8007254:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007256:	693b      	ldr	r3, [r7, #16]
 8007258:	015a      	lsls	r2, r3, #5
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	4413      	add	r3, r2
 800725e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007262:	461a      	mov	r2, r3
 8007264:	2300      	movs	r3, #0
 8007266:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007268:	693b      	ldr	r3, [r7, #16]
 800726a:	015a      	lsls	r2, r3, #5
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	4413      	add	r3, r2
 8007270:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007274:	461a      	mov	r2, r3
 8007276:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800727a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800727c:	693b      	ldr	r3, [r7, #16]
 800727e:	3301      	adds	r3, #1
 8007280:	613b      	str	r3, [r7, #16]
 8007282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007284:	693a      	ldr	r2, [r7, #16]
 8007286:	429a      	cmp	r2, r3
 8007288:	d3b7      	bcc.n	80071fa <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800728a:	2300      	movs	r3, #0
 800728c:	613b      	str	r3, [r7, #16]
 800728e:	e043      	b.n	8007318 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007290:	693b      	ldr	r3, [r7, #16]
 8007292:	015a      	lsls	r2, r3, #5
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	4413      	add	r3, r2
 8007298:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80072a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80072a6:	d118      	bne.n	80072da <USB_DevInit+0x206>
    {
      if (i == 0U)
 80072a8:	693b      	ldr	r3, [r7, #16]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d10a      	bne.n	80072c4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80072ae:	693b      	ldr	r3, [r7, #16]
 80072b0:	015a      	lsls	r2, r3, #5
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	4413      	add	r3, r2
 80072b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072ba:	461a      	mov	r2, r3
 80072bc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80072c0:	6013      	str	r3, [r2, #0]
 80072c2:	e013      	b.n	80072ec <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80072c4:	693b      	ldr	r3, [r7, #16]
 80072c6:	015a      	lsls	r2, r3, #5
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	4413      	add	r3, r2
 80072cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072d0:	461a      	mov	r2, r3
 80072d2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80072d6:	6013      	str	r3, [r2, #0]
 80072d8:	e008      	b.n	80072ec <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80072da:	693b      	ldr	r3, [r7, #16]
 80072dc:	015a      	lsls	r2, r3, #5
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	4413      	add	r3, r2
 80072e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072e6:	461a      	mov	r2, r3
 80072e8:	2300      	movs	r3, #0
 80072ea:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80072ec:	693b      	ldr	r3, [r7, #16]
 80072ee:	015a      	lsls	r2, r3, #5
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	4413      	add	r3, r2
 80072f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072f8:	461a      	mov	r2, r3
 80072fa:	2300      	movs	r3, #0
 80072fc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80072fe:	693b      	ldr	r3, [r7, #16]
 8007300:	015a      	lsls	r2, r3, #5
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	4413      	add	r3, r2
 8007306:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800730a:	461a      	mov	r2, r3
 800730c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007310:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007312:	693b      	ldr	r3, [r7, #16]
 8007314:	3301      	adds	r3, #1
 8007316:	613b      	str	r3, [r7, #16]
 8007318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800731a:	693a      	ldr	r2, [r7, #16]
 800731c:	429a      	cmp	r2, r3
 800731e:	d3b7      	bcc.n	8007290 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007326:	691b      	ldr	r3, [r3, #16]
 8007328:	68fa      	ldr	r2, [r7, #12]
 800732a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800732e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007332:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2200      	movs	r2, #0
 8007338:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007340:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007344:	2b00      	cmp	r3, #0
 8007346:	d105      	bne.n	8007354 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	699b      	ldr	r3, [r3, #24]
 800734c:	f043 0210 	orr.w	r2, r3, #16
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	699a      	ldr	r2, [r3, #24]
 8007358:	4b0f      	ldr	r3, [pc, #60]	; (8007398 <USB_DevInit+0x2c4>)
 800735a:	4313      	orrs	r3, r2
 800735c:	687a      	ldr	r2, [r7, #4]
 800735e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007360:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007362:	2b00      	cmp	r3, #0
 8007364:	d005      	beq.n	8007372 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	699b      	ldr	r3, [r3, #24]
 800736a:	f043 0208 	orr.w	r2, r3, #8
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007372:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007374:	2b01      	cmp	r3, #1
 8007376:	d107      	bne.n	8007388 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	699b      	ldr	r3, [r3, #24]
 800737c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007380:	f043 0304 	orr.w	r3, r3, #4
 8007384:	687a      	ldr	r2, [r7, #4]
 8007386:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007388:	7dfb      	ldrb	r3, [r7, #23]
}
 800738a:	4618      	mov	r0, r3
 800738c:	3718      	adds	r7, #24
 800738e:	46bd      	mov	sp, r7
 8007390:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007394:	b004      	add	sp, #16
 8007396:	4770      	bx	lr
 8007398:	803c3800 	.word	0x803c3800

0800739c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800739c:	b480      	push	{r7}
 800739e:	b085      	sub	sp, #20
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
 80073a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80073a6:	2300      	movs	r3, #0
 80073a8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	3301      	adds	r3, #1
 80073ae:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	4a13      	ldr	r2, [pc, #76]	; (8007400 <USB_FlushTxFifo+0x64>)
 80073b4:	4293      	cmp	r3, r2
 80073b6:	d901      	bls.n	80073bc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80073b8:	2303      	movs	r3, #3
 80073ba:	e01b      	b.n	80073f4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	691b      	ldr	r3, [r3, #16]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	daf2      	bge.n	80073aa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80073c4:	2300      	movs	r3, #0
 80073c6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	019b      	lsls	r3, r3, #6
 80073cc:	f043 0220 	orr.w	r2, r3, #32
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	3301      	adds	r3, #1
 80073d8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	4a08      	ldr	r2, [pc, #32]	; (8007400 <USB_FlushTxFifo+0x64>)
 80073de:	4293      	cmp	r3, r2
 80073e0:	d901      	bls.n	80073e6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80073e2:	2303      	movs	r3, #3
 80073e4:	e006      	b.n	80073f4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	691b      	ldr	r3, [r3, #16]
 80073ea:	f003 0320 	and.w	r3, r3, #32
 80073ee:	2b20      	cmp	r3, #32
 80073f0:	d0f0      	beq.n	80073d4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80073f2:	2300      	movs	r3, #0
}
 80073f4:	4618      	mov	r0, r3
 80073f6:	3714      	adds	r7, #20
 80073f8:	46bd      	mov	sp, r7
 80073fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fe:	4770      	bx	lr
 8007400:	00030d40 	.word	0x00030d40

08007404 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007404:	b480      	push	{r7}
 8007406:	b085      	sub	sp, #20
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800740c:	2300      	movs	r3, #0
 800740e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	3301      	adds	r3, #1
 8007414:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	4a11      	ldr	r2, [pc, #68]	; (8007460 <USB_FlushRxFifo+0x5c>)
 800741a:	4293      	cmp	r3, r2
 800741c:	d901      	bls.n	8007422 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800741e:	2303      	movs	r3, #3
 8007420:	e018      	b.n	8007454 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	691b      	ldr	r3, [r3, #16]
 8007426:	2b00      	cmp	r3, #0
 8007428:	daf2      	bge.n	8007410 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800742a:	2300      	movs	r3, #0
 800742c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2210      	movs	r2, #16
 8007432:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	3301      	adds	r3, #1
 8007438:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	4a08      	ldr	r2, [pc, #32]	; (8007460 <USB_FlushRxFifo+0x5c>)
 800743e:	4293      	cmp	r3, r2
 8007440:	d901      	bls.n	8007446 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007442:	2303      	movs	r3, #3
 8007444:	e006      	b.n	8007454 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	691b      	ldr	r3, [r3, #16]
 800744a:	f003 0310 	and.w	r3, r3, #16
 800744e:	2b10      	cmp	r3, #16
 8007450:	d0f0      	beq.n	8007434 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007452:	2300      	movs	r3, #0
}
 8007454:	4618      	mov	r0, r3
 8007456:	3714      	adds	r7, #20
 8007458:	46bd      	mov	sp, r7
 800745a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745e:	4770      	bx	lr
 8007460:	00030d40 	.word	0x00030d40

08007464 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007464:	b480      	push	{r7}
 8007466:	b085      	sub	sp, #20
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
 800746c:	460b      	mov	r3, r1
 800746e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800747a:	681a      	ldr	r2, [r3, #0]
 800747c:	78fb      	ldrb	r3, [r7, #3]
 800747e:	68f9      	ldr	r1, [r7, #12]
 8007480:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007484:	4313      	orrs	r3, r2
 8007486:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007488:	2300      	movs	r3, #0
}
 800748a:	4618      	mov	r0, r3
 800748c:	3714      	adds	r7, #20
 800748e:	46bd      	mov	sp, r7
 8007490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007494:	4770      	bx	lr

08007496 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007496:	b480      	push	{r7}
 8007498:	b087      	sub	sp, #28
 800749a:	af00      	add	r7, sp, #0
 800749c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80074a2:	693b      	ldr	r3, [r7, #16]
 80074a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074a8:	689b      	ldr	r3, [r3, #8]
 80074aa:	f003 0306 	and.w	r3, r3, #6
 80074ae:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d102      	bne.n	80074bc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80074b6:	2300      	movs	r3, #0
 80074b8:	75fb      	strb	r3, [r7, #23]
 80074ba:	e00a      	b.n	80074d2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	2b02      	cmp	r3, #2
 80074c0:	d002      	beq.n	80074c8 <USB_GetDevSpeed+0x32>
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	2b06      	cmp	r3, #6
 80074c6:	d102      	bne.n	80074ce <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80074c8:	2302      	movs	r3, #2
 80074ca:	75fb      	strb	r3, [r7, #23]
 80074cc:	e001      	b.n	80074d2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80074ce:	230f      	movs	r3, #15
 80074d0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80074d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80074d4:	4618      	mov	r0, r3
 80074d6:	371c      	adds	r7, #28
 80074d8:	46bd      	mov	sp, r7
 80074da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074de:	4770      	bx	lr

080074e0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80074e0:	b480      	push	{r7}
 80074e2:	b085      	sub	sp, #20
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
 80074e8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	781b      	ldrb	r3, [r3, #0]
 80074f2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	785b      	ldrb	r3, [r3, #1]
 80074f8:	2b01      	cmp	r3, #1
 80074fa:	d13a      	bne.n	8007572 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007502:	69da      	ldr	r2, [r3, #28]
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	781b      	ldrb	r3, [r3, #0]
 8007508:	f003 030f 	and.w	r3, r3, #15
 800750c:	2101      	movs	r1, #1
 800750e:	fa01 f303 	lsl.w	r3, r1, r3
 8007512:	b29b      	uxth	r3, r3
 8007514:	68f9      	ldr	r1, [r7, #12]
 8007516:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800751a:	4313      	orrs	r3, r2
 800751c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800751e:	68bb      	ldr	r3, [r7, #8]
 8007520:	015a      	lsls	r2, r3, #5
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	4413      	add	r3, r2
 8007526:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007530:	2b00      	cmp	r3, #0
 8007532:	d155      	bne.n	80075e0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007534:	68bb      	ldr	r3, [r7, #8]
 8007536:	015a      	lsls	r2, r3, #5
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	4413      	add	r3, r2
 800753c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007540:	681a      	ldr	r2, [r3, #0]
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	68db      	ldr	r3, [r3, #12]
 8007546:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	791b      	ldrb	r3, [r3, #4]
 800754e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007550:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007552:	68bb      	ldr	r3, [r7, #8]
 8007554:	059b      	lsls	r3, r3, #22
 8007556:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007558:	4313      	orrs	r3, r2
 800755a:	68ba      	ldr	r2, [r7, #8]
 800755c:	0151      	lsls	r1, r2, #5
 800755e:	68fa      	ldr	r2, [r7, #12]
 8007560:	440a      	add	r2, r1
 8007562:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007566:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800756a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800756e:	6013      	str	r3, [r2, #0]
 8007570:	e036      	b.n	80075e0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007578:	69da      	ldr	r2, [r3, #28]
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	781b      	ldrb	r3, [r3, #0]
 800757e:	f003 030f 	and.w	r3, r3, #15
 8007582:	2101      	movs	r1, #1
 8007584:	fa01 f303 	lsl.w	r3, r1, r3
 8007588:	041b      	lsls	r3, r3, #16
 800758a:	68f9      	ldr	r1, [r7, #12]
 800758c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007590:	4313      	orrs	r3, r2
 8007592:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007594:	68bb      	ldr	r3, [r7, #8]
 8007596:	015a      	lsls	r2, r3, #5
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	4413      	add	r3, r2
 800759c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d11a      	bne.n	80075e0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80075aa:	68bb      	ldr	r3, [r7, #8]
 80075ac:	015a      	lsls	r2, r3, #5
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	4413      	add	r3, r2
 80075b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075b6:	681a      	ldr	r2, [r3, #0]
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	68db      	ldr	r3, [r3, #12]
 80075bc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	791b      	ldrb	r3, [r3, #4]
 80075c4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80075c6:	430b      	orrs	r3, r1
 80075c8:	4313      	orrs	r3, r2
 80075ca:	68ba      	ldr	r2, [r7, #8]
 80075cc:	0151      	lsls	r1, r2, #5
 80075ce:	68fa      	ldr	r2, [r7, #12]
 80075d0:	440a      	add	r2, r1
 80075d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80075d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80075da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075de:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80075e0:	2300      	movs	r3, #0
}
 80075e2:	4618      	mov	r0, r3
 80075e4:	3714      	adds	r7, #20
 80075e6:	46bd      	mov	sp, r7
 80075e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ec:	4770      	bx	lr
	...

080075f0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80075f0:	b480      	push	{r7}
 80075f2:	b085      	sub	sp, #20
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
 80075f8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	781b      	ldrb	r3, [r3, #0]
 8007602:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	785b      	ldrb	r3, [r3, #1]
 8007608:	2b01      	cmp	r3, #1
 800760a:	d161      	bne.n	80076d0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800760c:	68bb      	ldr	r3, [r7, #8]
 800760e:	015a      	lsls	r2, r3, #5
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	4413      	add	r3, r2
 8007614:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800761e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007622:	d11f      	bne.n	8007664 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	015a      	lsls	r2, r3, #5
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	4413      	add	r3, r2
 800762c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	68ba      	ldr	r2, [r7, #8]
 8007634:	0151      	lsls	r1, r2, #5
 8007636:	68fa      	ldr	r2, [r7, #12]
 8007638:	440a      	add	r2, r1
 800763a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800763e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007642:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	015a      	lsls	r2, r3, #5
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	4413      	add	r3, r2
 800764c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	68ba      	ldr	r2, [r7, #8]
 8007654:	0151      	lsls	r1, r2, #5
 8007656:	68fa      	ldr	r2, [r7, #12]
 8007658:	440a      	add	r2, r1
 800765a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800765e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007662:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800766a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	781b      	ldrb	r3, [r3, #0]
 8007670:	f003 030f 	and.w	r3, r3, #15
 8007674:	2101      	movs	r1, #1
 8007676:	fa01 f303 	lsl.w	r3, r1, r3
 800767a:	b29b      	uxth	r3, r3
 800767c:	43db      	mvns	r3, r3
 800767e:	68f9      	ldr	r1, [r7, #12]
 8007680:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007684:	4013      	ands	r3, r2
 8007686:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800768e:	69da      	ldr	r2, [r3, #28]
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	781b      	ldrb	r3, [r3, #0]
 8007694:	f003 030f 	and.w	r3, r3, #15
 8007698:	2101      	movs	r1, #1
 800769a:	fa01 f303 	lsl.w	r3, r1, r3
 800769e:	b29b      	uxth	r3, r3
 80076a0:	43db      	mvns	r3, r3
 80076a2:	68f9      	ldr	r1, [r7, #12]
 80076a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80076a8:	4013      	ands	r3, r2
 80076aa:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80076ac:	68bb      	ldr	r3, [r7, #8]
 80076ae:	015a      	lsls	r2, r3, #5
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	4413      	add	r3, r2
 80076b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076b8:	681a      	ldr	r2, [r3, #0]
 80076ba:	68bb      	ldr	r3, [r7, #8]
 80076bc:	0159      	lsls	r1, r3, #5
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	440b      	add	r3, r1
 80076c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076c6:	4619      	mov	r1, r3
 80076c8:	4b35      	ldr	r3, [pc, #212]	; (80077a0 <USB_DeactivateEndpoint+0x1b0>)
 80076ca:	4013      	ands	r3, r2
 80076cc:	600b      	str	r3, [r1, #0]
 80076ce:	e060      	b.n	8007792 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	015a      	lsls	r2, r3, #5
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	4413      	add	r3, r2
 80076d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80076e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80076e6:	d11f      	bne.n	8007728 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	015a      	lsls	r2, r3, #5
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	4413      	add	r3, r2
 80076f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	68ba      	ldr	r2, [r7, #8]
 80076f8:	0151      	lsls	r1, r2, #5
 80076fa:	68fa      	ldr	r2, [r7, #12]
 80076fc:	440a      	add	r2, r1
 80076fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007702:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007706:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	015a      	lsls	r2, r3, #5
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	4413      	add	r3, r2
 8007710:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	68ba      	ldr	r2, [r7, #8]
 8007718:	0151      	lsls	r1, r2, #5
 800771a:	68fa      	ldr	r2, [r7, #12]
 800771c:	440a      	add	r2, r1
 800771e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007722:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007726:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800772e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	781b      	ldrb	r3, [r3, #0]
 8007734:	f003 030f 	and.w	r3, r3, #15
 8007738:	2101      	movs	r1, #1
 800773a:	fa01 f303 	lsl.w	r3, r1, r3
 800773e:	041b      	lsls	r3, r3, #16
 8007740:	43db      	mvns	r3, r3
 8007742:	68f9      	ldr	r1, [r7, #12]
 8007744:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007748:	4013      	ands	r3, r2
 800774a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007752:	69da      	ldr	r2, [r3, #28]
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	781b      	ldrb	r3, [r3, #0]
 8007758:	f003 030f 	and.w	r3, r3, #15
 800775c:	2101      	movs	r1, #1
 800775e:	fa01 f303 	lsl.w	r3, r1, r3
 8007762:	041b      	lsls	r3, r3, #16
 8007764:	43db      	mvns	r3, r3
 8007766:	68f9      	ldr	r1, [r7, #12]
 8007768:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800776c:	4013      	ands	r3, r2
 800776e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007770:	68bb      	ldr	r3, [r7, #8]
 8007772:	015a      	lsls	r2, r3, #5
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	4413      	add	r3, r2
 8007778:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800777c:	681a      	ldr	r2, [r3, #0]
 800777e:	68bb      	ldr	r3, [r7, #8]
 8007780:	0159      	lsls	r1, r3, #5
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	440b      	add	r3, r1
 8007786:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800778a:	4619      	mov	r1, r3
 800778c:	4b05      	ldr	r3, [pc, #20]	; (80077a4 <USB_DeactivateEndpoint+0x1b4>)
 800778e:	4013      	ands	r3, r2
 8007790:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007792:	2300      	movs	r3, #0
}
 8007794:	4618      	mov	r0, r3
 8007796:	3714      	adds	r7, #20
 8007798:	46bd      	mov	sp, r7
 800779a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779e:	4770      	bx	lr
 80077a0:	ec337800 	.word	0xec337800
 80077a4:	eff37800 	.word	0xeff37800

080077a8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b08a      	sub	sp, #40	; 0x28
 80077ac:	af02      	add	r7, sp, #8
 80077ae:	60f8      	str	r0, [r7, #12]
 80077b0:	60b9      	str	r1, [r7, #8]
 80077b2:	4613      	mov	r3, r2
 80077b4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80077ba:	68bb      	ldr	r3, [r7, #8]
 80077bc:	781b      	ldrb	r3, [r3, #0]
 80077be:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	785b      	ldrb	r3, [r3, #1]
 80077c4:	2b01      	cmp	r3, #1
 80077c6:	f040 815c 	bne.w	8007a82 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80077ca:	68bb      	ldr	r3, [r7, #8]
 80077cc:	699b      	ldr	r3, [r3, #24]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d132      	bne.n	8007838 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80077d2:	69bb      	ldr	r3, [r7, #24]
 80077d4:	015a      	lsls	r2, r3, #5
 80077d6:	69fb      	ldr	r3, [r7, #28]
 80077d8:	4413      	add	r3, r2
 80077da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077de:	691b      	ldr	r3, [r3, #16]
 80077e0:	69ba      	ldr	r2, [r7, #24]
 80077e2:	0151      	lsls	r1, r2, #5
 80077e4:	69fa      	ldr	r2, [r7, #28]
 80077e6:	440a      	add	r2, r1
 80077e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077ec:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80077f0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80077f4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80077f6:	69bb      	ldr	r3, [r7, #24]
 80077f8:	015a      	lsls	r2, r3, #5
 80077fa:	69fb      	ldr	r3, [r7, #28]
 80077fc:	4413      	add	r3, r2
 80077fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007802:	691b      	ldr	r3, [r3, #16]
 8007804:	69ba      	ldr	r2, [r7, #24]
 8007806:	0151      	lsls	r1, r2, #5
 8007808:	69fa      	ldr	r2, [r7, #28]
 800780a:	440a      	add	r2, r1
 800780c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007810:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007814:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007816:	69bb      	ldr	r3, [r7, #24]
 8007818:	015a      	lsls	r2, r3, #5
 800781a:	69fb      	ldr	r3, [r7, #28]
 800781c:	4413      	add	r3, r2
 800781e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007822:	691b      	ldr	r3, [r3, #16]
 8007824:	69ba      	ldr	r2, [r7, #24]
 8007826:	0151      	lsls	r1, r2, #5
 8007828:	69fa      	ldr	r2, [r7, #28]
 800782a:	440a      	add	r2, r1
 800782c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007830:	0cdb      	lsrs	r3, r3, #19
 8007832:	04db      	lsls	r3, r3, #19
 8007834:	6113      	str	r3, [r2, #16]
 8007836:	e074      	b.n	8007922 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007838:	69bb      	ldr	r3, [r7, #24]
 800783a:	015a      	lsls	r2, r3, #5
 800783c:	69fb      	ldr	r3, [r7, #28]
 800783e:	4413      	add	r3, r2
 8007840:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007844:	691b      	ldr	r3, [r3, #16]
 8007846:	69ba      	ldr	r2, [r7, #24]
 8007848:	0151      	lsls	r1, r2, #5
 800784a:	69fa      	ldr	r2, [r7, #28]
 800784c:	440a      	add	r2, r1
 800784e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007852:	0cdb      	lsrs	r3, r3, #19
 8007854:	04db      	lsls	r3, r3, #19
 8007856:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007858:	69bb      	ldr	r3, [r7, #24]
 800785a:	015a      	lsls	r2, r3, #5
 800785c:	69fb      	ldr	r3, [r7, #28]
 800785e:	4413      	add	r3, r2
 8007860:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007864:	691b      	ldr	r3, [r3, #16]
 8007866:	69ba      	ldr	r2, [r7, #24]
 8007868:	0151      	lsls	r1, r2, #5
 800786a:	69fa      	ldr	r2, [r7, #28]
 800786c:	440a      	add	r2, r1
 800786e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007872:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007876:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800787a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800787c:	69bb      	ldr	r3, [r7, #24]
 800787e:	015a      	lsls	r2, r3, #5
 8007880:	69fb      	ldr	r3, [r7, #28]
 8007882:	4413      	add	r3, r2
 8007884:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007888:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800788a:	68bb      	ldr	r3, [r7, #8]
 800788c:	6999      	ldr	r1, [r3, #24]
 800788e:	68bb      	ldr	r3, [r7, #8]
 8007890:	68db      	ldr	r3, [r3, #12]
 8007892:	440b      	add	r3, r1
 8007894:	1e59      	subs	r1, r3, #1
 8007896:	68bb      	ldr	r3, [r7, #8]
 8007898:	68db      	ldr	r3, [r3, #12]
 800789a:	fbb1 f3f3 	udiv	r3, r1, r3
 800789e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80078a0:	4b9d      	ldr	r3, [pc, #628]	; (8007b18 <USB_EPStartXfer+0x370>)
 80078a2:	400b      	ands	r3, r1
 80078a4:	69b9      	ldr	r1, [r7, #24]
 80078a6:	0148      	lsls	r0, r1, #5
 80078a8:	69f9      	ldr	r1, [r7, #28]
 80078aa:	4401      	add	r1, r0
 80078ac:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80078b0:	4313      	orrs	r3, r2
 80078b2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80078b4:	69bb      	ldr	r3, [r7, #24]
 80078b6:	015a      	lsls	r2, r3, #5
 80078b8:	69fb      	ldr	r3, [r7, #28]
 80078ba:	4413      	add	r3, r2
 80078bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078c0:	691a      	ldr	r2, [r3, #16]
 80078c2:	68bb      	ldr	r3, [r7, #8]
 80078c4:	699b      	ldr	r3, [r3, #24]
 80078c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80078ca:	69b9      	ldr	r1, [r7, #24]
 80078cc:	0148      	lsls	r0, r1, #5
 80078ce:	69f9      	ldr	r1, [r7, #28]
 80078d0:	4401      	add	r1, r0
 80078d2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80078d6:	4313      	orrs	r3, r2
 80078d8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80078da:	68bb      	ldr	r3, [r7, #8]
 80078dc:	791b      	ldrb	r3, [r3, #4]
 80078de:	2b01      	cmp	r3, #1
 80078e0:	d11f      	bne.n	8007922 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80078e2:	69bb      	ldr	r3, [r7, #24]
 80078e4:	015a      	lsls	r2, r3, #5
 80078e6:	69fb      	ldr	r3, [r7, #28]
 80078e8:	4413      	add	r3, r2
 80078ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078ee:	691b      	ldr	r3, [r3, #16]
 80078f0:	69ba      	ldr	r2, [r7, #24]
 80078f2:	0151      	lsls	r1, r2, #5
 80078f4:	69fa      	ldr	r2, [r7, #28]
 80078f6:	440a      	add	r2, r1
 80078f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078fc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007900:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8007902:	69bb      	ldr	r3, [r7, #24]
 8007904:	015a      	lsls	r2, r3, #5
 8007906:	69fb      	ldr	r3, [r7, #28]
 8007908:	4413      	add	r3, r2
 800790a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800790e:	691b      	ldr	r3, [r3, #16]
 8007910:	69ba      	ldr	r2, [r7, #24]
 8007912:	0151      	lsls	r1, r2, #5
 8007914:	69fa      	ldr	r2, [r7, #28]
 8007916:	440a      	add	r2, r1
 8007918:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800791c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007920:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8007922:	79fb      	ldrb	r3, [r7, #7]
 8007924:	2b01      	cmp	r3, #1
 8007926:	d14b      	bne.n	80079c0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	695b      	ldr	r3, [r3, #20]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d009      	beq.n	8007944 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007930:	69bb      	ldr	r3, [r7, #24]
 8007932:	015a      	lsls	r2, r3, #5
 8007934:	69fb      	ldr	r3, [r7, #28]
 8007936:	4413      	add	r3, r2
 8007938:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800793c:	461a      	mov	r2, r3
 800793e:	68bb      	ldr	r3, [r7, #8]
 8007940:	695b      	ldr	r3, [r3, #20]
 8007942:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	791b      	ldrb	r3, [r3, #4]
 8007948:	2b01      	cmp	r3, #1
 800794a:	d128      	bne.n	800799e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800794c:	69fb      	ldr	r3, [r7, #28]
 800794e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007952:	689b      	ldr	r3, [r3, #8]
 8007954:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007958:	2b00      	cmp	r3, #0
 800795a:	d110      	bne.n	800797e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800795c:	69bb      	ldr	r3, [r7, #24]
 800795e:	015a      	lsls	r2, r3, #5
 8007960:	69fb      	ldr	r3, [r7, #28]
 8007962:	4413      	add	r3, r2
 8007964:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	69ba      	ldr	r2, [r7, #24]
 800796c:	0151      	lsls	r1, r2, #5
 800796e:	69fa      	ldr	r2, [r7, #28]
 8007970:	440a      	add	r2, r1
 8007972:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007976:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800797a:	6013      	str	r3, [r2, #0]
 800797c:	e00f      	b.n	800799e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800797e:	69bb      	ldr	r3, [r7, #24]
 8007980:	015a      	lsls	r2, r3, #5
 8007982:	69fb      	ldr	r3, [r7, #28]
 8007984:	4413      	add	r3, r2
 8007986:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	69ba      	ldr	r2, [r7, #24]
 800798e:	0151      	lsls	r1, r2, #5
 8007990:	69fa      	ldr	r2, [r7, #28]
 8007992:	440a      	add	r2, r1
 8007994:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007998:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800799c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800799e:	69bb      	ldr	r3, [r7, #24]
 80079a0:	015a      	lsls	r2, r3, #5
 80079a2:	69fb      	ldr	r3, [r7, #28]
 80079a4:	4413      	add	r3, r2
 80079a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	69ba      	ldr	r2, [r7, #24]
 80079ae:	0151      	lsls	r1, r2, #5
 80079b0:	69fa      	ldr	r2, [r7, #28]
 80079b2:	440a      	add	r2, r1
 80079b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079b8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80079bc:	6013      	str	r3, [r2, #0]
 80079be:	e133      	b.n	8007c28 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80079c0:	69bb      	ldr	r3, [r7, #24]
 80079c2:	015a      	lsls	r2, r3, #5
 80079c4:	69fb      	ldr	r3, [r7, #28]
 80079c6:	4413      	add	r3, r2
 80079c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	69ba      	ldr	r2, [r7, #24]
 80079d0:	0151      	lsls	r1, r2, #5
 80079d2:	69fa      	ldr	r2, [r7, #28]
 80079d4:	440a      	add	r2, r1
 80079d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079da:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80079de:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80079e0:	68bb      	ldr	r3, [r7, #8]
 80079e2:	791b      	ldrb	r3, [r3, #4]
 80079e4:	2b01      	cmp	r3, #1
 80079e6:	d015      	beq.n	8007a14 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80079e8:	68bb      	ldr	r3, [r7, #8]
 80079ea:	699b      	ldr	r3, [r3, #24]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	f000 811b 	beq.w	8007c28 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80079f2:	69fb      	ldr	r3, [r7, #28]
 80079f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80079fa:	68bb      	ldr	r3, [r7, #8]
 80079fc:	781b      	ldrb	r3, [r3, #0]
 80079fe:	f003 030f 	and.w	r3, r3, #15
 8007a02:	2101      	movs	r1, #1
 8007a04:	fa01 f303 	lsl.w	r3, r1, r3
 8007a08:	69f9      	ldr	r1, [r7, #28]
 8007a0a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007a0e:	4313      	orrs	r3, r2
 8007a10:	634b      	str	r3, [r1, #52]	; 0x34
 8007a12:	e109      	b.n	8007c28 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007a14:	69fb      	ldr	r3, [r7, #28]
 8007a16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a1a:	689b      	ldr	r3, [r3, #8]
 8007a1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d110      	bne.n	8007a46 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007a24:	69bb      	ldr	r3, [r7, #24]
 8007a26:	015a      	lsls	r2, r3, #5
 8007a28:	69fb      	ldr	r3, [r7, #28]
 8007a2a:	4413      	add	r3, r2
 8007a2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	69ba      	ldr	r2, [r7, #24]
 8007a34:	0151      	lsls	r1, r2, #5
 8007a36:	69fa      	ldr	r2, [r7, #28]
 8007a38:	440a      	add	r2, r1
 8007a3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a3e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007a42:	6013      	str	r3, [r2, #0]
 8007a44:	e00f      	b.n	8007a66 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007a46:	69bb      	ldr	r3, [r7, #24]
 8007a48:	015a      	lsls	r2, r3, #5
 8007a4a:	69fb      	ldr	r3, [r7, #28]
 8007a4c:	4413      	add	r3, r2
 8007a4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	69ba      	ldr	r2, [r7, #24]
 8007a56:	0151      	lsls	r1, r2, #5
 8007a58:	69fa      	ldr	r2, [r7, #28]
 8007a5a:	440a      	add	r2, r1
 8007a5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a64:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007a66:	68bb      	ldr	r3, [r7, #8]
 8007a68:	6919      	ldr	r1, [r3, #16]
 8007a6a:	68bb      	ldr	r3, [r7, #8]
 8007a6c:	781a      	ldrb	r2, [r3, #0]
 8007a6e:	68bb      	ldr	r3, [r7, #8]
 8007a70:	699b      	ldr	r3, [r3, #24]
 8007a72:	b298      	uxth	r0, r3
 8007a74:	79fb      	ldrb	r3, [r7, #7]
 8007a76:	9300      	str	r3, [sp, #0]
 8007a78:	4603      	mov	r3, r0
 8007a7a:	68f8      	ldr	r0, [r7, #12]
 8007a7c:	f000 fade 	bl	800803c <USB_WritePacket>
 8007a80:	e0d2      	b.n	8007c28 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007a82:	69bb      	ldr	r3, [r7, #24]
 8007a84:	015a      	lsls	r2, r3, #5
 8007a86:	69fb      	ldr	r3, [r7, #28]
 8007a88:	4413      	add	r3, r2
 8007a8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a8e:	691b      	ldr	r3, [r3, #16]
 8007a90:	69ba      	ldr	r2, [r7, #24]
 8007a92:	0151      	lsls	r1, r2, #5
 8007a94:	69fa      	ldr	r2, [r7, #28]
 8007a96:	440a      	add	r2, r1
 8007a98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a9c:	0cdb      	lsrs	r3, r3, #19
 8007a9e:	04db      	lsls	r3, r3, #19
 8007aa0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007aa2:	69bb      	ldr	r3, [r7, #24]
 8007aa4:	015a      	lsls	r2, r3, #5
 8007aa6:	69fb      	ldr	r3, [r7, #28]
 8007aa8:	4413      	add	r3, r2
 8007aaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007aae:	691b      	ldr	r3, [r3, #16]
 8007ab0:	69ba      	ldr	r2, [r7, #24]
 8007ab2:	0151      	lsls	r1, r2, #5
 8007ab4:	69fa      	ldr	r2, [r7, #28]
 8007ab6:	440a      	add	r2, r1
 8007ab8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007abc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007ac0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007ac4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8007ac6:	68bb      	ldr	r3, [r7, #8]
 8007ac8:	699b      	ldr	r3, [r3, #24]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d126      	bne.n	8007b1c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007ace:	69bb      	ldr	r3, [r7, #24]
 8007ad0:	015a      	lsls	r2, r3, #5
 8007ad2:	69fb      	ldr	r3, [r7, #28]
 8007ad4:	4413      	add	r3, r2
 8007ad6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ada:	691a      	ldr	r2, [r3, #16]
 8007adc:	68bb      	ldr	r3, [r7, #8]
 8007ade:	68db      	ldr	r3, [r3, #12]
 8007ae0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007ae4:	69b9      	ldr	r1, [r7, #24]
 8007ae6:	0148      	lsls	r0, r1, #5
 8007ae8:	69f9      	ldr	r1, [r7, #28]
 8007aea:	4401      	add	r1, r0
 8007aec:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007af0:	4313      	orrs	r3, r2
 8007af2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007af4:	69bb      	ldr	r3, [r7, #24]
 8007af6:	015a      	lsls	r2, r3, #5
 8007af8:	69fb      	ldr	r3, [r7, #28]
 8007afa:	4413      	add	r3, r2
 8007afc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b00:	691b      	ldr	r3, [r3, #16]
 8007b02:	69ba      	ldr	r2, [r7, #24]
 8007b04:	0151      	lsls	r1, r2, #5
 8007b06:	69fa      	ldr	r2, [r7, #28]
 8007b08:	440a      	add	r2, r1
 8007b0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b0e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007b12:	6113      	str	r3, [r2, #16]
 8007b14:	e03a      	b.n	8007b8c <USB_EPStartXfer+0x3e4>
 8007b16:	bf00      	nop
 8007b18:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007b1c:	68bb      	ldr	r3, [r7, #8]
 8007b1e:	699a      	ldr	r2, [r3, #24]
 8007b20:	68bb      	ldr	r3, [r7, #8]
 8007b22:	68db      	ldr	r3, [r3, #12]
 8007b24:	4413      	add	r3, r2
 8007b26:	1e5a      	subs	r2, r3, #1
 8007b28:	68bb      	ldr	r3, [r7, #8]
 8007b2a:	68db      	ldr	r3, [r3, #12]
 8007b2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b30:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8007b32:	68bb      	ldr	r3, [r7, #8]
 8007b34:	68db      	ldr	r3, [r3, #12]
 8007b36:	8afa      	ldrh	r2, [r7, #22]
 8007b38:	fb03 f202 	mul.w	r2, r3, r2
 8007b3c:	68bb      	ldr	r3, [r7, #8]
 8007b3e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007b40:	69bb      	ldr	r3, [r7, #24]
 8007b42:	015a      	lsls	r2, r3, #5
 8007b44:	69fb      	ldr	r3, [r7, #28]
 8007b46:	4413      	add	r3, r2
 8007b48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b4c:	691a      	ldr	r2, [r3, #16]
 8007b4e:	8afb      	ldrh	r3, [r7, #22]
 8007b50:	04d9      	lsls	r1, r3, #19
 8007b52:	4b38      	ldr	r3, [pc, #224]	; (8007c34 <USB_EPStartXfer+0x48c>)
 8007b54:	400b      	ands	r3, r1
 8007b56:	69b9      	ldr	r1, [r7, #24]
 8007b58:	0148      	lsls	r0, r1, #5
 8007b5a:	69f9      	ldr	r1, [r7, #28]
 8007b5c:	4401      	add	r1, r0
 8007b5e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007b62:	4313      	orrs	r3, r2
 8007b64:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007b66:	69bb      	ldr	r3, [r7, #24]
 8007b68:	015a      	lsls	r2, r3, #5
 8007b6a:	69fb      	ldr	r3, [r7, #28]
 8007b6c:	4413      	add	r3, r2
 8007b6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b72:	691a      	ldr	r2, [r3, #16]
 8007b74:	68bb      	ldr	r3, [r7, #8]
 8007b76:	69db      	ldr	r3, [r3, #28]
 8007b78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007b7c:	69b9      	ldr	r1, [r7, #24]
 8007b7e:	0148      	lsls	r0, r1, #5
 8007b80:	69f9      	ldr	r1, [r7, #28]
 8007b82:	4401      	add	r1, r0
 8007b84:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007b88:	4313      	orrs	r3, r2
 8007b8a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007b8c:	79fb      	ldrb	r3, [r7, #7]
 8007b8e:	2b01      	cmp	r3, #1
 8007b90:	d10d      	bne.n	8007bae <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007b92:	68bb      	ldr	r3, [r7, #8]
 8007b94:	691b      	ldr	r3, [r3, #16]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d009      	beq.n	8007bae <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007b9a:	68bb      	ldr	r3, [r7, #8]
 8007b9c:	6919      	ldr	r1, [r3, #16]
 8007b9e:	69bb      	ldr	r3, [r7, #24]
 8007ba0:	015a      	lsls	r2, r3, #5
 8007ba2:	69fb      	ldr	r3, [r7, #28]
 8007ba4:	4413      	add	r3, r2
 8007ba6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007baa:	460a      	mov	r2, r1
 8007bac:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007bae:	68bb      	ldr	r3, [r7, #8]
 8007bb0:	791b      	ldrb	r3, [r3, #4]
 8007bb2:	2b01      	cmp	r3, #1
 8007bb4:	d128      	bne.n	8007c08 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007bb6:	69fb      	ldr	r3, [r7, #28]
 8007bb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bbc:	689b      	ldr	r3, [r3, #8]
 8007bbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d110      	bne.n	8007be8 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007bc6:	69bb      	ldr	r3, [r7, #24]
 8007bc8:	015a      	lsls	r2, r3, #5
 8007bca:	69fb      	ldr	r3, [r7, #28]
 8007bcc:	4413      	add	r3, r2
 8007bce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	69ba      	ldr	r2, [r7, #24]
 8007bd6:	0151      	lsls	r1, r2, #5
 8007bd8:	69fa      	ldr	r2, [r7, #28]
 8007bda:	440a      	add	r2, r1
 8007bdc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007be0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007be4:	6013      	str	r3, [r2, #0]
 8007be6:	e00f      	b.n	8007c08 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007be8:	69bb      	ldr	r3, [r7, #24]
 8007bea:	015a      	lsls	r2, r3, #5
 8007bec:	69fb      	ldr	r3, [r7, #28]
 8007bee:	4413      	add	r3, r2
 8007bf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	69ba      	ldr	r2, [r7, #24]
 8007bf8:	0151      	lsls	r1, r2, #5
 8007bfa:	69fa      	ldr	r2, [r7, #28]
 8007bfc:	440a      	add	r2, r1
 8007bfe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c06:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007c08:	69bb      	ldr	r3, [r7, #24]
 8007c0a:	015a      	lsls	r2, r3, #5
 8007c0c:	69fb      	ldr	r3, [r7, #28]
 8007c0e:	4413      	add	r3, r2
 8007c10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	69ba      	ldr	r2, [r7, #24]
 8007c18:	0151      	lsls	r1, r2, #5
 8007c1a:	69fa      	ldr	r2, [r7, #28]
 8007c1c:	440a      	add	r2, r1
 8007c1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c22:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007c26:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007c28:	2300      	movs	r3, #0
}
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	3720      	adds	r7, #32
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bd80      	pop	{r7, pc}
 8007c32:	bf00      	nop
 8007c34:	1ff80000 	.word	0x1ff80000

08007c38 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007c38:	b480      	push	{r7}
 8007c3a:	b087      	sub	sp, #28
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	60f8      	str	r0, [r7, #12]
 8007c40:	60b9      	str	r1, [r7, #8]
 8007c42:	4613      	mov	r3, r2
 8007c44:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	781b      	ldrb	r3, [r3, #0]
 8007c4e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	785b      	ldrb	r3, [r3, #1]
 8007c54:	2b01      	cmp	r3, #1
 8007c56:	f040 80ce 	bne.w	8007df6 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007c5a:	68bb      	ldr	r3, [r7, #8]
 8007c5c:	699b      	ldr	r3, [r3, #24]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d132      	bne.n	8007cc8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007c62:	693b      	ldr	r3, [r7, #16]
 8007c64:	015a      	lsls	r2, r3, #5
 8007c66:	697b      	ldr	r3, [r7, #20]
 8007c68:	4413      	add	r3, r2
 8007c6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c6e:	691b      	ldr	r3, [r3, #16]
 8007c70:	693a      	ldr	r2, [r7, #16]
 8007c72:	0151      	lsls	r1, r2, #5
 8007c74:	697a      	ldr	r2, [r7, #20]
 8007c76:	440a      	add	r2, r1
 8007c78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c7c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007c80:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007c84:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007c86:	693b      	ldr	r3, [r7, #16]
 8007c88:	015a      	lsls	r2, r3, #5
 8007c8a:	697b      	ldr	r3, [r7, #20]
 8007c8c:	4413      	add	r3, r2
 8007c8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c92:	691b      	ldr	r3, [r3, #16]
 8007c94:	693a      	ldr	r2, [r7, #16]
 8007c96:	0151      	lsls	r1, r2, #5
 8007c98:	697a      	ldr	r2, [r7, #20]
 8007c9a:	440a      	add	r2, r1
 8007c9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ca0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007ca4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007ca6:	693b      	ldr	r3, [r7, #16]
 8007ca8:	015a      	lsls	r2, r3, #5
 8007caa:	697b      	ldr	r3, [r7, #20]
 8007cac:	4413      	add	r3, r2
 8007cae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cb2:	691b      	ldr	r3, [r3, #16]
 8007cb4:	693a      	ldr	r2, [r7, #16]
 8007cb6:	0151      	lsls	r1, r2, #5
 8007cb8:	697a      	ldr	r2, [r7, #20]
 8007cba:	440a      	add	r2, r1
 8007cbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007cc0:	0cdb      	lsrs	r3, r3, #19
 8007cc2:	04db      	lsls	r3, r3, #19
 8007cc4:	6113      	str	r3, [r2, #16]
 8007cc6:	e04e      	b.n	8007d66 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007cc8:	693b      	ldr	r3, [r7, #16]
 8007cca:	015a      	lsls	r2, r3, #5
 8007ccc:	697b      	ldr	r3, [r7, #20]
 8007cce:	4413      	add	r3, r2
 8007cd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cd4:	691b      	ldr	r3, [r3, #16]
 8007cd6:	693a      	ldr	r2, [r7, #16]
 8007cd8:	0151      	lsls	r1, r2, #5
 8007cda:	697a      	ldr	r2, [r7, #20]
 8007cdc:	440a      	add	r2, r1
 8007cde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ce2:	0cdb      	lsrs	r3, r3, #19
 8007ce4:	04db      	lsls	r3, r3, #19
 8007ce6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007ce8:	693b      	ldr	r3, [r7, #16]
 8007cea:	015a      	lsls	r2, r3, #5
 8007cec:	697b      	ldr	r3, [r7, #20]
 8007cee:	4413      	add	r3, r2
 8007cf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cf4:	691b      	ldr	r3, [r3, #16]
 8007cf6:	693a      	ldr	r2, [r7, #16]
 8007cf8:	0151      	lsls	r1, r2, #5
 8007cfa:	697a      	ldr	r2, [r7, #20]
 8007cfc:	440a      	add	r2, r1
 8007cfe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d02:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007d06:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007d0a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007d0c:	68bb      	ldr	r3, [r7, #8]
 8007d0e:	699a      	ldr	r2, [r3, #24]
 8007d10:	68bb      	ldr	r3, [r7, #8]
 8007d12:	68db      	ldr	r3, [r3, #12]
 8007d14:	429a      	cmp	r2, r3
 8007d16:	d903      	bls.n	8007d20 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007d18:	68bb      	ldr	r3, [r7, #8]
 8007d1a:	68da      	ldr	r2, [r3, #12]
 8007d1c:	68bb      	ldr	r3, [r7, #8]
 8007d1e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007d20:	693b      	ldr	r3, [r7, #16]
 8007d22:	015a      	lsls	r2, r3, #5
 8007d24:	697b      	ldr	r3, [r7, #20]
 8007d26:	4413      	add	r3, r2
 8007d28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d2c:	691b      	ldr	r3, [r3, #16]
 8007d2e:	693a      	ldr	r2, [r7, #16]
 8007d30:	0151      	lsls	r1, r2, #5
 8007d32:	697a      	ldr	r2, [r7, #20]
 8007d34:	440a      	add	r2, r1
 8007d36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d3a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007d3e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007d40:	693b      	ldr	r3, [r7, #16]
 8007d42:	015a      	lsls	r2, r3, #5
 8007d44:	697b      	ldr	r3, [r7, #20]
 8007d46:	4413      	add	r3, r2
 8007d48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d4c:	691a      	ldr	r2, [r3, #16]
 8007d4e:	68bb      	ldr	r3, [r7, #8]
 8007d50:	699b      	ldr	r3, [r3, #24]
 8007d52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007d56:	6939      	ldr	r1, [r7, #16]
 8007d58:	0148      	lsls	r0, r1, #5
 8007d5a:	6979      	ldr	r1, [r7, #20]
 8007d5c:	4401      	add	r1, r0
 8007d5e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007d62:	4313      	orrs	r3, r2
 8007d64:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007d66:	79fb      	ldrb	r3, [r7, #7]
 8007d68:	2b01      	cmp	r3, #1
 8007d6a:	d11e      	bne.n	8007daa <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007d6c:	68bb      	ldr	r3, [r7, #8]
 8007d6e:	695b      	ldr	r3, [r3, #20]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d009      	beq.n	8007d88 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007d74:	693b      	ldr	r3, [r7, #16]
 8007d76:	015a      	lsls	r2, r3, #5
 8007d78:	697b      	ldr	r3, [r7, #20]
 8007d7a:	4413      	add	r3, r2
 8007d7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d80:	461a      	mov	r2, r3
 8007d82:	68bb      	ldr	r3, [r7, #8]
 8007d84:	695b      	ldr	r3, [r3, #20]
 8007d86:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007d88:	693b      	ldr	r3, [r7, #16]
 8007d8a:	015a      	lsls	r2, r3, #5
 8007d8c:	697b      	ldr	r3, [r7, #20]
 8007d8e:	4413      	add	r3, r2
 8007d90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	693a      	ldr	r2, [r7, #16]
 8007d98:	0151      	lsls	r1, r2, #5
 8007d9a:	697a      	ldr	r2, [r7, #20]
 8007d9c:	440a      	add	r2, r1
 8007d9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007da2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007da6:	6013      	str	r3, [r2, #0]
 8007da8:	e097      	b.n	8007eda <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007daa:	693b      	ldr	r3, [r7, #16]
 8007dac:	015a      	lsls	r2, r3, #5
 8007dae:	697b      	ldr	r3, [r7, #20]
 8007db0:	4413      	add	r3, r2
 8007db2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	693a      	ldr	r2, [r7, #16]
 8007dba:	0151      	lsls	r1, r2, #5
 8007dbc:	697a      	ldr	r2, [r7, #20]
 8007dbe:	440a      	add	r2, r1
 8007dc0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007dc4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007dc8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8007dca:	68bb      	ldr	r3, [r7, #8]
 8007dcc:	699b      	ldr	r3, [r3, #24]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	f000 8083 	beq.w	8007eda <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007dd4:	697b      	ldr	r3, [r7, #20]
 8007dd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007ddc:	68bb      	ldr	r3, [r7, #8]
 8007dde:	781b      	ldrb	r3, [r3, #0]
 8007de0:	f003 030f 	and.w	r3, r3, #15
 8007de4:	2101      	movs	r1, #1
 8007de6:	fa01 f303 	lsl.w	r3, r1, r3
 8007dea:	6979      	ldr	r1, [r7, #20]
 8007dec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007df0:	4313      	orrs	r3, r2
 8007df2:	634b      	str	r3, [r1, #52]	; 0x34
 8007df4:	e071      	b.n	8007eda <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007df6:	693b      	ldr	r3, [r7, #16]
 8007df8:	015a      	lsls	r2, r3, #5
 8007dfa:	697b      	ldr	r3, [r7, #20]
 8007dfc:	4413      	add	r3, r2
 8007dfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e02:	691b      	ldr	r3, [r3, #16]
 8007e04:	693a      	ldr	r2, [r7, #16]
 8007e06:	0151      	lsls	r1, r2, #5
 8007e08:	697a      	ldr	r2, [r7, #20]
 8007e0a:	440a      	add	r2, r1
 8007e0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e10:	0cdb      	lsrs	r3, r3, #19
 8007e12:	04db      	lsls	r3, r3, #19
 8007e14:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007e16:	693b      	ldr	r3, [r7, #16]
 8007e18:	015a      	lsls	r2, r3, #5
 8007e1a:	697b      	ldr	r3, [r7, #20]
 8007e1c:	4413      	add	r3, r2
 8007e1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e22:	691b      	ldr	r3, [r3, #16]
 8007e24:	693a      	ldr	r2, [r7, #16]
 8007e26:	0151      	lsls	r1, r2, #5
 8007e28:	697a      	ldr	r2, [r7, #20]
 8007e2a:	440a      	add	r2, r1
 8007e2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e30:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007e34:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007e38:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8007e3a:	68bb      	ldr	r3, [r7, #8]
 8007e3c:	699b      	ldr	r3, [r3, #24]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d003      	beq.n	8007e4a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8007e42:	68bb      	ldr	r3, [r7, #8]
 8007e44:	68da      	ldr	r2, [r3, #12]
 8007e46:	68bb      	ldr	r3, [r7, #8]
 8007e48:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8007e4a:	68bb      	ldr	r3, [r7, #8]
 8007e4c:	68da      	ldr	r2, [r3, #12]
 8007e4e:	68bb      	ldr	r3, [r7, #8]
 8007e50:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007e52:	693b      	ldr	r3, [r7, #16]
 8007e54:	015a      	lsls	r2, r3, #5
 8007e56:	697b      	ldr	r3, [r7, #20]
 8007e58:	4413      	add	r3, r2
 8007e5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e5e:	691b      	ldr	r3, [r3, #16]
 8007e60:	693a      	ldr	r2, [r7, #16]
 8007e62:	0151      	lsls	r1, r2, #5
 8007e64:	697a      	ldr	r2, [r7, #20]
 8007e66:	440a      	add	r2, r1
 8007e68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e6c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007e70:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007e72:	693b      	ldr	r3, [r7, #16]
 8007e74:	015a      	lsls	r2, r3, #5
 8007e76:	697b      	ldr	r3, [r7, #20]
 8007e78:	4413      	add	r3, r2
 8007e7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e7e:	691a      	ldr	r2, [r3, #16]
 8007e80:	68bb      	ldr	r3, [r7, #8]
 8007e82:	69db      	ldr	r3, [r3, #28]
 8007e84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007e88:	6939      	ldr	r1, [r7, #16]
 8007e8a:	0148      	lsls	r0, r1, #5
 8007e8c:	6979      	ldr	r1, [r7, #20]
 8007e8e:	4401      	add	r1, r0
 8007e90:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007e94:	4313      	orrs	r3, r2
 8007e96:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8007e98:	79fb      	ldrb	r3, [r7, #7]
 8007e9a:	2b01      	cmp	r3, #1
 8007e9c:	d10d      	bne.n	8007eba <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007e9e:	68bb      	ldr	r3, [r7, #8]
 8007ea0:	691b      	ldr	r3, [r3, #16]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d009      	beq.n	8007eba <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007ea6:	68bb      	ldr	r3, [r7, #8]
 8007ea8:	6919      	ldr	r1, [r3, #16]
 8007eaa:	693b      	ldr	r3, [r7, #16]
 8007eac:	015a      	lsls	r2, r3, #5
 8007eae:	697b      	ldr	r3, [r7, #20]
 8007eb0:	4413      	add	r3, r2
 8007eb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007eb6:	460a      	mov	r2, r1
 8007eb8:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007eba:	693b      	ldr	r3, [r7, #16]
 8007ebc:	015a      	lsls	r2, r3, #5
 8007ebe:	697b      	ldr	r3, [r7, #20]
 8007ec0:	4413      	add	r3, r2
 8007ec2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	693a      	ldr	r2, [r7, #16]
 8007eca:	0151      	lsls	r1, r2, #5
 8007ecc:	697a      	ldr	r2, [r7, #20]
 8007ece:	440a      	add	r2, r1
 8007ed0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ed4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007ed8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007eda:	2300      	movs	r3, #0
}
 8007edc:	4618      	mov	r0, r3
 8007ede:	371c      	adds	r7, #28
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee6:	4770      	bx	lr

08007ee8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007ee8:	b480      	push	{r7}
 8007eea:	b087      	sub	sp, #28
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
 8007ef0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	785b      	ldrb	r3, [r3, #1]
 8007f02:	2b01      	cmp	r3, #1
 8007f04:	d14a      	bne.n	8007f9c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	781b      	ldrb	r3, [r3, #0]
 8007f0a:	015a      	lsls	r2, r3, #5
 8007f0c:	693b      	ldr	r3, [r7, #16]
 8007f0e:	4413      	add	r3, r2
 8007f10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007f1a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007f1e:	f040 8086 	bne.w	800802e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	781b      	ldrb	r3, [r3, #0]
 8007f26:	015a      	lsls	r2, r3, #5
 8007f28:	693b      	ldr	r3, [r7, #16]
 8007f2a:	4413      	add	r3, r2
 8007f2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	683a      	ldr	r2, [r7, #0]
 8007f34:	7812      	ldrb	r2, [r2, #0]
 8007f36:	0151      	lsls	r1, r2, #5
 8007f38:	693a      	ldr	r2, [r7, #16]
 8007f3a:	440a      	add	r2, r1
 8007f3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f40:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007f44:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	781b      	ldrb	r3, [r3, #0]
 8007f4a:	015a      	lsls	r2, r3, #5
 8007f4c:	693b      	ldr	r3, [r7, #16]
 8007f4e:	4413      	add	r3, r2
 8007f50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	683a      	ldr	r2, [r7, #0]
 8007f58:	7812      	ldrb	r2, [r2, #0]
 8007f5a:	0151      	lsls	r1, r2, #5
 8007f5c:	693a      	ldr	r2, [r7, #16]
 8007f5e:	440a      	add	r2, r1
 8007f60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f64:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007f68:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	3301      	adds	r3, #1
 8007f6e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	f242 7210 	movw	r2, #10000	; 0x2710
 8007f76:	4293      	cmp	r3, r2
 8007f78:	d902      	bls.n	8007f80 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007f7a:	2301      	movs	r3, #1
 8007f7c:	75fb      	strb	r3, [r7, #23]
          break;
 8007f7e:	e056      	b.n	800802e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	781b      	ldrb	r3, [r3, #0]
 8007f84:	015a      	lsls	r2, r3, #5
 8007f86:	693b      	ldr	r3, [r7, #16]
 8007f88:	4413      	add	r3, r2
 8007f8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007f94:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007f98:	d0e7      	beq.n	8007f6a <USB_EPStopXfer+0x82>
 8007f9a:	e048      	b.n	800802e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	781b      	ldrb	r3, [r3, #0]
 8007fa0:	015a      	lsls	r2, r3, #5
 8007fa2:	693b      	ldr	r3, [r7, #16]
 8007fa4:	4413      	add	r3, r2
 8007fa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007fb0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007fb4:	d13b      	bne.n	800802e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	781b      	ldrb	r3, [r3, #0]
 8007fba:	015a      	lsls	r2, r3, #5
 8007fbc:	693b      	ldr	r3, [r7, #16]
 8007fbe:	4413      	add	r3, r2
 8007fc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	683a      	ldr	r2, [r7, #0]
 8007fc8:	7812      	ldrb	r2, [r2, #0]
 8007fca:	0151      	lsls	r1, r2, #5
 8007fcc:	693a      	ldr	r2, [r7, #16]
 8007fce:	440a      	add	r2, r1
 8007fd0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007fd4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007fd8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	781b      	ldrb	r3, [r3, #0]
 8007fde:	015a      	lsls	r2, r3, #5
 8007fe0:	693b      	ldr	r3, [r7, #16]
 8007fe2:	4413      	add	r3, r2
 8007fe4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	683a      	ldr	r2, [r7, #0]
 8007fec:	7812      	ldrb	r2, [r2, #0]
 8007fee:	0151      	lsls	r1, r2, #5
 8007ff0:	693a      	ldr	r2, [r7, #16]
 8007ff2:	440a      	add	r2, r1
 8007ff4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ff8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007ffc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	3301      	adds	r3, #1
 8008002:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	f242 7210 	movw	r2, #10000	; 0x2710
 800800a:	4293      	cmp	r3, r2
 800800c:	d902      	bls.n	8008014 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800800e:	2301      	movs	r3, #1
 8008010:	75fb      	strb	r3, [r7, #23]
          break;
 8008012:	e00c      	b.n	800802e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	781b      	ldrb	r3, [r3, #0]
 8008018:	015a      	lsls	r2, r3, #5
 800801a:	693b      	ldr	r3, [r7, #16]
 800801c:	4413      	add	r3, r2
 800801e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008028:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800802c:	d0e7      	beq.n	8007ffe <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800802e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008030:	4618      	mov	r0, r3
 8008032:	371c      	adds	r7, #28
 8008034:	46bd      	mov	sp, r7
 8008036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803a:	4770      	bx	lr

0800803c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800803c:	b480      	push	{r7}
 800803e:	b089      	sub	sp, #36	; 0x24
 8008040:	af00      	add	r7, sp, #0
 8008042:	60f8      	str	r0, [r7, #12]
 8008044:	60b9      	str	r1, [r7, #8]
 8008046:	4611      	mov	r1, r2
 8008048:	461a      	mov	r2, r3
 800804a:	460b      	mov	r3, r1
 800804c:	71fb      	strb	r3, [r7, #7]
 800804e:	4613      	mov	r3, r2
 8008050:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008056:	68bb      	ldr	r3, [r7, #8]
 8008058:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800805a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800805e:	2b00      	cmp	r3, #0
 8008060:	d123      	bne.n	80080aa <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008062:	88bb      	ldrh	r3, [r7, #4]
 8008064:	3303      	adds	r3, #3
 8008066:	089b      	lsrs	r3, r3, #2
 8008068:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800806a:	2300      	movs	r3, #0
 800806c:	61bb      	str	r3, [r7, #24]
 800806e:	e018      	b.n	80080a2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008070:	79fb      	ldrb	r3, [r7, #7]
 8008072:	031a      	lsls	r2, r3, #12
 8008074:	697b      	ldr	r3, [r7, #20]
 8008076:	4413      	add	r3, r2
 8008078:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800807c:	461a      	mov	r2, r3
 800807e:	69fb      	ldr	r3, [r7, #28]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008084:	69fb      	ldr	r3, [r7, #28]
 8008086:	3301      	adds	r3, #1
 8008088:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800808a:	69fb      	ldr	r3, [r7, #28]
 800808c:	3301      	adds	r3, #1
 800808e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008090:	69fb      	ldr	r3, [r7, #28]
 8008092:	3301      	adds	r3, #1
 8008094:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008096:	69fb      	ldr	r3, [r7, #28]
 8008098:	3301      	adds	r3, #1
 800809a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800809c:	69bb      	ldr	r3, [r7, #24]
 800809e:	3301      	adds	r3, #1
 80080a0:	61bb      	str	r3, [r7, #24]
 80080a2:	69ba      	ldr	r2, [r7, #24]
 80080a4:	693b      	ldr	r3, [r7, #16]
 80080a6:	429a      	cmp	r2, r3
 80080a8:	d3e2      	bcc.n	8008070 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80080aa:	2300      	movs	r3, #0
}
 80080ac:	4618      	mov	r0, r3
 80080ae:	3724      	adds	r7, #36	; 0x24
 80080b0:	46bd      	mov	sp, r7
 80080b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b6:	4770      	bx	lr

080080b8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80080b8:	b480      	push	{r7}
 80080ba:	b08b      	sub	sp, #44	; 0x2c
 80080bc:	af00      	add	r7, sp, #0
 80080be:	60f8      	str	r0, [r7, #12]
 80080c0:	60b9      	str	r1, [r7, #8]
 80080c2:	4613      	mov	r3, r2
 80080c4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80080ca:	68bb      	ldr	r3, [r7, #8]
 80080cc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80080ce:	88fb      	ldrh	r3, [r7, #6]
 80080d0:	089b      	lsrs	r3, r3, #2
 80080d2:	b29b      	uxth	r3, r3
 80080d4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80080d6:	88fb      	ldrh	r3, [r7, #6]
 80080d8:	f003 0303 	and.w	r3, r3, #3
 80080dc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80080de:	2300      	movs	r3, #0
 80080e0:	623b      	str	r3, [r7, #32]
 80080e2:	e014      	b.n	800810e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80080e4:	69bb      	ldr	r3, [r7, #24]
 80080e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080ea:	681a      	ldr	r2, [r3, #0]
 80080ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ee:	601a      	str	r2, [r3, #0]
    pDest++;
 80080f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080f2:	3301      	adds	r3, #1
 80080f4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80080f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080f8:	3301      	adds	r3, #1
 80080fa:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80080fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080fe:	3301      	adds	r3, #1
 8008100:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008104:	3301      	adds	r3, #1
 8008106:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008108:	6a3b      	ldr	r3, [r7, #32]
 800810a:	3301      	adds	r3, #1
 800810c:	623b      	str	r3, [r7, #32]
 800810e:	6a3a      	ldr	r2, [r7, #32]
 8008110:	697b      	ldr	r3, [r7, #20]
 8008112:	429a      	cmp	r2, r3
 8008114:	d3e6      	bcc.n	80080e4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008116:	8bfb      	ldrh	r3, [r7, #30]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d01e      	beq.n	800815a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800811c:	2300      	movs	r3, #0
 800811e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008120:	69bb      	ldr	r3, [r7, #24]
 8008122:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008126:	461a      	mov	r2, r3
 8008128:	f107 0310 	add.w	r3, r7, #16
 800812c:	6812      	ldr	r2, [r2, #0]
 800812e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008130:	693a      	ldr	r2, [r7, #16]
 8008132:	6a3b      	ldr	r3, [r7, #32]
 8008134:	b2db      	uxtb	r3, r3
 8008136:	00db      	lsls	r3, r3, #3
 8008138:	fa22 f303 	lsr.w	r3, r2, r3
 800813c:	b2da      	uxtb	r2, r3
 800813e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008140:	701a      	strb	r2, [r3, #0]
      i++;
 8008142:	6a3b      	ldr	r3, [r7, #32]
 8008144:	3301      	adds	r3, #1
 8008146:	623b      	str	r3, [r7, #32]
      pDest++;
 8008148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800814a:	3301      	adds	r3, #1
 800814c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800814e:	8bfb      	ldrh	r3, [r7, #30]
 8008150:	3b01      	subs	r3, #1
 8008152:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008154:	8bfb      	ldrh	r3, [r7, #30]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d1ea      	bne.n	8008130 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800815a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800815c:	4618      	mov	r0, r3
 800815e:	372c      	adds	r7, #44	; 0x2c
 8008160:	46bd      	mov	sp, r7
 8008162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008166:	4770      	bx	lr

08008168 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008168:	b480      	push	{r7}
 800816a:	b085      	sub	sp, #20
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
 8008170:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	781b      	ldrb	r3, [r3, #0]
 800817a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	785b      	ldrb	r3, [r3, #1]
 8008180:	2b01      	cmp	r3, #1
 8008182:	d12c      	bne.n	80081de <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008184:	68bb      	ldr	r3, [r7, #8]
 8008186:	015a      	lsls	r2, r3, #5
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	4413      	add	r3, r2
 800818c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	2b00      	cmp	r3, #0
 8008194:	db12      	blt.n	80081bc <USB_EPSetStall+0x54>
 8008196:	68bb      	ldr	r3, [r7, #8]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d00f      	beq.n	80081bc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800819c:	68bb      	ldr	r3, [r7, #8]
 800819e:	015a      	lsls	r2, r3, #5
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	4413      	add	r3, r2
 80081a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	68ba      	ldr	r2, [r7, #8]
 80081ac:	0151      	lsls	r1, r2, #5
 80081ae:	68fa      	ldr	r2, [r7, #12]
 80081b0:	440a      	add	r2, r1
 80081b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80081b6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80081ba:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80081bc:	68bb      	ldr	r3, [r7, #8]
 80081be:	015a      	lsls	r2, r3, #5
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	4413      	add	r3, r2
 80081c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	68ba      	ldr	r2, [r7, #8]
 80081cc:	0151      	lsls	r1, r2, #5
 80081ce:	68fa      	ldr	r2, [r7, #12]
 80081d0:	440a      	add	r2, r1
 80081d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80081d6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80081da:	6013      	str	r3, [r2, #0]
 80081dc:	e02b      	b.n	8008236 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80081de:	68bb      	ldr	r3, [r7, #8]
 80081e0:	015a      	lsls	r2, r3, #5
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	4413      	add	r3, r2
 80081e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	db12      	blt.n	8008216 <USB_EPSetStall+0xae>
 80081f0:	68bb      	ldr	r3, [r7, #8]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d00f      	beq.n	8008216 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80081f6:	68bb      	ldr	r3, [r7, #8]
 80081f8:	015a      	lsls	r2, r3, #5
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	4413      	add	r3, r2
 80081fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	68ba      	ldr	r2, [r7, #8]
 8008206:	0151      	lsls	r1, r2, #5
 8008208:	68fa      	ldr	r2, [r7, #12]
 800820a:	440a      	add	r2, r1
 800820c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008210:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008214:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008216:	68bb      	ldr	r3, [r7, #8]
 8008218:	015a      	lsls	r2, r3, #5
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	4413      	add	r3, r2
 800821e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	68ba      	ldr	r2, [r7, #8]
 8008226:	0151      	lsls	r1, r2, #5
 8008228:	68fa      	ldr	r2, [r7, #12]
 800822a:	440a      	add	r2, r1
 800822c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008230:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008234:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008236:	2300      	movs	r3, #0
}
 8008238:	4618      	mov	r0, r3
 800823a:	3714      	adds	r7, #20
 800823c:	46bd      	mov	sp, r7
 800823e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008242:	4770      	bx	lr

08008244 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008244:	b480      	push	{r7}
 8008246:	b085      	sub	sp, #20
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
 800824c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	781b      	ldrb	r3, [r3, #0]
 8008256:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	785b      	ldrb	r3, [r3, #1]
 800825c:	2b01      	cmp	r3, #1
 800825e:	d128      	bne.n	80082b2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008260:	68bb      	ldr	r3, [r7, #8]
 8008262:	015a      	lsls	r2, r3, #5
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	4413      	add	r3, r2
 8008268:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	68ba      	ldr	r2, [r7, #8]
 8008270:	0151      	lsls	r1, r2, #5
 8008272:	68fa      	ldr	r2, [r7, #12]
 8008274:	440a      	add	r2, r1
 8008276:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800827a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800827e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	791b      	ldrb	r3, [r3, #4]
 8008284:	2b03      	cmp	r3, #3
 8008286:	d003      	beq.n	8008290 <USB_EPClearStall+0x4c>
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	791b      	ldrb	r3, [r3, #4]
 800828c:	2b02      	cmp	r3, #2
 800828e:	d138      	bne.n	8008302 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008290:	68bb      	ldr	r3, [r7, #8]
 8008292:	015a      	lsls	r2, r3, #5
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	4413      	add	r3, r2
 8008298:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	68ba      	ldr	r2, [r7, #8]
 80082a0:	0151      	lsls	r1, r2, #5
 80082a2:	68fa      	ldr	r2, [r7, #12]
 80082a4:	440a      	add	r2, r1
 80082a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80082aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80082ae:	6013      	str	r3, [r2, #0]
 80082b0:	e027      	b.n	8008302 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80082b2:	68bb      	ldr	r3, [r7, #8]
 80082b4:	015a      	lsls	r2, r3, #5
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	4413      	add	r3, r2
 80082ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	68ba      	ldr	r2, [r7, #8]
 80082c2:	0151      	lsls	r1, r2, #5
 80082c4:	68fa      	ldr	r2, [r7, #12]
 80082c6:	440a      	add	r2, r1
 80082c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80082cc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80082d0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	791b      	ldrb	r3, [r3, #4]
 80082d6:	2b03      	cmp	r3, #3
 80082d8:	d003      	beq.n	80082e2 <USB_EPClearStall+0x9e>
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	791b      	ldrb	r3, [r3, #4]
 80082de:	2b02      	cmp	r3, #2
 80082e0:	d10f      	bne.n	8008302 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80082e2:	68bb      	ldr	r3, [r7, #8]
 80082e4:	015a      	lsls	r2, r3, #5
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	4413      	add	r3, r2
 80082ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	68ba      	ldr	r2, [r7, #8]
 80082f2:	0151      	lsls	r1, r2, #5
 80082f4:	68fa      	ldr	r2, [r7, #12]
 80082f6:	440a      	add	r2, r1
 80082f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80082fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008300:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008302:	2300      	movs	r3, #0
}
 8008304:	4618      	mov	r0, r3
 8008306:	3714      	adds	r7, #20
 8008308:	46bd      	mov	sp, r7
 800830a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830e:	4770      	bx	lr

08008310 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008310:	b480      	push	{r7}
 8008312:	b085      	sub	sp, #20
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
 8008318:	460b      	mov	r3, r1
 800831a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	68fa      	ldr	r2, [r7, #12]
 800832a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800832e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008332:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800833a:	681a      	ldr	r2, [r3, #0]
 800833c:	78fb      	ldrb	r3, [r7, #3]
 800833e:	011b      	lsls	r3, r3, #4
 8008340:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8008344:	68f9      	ldr	r1, [r7, #12]
 8008346:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800834a:	4313      	orrs	r3, r2
 800834c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800834e:	2300      	movs	r3, #0
}
 8008350:	4618      	mov	r0, r3
 8008352:	3714      	adds	r7, #20
 8008354:	46bd      	mov	sp, r7
 8008356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835a:	4770      	bx	lr

0800835c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800835c:	b480      	push	{r7}
 800835e:	b085      	sub	sp, #20
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	68fa      	ldr	r2, [r7, #12]
 8008372:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008376:	f023 0303 	bic.w	r3, r3, #3
 800837a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008382:	685b      	ldr	r3, [r3, #4]
 8008384:	68fa      	ldr	r2, [r7, #12]
 8008386:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800838a:	f023 0302 	bic.w	r3, r3, #2
 800838e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008390:	2300      	movs	r3, #0
}
 8008392:	4618      	mov	r0, r3
 8008394:	3714      	adds	r7, #20
 8008396:	46bd      	mov	sp, r7
 8008398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839c:	4770      	bx	lr

0800839e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800839e:	b480      	push	{r7}
 80083a0:	b085      	sub	sp, #20
 80083a2:	af00      	add	r7, sp, #0
 80083a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	68fa      	ldr	r2, [r7, #12]
 80083b4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80083b8:	f023 0303 	bic.w	r3, r3, #3
 80083bc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083c4:	685b      	ldr	r3, [r3, #4]
 80083c6:	68fa      	ldr	r2, [r7, #12]
 80083c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80083cc:	f043 0302 	orr.w	r3, r3, #2
 80083d0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80083d2:	2300      	movs	r3, #0
}
 80083d4:	4618      	mov	r0, r3
 80083d6:	3714      	adds	r7, #20
 80083d8:	46bd      	mov	sp, r7
 80083da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083de:	4770      	bx	lr

080083e0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80083e0:	b480      	push	{r7}
 80083e2:	b085      	sub	sp, #20
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	695b      	ldr	r3, [r3, #20]
 80083ec:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	699b      	ldr	r3, [r3, #24]
 80083f2:	68fa      	ldr	r2, [r7, #12]
 80083f4:	4013      	ands	r3, r2
 80083f6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80083f8:	68fb      	ldr	r3, [r7, #12]
}
 80083fa:	4618      	mov	r0, r3
 80083fc:	3714      	adds	r7, #20
 80083fe:	46bd      	mov	sp, r7
 8008400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008404:	4770      	bx	lr

08008406 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008406:	b480      	push	{r7}
 8008408:	b085      	sub	sp, #20
 800840a:	af00      	add	r7, sp, #0
 800840c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008418:	699b      	ldr	r3, [r3, #24]
 800841a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008422:	69db      	ldr	r3, [r3, #28]
 8008424:	68ba      	ldr	r2, [r7, #8]
 8008426:	4013      	ands	r3, r2
 8008428:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800842a:	68bb      	ldr	r3, [r7, #8]
 800842c:	0c1b      	lsrs	r3, r3, #16
}
 800842e:	4618      	mov	r0, r3
 8008430:	3714      	adds	r7, #20
 8008432:	46bd      	mov	sp, r7
 8008434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008438:	4770      	bx	lr

0800843a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800843a:	b480      	push	{r7}
 800843c:	b085      	sub	sp, #20
 800843e:	af00      	add	r7, sp, #0
 8008440:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800844c:	699b      	ldr	r3, [r3, #24]
 800844e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008456:	69db      	ldr	r3, [r3, #28]
 8008458:	68ba      	ldr	r2, [r7, #8]
 800845a:	4013      	ands	r3, r2
 800845c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800845e:	68bb      	ldr	r3, [r7, #8]
 8008460:	b29b      	uxth	r3, r3
}
 8008462:	4618      	mov	r0, r3
 8008464:	3714      	adds	r7, #20
 8008466:	46bd      	mov	sp, r7
 8008468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846c:	4770      	bx	lr

0800846e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800846e:	b480      	push	{r7}
 8008470:	b085      	sub	sp, #20
 8008472:	af00      	add	r7, sp, #0
 8008474:	6078      	str	r0, [r7, #4]
 8008476:	460b      	mov	r3, r1
 8008478:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800847e:	78fb      	ldrb	r3, [r7, #3]
 8008480:	015a      	lsls	r2, r3, #5
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	4413      	add	r3, r2
 8008486:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800848a:	689b      	ldr	r3, [r3, #8]
 800848c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008494:	695b      	ldr	r3, [r3, #20]
 8008496:	68ba      	ldr	r2, [r7, #8]
 8008498:	4013      	ands	r3, r2
 800849a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800849c:	68bb      	ldr	r3, [r7, #8]
}
 800849e:	4618      	mov	r0, r3
 80084a0:	3714      	adds	r7, #20
 80084a2:	46bd      	mov	sp, r7
 80084a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a8:	4770      	bx	lr

080084aa <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80084aa:	b480      	push	{r7}
 80084ac:	b087      	sub	sp, #28
 80084ae:	af00      	add	r7, sp, #0
 80084b0:	6078      	str	r0, [r7, #4]
 80084b2:	460b      	mov	r3, r1
 80084b4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80084ba:	697b      	ldr	r3, [r7, #20]
 80084bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084c0:	691b      	ldr	r3, [r3, #16]
 80084c2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80084c4:	697b      	ldr	r3, [r7, #20]
 80084c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084cc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80084ce:	78fb      	ldrb	r3, [r7, #3]
 80084d0:	f003 030f 	and.w	r3, r3, #15
 80084d4:	68fa      	ldr	r2, [r7, #12]
 80084d6:	fa22 f303 	lsr.w	r3, r2, r3
 80084da:	01db      	lsls	r3, r3, #7
 80084dc:	b2db      	uxtb	r3, r3
 80084de:	693a      	ldr	r2, [r7, #16]
 80084e0:	4313      	orrs	r3, r2
 80084e2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80084e4:	78fb      	ldrb	r3, [r7, #3]
 80084e6:	015a      	lsls	r2, r3, #5
 80084e8:	697b      	ldr	r3, [r7, #20]
 80084ea:	4413      	add	r3, r2
 80084ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084f0:	689b      	ldr	r3, [r3, #8]
 80084f2:	693a      	ldr	r2, [r7, #16]
 80084f4:	4013      	ands	r3, r2
 80084f6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80084f8:	68bb      	ldr	r3, [r7, #8]
}
 80084fa:	4618      	mov	r0, r3
 80084fc:	371c      	adds	r7, #28
 80084fe:	46bd      	mov	sp, r7
 8008500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008504:	4770      	bx	lr

08008506 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008506:	b480      	push	{r7}
 8008508:	b083      	sub	sp, #12
 800850a:	af00      	add	r7, sp, #0
 800850c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	695b      	ldr	r3, [r3, #20]
 8008512:	f003 0301 	and.w	r3, r3, #1
}
 8008516:	4618      	mov	r0, r3
 8008518:	370c      	adds	r7, #12
 800851a:	46bd      	mov	sp, r7
 800851c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008520:	4770      	bx	lr

08008522 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8008522:	b480      	push	{r7}
 8008524:	b085      	sub	sp, #20
 8008526:	af00      	add	r7, sp, #0
 8008528:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	68fa      	ldr	r2, [r7, #12]
 8008538:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800853c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008540:	f023 0307 	bic.w	r3, r3, #7
 8008544:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800854c:	685b      	ldr	r3, [r3, #4]
 800854e:	68fa      	ldr	r2, [r7, #12]
 8008550:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008554:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008558:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800855a:	2300      	movs	r3, #0
}
 800855c:	4618      	mov	r0, r3
 800855e:	3714      	adds	r7, #20
 8008560:	46bd      	mov	sp, r7
 8008562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008566:	4770      	bx	lr

08008568 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8008568:	b480      	push	{r7}
 800856a:	b087      	sub	sp, #28
 800856c:	af00      	add	r7, sp, #0
 800856e:	60f8      	str	r0, [r7, #12]
 8008570:	460b      	mov	r3, r1
 8008572:	607a      	str	r2, [r7, #4]
 8008574:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	333c      	adds	r3, #60	; 0x3c
 800857e:	3304      	adds	r3, #4
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008584:	693b      	ldr	r3, [r7, #16]
 8008586:	4a26      	ldr	r2, [pc, #152]	; (8008620 <USB_EP0_OutStart+0xb8>)
 8008588:	4293      	cmp	r3, r2
 800858a:	d90a      	bls.n	80085a2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800858c:	697b      	ldr	r3, [r7, #20]
 800858e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008598:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800859c:	d101      	bne.n	80085a2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800859e:	2300      	movs	r3, #0
 80085a0:	e037      	b.n	8008612 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80085a2:	697b      	ldr	r3, [r7, #20]
 80085a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085a8:	461a      	mov	r2, r3
 80085aa:	2300      	movs	r3, #0
 80085ac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80085ae:	697b      	ldr	r3, [r7, #20]
 80085b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085b4:	691b      	ldr	r3, [r3, #16]
 80085b6:	697a      	ldr	r2, [r7, #20]
 80085b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80085bc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80085c0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80085c2:	697b      	ldr	r3, [r7, #20]
 80085c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085c8:	691b      	ldr	r3, [r3, #16]
 80085ca:	697a      	ldr	r2, [r7, #20]
 80085cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80085d0:	f043 0318 	orr.w	r3, r3, #24
 80085d4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80085d6:	697b      	ldr	r3, [r7, #20]
 80085d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085dc:	691b      	ldr	r3, [r3, #16]
 80085de:	697a      	ldr	r2, [r7, #20]
 80085e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80085e4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80085e8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80085ea:	7afb      	ldrb	r3, [r7, #11]
 80085ec:	2b01      	cmp	r3, #1
 80085ee:	d10f      	bne.n	8008610 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80085f0:	697b      	ldr	r3, [r7, #20]
 80085f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085f6:	461a      	mov	r2, r3
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80085fc:	697b      	ldr	r3, [r7, #20]
 80085fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	697a      	ldr	r2, [r7, #20]
 8008606:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800860a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800860e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008610:	2300      	movs	r3, #0
}
 8008612:	4618      	mov	r0, r3
 8008614:	371c      	adds	r7, #28
 8008616:	46bd      	mov	sp, r7
 8008618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861c:	4770      	bx	lr
 800861e:	bf00      	nop
 8008620:	4f54300a 	.word	0x4f54300a

08008624 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008624:	b480      	push	{r7}
 8008626:	b085      	sub	sp, #20
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800862c:	2300      	movs	r3, #0
 800862e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	3301      	adds	r3, #1
 8008634:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	4a13      	ldr	r2, [pc, #76]	; (8008688 <USB_CoreReset+0x64>)
 800863a:	4293      	cmp	r3, r2
 800863c:	d901      	bls.n	8008642 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800863e:	2303      	movs	r3, #3
 8008640:	e01b      	b.n	800867a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	691b      	ldr	r3, [r3, #16]
 8008646:	2b00      	cmp	r3, #0
 8008648:	daf2      	bge.n	8008630 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800864a:	2300      	movs	r3, #0
 800864c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	691b      	ldr	r3, [r3, #16]
 8008652:	f043 0201 	orr.w	r2, r3, #1
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	3301      	adds	r3, #1
 800865e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	4a09      	ldr	r2, [pc, #36]	; (8008688 <USB_CoreReset+0x64>)
 8008664:	4293      	cmp	r3, r2
 8008666:	d901      	bls.n	800866c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008668:	2303      	movs	r3, #3
 800866a:	e006      	b.n	800867a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	691b      	ldr	r3, [r3, #16]
 8008670:	f003 0301 	and.w	r3, r3, #1
 8008674:	2b01      	cmp	r3, #1
 8008676:	d0f0      	beq.n	800865a <USB_CoreReset+0x36>

  return HAL_OK;
 8008678:	2300      	movs	r3, #0
}
 800867a:	4618      	mov	r0, r3
 800867c:	3714      	adds	r7, #20
 800867e:	46bd      	mov	sp, r7
 8008680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008684:	4770      	bx	lr
 8008686:	bf00      	nop
 8008688:	00030d40 	.word	0x00030d40

0800868c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800868c:	b580      	push	{r7, lr}
 800868e:	b084      	sub	sp, #16
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
 8008694:	460b      	mov	r3, r1
 8008696:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008698:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800869c:	f005 fe34 	bl	800e308 <USBD_static_malloc>
 80086a0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d109      	bne.n	80086bc <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	32b0      	adds	r2, #176	; 0xb0
 80086b2:	2100      	movs	r1, #0
 80086b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80086b8:	2302      	movs	r3, #2
 80086ba:	e0d4      	b.n	8008866 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80086bc:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80086c0:	2100      	movs	r1, #0
 80086c2:	68f8      	ldr	r0, [r7, #12]
 80086c4:	f005 fe64 	bl	800e390 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	32b0      	adds	r2, #176	; 0xb0
 80086d2:	68f9      	ldr	r1, [r7, #12]
 80086d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	32b0      	adds	r2, #176	; 0xb0
 80086e2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	7c1b      	ldrb	r3, [r3, #16]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d138      	bne.n	8008766 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80086f4:	4b5e      	ldr	r3, [pc, #376]	; (8008870 <USBD_CDC_Init+0x1e4>)
 80086f6:	7819      	ldrb	r1, [r3, #0]
 80086f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80086fc:	2202      	movs	r2, #2
 80086fe:	6878      	ldr	r0, [r7, #4]
 8008700:	f005 fcdf 	bl	800e0c2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008704:	4b5a      	ldr	r3, [pc, #360]	; (8008870 <USBD_CDC_Init+0x1e4>)
 8008706:	781b      	ldrb	r3, [r3, #0]
 8008708:	f003 020f 	and.w	r2, r3, #15
 800870c:	6879      	ldr	r1, [r7, #4]
 800870e:	4613      	mov	r3, r2
 8008710:	009b      	lsls	r3, r3, #2
 8008712:	4413      	add	r3, r2
 8008714:	009b      	lsls	r3, r3, #2
 8008716:	440b      	add	r3, r1
 8008718:	3324      	adds	r3, #36	; 0x24
 800871a:	2201      	movs	r2, #1
 800871c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800871e:	4b55      	ldr	r3, [pc, #340]	; (8008874 <USBD_CDC_Init+0x1e8>)
 8008720:	7819      	ldrb	r1, [r3, #0]
 8008722:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008726:	2202      	movs	r2, #2
 8008728:	6878      	ldr	r0, [r7, #4]
 800872a:	f005 fcca 	bl	800e0c2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800872e:	4b51      	ldr	r3, [pc, #324]	; (8008874 <USBD_CDC_Init+0x1e8>)
 8008730:	781b      	ldrb	r3, [r3, #0]
 8008732:	f003 020f 	and.w	r2, r3, #15
 8008736:	6879      	ldr	r1, [r7, #4]
 8008738:	4613      	mov	r3, r2
 800873a:	009b      	lsls	r3, r3, #2
 800873c:	4413      	add	r3, r2
 800873e:	009b      	lsls	r3, r3, #2
 8008740:	440b      	add	r3, r1
 8008742:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008746:	2201      	movs	r2, #1
 8008748:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800874a:	4b4b      	ldr	r3, [pc, #300]	; (8008878 <USBD_CDC_Init+0x1ec>)
 800874c:	781b      	ldrb	r3, [r3, #0]
 800874e:	f003 020f 	and.w	r2, r3, #15
 8008752:	6879      	ldr	r1, [r7, #4]
 8008754:	4613      	mov	r3, r2
 8008756:	009b      	lsls	r3, r3, #2
 8008758:	4413      	add	r3, r2
 800875a:	009b      	lsls	r3, r3, #2
 800875c:	440b      	add	r3, r1
 800875e:	3326      	adds	r3, #38	; 0x26
 8008760:	2210      	movs	r2, #16
 8008762:	801a      	strh	r2, [r3, #0]
 8008764:	e035      	b.n	80087d2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008766:	4b42      	ldr	r3, [pc, #264]	; (8008870 <USBD_CDC_Init+0x1e4>)
 8008768:	7819      	ldrb	r1, [r3, #0]
 800876a:	2340      	movs	r3, #64	; 0x40
 800876c:	2202      	movs	r2, #2
 800876e:	6878      	ldr	r0, [r7, #4]
 8008770:	f005 fca7 	bl	800e0c2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008774:	4b3e      	ldr	r3, [pc, #248]	; (8008870 <USBD_CDC_Init+0x1e4>)
 8008776:	781b      	ldrb	r3, [r3, #0]
 8008778:	f003 020f 	and.w	r2, r3, #15
 800877c:	6879      	ldr	r1, [r7, #4]
 800877e:	4613      	mov	r3, r2
 8008780:	009b      	lsls	r3, r3, #2
 8008782:	4413      	add	r3, r2
 8008784:	009b      	lsls	r3, r3, #2
 8008786:	440b      	add	r3, r1
 8008788:	3324      	adds	r3, #36	; 0x24
 800878a:	2201      	movs	r2, #1
 800878c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800878e:	4b39      	ldr	r3, [pc, #228]	; (8008874 <USBD_CDC_Init+0x1e8>)
 8008790:	7819      	ldrb	r1, [r3, #0]
 8008792:	2340      	movs	r3, #64	; 0x40
 8008794:	2202      	movs	r2, #2
 8008796:	6878      	ldr	r0, [r7, #4]
 8008798:	f005 fc93 	bl	800e0c2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800879c:	4b35      	ldr	r3, [pc, #212]	; (8008874 <USBD_CDC_Init+0x1e8>)
 800879e:	781b      	ldrb	r3, [r3, #0]
 80087a0:	f003 020f 	and.w	r2, r3, #15
 80087a4:	6879      	ldr	r1, [r7, #4]
 80087a6:	4613      	mov	r3, r2
 80087a8:	009b      	lsls	r3, r3, #2
 80087aa:	4413      	add	r3, r2
 80087ac:	009b      	lsls	r3, r3, #2
 80087ae:	440b      	add	r3, r1
 80087b0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80087b4:	2201      	movs	r2, #1
 80087b6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80087b8:	4b2f      	ldr	r3, [pc, #188]	; (8008878 <USBD_CDC_Init+0x1ec>)
 80087ba:	781b      	ldrb	r3, [r3, #0]
 80087bc:	f003 020f 	and.w	r2, r3, #15
 80087c0:	6879      	ldr	r1, [r7, #4]
 80087c2:	4613      	mov	r3, r2
 80087c4:	009b      	lsls	r3, r3, #2
 80087c6:	4413      	add	r3, r2
 80087c8:	009b      	lsls	r3, r3, #2
 80087ca:	440b      	add	r3, r1
 80087cc:	3326      	adds	r3, #38	; 0x26
 80087ce:	2210      	movs	r2, #16
 80087d0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80087d2:	4b29      	ldr	r3, [pc, #164]	; (8008878 <USBD_CDC_Init+0x1ec>)
 80087d4:	7819      	ldrb	r1, [r3, #0]
 80087d6:	2308      	movs	r3, #8
 80087d8:	2203      	movs	r2, #3
 80087da:	6878      	ldr	r0, [r7, #4]
 80087dc:	f005 fc71 	bl	800e0c2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80087e0:	4b25      	ldr	r3, [pc, #148]	; (8008878 <USBD_CDC_Init+0x1ec>)
 80087e2:	781b      	ldrb	r3, [r3, #0]
 80087e4:	f003 020f 	and.w	r2, r3, #15
 80087e8:	6879      	ldr	r1, [r7, #4]
 80087ea:	4613      	mov	r3, r2
 80087ec:	009b      	lsls	r3, r3, #2
 80087ee:	4413      	add	r3, r2
 80087f0:	009b      	lsls	r3, r3, #2
 80087f2:	440b      	add	r3, r1
 80087f4:	3324      	adds	r3, #36	; 0x24
 80087f6:	2201      	movs	r2, #1
 80087f8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	2200      	movs	r2, #0
 80087fe:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008808:	687a      	ldr	r2, [r7, #4]
 800880a:	33b0      	adds	r3, #176	; 0xb0
 800880c:	009b      	lsls	r3, r3, #2
 800880e:	4413      	add	r3, r2
 8008810:	685b      	ldr	r3, [r3, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	2200      	movs	r2, #0
 800881a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	2200      	movs	r2, #0
 8008822:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800882c:	2b00      	cmp	r3, #0
 800882e:	d101      	bne.n	8008834 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8008830:	2302      	movs	r3, #2
 8008832:	e018      	b.n	8008866 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	7c1b      	ldrb	r3, [r3, #16]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d10a      	bne.n	8008852 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800883c:	4b0d      	ldr	r3, [pc, #52]	; (8008874 <USBD_CDC_Init+0x1e8>)
 800883e:	7819      	ldrb	r1, [r3, #0]
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008846:	f44f 7300 	mov.w	r3, #512	; 0x200
 800884a:	6878      	ldr	r0, [r7, #4]
 800884c:	f005 fd28 	bl	800e2a0 <USBD_LL_PrepareReceive>
 8008850:	e008      	b.n	8008864 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008852:	4b08      	ldr	r3, [pc, #32]	; (8008874 <USBD_CDC_Init+0x1e8>)
 8008854:	7819      	ldrb	r1, [r3, #0]
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800885c:	2340      	movs	r3, #64	; 0x40
 800885e:	6878      	ldr	r0, [r7, #4]
 8008860:	f005 fd1e 	bl	800e2a0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008864:	2300      	movs	r3, #0
}
 8008866:	4618      	mov	r0, r3
 8008868:	3710      	adds	r7, #16
 800886a:	46bd      	mov	sp, r7
 800886c:	bd80      	pop	{r7, pc}
 800886e:	bf00      	nop
 8008870:	20000093 	.word	0x20000093
 8008874:	20000094 	.word	0x20000094
 8008878:	20000095 	.word	0x20000095

0800887c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800887c:	b580      	push	{r7, lr}
 800887e:	b082      	sub	sp, #8
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
 8008884:	460b      	mov	r3, r1
 8008886:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8008888:	4b3a      	ldr	r3, [pc, #232]	; (8008974 <USBD_CDC_DeInit+0xf8>)
 800888a:	781b      	ldrb	r3, [r3, #0]
 800888c:	4619      	mov	r1, r3
 800888e:	6878      	ldr	r0, [r7, #4]
 8008890:	f005 fc3d 	bl	800e10e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8008894:	4b37      	ldr	r3, [pc, #220]	; (8008974 <USBD_CDC_DeInit+0xf8>)
 8008896:	781b      	ldrb	r3, [r3, #0]
 8008898:	f003 020f 	and.w	r2, r3, #15
 800889c:	6879      	ldr	r1, [r7, #4]
 800889e:	4613      	mov	r3, r2
 80088a0:	009b      	lsls	r3, r3, #2
 80088a2:	4413      	add	r3, r2
 80088a4:	009b      	lsls	r3, r3, #2
 80088a6:	440b      	add	r3, r1
 80088a8:	3324      	adds	r3, #36	; 0x24
 80088aa:	2200      	movs	r2, #0
 80088ac:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80088ae:	4b32      	ldr	r3, [pc, #200]	; (8008978 <USBD_CDC_DeInit+0xfc>)
 80088b0:	781b      	ldrb	r3, [r3, #0]
 80088b2:	4619      	mov	r1, r3
 80088b4:	6878      	ldr	r0, [r7, #4]
 80088b6:	f005 fc2a 	bl	800e10e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80088ba:	4b2f      	ldr	r3, [pc, #188]	; (8008978 <USBD_CDC_DeInit+0xfc>)
 80088bc:	781b      	ldrb	r3, [r3, #0]
 80088be:	f003 020f 	and.w	r2, r3, #15
 80088c2:	6879      	ldr	r1, [r7, #4]
 80088c4:	4613      	mov	r3, r2
 80088c6:	009b      	lsls	r3, r3, #2
 80088c8:	4413      	add	r3, r2
 80088ca:	009b      	lsls	r3, r3, #2
 80088cc:	440b      	add	r3, r1
 80088ce:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80088d2:	2200      	movs	r2, #0
 80088d4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80088d6:	4b29      	ldr	r3, [pc, #164]	; (800897c <USBD_CDC_DeInit+0x100>)
 80088d8:	781b      	ldrb	r3, [r3, #0]
 80088da:	4619      	mov	r1, r3
 80088dc:	6878      	ldr	r0, [r7, #4]
 80088de:	f005 fc16 	bl	800e10e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80088e2:	4b26      	ldr	r3, [pc, #152]	; (800897c <USBD_CDC_DeInit+0x100>)
 80088e4:	781b      	ldrb	r3, [r3, #0]
 80088e6:	f003 020f 	and.w	r2, r3, #15
 80088ea:	6879      	ldr	r1, [r7, #4]
 80088ec:	4613      	mov	r3, r2
 80088ee:	009b      	lsls	r3, r3, #2
 80088f0:	4413      	add	r3, r2
 80088f2:	009b      	lsls	r3, r3, #2
 80088f4:	440b      	add	r3, r1
 80088f6:	3324      	adds	r3, #36	; 0x24
 80088f8:	2200      	movs	r2, #0
 80088fa:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80088fc:	4b1f      	ldr	r3, [pc, #124]	; (800897c <USBD_CDC_DeInit+0x100>)
 80088fe:	781b      	ldrb	r3, [r3, #0]
 8008900:	f003 020f 	and.w	r2, r3, #15
 8008904:	6879      	ldr	r1, [r7, #4]
 8008906:	4613      	mov	r3, r2
 8008908:	009b      	lsls	r3, r3, #2
 800890a:	4413      	add	r3, r2
 800890c:	009b      	lsls	r3, r3, #2
 800890e:	440b      	add	r3, r1
 8008910:	3326      	adds	r3, #38	; 0x26
 8008912:	2200      	movs	r2, #0
 8008914:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	32b0      	adds	r2, #176	; 0xb0
 8008920:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d01f      	beq.n	8008968 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800892e:	687a      	ldr	r2, [r7, #4]
 8008930:	33b0      	adds	r3, #176	; 0xb0
 8008932:	009b      	lsls	r3, r3, #2
 8008934:	4413      	add	r3, r2
 8008936:	685b      	ldr	r3, [r3, #4]
 8008938:	685b      	ldr	r3, [r3, #4]
 800893a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	32b0      	adds	r2, #176	; 0xb0
 8008946:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800894a:	4618      	mov	r0, r3
 800894c:	f005 fcea 	bl	800e324 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	32b0      	adds	r2, #176	; 0xb0
 800895a:	2100      	movs	r1, #0
 800895c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	2200      	movs	r2, #0
 8008964:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008968:	2300      	movs	r3, #0
}
 800896a:	4618      	mov	r0, r3
 800896c:	3708      	adds	r7, #8
 800896e:	46bd      	mov	sp, r7
 8008970:	bd80      	pop	{r7, pc}
 8008972:	bf00      	nop
 8008974:	20000093 	.word	0x20000093
 8008978:	20000094 	.word	0x20000094
 800897c:	20000095 	.word	0x20000095

08008980 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008980:	b580      	push	{r7, lr}
 8008982:	b086      	sub	sp, #24
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
 8008988:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	32b0      	adds	r2, #176	; 0xb0
 8008994:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008998:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800899a:	2300      	movs	r3, #0
 800899c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800899e:	2300      	movs	r3, #0
 80089a0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80089a2:	2300      	movs	r3, #0
 80089a4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80089a6:	693b      	ldr	r3, [r7, #16]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d101      	bne.n	80089b0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80089ac:	2303      	movs	r3, #3
 80089ae:	e0bf      	b.n	8008b30 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	781b      	ldrb	r3, [r3, #0]
 80089b4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d050      	beq.n	8008a5e <USBD_CDC_Setup+0xde>
 80089bc:	2b20      	cmp	r3, #32
 80089be:	f040 80af 	bne.w	8008b20 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80089c2:	683b      	ldr	r3, [r7, #0]
 80089c4:	88db      	ldrh	r3, [r3, #6]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d03a      	beq.n	8008a40 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80089ca:	683b      	ldr	r3, [r7, #0]
 80089cc:	781b      	ldrb	r3, [r3, #0]
 80089ce:	b25b      	sxtb	r3, r3
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	da1b      	bge.n	8008a0c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80089da:	687a      	ldr	r2, [r7, #4]
 80089dc:	33b0      	adds	r3, #176	; 0xb0
 80089de:	009b      	lsls	r3, r3, #2
 80089e0:	4413      	add	r3, r2
 80089e2:	685b      	ldr	r3, [r3, #4]
 80089e4:	689b      	ldr	r3, [r3, #8]
 80089e6:	683a      	ldr	r2, [r7, #0]
 80089e8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80089ea:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80089ec:	683a      	ldr	r2, [r7, #0]
 80089ee:	88d2      	ldrh	r2, [r2, #6]
 80089f0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80089f2:	683b      	ldr	r3, [r7, #0]
 80089f4:	88db      	ldrh	r3, [r3, #6]
 80089f6:	2b07      	cmp	r3, #7
 80089f8:	bf28      	it	cs
 80089fa:	2307      	movcs	r3, #7
 80089fc:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80089fe:	693b      	ldr	r3, [r7, #16]
 8008a00:	89fa      	ldrh	r2, [r7, #14]
 8008a02:	4619      	mov	r1, r3
 8008a04:	6878      	ldr	r0, [r7, #4]
 8008a06:	f001 fd89 	bl	800a51c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8008a0a:	e090      	b.n	8008b2e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	785a      	ldrb	r2, [r3, #1]
 8008a10:	693b      	ldr	r3, [r7, #16]
 8008a12:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8008a16:	683b      	ldr	r3, [r7, #0]
 8008a18:	88db      	ldrh	r3, [r3, #6]
 8008a1a:	2b3f      	cmp	r3, #63	; 0x3f
 8008a1c:	d803      	bhi.n	8008a26 <USBD_CDC_Setup+0xa6>
 8008a1e:	683b      	ldr	r3, [r7, #0]
 8008a20:	88db      	ldrh	r3, [r3, #6]
 8008a22:	b2da      	uxtb	r2, r3
 8008a24:	e000      	b.n	8008a28 <USBD_CDC_Setup+0xa8>
 8008a26:	2240      	movs	r2, #64	; 0x40
 8008a28:	693b      	ldr	r3, [r7, #16]
 8008a2a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8008a2e:	6939      	ldr	r1, [r7, #16]
 8008a30:	693b      	ldr	r3, [r7, #16]
 8008a32:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8008a36:	461a      	mov	r2, r3
 8008a38:	6878      	ldr	r0, [r7, #4]
 8008a3a:	f001 fd9b 	bl	800a574 <USBD_CtlPrepareRx>
      break;
 8008a3e:	e076      	b.n	8008b2e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008a46:	687a      	ldr	r2, [r7, #4]
 8008a48:	33b0      	adds	r3, #176	; 0xb0
 8008a4a:	009b      	lsls	r3, r3, #2
 8008a4c:	4413      	add	r3, r2
 8008a4e:	685b      	ldr	r3, [r3, #4]
 8008a50:	689b      	ldr	r3, [r3, #8]
 8008a52:	683a      	ldr	r2, [r7, #0]
 8008a54:	7850      	ldrb	r0, [r2, #1]
 8008a56:	2200      	movs	r2, #0
 8008a58:	6839      	ldr	r1, [r7, #0]
 8008a5a:	4798      	blx	r3
      break;
 8008a5c:	e067      	b.n	8008b2e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	785b      	ldrb	r3, [r3, #1]
 8008a62:	2b0b      	cmp	r3, #11
 8008a64:	d851      	bhi.n	8008b0a <USBD_CDC_Setup+0x18a>
 8008a66:	a201      	add	r2, pc, #4	; (adr r2, 8008a6c <USBD_CDC_Setup+0xec>)
 8008a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a6c:	08008a9d 	.word	0x08008a9d
 8008a70:	08008b19 	.word	0x08008b19
 8008a74:	08008b0b 	.word	0x08008b0b
 8008a78:	08008b0b 	.word	0x08008b0b
 8008a7c:	08008b0b 	.word	0x08008b0b
 8008a80:	08008b0b 	.word	0x08008b0b
 8008a84:	08008b0b 	.word	0x08008b0b
 8008a88:	08008b0b 	.word	0x08008b0b
 8008a8c:	08008b0b 	.word	0x08008b0b
 8008a90:	08008b0b 	.word	0x08008b0b
 8008a94:	08008ac7 	.word	0x08008ac7
 8008a98:	08008af1 	.word	0x08008af1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008aa2:	b2db      	uxtb	r3, r3
 8008aa4:	2b03      	cmp	r3, #3
 8008aa6:	d107      	bne.n	8008ab8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008aa8:	f107 030a 	add.w	r3, r7, #10
 8008aac:	2202      	movs	r2, #2
 8008aae:	4619      	mov	r1, r3
 8008ab0:	6878      	ldr	r0, [r7, #4]
 8008ab2:	f001 fd33 	bl	800a51c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008ab6:	e032      	b.n	8008b1e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008ab8:	6839      	ldr	r1, [r7, #0]
 8008aba:	6878      	ldr	r0, [r7, #4]
 8008abc:	f001 fcbd 	bl	800a43a <USBD_CtlError>
            ret = USBD_FAIL;
 8008ac0:	2303      	movs	r3, #3
 8008ac2:	75fb      	strb	r3, [r7, #23]
          break;
 8008ac4:	e02b      	b.n	8008b1e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008acc:	b2db      	uxtb	r3, r3
 8008ace:	2b03      	cmp	r3, #3
 8008ad0:	d107      	bne.n	8008ae2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008ad2:	f107 030d 	add.w	r3, r7, #13
 8008ad6:	2201      	movs	r2, #1
 8008ad8:	4619      	mov	r1, r3
 8008ada:	6878      	ldr	r0, [r7, #4]
 8008adc:	f001 fd1e 	bl	800a51c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008ae0:	e01d      	b.n	8008b1e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008ae2:	6839      	ldr	r1, [r7, #0]
 8008ae4:	6878      	ldr	r0, [r7, #4]
 8008ae6:	f001 fca8 	bl	800a43a <USBD_CtlError>
            ret = USBD_FAIL;
 8008aea:	2303      	movs	r3, #3
 8008aec:	75fb      	strb	r3, [r7, #23]
          break;
 8008aee:	e016      	b.n	8008b1e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008af6:	b2db      	uxtb	r3, r3
 8008af8:	2b03      	cmp	r3, #3
 8008afa:	d00f      	beq.n	8008b1c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8008afc:	6839      	ldr	r1, [r7, #0]
 8008afe:	6878      	ldr	r0, [r7, #4]
 8008b00:	f001 fc9b 	bl	800a43a <USBD_CtlError>
            ret = USBD_FAIL;
 8008b04:	2303      	movs	r3, #3
 8008b06:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008b08:	e008      	b.n	8008b1c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008b0a:	6839      	ldr	r1, [r7, #0]
 8008b0c:	6878      	ldr	r0, [r7, #4]
 8008b0e:	f001 fc94 	bl	800a43a <USBD_CtlError>
          ret = USBD_FAIL;
 8008b12:	2303      	movs	r3, #3
 8008b14:	75fb      	strb	r3, [r7, #23]
          break;
 8008b16:	e002      	b.n	8008b1e <USBD_CDC_Setup+0x19e>
          break;
 8008b18:	bf00      	nop
 8008b1a:	e008      	b.n	8008b2e <USBD_CDC_Setup+0x1ae>
          break;
 8008b1c:	bf00      	nop
      }
      break;
 8008b1e:	e006      	b.n	8008b2e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8008b20:	6839      	ldr	r1, [r7, #0]
 8008b22:	6878      	ldr	r0, [r7, #4]
 8008b24:	f001 fc89 	bl	800a43a <USBD_CtlError>
      ret = USBD_FAIL;
 8008b28:	2303      	movs	r3, #3
 8008b2a:	75fb      	strb	r3, [r7, #23]
      break;
 8008b2c:	bf00      	nop
  }

  return (uint8_t)ret;
 8008b2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b30:	4618      	mov	r0, r3
 8008b32:	3718      	adds	r7, #24
 8008b34:	46bd      	mov	sp, r7
 8008b36:	bd80      	pop	{r7, pc}

08008b38 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b084      	sub	sp, #16
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
 8008b40:	460b      	mov	r3, r1
 8008b42:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008b4a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	32b0      	adds	r2, #176	; 0xb0
 8008b56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d101      	bne.n	8008b62 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8008b5e:	2303      	movs	r3, #3
 8008b60:	e065      	b.n	8008c2e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	32b0      	adds	r2, #176	; 0xb0
 8008b6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b70:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008b72:	78fb      	ldrb	r3, [r7, #3]
 8008b74:	f003 020f 	and.w	r2, r3, #15
 8008b78:	6879      	ldr	r1, [r7, #4]
 8008b7a:	4613      	mov	r3, r2
 8008b7c:	009b      	lsls	r3, r3, #2
 8008b7e:	4413      	add	r3, r2
 8008b80:	009b      	lsls	r3, r3, #2
 8008b82:	440b      	add	r3, r1
 8008b84:	3318      	adds	r3, #24
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d02f      	beq.n	8008bec <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008b8c:	78fb      	ldrb	r3, [r7, #3]
 8008b8e:	f003 020f 	and.w	r2, r3, #15
 8008b92:	6879      	ldr	r1, [r7, #4]
 8008b94:	4613      	mov	r3, r2
 8008b96:	009b      	lsls	r3, r3, #2
 8008b98:	4413      	add	r3, r2
 8008b9a:	009b      	lsls	r3, r3, #2
 8008b9c:	440b      	add	r3, r1
 8008b9e:	3318      	adds	r3, #24
 8008ba0:	681a      	ldr	r2, [r3, #0]
 8008ba2:	78fb      	ldrb	r3, [r7, #3]
 8008ba4:	f003 010f 	and.w	r1, r3, #15
 8008ba8:	68f8      	ldr	r0, [r7, #12]
 8008baa:	460b      	mov	r3, r1
 8008bac:	00db      	lsls	r3, r3, #3
 8008bae:	440b      	add	r3, r1
 8008bb0:	009b      	lsls	r3, r3, #2
 8008bb2:	4403      	add	r3, r0
 8008bb4:	3348      	adds	r3, #72	; 0x48
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	fbb2 f1f3 	udiv	r1, r2, r3
 8008bbc:	fb01 f303 	mul.w	r3, r1, r3
 8008bc0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d112      	bne.n	8008bec <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8008bc6:	78fb      	ldrb	r3, [r7, #3]
 8008bc8:	f003 020f 	and.w	r2, r3, #15
 8008bcc:	6879      	ldr	r1, [r7, #4]
 8008bce:	4613      	mov	r3, r2
 8008bd0:	009b      	lsls	r3, r3, #2
 8008bd2:	4413      	add	r3, r2
 8008bd4:	009b      	lsls	r3, r3, #2
 8008bd6:	440b      	add	r3, r1
 8008bd8:	3318      	adds	r3, #24
 8008bda:	2200      	movs	r2, #0
 8008bdc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008bde:	78f9      	ldrb	r1, [r7, #3]
 8008be0:	2300      	movs	r3, #0
 8008be2:	2200      	movs	r2, #0
 8008be4:	6878      	ldr	r0, [r7, #4]
 8008be6:	f005 fb3a 	bl	800e25e <USBD_LL_Transmit>
 8008bea:	e01f      	b.n	8008c2c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008bec:	68bb      	ldr	r3, [r7, #8]
 8008bee:	2200      	movs	r2, #0
 8008bf0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008bfa:	687a      	ldr	r2, [r7, #4]
 8008bfc:	33b0      	adds	r3, #176	; 0xb0
 8008bfe:	009b      	lsls	r3, r3, #2
 8008c00:	4413      	add	r3, r2
 8008c02:	685b      	ldr	r3, [r3, #4]
 8008c04:	691b      	ldr	r3, [r3, #16]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d010      	beq.n	8008c2c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008c10:	687a      	ldr	r2, [r7, #4]
 8008c12:	33b0      	adds	r3, #176	; 0xb0
 8008c14:	009b      	lsls	r3, r3, #2
 8008c16:	4413      	add	r3, r2
 8008c18:	685b      	ldr	r3, [r3, #4]
 8008c1a:	691b      	ldr	r3, [r3, #16]
 8008c1c:	68ba      	ldr	r2, [r7, #8]
 8008c1e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8008c22:	68ba      	ldr	r2, [r7, #8]
 8008c24:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008c28:	78fa      	ldrb	r2, [r7, #3]
 8008c2a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008c2c:	2300      	movs	r3, #0
}
 8008c2e:	4618      	mov	r0, r3
 8008c30:	3710      	adds	r7, #16
 8008c32:	46bd      	mov	sp, r7
 8008c34:	bd80      	pop	{r7, pc}

08008c36 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008c36:	b580      	push	{r7, lr}
 8008c38:	b084      	sub	sp, #16
 8008c3a:	af00      	add	r7, sp, #0
 8008c3c:	6078      	str	r0, [r7, #4]
 8008c3e:	460b      	mov	r3, r1
 8008c40:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	32b0      	adds	r2, #176	; 0xb0
 8008c4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c50:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	32b0      	adds	r2, #176	; 0xb0
 8008c5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d101      	bne.n	8008c68 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008c64:	2303      	movs	r3, #3
 8008c66:	e01a      	b.n	8008c9e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008c68:	78fb      	ldrb	r3, [r7, #3]
 8008c6a:	4619      	mov	r1, r3
 8008c6c:	6878      	ldr	r0, [r7, #4]
 8008c6e:	f005 fb38 	bl	800e2e2 <USBD_LL_GetRxDataSize>
 8008c72:	4602      	mov	r2, r0
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008c80:	687a      	ldr	r2, [r7, #4]
 8008c82:	33b0      	adds	r3, #176	; 0xb0
 8008c84:	009b      	lsls	r3, r3, #2
 8008c86:	4413      	add	r3, r2
 8008c88:	685b      	ldr	r3, [r3, #4]
 8008c8a:	68db      	ldr	r3, [r3, #12]
 8008c8c:	68fa      	ldr	r2, [r7, #12]
 8008c8e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008c92:	68fa      	ldr	r2, [r7, #12]
 8008c94:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008c98:	4611      	mov	r1, r2
 8008c9a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008c9c:	2300      	movs	r3, #0
}
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	3710      	adds	r7, #16
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	bd80      	pop	{r7, pc}

08008ca6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008ca6:	b580      	push	{r7, lr}
 8008ca8:	b084      	sub	sp, #16
 8008caa:	af00      	add	r7, sp, #0
 8008cac:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	32b0      	adds	r2, #176	; 0xb0
 8008cb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cbc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d101      	bne.n	8008cc8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008cc4:	2303      	movs	r3, #3
 8008cc6:	e025      	b.n	8008d14 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008cce:	687a      	ldr	r2, [r7, #4]
 8008cd0:	33b0      	adds	r3, #176	; 0xb0
 8008cd2:	009b      	lsls	r3, r3, #2
 8008cd4:	4413      	add	r3, r2
 8008cd6:	685b      	ldr	r3, [r3, #4]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d01a      	beq.n	8008d12 <USBD_CDC_EP0_RxReady+0x6c>
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008ce2:	2bff      	cmp	r3, #255	; 0xff
 8008ce4:	d015      	beq.n	8008d12 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008cec:	687a      	ldr	r2, [r7, #4]
 8008cee:	33b0      	adds	r3, #176	; 0xb0
 8008cf0:	009b      	lsls	r3, r3, #2
 8008cf2:	4413      	add	r3, r2
 8008cf4:	685b      	ldr	r3, [r3, #4]
 8008cf6:	689b      	ldr	r3, [r3, #8]
 8008cf8:	68fa      	ldr	r2, [r7, #12]
 8008cfa:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8008cfe:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8008d00:	68fa      	ldr	r2, [r7, #12]
 8008d02:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008d06:	b292      	uxth	r2, r2
 8008d08:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	22ff      	movs	r2, #255	; 0xff
 8008d0e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8008d12:	2300      	movs	r3, #0
}
 8008d14:	4618      	mov	r0, r3
 8008d16:	3710      	adds	r7, #16
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	bd80      	pop	{r7, pc}

08008d1c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b086      	sub	sp, #24
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008d24:	2182      	movs	r1, #130	; 0x82
 8008d26:	4818      	ldr	r0, [pc, #96]	; (8008d88 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008d28:	f000 fd4f 	bl	80097ca <USBD_GetEpDesc>
 8008d2c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008d2e:	2101      	movs	r1, #1
 8008d30:	4815      	ldr	r0, [pc, #84]	; (8008d88 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008d32:	f000 fd4a 	bl	80097ca <USBD_GetEpDesc>
 8008d36:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008d38:	2181      	movs	r1, #129	; 0x81
 8008d3a:	4813      	ldr	r0, [pc, #76]	; (8008d88 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008d3c:	f000 fd45 	bl	80097ca <USBD_GetEpDesc>
 8008d40:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008d42:	697b      	ldr	r3, [r7, #20]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d002      	beq.n	8008d4e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008d48:	697b      	ldr	r3, [r7, #20]
 8008d4a:	2210      	movs	r2, #16
 8008d4c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008d4e:	693b      	ldr	r3, [r7, #16]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d006      	beq.n	8008d62 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008d54:	693b      	ldr	r3, [r7, #16]
 8008d56:	2200      	movs	r2, #0
 8008d58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008d5c:	711a      	strb	r2, [r3, #4]
 8008d5e:	2200      	movs	r2, #0
 8008d60:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d006      	beq.n	8008d76 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008d70:	711a      	strb	r2, [r3, #4]
 8008d72:	2200      	movs	r2, #0
 8008d74:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	2243      	movs	r2, #67	; 0x43
 8008d7a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008d7c:	4b02      	ldr	r3, [pc, #8]	; (8008d88 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8008d7e:	4618      	mov	r0, r3
 8008d80:	3718      	adds	r7, #24
 8008d82:	46bd      	mov	sp, r7
 8008d84:	bd80      	pop	{r7, pc}
 8008d86:	bf00      	nop
 8008d88:	20000050 	.word	0x20000050

08008d8c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b086      	sub	sp, #24
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008d94:	2182      	movs	r1, #130	; 0x82
 8008d96:	4818      	ldr	r0, [pc, #96]	; (8008df8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008d98:	f000 fd17 	bl	80097ca <USBD_GetEpDesc>
 8008d9c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008d9e:	2101      	movs	r1, #1
 8008da0:	4815      	ldr	r0, [pc, #84]	; (8008df8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008da2:	f000 fd12 	bl	80097ca <USBD_GetEpDesc>
 8008da6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008da8:	2181      	movs	r1, #129	; 0x81
 8008daa:	4813      	ldr	r0, [pc, #76]	; (8008df8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008dac:	f000 fd0d 	bl	80097ca <USBD_GetEpDesc>
 8008db0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008db2:	697b      	ldr	r3, [r7, #20]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d002      	beq.n	8008dbe <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008db8:	697b      	ldr	r3, [r7, #20]
 8008dba:	2210      	movs	r2, #16
 8008dbc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008dbe:	693b      	ldr	r3, [r7, #16]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d006      	beq.n	8008dd2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008dc4:	693b      	ldr	r3, [r7, #16]
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	711a      	strb	r2, [r3, #4]
 8008dca:	2200      	movs	r2, #0
 8008dcc:	f042 0202 	orr.w	r2, r2, #2
 8008dd0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d006      	beq.n	8008de6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	2200      	movs	r2, #0
 8008ddc:	711a      	strb	r2, [r3, #4]
 8008dde:	2200      	movs	r2, #0
 8008de0:	f042 0202 	orr.w	r2, r2, #2
 8008de4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	2243      	movs	r2, #67	; 0x43
 8008dea:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008dec:	4b02      	ldr	r3, [pc, #8]	; (8008df8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8008dee:	4618      	mov	r0, r3
 8008df0:	3718      	adds	r7, #24
 8008df2:	46bd      	mov	sp, r7
 8008df4:	bd80      	pop	{r7, pc}
 8008df6:	bf00      	nop
 8008df8:	20000050 	.word	0x20000050

08008dfc <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b086      	sub	sp, #24
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008e04:	2182      	movs	r1, #130	; 0x82
 8008e06:	4818      	ldr	r0, [pc, #96]	; (8008e68 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008e08:	f000 fcdf 	bl	80097ca <USBD_GetEpDesc>
 8008e0c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008e0e:	2101      	movs	r1, #1
 8008e10:	4815      	ldr	r0, [pc, #84]	; (8008e68 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008e12:	f000 fcda 	bl	80097ca <USBD_GetEpDesc>
 8008e16:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008e18:	2181      	movs	r1, #129	; 0x81
 8008e1a:	4813      	ldr	r0, [pc, #76]	; (8008e68 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008e1c:	f000 fcd5 	bl	80097ca <USBD_GetEpDesc>
 8008e20:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008e22:	697b      	ldr	r3, [r7, #20]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d002      	beq.n	8008e2e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008e28:	697b      	ldr	r3, [r7, #20]
 8008e2a:	2210      	movs	r2, #16
 8008e2c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008e2e:	693b      	ldr	r3, [r7, #16]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d006      	beq.n	8008e42 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008e34:	693b      	ldr	r3, [r7, #16]
 8008e36:	2200      	movs	r2, #0
 8008e38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008e3c:	711a      	strb	r2, [r3, #4]
 8008e3e:	2200      	movs	r2, #0
 8008e40:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d006      	beq.n	8008e56 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008e50:	711a      	strb	r2, [r3, #4]
 8008e52:	2200      	movs	r2, #0
 8008e54:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	2243      	movs	r2, #67	; 0x43
 8008e5a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008e5c:	4b02      	ldr	r3, [pc, #8]	; (8008e68 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8008e5e:	4618      	mov	r0, r3
 8008e60:	3718      	adds	r7, #24
 8008e62:	46bd      	mov	sp, r7
 8008e64:	bd80      	pop	{r7, pc}
 8008e66:	bf00      	nop
 8008e68:	20000050 	.word	0x20000050

08008e6c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008e6c:	b480      	push	{r7}
 8008e6e:	b083      	sub	sp, #12
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	220a      	movs	r2, #10
 8008e78:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008e7a:	4b03      	ldr	r3, [pc, #12]	; (8008e88 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	370c      	adds	r7, #12
 8008e80:	46bd      	mov	sp, r7
 8008e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e86:	4770      	bx	lr
 8008e88:	2000000c 	.word	0x2000000c

08008e8c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008e8c:	b480      	push	{r7}
 8008e8e:	b083      	sub	sp, #12
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
 8008e94:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008e96:	683b      	ldr	r3, [r7, #0]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d101      	bne.n	8008ea0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008e9c:	2303      	movs	r3, #3
 8008e9e:	e009      	b.n	8008eb4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008ea6:	687a      	ldr	r2, [r7, #4]
 8008ea8:	33b0      	adds	r3, #176	; 0xb0
 8008eaa:	009b      	lsls	r3, r3, #2
 8008eac:	4413      	add	r3, r2
 8008eae:	683a      	ldr	r2, [r7, #0]
 8008eb0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8008eb2:	2300      	movs	r3, #0
}
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	370c      	adds	r7, #12
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ebe:	4770      	bx	lr

08008ec0 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008ec0:	b480      	push	{r7}
 8008ec2:	b087      	sub	sp, #28
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	60f8      	str	r0, [r7, #12]
 8008ec8:	60b9      	str	r1, [r7, #8]
 8008eca:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	32b0      	adds	r2, #176	; 0xb0
 8008ed6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008eda:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8008edc:	697b      	ldr	r3, [r7, #20]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d101      	bne.n	8008ee6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008ee2:	2303      	movs	r3, #3
 8008ee4:	e008      	b.n	8008ef8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8008ee6:	697b      	ldr	r3, [r7, #20]
 8008ee8:	68ba      	ldr	r2, [r7, #8]
 8008eea:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008eee:	697b      	ldr	r3, [r7, #20]
 8008ef0:	687a      	ldr	r2, [r7, #4]
 8008ef2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8008ef6:	2300      	movs	r3, #0
}
 8008ef8:	4618      	mov	r0, r3
 8008efa:	371c      	adds	r7, #28
 8008efc:	46bd      	mov	sp, r7
 8008efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f02:	4770      	bx	lr

08008f04 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008f04:	b480      	push	{r7}
 8008f06:	b085      	sub	sp, #20
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
 8008f0c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	32b0      	adds	r2, #176	; 0xb0
 8008f18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f1c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d101      	bne.n	8008f28 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008f24:	2303      	movs	r3, #3
 8008f26:	e004      	b.n	8008f32 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	683a      	ldr	r2, [r7, #0]
 8008f2c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8008f30:	2300      	movs	r3, #0
}
 8008f32:	4618      	mov	r0, r3
 8008f34:	3714      	adds	r7, #20
 8008f36:	46bd      	mov	sp, r7
 8008f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3c:	4770      	bx	lr
	...

08008f40 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b084      	sub	sp, #16
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	32b0      	adds	r2, #176	; 0xb0
 8008f52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f56:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8008f58:	2301      	movs	r3, #1
 8008f5a:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	32b0      	adds	r2, #176	; 0xb0
 8008f66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d101      	bne.n	8008f72 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008f6e:	2303      	movs	r3, #3
 8008f70:	e025      	b.n	8008fbe <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8008f72:	68bb      	ldr	r3, [r7, #8]
 8008f74:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d11f      	bne.n	8008fbc <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008f7c:	68bb      	ldr	r3, [r7, #8]
 8008f7e:	2201      	movs	r2, #1
 8008f80:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8008f84:	4b10      	ldr	r3, [pc, #64]	; (8008fc8 <USBD_CDC_TransmitPacket+0x88>)
 8008f86:	781b      	ldrb	r3, [r3, #0]
 8008f88:	f003 020f 	and.w	r2, r3, #15
 8008f8c:	68bb      	ldr	r3, [r7, #8]
 8008f8e:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8008f92:	6878      	ldr	r0, [r7, #4]
 8008f94:	4613      	mov	r3, r2
 8008f96:	009b      	lsls	r3, r3, #2
 8008f98:	4413      	add	r3, r2
 8008f9a:	009b      	lsls	r3, r3, #2
 8008f9c:	4403      	add	r3, r0
 8008f9e:	3318      	adds	r3, #24
 8008fa0:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8008fa2:	4b09      	ldr	r3, [pc, #36]	; (8008fc8 <USBD_CDC_TransmitPacket+0x88>)
 8008fa4:	7819      	ldrb	r1, [r3, #0]
 8008fa6:	68bb      	ldr	r3, [r7, #8]
 8008fa8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8008fac:	68bb      	ldr	r3, [r7, #8]
 8008fae:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8008fb2:	6878      	ldr	r0, [r7, #4]
 8008fb4:	f005 f953 	bl	800e25e <USBD_LL_Transmit>

    ret = USBD_OK;
 8008fb8:	2300      	movs	r3, #0
 8008fba:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008fbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	3710      	adds	r7, #16
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	bd80      	pop	{r7, pc}
 8008fc6:	bf00      	nop
 8008fc8:	20000093 	.word	0x20000093

08008fcc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b084      	sub	sp, #16
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	32b0      	adds	r2, #176	; 0xb0
 8008fde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fe2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	32b0      	adds	r2, #176	; 0xb0
 8008fee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d101      	bne.n	8008ffa <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8008ff6:	2303      	movs	r3, #3
 8008ff8:	e018      	b.n	800902c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	7c1b      	ldrb	r3, [r3, #16]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d10a      	bne.n	8009018 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009002:	4b0c      	ldr	r3, [pc, #48]	; (8009034 <USBD_CDC_ReceivePacket+0x68>)
 8009004:	7819      	ldrb	r1, [r3, #0]
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800900c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009010:	6878      	ldr	r0, [r7, #4]
 8009012:	f005 f945 	bl	800e2a0 <USBD_LL_PrepareReceive>
 8009016:	e008      	b.n	800902a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009018:	4b06      	ldr	r3, [pc, #24]	; (8009034 <USBD_CDC_ReceivePacket+0x68>)
 800901a:	7819      	ldrb	r1, [r3, #0]
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009022:	2340      	movs	r3, #64	; 0x40
 8009024:	6878      	ldr	r0, [r7, #4]
 8009026:	f005 f93b 	bl	800e2a0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800902a:	2300      	movs	r3, #0
}
 800902c:	4618      	mov	r0, r3
 800902e:	3710      	adds	r7, #16
 8009030:	46bd      	mov	sp, r7
 8009032:	bd80      	pop	{r7, pc}
 8009034:	20000094 	.word	0x20000094

08009038 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009038:	b580      	push	{r7, lr}
 800903a:	b086      	sub	sp, #24
 800903c:	af00      	add	r7, sp, #0
 800903e:	60f8      	str	r0, [r7, #12]
 8009040:	60b9      	str	r1, [r7, #8]
 8009042:	4613      	mov	r3, r2
 8009044:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d101      	bne.n	8009050 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800904c:	2303      	movs	r3, #3
 800904e:	e01f      	b.n	8009090 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	2200      	movs	r2, #0
 8009054:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	2200      	movs	r2, #0
 800905c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	2200      	movs	r2, #0
 8009064:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009068:	68bb      	ldr	r3, [r7, #8]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d003      	beq.n	8009076 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	68ba      	ldr	r2, [r7, #8]
 8009072:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	2201      	movs	r2, #1
 800907a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	79fa      	ldrb	r2, [r7, #7]
 8009082:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009084:	68f8      	ldr	r0, [r7, #12]
 8009086:	f004 ffb5 	bl	800dff4 <USBD_LL_Init>
 800908a:	4603      	mov	r3, r0
 800908c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800908e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009090:	4618      	mov	r0, r3
 8009092:	3718      	adds	r7, #24
 8009094:	46bd      	mov	sp, r7
 8009096:	bd80      	pop	{r7, pc}

08009098 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009098:	b580      	push	{r7, lr}
 800909a:	b084      	sub	sp, #16
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
 80090a0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80090a2:	2300      	movs	r3, #0
 80090a4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80090a6:	683b      	ldr	r3, [r7, #0]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d101      	bne.n	80090b0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80090ac:	2303      	movs	r3, #3
 80090ae:	e025      	b.n	80090fc <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	683a      	ldr	r2, [r7, #0]
 80090b4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	32ae      	adds	r2, #174	; 0xae
 80090c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d00f      	beq.n	80090ec <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	32ae      	adds	r2, #174	; 0xae
 80090d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090dc:	f107 020e 	add.w	r2, r7, #14
 80090e0:	4610      	mov	r0, r2
 80090e2:	4798      	blx	r3
 80090e4:	4602      	mov	r2, r0
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80090f2:	1c5a      	adds	r2, r3, #1
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80090fa:	2300      	movs	r3, #0
}
 80090fc:	4618      	mov	r0, r3
 80090fe:	3710      	adds	r7, #16
 8009100:	46bd      	mov	sp, r7
 8009102:	bd80      	pop	{r7, pc}

08009104 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009104:	b580      	push	{r7, lr}
 8009106:	b082      	sub	sp, #8
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800910c:	6878      	ldr	r0, [r7, #4]
 800910e:	f004 ffbd 	bl	800e08c <USBD_LL_Start>
 8009112:	4603      	mov	r3, r0
}
 8009114:	4618      	mov	r0, r3
 8009116:	3708      	adds	r7, #8
 8009118:	46bd      	mov	sp, r7
 800911a:	bd80      	pop	{r7, pc}

0800911c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800911c:	b480      	push	{r7}
 800911e:	b083      	sub	sp, #12
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009124:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8009126:	4618      	mov	r0, r3
 8009128:	370c      	adds	r7, #12
 800912a:	46bd      	mov	sp, r7
 800912c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009130:	4770      	bx	lr

08009132 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009132:	b580      	push	{r7, lr}
 8009134:	b084      	sub	sp, #16
 8009136:	af00      	add	r7, sp, #0
 8009138:	6078      	str	r0, [r7, #4]
 800913a:	460b      	mov	r3, r1
 800913c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800913e:	2300      	movs	r3, #0
 8009140:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009148:	2b00      	cmp	r3, #0
 800914a:	d009      	beq.n	8009160 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	78fa      	ldrb	r2, [r7, #3]
 8009156:	4611      	mov	r1, r2
 8009158:	6878      	ldr	r0, [r7, #4]
 800915a:	4798      	blx	r3
 800915c:	4603      	mov	r3, r0
 800915e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009160:	7bfb      	ldrb	r3, [r7, #15]
}
 8009162:	4618      	mov	r0, r3
 8009164:	3710      	adds	r7, #16
 8009166:	46bd      	mov	sp, r7
 8009168:	bd80      	pop	{r7, pc}

0800916a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800916a:	b580      	push	{r7, lr}
 800916c:	b084      	sub	sp, #16
 800916e:	af00      	add	r7, sp, #0
 8009170:	6078      	str	r0, [r7, #4]
 8009172:	460b      	mov	r3, r1
 8009174:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009176:	2300      	movs	r3, #0
 8009178:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009180:	685b      	ldr	r3, [r3, #4]
 8009182:	78fa      	ldrb	r2, [r7, #3]
 8009184:	4611      	mov	r1, r2
 8009186:	6878      	ldr	r0, [r7, #4]
 8009188:	4798      	blx	r3
 800918a:	4603      	mov	r3, r0
 800918c:	2b00      	cmp	r3, #0
 800918e:	d001      	beq.n	8009194 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8009190:	2303      	movs	r3, #3
 8009192:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009194:	7bfb      	ldrb	r3, [r7, #15]
}
 8009196:	4618      	mov	r0, r3
 8009198:	3710      	adds	r7, #16
 800919a:	46bd      	mov	sp, r7
 800919c:	bd80      	pop	{r7, pc}

0800919e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800919e:	b580      	push	{r7, lr}
 80091a0:	b084      	sub	sp, #16
 80091a2:	af00      	add	r7, sp, #0
 80091a4:	6078      	str	r0, [r7, #4]
 80091a6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80091ae:	6839      	ldr	r1, [r7, #0]
 80091b0:	4618      	mov	r0, r3
 80091b2:	f001 f908 	bl	800a3c6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	2201      	movs	r2, #1
 80091ba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80091c4:	461a      	mov	r2, r3
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80091d2:	f003 031f 	and.w	r3, r3, #31
 80091d6:	2b02      	cmp	r3, #2
 80091d8:	d01a      	beq.n	8009210 <USBD_LL_SetupStage+0x72>
 80091da:	2b02      	cmp	r3, #2
 80091dc:	d822      	bhi.n	8009224 <USBD_LL_SetupStage+0x86>
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d002      	beq.n	80091e8 <USBD_LL_SetupStage+0x4a>
 80091e2:	2b01      	cmp	r3, #1
 80091e4:	d00a      	beq.n	80091fc <USBD_LL_SetupStage+0x5e>
 80091e6:	e01d      	b.n	8009224 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80091ee:	4619      	mov	r1, r3
 80091f0:	6878      	ldr	r0, [r7, #4]
 80091f2:	f000 fb5f 	bl	80098b4 <USBD_StdDevReq>
 80091f6:	4603      	mov	r3, r0
 80091f8:	73fb      	strb	r3, [r7, #15]
      break;
 80091fa:	e020      	b.n	800923e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009202:	4619      	mov	r1, r3
 8009204:	6878      	ldr	r0, [r7, #4]
 8009206:	f000 fbc7 	bl	8009998 <USBD_StdItfReq>
 800920a:	4603      	mov	r3, r0
 800920c:	73fb      	strb	r3, [r7, #15]
      break;
 800920e:	e016      	b.n	800923e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009216:	4619      	mov	r1, r3
 8009218:	6878      	ldr	r0, [r7, #4]
 800921a:	f000 fc29 	bl	8009a70 <USBD_StdEPReq>
 800921e:	4603      	mov	r3, r0
 8009220:	73fb      	strb	r3, [r7, #15]
      break;
 8009222:	e00c      	b.n	800923e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800922a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800922e:	b2db      	uxtb	r3, r3
 8009230:	4619      	mov	r1, r3
 8009232:	6878      	ldr	r0, [r7, #4]
 8009234:	f004 ff8a 	bl	800e14c <USBD_LL_StallEP>
 8009238:	4603      	mov	r3, r0
 800923a:	73fb      	strb	r3, [r7, #15]
      break;
 800923c:	bf00      	nop
  }

  return ret;
 800923e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009240:	4618      	mov	r0, r3
 8009242:	3710      	adds	r7, #16
 8009244:	46bd      	mov	sp, r7
 8009246:	bd80      	pop	{r7, pc}

08009248 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009248:	b580      	push	{r7, lr}
 800924a:	b086      	sub	sp, #24
 800924c:	af00      	add	r7, sp, #0
 800924e:	60f8      	str	r0, [r7, #12]
 8009250:	460b      	mov	r3, r1
 8009252:	607a      	str	r2, [r7, #4]
 8009254:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8009256:	2300      	movs	r3, #0
 8009258:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800925a:	7afb      	ldrb	r3, [r7, #11]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d16e      	bne.n	800933e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009266:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800926e:	2b03      	cmp	r3, #3
 8009270:	f040 8098 	bne.w	80093a4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8009274:	693b      	ldr	r3, [r7, #16]
 8009276:	689a      	ldr	r2, [r3, #8]
 8009278:	693b      	ldr	r3, [r7, #16]
 800927a:	68db      	ldr	r3, [r3, #12]
 800927c:	429a      	cmp	r2, r3
 800927e:	d913      	bls.n	80092a8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8009280:	693b      	ldr	r3, [r7, #16]
 8009282:	689a      	ldr	r2, [r3, #8]
 8009284:	693b      	ldr	r3, [r7, #16]
 8009286:	68db      	ldr	r3, [r3, #12]
 8009288:	1ad2      	subs	r2, r2, r3
 800928a:	693b      	ldr	r3, [r7, #16]
 800928c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800928e:	693b      	ldr	r3, [r7, #16]
 8009290:	68da      	ldr	r2, [r3, #12]
 8009292:	693b      	ldr	r3, [r7, #16]
 8009294:	689b      	ldr	r3, [r3, #8]
 8009296:	4293      	cmp	r3, r2
 8009298:	bf28      	it	cs
 800929a:	4613      	movcs	r3, r2
 800929c:	461a      	mov	r2, r3
 800929e:	6879      	ldr	r1, [r7, #4]
 80092a0:	68f8      	ldr	r0, [r7, #12]
 80092a2:	f001 f984 	bl	800a5ae <USBD_CtlContinueRx>
 80092a6:	e07d      	b.n	80093a4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80092ae:	f003 031f 	and.w	r3, r3, #31
 80092b2:	2b02      	cmp	r3, #2
 80092b4:	d014      	beq.n	80092e0 <USBD_LL_DataOutStage+0x98>
 80092b6:	2b02      	cmp	r3, #2
 80092b8:	d81d      	bhi.n	80092f6 <USBD_LL_DataOutStage+0xae>
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d002      	beq.n	80092c4 <USBD_LL_DataOutStage+0x7c>
 80092be:	2b01      	cmp	r3, #1
 80092c0:	d003      	beq.n	80092ca <USBD_LL_DataOutStage+0x82>
 80092c2:	e018      	b.n	80092f6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80092c4:	2300      	movs	r3, #0
 80092c6:	75bb      	strb	r3, [r7, #22]
            break;
 80092c8:	e018      	b.n	80092fc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80092d0:	b2db      	uxtb	r3, r3
 80092d2:	4619      	mov	r1, r3
 80092d4:	68f8      	ldr	r0, [r7, #12]
 80092d6:	f000 fa5e 	bl	8009796 <USBD_CoreFindIF>
 80092da:	4603      	mov	r3, r0
 80092dc:	75bb      	strb	r3, [r7, #22]
            break;
 80092de:	e00d      	b.n	80092fc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80092e6:	b2db      	uxtb	r3, r3
 80092e8:	4619      	mov	r1, r3
 80092ea:	68f8      	ldr	r0, [r7, #12]
 80092ec:	f000 fa60 	bl	80097b0 <USBD_CoreFindEP>
 80092f0:	4603      	mov	r3, r0
 80092f2:	75bb      	strb	r3, [r7, #22]
            break;
 80092f4:	e002      	b.n	80092fc <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80092f6:	2300      	movs	r3, #0
 80092f8:	75bb      	strb	r3, [r7, #22]
            break;
 80092fa:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80092fc:	7dbb      	ldrb	r3, [r7, #22]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d119      	bne.n	8009336 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009308:	b2db      	uxtb	r3, r3
 800930a:	2b03      	cmp	r3, #3
 800930c:	d113      	bne.n	8009336 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800930e:	7dba      	ldrb	r2, [r7, #22]
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	32ae      	adds	r2, #174	; 0xae
 8009314:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009318:	691b      	ldr	r3, [r3, #16]
 800931a:	2b00      	cmp	r3, #0
 800931c:	d00b      	beq.n	8009336 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800931e:	7dba      	ldrb	r2, [r7, #22]
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8009326:	7dba      	ldrb	r2, [r7, #22]
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	32ae      	adds	r2, #174	; 0xae
 800932c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009330:	691b      	ldr	r3, [r3, #16]
 8009332:	68f8      	ldr	r0, [r7, #12]
 8009334:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009336:	68f8      	ldr	r0, [r7, #12]
 8009338:	f001 f94a 	bl	800a5d0 <USBD_CtlSendStatus>
 800933c:	e032      	b.n	80093a4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800933e:	7afb      	ldrb	r3, [r7, #11]
 8009340:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009344:	b2db      	uxtb	r3, r3
 8009346:	4619      	mov	r1, r3
 8009348:	68f8      	ldr	r0, [r7, #12]
 800934a:	f000 fa31 	bl	80097b0 <USBD_CoreFindEP>
 800934e:	4603      	mov	r3, r0
 8009350:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009352:	7dbb      	ldrb	r3, [r7, #22]
 8009354:	2bff      	cmp	r3, #255	; 0xff
 8009356:	d025      	beq.n	80093a4 <USBD_LL_DataOutStage+0x15c>
 8009358:	7dbb      	ldrb	r3, [r7, #22]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d122      	bne.n	80093a4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009364:	b2db      	uxtb	r3, r3
 8009366:	2b03      	cmp	r3, #3
 8009368:	d117      	bne.n	800939a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800936a:	7dba      	ldrb	r2, [r7, #22]
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	32ae      	adds	r2, #174	; 0xae
 8009370:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009374:	699b      	ldr	r3, [r3, #24]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d00f      	beq.n	800939a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800937a:	7dba      	ldrb	r2, [r7, #22]
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8009382:	7dba      	ldrb	r2, [r7, #22]
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	32ae      	adds	r2, #174	; 0xae
 8009388:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800938c:	699b      	ldr	r3, [r3, #24]
 800938e:	7afa      	ldrb	r2, [r7, #11]
 8009390:	4611      	mov	r1, r2
 8009392:	68f8      	ldr	r0, [r7, #12]
 8009394:	4798      	blx	r3
 8009396:	4603      	mov	r3, r0
 8009398:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800939a:	7dfb      	ldrb	r3, [r7, #23]
 800939c:	2b00      	cmp	r3, #0
 800939e:	d001      	beq.n	80093a4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80093a0:	7dfb      	ldrb	r3, [r7, #23]
 80093a2:	e000      	b.n	80093a6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80093a4:	2300      	movs	r3, #0
}
 80093a6:	4618      	mov	r0, r3
 80093a8:	3718      	adds	r7, #24
 80093aa:	46bd      	mov	sp, r7
 80093ac:	bd80      	pop	{r7, pc}

080093ae <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80093ae:	b580      	push	{r7, lr}
 80093b0:	b086      	sub	sp, #24
 80093b2:	af00      	add	r7, sp, #0
 80093b4:	60f8      	str	r0, [r7, #12]
 80093b6:	460b      	mov	r3, r1
 80093b8:	607a      	str	r2, [r7, #4]
 80093ba:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80093bc:	7afb      	ldrb	r3, [r7, #11]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d16f      	bne.n	80094a2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	3314      	adds	r3, #20
 80093c6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80093ce:	2b02      	cmp	r3, #2
 80093d0:	d15a      	bne.n	8009488 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80093d2:	693b      	ldr	r3, [r7, #16]
 80093d4:	689a      	ldr	r2, [r3, #8]
 80093d6:	693b      	ldr	r3, [r7, #16]
 80093d8:	68db      	ldr	r3, [r3, #12]
 80093da:	429a      	cmp	r2, r3
 80093dc:	d914      	bls.n	8009408 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80093de:	693b      	ldr	r3, [r7, #16]
 80093e0:	689a      	ldr	r2, [r3, #8]
 80093e2:	693b      	ldr	r3, [r7, #16]
 80093e4:	68db      	ldr	r3, [r3, #12]
 80093e6:	1ad2      	subs	r2, r2, r3
 80093e8:	693b      	ldr	r3, [r7, #16]
 80093ea:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80093ec:	693b      	ldr	r3, [r7, #16]
 80093ee:	689b      	ldr	r3, [r3, #8]
 80093f0:	461a      	mov	r2, r3
 80093f2:	6879      	ldr	r1, [r7, #4]
 80093f4:	68f8      	ldr	r0, [r7, #12]
 80093f6:	f001 f8ac 	bl	800a552 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80093fa:	2300      	movs	r3, #0
 80093fc:	2200      	movs	r2, #0
 80093fe:	2100      	movs	r1, #0
 8009400:	68f8      	ldr	r0, [r7, #12]
 8009402:	f004 ff4d 	bl	800e2a0 <USBD_LL_PrepareReceive>
 8009406:	e03f      	b.n	8009488 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009408:	693b      	ldr	r3, [r7, #16]
 800940a:	68da      	ldr	r2, [r3, #12]
 800940c:	693b      	ldr	r3, [r7, #16]
 800940e:	689b      	ldr	r3, [r3, #8]
 8009410:	429a      	cmp	r2, r3
 8009412:	d11c      	bne.n	800944e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009414:	693b      	ldr	r3, [r7, #16]
 8009416:	685a      	ldr	r2, [r3, #4]
 8009418:	693b      	ldr	r3, [r7, #16]
 800941a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800941c:	429a      	cmp	r2, r3
 800941e:	d316      	bcc.n	800944e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009420:	693b      	ldr	r3, [r7, #16]
 8009422:	685a      	ldr	r2, [r3, #4]
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800942a:	429a      	cmp	r2, r3
 800942c:	d20f      	bcs.n	800944e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800942e:	2200      	movs	r2, #0
 8009430:	2100      	movs	r1, #0
 8009432:	68f8      	ldr	r0, [r7, #12]
 8009434:	f001 f88d 	bl	800a552 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	2200      	movs	r2, #0
 800943c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009440:	2300      	movs	r3, #0
 8009442:	2200      	movs	r2, #0
 8009444:	2100      	movs	r1, #0
 8009446:	68f8      	ldr	r0, [r7, #12]
 8009448:	f004 ff2a 	bl	800e2a0 <USBD_LL_PrepareReceive>
 800944c:	e01c      	b.n	8009488 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009454:	b2db      	uxtb	r3, r3
 8009456:	2b03      	cmp	r3, #3
 8009458:	d10f      	bne.n	800947a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009460:	68db      	ldr	r3, [r3, #12]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d009      	beq.n	800947a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	2200      	movs	r2, #0
 800946a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009474:	68db      	ldr	r3, [r3, #12]
 8009476:	68f8      	ldr	r0, [r7, #12]
 8009478:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800947a:	2180      	movs	r1, #128	; 0x80
 800947c:	68f8      	ldr	r0, [r7, #12]
 800947e:	f004 fe65 	bl	800e14c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009482:	68f8      	ldr	r0, [r7, #12]
 8009484:	f001 f8b7 	bl	800a5f6 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800948e:	2b00      	cmp	r3, #0
 8009490:	d03a      	beq.n	8009508 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8009492:	68f8      	ldr	r0, [r7, #12]
 8009494:	f7ff fe42 	bl	800911c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	2200      	movs	r2, #0
 800949c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80094a0:	e032      	b.n	8009508 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80094a2:	7afb      	ldrb	r3, [r7, #11]
 80094a4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80094a8:	b2db      	uxtb	r3, r3
 80094aa:	4619      	mov	r1, r3
 80094ac:	68f8      	ldr	r0, [r7, #12]
 80094ae:	f000 f97f 	bl	80097b0 <USBD_CoreFindEP>
 80094b2:	4603      	mov	r3, r0
 80094b4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80094b6:	7dfb      	ldrb	r3, [r7, #23]
 80094b8:	2bff      	cmp	r3, #255	; 0xff
 80094ba:	d025      	beq.n	8009508 <USBD_LL_DataInStage+0x15a>
 80094bc:	7dfb      	ldrb	r3, [r7, #23]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d122      	bne.n	8009508 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094c8:	b2db      	uxtb	r3, r3
 80094ca:	2b03      	cmp	r3, #3
 80094cc:	d11c      	bne.n	8009508 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80094ce:	7dfa      	ldrb	r2, [r7, #23]
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	32ae      	adds	r2, #174	; 0xae
 80094d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094d8:	695b      	ldr	r3, [r3, #20]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d014      	beq.n	8009508 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80094de:	7dfa      	ldrb	r2, [r7, #23]
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80094e6:	7dfa      	ldrb	r2, [r7, #23]
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	32ae      	adds	r2, #174	; 0xae
 80094ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094f0:	695b      	ldr	r3, [r3, #20]
 80094f2:	7afa      	ldrb	r2, [r7, #11]
 80094f4:	4611      	mov	r1, r2
 80094f6:	68f8      	ldr	r0, [r7, #12]
 80094f8:	4798      	blx	r3
 80094fa:	4603      	mov	r3, r0
 80094fc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80094fe:	7dbb      	ldrb	r3, [r7, #22]
 8009500:	2b00      	cmp	r3, #0
 8009502:	d001      	beq.n	8009508 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8009504:	7dbb      	ldrb	r3, [r7, #22]
 8009506:	e000      	b.n	800950a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8009508:	2300      	movs	r3, #0
}
 800950a:	4618      	mov	r0, r3
 800950c:	3718      	adds	r7, #24
 800950e:	46bd      	mov	sp, r7
 8009510:	bd80      	pop	{r7, pc}

08009512 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009512:	b580      	push	{r7, lr}
 8009514:	b084      	sub	sp, #16
 8009516:	af00      	add	r7, sp, #0
 8009518:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800951a:	2300      	movs	r3, #0
 800951c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	2201      	movs	r2, #1
 8009522:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	2200      	movs	r2, #0
 800952a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	2200      	movs	r2, #0
 8009532:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2200      	movs	r2, #0
 8009538:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	2200      	movs	r2, #0
 8009540:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800954a:	2b00      	cmp	r3, #0
 800954c:	d014      	beq.n	8009578 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009554:	685b      	ldr	r3, [r3, #4]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d00e      	beq.n	8009578 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009560:	685b      	ldr	r3, [r3, #4]
 8009562:	687a      	ldr	r2, [r7, #4]
 8009564:	6852      	ldr	r2, [r2, #4]
 8009566:	b2d2      	uxtb	r2, r2
 8009568:	4611      	mov	r1, r2
 800956a:	6878      	ldr	r0, [r7, #4]
 800956c:	4798      	blx	r3
 800956e:	4603      	mov	r3, r0
 8009570:	2b00      	cmp	r3, #0
 8009572:	d001      	beq.n	8009578 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8009574:	2303      	movs	r3, #3
 8009576:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009578:	2340      	movs	r3, #64	; 0x40
 800957a:	2200      	movs	r2, #0
 800957c:	2100      	movs	r1, #0
 800957e:	6878      	ldr	r0, [r7, #4]
 8009580:	f004 fd9f 	bl	800e0c2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	2201      	movs	r2, #1
 8009588:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	2240      	movs	r2, #64	; 0x40
 8009590:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009594:	2340      	movs	r3, #64	; 0x40
 8009596:	2200      	movs	r2, #0
 8009598:	2180      	movs	r1, #128	; 0x80
 800959a:	6878      	ldr	r0, [r7, #4]
 800959c:	f004 fd91 	bl	800e0c2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	2201      	movs	r2, #1
 80095a4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	2240      	movs	r2, #64	; 0x40
 80095aa:	621a      	str	r2, [r3, #32]

  return ret;
 80095ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80095ae:	4618      	mov	r0, r3
 80095b0:	3710      	adds	r7, #16
 80095b2:	46bd      	mov	sp, r7
 80095b4:	bd80      	pop	{r7, pc}

080095b6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80095b6:	b480      	push	{r7}
 80095b8:	b083      	sub	sp, #12
 80095ba:	af00      	add	r7, sp, #0
 80095bc:	6078      	str	r0, [r7, #4]
 80095be:	460b      	mov	r3, r1
 80095c0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	78fa      	ldrb	r2, [r7, #3]
 80095c6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80095c8:	2300      	movs	r3, #0
}
 80095ca:	4618      	mov	r0, r3
 80095cc:	370c      	adds	r7, #12
 80095ce:	46bd      	mov	sp, r7
 80095d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d4:	4770      	bx	lr

080095d6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80095d6:	b480      	push	{r7}
 80095d8:	b083      	sub	sp, #12
 80095da:	af00      	add	r7, sp, #0
 80095dc:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095e4:	b2da      	uxtb	r2, r3
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	2204      	movs	r2, #4
 80095f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80095f4:	2300      	movs	r3, #0
}
 80095f6:	4618      	mov	r0, r3
 80095f8:	370c      	adds	r7, #12
 80095fa:	46bd      	mov	sp, r7
 80095fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009600:	4770      	bx	lr

08009602 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009602:	b480      	push	{r7}
 8009604:	b083      	sub	sp, #12
 8009606:	af00      	add	r7, sp, #0
 8009608:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009610:	b2db      	uxtb	r3, r3
 8009612:	2b04      	cmp	r3, #4
 8009614:	d106      	bne.n	8009624 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800961c:	b2da      	uxtb	r2, r3
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009624:	2300      	movs	r3, #0
}
 8009626:	4618      	mov	r0, r3
 8009628:	370c      	adds	r7, #12
 800962a:	46bd      	mov	sp, r7
 800962c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009630:	4770      	bx	lr

08009632 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009632:	b580      	push	{r7, lr}
 8009634:	b082      	sub	sp, #8
 8009636:	af00      	add	r7, sp, #0
 8009638:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009640:	b2db      	uxtb	r3, r3
 8009642:	2b03      	cmp	r3, #3
 8009644:	d110      	bne.n	8009668 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800964c:	2b00      	cmp	r3, #0
 800964e:	d00b      	beq.n	8009668 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009656:	69db      	ldr	r3, [r3, #28]
 8009658:	2b00      	cmp	r3, #0
 800965a:	d005      	beq.n	8009668 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009662:	69db      	ldr	r3, [r3, #28]
 8009664:	6878      	ldr	r0, [r7, #4]
 8009666:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8009668:	2300      	movs	r3, #0
}
 800966a:	4618      	mov	r0, r3
 800966c:	3708      	adds	r7, #8
 800966e:	46bd      	mov	sp, r7
 8009670:	bd80      	pop	{r7, pc}

08009672 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009672:	b580      	push	{r7, lr}
 8009674:	b082      	sub	sp, #8
 8009676:	af00      	add	r7, sp, #0
 8009678:	6078      	str	r0, [r7, #4]
 800967a:	460b      	mov	r3, r1
 800967c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	32ae      	adds	r2, #174	; 0xae
 8009688:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d101      	bne.n	8009694 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8009690:	2303      	movs	r3, #3
 8009692:	e01c      	b.n	80096ce <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800969a:	b2db      	uxtb	r3, r3
 800969c:	2b03      	cmp	r3, #3
 800969e:	d115      	bne.n	80096cc <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	32ae      	adds	r2, #174	; 0xae
 80096aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096ae:	6a1b      	ldr	r3, [r3, #32]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d00b      	beq.n	80096cc <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	32ae      	adds	r2, #174	; 0xae
 80096be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096c2:	6a1b      	ldr	r3, [r3, #32]
 80096c4:	78fa      	ldrb	r2, [r7, #3]
 80096c6:	4611      	mov	r1, r2
 80096c8:	6878      	ldr	r0, [r7, #4]
 80096ca:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80096cc:	2300      	movs	r3, #0
}
 80096ce:	4618      	mov	r0, r3
 80096d0:	3708      	adds	r7, #8
 80096d2:	46bd      	mov	sp, r7
 80096d4:	bd80      	pop	{r7, pc}

080096d6 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80096d6:	b580      	push	{r7, lr}
 80096d8:	b082      	sub	sp, #8
 80096da:	af00      	add	r7, sp, #0
 80096dc:	6078      	str	r0, [r7, #4]
 80096de:	460b      	mov	r3, r1
 80096e0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	32ae      	adds	r2, #174	; 0xae
 80096ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d101      	bne.n	80096f8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80096f4:	2303      	movs	r3, #3
 80096f6:	e01c      	b.n	8009732 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096fe:	b2db      	uxtb	r3, r3
 8009700:	2b03      	cmp	r3, #3
 8009702:	d115      	bne.n	8009730 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	32ae      	adds	r2, #174	; 0xae
 800970e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009714:	2b00      	cmp	r3, #0
 8009716:	d00b      	beq.n	8009730 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	32ae      	adds	r2, #174	; 0xae
 8009722:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009728:	78fa      	ldrb	r2, [r7, #3]
 800972a:	4611      	mov	r1, r2
 800972c:	6878      	ldr	r0, [r7, #4]
 800972e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009730:	2300      	movs	r3, #0
}
 8009732:	4618      	mov	r0, r3
 8009734:	3708      	adds	r7, #8
 8009736:	46bd      	mov	sp, r7
 8009738:	bd80      	pop	{r7, pc}

0800973a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800973a:	b480      	push	{r7}
 800973c:	b083      	sub	sp, #12
 800973e:	af00      	add	r7, sp, #0
 8009740:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009742:	2300      	movs	r3, #0
}
 8009744:	4618      	mov	r0, r3
 8009746:	370c      	adds	r7, #12
 8009748:	46bd      	mov	sp, r7
 800974a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974e:	4770      	bx	lr

08009750 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009750:	b580      	push	{r7, lr}
 8009752:	b084      	sub	sp, #16
 8009754:	af00      	add	r7, sp, #0
 8009756:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8009758:	2300      	movs	r3, #0
 800975a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	2201      	movs	r2, #1
 8009760:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800976a:	2b00      	cmp	r3, #0
 800976c:	d00e      	beq.n	800978c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009774:	685b      	ldr	r3, [r3, #4]
 8009776:	687a      	ldr	r2, [r7, #4]
 8009778:	6852      	ldr	r2, [r2, #4]
 800977a:	b2d2      	uxtb	r2, r2
 800977c:	4611      	mov	r1, r2
 800977e:	6878      	ldr	r0, [r7, #4]
 8009780:	4798      	blx	r3
 8009782:	4603      	mov	r3, r0
 8009784:	2b00      	cmp	r3, #0
 8009786:	d001      	beq.n	800978c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8009788:	2303      	movs	r3, #3
 800978a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800978c:	7bfb      	ldrb	r3, [r7, #15]
}
 800978e:	4618      	mov	r0, r3
 8009790:	3710      	adds	r7, #16
 8009792:	46bd      	mov	sp, r7
 8009794:	bd80      	pop	{r7, pc}

08009796 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009796:	b480      	push	{r7}
 8009798:	b083      	sub	sp, #12
 800979a:	af00      	add	r7, sp, #0
 800979c:	6078      	str	r0, [r7, #4]
 800979e:	460b      	mov	r3, r1
 80097a0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80097a2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80097a4:	4618      	mov	r0, r3
 80097a6:	370c      	adds	r7, #12
 80097a8:	46bd      	mov	sp, r7
 80097aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ae:	4770      	bx	lr

080097b0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80097b0:	b480      	push	{r7}
 80097b2:	b083      	sub	sp, #12
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
 80097b8:	460b      	mov	r3, r1
 80097ba:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80097bc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80097be:	4618      	mov	r0, r3
 80097c0:	370c      	adds	r7, #12
 80097c2:	46bd      	mov	sp, r7
 80097c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c8:	4770      	bx	lr

080097ca <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80097ca:	b580      	push	{r7, lr}
 80097cc:	b086      	sub	sp, #24
 80097ce:	af00      	add	r7, sp, #0
 80097d0:	6078      	str	r0, [r7, #4]
 80097d2:	460b      	mov	r3, r1
 80097d4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80097de:	2300      	movs	r3, #0
 80097e0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	885b      	ldrh	r3, [r3, #2]
 80097e6:	b29a      	uxth	r2, r3
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	781b      	ldrb	r3, [r3, #0]
 80097ec:	b29b      	uxth	r3, r3
 80097ee:	429a      	cmp	r2, r3
 80097f0:	d920      	bls.n	8009834 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	781b      	ldrb	r3, [r3, #0]
 80097f6:	b29b      	uxth	r3, r3
 80097f8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80097fa:	e013      	b.n	8009824 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80097fc:	f107 030a 	add.w	r3, r7, #10
 8009800:	4619      	mov	r1, r3
 8009802:	6978      	ldr	r0, [r7, #20]
 8009804:	f000 f81b 	bl	800983e <USBD_GetNextDesc>
 8009808:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800980a:	697b      	ldr	r3, [r7, #20]
 800980c:	785b      	ldrb	r3, [r3, #1]
 800980e:	2b05      	cmp	r3, #5
 8009810:	d108      	bne.n	8009824 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8009812:	697b      	ldr	r3, [r7, #20]
 8009814:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8009816:	693b      	ldr	r3, [r7, #16]
 8009818:	789b      	ldrb	r3, [r3, #2]
 800981a:	78fa      	ldrb	r2, [r7, #3]
 800981c:	429a      	cmp	r2, r3
 800981e:	d008      	beq.n	8009832 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8009820:	2300      	movs	r3, #0
 8009822:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	885b      	ldrh	r3, [r3, #2]
 8009828:	b29a      	uxth	r2, r3
 800982a:	897b      	ldrh	r3, [r7, #10]
 800982c:	429a      	cmp	r2, r3
 800982e:	d8e5      	bhi.n	80097fc <USBD_GetEpDesc+0x32>
 8009830:	e000      	b.n	8009834 <USBD_GetEpDesc+0x6a>
          break;
 8009832:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8009834:	693b      	ldr	r3, [r7, #16]
}
 8009836:	4618      	mov	r0, r3
 8009838:	3718      	adds	r7, #24
 800983a:	46bd      	mov	sp, r7
 800983c:	bd80      	pop	{r7, pc}

0800983e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800983e:	b480      	push	{r7}
 8009840:	b085      	sub	sp, #20
 8009842:	af00      	add	r7, sp, #0
 8009844:	6078      	str	r0, [r7, #4]
 8009846:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800984c:	683b      	ldr	r3, [r7, #0]
 800984e:	881a      	ldrh	r2, [r3, #0]
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	781b      	ldrb	r3, [r3, #0]
 8009854:	b29b      	uxth	r3, r3
 8009856:	4413      	add	r3, r2
 8009858:	b29a      	uxth	r2, r3
 800985a:	683b      	ldr	r3, [r7, #0]
 800985c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	781b      	ldrb	r3, [r3, #0]
 8009862:	461a      	mov	r2, r3
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	4413      	add	r3, r2
 8009868:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800986a:	68fb      	ldr	r3, [r7, #12]
}
 800986c:	4618      	mov	r0, r3
 800986e:	3714      	adds	r7, #20
 8009870:	46bd      	mov	sp, r7
 8009872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009876:	4770      	bx	lr

08009878 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009878:	b480      	push	{r7}
 800987a:	b087      	sub	sp, #28
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009884:	697b      	ldr	r3, [r7, #20]
 8009886:	781b      	ldrb	r3, [r3, #0]
 8009888:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800988a:	697b      	ldr	r3, [r7, #20]
 800988c:	3301      	adds	r3, #1
 800988e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009890:	697b      	ldr	r3, [r7, #20]
 8009892:	781b      	ldrb	r3, [r3, #0]
 8009894:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009896:	8a3b      	ldrh	r3, [r7, #16]
 8009898:	021b      	lsls	r3, r3, #8
 800989a:	b21a      	sxth	r2, r3
 800989c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80098a0:	4313      	orrs	r3, r2
 80098a2:	b21b      	sxth	r3, r3
 80098a4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80098a6:	89fb      	ldrh	r3, [r7, #14]
}
 80098a8:	4618      	mov	r0, r3
 80098aa:	371c      	adds	r7, #28
 80098ac:	46bd      	mov	sp, r7
 80098ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b2:	4770      	bx	lr

080098b4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80098b4:	b580      	push	{r7, lr}
 80098b6:	b084      	sub	sp, #16
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	6078      	str	r0, [r7, #4]
 80098bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80098be:	2300      	movs	r3, #0
 80098c0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80098c2:	683b      	ldr	r3, [r7, #0]
 80098c4:	781b      	ldrb	r3, [r3, #0]
 80098c6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80098ca:	2b40      	cmp	r3, #64	; 0x40
 80098cc:	d005      	beq.n	80098da <USBD_StdDevReq+0x26>
 80098ce:	2b40      	cmp	r3, #64	; 0x40
 80098d0:	d857      	bhi.n	8009982 <USBD_StdDevReq+0xce>
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d00f      	beq.n	80098f6 <USBD_StdDevReq+0x42>
 80098d6:	2b20      	cmp	r3, #32
 80098d8:	d153      	bne.n	8009982 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	32ae      	adds	r2, #174	; 0xae
 80098e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098e8:	689b      	ldr	r3, [r3, #8]
 80098ea:	6839      	ldr	r1, [r7, #0]
 80098ec:	6878      	ldr	r0, [r7, #4]
 80098ee:	4798      	blx	r3
 80098f0:	4603      	mov	r3, r0
 80098f2:	73fb      	strb	r3, [r7, #15]
      break;
 80098f4:	e04a      	b.n	800998c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80098f6:	683b      	ldr	r3, [r7, #0]
 80098f8:	785b      	ldrb	r3, [r3, #1]
 80098fa:	2b09      	cmp	r3, #9
 80098fc:	d83b      	bhi.n	8009976 <USBD_StdDevReq+0xc2>
 80098fe:	a201      	add	r2, pc, #4	; (adr r2, 8009904 <USBD_StdDevReq+0x50>)
 8009900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009904:	08009959 	.word	0x08009959
 8009908:	0800996d 	.word	0x0800996d
 800990c:	08009977 	.word	0x08009977
 8009910:	08009963 	.word	0x08009963
 8009914:	08009977 	.word	0x08009977
 8009918:	08009937 	.word	0x08009937
 800991c:	0800992d 	.word	0x0800992d
 8009920:	08009977 	.word	0x08009977
 8009924:	0800994f 	.word	0x0800994f
 8009928:	08009941 	.word	0x08009941
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800992c:	6839      	ldr	r1, [r7, #0]
 800992e:	6878      	ldr	r0, [r7, #4]
 8009930:	f000 fa3c 	bl	8009dac <USBD_GetDescriptor>
          break;
 8009934:	e024      	b.n	8009980 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009936:	6839      	ldr	r1, [r7, #0]
 8009938:	6878      	ldr	r0, [r7, #4]
 800993a:	f000 fba1 	bl	800a080 <USBD_SetAddress>
          break;
 800993e:	e01f      	b.n	8009980 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009940:	6839      	ldr	r1, [r7, #0]
 8009942:	6878      	ldr	r0, [r7, #4]
 8009944:	f000 fbe0 	bl	800a108 <USBD_SetConfig>
 8009948:	4603      	mov	r3, r0
 800994a:	73fb      	strb	r3, [r7, #15]
          break;
 800994c:	e018      	b.n	8009980 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800994e:	6839      	ldr	r1, [r7, #0]
 8009950:	6878      	ldr	r0, [r7, #4]
 8009952:	f000 fc83 	bl	800a25c <USBD_GetConfig>
          break;
 8009956:	e013      	b.n	8009980 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009958:	6839      	ldr	r1, [r7, #0]
 800995a:	6878      	ldr	r0, [r7, #4]
 800995c:	f000 fcb4 	bl	800a2c8 <USBD_GetStatus>
          break;
 8009960:	e00e      	b.n	8009980 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009962:	6839      	ldr	r1, [r7, #0]
 8009964:	6878      	ldr	r0, [r7, #4]
 8009966:	f000 fce3 	bl	800a330 <USBD_SetFeature>
          break;
 800996a:	e009      	b.n	8009980 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800996c:	6839      	ldr	r1, [r7, #0]
 800996e:	6878      	ldr	r0, [r7, #4]
 8009970:	f000 fd07 	bl	800a382 <USBD_ClrFeature>
          break;
 8009974:	e004      	b.n	8009980 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8009976:	6839      	ldr	r1, [r7, #0]
 8009978:	6878      	ldr	r0, [r7, #4]
 800997a:	f000 fd5e 	bl	800a43a <USBD_CtlError>
          break;
 800997e:	bf00      	nop
      }
      break;
 8009980:	e004      	b.n	800998c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8009982:	6839      	ldr	r1, [r7, #0]
 8009984:	6878      	ldr	r0, [r7, #4]
 8009986:	f000 fd58 	bl	800a43a <USBD_CtlError>
      break;
 800998a:	bf00      	nop
  }

  return ret;
 800998c:	7bfb      	ldrb	r3, [r7, #15]
}
 800998e:	4618      	mov	r0, r3
 8009990:	3710      	adds	r7, #16
 8009992:	46bd      	mov	sp, r7
 8009994:	bd80      	pop	{r7, pc}
 8009996:	bf00      	nop

08009998 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009998:	b580      	push	{r7, lr}
 800999a:	b084      	sub	sp, #16
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
 80099a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80099a2:	2300      	movs	r3, #0
 80099a4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80099a6:	683b      	ldr	r3, [r7, #0]
 80099a8:	781b      	ldrb	r3, [r3, #0]
 80099aa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80099ae:	2b40      	cmp	r3, #64	; 0x40
 80099b0:	d005      	beq.n	80099be <USBD_StdItfReq+0x26>
 80099b2:	2b40      	cmp	r3, #64	; 0x40
 80099b4:	d852      	bhi.n	8009a5c <USBD_StdItfReq+0xc4>
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d001      	beq.n	80099be <USBD_StdItfReq+0x26>
 80099ba:	2b20      	cmp	r3, #32
 80099bc:	d14e      	bne.n	8009a5c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80099c4:	b2db      	uxtb	r3, r3
 80099c6:	3b01      	subs	r3, #1
 80099c8:	2b02      	cmp	r3, #2
 80099ca:	d840      	bhi.n	8009a4e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80099cc:	683b      	ldr	r3, [r7, #0]
 80099ce:	889b      	ldrh	r3, [r3, #4]
 80099d0:	b2db      	uxtb	r3, r3
 80099d2:	2b01      	cmp	r3, #1
 80099d4:	d836      	bhi.n	8009a44 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80099d6:	683b      	ldr	r3, [r7, #0]
 80099d8:	889b      	ldrh	r3, [r3, #4]
 80099da:	b2db      	uxtb	r3, r3
 80099dc:	4619      	mov	r1, r3
 80099de:	6878      	ldr	r0, [r7, #4]
 80099e0:	f7ff fed9 	bl	8009796 <USBD_CoreFindIF>
 80099e4:	4603      	mov	r3, r0
 80099e6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80099e8:	7bbb      	ldrb	r3, [r7, #14]
 80099ea:	2bff      	cmp	r3, #255	; 0xff
 80099ec:	d01d      	beq.n	8009a2a <USBD_StdItfReq+0x92>
 80099ee:	7bbb      	ldrb	r3, [r7, #14]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d11a      	bne.n	8009a2a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80099f4:	7bba      	ldrb	r2, [r7, #14]
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	32ae      	adds	r2, #174	; 0xae
 80099fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099fe:	689b      	ldr	r3, [r3, #8]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d00f      	beq.n	8009a24 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009a04:	7bba      	ldrb	r2, [r7, #14]
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009a0c:	7bba      	ldrb	r2, [r7, #14]
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	32ae      	adds	r2, #174	; 0xae
 8009a12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a16:	689b      	ldr	r3, [r3, #8]
 8009a18:	6839      	ldr	r1, [r7, #0]
 8009a1a:	6878      	ldr	r0, [r7, #4]
 8009a1c:	4798      	blx	r3
 8009a1e:	4603      	mov	r3, r0
 8009a20:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009a22:	e004      	b.n	8009a2e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009a24:	2303      	movs	r3, #3
 8009a26:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009a28:	e001      	b.n	8009a2e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8009a2a:	2303      	movs	r3, #3
 8009a2c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009a2e:	683b      	ldr	r3, [r7, #0]
 8009a30:	88db      	ldrh	r3, [r3, #6]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d110      	bne.n	8009a58 <USBD_StdItfReq+0xc0>
 8009a36:	7bfb      	ldrb	r3, [r7, #15]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d10d      	bne.n	8009a58 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009a3c:	6878      	ldr	r0, [r7, #4]
 8009a3e:	f000 fdc7 	bl	800a5d0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009a42:	e009      	b.n	8009a58 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009a44:	6839      	ldr	r1, [r7, #0]
 8009a46:	6878      	ldr	r0, [r7, #4]
 8009a48:	f000 fcf7 	bl	800a43a <USBD_CtlError>
          break;
 8009a4c:	e004      	b.n	8009a58 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8009a4e:	6839      	ldr	r1, [r7, #0]
 8009a50:	6878      	ldr	r0, [r7, #4]
 8009a52:	f000 fcf2 	bl	800a43a <USBD_CtlError>
          break;
 8009a56:	e000      	b.n	8009a5a <USBD_StdItfReq+0xc2>
          break;
 8009a58:	bf00      	nop
      }
      break;
 8009a5a:	e004      	b.n	8009a66 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009a5c:	6839      	ldr	r1, [r7, #0]
 8009a5e:	6878      	ldr	r0, [r7, #4]
 8009a60:	f000 fceb 	bl	800a43a <USBD_CtlError>
      break;
 8009a64:	bf00      	nop
  }

  return ret;
 8009a66:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a68:	4618      	mov	r0, r3
 8009a6a:	3710      	adds	r7, #16
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	bd80      	pop	{r7, pc}

08009a70 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b084      	sub	sp, #16
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
 8009a78:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8009a7e:	683b      	ldr	r3, [r7, #0]
 8009a80:	889b      	ldrh	r3, [r3, #4]
 8009a82:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009a84:	683b      	ldr	r3, [r7, #0]
 8009a86:	781b      	ldrb	r3, [r3, #0]
 8009a88:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009a8c:	2b40      	cmp	r3, #64	; 0x40
 8009a8e:	d007      	beq.n	8009aa0 <USBD_StdEPReq+0x30>
 8009a90:	2b40      	cmp	r3, #64	; 0x40
 8009a92:	f200 817f 	bhi.w	8009d94 <USBD_StdEPReq+0x324>
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d02a      	beq.n	8009af0 <USBD_StdEPReq+0x80>
 8009a9a:	2b20      	cmp	r3, #32
 8009a9c:	f040 817a 	bne.w	8009d94 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009aa0:	7bbb      	ldrb	r3, [r7, #14]
 8009aa2:	4619      	mov	r1, r3
 8009aa4:	6878      	ldr	r0, [r7, #4]
 8009aa6:	f7ff fe83 	bl	80097b0 <USBD_CoreFindEP>
 8009aaa:	4603      	mov	r3, r0
 8009aac:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009aae:	7b7b      	ldrb	r3, [r7, #13]
 8009ab0:	2bff      	cmp	r3, #255	; 0xff
 8009ab2:	f000 8174 	beq.w	8009d9e <USBD_StdEPReq+0x32e>
 8009ab6:	7b7b      	ldrb	r3, [r7, #13]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	f040 8170 	bne.w	8009d9e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8009abe:	7b7a      	ldrb	r2, [r7, #13]
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8009ac6:	7b7a      	ldrb	r2, [r7, #13]
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	32ae      	adds	r2, #174	; 0xae
 8009acc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ad0:	689b      	ldr	r3, [r3, #8]
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	f000 8163 	beq.w	8009d9e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009ad8:	7b7a      	ldrb	r2, [r7, #13]
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	32ae      	adds	r2, #174	; 0xae
 8009ade:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ae2:	689b      	ldr	r3, [r3, #8]
 8009ae4:	6839      	ldr	r1, [r7, #0]
 8009ae6:	6878      	ldr	r0, [r7, #4]
 8009ae8:	4798      	blx	r3
 8009aea:	4603      	mov	r3, r0
 8009aec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009aee:	e156      	b.n	8009d9e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009af0:	683b      	ldr	r3, [r7, #0]
 8009af2:	785b      	ldrb	r3, [r3, #1]
 8009af4:	2b03      	cmp	r3, #3
 8009af6:	d008      	beq.n	8009b0a <USBD_StdEPReq+0x9a>
 8009af8:	2b03      	cmp	r3, #3
 8009afa:	f300 8145 	bgt.w	8009d88 <USBD_StdEPReq+0x318>
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	f000 809b 	beq.w	8009c3a <USBD_StdEPReq+0x1ca>
 8009b04:	2b01      	cmp	r3, #1
 8009b06:	d03c      	beq.n	8009b82 <USBD_StdEPReq+0x112>
 8009b08:	e13e      	b.n	8009d88 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b10:	b2db      	uxtb	r3, r3
 8009b12:	2b02      	cmp	r3, #2
 8009b14:	d002      	beq.n	8009b1c <USBD_StdEPReq+0xac>
 8009b16:	2b03      	cmp	r3, #3
 8009b18:	d016      	beq.n	8009b48 <USBD_StdEPReq+0xd8>
 8009b1a:	e02c      	b.n	8009b76 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009b1c:	7bbb      	ldrb	r3, [r7, #14]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d00d      	beq.n	8009b3e <USBD_StdEPReq+0xce>
 8009b22:	7bbb      	ldrb	r3, [r7, #14]
 8009b24:	2b80      	cmp	r3, #128	; 0x80
 8009b26:	d00a      	beq.n	8009b3e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009b28:	7bbb      	ldrb	r3, [r7, #14]
 8009b2a:	4619      	mov	r1, r3
 8009b2c:	6878      	ldr	r0, [r7, #4]
 8009b2e:	f004 fb0d 	bl	800e14c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009b32:	2180      	movs	r1, #128	; 0x80
 8009b34:	6878      	ldr	r0, [r7, #4]
 8009b36:	f004 fb09 	bl	800e14c <USBD_LL_StallEP>
 8009b3a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009b3c:	e020      	b.n	8009b80 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8009b3e:	6839      	ldr	r1, [r7, #0]
 8009b40:	6878      	ldr	r0, [r7, #4]
 8009b42:	f000 fc7a 	bl	800a43a <USBD_CtlError>
              break;
 8009b46:	e01b      	b.n	8009b80 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009b48:	683b      	ldr	r3, [r7, #0]
 8009b4a:	885b      	ldrh	r3, [r3, #2]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d10e      	bne.n	8009b6e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009b50:	7bbb      	ldrb	r3, [r7, #14]
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d00b      	beq.n	8009b6e <USBD_StdEPReq+0xfe>
 8009b56:	7bbb      	ldrb	r3, [r7, #14]
 8009b58:	2b80      	cmp	r3, #128	; 0x80
 8009b5a:	d008      	beq.n	8009b6e <USBD_StdEPReq+0xfe>
 8009b5c:	683b      	ldr	r3, [r7, #0]
 8009b5e:	88db      	ldrh	r3, [r3, #6]
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d104      	bne.n	8009b6e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009b64:	7bbb      	ldrb	r3, [r7, #14]
 8009b66:	4619      	mov	r1, r3
 8009b68:	6878      	ldr	r0, [r7, #4]
 8009b6a:	f004 faef 	bl	800e14c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009b6e:	6878      	ldr	r0, [r7, #4]
 8009b70:	f000 fd2e 	bl	800a5d0 <USBD_CtlSendStatus>

              break;
 8009b74:	e004      	b.n	8009b80 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009b76:	6839      	ldr	r1, [r7, #0]
 8009b78:	6878      	ldr	r0, [r7, #4]
 8009b7a:	f000 fc5e 	bl	800a43a <USBD_CtlError>
              break;
 8009b7e:	bf00      	nop
          }
          break;
 8009b80:	e107      	b.n	8009d92 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b88:	b2db      	uxtb	r3, r3
 8009b8a:	2b02      	cmp	r3, #2
 8009b8c:	d002      	beq.n	8009b94 <USBD_StdEPReq+0x124>
 8009b8e:	2b03      	cmp	r3, #3
 8009b90:	d016      	beq.n	8009bc0 <USBD_StdEPReq+0x150>
 8009b92:	e04b      	b.n	8009c2c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009b94:	7bbb      	ldrb	r3, [r7, #14]
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d00d      	beq.n	8009bb6 <USBD_StdEPReq+0x146>
 8009b9a:	7bbb      	ldrb	r3, [r7, #14]
 8009b9c:	2b80      	cmp	r3, #128	; 0x80
 8009b9e:	d00a      	beq.n	8009bb6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009ba0:	7bbb      	ldrb	r3, [r7, #14]
 8009ba2:	4619      	mov	r1, r3
 8009ba4:	6878      	ldr	r0, [r7, #4]
 8009ba6:	f004 fad1 	bl	800e14c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009baa:	2180      	movs	r1, #128	; 0x80
 8009bac:	6878      	ldr	r0, [r7, #4]
 8009bae:	f004 facd 	bl	800e14c <USBD_LL_StallEP>
 8009bb2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009bb4:	e040      	b.n	8009c38 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009bb6:	6839      	ldr	r1, [r7, #0]
 8009bb8:	6878      	ldr	r0, [r7, #4]
 8009bba:	f000 fc3e 	bl	800a43a <USBD_CtlError>
              break;
 8009bbe:	e03b      	b.n	8009c38 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009bc0:	683b      	ldr	r3, [r7, #0]
 8009bc2:	885b      	ldrh	r3, [r3, #2]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d136      	bne.n	8009c36 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009bc8:	7bbb      	ldrb	r3, [r7, #14]
 8009bca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d004      	beq.n	8009bdc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009bd2:	7bbb      	ldrb	r3, [r7, #14]
 8009bd4:	4619      	mov	r1, r3
 8009bd6:	6878      	ldr	r0, [r7, #4]
 8009bd8:	f004 fad7 	bl	800e18a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009bdc:	6878      	ldr	r0, [r7, #4]
 8009bde:	f000 fcf7 	bl	800a5d0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009be2:	7bbb      	ldrb	r3, [r7, #14]
 8009be4:	4619      	mov	r1, r3
 8009be6:	6878      	ldr	r0, [r7, #4]
 8009be8:	f7ff fde2 	bl	80097b0 <USBD_CoreFindEP>
 8009bec:	4603      	mov	r3, r0
 8009bee:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009bf0:	7b7b      	ldrb	r3, [r7, #13]
 8009bf2:	2bff      	cmp	r3, #255	; 0xff
 8009bf4:	d01f      	beq.n	8009c36 <USBD_StdEPReq+0x1c6>
 8009bf6:	7b7b      	ldrb	r3, [r7, #13]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d11c      	bne.n	8009c36 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009bfc:	7b7a      	ldrb	r2, [r7, #13]
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009c04:	7b7a      	ldrb	r2, [r7, #13]
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	32ae      	adds	r2, #174	; 0xae
 8009c0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c0e:	689b      	ldr	r3, [r3, #8]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d010      	beq.n	8009c36 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009c14:	7b7a      	ldrb	r2, [r7, #13]
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	32ae      	adds	r2, #174	; 0xae
 8009c1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c1e:	689b      	ldr	r3, [r3, #8]
 8009c20:	6839      	ldr	r1, [r7, #0]
 8009c22:	6878      	ldr	r0, [r7, #4]
 8009c24:	4798      	blx	r3
 8009c26:	4603      	mov	r3, r0
 8009c28:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009c2a:	e004      	b.n	8009c36 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009c2c:	6839      	ldr	r1, [r7, #0]
 8009c2e:	6878      	ldr	r0, [r7, #4]
 8009c30:	f000 fc03 	bl	800a43a <USBD_CtlError>
              break;
 8009c34:	e000      	b.n	8009c38 <USBD_StdEPReq+0x1c8>
              break;
 8009c36:	bf00      	nop
          }
          break;
 8009c38:	e0ab      	b.n	8009d92 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c40:	b2db      	uxtb	r3, r3
 8009c42:	2b02      	cmp	r3, #2
 8009c44:	d002      	beq.n	8009c4c <USBD_StdEPReq+0x1dc>
 8009c46:	2b03      	cmp	r3, #3
 8009c48:	d032      	beq.n	8009cb0 <USBD_StdEPReq+0x240>
 8009c4a:	e097      	b.n	8009d7c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009c4c:	7bbb      	ldrb	r3, [r7, #14]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d007      	beq.n	8009c62 <USBD_StdEPReq+0x1f2>
 8009c52:	7bbb      	ldrb	r3, [r7, #14]
 8009c54:	2b80      	cmp	r3, #128	; 0x80
 8009c56:	d004      	beq.n	8009c62 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009c58:	6839      	ldr	r1, [r7, #0]
 8009c5a:	6878      	ldr	r0, [r7, #4]
 8009c5c:	f000 fbed 	bl	800a43a <USBD_CtlError>
                break;
 8009c60:	e091      	b.n	8009d86 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009c62:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	da0b      	bge.n	8009c82 <USBD_StdEPReq+0x212>
 8009c6a:	7bbb      	ldrb	r3, [r7, #14]
 8009c6c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009c70:	4613      	mov	r3, r2
 8009c72:	009b      	lsls	r3, r3, #2
 8009c74:	4413      	add	r3, r2
 8009c76:	009b      	lsls	r3, r3, #2
 8009c78:	3310      	adds	r3, #16
 8009c7a:	687a      	ldr	r2, [r7, #4]
 8009c7c:	4413      	add	r3, r2
 8009c7e:	3304      	adds	r3, #4
 8009c80:	e00b      	b.n	8009c9a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009c82:	7bbb      	ldrb	r3, [r7, #14]
 8009c84:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009c88:	4613      	mov	r3, r2
 8009c8a:	009b      	lsls	r3, r3, #2
 8009c8c:	4413      	add	r3, r2
 8009c8e:	009b      	lsls	r3, r3, #2
 8009c90:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009c94:	687a      	ldr	r2, [r7, #4]
 8009c96:	4413      	add	r3, r2
 8009c98:	3304      	adds	r3, #4
 8009c9a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009c9c:	68bb      	ldr	r3, [r7, #8]
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009ca2:	68bb      	ldr	r3, [r7, #8]
 8009ca4:	2202      	movs	r2, #2
 8009ca6:	4619      	mov	r1, r3
 8009ca8:	6878      	ldr	r0, [r7, #4]
 8009caa:	f000 fc37 	bl	800a51c <USBD_CtlSendData>
              break;
 8009cae:	e06a      	b.n	8009d86 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009cb0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	da11      	bge.n	8009cdc <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009cb8:	7bbb      	ldrb	r3, [r7, #14]
 8009cba:	f003 020f 	and.w	r2, r3, #15
 8009cbe:	6879      	ldr	r1, [r7, #4]
 8009cc0:	4613      	mov	r3, r2
 8009cc2:	009b      	lsls	r3, r3, #2
 8009cc4:	4413      	add	r3, r2
 8009cc6:	009b      	lsls	r3, r3, #2
 8009cc8:	440b      	add	r3, r1
 8009cca:	3324      	adds	r3, #36	; 0x24
 8009ccc:	881b      	ldrh	r3, [r3, #0]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d117      	bne.n	8009d02 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009cd2:	6839      	ldr	r1, [r7, #0]
 8009cd4:	6878      	ldr	r0, [r7, #4]
 8009cd6:	f000 fbb0 	bl	800a43a <USBD_CtlError>
                  break;
 8009cda:	e054      	b.n	8009d86 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009cdc:	7bbb      	ldrb	r3, [r7, #14]
 8009cde:	f003 020f 	and.w	r2, r3, #15
 8009ce2:	6879      	ldr	r1, [r7, #4]
 8009ce4:	4613      	mov	r3, r2
 8009ce6:	009b      	lsls	r3, r3, #2
 8009ce8:	4413      	add	r3, r2
 8009cea:	009b      	lsls	r3, r3, #2
 8009cec:	440b      	add	r3, r1
 8009cee:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009cf2:	881b      	ldrh	r3, [r3, #0]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d104      	bne.n	8009d02 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009cf8:	6839      	ldr	r1, [r7, #0]
 8009cfa:	6878      	ldr	r0, [r7, #4]
 8009cfc:	f000 fb9d 	bl	800a43a <USBD_CtlError>
                  break;
 8009d00:	e041      	b.n	8009d86 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009d02:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	da0b      	bge.n	8009d22 <USBD_StdEPReq+0x2b2>
 8009d0a:	7bbb      	ldrb	r3, [r7, #14]
 8009d0c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009d10:	4613      	mov	r3, r2
 8009d12:	009b      	lsls	r3, r3, #2
 8009d14:	4413      	add	r3, r2
 8009d16:	009b      	lsls	r3, r3, #2
 8009d18:	3310      	adds	r3, #16
 8009d1a:	687a      	ldr	r2, [r7, #4]
 8009d1c:	4413      	add	r3, r2
 8009d1e:	3304      	adds	r3, #4
 8009d20:	e00b      	b.n	8009d3a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009d22:	7bbb      	ldrb	r3, [r7, #14]
 8009d24:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009d28:	4613      	mov	r3, r2
 8009d2a:	009b      	lsls	r3, r3, #2
 8009d2c:	4413      	add	r3, r2
 8009d2e:	009b      	lsls	r3, r3, #2
 8009d30:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009d34:	687a      	ldr	r2, [r7, #4]
 8009d36:	4413      	add	r3, r2
 8009d38:	3304      	adds	r3, #4
 8009d3a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009d3c:	7bbb      	ldrb	r3, [r7, #14]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d002      	beq.n	8009d48 <USBD_StdEPReq+0x2d8>
 8009d42:	7bbb      	ldrb	r3, [r7, #14]
 8009d44:	2b80      	cmp	r3, #128	; 0x80
 8009d46:	d103      	bne.n	8009d50 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009d48:	68bb      	ldr	r3, [r7, #8]
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	601a      	str	r2, [r3, #0]
 8009d4e:	e00e      	b.n	8009d6e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009d50:	7bbb      	ldrb	r3, [r7, #14]
 8009d52:	4619      	mov	r1, r3
 8009d54:	6878      	ldr	r0, [r7, #4]
 8009d56:	f004 fa37 	bl	800e1c8 <USBD_LL_IsStallEP>
 8009d5a:	4603      	mov	r3, r0
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d003      	beq.n	8009d68 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009d60:	68bb      	ldr	r3, [r7, #8]
 8009d62:	2201      	movs	r2, #1
 8009d64:	601a      	str	r2, [r3, #0]
 8009d66:	e002      	b.n	8009d6e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009d68:	68bb      	ldr	r3, [r7, #8]
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009d6e:	68bb      	ldr	r3, [r7, #8]
 8009d70:	2202      	movs	r2, #2
 8009d72:	4619      	mov	r1, r3
 8009d74:	6878      	ldr	r0, [r7, #4]
 8009d76:	f000 fbd1 	bl	800a51c <USBD_CtlSendData>
              break;
 8009d7a:	e004      	b.n	8009d86 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009d7c:	6839      	ldr	r1, [r7, #0]
 8009d7e:	6878      	ldr	r0, [r7, #4]
 8009d80:	f000 fb5b 	bl	800a43a <USBD_CtlError>
              break;
 8009d84:	bf00      	nop
          }
          break;
 8009d86:	e004      	b.n	8009d92 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009d88:	6839      	ldr	r1, [r7, #0]
 8009d8a:	6878      	ldr	r0, [r7, #4]
 8009d8c:	f000 fb55 	bl	800a43a <USBD_CtlError>
          break;
 8009d90:	bf00      	nop
      }
      break;
 8009d92:	e005      	b.n	8009da0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009d94:	6839      	ldr	r1, [r7, #0]
 8009d96:	6878      	ldr	r0, [r7, #4]
 8009d98:	f000 fb4f 	bl	800a43a <USBD_CtlError>
      break;
 8009d9c:	e000      	b.n	8009da0 <USBD_StdEPReq+0x330>
      break;
 8009d9e:	bf00      	nop
  }

  return ret;
 8009da0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009da2:	4618      	mov	r0, r3
 8009da4:	3710      	adds	r7, #16
 8009da6:	46bd      	mov	sp, r7
 8009da8:	bd80      	pop	{r7, pc}
	...

08009dac <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009dac:	b580      	push	{r7, lr}
 8009dae:	b084      	sub	sp, #16
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]
 8009db4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009db6:	2300      	movs	r3, #0
 8009db8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009dba:	2300      	movs	r3, #0
 8009dbc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009dc2:	683b      	ldr	r3, [r7, #0]
 8009dc4:	885b      	ldrh	r3, [r3, #2]
 8009dc6:	0a1b      	lsrs	r3, r3, #8
 8009dc8:	b29b      	uxth	r3, r3
 8009dca:	3b01      	subs	r3, #1
 8009dcc:	2b06      	cmp	r3, #6
 8009dce:	f200 8128 	bhi.w	800a022 <USBD_GetDescriptor+0x276>
 8009dd2:	a201      	add	r2, pc, #4	; (adr r2, 8009dd8 <USBD_GetDescriptor+0x2c>)
 8009dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dd8:	08009df5 	.word	0x08009df5
 8009ddc:	08009e0d 	.word	0x08009e0d
 8009de0:	08009e4d 	.word	0x08009e4d
 8009de4:	0800a023 	.word	0x0800a023
 8009de8:	0800a023 	.word	0x0800a023
 8009dec:	08009fc3 	.word	0x08009fc3
 8009df0:	08009fef 	.word	0x08009fef
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	687a      	ldr	r2, [r7, #4]
 8009dfe:	7c12      	ldrb	r2, [r2, #16]
 8009e00:	f107 0108 	add.w	r1, r7, #8
 8009e04:	4610      	mov	r0, r2
 8009e06:	4798      	blx	r3
 8009e08:	60f8      	str	r0, [r7, #12]
      break;
 8009e0a:	e112      	b.n	800a032 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	7c1b      	ldrb	r3, [r3, #16]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d10d      	bne.n	8009e30 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e1c:	f107 0208 	add.w	r2, r7, #8
 8009e20:	4610      	mov	r0, r2
 8009e22:	4798      	blx	r3
 8009e24:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	3301      	adds	r3, #1
 8009e2a:	2202      	movs	r2, #2
 8009e2c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009e2e:	e100      	b.n	800a032 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e38:	f107 0208 	add.w	r2, r7, #8
 8009e3c:	4610      	mov	r0, r2
 8009e3e:	4798      	blx	r3
 8009e40:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	3301      	adds	r3, #1
 8009e46:	2202      	movs	r2, #2
 8009e48:	701a      	strb	r2, [r3, #0]
      break;
 8009e4a:	e0f2      	b.n	800a032 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009e4c:	683b      	ldr	r3, [r7, #0]
 8009e4e:	885b      	ldrh	r3, [r3, #2]
 8009e50:	b2db      	uxtb	r3, r3
 8009e52:	2b05      	cmp	r3, #5
 8009e54:	f200 80ac 	bhi.w	8009fb0 <USBD_GetDescriptor+0x204>
 8009e58:	a201      	add	r2, pc, #4	; (adr r2, 8009e60 <USBD_GetDescriptor+0xb4>)
 8009e5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e5e:	bf00      	nop
 8009e60:	08009e79 	.word	0x08009e79
 8009e64:	08009ead 	.word	0x08009ead
 8009e68:	08009ee1 	.word	0x08009ee1
 8009e6c:	08009f15 	.word	0x08009f15
 8009e70:	08009f49 	.word	0x08009f49
 8009e74:	08009f7d 	.word	0x08009f7d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e7e:	685b      	ldr	r3, [r3, #4]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d00b      	beq.n	8009e9c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e8a:	685b      	ldr	r3, [r3, #4]
 8009e8c:	687a      	ldr	r2, [r7, #4]
 8009e8e:	7c12      	ldrb	r2, [r2, #16]
 8009e90:	f107 0108 	add.w	r1, r7, #8
 8009e94:	4610      	mov	r0, r2
 8009e96:	4798      	blx	r3
 8009e98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e9a:	e091      	b.n	8009fc0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009e9c:	6839      	ldr	r1, [r7, #0]
 8009e9e:	6878      	ldr	r0, [r7, #4]
 8009ea0:	f000 facb 	bl	800a43a <USBD_CtlError>
            err++;
 8009ea4:	7afb      	ldrb	r3, [r7, #11]
 8009ea6:	3301      	adds	r3, #1
 8009ea8:	72fb      	strb	r3, [r7, #11]
          break;
 8009eaa:	e089      	b.n	8009fc0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009eb2:	689b      	ldr	r3, [r3, #8]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d00b      	beq.n	8009ed0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ebe:	689b      	ldr	r3, [r3, #8]
 8009ec0:	687a      	ldr	r2, [r7, #4]
 8009ec2:	7c12      	ldrb	r2, [r2, #16]
 8009ec4:	f107 0108 	add.w	r1, r7, #8
 8009ec8:	4610      	mov	r0, r2
 8009eca:	4798      	blx	r3
 8009ecc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009ece:	e077      	b.n	8009fc0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009ed0:	6839      	ldr	r1, [r7, #0]
 8009ed2:	6878      	ldr	r0, [r7, #4]
 8009ed4:	f000 fab1 	bl	800a43a <USBD_CtlError>
            err++;
 8009ed8:	7afb      	ldrb	r3, [r7, #11]
 8009eda:	3301      	adds	r3, #1
 8009edc:	72fb      	strb	r3, [r7, #11]
          break;
 8009ede:	e06f      	b.n	8009fc0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ee6:	68db      	ldr	r3, [r3, #12]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d00b      	beq.n	8009f04 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ef2:	68db      	ldr	r3, [r3, #12]
 8009ef4:	687a      	ldr	r2, [r7, #4]
 8009ef6:	7c12      	ldrb	r2, [r2, #16]
 8009ef8:	f107 0108 	add.w	r1, r7, #8
 8009efc:	4610      	mov	r0, r2
 8009efe:	4798      	blx	r3
 8009f00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009f02:	e05d      	b.n	8009fc0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009f04:	6839      	ldr	r1, [r7, #0]
 8009f06:	6878      	ldr	r0, [r7, #4]
 8009f08:	f000 fa97 	bl	800a43a <USBD_CtlError>
            err++;
 8009f0c:	7afb      	ldrb	r3, [r7, #11]
 8009f0e:	3301      	adds	r3, #1
 8009f10:	72fb      	strb	r3, [r7, #11]
          break;
 8009f12:	e055      	b.n	8009fc0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f1a:	691b      	ldr	r3, [r3, #16]
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d00b      	beq.n	8009f38 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f26:	691b      	ldr	r3, [r3, #16]
 8009f28:	687a      	ldr	r2, [r7, #4]
 8009f2a:	7c12      	ldrb	r2, [r2, #16]
 8009f2c:	f107 0108 	add.w	r1, r7, #8
 8009f30:	4610      	mov	r0, r2
 8009f32:	4798      	blx	r3
 8009f34:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009f36:	e043      	b.n	8009fc0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009f38:	6839      	ldr	r1, [r7, #0]
 8009f3a:	6878      	ldr	r0, [r7, #4]
 8009f3c:	f000 fa7d 	bl	800a43a <USBD_CtlError>
            err++;
 8009f40:	7afb      	ldrb	r3, [r7, #11]
 8009f42:	3301      	adds	r3, #1
 8009f44:	72fb      	strb	r3, [r7, #11]
          break;
 8009f46:	e03b      	b.n	8009fc0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f4e:	695b      	ldr	r3, [r3, #20]
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d00b      	beq.n	8009f6c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f5a:	695b      	ldr	r3, [r3, #20]
 8009f5c:	687a      	ldr	r2, [r7, #4]
 8009f5e:	7c12      	ldrb	r2, [r2, #16]
 8009f60:	f107 0108 	add.w	r1, r7, #8
 8009f64:	4610      	mov	r0, r2
 8009f66:	4798      	blx	r3
 8009f68:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009f6a:	e029      	b.n	8009fc0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009f6c:	6839      	ldr	r1, [r7, #0]
 8009f6e:	6878      	ldr	r0, [r7, #4]
 8009f70:	f000 fa63 	bl	800a43a <USBD_CtlError>
            err++;
 8009f74:	7afb      	ldrb	r3, [r7, #11]
 8009f76:	3301      	adds	r3, #1
 8009f78:	72fb      	strb	r3, [r7, #11]
          break;
 8009f7a:	e021      	b.n	8009fc0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f82:	699b      	ldr	r3, [r3, #24]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d00b      	beq.n	8009fa0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f8e:	699b      	ldr	r3, [r3, #24]
 8009f90:	687a      	ldr	r2, [r7, #4]
 8009f92:	7c12      	ldrb	r2, [r2, #16]
 8009f94:	f107 0108 	add.w	r1, r7, #8
 8009f98:	4610      	mov	r0, r2
 8009f9a:	4798      	blx	r3
 8009f9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009f9e:	e00f      	b.n	8009fc0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009fa0:	6839      	ldr	r1, [r7, #0]
 8009fa2:	6878      	ldr	r0, [r7, #4]
 8009fa4:	f000 fa49 	bl	800a43a <USBD_CtlError>
            err++;
 8009fa8:	7afb      	ldrb	r3, [r7, #11]
 8009faa:	3301      	adds	r3, #1
 8009fac:	72fb      	strb	r3, [r7, #11]
          break;
 8009fae:	e007      	b.n	8009fc0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009fb0:	6839      	ldr	r1, [r7, #0]
 8009fb2:	6878      	ldr	r0, [r7, #4]
 8009fb4:	f000 fa41 	bl	800a43a <USBD_CtlError>
          err++;
 8009fb8:	7afb      	ldrb	r3, [r7, #11]
 8009fba:	3301      	adds	r3, #1
 8009fbc:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009fbe:	bf00      	nop
      }
      break;
 8009fc0:	e037      	b.n	800a032 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	7c1b      	ldrb	r3, [r3, #16]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d109      	bne.n	8009fde <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009fd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fd2:	f107 0208 	add.w	r2, r7, #8
 8009fd6:	4610      	mov	r0, r2
 8009fd8:	4798      	blx	r3
 8009fda:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009fdc:	e029      	b.n	800a032 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009fde:	6839      	ldr	r1, [r7, #0]
 8009fe0:	6878      	ldr	r0, [r7, #4]
 8009fe2:	f000 fa2a 	bl	800a43a <USBD_CtlError>
        err++;
 8009fe6:	7afb      	ldrb	r3, [r7, #11]
 8009fe8:	3301      	adds	r3, #1
 8009fea:	72fb      	strb	r3, [r7, #11]
      break;
 8009fec:	e021      	b.n	800a032 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	7c1b      	ldrb	r3, [r3, #16]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d10d      	bne.n	800a012 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ffe:	f107 0208 	add.w	r2, r7, #8
 800a002:	4610      	mov	r0, r2
 800a004:	4798      	blx	r3
 800a006:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	3301      	adds	r3, #1
 800a00c:	2207      	movs	r2, #7
 800a00e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a010:	e00f      	b.n	800a032 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a012:	6839      	ldr	r1, [r7, #0]
 800a014:	6878      	ldr	r0, [r7, #4]
 800a016:	f000 fa10 	bl	800a43a <USBD_CtlError>
        err++;
 800a01a:	7afb      	ldrb	r3, [r7, #11]
 800a01c:	3301      	adds	r3, #1
 800a01e:	72fb      	strb	r3, [r7, #11]
      break;
 800a020:	e007      	b.n	800a032 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a022:	6839      	ldr	r1, [r7, #0]
 800a024:	6878      	ldr	r0, [r7, #4]
 800a026:	f000 fa08 	bl	800a43a <USBD_CtlError>
      err++;
 800a02a:	7afb      	ldrb	r3, [r7, #11]
 800a02c:	3301      	adds	r3, #1
 800a02e:	72fb      	strb	r3, [r7, #11]
      break;
 800a030:	bf00      	nop
  }

  if (err != 0U)
 800a032:	7afb      	ldrb	r3, [r7, #11]
 800a034:	2b00      	cmp	r3, #0
 800a036:	d11e      	bne.n	800a076 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800a038:	683b      	ldr	r3, [r7, #0]
 800a03a:	88db      	ldrh	r3, [r3, #6]
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d016      	beq.n	800a06e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800a040:	893b      	ldrh	r3, [r7, #8]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d00e      	beq.n	800a064 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800a046:	683b      	ldr	r3, [r7, #0]
 800a048:	88da      	ldrh	r2, [r3, #6]
 800a04a:	893b      	ldrh	r3, [r7, #8]
 800a04c:	4293      	cmp	r3, r2
 800a04e:	bf28      	it	cs
 800a050:	4613      	movcs	r3, r2
 800a052:	b29b      	uxth	r3, r3
 800a054:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a056:	893b      	ldrh	r3, [r7, #8]
 800a058:	461a      	mov	r2, r3
 800a05a:	68f9      	ldr	r1, [r7, #12]
 800a05c:	6878      	ldr	r0, [r7, #4]
 800a05e:	f000 fa5d 	bl	800a51c <USBD_CtlSendData>
 800a062:	e009      	b.n	800a078 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a064:	6839      	ldr	r1, [r7, #0]
 800a066:	6878      	ldr	r0, [r7, #4]
 800a068:	f000 f9e7 	bl	800a43a <USBD_CtlError>
 800a06c:	e004      	b.n	800a078 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a06e:	6878      	ldr	r0, [r7, #4]
 800a070:	f000 faae 	bl	800a5d0 <USBD_CtlSendStatus>
 800a074:	e000      	b.n	800a078 <USBD_GetDescriptor+0x2cc>
    return;
 800a076:	bf00      	nop
  }
}
 800a078:	3710      	adds	r7, #16
 800a07a:	46bd      	mov	sp, r7
 800a07c:	bd80      	pop	{r7, pc}
 800a07e:	bf00      	nop

0800a080 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a080:	b580      	push	{r7, lr}
 800a082:	b084      	sub	sp, #16
 800a084:	af00      	add	r7, sp, #0
 800a086:	6078      	str	r0, [r7, #4]
 800a088:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a08a:	683b      	ldr	r3, [r7, #0]
 800a08c:	889b      	ldrh	r3, [r3, #4]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d131      	bne.n	800a0f6 <USBD_SetAddress+0x76>
 800a092:	683b      	ldr	r3, [r7, #0]
 800a094:	88db      	ldrh	r3, [r3, #6]
 800a096:	2b00      	cmp	r3, #0
 800a098:	d12d      	bne.n	800a0f6 <USBD_SetAddress+0x76>
 800a09a:	683b      	ldr	r3, [r7, #0]
 800a09c:	885b      	ldrh	r3, [r3, #2]
 800a09e:	2b7f      	cmp	r3, #127	; 0x7f
 800a0a0:	d829      	bhi.n	800a0f6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a0a2:	683b      	ldr	r3, [r7, #0]
 800a0a4:	885b      	ldrh	r3, [r3, #2]
 800a0a6:	b2db      	uxtb	r3, r3
 800a0a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a0ac:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a0b4:	b2db      	uxtb	r3, r3
 800a0b6:	2b03      	cmp	r3, #3
 800a0b8:	d104      	bne.n	800a0c4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a0ba:	6839      	ldr	r1, [r7, #0]
 800a0bc:	6878      	ldr	r0, [r7, #4]
 800a0be:	f000 f9bc 	bl	800a43a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a0c2:	e01d      	b.n	800a100 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	7bfa      	ldrb	r2, [r7, #15]
 800a0c8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a0cc:	7bfb      	ldrb	r3, [r7, #15]
 800a0ce:	4619      	mov	r1, r3
 800a0d0:	6878      	ldr	r0, [r7, #4]
 800a0d2:	f004 f8a5 	bl	800e220 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a0d6:	6878      	ldr	r0, [r7, #4]
 800a0d8:	f000 fa7a 	bl	800a5d0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a0dc:	7bfb      	ldrb	r3, [r7, #15]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d004      	beq.n	800a0ec <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	2202      	movs	r2, #2
 800a0e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a0ea:	e009      	b.n	800a100 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	2201      	movs	r2, #1
 800a0f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a0f4:	e004      	b.n	800a100 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a0f6:	6839      	ldr	r1, [r7, #0]
 800a0f8:	6878      	ldr	r0, [r7, #4]
 800a0fa:	f000 f99e 	bl	800a43a <USBD_CtlError>
  }
}
 800a0fe:	bf00      	nop
 800a100:	bf00      	nop
 800a102:	3710      	adds	r7, #16
 800a104:	46bd      	mov	sp, r7
 800a106:	bd80      	pop	{r7, pc}

0800a108 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a108:	b580      	push	{r7, lr}
 800a10a:	b084      	sub	sp, #16
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]
 800a110:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a112:	2300      	movs	r3, #0
 800a114:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a116:	683b      	ldr	r3, [r7, #0]
 800a118:	885b      	ldrh	r3, [r3, #2]
 800a11a:	b2da      	uxtb	r2, r3
 800a11c:	4b4e      	ldr	r3, [pc, #312]	; (800a258 <USBD_SetConfig+0x150>)
 800a11e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a120:	4b4d      	ldr	r3, [pc, #308]	; (800a258 <USBD_SetConfig+0x150>)
 800a122:	781b      	ldrb	r3, [r3, #0]
 800a124:	2b01      	cmp	r3, #1
 800a126:	d905      	bls.n	800a134 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a128:	6839      	ldr	r1, [r7, #0]
 800a12a:	6878      	ldr	r0, [r7, #4]
 800a12c:	f000 f985 	bl	800a43a <USBD_CtlError>
    return USBD_FAIL;
 800a130:	2303      	movs	r3, #3
 800a132:	e08c      	b.n	800a24e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a13a:	b2db      	uxtb	r3, r3
 800a13c:	2b02      	cmp	r3, #2
 800a13e:	d002      	beq.n	800a146 <USBD_SetConfig+0x3e>
 800a140:	2b03      	cmp	r3, #3
 800a142:	d029      	beq.n	800a198 <USBD_SetConfig+0x90>
 800a144:	e075      	b.n	800a232 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a146:	4b44      	ldr	r3, [pc, #272]	; (800a258 <USBD_SetConfig+0x150>)
 800a148:	781b      	ldrb	r3, [r3, #0]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d020      	beq.n	800a190 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800a14e:	4b42      	ldr	r3, [pc, #264]	; (800a258 <USBD_SetConfig+0x150>)
 800a150:	781b      	ldrb	r3, [r3, #0]
 800a152:	461a      	mov	r2, r3
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a158:	4b3f      	ldr	r3, [pc, #252]	; (800a258 <USBD_SetConfig+0x150>)
 800a15a:	781b      	ldrb	r3, [r3, #0]
 800a15c:	4619      	mov	r1, r3
 800a15e:	6878      	ldr	r0, [r7, #4]
 800a160:	f7fe ffe7 	bl	8009132 <USBD_SetClassConfig>
 800a164:	4603      	mov	r3, r0
 800a166:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a168:	7bfb      	ldrb	r3, [r7, #15]
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d008      	beq.n	800a180 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800a16e:	6839      	ldr	r1, [r7, #0]
 800a170:	6878      	ldr	r0, [r7, #4]
 800a172:	f000 f962 	bl	800a43a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	2202      	movs	r2, #2
 800a17a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a17e:	e065      	b.n	800a24c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a180:	6878      	ldr	r0, [r7, #4]
 800a182:	f000 fa25 	bl	800a5d0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	2203      	movs	r2, #3
 800a18a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a18e:	e05d      	b.n	800a24c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a190:	6878      	ldr	r0, [r7, #4]
 800a192:	f000 fa1d 	bl	800a5d0 <USBD_CtlSendStatus>
      break;
 800a196:	e059      	b.n	800a24c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a198:	4b2f      	ldr	r3, [pc, #188]	; (800a258 <USBD_SetConfig+0x150>)
 800a19a:	781b      	ldrb	r3, [r3, #0]
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d112      	bne.n	800a1c6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	2202      	movs	r2, #2
 800a1a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800a1a8:	4b2b      	ldr	r3, [pc, #172]	; (800a258 <USBD_SetConfig+0x150>)
 800a1aa:	781b      	ldrb	r3, [r3, #0]
 800a1ac:	461a      	mov	r2, r3
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a1b2:	4b29      	ldr	r3, [pc, #164]	; (800a258 <USBD_SetConfig+0x150>)
 800a1b4:	781b      	ldrb	r3, [r3, #0]
 800a1b6:	4619      	mov	r1, r3
 800a1b8:	6878      	ldr	r0, [r7, #4]
 800a1ba:	f7fe ffd6 	bl	800916a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a1be:	6878      	ldr	r0, [r7, #4]
 800a1c0:	f000 fa06 	bl	800a5d0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a1c4:	e042      	b.n	800a24c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800a1c6:	4b24      	ldr	r3, [pc, #144]	; (800a258 <USBD_SetConfig+0x150>)
 800a1c8:	781b      	ldrb	r3, [r3, #0]
 800a1ca:	461a      	mov	r2, r3
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	685b      	ldr	r3, [r3, #4]
 800a1d0:	429a      	cmp	r2, r3
 800a1d2:	d02a      	beq.n	800a22a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	685b      	ldr	r3, [r3, #4]
 800a1d8:	b2db      	uxtb	r3, r3
 800a1da:	4619      	mov	r1, r3
 800a1dc:	6878      	ldr	r0, [r7, #4]
 800a1de:	f7fe ffc4 	bl	800916a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a1e2:	4b1d      	ldr	r3, [pc, #116]	; (800a258 <USBD_SetConfig+0x150>)
 800a1e4:	781b      	ldrb	r3, [r3, #0]
 800a1e6:	461a      	mov	r2, r3
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a1ec:	4b1a      	ldr	r3, [pc, #104]	; (800a258 <USBD_SetConfig+0x150>)
 800a1ee:	781b      	ldrb	r3, [r3, #0]
 800a1f0:	4619      	mov	r1, r3
 800a1f2:	6878      	ldr	r0, [r7, #4]
 800a1f4:	f7fe ff9d 	bl	8009132 <USBD_SetClassConfig>
 800a1f8:	4603      	mov	r3, r0
 800a1fa:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a1fc:	7bfb      	ldrb	r3, [r7, #15]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d00f      	beq.n	800a222 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800a202:	6839      	ldr	r1, [r7, #0]
 800a204:	6878      	ldr	r0, [r7, #4]
 800a206:	f000 f918 	bl	800a43a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	685b      	ldr	r3, [r3, #4]
 800a20e:	b2db      	uxtb	r3, r3
 800a210:	4619      	mov	r1, r3
 800a212:	6878      	ldr	r0, [r7, #4]
 800a214:	f7fe ffa9 	bl	800916a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	2202      	movs	r2, #2
 800a21c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a220:	e014      	b.n	800a24c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a222:	6878      	ldr	r0, [r7, #4]
 800a224:	f000 f9d4 	bl	800a5d0 <USBD_CtlSendStatus>
      break;
 800a228:	e010      	b.n	800a24c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a22a:	6878      	ldr	r0, [r7, #4]
 800a22c:	f000 f9d0 	bl	800a5d0 <USBD_CtlSendStatus>
      break;
 800a230:	e00c      	b.n	800a24c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800a232:	6839      	ldr	r1, [r7, #0]
 800a234:	6878      	ldr	r0, [r7, #4]
 800a236:	f000 f900 	bl	800a43a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a23a:	4b07      	ldr	r3, [pc, #28]	; (800a258 <USBD_SetConfig+0x150>)
 800a23c:	781b      	ldrb	r3, [r3, #0]
 800a23e:	4619      	mov	r1, r3
 800a240:	6878      	ldr	r0, [r7, #4]
 800a242:	f7fe ff92 	bl	800916a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a246:	2303      	movs	r3, #3
 800a248:	73fb      	strb	r3, [r7, #15]
      break;
 800a24a:	bf00      	nop
  }

  return ret;
 800a24c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a24e:	4618      	mov	r0, r3
 800a250:	3710      	adds	r7, #16
 800a252:	46bd      	mov	sp, r7
 800a254:	bd80      	pop	{r7, pc}
 800a256:	bf00      	nop
 800a258:	20000304 	.word	0x20000304

0800a25c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a25c:	b580      	push	{r7, lr}
 800a25e:	b082      	sub	sp, #8
 800a260:	af00      	add	r7, sp, #0
 800a262:	6078      	str	r0, [r7, #4]
 800a264:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a266:	683b      	ldr	r3, [r7, #0]
 800a268:	88db      	ldrh	r3, [r3, #6]
 800a26a:	2b01      	cmp	r3, #1
 800a26c:	d004      	beq.n	800a278 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a26e:	6839      	ldr	r1, [r7, #0]
 800a270:	6878      	ldr	r0, [r7, #4]
 800a272:	f000 f8e2 	bl	800a43a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a276:	e023      	b.n	800a2c0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a27e:	b2db      	uxtb	r3, r3
 800a280:	2b02      	cmp	r3, #2
 800a282:	dc02      	bgt.n	800a28a <USBD_GetConfig+0x2e>
 800a284:	2b00      	cmp	r3, #0
 800a286:	dc03      	bgt.n	800a290 <USBD_GetConfig+0x34>
 800a288:	e015      	b.n	800a2b6 <USBD_GetConfig+0x5a>
 800a28a:	2b03      	cmp	r3, #3
 800a28c:	d00b      	beq.n	800a2a6 <USBD_GetConfig+0x4a>
 800a28e:	e012      	b.n	800a2b6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	2200      	movs	r2, #0
 800a294:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	3308      	adds	r3, #8
 800a29a:	2201      	movs	r2, #1
 800a29c:	4619      	mov	r1, r3
 800a29e:	6878      	ldr	r0, [r7, #4]
 800a2a0:	f000 f93c 	bl	800a51c <USBD_CtlSendData>
        break;
 800a2a4:	e00c      	b.n	800a2c0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	3304      	adds	r3, #4
 800a2aa:	2201      	movs	r2, #1
 800a2ac:	4619      	mov	r1, r3
 800a2ae:	6878      	ldr	r0, [r7, #4]
 800a2b0:	f000 f934 	bl	800a51c <USBD_CtlSendData>
        break;
 800a2b4:	e004      	b.n	800a2c0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a2b6:	6839      	ldr	r1, [r7, #0]
 800a2b8:	6878      	ldr	r0, [r7, #4]
 800a2ba:	f000 f8be 	bl	800a43a <USBD_CtlError>
        break;
 800a2be:	bf00      	nop
}
 800a2c0:	bf00      	nop
 800a2c2:	3708      	adds	r7, #8
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	bd80      	pop	{r7, pc}

0800a2c8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b082      	sub	sp, #8
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]
 800a2d0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a2d8:	b2db      	uxtb	r3, r3
 800a2da:	3b01      	subs	r3, #1
 800a2dc:	2b02      	cmp	r3, #2
 800a2de:	d81e      	bhi.n	800a31e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a2e0:	683b      	ldr	r3, [r7, #0]
 800a2e2:	88db      	ldrh	r3, [r3, #6]
 800a2e4:	2b02      	cmp	r3, #2
 800a2e6:	d004      	beq.n	800a2f2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a2e8:	6839      	ldr	r1, [r7, #0]
 800a2ea:	6878      	ldr	r0, [r7, #4]
 800a2ec:	f000 f8a5 	bl	800a43a <USBD_CtlError>
        break;
 800a2f0:	e01a      	b.n	800a328 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	2201      	movs	r2, #1
 800a2f6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d005      	beq.n	800a30e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	68db      	ldr	r3, [r3, #12]
 800a306:	f043 0202 	orr.w	r2, r3, #2
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	330c      	adds	r3, #12
 800a312:	2202      	movs	r2, #2
 800a314:	4619      	mov	r1, r3
 800a316:	6878      	ldr	r0, [r7, #4]
 800a318:	f000 f900 	bl	800a51c <USBD_CtlSendData>
      break;
 800a31c:	e004      	b.n	800a328 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a31e:	6839      	ldr	r1, [r7, #0]
 800a320:	6878      	ldr	r0, [r7, #4]
 800a322:	f000 f88a 	bl	800a43a <USBD_CtlError>
      break;
 800a326:	bf00      	nop
  }
}
 800a328:	bf00      	nop
 800a32a:	3708      	adds	r7, #8
 800a32c:	46bd      	mov	sp, r7
 800a32e:	bd80      	pop	{r7, pc}

0800a330 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a330:	b580      	push	{r7, lr}
 800a332:	b082      	sub	sp, #8
 800a334:	af00      	add	r7, sp, #0
 800a336:	6078      	str	r0, [r7, #4]
 800a338:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a33a:	683b      	ldr	r3, [r7, #0]
 800a33c:	885b      	ldrh	r3, [r3, #2]
 800a33e:	2b01      	cmp	r3, #1
 800a340:	d107      	bne.n	800a352 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	2201      	movs	r2, #1
 800a346:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a34a:	6878      	ldr	r0, [r7, #4]
 800a34c:	f000 f940 	bl	800a5d0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800a350:	e013      	b.n	800a37a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a352:	683b      	ldr	r3, [r7, #0]
 800a354:	885b      	ldrh	r3, [r3, #2]
 800a356:	2b02      	cmp	r3, #2
 800a358:	d10b      	bne.n	800a372 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800a35a:	683b      	ldr	r3, [r7, #0]
 800a35c:	889b      	ldrh	r3, [r3, #4]
 800a35e:	0a1b      	lsrs	r3, r3, #8
 800a360:	b29b      	uxth	r3, r3
 800a362:	b2da      	uxtb	r2, r3
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800a36a:	6878      	ldr	r0, [r7, #4]
 800a36c:	f000 f930 	bl	800a5d0 <USBD_CtlSendStatus>
}
 800a370:	e003      	b.n	800a37a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800a372:	6839      	ldr	r1, [r7, #0]
 800a374:	6878      	ldr	r0, [r7, #4]
 800a376:	f000 f860 	bl	800a43a <USBD_CtlError>
}
 800a37a:	bf00      	nop
 800a37c:	3708      	adds	r7, #8
 800a37e:	46bd      	mov	sp, r7
 800a380:	bd80      	pop	{r7, pc}

0800a382 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a382:	b580      	push	{r7, lr}
 800a384:	b082      	sub	sp, #8
 800a386:	af00      	add	r7, sp, #0
 800a388:	6078      	str	r0, [r7, #4]
 800a38a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a392:	b2db      	uxtb	r3, r3
 800a394:	3b01      	subs	r3, #1
 800a396:	2b02      	cmp	r3, #2
 800a398:	d80b      	bhi.n	800a3b2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a39a:	683b      	ldr	r3, [r7, #0]
 800a39c:	885b      	ldrh	r3, [r3, #2]
 800a39e:	2b01      	cmp	r3, #1
 800a3a0:	d10c      	bne.n	800a3bc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	2200      	movs	r2, #0
 800a3a6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a3aa:	6878      	ldr	r0, [r7, #4]
 800a3ac:	f000 f910 	bl	800a5d0 <USBD_CtlSendStatus>
      }
      break;
 800a3b0:	e004      	b.n	800a3bc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a3b2:	6839      	ldr	r1, [r7, #0]
 800a3b4:	6878      	ldr	r0, [r7, #4]
 800a3b6:	f000 f840 	bl	800a43a <USBD_CtlError>
      break;
 800a3ba:	e000      	b.n	800a3be <USBD_ClrFeature+0x3c>
      break;
 800a3bc:	bf00      	nop
  }
}
 800a3be:	bf00      	nop
 800a3c0:	3708      	adds	r7, #8
 800a3c2:	46bd      	mov	sp, r7
 800a3c4:	bd80      	pop	{r7, pc}

0800a3c6 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a3c6:	b580      	push	{r7, lr}
 800a3c8:	b084      	sub	sp, #16
 800a3ca:	af00      	add	r7, sp, #0
 800a3cc:	6078      	str	r0, [r7, #4]
 800a3ce:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a3d0:	683b      	ldr	r3, [r7, #0]
 800a3d2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	781a      	ldrb	r2, [r3, #0]
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	3301      	adds	r3, #1
 800a3e0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	781a      	ldrb	r2, [r3, #0]
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	3301      	adds	r3, #1
 800a3ee:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a3f0:	68f8      	ldr	r0, [r7, #12]
 800a3f2:	f7ff fa41 	bl	8009878 <SWAPBYTE>
 800a3f6:	4603      	mov	r3, r0
 800a3f8:	461a      	mov	r2, r3
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	3301      	adds	r3, #1
 800a402:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	3301      	adds	r3, #1
 800a408:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a40a:	68f8      	ldr	r0, [r7, #12]
 800a40c:	f7ff fa34 	bl	8009878 <SWAPBYTE>
 800a410:	4603      	mov	r3, r0
 800a412:	461a      	mov	r2, r3
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	3301      	adds	r3, #1
 800a41c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	3301      	adds	r3, #1
 800a422:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a424:	68f8      	ldr	r0, [r7, #12]
 800a426:	f7ff fa27 	bl	8009878 <SWAPBYTE>
 800a42a:	4603      	mov	r3, r0
 800a42c:	461a      	mov	r2, r3
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	80da      	strh	r2, [r3, #6]
}
 800a432:	bf00      	nop
 800a434:	3710      	adds	r7, #16
 800a436:	46bd      	mov	sp, r7
 800a438:	bd80      	pop	{r7, pc}

0800a43a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a43a:	b580      	push	{r7, lr}
 800a43c:	b082      	sub	sp, #8
 800a43e:	af00      	add	r7, sp, #0
 800a440:	6078      	str	r0, [r7, #4]
 800a442:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a444:	2180      	movs	r1, #128	; 0x80
 800a446:	6878      	ldr	r0, [r7, #4]
 800a448:	f003 fe80 	bl	800e14c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a44c:	2100      	movs	r1, #0
 800a44e:	6878      	ldr	r0, [r7, #4]
 800a450:	f003 fe7c 	bl	800e14c <USBD_LL_StallEP>
}
 800a454:	bf00      	nop
 800a456:	3708      	adds	r7, #8
 800a458:	46bd      	mov	sp, r7
 800a45a:	bd80      	pop	{r7, pc}

0800a45c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a45c:	b580      	push	{r7, lr}
 800a45e:	b086      	sub	sp, #24
 800a460:	af00      	add	r7, sp, #0
 800a462:	60f8      	str	r0, [r7, #12]
 800a464:	60b9      	str	r1, [r7, #8]
 800a466:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a468:	2300      	movs	r3, #0
 800a46a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d036      	beq.n	800a4e0 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a476:	6938      	ldr	r0, [r7, #16]
 800a478:	f000 f836 	bl	800a4e8 <USBD_GetLen>
 800a47c:	4603      	mov	r3, r0
 800a47e:	3301      	adds	r3, #1
 800a480:	b29b      	uxth	r3, r3
 800a482:	005b      	lsls	r3, r3, #1
 800a484:	b29a      	uxth	r2, r3
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a48a:	7dfb      	ldrb	r3, [r7, #23]
 800a48c:	68ba      	ldr	r2, [r7, #8]
 800a48e:	4413      	add	r3, r2
 800a490:	687a      	ldr	r2, [r7, #4]
 800a492:	7812      	ldrb	r2, [r2, #0]
 800a494:	701a      	strb	r2, [r3, #0]
  idx++;
 800a496:	7dfb      	ldrb	r3, [r7, #23]
 800a498:	3301      	adds	r3, #1
 800a49a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a49c:	7dfb      	ldrb	r3, [r7, #23]
 800a49e:	68ba      	ldr	r2, [r7, #8]
 800a4a0:	4413      	add	r3, r2
 800a4a2:	2203      	movs	r2, #3
 800a4a4:	701a      	strb	r2, [r3, #0]
  idx++;
 800a4a6:	7dfb      	ldrb	r3, [r7, #23]
 800a4a8:	3301      	adds	r3, #1
 800a4aa:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a4ac:	e013      	b.n	800a4d6 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a4ae:	7dfb      	ldrb	r3, [r7, #23]
 800a4b0:	68ba      	ldr	r2, [r7, #8]
 800a4b2:	4413      	add	r3, r2
 800a4b4:	693a      	ldr	r2, [r7, #16]
 800a4b6:	7812      	ldrb	r2, [r2, #0]
 800a4b8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a4ba:	693b      	ldr	r3, [r7, #16]
 800a4bc:	3301      	adds	r3, #1
 800a4be:	613b      	str	r3, [r7, #16]
    idx++;
 800a4c0:	7dfb      	ldrb	r3, [r7, #23]
 800a4c2:	3301      	adds	r3, #1
 800a4c4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a4c6:	7dfb      	ldrb	r3, [r7, #23]
 800a4c8:	68ba      	ldr	r2, [r7, #8]
 800a4ca:	4413      	add	r3, r2
 800a4cc:	2200      	movs	r2, #0
 800a4ce:	701a      	strb	r2, [r3, #0]
    idx++;
 800a4d0:	7dfb      	ldrb	r3, [r7, #23]
 800a4d2:	3301      	adds	r3, #1
 800a4d4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a4d6:	693b      	ldr	r3, [r7, #16]
 800a4d8:	781b      	ldrb	r3, [r3, #0]
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d1e7      	bne.n	800a4ae <USBD_GetString+0x52>
 800a4de:	e000      	b.n	800a4e2 <USBD_GetString+0x86>
    return;
 800a4e0:	bf00      	nop
  }
}
 800a4e2:	3718      	adds	r7, #24
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	bd80      	pop	{r7, pc}

0800a4e8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a4e8:	b480      	push	{r7}
 800a4ea:	b085      	sub	sp, #20
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a4f8:	e005      	b.n	800a506 <USBD_GetLen+0x1e>
  {
    len++;
 800a4fa:	7bfb      	ldrb	r3, [r7, #15]
 800a4fc:	3301      	adds	r3, #1
 800a4fe:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a500:	68bb      	ldr	r3, [r7, #8]
 800a502:	3301      	adds	r3, #1
 800a504:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a506:	68bb      	ldr	r3, [r7, #8]
 800a508:	781b      	ldrb	r3, [r3, #0]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d1f5      	bne.n	800a4fa <USBD_GetLen+0x12>
  }

  return len;
 800a50e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a510:	4618      	mov	r0, r3
 800a512:	3714      	adds	r7, #20
 800a514:	46bd      	mov	sp, r7
 800a516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a51a:	4770      	bx	lr

0800a51c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a51c:	b580      	push	{r7, lr}
 800a51e:	b084      	sub	sp, #16
 800a520:	af00      	add	r7, sp, #0
 800a522:	60f8      	str	r0, [r7, #12]
 800a524:	60b9      	str	r1, [r7, #8]
 800a526:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	2202      	movs	r2, #2
 800a52c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	687a      	ldr	r2, [r7, #4]
 800a534:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	687a      	ldr	r2, [r7, #4]
 800a53a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	68ba      	ldr	r2, [r7, #8]
 800a540:	2100      	movs	r1, #0
 800a542:	68f8      	ldr	r0, [r7, #12]
 800a544:	f003 fe8b 	bl	800e25e <USBD_LL_Transmit>

  return USBD_OK;
 800a548:	2300      	movs	r3, #0
}
 800a54a:	4618      	mov	r0, r3
 800a54c:	3710      	adds	r7, #16
 800a54e:	46bd      	mov	sp, r7
 800a550:	bd80      	pop	{r7, pc}

0800a552 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a552:	b580      	push	{r7, lr}
 800a554:	b084      	sub	sp, #16
 800a556:	af00      	add	r7, sp, #0
 800a558:	60f8      	str	r0, [r7, #12]
 800a55a:	60b9      	str	r1, [r7, #8]
 800a55c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	68ba      	ldr	r2, [r7, #8]
 800a562:	2100      	movs	r1, #0
 800a564:	68f8      	ldr	r0, [r7, #12]
 800a566:	f003 fe7a 	bl	800e25e <USBD_LL_Transmit>

  return USBD_OK;
 800a56a:	2300      	movs	r3, #0
}
 800a56c:	4618      	mov	r0, r3
 800a56e:	3710      	adds	r7, #16
 800a570:	46bd      	mov	sp, r7
 800a572:	bd80      	pop	{r7, pc}

0800a574 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a574:	b580      	push	{r7, lr}
 800a576:	b084      	sub	sp, #16
 800a578:	af00      	add	r7, sp, #0
 800a57a:	60f8      	str	r0, [r7, #12]
 800a57c:	60b9      	str	r1, [r7, #8]
 800a57e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	2203      	movs	r2, #3
 800a584:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	687a      	ldr	r2, [r7, #4]
 800a58c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	687a      	ldr	r2, [r7, #4]
 800a594:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	68ba      	ldr	r2, [r7, #8]
 800a59c:	2100      	movs	r1, #0
 800a59e:	68f8      	ldr	r0, [r7, #12]
 800a5a0:	f003 fe7e 	bl	800e2a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a5a4:	2300      	movs	r3, #0
}
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	3710      	adds	r7, #16
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	bd80      	pop	{r7, pc}

0800a5ae <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a5ae:	b580      	push	{r7, lr}
 800a5b0:	b084      	sub	sp, #16
 800a5b2:	af00      	add	r7, sp, #0
 800a5b4:	60f8      	str	r0, [r7, #12]
 800a5b6:	60b9      	str	r1, [r7, #8]
 800a5b8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	68ba      	ldr	r2, [r7, #8]
 800a5be:	2100      	movs	r1, #0
 800a5c0:	68f8      	ldr	r0, [r7, #12]
 800a5c2:	f003 fe6d 	bl	800e2a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a5c6:	2300      	movs	r3, #0
}
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	3710      	adds	r7, #16
 800a5cc:	46bd      	mov	sp, r7
 800a5ce:	bd80      	pop	{r7, pc}

0800a5d0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	b082      	sub	sp, #8
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	2204      	movs	r2, #4
 800a5dc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a5e0:	2300      	movs	r3, #0
 800a5e2:	2200      	movs	r2, #0
 800a5e4:	2100      	movs	r1, #0
 800a5e6:	6878      	ldr	r0, [r7, #4]
 800a5e8:	f003 fe39 	bl	800e25e <USBD_LL_Transmit>

  return USBD_OK;
 800a5ec:	2300      	movs	r3, #0
}
 800a5ee:	4618      	mov	r0, r3
 800a5f0:	3708      	adds	r7, #8
 800a5f2:	46bd      	mov	sp, r7
 800a5f4:	bd80      	pop	{r7, pc}

0800a5f6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a5f6:	b580      	push	{r7, lr}
 800a5f8:	b082      	sub	sp, #8
 800a5fa:	af00      	add	r7, sp, #0
 800a5fc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	2205      	movs	r2, #5
 800a602:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a606:	2300      	movs	r3, #0
 800a608:	2200      	movs	r2, #0
 800a60a:	2100      	movs	r1, #0
 800a60c:	6878      	ldr	r0, [r7, #4]
 800a60e:	f003 fe47 	bl	800e2a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a612:	2300      	movs	r3, #0
}
 800a614:	4618      	mov	r0, r3
 800a616:	3708      	adds	r7, #8
 800a618:	46bd      	mov	sp, r7
 800a61a:	bd80      	pop	{r7, pc}

0800a61c <__NVIC_SetPriority>:
{
 800a61c:	b480      	push	{r7}
 800a61e:	b083      	sub	sp, #12
 800a620:	af00      	add	r7, sp, #0
 800a622:	4603      	mov	r3, r0
 800a624:	6039      	str	r1, [r7, #0]
 800a626:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a628:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	db0a      	blt.n	800a646 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a630:	683b      	ldr	r3, [r7, #0]
 800a632:	b2da      	uxtb	r2, r3
 800a634:	490c      	ldr	r1, [pc, #48]	; (800a668 <__NVIC_SetPriority+0x4c>)
 800a636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a63a:	0112      	lsls	r2, r2, #4
 800a63c:	b2d2      	uxtb	r2, r2
 800a63e:	440b      	add	r3, r1
 800a640:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800a644:	e00a      	b.n	800a65c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a646:	683b      	ldr	r3, [r7, #0]
 800a648:	b2da      	uxtb	r2, r3
 800a64a:	4908      	ldr	r1, [pc, #32]	; (800a66c <__NVIC_SetPriority+0x50>)
 800a64c:	79fb      	ldrb	r3, [r7, #7]
 800a64e:	f003 030f 	and.w	r3, r3, #15
 800a652:	3b04      	subs	r3, #4
 800a654:	0112      	lsls	r2, r2, #4
 800a656:	b2d2      	uxtb	r2, r2
 800a658:	440b      	add	r3, r1
 800a65a:	761a      	strb	r2, [r3, #24]
}
 800a65c:	bf00      	nop
 800a65e:	370c      	adds	r7, #12
 800a660:	46bd      	mov	sp, r7
 800a662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a666:	4770      	bx	lr
 800a668:	e000e100 	.word	0xe000e100
 800a66c:	e000ed00 	.word	0xe000ed00

0800a670 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800a670:	b580      	push	{r7, lr}
 800a672:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800a674:	4b05      	ldr	r3, [pc, #20]	; (800a68c <SysTick_Handler+0x1c>)
 800a676:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800a678:	f001 ffba 	bl	800c5f0 <xTaskGetSchedulerState>
 800a67c:	4603      	mov	r3, r0
 800a67e:	2b01      	cmp	r3, #1
 800a680:	d001      	beq.n	800a686 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800a682:	f002 fea1 	bl	800d3c8 <xPortSysTickHandler>
  }
}
 800a686:	bf00      	nop
 800a688:	bd80      	pop	{r7, pc}
 800a68a:	bf00      	nop
 800a68c:	e000e010 	.word	0xe000e010

0800a690 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a690:	b580      	push	{r7, lr}
 800a692:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800a694:	2100      	movs	r1, #0
 800a696:	f06f 0004 	mvn.w	r0, #4
 800a69a:	f7ff ffbf 	bl	800a61c <__NVIC_SetPriority>
#endif
}
 800a69e:	bf00      	nop
 800a6a0:	bd80      	pop	{r7, pc}
	...

0800a6a4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a6a4:	b480      	push	{r7}
 800a6a6:	b083      	sub	sp, #12
 800a6a8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a6aa:	f3ef 8305 	mrs	r3, IPSR
 800a6ae:	603b      	str	r3, [r7, #0]
  return(result);
 800a6b0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d003      	beq.n	800a6be <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800a6b6:	f06f 0305 	mvn.w	r3, #5
 800a6ba:	607b      	str	r3, [r7, #4]
 800a6bc:	e00c      	b.n	800a6d8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a6be:	4b0a      	ldr	r3, [pc, #40]	; (800a6e8 <osKernelInitialize+0x44>)
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d105      	bne.n	800a6d2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a6c6:	4b08      	ldr	r3, [pc, #32]	; (800a6e8 <osKernelInitialize+0x44>)
 800a6c8:	2201      	movs	r2, #1
 800a6ca:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a6cc:	2300      	movs	r3, #0
 800a6ce:	607b      	str	r3, [r7, #4]
 800a6d0:	e002      	b.n	800a6d8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800a6d2:	f04f 33ff 	mov.w	r3, #4294967295
 800a6d6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a6d8:	687b      	ldr	r3, [r7, #4]
}
 800a6da:	4618      	mov	r0, r3
 800a6dc:	370c      	adds	r7, #12
 800a6de:	46bd      	mov	sp, r7
 800a6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e4:	4770      	bx	lr
 800a6e6:	bf00      	nop
 800a6e8:	20000308 	.word	0x20000308

0800a6ec <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	b082      	sub	sp, #8
 800a6f0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a6f2:	f3ef 8305 	mrs	r3, IPSR
 800a6f6:	603b      	str	r3, [r7, #0]
  return(result);
 800a6f8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d003      	beq.n	800a706 <osKernelStart+0x1a>
    stat = osErrorISR;
 800a6fe:	f06f 0305 	mvn.w	r3, #5
 800a702:	607b      	str	r3, [r7, #4]
 800a704:	e010      	b.n	800a728 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a706:	4b0b      	ldr	r3, [pc, #44]	; (800a734 <osKernelStart+0x48>)
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	2b01      	cmp	r3, #1
 800a70c:	d109      	bne.n	800a722 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a70e:	f7ff ffbf 	bl	800a690 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a712:	4b08      	ldr	r3, [pc, #32]	; (800a734 <osKernelStart+0x48>)
 800a714:	2202      	movs	r2, #2
 800a716:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a718:	f001 fa52 	bl	800bbc0 <vTaskStartScheduler>
      stat = osOK;
 800a71c:	2300      	movs	r3, #0
 800a71e:	607b      	str	r3, [r7, #4]
 800a720:	e002      	b.n	800a728 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800a722:	f04f 33ff 	mov.w	r3, #4294967295
 800a726:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a728:	687b      	ldr	r3, [r7, #4]
}
 800a72a:	4618      	mov	r0, r3
 800a72c:	3708      	adds	r7, #8
 800a72e:	46bd      	mov	sp, r7
 800a730:	bd80      	pop	{r7, pc}
 800a732:	bf00      	nop
 800a734:	20000308 	.word	0x20000308

0800a738 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a738:	b580      	push	{r7, lr}
 800a73a:	b08e      	sub	sp, #56	; 0x38
 800a73c:	af04      	add	r7, sp, #16
 800a73e:	60f8      	str	r0, [r7, #12]
 800a740:	60b9      	str	r1, [r7, #8]
 800a742:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a744:	2300      	movs	r3, #0
 800a746:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a748:	f3ef 8305 	mrs	r3, IPSR
 800a74c:	617b      	str	r3, [r7, #20]
  return(result);
 800a74e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800a750:	2b00      	cmp	r3, #0
 800a752:	d17e      	bne.n	800a852 <osThreadNew+0x11a>
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	2b00      	cmp	r3, #0
 800a758:	d07b      	beq.n	800a852 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800a75a:	2380      	movs	r3, #128	; 0x80
 800a75c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800a75e:	2318      	movs	r3, #24
 800a760:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800a762:	2300      	movs	r3, #0
 800a764:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800a766:	f04f 33ff 	mov.w	r3, #4294967295
 800a76a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d045      	beq.n	800a7fe <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	2b00      	cmp	r3, #0
 800a778:	d002      	beq.n	800a780 <osThreadNew+0x48>
        name = attr->name;
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	699b      	ldr	r3, [r3, #24]
 800a784:	2b00      	cmp	r3, #0
 800a786:	d002      	beq.n	800a78e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	699b      	ldr	r3, [r3, #24]
 800a78c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a78e:	69fb      	ldr	r3, [r7, #28]
 800a790:	2b00      	cmp	r3, #0
 800a792:	d008      	beq.n	800a7a6 <osThreadNew+0x6e>
 800a794:	69fb      	ldr	r3, [r7, #28]
 800a796:	2b38      	cmp	r3, #56	; 0x38
 800a798:	d805      	bhi.n	800a7a6 <osThreadNew+0x6e>
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	685b      	ldr	r3, [r3, #4]
 800a79e:	f003 0301 	and.w	r3, r3, #1
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d001      	beq.n	800a7aa <osThreadNew+0x72>
        return (NULL);
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	e054      	b.n	800a854 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	695b      	ldr	r3, [r3, #20]
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d003      	beq.n	800a7ba <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	695b      	ldr	r3, [r3, #20]
 800a7b6:	089b      	lsrs	r3, r3, #2
 800a7b8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	689b      	ldr	r3, [r3, #8]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d00e      	beq.n	800a7e0 <osThreadNew+0xa8>
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	68db      	ldr	r3, [r3, #12]
 800a7c6:	2baf      	cmp	r3, #175	; 0xaf
 800a7c8:	d90a      	bls.n	800a7e0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d006      	beq.n	800a7e0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	695b      	ldr	r3, [r3, #20]
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d002      	beq.n	800a7e0 <osThreadNew+0xa8>
        mem = 1;
 800a7da:	2301      	movs	r3, #1
 800a7dc:	61bb      	str	r3, [r7, #24]
 800a7de:	e010      	b.n	800a802 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	689b      	ldr	r3, [r3, #8]
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d10c      	bne.n	800a802 <osThreadNew+0xca>
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	68db      	ldr	r3, [r3, #12]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d108      	bne.n	800a802 <osThreadNew+0xca>
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	691b      	ldr	r3, [r3, #16]
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d104      	bne.n	800a802 <osThreadNew+0xca>
          mem = 0;
 800a7f8:	2300      	movs	r3, #0
 800a7fa:	61bb      	str	r3, [r7, #24]
 800a7fc:	e001      	b.n	800a802 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800a7fe:	2300      	movs	r3, #0
 800a800:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a802:	69bb      	ldr	r3, [r7, #24]
 800a804:	2b01      	cmp	r3, #1
 800a806:	d110      	bne.n	800a82a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800a80c:	687a      	ldr	r2, [r7, #4]
 800a80e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a810:	9202      	str	r2, [sp, #8]
 800a812:	9301      	str	r3, [sp, #4]
 800a814:	69fb      	ldr	r3, [r7, #28]
 800a816:	9300      	str	r3, [sp, #0]
 800a818:	68bb      	ldr	r3, [r7, #8]
 800a81a:	6a3a      	ldr	r2, [r7, #32]
 800a81c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a81e:	68f8      	ldr	r0, [r7, #12]
 800a820:	f000 ffdc 	bl	800b7dc <xTaskCreateStatic>
 800a824:	4603      	mov	r3, r0
 800a826:	613b      	str	r3, [r7, #16]
 800a828:	e013      	b.n	800a852 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800a82a:	69bb      	ldr	r3, [r7, #24]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d110      	bne.n	800a852 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a830:	6a3b      	ldr	r3, [r7, #32]
 800a832:	b29a      	uxth	r2, r3
 800a834:	f107 0310 	add.w	r3, r7, #16
 800a838:	9301      	str	r3, [sp, #4]
 800a83a:	69fb      	ldr	r3, [r7, #28]
 800a83c:	9300      	str	r3, [sp, #0]
 800a83e:	68bb      	ldr	r3, [r7, #8]
 800a840:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a842:	68f8      	ldr	r0, [r7, #12]
 800a844:	f001 f827 	bl	800b896 <xTaskCreate>
 800a848:	4603      	mov	r3, r0
 800a84a:	2b01      	cmp	r3, #1
 800a84c:	d001      	beq.n	800a852 <osThreadNew+0x11a>
            hTask = NULL;
 800a84e:	2300      	movs	r3, #0
 800a850:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a852:	693b      	ldr	r3, [r7, #16]
}
 800a854:	4618      	mov	r0, r3
 800a856:	3728      	adds	r7, #40	; 0x28
 800a858:	46bd      	mov	sp, r7
 800a85a:	bd80      	pop	{r7, pc}

0800a85c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800a85c:	b580      	push	{r7, lr}
 800a85e:	b084      	sub	sp, #16
 800a860:	af00      	add	r7, sp, #0
 800a862:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a864:	f3ef 8305 	mrs	r3, IPSR
 800a868:	60bb      	str	r3, [r7, #8]
  return(result);
 800a86a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d003      	beq.n	800a878 <osDelay+0x1c>
    stat = osErrorISR;
 800a870:	f06f 0305 	mvn.w	r3, #5
 800a874:	60fb      	str	r3, [r7, #12]
 800a876:	e007      	b.n	800a888 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800a878:	2300      	movs	r3, #0
 800a87a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d002      	beq.n	800a888 <osDelay+0x2c>
      vTaskDelay(ticks);
 800a882:	6878      	ldr	r0, [r7, #4]
 800a884:	f001 f968 	bl	800bb58 <vTaskDelay>
    }
  }

  return (stat);
 800a888:	68fb      	ldr	r3, [r7, #12]
}
 800a88a:	4618      	mov	r0, r3
 800a88c:	3710      	adds	r7, #16
 800a88e:	46bd      	mov	sp, r7
 800a890:	bd80      	pop	{r7, pc}
	...

0800a894 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a894:	b480      	push	{r7}
 800a896:	b085      	sub	sp, #20
 800a898:	af00      	add	r7, sp, #0
 800a89a:	60f8      	str	r0, [r7, #12]
 800a89c:	60b9      	str	r1, [r7, #8]
 800a89e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	4a07      	ldr	r2, [pc, #28]	; (800a8c0 <vApplicationGetIdleTaskMemory+0x2c>)
 800a8a4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a8a6:	68bb      	ldr	r3, [r7, #8]
 800a8a8:	4a06      	ldr	r2, [pc, #24]	; (800a8c4 <vApplicationGetIdleTaskMemory+0x30>)
 800a8aa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	2280      	movs	r2, #128	; 0x80
 800a8b0:	601a      	str	r2, [r3, #0]
}
 800a8b2:	bf00      	nop
 800a8b4:	3714      	adds	r7, #20
 800a8b6:	46bd      	mov	sp, r7
 800a8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8bc:	4770      	bx	lr
 800a8be:	bf00      	nop
 800a8c0:	2000030c 	.word	0x2000030c
 800a8c4:	200003bc 	.word	0x200003bc

0800a8c8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a8c8:	b480      	push	{r7}
 800a8ca:	b085      	sub	sp, #20
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	60f8      	str	r0, [r7, #12]
 800a8d0:	60b9      	str	r1, [r7, #8]
 800a8d2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	4a07      	ldr	r2, [pc, #28]	; (800a8f4 <vApplicationGetTimerTaskMemory+0x2c>)
 800a8d8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a8da:	68bb      	ldr	r3, [r7, #8]
 800a8dc:	4a06      	ldr	r2, [pc, #24]	; (800a8f8 <vApplicationGetTimerTaskMemory+0x30>)
 800a8de:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a8e6:	601a      	str	r2, [r3, #0]
}
 800a8e8:	bf00      	nop
 800a8ea:	3714      	adds	r7, #20
 800a8ec:	46bd      	mov	sp, r7
 800a8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f2:	4770      	bx	lr
 800a8f4:	200005bc 	.word	0x200005bc
 800a8f8:	2000066c 	.word	0x2000066c

0800a8fc <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800a8fc:	b580      	push	{r7, lr}
 800a8fe:	b082      	sub	sp, #8
 800a900:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800a902:	2020      	movs	r0, #32
 800a904:	f002 fdf0 	bl	800d4e8 <pvPortMalloc>
 800a908:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d00a      	beq.n	800a926 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	2200      	movs	r2, #0
 800a914:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	3304      	adds	r3, #4
 800a91a:	4618      	mov	r0, r3
 800a91c:	f000 f983 	bl	800ac26 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	2200      	movs	r2, #0
 800a924:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 800a926:	687b      	ldr	r3, [r7, #4]
	}
 800a928:	4618      	mov	r0, r3
 800a92a:	3708      	adds	r7, #8
 800a92c:	46bd      	mov	sp, r7
 800a92e:	bd80      	pop	{r7, pc}

0800a930 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 800a930:	b580      	push	{r7, lr}
 800a932:	b090      	sub	sp, #64	; 0x40
 800a934:	af00      	add	r7, sp, #0
 800a936:	60f8      	str	r0, [r7, #12]
 800a938:	60b9      	str	r1, [r7, #8]
 800a93a:	607a      	str	r2, [r7, #4]
 800a93c:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800a942:	2300      	movs	r3, #0
 800a944:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800a946:	2300      	movs	r3, #0
 800a948:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d10a      	bne.n	800a966 <xEventGroupWaitBits+0x36>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a950:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a954:	f383 8811 	msr	BASEPRI, r3
 800a958:	f3bf 8f6f 	isb	sy
 800a95c:	f3bf 8f4f 	dsb	sy
 800a960:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a962:	bf00      	nop
 800a964:	e7fe      	b.n	800a964 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800a966:	68bb      	ldr	r3, [r7, #8]
 800a968:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d00a      	beq.n	800a986 <xEventGroupWaitBits+0x56>
	__asm volatile
 800a970:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a974:	f383 8811 	msr	BASEPRI, r3
 800a978:	f3bf 8f6f 	isb	sy
 800a97c:	f3bf 8f4f 	dsb	sy
 800a980:	61fb      	str	r3, [r7, #28]
}
 800a982:	bf00      	nop
 800a984:	e7fe      	b.n	800a984 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 800a986:	68bb      	ldr	r3, [r7, #8]
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d10a      	bne.n	800a9a2 <xEventGroupWaitBits+0x72>
	__asm volatile
 800a98c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a990:	f383 8811 	msr	BASEPRI, r3
 800a994:	f3bf 8f6f 	isb	sy
 800a998:	f3bf 8f4f 	dsb	sy
 800a99c:	61bb      	str	r3, [r7, #24]
}
 800a99e:	bf00      	nop
 800a9a0:	e7fe      	b.n	800a9a0 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a9a2:	f001 fe25 	bl	800c5f0 <xTaskGetSchedulerState>
 800a9a6:	4603      	mov	r3, r0
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d102      	bne.n	800a9b2 <xEventGroupWaitBits+0x82>
 800a9ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d101      	bne.n	800a9b6 <xEventGroupWaitBits+0x86>
 800a9b2:	2301      	movs	r3, #1
 800a9b4:	e000      	b.n	800a9b8 <xEventGroupWaitBits+0x88>
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d10a      	bne.n	800a9d2 <xEventGroupWaitBits+0xa2>
	__asm volatile
 800a9bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9c0:	f383 8811 	msr	BASEPRI, r3
 800a9c4:	f3bf 8f6f 	isb	sy
 800a9c8:	f3bf 8f4f 	dsb	sy
 800a9cc:	617b      	str	r3, [r7, #20]
}
 800a9ce:	bf00      	nop
 800a9d0:	e7fe      	b.n	800a9d0 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 800a9d2:	f001 f967 	bl	800bca4 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800a9d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 800a9dc:	683a      	ldr	r2, [r7, #0]
 800a9de:	68b9      	ldr	r1, [r7, #8]
 800a9e0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a9e2:	f000 f8fe 	bl	800abe2 <prvTestWaitCondition>
 800a9e6:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 800a9e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d00e      	beq.n	800aa0c <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800a9ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9f0:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 800a9f2:	2300      	movs	r3, #0
 800a9f4:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d028      	beq.n	800aa4e <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800a9fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9fe:	681a      	ldr	r2, [r3, #0]
 800aa00:	68bb      	ldr	r3, [r7, #8]
 800aa02:	43db      	mvns	r3, r3
 800aa04:	401a      	ands	r2, r3
 800aa06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa08:	601a      	str	r2, [r3, #0]
 800aa0a:	e020      	b.n	800aa4e <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 800aa0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d104      	bne.n	800aa1c <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 800aa12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa14:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 800aa16:	2301      	movs	r3, #1
 800aa18:	633b      	str	r3, [r7, #48]	; 0x30
 800aa1a:	e018      	b.n	800aa4e <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d003      	beq.n	800aa2a <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800aa22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa24:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800aa28:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 800aa2a:	683b      	ldr	r3, [r7, #0]
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d003      	beq.n	800aa38 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800aa30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa32:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800aa36:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 800aa38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa3a:	1d18      	adds	r0, r3, #4
 800aa3c:	68ba      	ldr	r2, [r7, #8]
 800aa3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa40:	4313      	orrs	r3, r2
 800aa42:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aa44:	4619      	mov	r1, r3
 800aa46:	f001 fb47 	bl	800c0d8 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800aa4a:	2300      	movs	r3, #0
 800aa4c:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800aa4e:	f001 f937 	bl	800bcc0 <xTaskResumeAll>
 800aa52:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 800aa54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d031      	beq.n	800aabe <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 800aa5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d107      	bne.n	800aa70 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 800aa60:	4b19      	ldr	r3, [pc, #100]	; (800aac8 <xEventGroupWaitBits+0x198>)
 800aa62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa66:	601a      	str	r2, [r3, #0]
 800aa68:	f3bf 8f4f 	dsb	sy
 800aa6c:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 800aa70:	f001 fe4a 	bl	800c708 <uxTaskResetEventItemValue>
 800aa74:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800aa76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d11a      	bne.n	800aab6 <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 800aa80:	f002 fc10 	bl	800d2a4 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 800aa84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800aa8a:	683a      	ldr	r2, [r7, #0]
 800aa8c:	68b9      	ldr	r1, [r7, #8]
 800aa8e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800aa90:	f000 f8a7 	bl	800abe2 <prvTestWaitCondition>
 800aa94:	4603      	mov	r3, r0
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d009      	beq.n	800aaae <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d006      	beq.n	800aaae <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800aaa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aaa2:	681a      	ldr	r2, [r3, #0]
 800aaa4:	68bb      	ldr	r3, [r7, #8]
 800aaa6:	43db      	mvns	r3, r3
 800aaa8:	401a      	ands	r2, r3
 800aaaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aaac:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 800aaae:	2301      	movs	r3, #1
 800aab0:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 800aab2:	f002 fc27 	bl	800d304 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800aab6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aab8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800aabc:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 800aabe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800aac0:	4618      	mov	r0, r3
 800aac2:	3740      	adds	r7, #64	; 0x40
 800aac4:	46bd      	mov	sp, r7
 800aac6:	bd80      	pop	{r7, pc}
 800aac8:	e000ed04 	.word	0xe000ed04

0800aacc <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 800aacc:	b580      	push	{r7, lr}
 800aace:	b08e      	sub	sp, #56	; 0x38
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	6078      	str	r0, [r7, #4]
 800aad4:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800aad6:	2300      	movs	r3, #0
 800aad8:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 800aade:	2300      	movs	r3, #0
 800aae0:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d10a      	bne.n	800aafe <xEventGroupSetBits+0x32>
	__asm volatile
 800aae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaec:	f383 8811 	msr	BASEPRI, r3
 800aaf0:	f3bf 8f6f 	isb	sy
 800aaf4:	f3bf 8f4f 	dsb	sy
 800aaf8:	613b      	str	r3, [r7, #16]
}
 800aafa:	bf00      	nop
 800aafc:	e7fe      	b.n	800aafc <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800aafe:	683b      	ldr	r3, [r7, #0]
 800ab00:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d00a      	beq.n	800ab1e <xEventGroupSetBits+0x52>
	__asm volatile
 800ab08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab0c:	f383 8811 	msr	BASEPRI, r3
 800ab10:	f3bf 8f6f 	isb	sy
 800ab14:	f3bf 8f4f 	dsb	sy
 800ab18:	60fb      	str	r3, [r7, #12]
}
 800ab1a:	bf00      	nop
 800ab1c:	e7fe      	b.n	800ab1c <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 800ab1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab20:	3304      	adds	r3, #4
 800ab22:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ab24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab26:	3308      	adds	r3, #8
 800ab28:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 800ab2a:	f001 f8bb 	bl	800bca4 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 800ab2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab30:	68db      	ldr	r3, [r3, #12]
 800ab32:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 800ab34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab36:	681a      	ldr	r2, [r3, #0]
 800ab38:	683b      	ldr	r3, [r7, #0]
 800ab3a:	431a      	orrs	r2, r3
 800ab3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab3e:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 800ab40:	e03c      	b.n	800abbc <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 800ab42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab44:	685b      	ldr	r3, [r3, #4]
 800ab46:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 800ab48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 800ab4e:	2300      	movs	r3, #0
 800ab50:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800ab52:	69bb      	ldr	r3, [r7, #24]
 800ab54:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800ab58:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800ab5a:	69bb      	ldr	r3, [r7, #24]
 800ab5c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800ab60:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800ab62:	697b      	ldr	r3, [r7, #20]
 800ab64:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d108      	bne.n	800ab7e <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 800ab6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab6e:	681a      	ldr	r2, [r3, #0]
 800ab70:	69bb      	ldr	r3, [r7, #24]
 800ab72:	4013      	ands	r3, r2
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d00b      	beq.n	800ab90 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 800ab78:	2301      	movs	r3, #1
 800ab7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ab7c:	e008      	b.n	800ab90 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800ab7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab80:	681a      	ldr	r2, [r3, #0]
 800ab82:	69bb      	ldr	r3, [r7, #24]
 800ab84:	4013      	ands	r3, r2
 800ab86:	69ba      	ldr	r2, [r7, #24]
 800ab88:	429a      	cmp	r2, r3
 800ab8a:	d101      	bne.n	800ab90 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 800ab8c:	2301      	movs	r3, #1
 800ab8e:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 800ab90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d010      	beq.n	800abb8 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800ab96:	697b      	ldr	r3, [r7, #20]
 800ab98:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d003      	beq.n	800aba8 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 800aba0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aba2:	69bb      	ldr	r3, [r7, #24]
 800aba4:	4313      	orrs	r3, r2
 800aba6:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800aba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800abb0:	4619      	mov	r1, r3
 800abb2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800abb4:	f001 fb5c 	bl	800c270 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 800abb8:	69fb      	ldr	r3, [r7, #28]
 800abba:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 800abbc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800abbe:	6a3b      	ldr	r3, [r7, #32]
 800abc0:	429a      	cmp	r2, r3
 800abc2:	d1be      	bne.n	800ab42 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800abc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abc6:	681a      	ldr	r2, [r3, #0]
 800abc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abca:	43db      	mvns	r3, r3
 800abcc:	401a      	ands	r2, r3
 800abce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abd0:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800abd2:	f001 f875 	bl	800bcc0 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800abd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abd8:	681b      	ldr	r3, [r3, #0]
}
 800abda:	4618      	mov	r0, r3
 800abdc:	3738      	adds	r7, #56	; 0x38
 800abde:	46bd      	mov	sp, r7
 800abe0:	bd80      	pop	{r7, pc}

0800abe2 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 800abe2:	b480      	push	{r7}
 800abe4:	b087      	sub	sp, #28
 800abe6:	af00      	add	r7, sp, #0
 800abe8:	60f8      	str	r0, [r7, #12]
 800abea:	60b9      	str	r1, [r7, #8]
 800abec:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 800abee:	2300      	movs	r3, #0
 800abf0:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d107      	bne.n	800ac08 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800abf8:	68fa      	ldr	r2, [r7, #12]
 800abfa:	68bb      	ldr	r3, [r7, #8]
 800abfc:	4013      	ands	r3, r2
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d00a      	beq.n	800ac18 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800ac02:	2301      	movs	r3, #1
 800ac04:	617b      	str	r3, [r7, #20]
 800ac06:	e007      	b.n	800ac18 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800ac08:	68fa      	ldr	r2, [r7, #12]
 800ac0a:	68bb      	ldr	r3, [r7, #8]
 800ac0c:	4013      	ands	r3, r2
 800ac0e:	68ba      	ldr	r2, [r7, #8]
 800ac10:	429a      	cmp	r2, r3
 800ac12:	d101      	bne.n	800ac18 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800ac14:	2301      	movs	r3, #1
 800ac16:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 800ac18:	697b      	ldr	r3, [r7, #20]
}
 800ac1a:	4618      	mov	r0, r3
 800ac1c:	371c      	adds	r7, #28
 800ac1e:	46bd      	mov	sp, r7
 800ac20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac24:	4770      	bx	lr

0800ac26 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ac26:	b480      	push	{r7}
 800ac28:	b083      	sub	sp, #12
 800ac2a:	af00      	add	r7, sp, #0
 800ac2c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	f103 0208 	add.w	r2, r3, #8
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	f04f 32ff 	mov.w	r2, #4294967295
 800ac3e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	f103 0208 	add.w	r2, r3, #8
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	f103 0208 	add.w	r2, r3, #8
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	2200      	movs	r2, #0
 800ac58:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ac5a:	bf00      	nop
 800ac5c:	370c      	adds	r7, #12
 800ac5e:	46bd      	mov	sp, r7
 800ac60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac64:	4770      	bx	lr

0800ac66 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ac66:	b480      	push	{r7}
 800ac68:	b083      	sub	sp, #12
 800ac6a:	af00      	add	r7, sp, #0
 800ac6c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	2200      	movs	r2, #0
 800ac72:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ac74:	bf00      	nop
 800ac76:	370c      	adds	r7, #12
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac7e:	4770      	bx	lr

0800ac80 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ac80:	b480      	push	{r7}
 800ac82:	b085      	sub	sp, #20
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	6078      	str	r0, [r7, #4]
 800ac88:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	685b      	ldr	r3, [r3, #4]
 800ac8e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ac90:	683b      	ldr	r3, [r7, #0]
 800ac92:	68fa      	ldr	r2, [r7, #12]
 800ac94:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	689a      	ldr	r2, [r3, #8]
 800ac9a:	683b      	ldr	r3, [r7, #0]
 800ac9c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	689b      	ldr	r3, [r3, #8]
 800aca2:	683a      	ldr	r2, [r7, #0]
 800aca4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	683a      	ldr	r2, [r7, #0]
 800acaa:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800acac:	683b      	ldr	r3, [r7, #0]
 800acae:	687a      	ldr	r2, [r7, #4]
 800acb0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	1c5a      	adds	r2, r3, #1
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	601a      	str	r2, [r3, #0]
}
 800acbc:	bf00      	nop
 800acbe:	3714      	adds	r7, #20
 800acc0:	46bd      	mov	sp, r7
 800acc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc6:	4770      	bx	lr

0800acc8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800acc8:	b480      	push	{r7}
 800acca:	b085      	sub	sp, #20
 800accc:	af00      	add	r7, sp, #0
 800acce:	6078      	str	r0, [r7, #4]
 800acd0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800acd2:	683b      	ldr	r3, [r7, #0]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800acd8:	68bb      	ldr	r3, [r7, #8]
 800acda:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acde:	d103      	bne.n	800ace8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	691b      	ldr	r3, [r3, #16]
 800ace4:	60fb      	str	r3, [r7, #12]
 800ace6:	e00c      	b.n	800ad02 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	3308      	adds	r3, #8
 800acec:	60fb      	str	r3, [r7, #12]
 800acee:	e002      	b.n	800acf6 <vListInsert+0x2e>
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	685b      	ldr	r3, [r3, #4]
 800acf4:	60fb      	str	r3, [r7, #12]
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	685b      	ldr	r3, [r3, #4]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	68ba      	ldr	r2, [r7, #8]
 800acfe:	429a      	cmp	r2, r3
 800ad00:	d2f6      	bcs.n	800acf0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	685a      	ldr	r2, [r3, #4]
 800ad06:	683b      	ldr	r3, [r7, #0]
 800ad08:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ad0a:	683b      	ldr	r3, [r7, #0]
 800ad0c:	685b      	ldr	r3, [r3, #4]
 800ad0e:	683a      	ldr	r2, [r7, #0]
 800ad10:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ad12:	683b      	ldr	r3, [r7, #0]
 800ad14:	68fa      	ldr	r2, [r7, #12]
 800ad16:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	683a      	ldr	r2, [r7, #0]
 800ad1c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ad1e:	683b      	ldr	r3, [r7, #0]
 800ad20:	687a      	ldr	r2, [r7, #4]
 800ad22:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	1c5a      	adds	r2, r3, #1
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	601a      	str	r2, [r3, #0]
}
 800ad2e:	bf00      	nop
 800ad30:	3714      	adds	r7, #20
 800ad32:	46bd      	mov	sp, r7
 800ad34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad38:	4770      	bx	lr

0800ad3a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ad3a:	b480      	push	{r7}
 800ad3c:	b085      	sub	sp, #20
 800ad3e:	af00      	add	r7, sp, #0
 800ad40:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	691b      	ldr	r3, [r3, #16]
 800ad46:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	685b      	ldr	r3, [r3, #4]
 800ad4c:	687a      	ldr	r2, [r7, #4]
 800ad4e:	6892      	ldr	r2, [r2, #8]
 800ad50:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	689b      	ldr	r3, [r3, #8]
 800ad56:	687a      	ldr	r2, [r7, #4]
 800ad58:	6852      	ldr	r2, [r2, #4]
 800ad5a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	685b      	ldr	r3, [r3, #4]
 800ad60:	687a      	ldr	r2, [r7, #4]
 800ad62:	429a      	cmp	r2, r3
 800ad64:	d103      	bne.n	800ad6e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	689a      	ldr	r2, [r3, #8]
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	2200      	movs	r2, #0
 800ad72:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	1e5a      	subs	r2, r3, #1
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	681b      	ldr	r3, [r3, #0]
}
 800ad82:	4618      	mov	r0, r3
 800ad84:	3714      	adds	r7, #20
 800ad86:	46bd      	mov	sp, r7
 800ad88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad8c:	4770      	bx	lr
	...

0800ad90 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ad90:	b580      	push	{r7, lr}
 800ad92:	b084      	sub	sp, #16
 800ad94:	af00      	add	r7, sp, #0
 800ad96:	6078      	str	r0, [r7, #4]
 800ad98:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d10a      	bne.n	800adba <xQueueGenericReset+0x2a>
	__asm volatile
 800ada4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ada8:	f383 8811 	msr	BASEPRI, r3
 800adac:	f3bf 8f6f 	isb	sy
 800adb0:	f3bf 8f4f 	dsb	sy
 800adb4:	60bb      	str	r3, [r7, #8]
}
 800adb6:	bf00      	nop
 800adb8:	e7fe      	b.n	800adb8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800adba:	f002 fa73 	bl	800d2a4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	681a      	ldr	r2, [r3, #0]
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800adc6:	68f9      	ldr	r1, [r7, #12]
 800adc8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800adca:	fb01 f303 	mul.w	r3, r1, r3
 800adce:	441a      	add	r2, r3
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	2200      	movs	r2, #0
 800add8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	681a      	ldr	r2, [r3, #0]
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	681a      	ldr	r2, [r3, #0]
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800adea:	3b01      	subs	r3, #1
 800adec:	68f9      	ldr	r1, [r7, #12]
 800adee:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800adf0:	fb01 f303 	mul.w	r3, r1, r3
 800adf4:	441a      	add	r2, r3
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	22ff      	movs	r2, #255	; 0xff
 800adfe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	22ff      	movs	r2, #255	; 0xff
 800ae06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800ae0a:	683b      	ldr	r3, [r7, #0]
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d114      	bne.n	800ae3a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	691b      	ldr	r3, [r3, #16]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d01a      	beq.n	800ae4e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	3310      	adds	r3, #16
 800ae1c:	4618      	mov	r0, r3
 800ae1e:	f001 f9c3 	bl	800c1a8 <xTaskRemoveFromEventList>
 800ae22:	4603      	mov	r3, r0
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d012      	beq.n	800ae4e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ae28:	4b0c      	ldr	r3, [pc, #48]	; (800ae5c <xQueueGenericReset+0xcc>)
 800ae2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae2e:	601a      	str	r2, [r3, #0]
 800ae30:	f3bf 8f4f 	dsb	sy
 800ae34:	f3bf 8f6f 	isb	sy
 800ae38:	e009      	b.n	800ae4e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	3310      	adds	r3, #16
 800ae3e:	4618      	mov	r0, r3
 800ae40:	f7ff fef1 	bl	800ac26 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	3324      	adds	r3, #36	; 0x24
 800ae48:	4618      	mov	r0, r3
 800ae4a:	f7ff feec 	bl	800ac26 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ae4e:	f002 fa59 	bl	800d304 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ae52:	2301      	movs	r3, #1
}
 800ae54:	4618      	mov	r0, r3
 800ae56:	3710      	adds	r7, #16
 800ae58:	46bd      	mov	sp, r7
 800ae5a:	bd80      	pop	{r7, pc}
 800ae5c:	e000ed04 	.word	0xe000ed04

0800ae60 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800ae60:	b580      	push	{r7, lr}
 800ae62:	b08e      	sub	sp, #56	; 0x38
 800ae64:	af02      	add	r7, sp, #8
 800ae66:	60f8      	str	r0, [r7, #12]
 800ae68:	60b9      	str	r1, [r7, #8]
 800ae6a:	607a      	str	r2, [r7, #4]
 800ae6c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d10a      	bne.n	800ae8a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800ae74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae78:	f383 8811 	msr	BASEPRI, r3
 800ae7c:	f3bf 8f6f 	isb	sy
 800ae80:	f3bf 8f4f 	dsb	sy
 800ae84:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ae86:	bf00      	nop
 800ae88:	e7fe      	b.n	800ae88 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800ae8a:	683b      	ldr	r3, [r7, #0]
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d10a      	bne.n	800aea6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800ae90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae94:	f383 8811 	msr	BASEPRI, r3
 800ae98:	f3bf 8f6f 	isb	sy
 800ae9c:	f3bf 8f4f 	dsb	sy
 800aea0:	627b      	str	r3, [r7, #36]	; 0x24
}
 800aea2:	bf00      	nop
 800aea4:	e7fe      	b.n	800aea4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d002      	beq.n	800aeb2 <xQueueGenericCreateStatic+0x52>
 800aeac:	68bb      	ldr	r3, [r7, #8]
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d001      	beq.n	800aeb6 <xQueueGenericCreateStatic+0x56>
 800aeb2:	2301      	movs	r3, #1
 800aeb4:	e000      	b.n	800aeb8 <xQueueGenericCreateStatic+0x58>
 800aeb6:	2300      	movs	r3, #0
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d10a      	bne.n	800aed2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800aebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aec0:	f383 8811 	msr	BASEPRI, r3
 800aec4:	f3bf 8f6f 	isb	sy
 800aec8:	f3bf 8f4f 	dsb	sy
 800aecc:	623b      	str	r3, [r7, #32]
}
 800aece:	bf00      	nop
 800aed0:	e7fe      	b.n	800aed0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d102      	bne.n	800aede <xQueueGenericCreateStatic+0x7e>
 800aed8:	68bb      	ldr	r3, [r7, #8]
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d101      	bne.n	800aee2 <xQueueGenericCreateStatic+0x82>
 800aede:	2301      	movs	r3, #1
 800aee0:	e000      	b.n	800aee4 <xQueueGenericCreateStatic+0x84>
 800aee2:	2300      	movs	r3, #0
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d10a      	bne.n	800aefe <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800aee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeec:	f383 8811 	msr	BASEPRI, r3
 800aef0:	f3bf 8f6f 	isb	sy
 800aef4:	f3bf 8f4f 	dsb	sy
 800aef8:	61fb      	str	r3, [r7, #28]
}
 800aefa:	bf00      	nop
 800aefc:	e7fe      	b.n	800aefc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800aefe:	2350      	movs	r3, #80	; 0x50
 800af00:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800af02:	697b      	ldr	r3, [r7, #20]
 800af04:	2b50      	cmp	r3, #80	; 0x50
 800af06:	d00a      	beq.n	800af1e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800af08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af0c:	f383 8811 	msr	BASEPRI, r3
 800af10:	f3bf 8f6f 	isb	sy
 800af14:	f3bf 8f4f 	dsb	sy
 800af18:	61bb      	str	r3, [r7, #24]
}
 800af1a:	bf00      	nop
 800af1c:	e7fe      	b.n	800af1c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800af1e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800af20:	683b      	ldr	r3, [r7, #0]
 800af22:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800af24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af26:	2b00      	cmp	r3, #0
 800af28:	d00d      	beq.n	800af46 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800af2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af2c:	2201      	movs	r2, #1
 800af2e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800af32:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800af36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af38:	9300      	str	r3, [sp, #0]
 800af3a:	4613      	mov	r3, r2
 800af3c:	687a      	ldr	r2, [r7, #4]
 800af3e:	68b9      	ldr	r1, [r7, #8]
 800af40:	68f8      	ldr	r0, [r7, #12]
 800af42:	f000 f83f 	bl	800afc4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800af46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800af48:	4618      	mov	r0, r3
 800af4a:	3730      	adds	r7, #48	; 0x30
 800af4c:	46bd      	mov	sp, r7
 800af4e:	bd80      	pop	{r7, pc}

0800af50 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800af50:	b580      	push	{r7, lr}
 800af52:	b08a      	sub	sp, #40	; 0x28
 800af54:	af02      	add	r7, sp, #8
 800af56:	60f8      	str	r0, [r7, #12]
 800af58:	60b9      	str	r1, [r7, #8]
 800af5a:	4613      	mov	r3, r2
 800af5c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	2b00      	cmp	r3, #0
 800af62:	d10a      	bne.n	800af7a <xQueueGenericCreate+0x2a>
	__asm volatile
 800af64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af68:	f383 8811 	msr	BASEPRI, r3
 800af6c:	f3bf 8f6f 	isb	sy
 800af70:	f3bf 8f4f 	dsb	sy
 800af74:	613b      	str	r3, [r7, #16]
}
 800af76:	bf00      	nop
 800af78:	e7fe      	b.n	800af78 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	68ba      	ldr	r2, [r7, #8]
 800af7e:	fb02 f303 	mul.w	r3, r2, r3
 800af82:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800af84:	69fb      	ldr	r3, [r7, #28]
 800af86:	3350      	adds	r3, #80	; 0x50
 800af88:	4618      	mov	r0, r3
 800af8a:	f002 faad 	bl	800d4e8 <pvPortMalloc>
 800af8e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800af90:	69bb      	ldr	r3, [r7, #24]
 800af92:	2b00      	cmp	r3, #0
 800af94:	d011      	beq.n	800afba <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800af96:	69bb      	ldr	r3, [r7, #24]
 800af98:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800af9a:	697b      	ldr	r3, [r7, #20]
 800af9c:	3350      	adds	r3, #80	; 0x50
 800af9e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800afa0:	69bb      	ldr	r3, [r7, #24]
 800afa2:	2200      	movs	r2, #0
 800afa4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800afa8:	79fa      	ldrb	r2, [r7, #7]
 800afaa:	69bb      	ldr	r3, [r7, #24]
 800afac:	9300      	str	r3, [sp, #0]
 800afae:	4613      	mov	r3, r2
 800afb0:	697a      	ldr	r2, [r7, #20]
 800afb2:	68b9      	ldr	r1, [r7, #8]
 800afb4:	68f8      	ldr	r0, [r7, #12]
 800afb6:	f000 f805 	bl	800afc4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800afba:	69bb      	ldr	r3, [r7, #24]
	}
 800afbc:	4618      	mov	r0, r3
 800afbe:	3720      	adds	r7, #32
 800afc0:	46bd      	mov	sp, r7
 800afc2:	bd80      	pop	{r7, pc}

0800afc4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800afc4:	b580      	push	{r7, lr}
 800afc6:	b084      	sub	sp, #16
 800afc8:	af00      	add	r7, sp, #0
 800afca:	60f8      	str	r0, [r7, #12]
 800afcc:	60b9      	str	r1, [r7, #8]
 800afce:	607a      	str	r2, [r7, #4]
 800afd0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800afd2:	68bb      	ldr	r3, [r7, #8]
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d103      	bne.n	800afe0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800afd8:	69bb      	ldr	r3, [r7, #24]
 800afda:	69ba      	ldr	r2, [r7, #24]
 800afdc:	601a      	str	r2, [r3, #0]
 800afde:	e002      	b.n	800afe6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800afe0:	69bb      	ldr	r3, [r7, #24]
 800afe2:	687a      	ldr	r2, [r7, #4]
 800afe4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800afe6:	69bb      	ldr	r3, [r7, #24]
 800afe8:	68fa      	ldr	r2, [r7, #12]
 800afea:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800afec:	69bb      	ldr	r3, [r7, #24]
 800afee:	68ba      	ldr	r2, [r7, #8]
 800aff0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800aff2:	2101      	movs	r1, #1
 800aff4:	69b8      	ldr	r0, [r7, #24]
 800aff6:	f7ff fecb 	bl	800ad90 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800affa:	69bb      	ldr	r3, [r7, #24]
 800affc:	78fa      	ldrb	r2, [r7, #3]
 800affe:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b002:	bf00      	nop
 800b004:	3710      	adds	r7, #16
 800b006:	46bd      	mov	sp, r7
 800b008:	bd80      	pop	{r7, pc}
	...

0800b00c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b00c:	b580      	push	{r7, lr}
 800b00e:	b08e      	sub	sp, #56	; 0x38
 800b010:	af00      	add	r7, sp, #0
 800b012:	60f8      	str	r0, [r7, #12]
 800b014:	60b9      	str	r1, [r7, #8]
 800b016:	607a      	str	r2, [r7, #4]
 800b018:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b01a:	2300      	movs	r3, #0
 800b01c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b024:	2b00      	cmp	r3, #0
 800b026:	d10a      	bne.n	800b03e <xQueueGenericSend+0x32>
	__asm volatile
 800b028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b02c:	f383 8811 	msr	BASEPRI, r3
 800b030:	f3bf 8f6f 	isb	sy
 800b034:	f3bf 8f4f 	dsb	sy
 800b038:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b03a:	bf00      	nop
 800b03c:	e7fe      	b.n	800b03c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b03e:	68bb      	ldr	r3, [r7, #8]
 800b040:	2b00      	cmp	r3, #0
 800b042:	d103      	bne.n	800b04c <xQueueGenericSend+0x40>
 800b044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d101      	bne.n	800b050 <xQueueGenericSend+0x44>
 800b04c:	2301      	movs	r3, #1
 800b04e:	e000      	b.n	800b052 <xQueueGenericSend+0x46>
 800b050:	2300      	movs	r3, #0
 800b052:	2b00      	cmp	r3, #0
 800b054:	d10a      	bne.n	800b06c <xQueueGenericSend+0x60>
	__asm volatile
 800b056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b05a:	f383 8811 	msr	BASEPRI, r3
 800b05e:	f3bf 8f6f 	isb	sy
 800b062:	f3bf 8f4f 	dsb	sy
 800b066:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b068:	bf00      	nop
 800b06a:	e7fe      	b.n	800b06a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b06c:	683b      	ldr	r3, [r7, #0]
 800b06e:	2b02      	cmp	r3, #2
 800b070:	d103      	bne.n	800b07a <xQueueGenericSend+0x6e>
 800b072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b074:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b076:	2b01      	cmp	r3, #1
 800b078:	d101      	bne.n	800b07e <xQueueGenericSend+0x72>
 800b07a:	2301      	movs	r3, #1
 800b07c:	e000      	b.n	800b080 <xQueueGenericSend+0x74>
 800b07e:	2300      	movs	r3, #0
 800b080:	2b00      	cmp	r3, #0
 800b082:	d10a      	bne.n	800b09a <xQueueGenericSend+0x8e>
	__asm volatile
 800b084:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b088:	f383 8811 	msr	BASEPRI, r3
 800b08c:	f3bf 8f6f 	isb	sy
 800b090:	f3bf 8f4f 	dsb	sy
 800b094:	623b      	str	r3, [r7, #32]
}
 800b096:	bf00      	nop
 800b098:	e7fe      	b.n	800b098 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b09a:	f001 faa9 	bl	800c5f0 <xTaskGetSchedulerState>
 800b09e:	4603      	mov	r3, r0
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d102      	bne.n	800b0aa <xQueueGenericSend+0x9e>
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d101      	bne.n	800b0ae <xQueueGenericSend+0xa2>
 800b0aa:	2301      	movs	r3, #1
 800b0ac:	e000      	b.n	800b0b0 <xQueueGenericSend+0xa4>
 800b0ae:	2300      	movs	r3, #0
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d10a      	bne.n	800b0ca <xQueueGenericSend+0xbe>
	__asm volatile
 800b0b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0b8:	f383 8811 	msr	BASEPRI, r3
 800b0bc:	f3bf 8f6f 	isb	sy
 800b0c0:	f3bf 8f4f 	dsb	sy
 800b0c4:	61fb      	str	r3, [r7, #28]
}
 800b0c6:	bf00      	nop
 800b0c8:	e7fe      	b.n	800b0c8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b0ca:	f002 f8eb 	bl	800d2a4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b0ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b0d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b0d6:	429a      	cmp	r2, r3
 800b0d8:	d302      	bcc.n	800b0e0 <xQueueGenericSend+0xd4>
 800b0da:	683b      	ldr	r3, [r7, #0]
 800b0dc:	2b02      	cmp	r3, #2
 800b0de:	d129      	bne.n	800b134 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b0e0:	683a      	ldr	r2, [r7, #0]
 800b0e2:	68b9      	ldr	r1, [r7, #8]
 800b0e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b0e6:	f000 fa0b 	bl	800b500 <prvCopyDataToQueue>
 800b0ea:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b0ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d010      	beq.n	800b116 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b0f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0f6:	3324      	adds	r3, #36	; 0x24
 800b0f8:	4618      	mov	r0, r3
 800b0fa:	f001 f855 	bl	800c1a8 <xTaskRemoveFromEventList>
 800b0fe:	4603      	mov	r3, r0
 800b100:	2b00      	cmp	r3, #0
 800b102:	d013      	beq.n	800b12c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b104:	4b3f      	ldr	r3, [pc, #252]	; (800b204 <xQueueGenericSend+0x1f8>)
 800b106:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b10a:	601a      	str	r2, [r3, #0]
 800b10c:	f3bf 8f4f 	dsb	sy
 800b110:	f3bf 8f6f 	isb	sy
 800b114:	e00a      	b.n	800b12c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d007      	beq.n	800b12c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b11c:	4b39      	ldr	r3, [pc, #228]	; (800b204 <xQueueGenericSend+0x1f8>)
 800b11e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b122:	601a      	str	r2, [r3, #0]
 800b124:	f3bf 8f4f 	dsb	sy
 800b128:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b12c:	f002 f8ea 	bl	800d304 <vPortExitCritical>
				return pdPASS;
 800b130:	2301      	movs	r3, #1
 800b132:	e063      	b.n	800b1fc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	2b00      	cmp	r3, #0
 800b138:	d103      	bne.n	800b142 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b13a:	f002 f8e3 	bl	800d304 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b13e:	2300      	movs	r3, #0
 800b140:	e05c      	b.n	800b1fc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b142:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b144:	2b00      	cmp	r3, #0
 800b146:	d106      	bne.n	800b156 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b148:	f107 0314 	add.w	r3, r7, #20
 800b14c:	4618      	mov	r0, r3
 800b14e:	f001 f8f1 	bl	800c334 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b152:	2301      	movs	r3, #1
 800b154:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b156:	f002 f8d5 	bl	800d304 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b15a:	f000 fda3 	bl	800bca4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b15e:	f002 f8a1 	bl	800d2a4 <vPortEnterCritical>
 800b162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b164:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b168:	b25b      	sxtb	r3, r3
 800b16a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b16e:	d103      	bne.n	800b178 <xQueueGenericSend+0x16c>
 800b170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b172:	2200      	movs	r2, #0
 800b174:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b17a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b17e:	b25b      	sxtb	r3, r3
 800b180:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b184:	d103      	bne.n	800b18e <xQueueGenericSend+0x182>
 800b186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b188:	2200      	movs	r2, #0
 800b18a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b18e:	f002 f8b9 	bl	800d304 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b192:	1d3a      	adds	r2, r7, #4
 800b194:	f107 0314 	add.w	r3, r7, #20
 800b198:	4611      	mov	r1, r2
 800b19a:	4618      	mov	r0, r3
 800b19c:	f001 f8e0 	bl	800c360 <xTaskCheckForTimeOut>
 800b1a0:	4603      	mov	r3, r0
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d124      	bne.n	800b1f0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b1a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b1a8:	f000 faa2 	bl	800b6f0 <prvIsQueueFull>
 800b1ac:	4603      	mov	r3, r0
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d018      	beq.n	800b1e4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b1b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1b4:	3310      	adds	r3, #16
 800b1b6:	687a      	ldr	r2, [r7, #4]
 800b1b8:	4611      	mov	r1, r2
 800b1ba:	4618      	mov	r0, r3
 800b1bc:	f000 ff68 	bl	800c090 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b1c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b1c2:	f000 fa2d 	bl	800b620 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b1c6:	f000 fd7b 	bl	800bcc0 <xTaskResumeAll>
 800b1ca:	4603      	mov	r3, r0
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	f47f af7c 	bne.w	800b0ca <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800b1d2:	4b0c      	ldr	r3, [pc, #48]	; (800b204 <xQueueGenericSend+0x1f8>)
 800b1d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b1d8:	601a      	str	r2, [r3, #0]
 800b1da:	f3bf 8f4f 	dsb	sy
 800b1de:	f3bf 8f6f 	isb	sy
 800b1e2:	e772      	b.n	800b0ca <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b1e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b1e6:	f000 fa1b 	bl	800b620 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b1ea:	f000 fd69 	bl	800bcc0 <xTaskResumeAll>
 800b1ee:	e76c      	b.n	800b0ca <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b1f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b1f2:	f000 fa15 	bl	800b620 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b1f6:	f000 fd63 	bl	800bcc0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b1fa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b1fc:	4618      	mov	r0, r3
 800b1fe:	3738      	adds	r7, #56	; 0x38
 800b200:	46bd      	mov	sp, r7
 800b202:	bd80      	pop	{r7, pc}
 800b204:	e000ed04 	.word	0xe000ed04

0800b208 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b208:	b580      	push	{r7, lr}
 800b20a:	b090      	sub	sp, #64	; 0x40
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	60f8      	str	r0, [r7, #12]
 800b210:	60b9      	str	r1, [r7, #8]
 800b212:	607a      	str	r2, [r7, #4]
 800b214:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800b21a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d10a      	bne.n	800b236 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800b220:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b224:	f383 8811 	msr	BASEPRI, r3
 800b228:	f3bf 8f6f 	isb	sy
 800b22c:	f3bf 8f4f 	dsb	sy
 800b230:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b232:	bf00      	nop
 800b234:	e7fe      	b.n	800b234 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b236:	68bb      	ldr	r3, [r7, #8]
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d103      	bne.n	800b244 <xQueueGenericSendFromISR+0x3c>
 800b23c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b23e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b240:	2b00      	cmp	r3, #0
 800b242:	d101      	bne.n	800b248 <xQueueGenericSendFromISR+0x40>
 800b244:	2301      	movs	r3, #1
 800b246:	e000      	b.n	800b24a <xQueueGenericSendFromISR+0x42>
 800b248:	2300      	movs	r3, #0
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d10a      	bne.n	800b264 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800b24e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b252:	f383 8811 	msr	BASEPRI, r3
 800b256:	f3bf 8f6f 	isb	sy
 800b25a:	f3bf 8f4f 	dsb	sy
 800b25e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b260:	bf00      	nop
 800b262:	e7fe      	b.n	800b262 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b264:	683b      	ldr	r3, [r7, #0]
 800b266:	2b02      	cmp	r3, #2
 800b268:	d103      	bne.n	800b272 <xQueueGenericSendFromISR+0x6a>
 800b26a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b26c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b26e:	2b01      	cmp	r3, #1
 800b270:	d101      	bne.n	800b276 <xQueueGenericSendFromISR+0x6e>
 800b272:	2301      	movs	r3, #1
 800b274:	e000      	b.n	800b278 <xQueueGenericSendFromISR+0x70>
 800b276:	2300      	movs	r3, #0
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d10a      	bne.n	800b292 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800b27c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b280:	f383 8811 	msr	BASEPRI, r3
 800b284:	f3bf 8f6f 	isb	sy
 800b288:	f3bf 8f4f 	dsb	sy
 800b28c:	623b      	str	r3, [r7, #32]
}
 800b28e:	bf00      	nop
 800b290:	e7fe      	b.n	800b290 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b292:	f002 f8e9 	bl	800d468 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b296:	f3ef 8211 	mrs	r2, BASEPRI
 800b29a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b29e:	f383 8811 	msr	BASEPRI, r3
 800b2a2:	f3bf 8f6f 	isb	sy
 800b2a6:	f3bf 8f4f 	dsb	sy
 800b2aa:	61fa      	str	r2, [r7, #28]
 800b2ac:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b2ae:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b2b0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b2b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b2b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b2ba:	429a      	cmp	r2, r3
 800b2bc:	d302      	bcc.n	800b2c4 <xQueueGenericSendFromISR+0xbc>
 800b2be:	683b      	ldr	r3, [r7, #0]
 800b2c0:	2b02      	cmp	r3, #2
 800b2c2:	d12f      	bne.n	800b324 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b2c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b2ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b2ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2d2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b2d4:	683a      	ldr	r2, [r7, #0]
 800b2d6:	68b9      	ldr	r1, [r7, #8]
 800b2d8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b2da:	f000 f911 	bl	800b500 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b2de:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800b2e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2e6:	d112      	bne.n	800b30e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b2e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d016      	beq.n	800b31e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b2f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2f2:	3324      	adds	r3, #36	; 0x24
 800b2f4:	4618      	mov	r0, r3
 800b2f6:	f000 ff57 	bl	800c1a8 <xTaskRemoveFromEventList>
 800b2fa:	4603      	mov	r3, r0
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d00e      	beq.n	800b31e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	2b00      	cmp	r3, #0
 800b304:	d00b      	beq.n	800b31e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	2201      	movs	r2, #1
 800b30a:	601a      	str	r2, [r3, #0]
 800b30c:	e007      	b.n	800b31e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b30e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b312:	3301      	adds	r3, #1
 800b314:	b2db      	uxtb	r3, r3
 800b316:	b25a      	sxtb	r2, r3
 800b318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b31a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b31e:	2301      	movs	r3, #1
 800b320:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800b322:	e001      	b.n	800b328 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b324:	2300      	movs	r3, #0
 800b326:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b328:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b32a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b32c:	697b      	ldr	r3, [r7, #20]
 800b32e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b332:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b334:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b336:	4618      	mov	r0, r3
 800b338:	3740      	adds	r7, #64	; 0x40
 800b33a:	46bd      	mov	sp, r7
 800b33c:	bd80      	pop	{r7, pc}
	...

0800b340 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b340:	b580      	push	{r7, lr}
 800b342:	b08c      	sub	sp, #48	; 0x30
 800b344:	af00      	add	r7, sp, #0
 800b346:	60f8      	str	r0, [r7, #12]
 800b348:	60b9      	str	r1, [r7, #8]
 800b34a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b34c:	2300      	movs	r3, #0
 800b34e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b356:	2b00      	cmp	r3, #0
 800b358:	d10a      	bne.n	800b370 <xQueueReceive+0x30>
	__asm volatile
 800b35a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b35e:	f383 8811 	msr	BASEPRI, r3
 800b362:	f3bf 8f6f 	isb	sy
 800b366:	f3bf 8f4f 	dsb	sy
 800b36a:	623b      	str	r3, [r7, #32]
}
 800b36c:	bf00      	nop
 800b36e:	e7fe      	b.n	800b36e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b370:	68bb      	ldr	r3, [r7, #8]
 800b372:	2b00      	cmp	r3, #0
 800b374:	d103      	bne.n	800b37e <xQueueReceive+0x3e>
 800b376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d101      	bne.n	800b382 <xQueueReceive+0x42>
 800b37e:	2301      	movs	r3, #1
 800b380:	e000      	b.n	800b384 <xQueueReceive+0x44>
 800b382:	2300      	movs	r3, #0
 800b384:	2b00      	cmp	r3, #0
 800b386:	d10a      	bne.n	800b39e <xQueueReceive+0x5e>
	__asm volatile
 800b388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b38c:	f383 8811 	msr	BASEPRI, r3
 800b390:	f3bf 8f6f 	isb	sy
 800b394:	f3bf 8f4f 	dsb	sy
 800b398:	61fb      	str	r3, [r7, #28]
}
 800b39a:	bf00      	nop
 800b39c:	e7fe      	b.n	800b39c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b39e:	f001 f927 	bl	800c5f0 <xTaskGetSchedulerState>
 800b3a2:	4603      	mov	r3, r0
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d102      	bne.n	800b3ae <xQueueReceive+0x6e>
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d101      	bne.n	800b3b2 <xQueueReceive+0x72>
 800b3ae:	2301      	movs	r3, #1
 800b3b0:	e000      	b.n	800b3b4 <xQueueReceive+0x74>
 800b3b2:	2300      	movs	r3, #0
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d10a      	bne.n	800b3ce <xQueueReceive+0x8e>
	__asm volatile
 800b3b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3bc:	f383 8811 	msr	BASEPRI, r3
 800b3c0:	f3bf 8f6f 	isb	sy
 800b3c4:	f3bf 8f4f 	dsb	sy
 800b3c8:	61bb      	str	r3, [r7, #24]
}
 800b3ca:	bf00      	nop
 800b3cc:	e7fe      	b.n	800b3cc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b3ce:	f001 ff69 	bl	800d2a4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b3d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3d6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b3d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d01f      	beq.n	800b41e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b3de:	68b9      	ldr	r1, [r7, #8]
 800b3e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b3e2:	f000 f8f7 	bl	800b5d4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b3e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3e8:	1e5a      	subs	r2, r3, #1
 800b3ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3ec:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b3ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3f0:	691b      	ldr	r3, [r3, #16]
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d00f      	beq.n	800b416 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b3f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3f8:	3310      	adds	r3, #16
 800b3fa:	4618      	mov	r0, r3
 800b3fc:	f000 fed4 	bl	800c1a8 <xTaskRemoveFromEventList>
 800b400:	4603      	mov	r3, r0
 800b402:	2b00      	cmp	r3, #0
 800b404:	d007      	beq.n	800b416 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b406:	4b3d      	ldr	r3, [pc, #244]	; (800b4fc <xQueueReceive+0x1bc>)
 800b408:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b40c:	601a      	str	r2, [r3, #0]
 800b40e:	f3bf 8f4f 	dsb	sy
 800b412:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b416:	f001 ff75 	bl	800d304 <vPortExitCritical>
				return pdPASS;
 800b41a:	2301      	movs	r3, #1
 800b41c:	e069      	b.n	800b4f2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	2b00      	cmp	r3, #0
 800b422:	d103      	bne.n	800b42c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b424:	f001 ff6e 	bl	800d304 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b428:	2300      	movs	r3, #0
 800b42a:	e062      	b.n	800b4f2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b42c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d106      	bne.n	800b440 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b432:	f107 0310 	add.w	r3, r7, #16
 800b436:	4618      	mov	r0, r3
 800b438:	f000 ff7c 	bl	800c334 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b43c:	2301      	movs	r3, #1
 800b43e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b440:	f001 ff60 	bl	800d304 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b444:	f000 fc2e 	bl	800bca4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b448:	f001 ff2c 	bl	800d2a4 <vPortEnterCritical>
 800b44c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b44e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b452:	b25b      	sxtb	r3, r3
 800b454:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b458:	d103      	bne.n	800b462 <xQueueReceive+0x122>
 800b45a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b45c:	2200      	movs	r2, #0
 800b45e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b464:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b468:	b25b      	sxtb	r3, r3
 800b46a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b46e:	d103      	bne.n	800b478 <xQueueReceive+0x138>
 800b470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b472:	2200      	movs	r2, #0
 800b474:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b478:	f001 ff44 	bl	800d304 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b47c:	1d3a      	adds	r2, r7, #4
 800b47e:	f107 0310 	add.w	r3, r7, #16
 800b482:	4611      	mov	r1, r2
 800b484:	4618      	mov	r0, r3
 800b486:	f000 ff6b 	bl	800c360 <xTaskCheckForTimeOut>
 800b48a:	4603      	mov	r3, r0
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d123      	bne.n	800b4d8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b490:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b492:	f000 f917 	bl	800b6c4 <prvIsQueueEmpty>
 800b496:	4603      	mov	r3, r0
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d017      	beq.n	800b4cc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b49c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b49e:	3324      	adds	r3, #36	; 0x24
 800b4a0:	687a      	ldr	r2, [r7, #4]
 800b4a2:	4611      	mov	r1, r2
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	f000 fdf3 	bl	800c090 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b4aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b4ac:	f000 f8b8 	bl	800b620 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b4b0:	f000 fc06 	bl	800bcc0 <xTaskResumeAll>
 800b4b4:	4603      	mov	r3, r0
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d189      	bne.n	800b3ce <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800b4ba:	4b10      	ldr	r3, [pc, #64]	; (800b4fc <xQueueReceive+0x1bc>)
 800b4bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b4c0:	601a      	str	r2, [r3, #0]
 800b4c2:	f3bf 8f4f 	dsb	sy
 800b4c6:	f3bf 8f6f 	isb	sy
 800b4ca:	e780      	b.n	800b3ce <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b4cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b4ce:	f000 f8a7 	bl	800b620 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b4d2:	f000 fbf5 	bl	800bcc0 <xTaskResumeAll>
 800b4d6:	e77a      	b.n	800b3ce <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b4d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b4da:	f000 f8a1 	bl	800b620 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b4de:	f000 fbef 	bl	800bcc0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b4e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b4e4:	f000 f8ee 	bl	800b6c4 <prvIsQueueEmpty>
 800b4e8:	4603      	mov	r3, r0
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	f43f af6f 	beq.w	800b3ce <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b4f0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b4f2:	4618      	mov	r0, r3
 800b4f4:	3730      	adds	r7, #48	; 0x30
 800b4f6:	46bd      	mov	sp, r7
 800b4f8:	bd80      	pop	{r7, pc}
 800b4fa:	bf00      	nop
 800b4fc:	e000ed04 	.word	0xe000ed04

0800b500 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b500:	b580      	push	{r7, lr}
 800b502:	b086      	sub	sp, #24
 800b504:	af00      	add	r7, sp, #0
 800b506:	60f8      	str	r0, [r7, #12]
 800b508:	60b9      	str	r1, [r7, #8]
 800b50a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b50c:	2300      	movs	r3, #0
 800b50e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b514:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d10d      	bne.n	800b53a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	2b00      	cmp	r3, #0
 800b524:	d14d      	bne.n	800b5c2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	689b      	ldr	r3, [r3, #8]
 800b52a:	4618      	mov	r0, r3
 800b52c:	f001 f87e 	bl	800c62c <xTaskPriorityDisinherit>
 800b530:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	2200      	movs	r2, #0
 800b536:	609a      	str	r2, [r3, #8]
 800b538:	e043      	b.n	800b5c2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d119      	bne.n	800b574 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	6858      	ldr	r0, [r3, #4]
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b548:	461a      	mov	r2, r3
 800b54a:	68b9      	ldr	r1, [r7, #8]
 800b54c:	f002 ffa4 	bl	800e498 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	685a      	ldr	r2, [r3, #4]
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b558:	441a      	add	r2, r3
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	685a      	ldr	r2, [r3, #4]
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	689b      	ldr	r3, [r3, #8]
 800b566:	429a      	cmp	r2, r3
 800b568:	d32b      	bcc.n	800b5c2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	681a      	ldr	r2, [r3, #0]
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	605a      	str	r2, [r3, #4]
 800b572:	e026      	b.n	800b5c2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	68d8      	ldr	r0, [r3, #12]
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b57c:	461a      	mov	r2, r3
 800b57e:	68b9      	ldr	r1, [r7, #8]
 800b580:	f002 ff8a 	bl	800e498 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	68da      	ldr	r2, [r3, #12]
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b58c:	425b      	negs	r3, r3
 800b58e:	441a      	add	r2, r3
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	68da      	ldr	r2, [r3, #12]
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	429a      	cmp	r2, r3
 800b59e:	d207      	bcs.n	800b5b0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	689a      	ldr	r2, [r3, #8]
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5a8:	425b      	negs	r3, r3
 800b5aa:	441a      	add	r2, r3
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	2b02      	cmp	r3, #2
 800b5b4:	d105      	bne.n	800b5c2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b5b6:	693b      	ldr	r3, [r7, #16]
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d002      	beq.n	800b5c2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b5bc:	693b      	ldr	r3, [r7, #16]
 800b5be:	3b01      	subs	r3, #1
 800b5c0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b5c2:	693b      	ldr	r3, [r7, #16]
 800b5c4:	1c5a      	adds	r2, r3, #1
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b5ca:	697b      	ldr	r3, [r7, #20]
}
 800b5cc:	4618      	mov	r0, r3
 800b5ce:	3718      	adds	r7, #24
 800b5d0:	46bd      	mov	sp, r7
 800b5d2:	bd80      	pop	{r7, pc}

0800b5d4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b5d4:	b580      	push	{r7, lr}
 800b5d6:	b082      	sub	sp, #8
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	6078      	str	r0, [r7, #4]
 800b5dc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d018      	beq.n	800b618 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	68da      	ldr	r2, [r3, #12]
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5ee:	441a      	add	r2, r3
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	68da      	ldr	r2, [r3, #12]
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	689b      	ldr	r3, [r3, #8]
 800b5fc:	429a      	cmp	r2, r3
 800b5fe:	d303      	bcc.n	800b608 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	681a      	ldr	r2, [r3, #0]
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	68d9      	ldr	r1, [r3, #12]
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b610:	461a      	mov	r2, r3
 800b612:	6838      	ldr	r0, [r7, #0]
 800b614:	f002 ff40 	bl	800e498 <memcpy>
	}
}
 800b618:	bf00      	nop
 800b61a:	3708      	adds	r7, #8
 800b61c:	46bd      	mov	sp, r7
 800b61e:	bd80      	pop	{r7, pc}

0800b620 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b620:	b580      	push	{r7, lr}
 800b622:	b084      	sub	sp, #16
 800b624:	af00      	add	r7, sp, #0
 800b626:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b628:	f001 fe3c 	bl	800d2a4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b632:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b634:	e011      	b.n	800b65a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d012      	beq.n	800b664 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	3324      	adds	r3, #36	; 0x24
 800b642:	4618      	mov	r0, r3
 800b644:	f000 fdb0 	bl	800c1a8 <xTaskRemoveFromEventList>
 800b648:	4603      	mov	r3, r0
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d001      	beq.n	800b652 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b64e:	f000 fee9 	bl	800c424 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b652:	7bfb      	ldrb	r3, [r7, #15]
 800b654:	3b01      	subs	r3, #1
 800b656:	b2db      	uxtb	r3, r3
 800b658:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b65a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b65e:	2b00      	cmp	r3, #0
 800b660:	dce9      	bgt.n	800b636 <prvUnlockQueue+0x16>
 800b662:	e000      	b.n	800b666 <prvUnlockQueue+0x46>
					break;
 800b664:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	22ff      	movs	r2, #255	; 0xff
 800b66a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b66e:	f001 fe49 	bl	800d304 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b672:	f001 fe17 	bl	800d2a4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b67c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b67e:	e011      	b.n	800b6a4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	691b      	ldr	r3, [r3, #16]
 800b684:	2b00      	cmp	r3, #0
 800b686:	d012      	beq.n	800b6ae <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	3310      	adds	r3, #16
 800b68c:	4618      	mov	r0, r3
 800b68e:	f000 fd8b 	bl	800c1a8 <xTaskRemoveFromEventList>
 800b692:	4603      	mov	r3, r0
 800b694:	2b00      	cmp	r3, #0
 800b696:	d001      	beq.n	800b69c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b698:	f000 fec4 	bl	800c424 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b69c:	7bbb      	ldrb	r3, [r7, #14]
 800b69e:	3b01      	subs	r3, #1
 800b6a0:	b2db      	uxtb	r3, r3
 800b6a2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b6a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	dce9      	bgt.n	800b680 <prvUnlockQueue+0x60>
 800b6ac:	e000      	b.n	800b6b0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b6ae:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	22ff      	movs	r2, #255	; 0xff
 800b6b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b6b8:	f001 fe24 	bl	800d304 <vPortExitCritical>
}
 800b6bc:	bf00      	nop
 800b6be:	3710      	adds	r7, #16
 800b6c0:	46bd      	mov	sp, r7
 800b6c2:	bd80      	pop	{r7, pc}

0800b6c4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b6c4:	b580      	push	{r7, lr}
 800b6c6:	b084      	sub	sp, #16
 800b6c8:	af00      	add	r7, sp, #0
 800b6ca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b6cc:	f001 fdea 	bl	800d2a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d102      	bne.n	800b6de <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b6d8:	2301      	movs	r3, #1
 800b6da:	60fb      	str	r3, [r7, #12]
 800b6dc:	e001      	b.n	800b6e2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b6de:	2300      	movs	r3, #0
 800b6e0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b6e2:	f001 fe0f 	bl	800d304 <vPortExitCritical>

	return xReturn;
 800b6e6:	68fb      	ldr	r3, [r7, #12]
}
 800b6e8:	4618      	mov	r0, r3
 800b6ea:	3710      	adds	r7, #16
 800b6ec:	46bd      	mov	sp, r7
 800b6ee:	bd80      	pop	{r7, pc}

0800b6f0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b6f0:	b580      	push	{r7, lr}
 800b6f2:	b084      	sub	sp, #16
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b6f8:	f001 fdd4 	bl	800d2a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b704:	429a      	cmp	r2, r3
 800b706:	d102      	bne.n	800b70e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b708:	2301      	movs	r3, #1
 800b70a:	60fb      	str	r3, [r7, #12]
 800b70c:	e001      	b.n	800b712 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b70e:	2300      	movs	r3, #0
 800b710:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b712:	f001 fdf7 	bl	800d304 <vPortExitCritical>

	return xReturn;
 800b716:	68fb      	ldr	r3, [r7, #12]
}
 800b718:	4618      	mov	r0, r3
 800b71a:	3710      	adds	r7, #16
 800b71c:	46bd      	mov	sp, r7
 800b71e:	bd80      	pop	{r7, pc}

0800b720 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b720:	b480      	push	{r7}
 800b722:	b085      	sub	sp, #20
 800b724:	af00      	add	r7, sp, #0
 800b726:	6078      	str	r0, [r7, #4]
 800b728:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b72a:	2300      	movs	r3, #0
 800b72c:	60fb      	str	r3, [r7, #12]
 800b72e:	e014      	b.n	800b75a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b730:	4a0f      	ldr	r2, [pc, #60]	; (800b770 <vQueueAddToRegistry+0x50>)
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d10b      	bne.n	800b754 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b73c:	490c      	ldr	r1, [pc, #48]	; (800b770 <vQueueAddToRegistry+0x50>)
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	683a      	ldr	r2, [r7, #0]
 800b742:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b746:	4a0a      	ldr	r2, [pc, #40]	; (800b770 <vQueueAddToRegistry+0x50>)
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	00db      	lsls	r3, r3, #3
 800b74c:	4413      	add	r3, r2
 800b74e:	687a      	ldr	r2, [r7, #4]
 800b750:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b752:	e006      	b.n	800b762 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	3301      	adds	r3, #1
 800b758:	60fb      	str	r3, [r7, #12]
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	2b07      	cmp	r3, #7
 800b75e:	d9e7      	bls.n	800b730 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b760:	bf00      	nop
 800b762:	bf00      	nop
 800b764:	3714      	adds	r7, #20
 800b766:	46bd      	mov	sp, r7
 800b768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b76c:	4770      	bx	lr
 800b76e:	bf00      	nop
 800b770:	20000a6c 	.word	0x20000a6c

0800b774 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b774:	b580      	push	{r7, lr}
 800b776:	b086      	sub	sp, #24
 800b778:	af00      	add	r7, sp, #0
 800b77a:	60f8      	str	r0, [r7, #12]
 800b77c:	60b9      	str	r1, [r7, #8]
 800b77e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b784:	f001 fd8e 	bl	800d2a4 <vPortEnterCritical>
 800b788:	697b      	ldr	r3, [r7, #20]
 800b78a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b78e:	b25b      	sxtb	r3, r3
 800b790:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b794:	d103      	bne.n	800b79e <vQueueWaitForMessageRestricted+0x2a>
 800b796:	697b      	ldr	r3, [r7, #20]
 800b798:	2200      	movs	r2, #0
 800b79a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b79e:	697b      	ldr	r3, [r7, #20]
 800b7a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b7a4:	b25b      	sxtb	r3, r3
 800b7a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7aa:	d103      	bne.n	800b7b4 <vQueueWaitForMessageRestricted+0x40>
 800b7ac:	697b      	ldr	r3, [r7, #20]
 800b7ae:	2200      	movs	r2, #0
 800b7b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b7b4:	f001 fda6 	bl	800d304 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b7b8:	697b      	ldr	r3, [r7, #20]
 800b7ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d106      	bne.n	800b7ce <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b7c0:	697b      	ldr	r3, [r7, #20]
 800b7c2:	3324      	adds	r3, #36	; 0x24
 800b7c4:	687a      	ldr	r2, [r7, #4]
 800b7c6:	68b9      	ldr	r1, [r7, #8]
 800b7c8:	4618      	mov	r0, r3
 800b7ca:	f000 fcc1 	bl	800c150 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b7ce:	6978      	ldr	r0, [r7, #20]
 800b7d0:	f7ff ff26 	bl	800b620 <prvUnlockQueue>
	}
 800b7d4:	bf00      	nop
 800b7d6:	3718      	adds	r7, #24
 800b7d8:	46bd      	mov	sp, r7
 800b7da:	bd80      	pop	{r7, pc}

0800b7dc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b7dc:	b580      	push	{r7, lr}
 800b7de:	b08e      	sub	sp, #56	; 0x38
 800b7e0:	af04      	add	r7, sp, #16
 800b7e2:	60f8      	str	r0, [r7, #12]
 800b7e4:	60b9      	str	r1, [r7, #8]
 800b7e6:	607a      	str	r2, [r7, #4]
 800b7e8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b7ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d10a      	bne.n	800b806 <xTaskCreateStatic+0x2a>
	__asm volatile
 800b7f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7f4:	f383 8811 	msr	BASEPRI, r3
 800b7f8:	f3bf 8f6f 	isb	sy
 800b7fc:	f3bf 8f4f 	dsb	sy
 800b800:	623b      	str	r3, [r7, #32]
}
 800b802:	bf00      	nop
 800b804:	e7fe      	b.n	800b804 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d10a      	bne.n	800b822 <xTaskCreateStatic+0x46>
	__asm volatile
 800b80c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b810:	f383 8811 	msr	BASEPRI, r3
 800b814:	f3bf 8f6f 	isb	sy
 800b818:	f3bf 8f4f 	dsb	sy
 800b81c:	61fb      	str	r3, [r7, #28]
}
 800b81e:	bf00      	nop
 800b820:	e7fe      	b.n	800b820 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b822:	23b0      	movs	r3, #176	; 0xb0
 800b824:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b826:	693b      	ldr	r3, [r7, #16]
 800b828:	2bb0      	cmp	r3, #176	; 0xb0
 800b82a:	d00a      	beq.n	800b842 <xTaskCreateStatic+0x66>
	__asm volatile
 800b82c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b830:	f383 8811 	msr	BASEPRI, r3
 800b834:	f3bf 8f6f 	isb	sy
 800b838:	f3bf 8f4f 	dsb	sy
 800b83c:	61bb      	str	r3, [r7, #24]
}
 800b83e:	bf00      	nop
 800b840:	e7fe      	b.n	800b840 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b842:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b846:	2b00      	cmp	r3, #0
 800b848:	d01e      	beq.n	800b888 <xTaskCreateStatic+0xac>
 800b84a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d01b      	beq.n	800b888 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b852:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b856:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b858:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b85a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b85c:	2202      	movs	r2, #2
 800b85e:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b862:	2300      	movs	r3, #0
 800b864:	9303      	str	r3, [sp, #12]
 800b866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b868:	9302      	str	r3, [sp, #8]
 800b86a:	f107 0314 	add.w	r3, r7, #20
 800b86e:	9301      	str	r3, [sp, #4]
 800b870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b872:	9300      	str	r3, [sp, #0]
 800b874:	683b      	ldr	r3, [r7, #0]
 800b876:	687a      	ldr	r2, [r7, #4]
 800b878:	68b9      	ldr	r1, [r7, #8]
 800b87a:	68f8      	ldr	r0, [r7, #12]
 800b87c:	f000 f850 	bl	800b920 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b880:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b882:	f000 f8f9 	bl	800ba78 <prvAddNewTaskToReadyList>
 800b886:	e001      	b.n	800b88c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800b888:	2300      	movs	r3, #0
 800b88a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b88c:	697b      	ldr	r3, [r7, #20]
	}
 800b88e:	4618      	mov	r0, r3
 800b890:	3728      	adds	r7, #40	; 0x28
 800b892:	46bd      	mov	sp, r7
 800b894:	bd80      	pop	{r7, pc}

0800b896 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b896:	b580      	push	{r7, lr}
 800b898:	b08c      	sub	sp, #48	; 0x30
 800b89a:	af04      	add	r7, sp, #16
 800b89c:	60f8      	str	r0, [r7, #12]
 800b89e:	60b9      	str	r1, [r7, #8]
 800b8a0:	603b      	str	r3, [r7, #0]
 800b8a2:	4613      	mov	r3, r2
 800b8a4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b8a6:	88fb      	ldrh	r3, [r7, #6]
 800b8a8:	009b      	lsls	r3, r3, #2
 800b8aa:	4618      	mov	r0, r3
 800b8ac:	f001 fe1c 	bl	800d4e8 <pvPortMalloc>
 800b8b0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b8b2:	697b      	ldr	r3, [r7, #20]
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d00e      	beq.n	800b8d6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b8b8:	20b0      	movs	r0, #176	; 0xb0
 800b8ba:	f001 fe15 	bl	800d4e8 <pvPortMalloc>
 800b8be:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b8c0:	69fb      	ldr	r3, [r7, #28]
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d003      	beq.n	800b8ce <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b8c6:	69fb      	ldr	r3, [r7, #28]
 800b8c8:	697a      	ldr	r2, [r7, #20]
 800b8ca:	631a      	str	r2, [r3, #48]	; 0x30
 800b8cc:	e005      	b.n	800b8da <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b8ce:	6978      	ldr	r0, [r7, #20]
 800b8d0:	f001 fed6 	bl	800d680 <vPortFree>
 800b8d4:	e001      	b.n	800b8da <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b8d6:	2300      	movs	r3, #0
 800b8d8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b8da:	69fb      	ldr	r3, [r7, #28]
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d017      	beq.n	800b910 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b8e0:	69fb      	ldr	r3, [r7, #28]
 800b8e2:	2200      	movs	r2, #0
 800b8e4:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b8e8:	88fa      	ldrh	r2, [r7, #6]
 800b8ea:	2300      	movs	r3, #0
 800b8ec:	9303      	str	r3, [sp, #12]
 800b8ee:	69fb      	ldr	r3, [r7, #28]
 800b8f0:	9302      	str	r3, [sp, #8]
 800b8f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8f4:	9301      	str	r3, [sp, #4]
 800b8f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8f8:	9300      	str	r3, [sp, #0]
 800b8fa:	683b      	ldr	r3, [r7, #0]
 800b8fc:	68b9      	ldr	r1, [r7, #8]
 800b8fe:	68f8      	ldr	r0, [r7, #12]
 800b900:	f000 f80e 	bl	800b920 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b904:	69f8      	ldr	r0, [r7, #28]
 800b906:	f000 f8b7 	bl	800ba78 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b90a:	2301      	movs	r3, #1
 800b90c:	61bb      	str	r3, [r7, #24]
 800b90e:	e002      	b.n	800b916 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b910:	f04f 33ff 	mov.w	r3, #4294967295
 800b914:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b916:	69bb      	ldr	r3, [r7, #24]
	}
 800b918:	4618      	mov	r0, r3
 800b91a:	3720      	adds	r7, #32
 800b91c:	46bd      	mov	sp, r7
 800b91e:	bd80      	pop	{r7, pc}

0800b920 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b920:	b580      	push	{r7, lr}
 800b922:	b088      	sub	sp, #32
 800b924:	af00      	add	r7, sp, #0
 800b926:	60f8      	str	r0, [r7, #12]
 800b928:	60b9      	str	r1, [r7, #8]
 800b92a:	607a      	str	r2, [r7, #4]
 800b92c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b92e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b930:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	009b      	lsls	r3, r3, #2
 800b936:	461a      	mov	r2, r3
 800b938:	21a5      	movs	r1, #165	; 0xa5
 800b93a:	f002 fd29 	bl	800e390 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b93e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b940:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b948:	3b01      	subs	r3, #1
 800b94a:	009b      	lsls	r3, r3, #2
 800b94c:	4413      	add	r3, r2
 800b94e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b950:	69bb      	ldr	r3, [r7, #24]
 800b952:	f023 0307 	bic.w	r3, r3, #7
 800b956:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b958:	69bb      	ldr	r3, [r7, #24]
 800b95a:	f003 0307 	and.w	r3, r3, #7
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d00a      	beq.n	800b978 <prvInitialiseNewTask+0x58>
	__asm volatile
 800b962:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b966:	f383 8811 	msr	BASEPRI, r3
 800b96a:	f3bf 8f6f 	isb	sy
 800b96e:	f3bf 8f4f 	dsb	sy
 800b972:	617b      	str	r3, [r7, #20]
}
 800b974:	bf00      	nop
 800b976:	e7fe      	b.n	800b976 <prvInitialiseNewTask+0x56>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 800b978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b97a:	69ba      	ldr	r2, [r7, #24]
 800b97c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b97e:	68bb      	ldr	r3, [r7, #8]
 800b980:	2b00      	cmp	r3, #0
 800b982:	d01f      	beq.n	800b9c4 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b984:	2300      	movs	r3, #0
 800b986:	61fb      	str	r3, [r7, #28]
 800b988:	e012      	b.n	800b9b0 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b98a:	68ba      	ldr	r2, [r7, #8]
 800b98c:	69fb      	ldr	r3, [r7, #28]
 800b98e:	4413      	add	r3, r2
 800b990:	7819      	ldrb	r1, [r3, #0]
 800b992:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b994:	69fb      	ldr	r3, [r7, #28]
 800b996:	4413      	add	r3, r2
 800b998:	3334      	adds	r3, #52	; 0x34
 800b99a:	460a      	mov	r2, r1
 800b99c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b99e:	68ba      	ldr	r2, [r7, #8]
 800b9a0:	69fb      	ldr	r3, [r7, #28]
 800b9a2:	4413      	add	r3, r2
 800b9a4:	781b      	ldrb	r3, [r3, #0]
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d006      	beq.n	800b9b8 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b9aa:	69fb      	ldr	r3, [r7, #28]
 800b9ac:	3301      	adds	r3, #1
 800b9ae:	61fb      	str	r3, [r7, #28]
 800b9b0:	69fb      	ldr	r3, [r7, #28]
 800b9b2:	2b0f      	cmp	r3, #15
 800b9b4:	d9e9      	bls.n	800b98a <prvInitialiseNewTask+0x6a>
 800b9b6:	e000      	b.n	800b9ba <prvInitialiseNewTask+0x9a>
			{
				break;
 800b9b8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b9ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9bc:	2200      	movs	r2, #0
 800b9be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b9c2:	e003      	b.n	800b9cc <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b9c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9c6:	2200      	movs	r2, #0
 800b9c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b9cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9ce:	2b37      	cmp	r3, #55	; 0x37
 800b9d0:	d901      	bls.n	800b9d6 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b9d2:	2337      	movs	r3, #55	; 0x37
 800b9d4:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b9d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b9da:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b9dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b9e0:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
 800b9e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9e4:	2200      	movs	r2, #0
 800b9e6:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b9e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9ea:	3304      	adds	r3, #4
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	f7ff f93a 	bl	800ac66 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b9f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9f4:	3318      	adds	r3, #24
 800b9f6:	4618      	mov	r0, r3
 800b9f8:	f7ff f935 	bl	800ac66 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b9fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ba00:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ba02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba04:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ba08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba0a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ba0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ba10:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800ba12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba14:	2200      	movs	r2, #0
 800ba16:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ba18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba1a:	2200      	movs	r2, #0
 800ba1c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ba20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba22:	2200      	movs	r2, #0
 800ba24:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800ba28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba2a:	335c      	adds	r3, #92	; 0x5c
 800ba2c:	224c      	movs	r2, #76	; 0x4c
 800ba2e:	2100      	movs	r1, #0
 800ba30:	4618      	mov	r0, r3
 800ba32:	f002 fcad 	bl	800e390 <memset>
 800ba36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba38:	4a0c      	ldr	r2, [pc, #48]	; (800ba6c <prvInitialiseNewTask+0x14c>)
 800ba3a:	661a      	str	r2, [r3, #96]	; 0x60
 800ba3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba3e:	4a0c      	ldr	r2, [pc, #48]	; (800ba70 <prvInitialiseNewTask+0x150>)
 800ba40:	665a      	str	r2, [r3, #100]	; 0x64
 800ba42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba44:	4a0b      	ldr	r2, [pc, #44]	; (800ba74 <prvInitialiseNewTask+0x154>)
 800ba46:	669a      	str	r2, [r3, #104]	; 0x68
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ba48:	683a      	ldr	r2, [r7, #0]
 800ba4a:	68f9      	ldr	r1, [r7, #12]
 800ba4c:	69b8      	ldr	r0, [r7, #24]
 800ba4e:	f001 faf9 	bl	800d044 <pxPortInitialiseStack>
 800ba52:	4602      	mov	r2, r0
 800ba54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba56:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ba58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d002      	beq.n	800ba64 <prvInitialiseNewTask+0x144>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ba5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ba62:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ba64:	bf00      	nop
 800ba66:	3720      	adds	r7, #32
 800ba68:	46bd      	mov	sp, r7
 800ba6a:	bd80      	pop	{r7, pc}
 800ba6c:	20006d18 	.word	0x20006d18
 800ba70:	20006d80 	.word	0x20006d80
 800ba74:	20006de8 	.word	0x20006de8

0800ba78 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ba78:	b580      	push	{r7, lr}
 800ba7a:	b082      	sub	sp, #8
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ba80:	f001 fc10 	bl	800d2a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ba84:	4b2d      	ldr	r3, [pc, #180]	; (800bb3c <prvAddNewTaskToReadyList+0xc4>)
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	3301      	adds	r3, #1
 800ba8a:	4a2c      	ldr	r2, [pc, #176]	; (800bb3c <prvAddNewTaskToReadyList+0xc4>)
 800ba8c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ba8e:	4b2c      	ldr	r3, [pc, #176]	; (800bb40 <prvAddNewTaskToReadyList+0xc8>)
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d109      	bne.n	800baaa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ba96:	4a2a      	ldr	r2, [pc, #168]	; (800bb40 <prvAddNewTaskToReadyList+0xc8>)
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ba9c:	4b27      	ldr	r3, [pc, #156]	; (800bb3c <prvAddNewTaskToReadyList+0xc4>)
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	2b01      	cmp	r3, #1
 800baa2:	d110      	bne.n	800bac6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800baa4:	f000 fce2 	bl	800c46c <prvInitialiseTaskLists>
 800baa8:	e00d      	b.n	800bac6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800baaa:	4b26      	ldr	r3, [pc, #152]	; (800bb44 <prvAddNewTaskToReadyList+0xcc>)
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d109      	bne.n	800bac6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800bab2:	4b23      	ldr	r3, [pc, #140]	; (800bb40 <prvAddNewTaskToReadyList+0xc8>)
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800babc:	429a      	cmp	r2, r3
 800babe:	d802      	bhi.n	800bac6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800bac0:	4a1f      	ldr	r2, [pc, #124]	; (800bb40 <prvAddNewTaskToReadyList+0xc8>)
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800bac6:	4b20      	ldr	r3, [pc, #128]	; (800bb48 <prvAddNewTaskToReadyList+0xd0>)
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	3301      	adds	r3, #1
 800bacc:	4a1e      	ldr	r2, [pc, #120]	; (800bb48 <prvAddNewTaskToReadyList+0xd0>)
 800bace:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800bad0:	4b1d      	ldr	r3, [pc, #116]	; (800bb48 <prvAddNewTaskToReadyList+0xd0>)
 800bad2:	681a      	ldr	r2, [r3, #0]
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	649a      	str	r2, [r3, #72]	; 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800badc:	4b1b      	ldr	r3, [pc, #108]	; (800bb4c <prvAddNewTaskToReadyList+0xd4>)
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	429a      	cmp	r2, r3
 800bae2:	d903      	bls.n	800baec <prvAddNewTaskToReadyList+0x74>
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bae8:	4a18      	ldr	r2, [pc, #96]	; (800bb4c <prvAddNewTaskToReadyList+0xd4>)
 800baea:	6013      	str	r3, [r2, #0]
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800baf0:	4613      	mov	r3, r2
 800baf2:	009b      	lsls	r3, r3, #2
 800baf4:	4413      	add	r3, r2
 800baf6:	009b      	lsls	r3, r3, #2
 800baf8:	4a15      	ldr	r2, [pc, #84]	; (800bb50 <prvAddNewTaskToReadyList+0xd8>)
 800bafa:	441a      	add	r2, r3
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	3304      	adds	r3, #4
 800bb00:	4619      	mov	r1, r3
 800bb02:	4610      	mov	r0, r2
 800bb04:	f7ff f8bc 	bl	800ac80 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800bb08:	f001 fbfc 	bl	800d304 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800bb0c:	4b0d      	ldr	r3, [pc, #52]	; (800bb44 <prvAddNewTaskToReadyList+0xcc>)
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d00e      	beq.n	800bb32 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800bb14:	4b0a      	ldr	r3, [pc, #40]	; (800bb40 <prvAddNewTaskToReadyList+0xc8>)
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb1e:	429a      	cmp	r2, r3
 800bb20:	d207      	bcs.n	800bb32 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800bb22:	4b0c      	ldr	r3, [pc, #48]	; (800bb54 <prvAddNewTaskToReadyList+0xdc>)
 800bb24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb28:	601a      	str	r2, [r3, #0]
 800bb2a:	f3bf 8f4f 	dsb	sy
 800bb2e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bb32:	bf00      	nop
 800bb34:	3708      	adds	r7, #8
 800bb36:	46bd      	mov	sp, r7
 800bb38:	bd80      	pop	{r7, pc}
 800bb3a:	bf00      	nop
 800bb3c:	20000f80 	.word	0x20000f80
 800bb40:	20000aac 	.word	0x20000aac
 800bb44:	20000f8c 	.word	0x20000f8c
 800bb48:	20000f9c 	.word	0x20000f9c
 800bb4c:	20000f88 	.word	0x20000f88
 800bb50:	20000ab0 	.word	0x20000ab0
 800bb54:	e000ed04 	.word	0xe000ed04

0800bb58 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800bb58:	b580      	push	{r7, lr}
 800bb5a:	b084      	sub	sp, #16
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800bb60:	2300      	movs	r3, #0
 800bb62:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d017      	beq.n	800bb9a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800bb6a:	4b13      	ldr	r3, [pc, #76]	; (800bbb8 <vTaskDelay+0x60>)
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d00a      	beq.n	800bb88 <vTaskDelay+0x30>
	__asm volatile
 800bb72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb76:	f383 8811 	msr	BASEPRI, r3
 800bb7a:	f3bf 8f6f 	isb	sy
 800bb7e:	f3bf 8f4f 	dsb	sy
 800bb82:	60bb      	str	r3, [r7, #8]
}
 800bb84:	bf00      	nop
 800bb86:	e7fe      	b.n	800bb86 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800bb88:	f000 f88c 	bl	800bca4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800bb8c:	2100      	movs	r1, #0
 800bb8e:	6878      	ldr	r0, [r7, #4]
 800bb90:	f000 feb6 	bl	800c900 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800bb94:	f000 f894 	bl	800bcc0 <xTaskResumeAll>
 800bb98:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d107      	bne.n	800bbb0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800bba0:	4b06      	ldr	r3, [pc, #24]	; (800bbbc <vTaskDelay+0x64>)
 800bba2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bba6:	601a      	str	r2, [r3, #0]
 800bba8:	f3bf 8f4f 	dsb	sy
 800bbac:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bbb0:	bf00      	nop
 800bbb2:	3710      	adds	r7, #16
 800bbb4:	46bd      	mov	sp, r7
 800bbb6:	bd80      	pop	{r7, pc}
 800bbb8:	20000fa8 	.word	0x20000fa8
 800bbbc:	e000ed04 	.word	0xe000ed04

0800bbc0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800bbc0:	b580      	push	{r7, lr}
 800bbc2:	b08a      	sub	sp, #40	; 0x28
 800bbc4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800bbc6:	2300      	movs	r3, #0
 800bbc8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800bbca:	2300      	movs	r3, #0
 800bbcc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800bbce:	463a      	mov	r2, r7
 800bbd0:	1d39      	adds	r1, r7, #4
 800bbd2:	f107 0308 	add.w	r3, r7, #8
 800bbd6:	4618      	mov	r0, r3
 800bbd8:	f7fe fe5c 	bl	800a894 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800bbdc:	6839      	ldr	r1, [r7, #0]
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	68ba      	ldr	r2, [r7, #8]
 800bbe2:	9202      	str	r2, [sp, #8]
 800bbe4:	9301      	str	r3, [sp, #4]
 800bbe6:	2300      	movs	r3, #0
 800bbe8:	9300      	str	r3, [sp, #0]
 800bbea:	2300      	movs	r3, #0
 800bbec:	460a      	mov	r2, r1
 800bbee:	4925      	ldr	r1, [pc, #148]	; (800bc84 <vTaskStartScheduler+0xc4>)
 800bbf0:	4825      	ldr	r0, [pc, #148]	; (800bc88 <vTaskStartScheduler+0xc8>)
 800bbf2:	f7ff fdf3 	bl	800b7dc <xTaskCreateStatic>
 800bbf6:	4603      	mov	r3, r0
 800bbf8:	4a24      	ldr	r2, [pc, #144]	; (800bc8c <vTaskStartScheduler+0xcc>)
 800bbfa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800bbfc:	4b23      	ldr	r3, [pc, #140]	; (800bc8c <vTaskStartScheduler+0xcc>)
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d002      	beq.n	800bc0a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800bc04:	2301      	movs	r3, #1
 800bc06:	617b      	str	r3, [r7, #20]
 800bc08:	e001      	b.n	800bc0e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800bc0a:	2300      	movs	r3, #0
 800bc0c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800bc0e:	697b      	ldr	r3, [r7, #20]
 800bc10:	2b01      	cmp	r3, #1
 800bc12:	d102      	bne.n	800bc1a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800bc14:	f000 fec8 	bl	800c9a8 <xTimerCreateTimerTask>
 800bc18:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800bc1a:	697b      	ldr	r3, [r7, #20]
 800bc1c:	2b01      	cmp	r3, #1
 800bc1e:	d11d      	bne.n	800bc5c <vTaskStartScheduler+0x9c>
	__asm volatile
 800bc20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc24:	f383 8811 	msr	BASEPRI, r3
 800bc28:	f3bf 8f6f 	isb	sy
 800bc2c:	f3bf 8f4f 	dsb	sy
 800bc30:	613b      	str	r3, [r7, #16]
}
 800bc32:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800bc34:	4b16      	ldr	r3, [pc, #88]	; (800bc90 <vTaskStartScheduler+0xd0>)
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	335c      	adds	r3, #92	; 0x5c
 800bc3a:	4a16      	ldr	r2, [pc, #88]	; (800bc94 <vTaskStartScheduler+0xd4>)
 800bc3c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800bc3e:	4b16      	ldr	r3, [pc, #88]	; (800bc98 <vTaskStartScheduler+0xd8>)
 800bc40:	f04f 32ff 	mov.w	r2, #4294967295
 800bc44:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800bc46:	4b15      	ldr	r3, [pc, #84]	; (800bc9c <vTaskStartScheduler+0xdc>)
 800bc48:	2201      	movs	r2, #1
 800bc4a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800bc4c:	4b14      	ldr	r3, [pc, #80]	; (800bca0 <vTaskStartScheduler+0xe0>)
 800bc4e:	2200      	movs	r2, #0
 800bc50:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800bc52:	f7f4 ff79 	bl	8000b48 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800bc56:	f001 fa83 	bl	800d160 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800bc5a:	e00e      	b.n	800bc7a <vTaskStartScheduler+0xba>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800bc5c:	697b      	ldr	r3, [r7, #20]
 800bc5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc62:	d10a      	bne.n	800bc7a <vTaskStartScheduler+0xba>
	__asm volatile
 800bc64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc68:	f383 8811 	msr	BASEPRI, r3
 800bc6c:	f3bf 8f6f 	isb	sy
 800bc70:	f3bf 8f4f 	dsb	sy
 800bc74:	60fb      	str	r3, [r7, #12]
}
 800bc76:	bf00      	nop
 800bc78:	e7fe      	b.n	800bc78 <vTaskStartScheduler+0xb8>
}
 800bc7a:	bf00      	nop
 800bc7c:	3718      	adds	r7, #24
 800bc7e:	46bd      	mov	sp, r7
 800bc80:	bd80      	pop	{r7, pc}
 800bc82:	bf00      	nop
 800bc84:	0800e5d0 	.word	0x0800e5d0
 800bc88:	0800c43d 	.word	0x0800c43d
 800bc8c:	20000fa4 	.word	0x20000fa4
 800bc90:	20000aac 	.word	0x20000aac
 800bc94:	2000014c 	.word	0x2000014c
 800bc98:	20000fa0 	.word	0x20000fa0
 800bc9c:	20000f8c 	.word	0x20000f8c
 800bca0:	20000f84 	.word	0x20000f84

0800bca4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800bca4:	b480      	push	{r7}
 800bca6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800bca8:	4b04      	ldr	r3, [pc, #16]	; (800bcbc <vTaskSuspendAll+0x18>)
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	3301      	adds	r3, #1
 800bcae:	4a03      	ldr	r2, [pc, #12]	; (800bcbc <vTaskSuspendAll+0x18>)
 800bcb0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800bcb2:	bf00      	nop
 800bcb4:	46bd      	mov	sp, r7
 800bcb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcba:	4770      	bx	lr
 800bcbc:	20000fa8 	.word	0x20000fa8

0800bcc0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800bcc0:	b580      	push	{r7, lr}
 800bcc2:	b084      	sub	sp, #16
 800bcc4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800bcc6:	2300      	movs	r3, #0
 800bcc8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800bcca:	2300      	movs	r3, #0
 800bccc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800bcce:	4b42      	ldr	r3, [pc, #264]	; (800bdd8 <xTaskResumeAll+0x118>)
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d10a      	bne.n	800bcec <xTaskResumeAll+0x2c>
	__asm volatile
 800bcd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcda:	f383 8811 	msr	BASEPRI, r3
 800bcde:	f3bf 8f6f 	isb	sy
 800bce2:	f3bf 8f4f 	dsb	sy
 800bce6:	603b      	str	r3, [r7, #0]
}
 800bce8:	bf00      	nop
 800bcea:	e7fe      	b.n	800bcea <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800bcec:	f001 fada 	bl	800d2a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800bcf0:	4b39      	ldr	r3, [pc, #228]	; (800bdd8 <xTaskResumeAll+0x118>)
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	3b01      	subs	r3, #1
 800bcf6:	4a38      	ldr	r2, [pc, #224]	; (800bdd8 <xTaskResumeAll+0x118>)
 800bcf8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bcfa:	4b37      	ldr	r3, [pc, #220]	; (800bdd8 <xTaskResumeAll+0x118>)
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d162      	bne.n	800bdc8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800bd02:	4b36      	ldr	r3, [pc, #216]	; (800bddc <xTaskResumeAll+0x11c>)
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d05e      	beq.n	800bdc8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bd0a:	e02f      	b.n	800bd6c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd0c:	4b34      	ldr	r3, [pc, #208]	; (800bde0 <xTaskResumeAll+0x120>)
 800bd0e:	68db      	ldr	r3, [r3, #12]
 800bd10:	68db      	ldr	r3, [r3, #12]
 800bd12:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	3318      	adds	r3, #24
 800bd18:	4618      	mov	r0, r3
 800bd1a:	f7ff f80e 	bl	800ad3a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	3304      	adds	r3, #4
 800bd22:	4618      	mov	r0, r3
 800bd24:	f7ff f809 	bl	800ad3a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd2c:	4b2d      	ldr	r3, [pc, #180]	; (800bde4 <xTaskResumeAll+0x124>)
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	429a      	cmp	r2, r3
 800bd32:	d903      	bls.n	800bd3c <xTaskResumeAll+0x7c>
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd38:	4a2a      	ldr	r2, [pc, #168]	; (800bde4 <xTaskResumeAll+0x124>)
 800bd3a:	6013      	str	r3, [r2, #0]
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd40:	4613      	mov	r3, r2
 800bd42:	009b      	lsls	r3, r3, #2
 800bd44:	4413      	add	r3, r2
 800bd46:	009b      	lsls	r3, r3, #2
 800bd48:	4a27      	ldr	r2, [pc, #156]	; (800bde8 <xTaskResumeAll+0x128>)
 800bd4a:	441a      	add	r2, r3
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	3304      	adds	r3, #4
 800bd50:	4619      	mov	r1, r3
 800bd52:	4610      	mov	r0, r2
 800bd54:	f7fe ff94 	bl	800ac80 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd5c:	4b23      	ldr	r3, [pc, #140]	; (800bdec <xTaskResumeAll+0x12c>)
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd62:	429a      	cmp	r2, r3
 800bd64:	d302      	bcc.n	800bd6c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800bd66:	4b22      	ldr	r3, [pc, #136]	; (800bdf0 <xTaskResumeAll+0x130>)
 800bd68:	2201      	movs	r2, #1
 800bd6a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bd6c:	4b1c      	ldr	r3, [pc, #112]	; (800bde0 <xTaskResumeAll+0x120>)
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d1cb      	bne.n	800bd0c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d001      	beq.n	800bd7e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800bd7a:	f000 fc19 	bl	800c5b0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800bd7e:	4b1d      	ldr	r3, [pc, #116]	; (800bdf4 <xTaskResumeAll+0x134>)
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d010      	beq.n	800bdac <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800bd8a:	f000 f847 	bl	800be1c <xTaskIncrementTick>
 800bd8e:	4603      	mov	r3, r0
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d002      	beq.n	800bd9a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800bd94:	4b16      	ldr	r3, [pc, #88]	; (800bdf0 <xTaskResumeAll+0x130>)
 800bd96:	2201      	movs	r2, #1
 800bd98:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	3b01      	subs	r3, #1
 800bd9e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d1f1      	bne.n	800bd8a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800bda6:	4b13      	ldr	r3, [pc, #76]	; (800bdf4 <xTaskResumeAll+0x134>)
 800bda8:	2200      	movs	r2, #0
 800bdaa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800bdac:	4b10      	ldr	r3, [pc, #64]	; (800bdf0 <xTaskResumeAll+0x130>)
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d009      	beq.n	800bdc8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800bdb4:	2301      	movs	r3, #1
 800bdb6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800bdb8:	4b0f      	ldr	r3, [pc, #60]	; (800bdf8 <xTaskResumeAll+0x138>)
 800bdba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bdbe:	601a      	str	r2, [r3, #0]
 800bdc0:	f3bf 8f4f 	dsb	sy
 800bdc4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bdc8:	f001 fa9c 	bl	800d304 <vPortExitCritical>

	return xAlreadyYielded;
 800bdcc:	68bb      	ldr	r3, [r7, #8]
}
 800bdce:	4618      	mov	r0, r3
 800bdd0:	3710      	adds	r7, #16
 800bdd2:	46bd      	mov	sp, r7
 800bdd4:	bd80      	pop	{r7, pc}
 800bdd6:	bf00      	nop
 800bdd8:	20000fa8 	.word	0x20000fa8
 800bddc:	20000f80 	.word	0x20000f80
 800bde0:	20000f40 	.word	0x20000f40
 800bde4:	20000f88 	.word	0x20000f88
 800bde8:	20000ab0 	.word	0x20000ab0
 800bdec:	20000aac 	.word	0x20000aac
 800bdf0:	20000f94 	.word	0x20000f94
 800bdf4:	20000f90 	.word	0x20000f90
 800bdf8:	e000ed04 	.word	0xe000ed04

0800bdfc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800bdfc:	b480      	push	{r7}
 800bdfe:	b083      	sub	sp, #12
 800be00:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800be02:	4b05      	ldr	r3, [pc, #20]	; (800be18 <xTaskGetTickCount+0x1c>)
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800be08:	687b      	ldr	r3, [r7, #4]
}
 800be0a:	4618      	mov	r0, r3
 800be0c:	370c      	adds	r7, #12
 800be0e:	46bd      	mov	sp, r7
 800be10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be14:	4770      	bx	lr
 800be16:	bf00      	nop
 800be18:	20000f84 	.word	0x20000f84

0800be1c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800be1c:	b580      	push	{r7, lr}
 800be1e:	b086      	sub	sp, #24
 800be20:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800be22:	2300      	movs	r3, #0
 800be24:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800be26:	4b4f      	ldr	r3, [pc, #316]	; (800bf64 <xTaskIncrementTick+0x148>)
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	f040 808f 	bne.w	800bf4e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800be30:	4b4d      	ldr	r3, [pc, #308]	; (800bf68 <xTaskIncrementTick+0x14c>)
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	3301      	adds	r3, #1
 800be36:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800be38:	4a4b      	ldr	r2, [pc, #300]	; (800bf68 <xTaskIncrementTick+0x14c>)
 800be3a:	693b      	ldr	r3, [r7, #16]
 800be3c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800be3e:	693b      	ldr	r3, [r7, #16]
 800be40:	2b00      	cmp	r3, #0
 800be42:	d120      	bne.n	800be86 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800be44:	4b49      	ldr	r3, [pc, #292]	; (800bf6c <xTaskIncrementTick+0x150>)
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d00a      	beq.n	800be64 <xTaskIncrementTick+0x48>
	__asm volatile
 800be4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be52:	f383 8811 	msr	BASEPRI, r3
 800be56:	f3bf 8f6f 	isb	sy
 800be5a:	f3bf 8f4f 	dsb	sy
 800be5e:	603b      	str	r3, [r7, #0]
}
 800be60:	bf00      	nop
 800be62:	e7fe      	b.n	800be62 <xTaskIncrementTick+0x46>
 800be64:	4b41      	ldr	r3, [pc, #260]	; (800bf6c <xTaskIncrementTick+0x150>)
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	60fb      	str	r3, [r7, #12]
 800be6a:	4b41      	ldr	r3, [pc, #260]	; (800bf70 <xTaskIncrementTick+0x154>)
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	4a3f      	ldr	r2, [pc, #252]	; (800bf6c <xTaskIncrementTick+0x150>)
 800be70:	6013      	str	r3, [r2, #0]
 800be72:	4a3f      	ldr	r2, [pc, #252]	; (800bf70 <xTaskIncrementTick+0x154>)
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	6013      	str	r3, [r2, #0]
 800be78:	4b3e      	ldr	r3, [pc, #248]	; (800bf74 <xTaskIncrementTick+0x158>)
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	3301      	adds	r3, #1
 800be7e:	4a3d      	ldr	r2, [pc, #244]	; (800bf74 <xTaskIncrementTick+0x158>)
 800be80:	6013      	str	r3, [r2, #0]
 800be82:	f000 fb95 	bl	800c5b0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800be86:	4b3c      	ldr	r3, [pc, #240]	; (800bf78 <xTaskIncrementTick+0x15c>)
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	693a      	ldr	r2, [r7, #16]
 800be8c:	429a      	cmp	r2, r3
 800be8e:	d349      	bcc.n	800bf24 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800be90:	4b36      	ldr	r3, [pc, #216]	; (800bf6c <xTaskIncrementTick+0x150>)
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	2b00      	cmp	r3, #0
 800be98:	d104      	bne.n	800bea4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800be9a:	4b37      	ldr	r3, [pc, #220]	; (800bf78 <xTaskIncrementTick+0x15c>)
 800be9c:	f04f 32ff 	mov.w	r2, #4294967295
 800bea0:	601a      	str	r2, [r3, #0]
					break;
 800bea2:	e03f      	b.n	800bf24 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bea4:	4b31      	ldr	r3, [pc, #196]	; (800bf6c <xTaskIncrementTick+0x150>)
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	68db      	ldr	r3, [r3, #12]
 800beaa:	68db      	ldr	r3, [r3, #12]
 800beac:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800beae:	68bb      	ldr	r3, [r7, #8]
 800beb0:	685b      	ldr	r3, [r3, #4]
 800beb2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800beb4:	693a      	ldr	r2, [r7, #16]
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	429a      	cmp	r2, r3
 800beba:	d203      	bcs.n	800bec4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800bebc:	4a2e      	ldr	r2, [pc, #184]	; (800bf78 <xTaskIncrementTick+0x15c>)
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800bec2:	e02f      	b.n	800bf24 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bec4:	68bb      	ldr	r3, [r7, #8]
 800bec6:	3304      	adds	r3, #4
 800bec8:	4618      	mov	r0, r3
 800beca:	f7fe ff36 	bl	800ad3a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bece:	68bb      	ldr	r3, [r7, #8]
 800bed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d004      	beq.n	800bee0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bed6:	68bb      	ldr	r3, [r7, #8]
 800bed8:	3318      	adds	r3, #24
 800beda:	4618      	mov	r0, r3
 800bedc:	f7fe ff2d 	bl	800ad3a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800bee0:	68bb      	ldr	r3, [r7, #8]
 800bee2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bee4:	4b25      	ldr	r3, [pc, #148]	; (800bf7c <xTaskIncrementTick+0x160>)
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	429a      	cmp	r2, r3
 800beea:	d903      	bls.n	800bef4 <xTaskIncrementTick+0xd8>
 800beec:	68bb      	ldr	r3, [r7, #8]
 800beee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bef0:	4a22      	ldr	r2, [pc, #136]	; (800bf7c <xTaskIncrementTick+0x160>)
 800bef2:	6013      	str	r3, [r2, #0]
 800bef4:	68bb      	ldr	r3, [r7, #8]
 800bef6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bef8:	4613      	mov	r3, r2
 800befa:	009b      	lsls	r3, r3, #2
 800befc:	4413      	add	r3, r2
 800befe:	009b      	lsls	r3, r3, #2
 800bf00:	4a1f      	ldr	r2, [pc, #124]	; (800bf80 <xTaskIncrementTick+0x164>)
 800bf02:	441a      	add	r2, r3
 800bf04:	68bb      	ldr	r3, [r7, #8]
 800bf06:	3304      	adds	r3, #4
 800bf08:	4619      	mov	r1, r3
 800bf0a:	4610      	mov	r0, r2
 800bf0c:	f7fe feb8 	bl	800ac80 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bf10:	68bb      	ldr	r3, [r7, #8]
 800bf12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf14:	4b1b      	ldr	r3, [pc, #108]	; (800bf84 <xTaskIncrementTick+0x168>)
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf1a:	429a      	cmp	r2, r3
 800bf1c:	d3b8      	bcc.n	800be90 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800bf1e:	2301      	movs	r3, #1
 800bf20:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bf22:	e7b5      	b.n	800be90 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800bf24:	4b17      	ldr	r3, [pc, #92]	; (800bf84 <xTaskIncrementTick+0x168>)
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf2a:	4915      	ldr	r1, [pc, #84]	; (800bf80 <xTaskIncrementTick+0x164>)
 800bf2c:	4613      	mov	r3, r2
 800bf2e:	009b      	lsls	r3, r3, #2
 800bf30:	4413      	add	r3, r2
 800bf32:	009b      	lsls	r3, r3, #2
 800bf34:	440b      	add	r3, r1
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	2b01      	cmp	r3, #1
 800bf3a:	d901      	bls.n	800bf40 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800bf3c:	2301      	movs	r3, #1
 800bf3e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800bf40:	4b11      	ldr	r3, [pc, #68]	; (800bf88 <xTaskIncrementTick+0x16c>)
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d007      	beq.n	800bf58 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800bf48:	2301      	movs	r3, #1
 800bf4a:	617b      	str	r3, [r7, #20]
 800bf4c:	e004      	b.n	800bf58 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800bf4e:	4b0f      	ldr	r3, [pc, #60]	; (800bf8c <xTaskIncrementTick+0x170>)
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	3301      	adds	r3, #1
 800bf54:	4a0d      	ldr	r2, [pc, #52]	; (800bf8c <xTaskIncrementTick+0x170>)
 800bf56:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800bf58:	697b      	ldr	r3, [r7, #20]
}
 800bf5a:	4618      	mov	r0, r3
 800bf5c:	3718      	adds	r7, #24
 800bf5e:	46bd      	mov	sp, r7
 800bf60:	bd80      	pop	{r7, pc}
 800bf62:	bf00      	nop
 800bf64:	20000fa8 	.word	0x20000fa8
 800bf68:	20000f84 	.word	0x20000f84
 800bf6c:	20000f38 	.word	0x20000f38
 800bf70:	20000f3c 	.word	0x20000f3c
 800bf74:	20000f98 	.word	0x20000f98
 800bf78:	20000fa0 	.word	0x20000fa0
 800bf7c:	20000f88 	.word	0x20000f88
 800bf80:	20000ab0 	.word	0x20000ab0
 800bf84:	20000aac 	.word	0x20000aac
 800bf88:	20000f94 	.word	0x20000f94
 800bf8c:	20000f90 	.word	0x20000f90

0800bf90 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800bf90:	b580      	push	{r7, lr}
 800bf92:	b084      	sub	sp, #16
 800bf94:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bf96:	4b36      	ldr	r3, [pc, #216]	; (800c070 <vTaskSwitchContext+0xe0>)
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d003      	beq.n	800bfa6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800bf9e:	4b35      	ldr	r3, [pc, #212]	; (800c074 <vTaskSwitchContext+0xe4>)
 800bfa0:	2201      	movs	r2, #1
 800bfa2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800bfa4:	e05f      	b.n	800c066 <vTaskSwitchContext+0xd6>
		xYieldPending = pdFALSE;
 800bfa6:	4b33      	ldr	r3, [pc, #204]	; (800c074 <vTaskSwitchContext+0xe4>)
 800bfa8:	2200      	movs	r2, #0
 800bfaa:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800bfac:	f7f4 fde6 	bl	8000b7c <getRunTimeCounterValue>
 800bfb0:	4603      	mov	r3, r0
 800bfb2:	4a31      	ldr	r2, [pc, #196]	; (800c078 <vTaskSwitchContext+0xe8>)
 800bfb4:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800bfb6:	4b30      	ldr	r3, [pc, #192]	; (800c078 <vTaskSwitchContext+0xe8>)
 800bfb8:	681a      	ldr	r2, [r3, #0]
 800bfba:	4b30      	ldr	r3, [pc, #192]	; (800c07c <vTaskSwitchContext+0xec>)
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	429a      	cmp	r2, r3
 800bfc0:	d909      	bls.n	800bfd6 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800bfc2:	4b2f      	ldr	r3, [pc, #188]	; (800c080 <vTaskSwitchContext+0xf0>)
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800bfc8:	4a2b      	ldr	r2, [pc, #172]	; (800c078 <vTaskSwitchContext+0xe8>)
 800bfca:	6810      	ldr	r0, [r2, #0]
 800bfcc:	4a2b      	ldr	r2, [pc, #172]	; (800c07c <vTaskSwitchContext+0xec>)
 800bfce:	6812      	ldr	r2, [r2, #0]
 800bfd0:	1a82      	subs	r2, r0, r2
 800bfd2:	440a      	add	r2, r1
 800bfd4:	659a      	str	r2, [r3, #88]	; 0x58
			ulTaskSwitchedInTime = ulTotalRunTime;
 800bfd6:	4b28      	ldr	r3, [pc, #160]	; (800c078 <vTaskSwitchContext+0xe8>)
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	4a28      	ldr	r2, [pc, #160]	; (800c07c <vTaskSwitchContext+0xec>)
 800bfdc:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bfde:	4b29      	ldr	r3, [pc, #164]	; (800c084 <vTaskSwitchContext+0xf4>)
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	60fb      	str	r3, [r7, #12]
 800bfe4:	e010      	b.n	800c008 <vTaskSwitchContext+0x78>
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d10a      	bne.n	800c002 <vTaskSwitchContext+0x72>
	__asm volatile
 800bfec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bff0:	f383 8811 	msr	BASEPRI, r3
 800bff4:	f3bf 8f6f 	isb	sy
 800bff8:	f3bf 8f4f 	dsb	sy
 800bffc:	607b      	str	r3, [r7, #4]
}
 800bffe:	bf00      	nop
 800c000:	e7fe      	b.n	800c000 <vTaskSwitchContext+0x70>
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	3b01      	subs	r3, #1
 800c006:	60fb      	str	r3, [r7, #12]
 800c008:	491f      	ldr	r1, [pc, #124]	; (800c088 <vTaskSwitchContext+0xf8>)
 800c00a:	68fa      	ldr	r2, [r7, #12]
 800c00c:	4613      	mov	r3, r2
 800c00e:	009b      	lsls	r3, r3, #2
 800c010:	4413      	add	r3, r2
 800c012:	009b      	lsls	r3, r3, #2
 800c014:	440b      	add	r3, r1
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d0e4      	beq.n	800bfe6 <vTaskSwitchContext+0x56>
 800c01c:	68fa      	ldr	r2, [r7, #12]
 800c01e:	4613      	mov	r3, r2
 800c020:	009b      	lsls	r3, r3, #2
 800c022:	4413      	add	r3, r2
 800c024:	009b      	lsls	r3, r3, #2
 800c026:	4a18      	ldr	r2, [pc, #96]	; (800c088 <vTaskSwitchContext+0xf8>)
 800c028:	4413      	add	r3, r2
 800c02a:	60bb      	str	r3, [r7, #8]
 800c02c:	68bb      	ldr	r3, [r7, #8]
 800c02e:	685b      	ldr	r3, [r3, #4]
 800c030:	685a      	ldr	r2, [r3, #4]
 800c032:	68bb      	ldr	r3, [r7, #8]
 800c034:	605a      	str	r2, [r3, #4]
 800c036:	68bb      	ldr	r3, [r7, #8]
 800c038:	685a      	ldr	r2, [r3, #4]
 800c03a:	68bb      	ldr	r3, [r7, #8]
 800c03c:	3308      	adds	r3, #8
 800c03e:	429a      	cmp	r2, r3
 800c040:	d104      	bne.n	800c04c <vTaskSwitchContext+0xbc>
 800c042:	68bb      	ldr	r3, [r7, #8]
 800c044:	685b      	ldr	r3, [r3, #4]
 800c046:	685a      	ldr	r2, [r3, #4]
 800c048:	68bb      	ldr	r3, [r7, #8]
 800c04a:	605a      	str	r2, [r3, #4]
 800c04c:	68bb      	ldr	r3, [r7, #8]
 800c04e:	685b      	ldr	r3, [r3, #4]
 800c050:	68db      	ldr	r3, [r3, #12]
 800c052:	4a0b      	ldr	r2, [pc, #44]	; (800c080 <vTaskSwitchContext+0xf0>)
 800c054:	6013      	str	r3, [r2, #0]
 800c056:	4a0b      	ldr	r2, [pc, #44]	; (800c084 <vTaskSwitchContext+0xf4>)
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c05c:	4b08      	ldr	r3, [pc, #32]	; (800c080 <vTaskSwitchContext+0xf0>)
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	335c      	adds	r3, #92	; 0x5c
 800c062:	4a0a      	ldr	r2, [pc, #40]	; (800c08c <vTaskSwitchContext+0xfc>)
 800c064:	6013      	str	r3, [r2, #0]
}
 800c066:	bf00      	nop
 800c068:	3710      	adds	r7, #16
 800c06a:	46bd      	mov	sp, r7
 800c06c:	bd80      	pop	{r7, pc}
 800c06e:	bf00      	nop
 800c070:	20000fa8 	.word	0x20000fa8
 800c074:	20000f94 	.word	0x20000f94
 800c078:	20000fb0 	.word	0x20000fb0
 800c07c:	20000fac 	.word	0x20000fac
 800c080:	20000aac 	.word	0x20000aac
 800c084:	20000f88 	.word	0x20000f88
 800c088:	20000ab0 	.word	0x20000ab0
 800c08c:	2000014c 	.word	0x2000014c

0800c090 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c090:	b580      	push	{r7, lr}
 800c092:	b084      	sub	sp, #16
 800c094:	af00      	add	r7, sp, #0
 800c096:	6078      	str	r0, [r7, #4]
 800c098:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d10a      	bne.n	800c0b6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800c0a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0a4:	f383 8811 	msr	BASEPRI, r3
 800c0a8:	f3bf 8f6f 	isb	sy
 800c0ac:	f3bf 8f4f 	dsb	sy
 800c0b0:	60fb      	str	r3, [r7, #12]
}
 800c0b2:	bf00      	nop
 800c0b4:	e7fe      	b.n	800c0b4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c0b6:	4b07      	ldr	r3, [pc, #28]	; (800c0d4 <vTaskPlaceOnEventList+0x44>)
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	3318      	adds	r3, #24
 800c0bc:	4619      	mov	r1, r3
 800c0be:	6878      	ldr	r0, [r7, #4]
 800c0c0:	f7fe fe02 	bl	800acc8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c0c4:	2101      	movs	r1, #1
 800c0c6:	6838      	ldr	r0, [r7, #0]
 800c0c8:	f000 fc1a 	bl	800c900 <prvAddCurrentTaskToDelayedList>
}
 800c0cc:	bf00      	nop
 800c0ce:	3710      	adds	r7, #16
 800c0d0:	46bd      	mov	sp, r7
 800c0d2:	bd80      	pop	{r7, pc}
 800c0d4:	20000aac 	.word	0x20000aac

0800c0d8 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 800c0d8:	b580      	push	{r7, lr}
 800c0da:	b086      	sub	sp, #24
 800c0dc:	af00      	add	r7, sp, #0
 800c0de:	60f8      	str	r0, [r7, #12]
 800c0e0:	60b9      	str	r1, [r7, #8]
 800c0e2:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d10a      	bne.n	800c100 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 800c0ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0ee:	f383 8811 	msr	BASEPRI, r3
 800c0f2:	f3bf 8f6f 	isb	sy
 800c0f6:	f3bf 8f4f 	dsb	sy
 800c0fa:	617b      	str	r3, [r7, #20]
}
 800c0fc:	bf00      	nop
 800c0fe:	e7fe      	b.n	800c0fe <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 800c100:	4b11      	ldr	r3, [pc, #68]	; (800c148 <vTaskPlaceOnUnorderedEventList+0x70>)
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	2b00      	cmp	r3, #0
 800c106:	d10a      	bne.n	800c11e <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 800c108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c10c:	f383 8811 	msr	BASEPRI, r3
 800c110:	f3bf 8f6f 	isb	sy
 800c114:	f3bf 8f4f 	dsb	sy
 800c118:	613b      	str	r3, [r7, #16]
}
 800c11a:	bf00      	nop
 800c11c:	e7fe      	b.n	800c11c <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800c11e:	4b0b      	ldr	r3, [pc, #44]	; (800c14c <vTaskPlaceOnUnorderedEventList+0x74>)
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	68ba      	ldr	r2, [r7, #8]
 800c124:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800c128:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c12a:	4b08      	ldr	r3, [pc, #32]	; (800c14c <vTaskPlaceOnUnorderedEventList+0x74>)
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	3318      	adds	r3, #24
 800c130:	4619      	mov	r1, r3
 800c132:	68f8      	ldr	r0, [r7, #12]
 800c134:	f7fe fda4 	bl	800ac80 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c138:	2101      	movs	r1, #1
 800c13a:	6878      	ldr	r0, [r7, #4]
 800c13c:	f000 fbe0 	bl	800c900 <prvAddCurrentTaskToDelayedList>
}
 800c140:	bf00      	nop
 800c142:	3718      	adds	r7, #24
 800c144:	46bd      	mov	sp, r7
 800c146:	bd80      	pop	{r7, pc}
 800c148:	20000fa8 	.word	0x20000fa8
 800c14c:	20000aac 	.word	0x20000aac

0800c150 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c150:	b580      	push	{r7, lr}
 800c152:	b086      	sub	sp, #24
 800c154:	af00      	add	r7, sp, #0
 800c156:	60f8      	str	r0, [r7, #12]
 800c158:	60b9      	str	r1, [r7, #8]
 800c15a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d10a      	bne.n	800c178 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800c162:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c166:	f383 8811 	msr	BASEPRI, r3
 800c16a:	f3bf 8f6f 	isb	sy
 800c16e:	f3bf 8f4f 	dsb	sy
 800c172:	617b      	str	r3, [r7, #20]
}
 800c174:	bf00      	nop
 800c176:	e7fe      	b.n	800c176 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c178:	4b0a      	ldr	r3, [pc, #40]	; (800c1a4 <vTaskPlaceOnEventListRestricted+0x54>)
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	3318      	adds	r3, #24
 800c17e:	4619      	mov	r1, r3
 800c180:	68f8      	ldr	r0, [r7, #12]
 800c182:	f7fe fd7d 	bl	800ac80 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d002      	beq.n	800c192 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800c18c:	f04f 33ff 	mov.w	r3, #4294967295
 800c190:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c192:	6879      	ldr	r1, [r7, #4]
 800c194:	68b8      	ldr	r0, [r7, #8]
 800c196:	f000 fbb3 	bl	800c900 <prvAddCurrentTaskToDelayedList>
	}
 800c19a:	bf00      	nop
 800c19c:	3718      	adds	r7, #24
 800c19e:	46bd      	mov	sp, r7
 800c1a0:	bd80      	pop	{r7, pc}
 800c1a2:	bf00      	nop
 800c1a4:	20000aac 	.word	0x20000aac

0800c1a8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c1a8:	b580      	push	{r7, lr}
 800c1aa:	b086      	sub	sp, #24
 800c1ac:	af00      	add	r7, sp, #0
 800c1ae:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	68db      	ldr	r3, [r3, #12]
 800c1b4:	68db      	ldr	r3, [r3, #12]
 800c1b6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c1b8:	693b      	ldr	r3, [r7, #16]
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d10a      	bne.n	800c1d4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800c1be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1c2:	f383 8811 	msr	BASEPRI, r3
 800c1c6:	f3bf 8f6f 	isb	sy
 800c1ca:	f3bf 8f4f 	dsb	sy
 800c1ce:	60fb      	str	r3, [r7, #12]
}
 800c1d0:	bf00      	nop
 800c1d2:	e7fe      	b.n	800c1d2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c1d4:	693b      	ldr	r3, [r7, #16]
 800c1d6:	3318      	adds	r3, #24
 800c1d8:	4618      	mov	r0, r3
 800c1da:	f7fe fdae 	bl	800ad3a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c1de:	4b1e      	ldr	r3, [pc, #120]	; (800c258 <xTaskRemoveFromEventList+0xb0>)
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d11d      	bne.n	800c222 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c1e6:	693b      	ldr	r3, [r7, #16]
 800c1e8:	3304      	adds	r3, #4
 800c1ea:	4618      	mov	r0, r3
 800c1ec:	f7fe fda5 	bl	800ad3a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c1f0:	693b      	ldr	r3, [r7, #16]
 800c1f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1f4:	4b19      	ldr	r3, [pc, #100]	; (800c25c <xTaskRemoveFromEventList+0xb4>)
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	429a      	cmp	r2, r3
 800c1fa:	d903      	bls.n	800c204 <xTaskRemoveFromEventList+0x5c>
 800c1fc:	693b      	ldr	r3, [r7, #16]
 800c1fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c200:	4a16      	ldr	r2, [pc, #88]	; (800c25c <xTaskRemoveFromEventList+0xb4>)
 800c202:	6013      	str	r3, [r2, #0]
 800c204:	693b      	ldr	r3, [r7, #16]
 800c206:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c208:	4613      	mov	r3, r2
 800c20a:	009b      	lsls	r3, r3, #2
 800c20c:	4413      	add	r3, r2
 800c20e:	009b      	lsls	r3, r3, #2
 800c210:	4a13      	ldr	r2, [pc, #76]	; (800c260 <xTaskRemoveFromEventList+0xb8>)
 800c212:	441a      	add	r2, r3
 800c214:	693b      	ldr	r3, [r7, #16]
 800c216:	3304      	adds	r3, #4
 800c218:	4619      	mov	r1, r3
 800c21a:	4610      	mov	r0, r2
 800c21c:	f7fe fd30 	bl	800ac80 <vListInsertEnd>
 800c220:	e005      	b.n	800c22e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c222:	693b      	ldr	r3, [r7, #16]
 800c224:	3318      	adds	r3, #24
 800c226:	4619      	mov	r1, r3
 800c228:	480e      	ldr	r0, [pc, #56]	; (800c264 <xTaskRemoveFromEventList+0xbc>)
 800c22a:	f7fe fd29 	bl	800ac80 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c22e:	693b      	ldr	r3, [r7, #16]
 800c230:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c232:	4b0d      	ldr	r3, [pc, #52]	; (800c268 <xTaskRemoveFromEventList+0xc0>)
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c238:	429a      	cmp	r2, r3
 800c23a:	d905      	bls.n	800c248 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c23c:	2301      	movs	r3, #1
 800c23e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c240:	4b0a      	ldr	r3, [pc, #40]	; (800c26c <xTaskRemoveFromEventList+0xc4>)
 800c242:	2201      	movs	r2, #1
 800c244:	601a      	str	r2, [r3, #0]
 800c246:	e001      	b.n	800c24c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800c248:	2300      	movs	r3, #0
 800c24a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c24c:	697b      	ldr	r3, [r7, #20]
}
 800c24e:	4618      	mov	r0, r3
 800c250:	3718      	adds	r7, #24
 800c252:	46bd      	mov	sp, r7
 800c254:	bd80      	pop	{r7, pc}
 800c256:	bf00      	nop
 800c258:	20000fa8 	.word	0x20000fa8
 800c25c:	20000f88 	.word	0x20000f88
 800c260:	20000ab0 	.word	0x20000ab0
 800c264:	20000f40 	.word	0x20000f40
 800c268:	20000aac 	.word	0x20000aac
 800c26c:	20000f94 	.word	0x20000f94

0800c270 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 800c270:	b580      	push	{r7, lr}
 800c272:	b086      	sub	sp, #24
 800c274:	af00      	add	r7, sp, #0
 800c276:	6078      	str	r0, [r7, #4]
 800c278:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800c27a:	4b29      	ldr	r3, [pc, #164]	; (800c320 <vTaskRemoveFromUnorderedEventList+0xb0>)
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d10a      	bne.n	800c298 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 800c282:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c286:	f383 8811 	msr	BASEPRI, r3
 800c28a:	f3bf 8f6f 	isb	sy
 800c28e:	f3bf 8f4f 	dsb	sy
 800c292:	613b      	str	r3, [r7, #16]
}
 800c294:	bf00      	nop
 800c296:	e7fe      	b.n	800c296 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800c298:	683b      	ldr	r3, [r7, #0]
 800c29a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	68db      	ldr	r3, [r3, #12]
 800c2a6:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800c2a8:	697b      	ldr	r3, [r7, #20]
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d10a      	bne.n	800c2c4 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 800c2ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2b2:	f383 8811 	msr	BASEPRI, r3
 800c2b6:	f3bf 8f6f 	isb	sy
 800c2ba:	f3bf 8f4f 	dsb	sy
 800c2be:	60fb      	str	r3, [r7, #12]
}
 800c2c0:	bf00      	nop
 800c2c2:	e7fe      	b.n	800c2c2 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 800c2c4:	6878      	ldr	r0, [r7, #4]
 800c2c6:	f7fe fd38 	bl	800ad3a <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c2ca:	697b      	ldr	r3, [r7, #20]
 800c2cc:	3304      	adds	r3, #4
 800c2ce:	4618      	mov	r0, r3
 800c2d0:	f7fe fd33 	bl	800ad3a <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800c2d4:	697b      	ldr	r3, [r7, #20]
 800c2d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2d8:	4b12      	ldr	r3, [pc, #72]	; (800c324 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	429a      	cmp	r2, r3
 800c2de:	d903      	bls.n	800c2e8 <vTaskRemoveFromUnorderedEventList+0x78>
 800c2e0:	697b      	ldr	r3, [r7, #20]
 800c2e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2e4:	4a0f      	ldr	r2, [pc, #60]	; (800c324 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800c2e6:	6013      	str	r3, [r2, #0]
 800c2e8:	697b      	ldr	r3, [r7, #20]
 800c2ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2ec:	4613      	mov	r3, r2
 800c2ee:	009b      	lsls	r3, r3, #2
 800c2f0:	4413      	add	r3, r2
 800c2f2:	009b      	lsls	r3, r3, #2
 800c2f4:	4a0c      	ldr	r2, [pc, #48]	; (800c328 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800c2f6:	441a      	add	r2, r3
 800c2f8:	697b      	ldr	r3, [r7, #20]
 800c2fa:	3304      	adds	r3, #4
 800c2fc:	4619      	mov	r1, r3
 800c2fe:	4610      	mov	r0, r2
 800c300:	f7fe fcbe 	bl	800ac80 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c304:	697b      	ldr	r3, [r7, #20]
 800c306:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c308:	4b08      	ldr	r3, [pc, #32]	; (800c32c <vTaskRemoveFromUnorderedEventList+0xbc>)
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c30e:	429a      	cmp	r2, r3
 800c310:	d902      	bls.n	800c318 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800c312:	4b07      	ldr	r3, [pc, #28]	; (800c330 <vTaskRemoveFromUnorderedEventList+0xc0>)
 800c314:	2201      	movs	r2, #1
 800c316:	601a      	str	r2, [r3, #0]
	}
}
 800c318:	bf00      	nop
 800c31a:	3718      	adds	r7, #24
 800c31c:	46bd      	mov	sp, r7
 800c31e:	bd80      	pop	{r7, pc}
 800c320:	20000fa8 	.word	0x20000fa8
 800c324:	20000f88 	.word	0x20000f88
 800c328:	20000ab0 	.word	0x20000ab0
 800c32c:	20000aac 	.word	0x20000aac
 800c330:	20000f94 	.word	0x20000f94

0800c334 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c334:	b480      	push	{r7}
 800c336:	b083      	sub	sp, #12
 800c338:	af00      	add	r7, sp, #0
 800c33a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c33c:	4b06      	ldr	r3, [pc, #24]	; (800c358 <vTaskInternalSetTimeOutState+0x24>)
 800c33e:	681a      	ldr	r2, [r3, #0]
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c344:	4b05      	ldr	r3, [pc, #20]	; (800c35c <vTaskInternalSetTimeOutState+0x28>)
 800c346:	681a      	ldr	r2, [r3, #0]
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	605a      	str	r2, [r3, #4]
}
 800c34c:	bf00      	nop
 800c34e:	370c      	adds	r7, #12
 800c350:	46bd      	mov	sp, r7
 800c352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c356:	4770      	bx	lr
 800c358:	20000f98 	.word	0x20000f98
 800c35c:	20000f84 	.word	0x20000f84

0800c360 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c360:	b580      	push	{r7, lr}
 800c362:	b088      	sub	sp, #32
 800c364:	af00      	add	r7, sp, #0
 800c366:	6078      	str	r0, [r7, #4]
 800c368:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d10a      	bne.n	800c386 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800c370:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c374:	f383 8811 	msr	BASEPRI, r3
 800c378:	f3bf 8f6f 	isb	sy
 800c37c:	f3bf 8f4f 	dsb	sy
 800c380:	613b      	str	r3, [r7, #16]
}
 800c382:	bf00      	nop
 800c384:	e7fe      	b.n	800c384 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c386:	683b      	ldr	r3, [r7, #0]
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d10a      	bne.n	800c3a2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800c38c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c390:	f383 8811 	msr	BASEPRI, r3
 800c394:	f3bf 8f6f 	isb	sy
 800c398:	f3bf 8f4f 	dsb	sy
 800c39c:	60fb      	str	r3, [r7, #12]
}
 800c39e:	bf00      	nop
 800c3a0:	e7fe      	b.n	800c3a0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800c3a2:	f000 ff7f 	bl	800d2a4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c3a6:	4b1d      	ldr	r3, [pc, #116]	; (800c41c <xTaskCheckForTimeOut+0xbc>)
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	685b      	ldr	r3, [r3, #4]
 800c3b0:	69ba      	ldr	r2, [r7, #24]
 800c3b2:	1ad3      	subs	r3, r2, r3
 800c3b4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c3b6:	683b      	ldr	r3, [r7, #0]
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3be:	d102      	bne.n	800c3c6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c3c0:	2300      	movs	r3, #0
 800c3c2:	61fb      	str	r3, [r7, #28]
 800c3c4:	e023      	b.n	800c40e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	681a      	ldr	r2, [r3, #0]
 800c3ca:	4b15      	ldr	r3, [pc, #84]	; (800c420 <xTaskCheckForTimeOut+0xc0>)
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	429a      	cmp	r2, r3
 800c3d0:	d007      	beq.n	800c3e2 <xTaskCheckForTimeOut+0x82>
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	685b      	ldr	r3, [r3, #4]
 800c3d6:	69ba      	ldr	r2, [r7, #24]
 800c3d8:	429a      	cmp	r2, r3
 800c3da:	d302      	bcc.n	800c3e2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c3dc:	2301      	movs	r3, #1
 800c3de:	61fb      	str	r3, [r7, #28]
 800c3e0:	e015      	b.n	800c40e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c3e2:	683b      	ldr	r3, [r7, #0]
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	697a      	ldr	r2, [r7, #20]
 800c3e8:	429a      	cmp	r2, r3
 800c3ea:	d20b      	bcs.n	800c404 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c3ec:	683b      	ldr	r3, [r7, #0]
 800c3ee:	681a      	ldr	r2, [r3, #0]
 800c3f0:	697b      	ldr	r3, [r7, #20]
 800c3f2:	1ad2      	subs	r2, r2, r3
 800c3f4:	683b      	ldr	r3, [r7, #0]
 800c3f6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c3f8:	6878      	ldr	r0, [r7, #4]
 800c3fa:	f7ff ff9b 	bl	800c334 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c3fe:	2300      	movs	r3, #0
 800c400:	61fb      	str	r3, [r7, #28]
 800c402:	e004      	b.n	800c40e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800c404:	683b      	ldr	r3, [r7, #0]
 800c406:	2200      	movs	r2, #0
 800c408:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c40a:	2301      	movs	r3, #1
 800c40c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c40e:	f000 ff79 	bl	800d304 <vPortExitCritical>

	return xReturn;
 800c412:	69fb      	ldr	r3, [r7, #28]
}
 800c414:	4618      	mov	r0, r3
 800c416:	3720      	adds	r7, #32
 800c418:	46bd      	mov	sp, r7
 800c41a:	bd80      	pop	{r7, pc}
 800c41c:	20000f84 	.word	0x20000f84
 800c420:	20000f98 	.word	0x20000f98

0800c424 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c424:	b480      	push	{r7}
 800c426:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c428:	4b03      	ldr	r3, [pc, #12]	; (800c438 <vTaskMissedYield+0x14>)
 800c42a:	2201      	movs	r2, #1
 800c42c:	601a      	str	r2, [r3, #0]
}
 800c42e:	bf00      	nop
 800c430:	46bd      	mov	sp, r7
 800c432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c436:	4770      	bx	lr
 800c438:	20000f94 	.word	0x20000f94

0800c43c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c43c:	b580      	push	{r7, lr}
 800c43e:	b082      	sub	sp, #8
 800c440:	af00      	add	r7, sp, #0
 800c442:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c444:	f000 f852 	bl	800c4ec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c448:	4b06      	ldr	r3, [pc, #24]	; (800c464 <prvIdleTask+0x28>)
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	2b01      	cmp	r3, #1
 800c44e:	d9f9      	bls.n	800c444 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c450:	4b05      	ldr	r3, [pc, #20]	; (800c468 <prvIdleTask+0x2c>)
 800c452:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c456:	601a      	str	r2, [r3, #0]
 800c458:	f3bf 8f4f 	dsb	sy
 800c45c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c460:	e7f0      	b.n	800c444 <prvIdleTask+0x8>
 800c462:	bf00      	nop
 800c464:	20000ab0 	.word	0x20000ab0
 800c468:	e000ed04 	.word	0xe000ed04

0800c46c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c46c:	b580      	push	{r7, lr}
 800c46e:	b082      	sub	sp, #8
 800c470:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c472:	2300      	movs	r3, #0
 800c474:	607b      	str	r3, [r7, #4]
 800c476:	e00c      	b.n	800c492 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c478:	687a      	ldr	r2, [r7, #4]
 800c47a:	4613      	mov	r3, r2
 800c47c:	009b      	lsls	r3, r3, #2
 800c47e:	4413      	add	r3, r2
 800c480:	009b      	lsls	r3, r3, #2
 800c482:	4a12      	ldr	r2, [pc, #72]	; (800c4cc <prvInitialiseTaskLists+0x60>)
 800c484:	4413      	add	r3, r2
 800c486:	4618      	mov	r0, r3
 800c488:	f7fe fbcd 	bl	800ac26 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	3301      	adds	r3, #1
 800c490:	607b      	str	r3, [r7, #4]
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	2b37      	cmp	r3, #55	; 0x37
 800c496:	d9ef      	bls.n	800c478 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c498:	480d      	ldr	r0, [pc, #52]	; (800c4d0 <prvInitialiseTaskLists+0x64>)
 800c49a:	f7fe fbc4 	bl	800ac26 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c49e:	480d      	ldr	r0, [pc, #52]	; (800c4d4 <prvInitialiseTaskLists+0x68>)
 800c4a0:	f7fe fbc1 	bl	800ac26 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c4a4:	480c      	ldr	r0, [pc, #48]	; (800c4d8 <prvInitialiseTaskLists+0x6c>)
 800c4a6:	f7fe fbbe 	bl	800ac26 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c4aa:	480c      	ldr	r0, [pc, #48]	; (800c4dc <prvInitialiseTaskLists+0x70>)
 800c4ac:	f7fe fbbb 	bl	800ac26 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c4b0:	480b      	ldr	r0, [pc, #44]	; (800c4e0 <prvInitialiseTaskLists+0x74>)
 800c4b2:	f7fe fbb8 	bl	800ac26 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c4b6:	4b0b      	ldr	r3, [pc, #44]	; (800c4e4 <prvInitialiseTaskLists+0x78>)
 800c4b8:	4a05      	ldr	r2, [pc, #20]	; (800c4d0 <prvInitialiseTaskLists+0x64>)
 800c4ba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c4bc:	4b0a      	ldr	r3, [pc, #40]	; (800c4e8 <prvInitialiseTaskLists+0x7c>)
 800c4be:	4a05      	ldr	r2, [pc, #20]	; (800c4d4 <prvInitialiseTaskLists+0x68>)
 800c4c0:	601a      	str	r2, [r3, #0]
}
 800c4c2:	bf00      	nop
 800c4c4:	3708      	adds	r7, #8
 800c4c6:	46bd      	mov	sp, r7
 800c4c8:	bd80      	pop	{r7, pc}
 800c4ca:	bf00      	nop
 800c4cc:	20000ab0 	.word	0x20000ab0
 800c4d0:	20000f10 	.word	0x20000f10
 800c4d4:	20000f24 	.word	0x20000f24
 800c4d8:	20000f40 	.word	0x20000f40
 800c4dc:	20000f54 	.word	0x20000f54
 800c4e0:	20000f6c 	.word	0x20000f6c
 800c4e4:	20000f38 	.word	0x20000f38
 800c4e8:	20000f3c 	.word	0x20000f3c

0800c4ec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c4ec:	b580      	push	{r7, lr}
 800c4ee:	b082      	sub	sp, #8
 800c4f0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c4f2:	e019      	b.n	800c528 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c4f4:	f000 fed6 	bl	800d2a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c4f8:	4b10      	ldr	r3, [pc, #64]	; (800c53c <prvCheckTasksWaitingTermination+0x50>)
 800c4fa:	68db      	ldr	r3, [r3, #12]
 800c4fc:	68db      	ldr	r3, [r3, #12]
 800c4fe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	3304      	adds	r3, #4
 800c504:	4618      	mov	r0, r3
 800c506:	f7fe fc18 	bl	800ad3a <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c50a:	4b0d      	ldr	r3, [pc, #52]	; (800c540 <prvCheckTasksWaitingTermination+0x54>)
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	3b01      	subs	r3, #1
 800c510:	4a0b      	ldr	r2, [pc, #44]	; (800c540 <prvCheckTasksWaitingTermination+0x54>)
 800c512:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c514:	4b0b      	ldr	r3, [pc, #44]	; (800c544 <prvCheckTasksWaitingTermination+0x58>)
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	3b01      	subs	r3, #1
 800c51a:	4a0a      	ldr	r2, [pc, #40]	; (800c544 <prvCheckTasksWaitingTermination+0x58>)
 800c51c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c51e:	f000 fef1 	bl	800d304 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c522:	6878      	ldr	r0, [r7, #4]
 800c524:	f000 f810 	bl	800c548 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c528:	4b06      	ldr	r3, [pc, #24]	; (800c544 <prvCheckTasksWaitingTermination+0x58>)
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d1e1      	bne.n	800c4f4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c530:	bf00      	nop
 800c532:	bf00      	nop
 800c534:	3708      	adds	r7, #8
 800c536:	46bd      	mov	sp, r7
 800c538:	bd80      	pop	{r7, pc}
 800c53a:	bf00      	nop
 800c53c:	20000f54 	.word	0x20000f54
 800c540:	20000f80 	.word	0x20000f80
 800c544:	20000f68 	.word	0x20000f68

0800c548 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c548:	b580      	push	{r7, lr}
 800c54a:	b084      	sub	sp, #16
 800c54c:	af00      	add	r7, sp, #0
 800c54e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	335c      	adds	r3, #92	; 0x5c
 800c554:	4618      	mov	r0, r3
 800c556:	f001 ff23 	bl	800e3a0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 800c560:	2b00      	cmp	r3, #0
 800c562:	d108      	bne.n	800c576 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c568:	4618      	mov	r0, r3
 800c56a:	f001 f889 	bl	800d680 <vPortFree>
				vPortFree( pxTCB );
 800c56e:	6878      	ldr	r0, [r7, #4]
 800c570:	f001 f886 	bl	800d680 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c574:	e018      	b.n	800c5a8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 800c57c:	2b01      	cmp	r3, #1
 800c57e:	d103      	bne.n	800c588 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800c580:	6878      	ldr	r0, [r7, #4]
 800c582:	f001 f87d 	bl	800d680 <vPortFree>
	}
 800c586:	e00f      	b.n	800c5a8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 800c58e:	2b02      	cmp	r3, #2
 800c590:	d00a      	beq.n	800c5a8 <prvDeleteTCB+0x60>
	__asm volatile
 800c592:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c596:	f383 8811 	msr	BASEPRI, r3
 800c59a:	f3bf 8f6f 	isb	sy
 800c59e:	f3bf 8f4f 	dsb	sy
 800c5a2:	60fb      	str	r3, [r7, #12]
}
 800c5a4:	bf00      	nop
 800c5a6:	e7fe      	b.n	800c5a6 <prvDeleteTCB+0x5e>
	}
 800c5a8:	bf00      	nop
 800c5aa:	3710      	adds	r7, #16
 800c5ac:	46bd      	mov	sp, r7
 800c5ae:	bd80      	pop	{r7, pc}

0800c5b0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c5b0:	b480      	push	{r7}
 800c5b2:	b083      	sub	sp, #12
 800c5b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c5b6:	4b0c      	ldr	r3, [pc, #48]	; (800c5e8 <prvResetNextTaskUnblockTime+0x38>)
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d104      	bne.n	800c5ca <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c5c0:	4b0a      	ldr	r3, [pc, #40]	; (800c5ec <prvResetNextTaskUnblockTime+0x3c>)
 800c5c2:	f04f 32ff 	mov.w	r2, #4294967295
 800c5c6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c5c8:	e008      	b.n	800c5dc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c5ca:	4b07      	ldr	r3, [pc, #28]	; (800c5e8 <prvResetNextTaskUnblockTime+0x38>)
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	68db      	ldr	r3, [r3, #12]
 800c5d0:	68db      	ldr	r3, [r3, #12]
 800c5d2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	685b      	ldr	r3, [r3, #4]
 800c5d8:	4a04      	ldr	r2, [pc, #16]	; (800c5ec <prvResetNextTaskUnblockTime+0x3c>)
 800c5da:	6013      	str	r3, [r2, #0]
}
 800c5dc:	bf00      	nop
 800c5de:	370c      	adds	r7, #12
 800c5e0:	46bd      	mov	sp, r7
 800c5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e6:	4770      	bx	lr
 800c5e8:	20000f38 	.word	0x20000f38
 800c5ec:	20000fa0 	.word	0x20000fa0

0800c5f0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c5f0:	b480      	push	{r7}
 800c5f2:	b083      	sub	sp, #12
 800c5f4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c5f6:	4b0b      	ldr	r3, [pc, #44]	; (800c624 <xTaskGetSchedulerState+0x34>)
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d102      	bne.n	800c604 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c5fe:	2301      	movs	r3, #1
 800c600:	607b      	str	r3, [r7, #4]
 800c602:	e008      	b.n	800c616 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c604:	4b08      	ldr	r3, [pc, #32]	; (800c628 <xTaskGetSchedulerState+0x38>)
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d102      	bne.n	800c612 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c60c:	2302      	movs	r3, #2
 800c60e:	607b      	str	r3, [r7, #4]
 800c610:	e001      	b.n	800c616 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c612:	2300      	movs	r3, #0
 800c614:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c616:	687b      	ldr	r3, [r7, #4]
	}
 800c618:	4618      	mov	r0, r3
 800c61a:	370c      	adds	r7, #12
 800c61c:	46bd      	mov	sp, r7
 800c61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c622:	4770      	bx	lr
 800c624:	20000f8c 	.word	0x20000f8c
 800c628:	20000fa8 	.word	0x20000fa8

0800c62c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c62c:	b580      	push	{r7, lr}
 800c62e:	b086      	sub	sp, #24
 800c630:	af00      	add	r7, sp, #0
 800c632:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c638:	2300      	movs	r3, #0
 800c63a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d056      	beq.n	800c6f0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c642:	4b2e      	ldr	r3, [pc, #184]	; (800c6fc <xTaskPriorityDisinherit+0xd0>)
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	693a      	ldr	r2, [r7, #16]
 800c648:	429a      	cmp	r2, r3
 800c64a:	d00a      	beq.n	800c662 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800c64c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c650:	f383 8811 	msr	BASEPRI, r3
 800c654:	f3bf 8f6f 	isb	sy
 800c658:	f3bf 8f4f 	dsb	sy
 800c65c:	60fb      	str	r3, [r7, #12]
}
 800c65e:	bf00      	nop
 800c660:	e7fe      	b.n	800c660 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c662:	693b      	ldr	r3, [r7, #16]
 800c664:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c666:	2b00      	cmp	r3, #0
 800c668:	d10a      	bne.n	800c680 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800c66a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c66e:	f383 8811 	msr	BASEPRI, r3
 800c672:	f3bf 8f6f 	isb	sy
 800c676:	f3bf 8f4f 	dsb	sy
 800c67a:	60bb      	str	r3, [r7, #8]
}
 800c67c:	bf00      	nop
 800c67e:	e7fe      	b.n	800c67e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800c680:	693b      	ldr	r3, [r7, #16]
 800c682:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c684:	1e5a      	subs	r2, r3, #1
 800c686:	693b      	ldr	r3, [r7, #16]
 800c688:	655a      	str	r2, [r3, #84]	; 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c68a:	693b      	ldr	r3, [r7, #16]
 800c68c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c68e:	693b      	ldr	r3, [r7, #16]
 800c690:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c692:	429a      	cmp	r2, r3
 800c694:	d02c      	beq.n	800c6f0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c696:	693b      	ldr	r3, [r7, #16]
 800c698:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d128      	bne.n	800c6f0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c69e:	693b      	ldr	r3, [r7, #16]
 800c6a0:	3304      	adds	r3, #4
 800c6a2:	4618      	mov	r0, r3
 800c6a4:	f7fe fb49 	bl	800ad3a <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c6a8:	693b      	ldr	r3, [r7, #16]
 800c6aa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c6ac:	693b      	ldr	r3, [r7, #16]
 800c6ae:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c6b0:	693b      	ldr	r3, [r7, #16]
 800c6b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6b4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c6b8:	693b      	ldr	r3, [r7, #16]
 800c6ba:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c6bc:	693b      	ldr	r3, [r7, #16]
 800c6be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6c0:	4b0f      	ldr	r3, [pc, #60]	; (800c700 <xTaskPriorityDisinherit+0xd4>)
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	429a      	cmp	r2, r3
 800c6c6:	d903      	bls.n	800c6d0 <xTaskPriorityDisinherit+0xa4>
 800c6c8:	693b      	ldr	r3, [r7, #16]
 800c6ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6cc:	4a0c      	ldr	r2, [pc, #48]	; (800c700 <xTaskPriorityDisinherit+0xd4>)
 800c6ce:	6013      	str	r3, [r2, #0]
 800c6d0:	693b      	ldr	r3, [r7, #16]
 800c6d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6d4:	4613      	mov	r3, r2
 800c6d6:	009b      	lsls	r3, r3, #2
 800c6d8:	4413      	add	r3, r2
 800c6da:	009b      	lsls	r3, r3, #2
 800c6dc:	4a09      	ldr	r2, [pc, #36]	; (800c704 <xTaskPriorityDisinherit+0xd8>)
 800c6de:	441a      	add	r2, r3
 800c6e0:	693b      	ldr	r3, [r7, #16]
 800c6e2:	3304      	adds	r3, #4
 800c6e4:	4619      	mov	r1, r3
 800c6e6:	4610      	mov	r0, r2
 800c6e8:	f7fe faca 	bl	800ac80 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c6ec:	2301      	movs	r3, #1
 800c6ee:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c6f0:	697b      	ldr	r3, [r7, #20]
	}
 800c6f2:	4618      	mov	r0, r3
 800c6f4:	3718      	adds	r7, #24
 800c6f6:	46bd      	mov	sp, r7
 800c6f8:	bd80      	pop	{r7, pc}
 800c6fa:	bf00      	nop
 800c6fc:	20000aac 	.word	0x20000aac
 800c700:	20000f88 	.word	0x20000f88
 800c704:	20000ab0 	.word	0x20000ab0

0800c708 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800c708:	b480      	push	{r7}
 800c70a:	b083      	sub	sp, #12
 800c70c:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800c70e:	4b09      	ldr	r3, [pc, #36]	; (800c734 <uxTaskResetEventItemValue+0x2c>)
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	699b      	ldr	r3, [r3, #24]
 800c714:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c716:	4b07      	ldr	r3, [pc, #28]	; (800c734 <uxTaskResetEventItemValue+0x2c>)
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c71c:	4b05      	ldr	r3, [pc, #20]	; (800c734 <uxTaskResetEventItemValue+0x2c>)
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800c724:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800c726:	687b      	ldr	r3, [r7, #4]
}
 800c728:	4618      	mov	r0, r3
 800c72a:	370c      	adds	r7, #12
 800c72c:	46bd      	mov	sp, r7
 800c72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c732:	4770      	bx	lr
 800c734:	20000aac 	.word	0x20000aac

0800c738 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800c738:	b580      	push	{r7, lr}
 800c73a:	b08e      	sub	sp, #56	; 0x38
 800c73c:	af00      	add	r7, sp, #0
 800c73e:	60f8      	str	r0, [r7, #12]
 800c740:	60b9      	str	r1, [r7, #8]
 800c742:	603b      	str	r3, [r7, #0]
 800c744:	4613      	mov	r3, r2
 800c746:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800c748:	2301      	movs	r3, #1
 800c74a:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d10a      	bne.n	800c768 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 800c752:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c756:	f383 8811 	msr	BASEPRI, r3
 800c75a:	f3bf 8f6f 	isb	sy
 800c75e:	f3bf 8f4f 	dsb	sy
 800c762:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c764:	bf00      	nop
 800c766:	e7fe      	b.n	800c766 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c768:	f000 fe7e 	bl	800d468 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800c770:	f3ef 8211 	mrs	r2, BASEPRI
 800c774:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c778:	f383 8811 	msr	BASEPRI, r3
 800c77c:	f3bf 8f6f 	isb	sy
 800c780:	f3bf 8f4f 	dsb	sy
 800c784:	623a      	str	r2, [r7, #32]
 800c786:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800c788:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c78a:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800c78c:	683b      	ldr	r3, [r7, #0]
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d004      	beq.n	800c79c <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800c792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c794:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 800c798:	683b      	ldr	r3, [r7, #0]
 800c79a:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800c79c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c79e:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 800c7a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800c7a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7a8:	2202      	movs	r2, #2
 800c7aa:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac

			switch( eAction )
 800c7ae:	79fb      	ldrb	r3, [r7, #7]
 800c7b0:	2b04      	cmp	r3, #4
 800c7b2:	d82f      	bhi.n	800c814 <xTaskGenericNotifyFromISR+0xdc>
 800c7b4:	a201      	add	r2, pc, #4	; (adr r2, 800c7bc <xTaskGenericNotifyFromISR+0x84>)
 800c7b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7ba:	bf00      	nop
 800c7bc:	0800c837 	.word	0x0800c837
 800c7c0:	0800c7d1 	.word	0x0800c7d1
 800c7c4:	0800c7e3 	.word	0x0800c7e3
 800c7c8:	0800c7f3 	.word	0x0800c7f3
 800c7cc:	0800c7fd 	.word	0x0800c7fd
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800c7d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7d2:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 800c7d6:	68bb      	ldr	r3, [r7, #8]
 800c7d8:	431a      	orrs	r2, r3
 800c7da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7dc:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
					break;
 800c7e0:	e02c      	b.n	800c83c <xTaskGenericNotifyFromISR+0x104>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800c7e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7e4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800c7e8:	1c5a      	adds	r2, r3, #1
 800c7ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7ec:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
					break;
 800c7f0:	e024      	b.n	800c83c <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800c7f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7f4:	68ba      	ldr	r2, [r7, #8]
 800c7f6:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
					break;
 800c7fa:	e01f      	b.n	800c83c <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800c7fc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c800:	2b02      	cmp	r3, #2
 800c802:	d004      	beq.n	800c80e <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800c804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c806:	68ba      	ldr	r2, [r7, #8]
 800c808:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800c80c:	e016      	b.n	800c83c <xTaskGenericNotifyFromISR+0x104>
						xReturn = pdFAIL;
 800c80e:	2300      	movs	r3, #0
 800c810:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800c812:	e013      	b.n	800c83c <xTaskGenericNotifyFromISR+0x104>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800c814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c816:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800c81a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c81e:	d00c      	beq.n	800c83a <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 800c820:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c824:	f383 8811 	msr	BASEPRI, r3
 800c828:	f3bf 8f6f 	isb	sy
 800c82c:	f3bf 8f4f 	dsb	sy
 800c830:	61bb      	str	r3, [r7, #24]
}
 800c832:	bf00      	nop
 800c834:	e7fe      	b.n	800c834 <xTaskGenericNotifyFromISR+0xfc>
					break;
 800c836:	bf00      	nop
 800c838:	e000      	b.n	800c83c <xTaskGenericNotifyFromISR+0x104>
					break;
 800c83a:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800c83c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c840:	2b01      	cmp	r3, #1
 800c842:	d146      	bne.n	800c8d2 <xTaskGenericNotifyFromISR+0x19a>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800c844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d00a      	beq.n	800c862 <xTaskGenericNotifyFromISR+0x12a>
	__asm volatile
 800c84c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c850:	f383 8811 	msr	BASEPRI, r3
 800c854:	f3bf 8f6f 	isb	sy
 800c858:	f3bf 8f4f 	dsb	sy
 800c85c:	617b      	str	r3, [r7, #20]
}
 800c85e:	bf00      	nop
 800c860:	e7fe      	b.n	800c860 <xTaskGenericNotifyFromISR+0x128>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c862:	4b21      	ldr	r3, [pc, #132]	; (800c8e8 <xTaskGenericNotifyFromISR+0x1b0>)
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	2b00      	cmp	r3, #0
 800c868:	d11d      	bne.n	800c8a6 <xTaskGenericNotifyFromISR+0x16e>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c86a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c86c:	3304      	adds	r3, #4
 800c86e:	4618      	mov	r0, r3
 800c870:	f7fe fa63 	bl	800ad3a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c876:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c878:	4b1c      	ldr	r3, [pc, #112]	; (800c8ec <xTaskGenericNotifyFromISR+0x1b4>)
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	429a      	cmp	r2, r3
 800c87e:	d903      	bls.n	800c888 <xTaskGenericNotifyFromISR+0x150>
 800c880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c884:	4a19      	ldr	r2, [pc, #100]	; (800c8ec <xTaskGenericNotifyFromISR+0x1b4>)
 800c886:	6013      	str	r3, [r2, #0]
 800c888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c88a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c88c:	4613      	mov	r3, r2
 800c88e:	009b      	lsls	r3, r3, #2
 800c890:	4413      	add	r3, r2
 800c892:	009b      	lsls	r3, r3, #2
 800c894:	4a16      	ldr	r2, [pc, #88]	; (800c8f0 <xTaskGenericNotifyFromISR+0x1b8>)
 800c896:	441a      	add	r2, r3
 800c898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c89a:	3304      	adds	r3, #4
 800c89c:	4619      	mov	r1, r3
 800c89e:	4610      	mov	r0, r2
 800c8a0:	f7fe f9ee 	bl	800ac80 <vListInsertEnd>
 800c8a4:	e005      	b.n	800c8b2 <xTaskGenericNotifyFromISR+0x17a>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800c8a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8a8:	3318      	adds	r3, #24
 800c8aa:	4619      	mov	r1, r3
 800c8ac:	4811      	ldr	r0, [pc, #68]	; (800c8f4 <xTaskGenericNotifyFromISR+0x1bc>)
 800c8ae:	f7fe f9e7 	bl	800ac80 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c8b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8b6:	4b10      	ldr	r3, [pc, #64]	; (800c8f8 <xTaskGenericNotifyFromISR+0x1c0>)
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8bc:	429a      	cmp	r2, r3
 800c8be:	d908      	bls.n	800c8d2 <xTaskGenericNotifyFromISR+0x19a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800c8c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d002      	beq.n	800c8cc <xTaskGenericNotifyFromISR+0x194>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800c8c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c8c8:	2201      	movs	r2, #1
 800c8ca:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800c8cc:	4b0b      	ldr	r3, [pc, #44]	; (800c8fc <xTaskGenericNotifyFromISR+0x1c4>)
 800c8ce:	2201      	movs	r2, #1
 800c8d0:	601a      	str	r2, [r3, #0]
 800c8d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8d4:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c8d6:	693b      	ldr	r3, [r7, #16]
 800c8d8:	f383 8811 	msr	BASEPRI, r3
}
 800c8dc:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800c8de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800c8e0:	4618      	mov	r0, r3
 800c8e2:	3738      	adds	r7, #56	; 0x38
 800c8e4:	46bd      	mov	sp, r7
 800c8e6:	bd80      	pop	{r7, pc}
 800c8e8:	20000fa8 	.word	0x20000fa8
 800c8ec:	20000f88 	.word	0x20000f88
 800c8f0:	20000ab0 	.word	0x20000ab0
 800c8f4:	20000f40 	.word	0x20000f40
 800c8f8:	20000aac 	.word	0x20000aac
 800c8fc:	20000f94 	.word	0x20000f94

0800c900 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c900:	b580      	push	{r7, lr}
 800c902:	b084      	sub	sp, #16
 800c904:	af00      	add	r7, sp, #0
 800c906:	6078      	str	r0, [r7, #4]
 800c908:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c90a:	4b21      	ldr	r3, [pc, #132]	; (800c990 <prvAddCurrentTaskToDelayedList+0x90>)
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c910:	4b20      	ldr	r3, [pc, #128]	; (800c994 <prvAddCurrentTaskToDelayedList+0x94>)
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	3304      	adds	r3, #4
 800c916:	4618      	mov	r0, r3
 800c918:	f7fe fa0f 	bl	800ad3a <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c922:	d10a      	bne.n	800c93a <prvAddCurrentTaskToDelayedList+0x3a>
 800c924:	683b      	ldr	r3, [r7, #0]
 800c926:	2b00      	cmp	r3, #0
 800c928:	d007      	beq.n	800c93a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c92a:	4b1a      	ldr	r3, [pc, #104]	; (800c994 <prvAddCurrentTaskToDelayedList+0x94>)
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	3304      	adds	r3, #4
 800c930:	4619      	mov	r1, r3
 800c932:	4819      	ldr	r0, [pc, #100]	; (800c998 <prvAddCurrentTaskToDelayedList+0x98>)
 800c934:	f7fe f9a4 	bl	800ac80 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c938:	e026      	b.n	800c988 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c93a:	68fa      	ldr	r2, [r7, #12]
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	4413      	add	r3, r2
 800c940:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c942:	4b14      	ldr	r3, [pc, #80]	; (800c994 <prvAddCurrentTaskToDelayedList+0x94>)
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	68ba      	ldr	r2, [r7, #8]
 800c948:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c94a:	68ba      	ldr	r2, [r7, #8]
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	429a      	cmp	r2, r3
 800c950:	d209      	bcs.n	800c966 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c952:	4b12      	ldr	r3, [pc, #72]	; (800c99c <prvAddCurrentTaskToDelayedList+0x9c>)
 800c954:	681a      	ldr	r2, [r3, #0]
 800c956:	4b0f      	ldr	r3, [pc, #60]	; (800c994 <prvAddCurrentTaskToDelayedList+0x94>)
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	3304      	adds	r3, #4
 800c95c:	4619      	mov	r1, r3
 800c95e:	4610      	mov	r0, r2
 800c960:	f7fe f9b2 	bl	800acc8 <vListInsert>
}
 800c964:	e010      	b.n	800c988 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c966:	4b0e      	ldr	r3, [pc, #56]	; (800c9a0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c968:	681a      	ldr	r2, [r3, #0]
 800c96a:	4b0a      	ldr	r3, [pc, #40]	; (800c994 <prvAddCurrentTaskToDelayedList+0x94>)
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	3304      	adds	r3, #4
 800c970:	4619      	mov	r1, r3
 800c972:	4610      	mov	r0, r2
 800c974:	f7fe f9a8 	bl	800acc8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c978:	4b0a      	ldr	r3, [pc, #40]	; (800c9a4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	68ba      	ldr	r2, [r7, #8]
 800c97e:	429a      	cmp	r2, r3
 800c980:	d202      	bcs.n	800c988 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c982:	4a08      	ldr	r2, [pc, #32]	; (800c9a4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c984:	68bb      	ldr	r3, [r7, #8]
 800c986:	6013      	str	r3, [r2, #0]
}
 800c988:	bf00      	nop
 800c98a:	3710      	adds	r7, #16
 800c98c:	46bd      	mov	sp, r7
 800c98e:	bd80      	pop	{r7, pc}
 800c990:	20000f84 	.word	0x20000f84
 800c994:	20000aac 	.word	0x20000aac
 800c998:	20000f6c 	.word	0x20000f6c
 800c99c:	20000f3c 	.word	0x20000f3c
 800c9a0:	20000f38 	.word	0x20000f38
 800c9a4:	20000fa0 	.word	0x20000fa0

0800c9a8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c9a8:	b580      	push	{r7, lr}
 800c9aa:	b08a      	sub	sp, #40	; 0x28
 800c9ac:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c9ae:	2300      	movs	r3, #0
 800c9b0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c9b2:	f000 fb07 	bl	800cfc4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c9b6:	4b1c      	ldr	r3, [pc, #112]	; (800ca28 <xTimerCreateTimerTask+0x80>)
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d021      	beq.n	800ca02 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c9be:	2300      	movs	r3, #0
 800c9c0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c9c2:	2300      	movs	r3, #0
 800c9c4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c9c6:	1d3a      	adds	r2, r7, #4
 800c9c8:	f107 0108 	add.w	r1, r7, #8
 800c9cc:	f107 030c 	add.w	r3, r7, #12
 800c9d0:	4618      	mov	r0, r3
 800c9d2:	f7fd ff79 	bl	800a8c8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c9d6:	6879      	ldr	r1, [r7, #4]
 800c9d8:	68bb      	ldr	r3, [r7, #8]
 800c9da:	68fa      	ldr	r2, [r7, #12]
 800c9dc:	9202      	str	r2, [sp, #8]
 800c9de:	9301      	str	r3, [sp, #4]
 800c9e0:	2302      	movs	r3, #2
 800c9e2:	9300      	str	r3, [sp, #0]
 800c9e4:	2300      	movs	r3, #0
 800c9e6:	460a      	mov	r2, r1
 800c9e8:	4910      	ldr	r1, [pc, #64]	; (800ca2c <xTimerCreateTimerTask+0x84>)
 800c9ea:	4811      	ldr	r0, [pc, #68]	; (800ca30 <xTimerCreateTimerTask+0x88>)
 800c9ec:	f7fe fef6 	bl	800b7dc <xTaskCreateStatic>
 800c9f0:	4603      	mov	r3, r0
 800c9f2:	4a10      	ldr	r2, [pc, #64]	; (800ca34 <xTimerCreateTimerTask+0x8c>)
 800c9f4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c9f6:	4b0f      	ldr	r3, [pc, #60]	; (800ca34 <xTimerCreateTimerTask+0x8c>)
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d001      	beq.n	800ca02 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c9fe:	2301      	movs	r3, #1
 800ca00:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ca02:	697b      	ldr	r3, [r7, #20]
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d10a      	bne.n	800ca1e <xTimerCreateTimerTask+0x76>
	__asm volatile
 800ca08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca0c:	f383 8811 	msr	BASEPRI, r3
 800ca10:	f3bf 8f6f 	isb	sy
 800ca14:	f3bf 8f4f 	dsb	sy
 800ca18:	613b      	str	r3, [r7, #16]
}
 800ca1a:	bf00      	nop
 800ca1c:	e7fe      	b.n	800ca1c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ca1e:	697b      	ldr	r3, [r7, #20]
}
 800ca20:	4618      	mov	r0, r3
 800ca22:	3718      	adds	r7, #24
 800ca24:	46bd      	mov	sp, r7
 800ca26:	bd80      	pop	{r7, pc}
 800ca28:	20000fe4 	.word	0x20000fe4
 800ca2c:	0800e600 	.word	0x0800e600
 800ca30:	0800cb6d 	.word	0x0800cb6d
 800ca34:	20000fe8 	.word	0x20000fe8

0800ca38 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ca38:	b580      	push	{r7, lr}
 800ca3a:	b08a      	sub	sp, #40	; 0x28
 800ca3c:	af00      	add	r7, sp, #0
 800ca3e:	60f8      	str	r0, [r7, #12]
 800ca40:	60b9      	str	r1, [r7, #8]
 800ca42:	607a      	str	r2, [r7, #4]
 800ca44:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ca46:	2300      	movs	r3, #0
 800ca48:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d10a      	bne.n	800ca66 <xTimerGenericCommand+0x2e>
	__asm volatile
 800ca50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca54:	f383 8811 	msr	BASEPRI, r3
 800ca58:	f3bf 8f6f 	isb	sy
 800ca5c:	f3bf 8f4f 	dsb	sy
 800ca60:	623b      	str	r3, [r7, #32]
}
 800ca62:	bf00      	nop
 800ca64:	e7fe      	b.n	800ca64 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ca66:	4b1a      	ldr	r3, [pc, #104]	; (800cad0 <xTimerGenericCommand+0x98>)
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d02a      	beq.n	800cac4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ca6e:	68bb      	ldr	r3, [r7, #8]
 800ca70:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ca7a:	68bb      	ldr	r3, [r7, #8]
 800ca7c:	2b05      	cmp	r3, #5
 800ca7e:	dc18      	bgt.n	800cab2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ca80:	f7ff fdb6 	bl	800c5f0 <xTaskGetSchedulerState>
 800ca84:	4603      	mov	r3, r0
 800ca86:	2b02      	cmp	r3, #2
 800ca88:	d109      	bne.n	800ca9e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ca8a:	4b11      	ldr	r3, [pc, #68]	; (800cad0 <xTimerGenericCommand+0x98>)
 800ca8c:	6818      	ldr	r0, [r3, #0]
 800ca8e:	f107 0110 	add.w	r1, r7, #16
 800ca92:	2300      	movs	r3, #0
 800ca94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ca96:	f7fe fab9 	bl	800b00c <xQueueGenericSend>
 800ca9a:	6278      	str	r0, [r7, #36]	; 0x24
 800ca9c:	e012      	b.n	800cac4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ca9e:	4b0c      	ldr	r3, [pc, #48]	; (800cad0 <xTimerGenericCommand+0x98>)
 800caa0:	6818      	ldr	r0, [r3, #0]
 800caa2:	f107 0110 	add.w	r1, r7, #16
 800caa6:	2300      	movs	r3, #0
 800caa8:	2200      	movs	r2, #0
 800caaa:	f7fe faaf 	bl	800b00c <xQueueGenericSend>
 800caae:	6278      	str	r0, [r7, #36]	; 0x24
 800cab0:	e008      	b.n	800cac4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800cab2:	4b07      	ldr	r3, [pc, #28]	; (800cad0 <xTimerGenericCommand+0x98>)
 800cab4:	6818      	ldr	r0, [r3, #0]
 800cab6:	f107 0110 	add.w	r1, r7, #16
 800caba:	2300      	movs	r3, #0
 800cabc:	683a      	ldr	r2, [r7, #0]
 800cabe:	f7fe fba3 	bl	800b208 <xQueueGenericSendFromISR>
 800cac2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800cac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cac6:	4618      	mov	r0, r3
 800cac8:	3728      	adds	r7, #40	; 0x28
 800caca:	46bd      	mov	sp, r7
 800cacc:	bd80      	pop	{r7, pc}
 800cace:	bf00      	nop
 800cad0:	20000fe4 	.word	0x20000fe4

0800cad4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800cad4:	b580      	push	{r7, lr}
 800cad6:	b088      	sub	sp, #32
 800cad8:	af02      	add	r7, sp, #8
 800cada:	6078      	str	r0, [r7, #4]
 800cadc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cade:	4b22      	ldr	r3, [pc, #136]	; (800cb68 <prvProcessExpiredTimer+0x94>)
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	68db      	ldr	r3, [r3, #12]
 800cae4:	68db      	ldr	r3, [r3, #12]
 800cae6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cae8:	697b      	ldr	r3, [r7, #20]
 800caea:	3304      	adds	r3, #4
 800caec:	4618      	mov	r0, r3
 800caee:	f7fe f924 	bl	800ad3a <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800caf2:	697b      	ldr	r3, [r7, #20]
 800caf4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800caf8:	f003 0304 	and.w	r3, r3, #4
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d022      	beq.n	800cb46 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800cb00:	697b      	ldr	r3, [r7, #20]
 800cb02:	699a      	ldr	r2, [r3, #24]
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	18d1      	adds	r1, r2, r3
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	683a      	ldr	r2, [r7, #0]
 800cb0c:	6978      	ldr	r0, [r7, #20]
 800cb0e:	f000 f8d1 	bl	800ccb4 <prvInsertTimerInActiveList>
 800cb12:	4603      	mov	r3, r0
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d01f      	beq.n	800cb58 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cb18:	2300      	movs	r3, #0
 800cb1a:	9300      	str	r3, [sp, #0]
 800cb1c:	2300      	movs	r3, #0
 800cb1e:	687a      	ldr	r2, [r7, #4]
 800cb20:	2100      	movs	r1, #0
 800cb22:	6978      	ldr	r0, [r7, #20]
 800cb24:	f7ff ff88 	bl	800ca38 <xTimerGenericCommand>
 800cb28:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800cb2a:	693b      	ldr	r3, [r7, #16]
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d113      	bne.n	800cb58 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800cb30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb34:	f383 8811 	msr	BASEPRI, r3
 800cb38:	f3bf 8f6f 	isb	sy
 800cb3c:	f3bf 8f4f 	dsb	sy
 800cb40:	60fb      	str	r3, [r7, #12]
}
 800cb42:	bf00      	nop
 800cb44:	e7fe      	b.n	800cb44 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cb46:	697b      	ldr	r3, [r7, #20]
 800cb48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cb4c:	f023 0301 	bic.w	r3, r3, #1
 800cb50:	b2da      	uxtb	r2, r3
 800cb52:	697b      	ldr	r3, [r7, #20]
 800cb54:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cb58:	697b      	ldr	r3, [r7, #20]
 800cb5a:	6a1b      	ldr	r3, [r3, #32]
 800cb5c:	6978      	ldr	r0, [r7, #20]
 800cb5e:	4798      	blx	r3
}
 800cb60:	bf00      	nop
 800cb62:	3718      	adds	r7, #24
 800cb64:	46bd      	mov	sp, r7
 800cb66:	bd80      	pop	{r7, pc}
 800cb68:	20000fdc 	.word	0x20000fdc

0800cb6c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800cb6c:	b580      	push	{r7, lr}
 800cb6e:	b084      	sub	sp, #16
 800cb70:	af00      	add	r7, sp, #0
 800cb72:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cb74:	f107 0308 	add.w	r3, r7, #8
 800cb78:	4618      	mov	r0, r3
 800cb7a:	f000 f857 	bl	800cc2c <prvGetNextExpireTime>
 800cb7e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800cb80:	68bb      	ldr	r3, [r7, #8]
 800cb82:	4619      	mov	r1, r3
 800cb84:	68f8      	ldr	r0, [r7, #12]
 800cb86:	f000 f803 	bl	800cb90 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800cb8a:	f000 f8d5 	bl	800cd38 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cb8e:	e7f1      	b.n	800cb74 <prvTimerTask+0x8>

0800cb90 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800cb90:	b580      	push	{r7, lr}
 800cb92:	b084      	sub	sp, #16
 800cb94:	af00      	add	r7, sp, #0
 800cb96:	6078      	str	r0, [r7, #4]
 800cb98:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800cb9a:	f7ff f883 	bl	800bca4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cb9e:	f107 0308 	add.w	r3, r7, #8
 800cba2:	4618      	mov	r0, r3
 800cba4:	f000 f866 	bl	800cc74 <prvSampleTimeNow>
 800cba8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800cbaa:	68bb      	ldr	r3, [r7, #8]
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d130      	bne.n	800cc12 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800cbb0:	683b      	ldr	r3, [r7, #0]
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d10a      	bne.n	800cbcc <prvProcessTimerOrBlockTask+0x3c>
 800cbb6:	687a      	ldr	r2, [r7, #4]
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	429a      	cmp	r2, r3
 800cbbc:	d806      	bhi.n	800cbcc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800cbbe:	f7ff f87f 	bl	800bcc0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800cbc2:	68f9      	ldr	r1, [r7, #12]
 800cbc4:	6878      	ldr	r0, [r7, #4]
 800cbc6:	f7ff ff85 	bl	800cad4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800cbca:	e024      	b.n	800cc16 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800cbcc:	683b      	ldr	r3, [r7, #0]
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d008      	beq.n	800cbe4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800cbd2:	4b13      	ldr	r3, [pc, #76]	; (800cc20 <prvProcessTimerOrBlockTask+0x90>)
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d101      	bne.n	800cbe0 <prvProcessTimerOrBlockTask+0x50>
 800cbdc:	2301      	movs	r3, #1
 800cbde:	e000      	b.n	800cbe2 <prvProcessTimerOrBlockTask+0x52>
 800cbe0:	2300      	movs	r3, #0
 800cbe2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800cbe4:	4b0f      	ldr	r3, [pc, #60]	; (800cc24 <prvProcessTimerOrBlockTask+0x94>)
 800cbe6:	6818      	ldr	r0, [r3, #0]
 800cbe8:	687a      	ldr	r2, [r7, #4]
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	1ad3      	subs	r3, r2, r3
 800cbee:	683a      	ldr	r2, [r7, #0]
 800cbf0:	4619      	mov	r1, r3
 800cbf2:	f7fe fdbf 	bl	800b774 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800cbf6:	f7ff f863 	bl	800bcc0 <xTaskResumeAll>
 800cbfa:	4603      	mov	r3, r0
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d10a      	bne.n	800cc16 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800cc00:	4b09      	ldr	r3, [pc, #36]	; (800cc28 <prvProcessTimerOrBlockTask+0x98>)
 800cc02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cc06:	601a      	str	r2, [r3, #0]
 800cc08:	f3bf 8f4f 	dsb	sy
 800cc0c:	f3bf 8f6f 	isb	sy
}
 800cc10:	e001      	b.n	800cc16 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800cc12:	f7ff f855 	bl	800bcc0 <xTaskResumeAll>
}
 800cc16:	bf00      	nop
 800cc18:	3710      	adds	r7, #16
 800cc1a:	46bd      	mov	sp, r7
 800cc1c:	bd80      	pop	{r7, pc}
 800cc1e:	bf00      	nop
 800cc20:	20000fe0 	.word	0x20000fe0
 800cc24:	20000fe4 	.word	0x20000fe4
 800cc28:	e000ed04 	.word	0xe000ed04

0800cc2c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800cc2c:	b480      	push	{r7}
 800cc2e:	b085      	sub	sp, #20
 800cc30:	af00      	add	r7, sp, #0
 800cc32:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800cc34:	4b0e      	ldr	r3, [pc, #56]	; (800cc70 <prvGetNextExpireTime+0x44>)
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d101      	bne.n	800cc42 <prvGetNextExpireTime+0x16>
 800cc3e:	2201      	movs	r2, #1
 800cc40:	e000      	b.n	800cc44 <prvGetNextExpireTime+0x18>
 800cc42:	2200      	movs	r2, #0
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d105      	bne.n	800cc5c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cc50:	4b07      	ldr	r3, [pc, #28]	; (800cc70 <prvGetNextExpireTime+0x44>)
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	68db      	ldr	r3, [r3, #12]
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	60fb      	str	r3, [r7, #12]
 800cc5a:	e001      	b.n	800cc60 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800cc5c:	2300      	movs	r3, #0
 800cc5e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800cc60:	68fb      	ldr	r3, [r7, #12]
}
 800cc62:	4618      	mov	r0, r3
 800cc64:	3714      	adds	r7, #20
 800cc66:	46bd      	mov	sp, r7
 800cc68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc6c:	4770      	bx	lr
 800cc6e:	bf00      	nop
 800cc70:	20000fdc 	.word	0x20000fdc

0800cc74 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800cc74:	b580      	push	{r7, lr}
 800cc76:	b084      	sub	sp, #16
 800cc78:	af00      	add	r7, sp, #0
 800cc7a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800cc7c:	f7ff f8be 	bl	800bdfc <xTaskGetTickCount>
 800cc80:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800cc82:	4b0b      	ldr	r3, [pc, #44]	; (800ccb0 <prvSampleTimeNow+0x3c>)
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	68fa      	ldr	r2, [r7, #12]
 800cc88:	429a      	cmp	r2, r3
 800cc8a:	d205      	bcs.n	800cc98 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800cc8c:	f000 f936 	bl	800cefc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	2201      	movs	r2, #1
 800cc94:	601a      	str	r2, [r3, #0]
 800cc96:	e002      	b.n	800cc9e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	2200      	movs	r2, #0
 800cc9c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800cc9e:	4a04      	ldr	r2, [pc, #16]	; (800ccb0 <prvSampleTimeNow+0x3c>)
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800cca4:	68fb      	ldr	r3, [r7, #12]
}
 800cca6:	4618      	mov	r0, r3
 800cca8:	3710      	adds	r7, #16
 800ccaa:	46bd      	mov	sp, r7
 800ccac:	bd80      	pop	{r7, pc}
 800ccae:	bf00      	nop
 800ccb0:	20000fec 	.word	0x20000fec

0800ccb4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ccb4:	b580      	push	{r7, lr}
 800ccb6:	b086      	sub	sp, #24
 800ccb8:	af00      	add	r7, sp, #0
 800ccba:	60f8      	str	r0, [r7, #12]
 800ccbc:	60b9      	str	r1, [r7, #8]
 800ccbe:	607a      	str	r2, [r7, #4]
 800ccc0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ccc2:	2300      	movs	r3, #0
 800ccc4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	68ba      	ldr	r2, [r7, #8]
 800ccca:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	68fa      	ldr	r2, [r7, #12]
 800ccd0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ccd2:	68ba      	ldr	r2, [r7, #8]
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	429a      	cmp	r2, r3
 800ccd8:	d812      	bhi.n	800cd00 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ccda:	687a      	ldr	r2, [r7, #4]
 800ccdc:	683b      	ldr	r3, [r7, #0]
 800ccde:	1ad2      	subs	r2, r2, r3
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	699b      	ldr	r3, [r3, #24]
 800cce4:	429a      	cmp	r2, r3
 800cce6:	d302      	bcc.n	800ccee <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800cce8:	2301      	movs	r3, #1
 800ccea:	617b      	str	r3, [r7, #20]
 800ccec:	e01b      	b.n	800cd26 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ccee:	4b10      	ldr	r3, [pc, #64]	; (800cd30 <prvInsertTimerInActiveList+0x7c>)
 800ccf0:	681a      	ldr	r2, [r3, #0]
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	3304      	adds	r3, #4
 800ccf6:	4619      	mov	r1, r3
 800ccf8:	4610      	mov	r0, r2
 800ccfa:	f7fd ffe5 	bl	800acc8 <vListInsert>
 800ccfe:	e012      	b.n	800cd26 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800cd00:	687a      	ldr	r2, [r7, #4]
 800cd02:	683b      	ldr	r3, [r7, #0]
 800cd04:	429a      	cmp	r2, r3
 800cd06:	d206      	bcs.n	800cd16 <prvInsertTimerInActiveList+0x62>
 800cd08:	68ba      	ldr	r2, [r7, #8]
 800cd0a:	683b      	ldr	r3, [r7, #0]
 800cd0c:	429a      	cmp	r2, r3
 800cd0e:	d302      	bcc.n	800cd16 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800cd10:	2301      	movs	r3, #1
 800cd12:	617b      	str	r3, [r7, #20]
 800cd14:	e007      	b.n	800cd26 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cd16:	4b07      	ldr	r3, [pc, #28]	; (800cd34 <prvInsertTimerInActiveList+0x80>)
 800cd18:	681a      	ldr	r2, [r3, #0]
 800cd1a:	68fb      	ldr	r3, [r7, #12]
 800cd1c:	3304      	adds	r3, #4
 800cd1e:	4619      	mov	r1, r3
 800cd20:	4610      	mov	r0, r2
 800cd22:	f7fd ffd1 	bl	800acc8 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800cd26:	697b      	ldr	r3, [r7, #20]
}
 800cd28:	4618      	mov	r0, r3
 800cd2a:	3718      	adds	r7, #24
 800cd2c:	46bd      	mov	sp, r7
 800cd2e:	bd80      	pop	{r7, pc}
 800cd30:	20000fe0 	.word	0x20000fe0
 800cd34:	20000fdc 	.word	0x20000fdc

0800cd38 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800cd38:	b580      	push	{r7, lr}
 800cd3a:	b08e      	sub	sp, #56	; 0x38
 800cd3c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800cd3e:	e0ca      	b.n	800ced6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	da18      	bge.n	800cd78 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800cd46:	1d3b      	adds	r3, r7, #4
 800cd48:	3304      	adds	r3, #4
 800cd4a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800cd4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d10a      	bne.n	800cd68 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800cd52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd56:	f383 8811 	msr	BASEPRI, r3
 800cd5a:	f3bf 8f6f 	isb	sy
 800cd5e:	f3bf 8f4f 	dsb	sy
 800cd62:	61fb      	str	r3, [r7, #28]
}
 800cd64:	bf00      	nop
 800cd66:	e7fe      	b.n	800cd66 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800cd68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cd6e:	6850      	ldr	r0, [r2, #4]
 800cd70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cd72:	6892      	ldr	r2, [r2, #8]
 800cd74:	4611      	mov	r1, r2
 800cd76:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	f2c0 80ab 	blt.w	800ced6 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800cd84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd86:	695b      	ldr	r3, [r3, #20]
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d004      	beq.n	800cd96 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cd8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd8e:	3304      	adds	r3, #4
 800cd90:	4618      	mov	r0, r3
 800cd92:	f7fd ffd2 	bl	800ad3a <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cd96:	463b      	mov	r3, r7
 800cd98:	4618      	mov	r0, r3
 800cd9a:	f7ff ff6b 	bl	800cc74 <prvSampleTimeNow>
 800cd9e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	2b09      	cmp	r3, #9
 800cda4:	f200 8096 	bhi.w	800ced4 <prvProcessReceivedCommands+0x19c>
 800cda8:	a201      	add	r2, pc, #4	; (adr r2, 800cdb0 <prvProcessReceivedCommands+0x78>)
 800cdaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdae:	bf00      	nop
 800cdb0:	0800cdd9 	.word	0x0800cdd9
 800cdb4:	0800cdd9 	.word	0x0800cdd9
 800cdb8:	0800cdd9 	.word	0x0800cdd9
 800cdbc:	0800ce4d 	.word	0x0800ce4d
 800cdc0:	0800ce61 	.word	0x0800ce61
 800cdc4:	0800ceab 	.word	0x0800ceab
 800cdc8:	0800cdd9 	.word	0x0800cdd9
 800cdcc:	0800cdd9 	.word	0x0800cdd9
 800cdd0:	0800ce4d 	.word	0x0800ce4d
 800cdd4:	0800ce61 	.word	0x0800ce61
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800cdd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdda:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cdde:	f043 0301 	orr.w	r3, r3, #1
 800cde2:	b2da      	uxtb	r2, r3
 800cde4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cde6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800cdea:	68ba      	ldr	r2, [r7, #8]
 800cdec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdee:	699b      	ldr	r3, [r3, #24]
 800cdf0:	18d1      	adds	r1, r2, r3
 800cdf2:	68bb      	ldr	r3, [r7, #8]
 800cdf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cdf6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cdf8:	f7ff ff5c 	bl	800ccb4 <prvInsertTimerInActiveList>
 800cdfc:	4603      	mov	r3, r0
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d069      	beq.n	800ced6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ce02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce04:	6a1b      	ldr	r3, [r3, #32]
 800ce06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ce08:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ce0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce0c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ce10:	f003 0304 	and.w	r3, r3, #4
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d05e      	beq.n	800ced6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ce18:	68ba      	ldr	r2, [r7, #8]
 800ce1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce1c:	699b      	ldr	r3, [r3, #24]
 800ce1e:	441a      	add	r2, r3
 800ce20:	2300      	movs	r3, #0
 800ce22:	9300      	str	r3, [sp, #0]
 800ce24:	2300      	movs	r3, #0
 800ce26:	2100      	movs	r1, #0
 800ce28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ce2a:	f7ff fe05 	bl	800ca38 <xTimerGenericCommand>
 800ce2e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ce30:	6a3b      	ldr	r3, [r7, #32]
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d14f      	bne.n	800ced6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800ce36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce3a:	f383 8811 	msr	BASEPRI, r3
 800ce3e:	f3bf 8f6f 	isb	sy
 800ce42:	f3bf 8f4f 	dsb	sy
 800ce46:	61bb      	str	r3, [r7, #24]
}
 800ce48:	bf00      	nop
 800ce4a:	e7fe      	b.n	800ce4a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ce4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce4e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ce52:	f023 0301 	bic.w	r3, r3, #1
 800ce56:	b2da      	uxtb	r2, r3
 800ce58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce5a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800ce5e:	e03a      	b.n	800ced6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ce60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce62:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ce66:	f043 0301 	orr.w	r3, r3, #1
 800ce6a:	b2da      	uxtb	r2, r3
 800ce6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce6e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ce72:	68ba      	ldr	r2, [r7, #8]
 800ce74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce76:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ce78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce7a:	699b      	ldr	r3, [r3, #24]
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d10a      	bne.n	800ce96 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800ce80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce84:	f383 8811 	msr	BASEPRI, r3
 800ce88:	f3bf 8f6f 	isb	sy
 800ce8c:	f3bf 8f4f 	dsb	sy
 800ce90:	617b      	str	r3, [r7, #20]
}
 800ce92:	bf00      	nop
 800ce94:	e7fe      	b.n	800ce94 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ce96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce98:	699a      	ldr	r2, [r3, #24]
 800ce9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce9c:	18d1      	adds	r1, r2, r3
 800ce9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cea0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cea2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cea4:	f7ff ff06 	bl	800ccb4 <prvInsertTimerInActiveList>
					break;
 800cea8:	e015      	b.n	800ced6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ceaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ceac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ceb0:	f003 0302 	and.w	r3, r3, #2
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d103      	bne.n	800cec0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800ceb8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ceba:	f000 fbe1 	bl	800d680 <vPortFree>
 800cebe:	e00a      	b.n	800ced6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cec2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cec6:	f023 0301 	bic.w	r3, r3, #1
 800ceca:	b2da      	uxtb	r2, r3
 800cecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cece:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ced2:	e000      	b.n	800ced6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800ced4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ced6:	4b08      	ldr	r3, [pc, #32]	; (800cef8 <prvProcessReceivedCommands+0x1c0>)
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	1d39      	adds	r1, r7, #4
 800cedc:	2200      	movs	r2, #0
 800cede:	4618      	mov	r0, r3
 800cee0:	f7fe fa2e 	bl	800b340 <xQueueReceive>
 800cee4:	4603      	mov	r3, r0
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	f47f af2a 	bne.w	800cd40 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800ceec:	bf00      	nop
 800ceee:	bf00      	nop
 800cef0:	3730      	adds	r7, #48	; 0x30
 800cef2:	46bd      	mov	sp, r7
 800cef4:	bd80      	pop	{r7, pc}
 800cef6:	bf00      	nop
 800cef8:	20000fe4 	.word	0x20000fe4

0800cefc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800cefc:	b580      	push	{r7, lr}
 800cefe:	b088      	sub	sp, #32
 800cf00:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cf02:	e048      	b.n	800cf96 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cf04:	4b2d      	ldr	r3, [pc, #180]	; (800cfbc <prvSwitchTimerLists+0xc0>)
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	68db      	ldr	r3, [r3, #12]
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cf0e:	4b2b      	ldr	r3, [pc, #172]	; (800cfbc <prvSwitchTimerLists+0xc0>)
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	68db      	ldr	r3, [r3, #12]
 800cf14:	68db      	ldr	r3, [r3, #12]
 800cf16:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cf18:	68fb      	ldr	r3, [r7, #12]
 800cf1a:	3304      	adds	r3, #4
 800cf1c:	4618      	mov	r0, r3
 800cf1e:	f7fd ff0c 	bl	800ad3a <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	6a1b      	ldr	r3, [r3, #32]
 800cf26:	68f8      	ldr	r0, [r7, #12]
 800cf28:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cf30:	f003 0304 	and.w	r3, r3, #4
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d02e      	beq.n	800cf96 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	699b      	ldr	r3, [r3, #24]
 800cf3c:	693a      	ldr	r2, [r7, #16]
 800cf3e:	4413      	add	r3, r2
 800cf40:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800cf42:	68ba      	ldr	r2, [r7, #8]
 800cf44:	693b      	ldr	r3, [r7, #16]
 800cf46:	429a      	cmp	r2, r3
 800cf48:	d90e      	bls.n	800cf68 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	68ba      	ldr	r2, [r7, #8]
 800cf4e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	68fa      	ldr	r2, [r7, #12]
 800cf54:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cf56:	4b19      	ldr	r3, [pc, #100]	; (800cfbc <prvSwitchTimerLists+0xc0>)
 800cf58:	681a      	ldr	r2, [r3, #0]
 800cf5a:	68fb      	ldr	r3, [r7, #12]
 800cf5c:	3304      	adds	r3, #4
 800cf5e:	4619      	mov	r1, r3
 800cf60:	4610      	mov	r0, r2
 800cf62:	f7fd feb1 	bl	800acc8 <vListInsert>
 800cf66:	e016      	b.n	800cf96 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cf68:	2300      	movs	r3, #0
 800cf6a:	9300      	str	r3, [sp, #0]
 800cf6c:	2300      	movs	r3, #0
 800cf6e:	693a      	ldr	r2, [r7, #16]
 800cf70:	2100      	movs	r1, #0
 800cf72:	68f8      	ldr	r0, [r7, #12]
 800cf74:	f7ff fd60 	bl	800ca38 <xTimerGenericCommand>
 800cf78:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d10a      	bne.n	800cf96 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800cf80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf84:	f383 8811 	msr	BASEPRI, r3
 800cf88:	f3bf 8f6f 	isb	sy
 800cf8c:	f3bf 8f4f 	dsb	sy
 800cf90:	603b      	str	r3, [r7, #0]
}
 800cf92:	bf00      	nop
 800cf94:	e7fe      	b.n	800cf94 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cf96:	4b09      	ldr	r3, [pc, #36]	; (800cfbc <prvSwitchTimerLists+0xc0>)
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d1b1      	bne.n	800cf04 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800cfa0:	4b06      	ldr	r3, [pc, #24]	; (800cfbc <prvSwitchTimerLists+0xc0>)
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800cfa6:	4b06      	ldr	r3, [pc, #24]	; (800cfc0 <prvSwitchTimerLists+0xc4>)
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	4a04      	ldr	r2, [pc, #16]	; (800cfbc <prvSwitchTimerLists+0xc0>)
 800cfac:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800cfae:	4a04      	ldr	r2, [pc, #16]	; (800cfc0 <prvSwitchTimerLists+0xc4>)
 800cfb0:	697b      	ldr	r3, [r7, #20]
 800cfb2:	6013      	str	r3, [r2, #0]
}
 800cfb4:	bf00      	nop
 800cfb6:	3718      	adds	r7, #24
 800cfb8:	46bd      	mov	sp, r7
 800cfba:	bd80      	pop	{r7, pc}
 800cfbc:	20000fdc 	.word	0x20000fdc
 800cfc0:	20000fe0 	.word	0x20000fe0

0800cfc4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800cfc4:	b580      	push	{r7, lr}
 800cfc6:	b082      	sub	sp, #8
 800cfc8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800cfca:	f000 f96b 	bl	800d2a4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800cfce:	4b15      	ldr	r3, [pc, #84]	; (800d024 <prvCheckForValidListAndQueue+0x60>)
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d120      	bne.n	800d018 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800cfd6:	4814      	ldr	r0, [pc, #80]	; (800d028 <prvCheckForValidListAndQueue+0x64>)
 800cfd8:	f7fd fe25 	bl	800ac26 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800cfdc:	4813      	ldr	r0, [pc, #76]	; (800d02c <prvCheckForValidListAndQueue+0x68>)
 800cfde:	f7fd fe22 	bl	800ac26 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800cfe2:	4b13      	ldr	r3, [pc, #76]	; (800d030 <prvCheckForValidListAndQueue+0x6c>)
 800cfe4:	4a10      	ldr	r2, [pc, #64]	; (800d028 <prvCheckForValidListAndQueue+0x64>)
 800cfe6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800cfe8:	4b12      	ldr	r3, [pc, #72]	; (800d034 <prvCheckForValidListAndQueue+0x70>)
 800cfea:	4a10      	ldr	r2, [pc, #64]	; (800d02c <prvCheckForValidListAndQueue+0x68>)
 800cfec:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800cfee:	2300      	movs	r3, #0
 800cff0:	9300      	str	r3, [sp, #0]
 800cff2:	4b11      	ldr	r3, [pc, #68]	; (800d038 <prvCheckForValidListAndQueue+0x74>)
 800cff4:	4a11      	ldr	r2, [pc, #68]	; (800d03c <prvCheckForValidListAndQueue+0x78>)
 800cff6:	2110      	movs	r1, #16
 800cff8:	200a      	movs	r0, #10
 800cffa:	f7fd ff31 	bl	800ae60 <xQueueGenericCreateStatic>
 800cffe:	4603      	mov	r3, r0
 800d000:	4a08      	ldr	r2, [pc, #32]	; (800d024 <prvCheckForValidListAndQueue+0x60>)
 800d002:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d004:	4b07      	ldr	r3, [pc, #28]	; (800d024 <prvCheckForValidListAndQueue+0x60>)
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d005      	beq.n	800d018 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d00c:	4b05      	ldr	r3, [pc, #20]	; (800d024 <prvCheckForValidListAndQueue+0x60>)
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	490b      	ldr	r1, [pc, #44]	; (800d040 <prvCheckForValidListAndQueue+0x7c>)
 800d012:	4618      	mov	r0, r3
 800d014:	f7fe fb84 	bl	800b720 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d018:	f000 f974 	bl	800d304 <vPortExitCritical>
}
 800d01c:	bf00      	nop
 800d01e:	46bd      	mov	sp, r7
 800d020:	bd80      	pop	{r7, pc}
 800d022:	bf00      	nop
 800d024:	20000fe4 	.word	0x20000fe4
 800d028:	20000fb4 	.word	0x20000fb4
 800d02c:	20000fc8 	.word	0x20000fc8
 800d030:	20000fdc 	.word	0x20000fdc
 800d034:	20000fe0 	.word	0x20000fe0
 800d038:	20001090 	.word	0x20001090
 800d03c:	20000ff0 	.word	0x20000ff0
 800d040:	0800e608 	.word	0x0800e608

0800d044 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d044:	b480      	push	{r7}
 800d046:	b085      	sub	sp, #20
 800d048:	af00      	add	r7, sp, #0
 800d04a:	60f8      	str	r0, [r7, #12]
 800d04c:	60b9      	str	r1, [r7, #8]
 800d04e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	3b04      	subs	r3, #4
 800d054:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d05c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	3b04      	subs	r3, #4
 800d062:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d064:	68bb      	ldr	r3, [r7, #8]
 800d066:	f023 0201 	bic.w	r2, r3, #1
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	3b04      	subs	r3, #4
 800d072:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d074:	4a0c      	ldr	r2, [pc, #48]	; (800d0a8 <pxPortInitialiseStack+0x64>)
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	3b14      	subs	r3, #20
 800d07e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d080:	687a      	ldr	r2, [r7, #4]
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	3b04      	subs	r3, #4
 800d08a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d08c:	68fb      	ldr	r3, [r7, #12]
 800d08e:	f06f 0202 	mvn.w	r2, #2
 800d092:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	3b20      	subs	r3, #32
 800d098:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d09a:	68fb      	ldr	r3, [r7, #12]
}
 800d09c:	4618      	mov	r0, r3
 800d09e:	3714      	adds	r7, #20
 800d0a0:	46bd      	mov	sp, r7
 800d0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0a6:	4770      	bx	lr
 800d0a8:	0800d0ad 	.word	0x0800d0ad

0800d0ac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d0ac:	b480      	push	{r7}
 800d0ae:	b085      	sub	sp, #20
 800d0b0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d0b2:	2300      	movs	r3, #0
 800d0b4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d0b6:	4b12      	ldr	r3, [pc, #72]	; (800d100 <prvTaskExitError+0x54>)
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0be:	d00a      	beq.n	800d0d6 <prvTaskExitError+0x2a>
	__asm volatile
 800d0c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0c4:	f383 8811 	msr	BASEPRI, r3
 800d0c8:	f3bf 8f6f 	isb	sy
 800d0cc:	f3bf 8f4f 	dsb	sy
 800d0d0:	60fb      	str	r3, [r7, #12]
}
 800d0d2:	bf00      	nop
 800d0d4:	e7fe      	b.n	800d0d4 <prvTaskExitError+0x28>
	__asm volatile
 800d0d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0da:	f383 8811 	msr	BASEPRI, r3
 800d0de:	f3bf 8f6f 	isb	sy
 800d0e2:	f3bf 8f4f 	dsb	sy
 800d0e6:	60bb      	str	r3, [r7, #8]
}
 800d0e8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d0ea:	bf00      	nop
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d0fc      	beq.n	800d0ec <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d0f2:	bf00      	nop
 800d0f4:	bf00      	nop
 800d0f6:	3714      	adds	r7, #20
 800d0f8:	46bd      	mov	sp, r7
 800d0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0fe:	4770      	bx	lr
 800d100:	20000098 	.word	0x20000098
	...

0800d110 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d110:	4b07      	ldr	r3, [pc, #28]	; (800d130 <pxCurrentTCBConst2>)
 800d112:	6819      	ldr	r1, [r3, #0]
 800d114:	6808      	ldr	r0, [r1, #0]
 800d116:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d11a:	f380 8809 	msr	PSP, r0
 800d11e:	f3bf 8f6f 	isb	sy
 800d122:	f04f 0000 	mov.w	r0, #0
 800d126:	f380 8811 	msr	BASEPRI, r0
 800d12a:	4770      	bx	lr
 800d12c:	f3af 8000 	nop.w

0800d130 <pxCurrentTCBConst2>:
 800d130:	20000aac 	.word	0x20000aac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d134:	bf00      	nop
 800d136:	bf00      	nop

0800d138 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d138:	4808      	ldr	r0, [pc, #32]	; (800d15c <prvPortStartFirstTask+0x24>)
 800d13a:	6800      	ldr	r0, [r0, #0]
 800d13c:	6800      	ldr	r0, [r0, #0]
 800d13e:	f380 8808 	msr	MSP, r0
 800d142:	f04f 0000 	mov.w	r0, #0
 800d146:	f380 8814 	msr	CONTROL, r0
 800d14a:	b662      	cpsie	i
 800d14c:	b661      	cpsie	f
 800d14e:	f3bf 8f4f 	dsb	sy
 800d152:	f3bf 8f6f 	isb	sy
 800d156:	df00      	svc	0
 800d158:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d15a:	bf00      	nop
 800d15c:	e000ed08 	.word	0xe000ed08

0800d160 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d160:	b580      	push	{r7, lr}
 800d162:	b086      	sub	sp, #24
 800d164:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d166:	4b46      	ldr	r3, [pc, #280]	; (800d280 <xPortStartScheduler+0x120>)
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	4a46      	ldr	r2, [pc, #280]	; (800d284 <xPortStartScheduler+0x124>)
 800d16c:	4293      	cmp	r3, r2
 800d16e:	d10a      	bne.n	800d186 <xPortStartScheduler+0x26>
	__asm volatile
 800d170:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d174:	f383 8811 	msr	BASEPRI, r3
 800d178:	f3bf 8f6f 	isb	sy
 800d17c:	f3bf 8f4f 	dsb	sy
 800d180:	613b      	str	r3, [r7, #16]
}
 800d182:	bf00      	nop
 800d184:	e7fe      	b.n	800d184 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d186:	4b3e      	ldr	r3, [pc, #248]	; (800d280 <xPortStartScheduler+0x120>)
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	4a3f      	ldr	r2, [pc, #252]	; (800d288 <xPortStartScheduler+0x128>)
 800d18c:	4293      	cmp	r3, r2
 800d18e:	d10a      	bne.n	800d1a6 <xPortStartScheduler+0x46>
	__asm volatile
 800d190:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d194:	f383 8811 	msr	BASEPRI, r3
 800d198:	f3bf 8f6f 	isb	sy
 800d19c:	f3bf 8f4f 	dsb	sy
 800d1a0:	60fb      	str	r3, [r7, #12]
}
 800d1a2:	bf00      	nop
 800d1a4:	e7fe      	b.n	800d1a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d1a6:	4b39      	ldr	r3, [pc, #228]	; (800d28c <xPortStartScheduler+0x12c>)
 800d1a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d1aa:	697b      	ldr	r3, [r7, #20]
 800d1ac:	781b      	ldrb	r3, [r3, #0]
 800d1ae:	b2db      	uxtb	r3, r3
 800d1b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d1b2:	697b      	ldr	r3, [r7, #20]
 800d1b4:	22ff      	movs	r2, #255	; 0xff
 800d1b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d1b8:	697b      	ldr	r3, [r7, #20]
 800d1ba:	781b      	ldrb	r3, [r3, #0]
 800d1bc:	b2db      	uxtb	r3, r3
 800d1be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d1c0:	78fb      	ldrb	r3, [r7, #3]
 800d1c2:	b2db      	uxtb	r3, r3
 800d1c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d1c8:	b2da      	uxtb	r2, r3
 800d1ca:	4b31      	ldr	r3, [pc, #196]	; (800d290 <xPortStartScheduler+0x130>)
 800d1cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d1ce:	4b31      	ldr	r3, [pc, #196]	; (800d294 <xPortStartScheduler+0x134>)
 800d1d0:	2207      	movs	r2, #7
 800d1d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d1d4:	e009      	b.n	800d1ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800d1d6:	4b2f      	ldr	r3, [pc, #188]	; (800d294 <xPortStartScheduler+0x134>)
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	3b01      	subs	r3, #1
 800d1dc:	4a2d      	ldr	r2, [pc, #180]	; (800d294 <xPortStartScheduler+0x134>)
 800d1de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d1e0:	78fb      	ldrb	r3, [r7, #3]
 800d1e2:	b2db      	uxtb	r3, r3
 800d1e4:	005b      	lsls	r3, r3, #1
 800d1e6:	b2db      	uxtb	r3, r3
 800d1e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d1ea:	78fb      	ldrb	r3, [r7, #3]
 800d1ec:	b2db      	uxtb	r3, r3
 800d1ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d1f2:	2b80      	cmp	r3, #128	; 0x80
 800d1f4:	d0ef      	beq.n	800d1d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d1f6:	4b27      	ldr	r3, [pc, #156]	; (800d294 <xPortStartScheduler+0x134>)
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	f1c3 0307 	rsb	r3, r3, #7
 800d1fe:	2b04      	cmp	r3, #4
 800d200:	d00a      	beq.n	800d218 <xPortStartScheduler+0xb8>
	__asm volatile
 800d202:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d206:	f383 8811 	msr	BASEPRI, r3
 800d20a:	f3bf 8f6f 	isb	sy
 800d20e:	f3bf 8f4f 	dsb	sy
 800d212:	60bb      	str	r3, [r7, #8]
}
 800d214:	bf00      	nop
 800d216:	e7fe      	b.n	800d216 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d218:	4b1e      	ldr	r3, [pc, #120]	; (800d294 <xPortStartScheduler+0x134>)
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	021b      	lsls	r3, r3, #8
 800d21e:	4a1d      	ldr	r2, [pc, #116]	; (800d294 <xPortStartScheduler+0x134>)
 800d220:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d222:	4b1c      	ldr	r3, [pc, #112]	; (800d294 <xPortStartScheduler+0x134>)
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d22a:	4a1a      	ldr	r2, [pc, #104]	; (800d294 <xPortStartScheduler+0x134>)
 800d22c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	b2da      	uxtb	r2, r3
 800d232:	697b      	ldr	r3, [r7, #20]
 800d234:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d236:	4b18      	ldr	r3, [pc, #96]	; (800d298 <xPortStartScheduler+0x138>)
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	4a17      	ldr	r2, [pc, #92]	; (800d298 <xPortStartScheduler+0x138>)
 800d23c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d240:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d242:	4b15      	ldr	r3, [pc, #84]	; (800d298 <xPortStartScheduler+0x138>)
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	4a14      	ldr	r2, [pc, #80]	; (800d298 <xPortStartScheduler+0x138>)
 800d248:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d24c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d24e:	f000 f8dd 	bl	800d40c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d252:	4b12      	ldr	r3, [pc, #72]	; (800d29c <xPortStartScheduler+0x13c>)
 800d254:	2200      	movs	r2, #0
 800d256:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d258:	f000 f8fc 	bl	800d454 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d25c:	4b10      	ldr	r3, [pc, #64]	; (800d2a0 <xPortStartScheduler+0x140>)
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	4a0f      	ldr	r2, [pc, #60]	; (800d2a0 <xPortStartScheduler+0x140>)
 800d262:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d266:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d268:	f7ff ff66 	bl	800d138 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d26c:	f7fe fe90 	bl	800bf90 <vTaskSwitchContext>
	prvTaskExitError();
 800d270:	f7ff ff1c 	bl	800d0ac <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d274:	2300      	movs	r3, #0
}
 800d276:	4618      	mov	r0, r3
 800d278:	3718      	adds	r7, #24
 800d27a:	46bd      	mov	sp, r7
 800d27c:	bd80      	pop	{r7, pc}
 800d27e:	bf00      	nop
 800d280:	e000ed00 	.word	0xe000ed00
 800d284:	410fc271 	.word	0x410fc271
 800d288:	410fc270 	.word	0x410fc270
 800d28c:	e000e400 	.word	0xe000e400
 800d290:	200010e0 	.word	0x200010e0
 800d294:	200010e4 	.word	0x200010e4
 800d298:	e000ed20 	.word	0xe000ed20
 800d29c:	20000098 	.word	0x20000098
 800d2a0:	e000ef34 	.word	0xe000ef34

0800d2a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d2a4:	b480      	push	{r7}
 800d2a6:	b083      	sub	sp, #12
 800d2a8:	af00      	add	r7, sp, #0
	__asm volatile
 800d2aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2ae:	f383 8811 	msr	BASEPRI, r3
 800d2b2:	f3bf 8f6f 	isb	sy
 800d2b6:	f3bf 8f4f 	dsb	sy
 800d2ba:	607b      	str	r3, [r7, #4]
}
 800d2bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d2be:	4b0f      	ldr	r3, [pc, #60]	; (800d2fc <vPortEnterCritical+0x58>)
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	3301      	adds	r3, #1
 800d2c4:	4a0d      	ldr	r2, [pc, #52]	; (800d2fc <vPortEnterCritical+0x58>)
 800d2c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d2c8:	4b0c      	ldr	r3, [pc, #48]	; (800d2fc <vPortEnterCritical+0x58>)
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	2b01      	cmp	r3, #1
 800d2ce:	d10f      	bne.n	800d2f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d2d0:	4b0b      	ldr	r3, [pc, #44]	; (800d300 <vPortEnterCritical+0x5c>)
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	b2db      	uxtb	r3, r3
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d00a      	beq.n	800d2f0 <vPortEnterCritical+0x4c>
	__asm volatile
 800d2da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2de:	f383 8811 	msr	BASEPRI, r3
 800d2e2:	f3bf 8f6f 	isb	sy
 800d2e6:	f3bf 8f4f 	dsb	sy
 800d2ea:	603b      	str	r3, [r7, #0]
}
 800d2ec:	bf00      	nop
 800d2ee:	e7fe      	b.n	800d2ee <vPortEnterCritical+0x4a>
	}
}
 800d2f0:	bf00      	nop
 800d2f2:	370c      	adds	r7, #12
 800d2f4:	46bd      	mov	sp, r7
 800d2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2fa:	4770      	bx	lr
 800d2fc:	20000098 	.word	0x20000098
 800d300:	e000ed04 	.word	0xe000ed04

0800d304 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d304:	b480      	push	{r7}
 800d306:	b083      	sub	sp, #12
 800d308:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d30a:	4b12      	ldr	r3, [pc, #72]	; (800d354 <vPortExitCritical+0x50>)
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d10a      	bne.n	800d328 <vPortExitCritical+0x24>
	__asm volatile
 800d312:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d316:	f383 8811 	msr	BASEPRI, r3
 800d31a:	f3bf 8f6f 	isb	sy
 800d31e:	f3bf 8f4f 	dsb	sy
 800d322:	607b      	str	r3, [r7, #4]
}
 800d324:	bf00      	nop
 800d326:	e7fe      	b.n	800d326 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d328:	4b0a      	ldr	r3, [pc, #40]	; (800d354 <vPortExitCritical+0x50>)
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	3b01      	subs	r3, #1
 800d32e:	4a09      	ldr	r2, [pc, #36]	; (800d354 <vPortExitCritical+0x50>)
 800d330:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d332:	4b08      	ldr	r3, [pc, #32]	; (800d354 <vPortExitCritical+0x50>)
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	2b00      	cmp	r3, #0
 800d338:	d105      	bne.n	800d346 <vPortExitCritical+0x42>
 800d33a:	2300      	movs	r3, #0
 800d33c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d33e:	683b      	ldr	r3, [r7, #0]
 800d340:	f383 8811 	msr	BASEPRI, r3
}
 800d344:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d346:	bf00      	nop
 800d348:	370c      	adds	r7, #12
 800d34a:	46bd      	mov	sp, r7
 800d34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d350:	4770      	bx	lr
 800d352:	bf00      	nop
 800d354:	20000098 	.word	0x20000098
	...

0800d360 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d360:	f3ef 8009 	mrs	r0, PSP
 800d364:	f3bf 8f6f 	isb	sy
 800d368:	4b15      	ldr	r3, [pc, #84]	; (800d3c0 <pxCurrentTCBConst>)
 800d36a:	681a      	ldr	r2, [r3, #0]
 800d36c:	f01e 0f10 	tst.w	lr, #16
 800d370:	bf08      	it	eq
 800d372:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d376:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d37a:	6010      	str	r0, [r2, #0]
 800d37c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d380:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d384:	f380 8811 	msr	BASEPRI, r0
 800d388:	f3bf 8f4f 	dsb	sy
 800d38c:	f3bf 8f6f 	isb	sy
 800d390:	f7fe fdfe 	bl	800bf90 <vTaskSwitchContext>
 800d394:	f04f 0000 	mov.w	r0, #0
 800d398:	f380 8811 	msr	BASEPRI, r0
 800d39c:	bc09      	pop	{r0, r3}
 800d39e:	6819      	ldr	r1, [r3, #0]
 800d3a0:	6808      	ldr	r0, [r1, #0]
 800d3a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3a6:	f01e 0f10 	tst.w	lr, #16
 800d3aa:	bf08      	it	eq
 800d3ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d3b0:	f380 8809 	msr	PSP, r0
 800d3b4:	f3bf 8f6f 	isb	sy
 800d3b8:	4770      	bx	lr
 800d3ba:	bf00      	nop
 800d3bc:	f3af 8000 	nop.w

0800d3c0 <pxCurrentTCBConst>:
 800d3c0:	20000aac 	.word	0x20000aac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d3c4:	bf00      	nop
 800d3c6:	bf00      	nop

0800d3c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d3c8:	b580      	push	{r7, lr}
 800d3ca:	b082      	sub	sp, #8
 800d3cc:	af00      	add	r7, sp, #0
	__asm volatile
 800d3ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3d2:	f383 8811 	msr	BASEPRI, r3
 800d3d6:	f3bf 8f6f 	isb	sy
 800d3da:	f3bf 8f4f 	dsb	sy
 800d3de:	607b      	str	r3, [r7, #4]
}
 800d3e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d3e2:	f7fe fd1b 	bl	800be1c <xTaskIncrementTick>
 800d3e6:	4603      	mov	r3, r0
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d003      	beq.n	800d3f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d3ec:	4b06      	ldr	r3, [pc, #24]	; (800d408 <xPortSysTickHandler+0x40>)
 800d3ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d3f2:	601a      	str	r2, [r3, #0]
 800d3f4:	2300      	movs	r3, #0
 800d3f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d3f8:	683b      	ldr	r3, [r7, #0]
 800d3fa:	f383 8811 	msr	BASEPRI, r3
}
 800d3fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d400:	bf00      	nop
 800d402:	3708      	adds	r7, #8
 800d404:	46bd      	mov	sp, r7
 800d406:	bd80      	pop	{r7, pc}
 800d408:	e000ed04 	.word	0xe000ed04

0800d40c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d40c:	b480      	push	{r7}
 800d40e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d410:	4b0b      	ldr	r3, [pc, #44]	; (800d440 <vPortSetupTimerInterrupt+0x34>)
 800d412:	2200      	movs	r2, #0
 800d414:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d416:	4b0b      	ldr	r3, [pc, #44]	; (800d444 <vPortSetupTimerInterrupt+0x38>)
 800d418:	2200      	movs	r2, #0
 800d41a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d41c:	4b0a      	ldr	r3, [pc, #40]	; (800d448 <vPortSetupTimerInterrupt+0x3c>)
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	4a0a      	ldr	r2, [pc, #40]	; (800d44c <vPortSetupTimerInterrupt+0x40>)
 800d422:	fba2 2303 	umull	r2, r3, r2, r3
 800d426:	099b      	lsrs	r3, r3, #6
 800d428:	4a09      	ldr	r2, [pc, #36]	; (800d450 <vPortSetupTimerInterrupt+0x44>)
 800d42a:	3b01      	subs	r3, #1
 800d42c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d42e:	4b04      	ldr	r3, [pc, #16]	; (800d440 <vPortSetupTimerInterrupt+0x34>)
 800d430:	2207      	movs	r2, #7
 800d432:	601a      	str	r2, [r3, #0]
}
 800d434:	bf00      	nop
 800d436:	46bd      	mov	sp, r7
 800d438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d43c:	4770      	bx	lr
 800d43e:	bf00      	nop
 800d440:	e000e010 	.word	0xe000e010
 800d444:	e000e018 	.word	0xe000e018
 800d448:	20000000 	.word	0x20000000
 800d44c:	10624dd3 	.word	0x10624dd3
 800d450:	e000e014 	.word	0xe000e014

0800d454 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d454:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d464 <vPortEnableVFP+0x10>
 800d458:	6801      	ldr	r1, [r0, #0]
 800d45a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d45e:	6001      	str	r1, [r0, #0]
 800d460:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d462:	bf00      	nop
 800d464:	e000ed88 	.word	0xe000ed88

0800d468 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d468:	b480      	push	{r7}
 800d46a:	b085      	sub	sp, #20
 800d46c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d46e:	f3ef 8305 	mrs	r3, IPSR
 800d472:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	2b0f      	cmp	r3, #15
 800d478:	d914      	bls.n	800d4a4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d47a:	4a17      	ldr	r2, [pc, #92]	; (800d4d8 <vPortValidateInterruptPriority+0x70>)
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	4413      	add	r3, r2
 800d480:	781b      	ldrb	r3, [r3, #0]
 800d482:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d484:	4b15      	ldr	r3, [pc, #84]	; (800d4dc <vPortValidateInterruptPriority+0x74>)
 800d486:	781b      	ldrb	r3, [r3, #0]
 800d488:	7afa      	ldrb	r2, [r7, #11]
 800d48a:	429a      	cmp	r2, r3
 800d48c:	d20a      	bcs.n	800d4a4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800d48e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d492:	f383 8811 	msr	BASEPRI, r3
 800d496:	f3bf 8f6f 	isb	sy
 800d49a:	f3bf 8f4f 	dsb	sy
 800d49e:	607b      	str	r3, [r7, #4]
}
 800d4a0:	bf00      	nop
 800d4a2:	e7fe      	b.n	800d4a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d4a4:	4b0e      	ldr	r3, [pc, #56]	; (800d4e0 <vPortValidateInterruptPriority+0x78>)
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d4ac:	4b0d      	ldr	r3, [pc, #52]	; (800d4e4 <vPortValidateInterruptPriority+0x7c>)
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	429a      	cmp	r2, r3
 800d4b2:	d90a      	bls.n	800d4ca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800d4b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4b8:	f383 8811 	msr	BASEPRI, r3
 800d4bc:	f3bf 8f6f 	isb	sy
 800d4c0:	f3bf 8f4f 	dsb	sy
 800d4c4:	603b      	str	r3, [r7, #0]
}
 800d4c6:	bf00      	nop
 800d4c8:	e7fe      	b.n	800d4c8 <vPortValidateInterruptPriority+0x60>
	}
 800d4ca:	bf00      	nop
 800d4cc:	3714      	adds	r7, #20
 800d4ce:	46bd      	mov	sp, r7
 800d4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4d4:	4770      	bx	lr
 800d4d6:	bf00      	nop
 800d4d8:	e000e3f0 	.word	0xe000e3f0
 800d4dc:	200010e0 	.word	0x200010e0
 800d4e0:	e000ed0c 	.word	0xe000ed0c
 800d4e4:	200010e4 	.word	0x200010e4

0800d4e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d4e8:	b580      	push	{r7, lr}
 800d4ea:	b08a      	sub	sp, #40	; 0x28
 800d4ec:	af00      	add	r7, sp, #0
 800d4ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d4f0:	2300      	movs	r3, #0
 800d4f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d4f4:	f7fe fbd6 	bl	800bca4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d4f8:	4b5b      	ldr	r3, [pc, #364]	; (800d668 <pvPortMalloc+0x180>)
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d101      	bne.n	800d504 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d500:	f000 f920 	bl	800d744 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d504:	4b59      	ldr	r3, [pc, #356]	; (800d66c <pvPortMalloc+0x184>)
 800d506:	681a      	ldr	r2, [r3, #0]
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	4013      	ands	r3, r2
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	f040 8093 	bne.w	800d638 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	2b00      	cmp	r3, #0
 800d516:	d01d      	beq.n	800d554 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800d518:	2208      	movs	r2, #8
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	4413      	add	r3, r2
 800d51e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	f003 0307 	and.w	r3, r3, #7
 800d526:	2b00      	cmp	r3, #0
 800d528:	d014      	beq.n	800d554 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	f023 0307 	bic.w	r3, r3, #7
 800d530:	3308      	adds	r3, #8
 800d532:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	f003 0307 	and.w	r3, r3, #7
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d00a      	beq.n	800d554 <pvPortMalloc+0x6c>
	__asm volatile
 800d53e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d542:	f383 8811 	msr	BASEPRI, r3
 800d546:	f3bf 8f6f 	isb	sy
 800d54a:	f3bf 8f4f 	dsb	sy
 800d54e:	617b      	str	r3, [r7, #20]
}
 800d550:	bf00      	nop
 800d552:	e7fe      	b.n	800d552 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	2b00      	cmp	r3, #0
 800d558:	d06e      	beq.n	800d638 <pvPortMalloc+0x150>
 800d55a:	4b45      	ldr	r3, [pc, #276]	; (800d670 <pvPortMalloc+0x188>)
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	687a      	ldr	r2, [r7, #4]
 800d560:	429a      	cmp	r2, r3
 800d562:	d869      	bhi.n	800d638 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d564:	4b43      	ldr	r3, [pc, #268]	; (800d674 <pvPortMalloc+0x18c>)
 800d566:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d568:	4b42      	ldr	r3, [pc, #264]	; (800d674 <pvPortMalloc+0x18c>)
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d56e:	e004      	b.n	800d57a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800d570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d572:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d57a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d57c:	685b      	ldr	r3, [r3, #4]
 800d57e:	687a      	ldr	r2, [r7, #4]
 800d580:	429a      	cmp	r2, r3
 800d582:	d903      	bls.n	800d58c <pvPortMalloc+0xa4>
 800d584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d1f1      	bne.n	800d570 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d58c:	4b36      	ldr	r3, [pc, #216]	; (800d668 <pvPortMalloc+0x180>)
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d592:	429a      	cmp	r2, r3
 800d594:	d050      	beq.n	800d638 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d596:	6a3b      	ldr	r3, [r7, #32]
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	2208      	movs	r2, #8
 800d59c:	4413      	add	r3, r2
 800d59e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d5a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5a2:	681a      	ldr	r2, [r3, #0]
 800d5a4:	6a3b      	ldr	r3, [r7, #32]
 800d5a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d5a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5aa:	685a      	ldr	r2, [r3, #4]
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	1ad2      	subs	r2, r2, r3
 800d5b0:	2308      	movs	r3, #8
 800d5b2:	005b      	lsls	r3, r3, #1
 800d5b4:	429a      	cmp	r2, r3
 800d5b6:	d91f      	bls.n	800d5f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d5b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	4413      	add	r3, r2
 800d5be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d5c0:	69bb      	ldr	r3, [r7, #24]
 800d5c2:	f003 0307 	and.w	r3, r3, #7
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d00a      	beq.n	800d5e0 <pvPortMalloc+0xf8>
	__asm volatile
 800d5ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5ce:	f383 8811 	msr	BASEPRI, r3
 800d5d2:	f3bf 8f6f 	isb	sy
 800d5d6:	f3bf 8f4f 	dsb	sy
 800d5da:	613b      	str	r3, [r7, #16]
}
 800d5dc:	bf00      	nop
 800d5de:	e7fe      	b.n	800d5de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d5e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5e2:	685a      	ldr	r2, [r3, #4]
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	1ad2      	subs	r2, r2, r3
 800d5e8:	69bb      	ldr	r3, [r7, #24]
 800d5ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d5ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5ee:	687a      	ldr	r2, [r7, #4]
 800d5f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d5f2:	69b8      	ldr	r0, [r7, #24]
 800d5f4:	f000 f908 	bl	800d808 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d5f8:	4b1d      	ldr	r3, [pc, #116]	; (800d670 <pvPortMalloc+0x188>)
 800d5fa:	681a      	ldr	r2, [r3, #0]
 800d5fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5fe:	685b      	ldr	r3, [r3, #4]
 800d600:	1ad3      	subs	r3, r2, r3
 800d602:	4a1b      	ldr	r2, [pc, #108]	; (800d670 <pvPortMalloc+0x188>)
 800d604:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d606:	4b1a      	ldr	r3, [pc, #104]	; (800d670 <pvPortMalloc+0x188>)
 800d608:	681a      	ldr	r2, [r3, #0]
 800d60a:	4b1b      	ldr	r3, [pc, #108]	; (800d678 <pvPortMalloc+0x190>)
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	429a      	cmp	r2, r3
 800d610:	d203      	bcs.n	800d61a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d612:	4b17      	ldr	r3, [pc, #92]	; (800d670 <pvPortMalloc+0x188>)
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	4a18      	ldr	r2, [pc, #96]	; (800d678 <pvPortMalloc+0x190>)
 800d618:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d61a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d61c:	685a      	ldr	r2, [r3, #4]
 800d61e:	4b13      	ldr	r3, [pc, #76]	; (800d66c <pvPortMalloc+0x184>)
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	431a      	orrs	r2, r3
 800d624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d626:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d62a:	2200      	movs	r2, #0
 800d62c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d62e:	4b13      	ldr	r3, [pc, #76]	; (800d67c <pvPortMalloc+0x194>)
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	3301      	adds	r3, #1
 800d634:	4a11      	ldr	r2, [pc, #68]	; (800d67c <pvPortMalloc+0x194>)
 800d636:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d638:	f7fe fb42 	bl	800bcc0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d63c:	69fb      	ldr	r3, [r7, #28]
 800d63e:	f003 0307 	and.w	r3, r3, #7
 800d642:	2b00      	cmp	r3, #0
 800d644:	d00a      	beq.n	800d65c <pvPortMalloc+0x174>
	__asm volatile
 800d646:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d64a:	f383 8811 	msr	BASEPRI, r3
 800d64e:	f3bf 8f6f 	isb	sy
 800d652:	f3bf 8f4f 	dsb	sy
 800d656:	60fb      	str	r3, [r7, #12]
}
 800d658:	bf00      	nop
 800d65a:	e7fe      	b.n	800d65a <pvPortMalloc+0x172>
	return pvReturn;
 800d65c:	69fb      	ldr	r3, [r7, #28]
}
 800d65e:	4618      	mov	r0, r3
 800d660:	3728      	adds	r7, #40	; 0x28
 800d662:	46bd      	mov	sp, r7
 800d664:	bd80      	pop	{r7, pc}
 800d666:	bf00      	nop
 800d668:	20004cf0 	.word	0x20004cf0
 800d66c:	20004d04 	.word	0x20004d04
 800d670:	20004cf4 	.word	0x20004cf4
 800d674:	20004ce8 	.word	0x20004ce8
 800d678:	20004cf8 	.word	0x20004cf8
 800d67c:	20004cfc 	.word	0x20004cfc

0800d680 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d680:	b580      	push	{r7, lr}
 800d682:	b086      	sub	sp, #24
 800d684:	af00      	add	r7, sp, #0
 800d686:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d04d      	beq.n	800d72e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d692:	2308      	movs	r3, #8
 800d694:	425b      	negs	r3, r3
 800d696:	697a      	ldr	r2, [r7, #20]
 800d698:	4413      	add	r3, r2
 800d69a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d69c:	697b      	ldr	r3, [r7, #20]
 800d69e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d6a0:	693b      	ldr	r3, [r7, #16]
 800d6a2:	685a      	ldr	r2, [r3, #4]
 800d6a4:	4b24      	ldr	r3, [pc, #144]	; (800d738 <vPortFree+0xb8>)
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	4013      	ands	r3, r2
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d10a      	bne.n	800d6c4 <vPortFree+0x44>
	__asm volatile
 800d6ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6b2:	f383 8811 	msr	BASEPRI, r3
 800d6b6:	f3bf 8f6f 	isb	sy
 800d6ba:	f3bf 8f4f 	dsb	sy
 800d6be:	60fb      	str	r3, [r7, #12]
}
 800d6c0:	bf00      	nop
 800d6c2:	e7fe      	b.n	800d6c2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d6c4:	693b      	ldr	r3, [r7, #16]
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d00a      	beq.n	800d6e2 <vPortFree+0x62>
	__asm volatile
 800d6cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6d0:	f383 8811 	msr	BASEPRI, r3
 800d6d4:	f3bf 8f6f 	isb	sy
 800d6d8:	f3bf 8f4f 	dsb	sy
 800d6dc:	60bb      	str	r3, [r7, #8]
}
 800d6de:	bf00      	nop
 800d6e0:	e7fe      	b.n	800d6e0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d6e2:	693b      	ldr	r3, [r7, #16]
 800d6e4:	685a      	ldr	r2, [r3, #4]
 800d6e6:	4b14      	ldr	r3, [pc, #80]	; (800d738 <vPortFree+0xb8>)
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	4013      	ands	r3, r2
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d01e      	beq.n	800d72e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d6f0:	693b      	ldr	r3, [r7, #16]
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d11a      	bne.n	800d72e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d6f8:	693b      	ldr	r3, [r7, #16]
 800d6fa:	685a      	ldr	r2, [r3, #4]
 800d6fc:	4b0e      	ldr	r3, [pc, #56]	; (800d738 <vPortFree+0xb8>)
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	43db      	mvns	r3, r3
 800d702:	401a      	ands	r2, r3
 800d704:	693b      	ldr	r3, [r7, #16]
 800d706:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d708:	f7fe facc 	bl	800bca4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d70c:	693b      	ldr	r3, [r7, #16]
 800d70e:	685a      	ldr	r2, [r3, #4]
 800d710:	4b0a      	ldr	r3, [pc, #40]	; (800d73c <vPortFree+0xbc>)
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	4413      	add	r3, r2
 800d716:	4a09      	ldr	r2, [pc, #36]	; (800d73c <vPortFree+0xbc>)
 800d718:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d71a:	6938      	ldr	r0, [r7, #16]
 800d71c:	f000 f874 	bl	800d808 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d720:	4b07      	ldr	r3, [pc, #28]	; (800d740 <vPortFree+0xc0>)
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	3301      	adds	r3, #1
 800d726:	4a06      	ldr	r2, [pc, #24]	; (800d740 <vPortFree+0xc0>)
 800d728:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d72a:	f7fe fac9 	bl	800bcc0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d72e:	bf00      	nop
 800d730:	3718      	adds	r7, #24
 800d732:	46bd      	mov	sp, r7
 800d734:	bd80      	pop	{r7, pc}
 800d736:	bf00      	nop
 800d738:	20004d04 	.word	0x20004d04
 800d73c:	20004cf4 	.word	0x20004cf4
 800d740:	20004d00 	.word	0x20004d00

0800d744 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d744:	b480      	push	{r7}
 800d746:	b085      	sub	sp, #20
 800d748:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d74a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800d74e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d750:	4b27      	ldr	r3, [pc, #156]	; (800d7f0 <prvHeapInit+0xac>)
 800d752:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	f003 0307 	and.w	r3, r3, #7
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d00c      	beq.n	800d778 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	3307      	adds	r3, #7
 800d762:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	f023 0307 	bic.w	r3, r3, #7
 800d76a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d76c:	68ba      	ldr	r2, [r7, #8]
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	1ad3      	subs	r3, r2, r3
 800d772:	4a1f      	ldr	r2, [pc, #124]	; (800d7f0 <prvHeapInit+0xac>)
 800d774:	4413      	add	r3, r2
 800d776:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d77c:	4a1d      	ldr	r2, [pc, #116]	; (800d7f4 <prvHeapInit+0xb0>)
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d782:	4b1c      	ldr	r3, [pc, #112]	; (800d7f4 <prvHeapInit+0xb0>)
 800d784:	2200      	movs	r2, #0
 800d786:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	68ba      	ldr	r2, [r7, #8]
 800d78c:	4413      	add	r3, r2
 800d78e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d790:	2208      	movs	r2, #8
 800d792:	68fb      	ldr	r3, [r7, #12]
 800d794:	1a9b      	subs	r3, r3, r2
 800d796:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	f023 0307 	bic.w	r3, r3, #7
 800d79e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	4a15      	ldr	r2, [pc, #84]	; (800d7f8 <prvHeapInit+0xb4>)
 800d7a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d7a6:	4b14      	ldr	r3, [pc, #80]	; (800d7f8 <prvHeapInit+0xb4>)
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	2200      	movs	r2, #0
 800d7ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d7ae:	4b12      	ldr	r3, [pc, #72]	; (800d7f8 <prvHeapInit+0xb4>)
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	2200      	movs	r2, #0
 800d7b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d7ba:	683b      	ldr	r3, [r7, #0]
 800d7bc:	68fa      	ldr	r2, [r7, #12]
 800d7be:	1ad2      	subs	r2, r2, r3
 800d7c0:	683b      	ldr	r3, [r7, #0]
 800d7c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d7c4:	4b0c      	ldr	r3, [pc, #48]	; (800d7f8 <prvHeapInit+0xb4>)
 800d7c6:	681a      	ldr	r2, [r3, #0]
 800d7c8:	683b      	ldr	r3, [r7, #0]
 800d7ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d7cc:	683b      	ldr	r3, [r7, #0]
 800d7ce:	685b      	ldr	r3, [r3, #4]
 800d7d0:	4a0a      	ldr	r2, [pc, #40]	; (800d7fc <prvHeapInit+0xb8>)
 800d7d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d7d4:	683b      	ldr	r3, [r7, #0]
 800d7d6:	685b      	ldr	r3, [r3, #4]
 800d7d8:	4a09      	ldr	r2, [pc, #36]	; (800d800 <prvHeapInit+0xbc>)
 800d7da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d7dc:	4b09      	ldr	r3, [pc, #36]	; (800d804 <prvHeapInit+0xc0>)
 800d7de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d7e2:	601a      	str	r2, [r3, #0]
}
 800d7e4:	bf00      	nop
 800d7e6:	3714      	adds	r7, #20
 800d7e8:	46bd      	mov	sp, r7
 800d7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ee:	4770      	bx	lr
 800d7f0:	200010e8 	.word	0x200010e8
 800d7f4:	20004ce8 	.word	0x20004ce8
 800d7f8:	20004cf0 	.word	0x20004cf0
 800d7fc:	20004cf8 	.word	0x20004cf8
 800d800:	20004cf4 	.word	0x20004cf4
 800d804:	20004d04 	.word	0x20004d04

0800d808 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d808:	b480      	push	{r7}
 800d80a:	b085      	sub	sp, #20
 800d80c:	af00      	add	r7, sp, #0
 800d80e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d810:	4b28      	ldr	r3, [pc, #160]	; (800d8b4 <prvInsertBlockIntoFreeList+0xac>)
 800d812:	60fb      	str	r3, [r7, #12]
 800d814:	e002      	b.n	800d81c <prvInsertBlockIntoFreeList+0x14>
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	60fb      	str	r3, [r7, #12]
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	687a      	ldr	r2, [r7, #4]
 800d822:	429a      	cmp	r2, r3
 800d824:	d8f7      	bhi.n	800d816 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d82a:	68fb      	ldr	r3, [r7, #12]
 800d82c:	685b      	ldr	r3, [r3, #4]
 800d82e:	68ba      	ldr	r2, [r7, #8]
 800d830:	4413      	add	r3, r2
 800d832:	687a      	ldr	r2, [r7, #4]
 800d834:	429a      	cmp	r2, r3
 800d836:	d108      	bne.n	800d84a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	685a      	ldr	r2, [r3, #4]
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	685b      	ldr	r3, [r3, #4]
 800d840:	441a      	add	r2, r3
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d846:	68fb      	ldr	r3, [r7, #12]
 800d848:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	685b      	ldr	r3, [r3, #4]
 800d852:	68ba      	ldr	r2, [r7, #8]
 800d854:	441a      	add	r2, r3
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	429a      	cmp	r2, r3
 800d85c:	d118      	bne.n	800d890 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	681a      	ldr	r2, [r3, #0]
 800d862:	4b15      	ldr	r3, [pc, #84]	; (800d8b8 <prvInsertBlockIntoFreeList+0xb0>)
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	429a      	cmp	r2, r3
 800d868:	d00d      	beq.n	800d886 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	685a      	ldr	r2, [r3, #4]
 800d86e:	68fb      	ldr	r3, [r7, #12]
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	685b      	ldr	r3, [r3, #4]
 800d874:	441a      	add	r2, r3
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	681a      	ldr	r2, [r3, #0]
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	601a      	str	r2, [r3, #0]
 800d884:	e008      	b.n	800d898 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d886:	4b0c      	ldr	r3, [pc, #48]	; (800d8b8 <prvInsertBlockIntoFreeList+0xb0>)
 800d888:	681a      	ldr	r2, [r3, #0]
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	601a      	str	r2, [r3, #0]
 800d88e:	e003      	b.n	800d898 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	681a      	ldr	r2, [r3, #0]
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d898:	68fa      	ldr	r2, [r7, #12]
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	429a      	cmp	r2, r3
 800d89e:	d002      	beq.n	800d8a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	687a      	ldr	r2, [r7, #4]
 800d8a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d8a6:	bf00      	nop
 800d8a8:	3714      	adds	r7, #20
 800d8aa:	46bd      	mov	sp, r7
 800d8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8b0:	4770      	bx	lr
 800d8b2:	bf00      	nop
 800d8b4:	20004ce8 	.word	0x20004ce8
 800d8b8:	20004cf0 	.word	0x20004cf0

0800d8bc <rx_queue_put>:
static uint32_t wr_i = 0;

extern TaskHandle_t RxTask_handle;


inline void rx_queue_put(uint8_t data){
 800d8bc:	b480      	push	{r7}
 800d8be:	b083      	sub	sp, #12
 800d8c0:	af00      	add	r7, sp, #0
 800d8c2:	4603      	mov	r3, r0
 800d8c4:	71fb      	strb	r3, [r7, #7]
	rx_buffer[wr_i] = data;
 800d8c6:	4b0c      	ldr	r3, [pc, #48]	; (800d8f8 <rx_queue_put+0x3c>)
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	490c      	ldr	r1, [pc, #48]	; (800d8fc <rx_queue_put+0x40>)
 800d8cc:	79fa      	ldrb	r2, [r7, #7]
 800d8ce:	54ca      	strb	r2, [r1, r3]
	INCREMENT_CLAMP(wr_i, RX_BUFFER_SIZE);
 800d8d0:	4b09      	ldr	r3, [pc, #36]	; (800d8f8 <rx_queue_put+0x3c>)
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	3301      	adds	r3, #1
 800d8d6:	4a08      	ldr	r2, [pc, #32]	; (800d8f8 <rx_queue_put+0x3c>)
 800d8d8:	6013      	str	r3, [r2, #0]
 800d8da:	4b07      	ldr	r3, [pc, #28]	; (800d8f8 <rx_queue_put+0x3c>)
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d8e2:	d302      	bcc.n	800d8ea <rx_queue_put+0x2e>
 800d8e4:	4b04      	ldr	r3, [pc, #16]	; (800d8f8 <rx_queue_put+0x3c>)
 800d8e6:	2200      	movs	r2, #0
 800d8e8:	601a      	str	r2, [r3, #0]
}
 800d8ea:	bf00      	nop
 800d8ec:	370c      	adds	r7, #12
 800d8ee:	46bd      	mov	sp, r7
 800d8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8f4:	4770      	bx	lr
 800d8f6:	bf00      	nop
 800d8f8:	2000510c 	.word	0x2000510c
 800d8fc:	20004d08 	.word	0x20004d08

0800d900 <count>:
	*out = rx_buffer[rd_i];
	INCREMENT_CLAMP(rd_i, RX_BUFFER_SIZE);
	return 1;
}

inline uint32_t count(){
 800d900:	b480      	push	{r7}
 800d902:	af00      	add	r7, sp, #0
	if(rd_i > wr_i) return wr_i - rd_i + RX_BUFFER_SIZE;
 800d904:	4b0b      	ldr	r3, [pc, #44]	; (800d934 <count+0x34>)
 800d906:	681a      	ldr	r2, [r3, #0]
 800d908:	4b0b      	ldr	r3, [pc, #44]	; (800d938 <count+0x38>)
 800d90a:	681b      	ldr	r3, [r3, #0]
 800d90c:	429a      	cmp	r2, r3
 800d90e:	d907      	bls.n	800d920 <count+0x20>
 800d910:	4b09      	ldr	r3, [pc, #36]	; (800d938 <count+0x38>)
 800d912:	681a      	ldr	r2, [r3, #0]
 800d914:	4b07      	ldr	r3, [pc, #28]	; (800d934 <count+0x34>)
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	1ad3      	subs	r3, r2, r3
 800d91a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d91e:	e004      	b.n	800d92a <count+0x2a>
	return wr_i - rd_i;
 800d920:	4b05      	ldr	r3, [pc, #20]	; (800d938 <count+0x38>)
 800d922:	681a      	ldr	r2, [r3, #0]
 800d924:	4b03      	ldr	r3, [pc, #12]	; (800d934 <count+0x34>)
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	1ad3      	subs	r3, r2, r3
}
 800d92a:	4618      	mov	r0, r3
 800d92c:	46bd      	mov	sp, r7
 800d92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d932:	4770      	bx	lr
 800d934:	20005108 	.word	0x20005108
 800d938:	2000510c 	.word	0x2000510c

0800d93c <getTaskHandle>:

inline TaskHandle_t getTaskHandle(){
 800d93c:	b480      	push	{r7}
 800d93e:	af00      	add	r7, sp, #0
	return RxTask_handle;
 800d940:	4b03      	ldr	r3, [pc, #12]	; (800d950 <getTaskHandle+0x14>)
 800d942:	681b      	ldr	r3, [r3, #0]
}
 800d944:	4618      	mov	r0, r3
 800d946:	46bd      	mov	sp, r7
 800d948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d94c:	4770      	bx	lr
 800d94e:	bf00      	nop
 800d950:	200002a8 	.word	0x200002a8

0800d954 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d954:	b580      	push	{r7, lr}
 800d956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800d958:	2200      	movs	r2, #0
 800d95a:	4912      	ldr	r1, [pc, #72]	; (800d9a4 <MX_USB_DEVICE_Init+0x50>)
 800d95c:	4812      	ldr	r0, [pc, #72]	; (800d9a8 <MX_USB_DEVICE_Init+0x54>)
 800d95e:	f7fb fb6b 	bl	8009038 <USBD_Init>
 800d962:	4603      	mov	r3, r0
 800d964:	2b00      	cmp	r3, #0
 800d966:	d001      	beq.n	800d96c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800d968:	f7f3 fe40 	bl	80015ec <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800d96c:	490f      	ldr	r1, [pc, #60]	; (800d9ac <MX_USB_DEVICE_Init+0x58>)
 800d96e:	480e      	ldr	r0, [pc, #56]	; (800d9a8 <MX_USB_DEVICE_Init+0x54>)
 800d970:	f7fb fb92 	bl	8009098 <USBD_RegisterClass>
 800d974:	4603      	mov	r3, r0
 800d976:	2b00      	cmp	r3, #0
 800d978:	d001      	beq.n	800d97e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800d97a:	f7f3 fe37 	bl	80015ec <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800d97e:	490c      	ldr	r1, [pc, #48]	; (800d9b0 <MX_USB_DEVICE_Init+0x5c>)
 800d980:	4809      	ldr	r0, [pc, #36]	; (800d9a8 <MX_USB_DEVICE_Init+0x54>)
 800d982:	f7fb fa83 	bl	8008e8c <USBD_CDC_RegisterInterface>
 800d986:	4603      	mov	r3, r0
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d001      	beq.n	800d990 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800d98c:	f7f3 fe2e 	bl	80015ec <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d990:	4805      	ldr	r0, [pc, #20]	; (800d9a8 <MX_USB_DEVICE_Init+0x54>)
 800d992:	f7fb fbb7 	bl	8009104 <USBD_Start>
 800d996:	4603      	mov	r3, r0
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d001      	beq.n	800d9a0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800d99c:	f7f3 fe26 	bl	80015ec <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d9a0:	bf00      	nop
 800d9a2:	bd80      	pop	{r7, pc}
 800d9a4:	200000b0 	.word	0x200000b0
 800d9a8:	20005110 	.word	0x20005110
 800d9ac:	20000018 	.word	0x20000018
 800d9b0:	2000009c 	.word	0x2000009c

0800d9b4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d9b4:	b580      	push	{r7, lr}
 800d9b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d9b8:	2200      	movs	r2, #0
 800d9ba:	4905      	ldr	r1, [pc, #20]	; (800d9d0 <CDC_Init_FS+0x1c>)
 800d9bc:	4805      	ldr	r0, [pc, #20]	; (800d9d4 <CDC_Init_FS+0x20>)
 800d9be:	f7fb fa7f 	bl	8008ec0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d9c2:	4905      	ldr	r1, [pc, #20]	; (800d9d8 <CDC_Init_FS+0x24>)
 800d9c4:	4803      	ldr	r0, [pc, #12]	; (800d9d4 <CDC_Init_FS+0x20>)
 800d9c6:	f7fb fa9d 	bl	8008f04 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d9ca:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d9cc:	4618      	mov	r0, r3
 800d9ce:	bd80      	pop	{r7, pc}
 800d9d0:	20005bec 	.word	0x20005bec
 800d9d4:	20005110 	.word	0x20005110
 800d9d8:	200053ec 	.word	0x200053ec

0800d9dc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d9dc:	b480      	push	{r7}
 800d9de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d9e0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d9e2:	4618      	mov	r0, r3
 800d9e4:	46bd      	mov	sp, r7
 800d9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ea:	4770      	bx	lr

0800d9ec <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d9ec:	b480      	push	{r7}
 800d9ee:	b083      	sub	sp, #12
 800d9f0:	af00      	add	r7, sp, #0
 800d9f2:	4603      	mov	r3, r0
 800d9f4:	6039      	str	r1, [r7, #0]
 800d9f6:	71fb      	strb	r3, [r7, #7]
 800d9f8:	4613      	mov	r3, r2
 800d9fa:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800d9fc:	79fb      	ldrb	r3, [r7, #7]
 800d9fe:	2b23      	cmp	r3, #35	; 0x23
 800da00:	d84a      	bhi.n	800da98 <CDC_Control_FS+0xac>
 800da02:	a201      	add	r2, pc, #4	; (adr r2, 800da08 <CDC_Control_FS+0x1c>)
 800da04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da08:	0800da99 	.word	0x0800da99
 800da0c:	0800da99 	.word	0x0800da99
 800da10:	0800da99 	.word	0x0800da99
 800da14:	0800da99 	.word	0x0800da99
 800da18:	0800da99 	.word	0x0800da99
 800da1c:	0800da99 	.word	0x0800da99
 800da20:	0800da99 	.word	0x0800da99
 800da24:	0800da99 	.word	0x0800da99
 800da28:	0800da99 	.word	0x0800da99
 800da2c:	0800da99 	.word	0x0800da99
 800da30:	0800da99 	.word	0x0800da99
 800da34:	0800da99 	.word	0x0800da99
 800da38:	0800da99 	.word	0x0800da99
 800da3c:	0800da99 	.word	0x0800da99
 800da40:	0800da99 	.word	0x0800da99
 800da44:	0800da99 	.word	0x0800da99
 800da48:	0800da99 	.word	0x0800da99
 800da4c:	0800da99 	.word	0x0800da99
 800da50:	0800da99 	.word	0x0800da99
 800da54:	0800da99 	.word	0x0800da99
 800da58:	0800da99 	.word	0x0800da99
 800da5c:	0800da99 	.word	0x0800da99
 800da60:	0800da99 	.word	0x0800da99
 800da64:	0800da99 	.word	0x0800da99
 800da68:	0800da99 	.word	0x0800da99
 800da6c:	0800da99 	.word	0x0800da99
 800da70:	0800da99 	.word	0x0800da99
 800da74:	0800da99 	.word	0x0800da99
 800da78:	0800da99 	.word	0x0800da99
 800da7c:	0800da99 	.word	0x0800da99
 800da80:	0800da99 	.word	0x0800da99
 800da84:	0800da99 	.word	0x0800da99
 800da88:	0800da99 	.word	0x0800da99
 800da8c:	0800da99 	.word	0x0800da99
 800da90:	0800da99 	.word	0x0800da99
 800da94:	0800da99 	.word	0x0800da99
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800da98:	bf00      	nop
  }

  return (USBD_OK);
 800da9a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800da9c:	4618      	mov	r0, r3
 800da9e:	370c      	adds	r7, #12
 800daa0:	46bd      	mov	sp, r7
 800daa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daa6:	4770      	bx	lr

0800daa8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800daa8:	b580      	push	{r7, lr}
 800daaa:	b082      	sub	sp, #8
 800daac:	af00      	add	r7, sp, #0
 800daae:	6078      	str	r0, [r7, #4]
 800dab0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800dab2:	6879      	ldr	r1, [r7, #4]
 800dab4:	4805      	ldr	r0, [pc, #20]	; (800dacc <CDC_Receive_FS+0x24>)
 800dab6:	f7fb fa25 	bl	8008f04 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800daba:	4804      	ldr	r0, [pc, #16]	; (800dacc <CDC_Receive_FS+0x24>)
 800dabc:	f7fb fa86 	bl	8008fcc <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800dac0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800dac2:	4618      	mov	r0, r3
 800dac4:	3708      	adds	r7, #8
 800dac6:	46bd      	mov	sp, r7
 800dac8:	bd80      	pop	{r7, pc}
 800daca:	bf00      	nop
 800dacc:	20005110 	.word	0x20005110

0800dad0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800dad0:	b580      	push	{r7, lr}
 800dad2:	b084      	sub	sp, #16
 800dad4:	af00      	add	r7, sp, #0
 800dad6:	6078      	str	r0, [r7, #4]
 800dad8:	460b      	mov	r3, r1
 800dada:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800dadc:	2300      	movs	r3, #0
 800dade:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800dae0:	4b0d      	ldr	r3, [pc, #52]	; (800db18 <CDC_Transmit_FS+0x48>)
 800dae2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dae6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800dae8:	68bb      	ldr	r3, [r7, #8]
 800daea:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d001      	beq.n	800daf6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800daf2:	2301      	movs	r3, #1
 800daf4:	e00b      	b.n	800db0e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800daf6:	887b      	ldrh	r3, [r7, #2]
 800daf8:	461a      	mov	r2, r3
 800dafa:	6879      	ldr	r1, [r7, #4]
 800dafc:	4806      	ldr	r0, [pc, #24]	; (800db18 <CDC_Transmit_FS+0x48>)
 800dafe:	f7fb f9df 	bl	8008ec0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800db02:	4805      	ldr	r0, [pc, #20]	; (800db18 <CDC_Transmit_FS+0x48>)
 800db04:	f7fb fa1c 	bl	8008f40 <USBD_CDC_TransmitPacket>
 800db08:	4603      	mov	r3, r0
 800db0a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800db0c:	7bfb      	ldrb	r3, [r7, #15]
}
 800db0e:	4618      	mov	r0, r3
 800db10:	3710      	adds	r7, #16
 800db12:	46bd      	mov	sp, r7
 800db14:	bd80      	pop	{r7, pc}
 800db16:	bf00      	nop
 800db18:	20005110 	.word	0x20005110

0800db1c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800db1c:	b480      	push	{r7}
 800db1e:	b087      	sub	sp, #28
 800db20:	af00      	add	r7, sp, #0
 800db22:	60f8      	str	r0, [r7, #12]
 800db24:	60b9      	str	r1, [r7, #8]
 800db26:	4613      	mov	r3, r2
 800db28:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800db2a:	2300      	movs	r3, #0
 800db2c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800db2e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800db32:	4618      	mov	r0, r3
 800db34:	371c      	adds	r7, #28
 800db36:	46bd      	mov	sp, r7
 800db38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db3c:	4770      	bx	lr
	...

0800db40 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800db40:	b480      	push	{r7}
 800db42:	b083      	sub	sp, #12
 800db44:	af00      	add	r7, sp, #0
 800db46:	4603      	mov	r3, r0
 800db48:	6039      	str	r1, [r7, #0]
 800db4a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800db4c:	683b      	ldr	r3, [r7, #0]
 800db4e:	2212      	movs	r2, #18
 800db50:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800db52:	4b03      	ldr	r3, [pc, #12]	; (800db60 <USBD_FS_DeviceDescriptor+0x20>)
}
 800db54:	4618      	mov	r0, r3
 800db56:	370c      	adds	r7, #12
 800db58:	46bd      	mov	sp, r7
 800db5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db5e:	4770      	bx	lr
 800db60:	200000cc 	.word	0x200000cc

0800db64 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800db64:	b480      	push	{r7}
 800db66:	b083      	sub	sp, #12
 800db68:	af00      	add	r7, sp, #0
 800db6a:	4603      	mov	r3, r0
 800db6c:	6039      	str	r1, [r7, #0]
 800db6e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800db70:	683b      	ldr	r3, [r7, #0]
 800db72:	2204      	movs	r2, #4
 800db74:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800db76:	4b03      	ldr	r3, [pc, #12]	; (800db84 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800db78:	4618      	mov	r0, r3
 800db7a:	370c      	adds	r7, #12
 800db7c:	46bd      	mov	sp, r7
 800db7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db82:	4770      	bx	lr
 800db84:	200000e0 	.word	0x200000e0

0800db88 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800db88:	b580      	push	{r7, lr}
 800db8a:	b082      	sub	sp, #8
 800db8c:	af00      	add	r7, sp, #0
 800db8e:	4603      	mov	r3, r0
 800db90:	6039      	str	r1, [r7, #0]
 800db92:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800db94:	79fb      	ldrb	r3, [r7, #7]
 800db96:	2b00      	cmp	r3, #0
 800db98:	d105      	bne.n	800dba6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800db9a:	683a      	ldr	r2, [r7, #0]
 800db9c:	4907      	ldr	r1, [pc, #28]	; (800dbbc <USBD_FS_ProductStrDescriptor+0x34>)
 800db9e:	4808      	ldr	r0, [pc, #32]	; (800dbc0 <USBD_FS_ProductStrDescriptor+0x38>)
 800dba0:	f7fc fc5c 	bl	800a45c <USBD_GetString>
 800dba4:	e004      	b.n	800dbb0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800dba6:	683a      	ldr	r2, [r7, #0]
 800dba8:	4904      	ldr	r1, [pc, #16]	; (800dbbc <USBD_FS_ProductStrDescriptor+0x34>)
 800dbaa:	4805      	ldr	r0, [pc, #20]	; (800dbc0 <USBD_FS_ProductStrDescriptor+0x38>)
 800dbac:	f7fc fc56 	bl	800a45c <USBD_GetString>
  }
  return USBD_StrDesc;
 800dbb0:	4b02      	ldr	r3, [pc, #8]	; (800dbbc <USBD_FS_ProductStrDescriptor+0x34>)
}
 800dbb2:	4618      	mov	r0, r3
 800dbb4:	3708      	adds	r7, #8
 800dbb6:	46bd      	mov	sp, r7
 800dbb8:	bd80      	pop	{r7, pc}
 800dbba:	bf00      	nop
 800dbbc:	200063ec 	.word	0x200063ec
 800dbc0:	0800e610 	.word	0x0800e610

0800dbc4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dbc4:	b580      	push	{r7, lr}
 800dbc6:	b082      	sub	sp, #8
 800dbc8:	af00      	add	r7, sp, #0
 800dbca:	4603      	mov	r3, r0
 800dbcc:	6039      	str	r1, [r7, #0]
 800dbce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800dbd0:	683a      	ldr	r2, [r7, #0]
 800dbd2:	4904      	ldr	r1, [pc, #16]	; (800dbe4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800dbd4:	4804      	ldr	r0, [pc, #16]	; (800dbe8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800dbd6:	f7fc fc41 	bl	800a45c <USBD_GetString>
  return USBD_StrDesc;
 800dbda:	4b02      	ldr	r3, [pc, #8]	; (800dbe4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800dbdc:	4618      	mov	r0, r3
 800dbde:	3708      	adds	r7, #8
 800dbe0:	46bd      	mov	sp, r7
 800dbe2:	bd80      	pop	{r7, pc}
 800dbe4:	200063ec 	.word	0x200063ec
 800dbe8:	0800e628 	.word	0x0800e628

0800dbec <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dbec:	b580      	push	{r7, lr}
 800dbee:	b082      	sub	sp, #8
 800dbf0:	af00      	add	r7, sp, #0
 800dbf2:	4603      	mov	r3, r0
 800dbf4:	6039      	str	r1, [r7, #0]
 800dbf6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800dbf8:	683b      	ldr	r3, [r7, #0]
 800dbfa:	221a      	movs	r2, #26
 800dbfc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800dbfe:	f000 f843 	bl	800dc88 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800dc02:	4b02      	ldr	r3, [pc, #8]	; (800dc0c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800dc04:	4618      	mov	r0, r3
 800dc06:	3708      	adds	r7, #8
 800dc08:	46bd      	mov	sp, r7
 800dc0a:	bd80      	pop	{r7, pc}
 800dc0c:	200000e4 	.word	0x200000e4

0800dc10 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dc10:	b580      	push	{r7, lr}
 800dc12:	b082      	sub	sp, #8
 800dc14:	af00      	add	r7, sp, #0
 800dc16:	4603      	mov	r3, r0
 800dc18:	6039      	str	r1, [r7, #0]
 800dc1a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800dc1c:	79fb      	ldrb	r3, [r7, #7]
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d105      	bne.n	800dc2e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800dc22:	683a      	ldr	r2, [r7, #0]
 800dc24:	4907      	ldr	r1, [pc, #28]	; (800dc44 <USBD_FS_ConfigStrDescriptor+0x34>)
 800dc26:	4808      	ldr	r0, [pc, #32]	; (800dc48 <USBD_FS_ConfigStrDescriptor+0x38>)
 800dc28:	f7fc fc18 	bl	800a45c <USBD_GetString>
 800dc2c:	e004      	b.n	800dc38 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800dc2e:	683a      	ldr	r2, [r7, #0]
 800dc30:	4904      	ldr	r1, [pc, #16]	; (800dc44 <USBD_FS_ConfigStrDescriptor+0x34>)
 800dc32:	4805      	ldr	r0, [pc, #20]	; (800dc48 <USBD_FS_ConfigStrDescriptor+0x38>)
 800dc34:	f7fc fc12 	bl	800a45c <USBD_GetString>
  }
  return USBD_StrDesc;
 800dc38:	4b02      	ldr	r3, [pc, #8]	; (800dc44 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800dc3a:	4618      	mov	r0, r3
 800dc3c:	3708      	adds	r7, #8
 800dc3e:	46bd      	mov	sp, r7
 800dc40:	bd80      	pop	{r7, pc}
 800dc42:	bf00      	nop
 800dc44:	200063ec 	.word	0x200063ec
 800dc48:	0800e63c 	.word	0x0800e63c

0800dc4c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dc4c:	b580      	push	{r7, lr}
 800dc4e:	b082      	sub	sp, #8
 800dc50:	af00      	add	r7, sp, #0
 800dc52:	4603      	mov	r3, r0
 800dc54:	6039      	str	r1, [r7, #0]
 800dc56:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800dc58:	79fb      	ldrb	r3, [r7, #7]
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d105      	bne.n	800dc6a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800dc5e:	683a      	ldr	r2, [r7, #0]
 800dc60:	4907      	ldr	r1, [pc, #28]	; (800dc80 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800dc62:	4808      	ldr	r0, [pc, #32]	; (800dc84 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800dc64:	f7fc fbfa 	bl	800a45c <USBD_GetString>
 800dc68:	e004      	b.n	800dc74 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800dc6a:	683a      	ldr	r2, [r7, #0]
 800dc6c:	4904      	ldr	r1, [pc, #16]	; (800dc80 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800dc6e:	4805      	ldr	r0, [pc, #20]	; (800dc84 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800dc70:	f7fc fbf4 	bl	800a45c <USBD_GetString>
  }
  return USBD_StrDesc;
 800dc74:	4b02      	ldr	r3, [pc, #8]	; (800dc80 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800dc76:	4618      	mov	r0, r3
 800dc78:	3708      	adds	r7, #8
 800dc7a:	46bd      	mov	sp, r7
 800dc7c:	bd80      	pop	{r7, pc}
 800dc7e:	bf00      	nop
 800dc80:	200063ec 	.word	0x200063ec
 800dc84:	0800e648 	.word	0x0800e648

0800dc88 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800dc88:	b580      	push	{r7, lr}
 800dc8a:	b084      	sub	sp, #16
 800dc8c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800dc8e:	4b0f      	ldr	r3, [pc, #60]	; (800dccc <Get_SerialNum+0x44>)
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800dc94:	4b0e      	ldr	r3, [pc, #56]	; (800dcd0 <Get_SerialNum+0x48>)
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800dc9a:	4b0e      	ldr	r3, [pc, #56]	; (800dcd4 <Get_SerialNum+0x4c>)
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800dca0:	68fa      	ldr	r2, [r7, #12]
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	4413      	add	r3, r2
 800dca6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d009      	beq.n	800dcc2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800dcae:	2208      	movs	r2, #8
 800dcb0:	4909      	ldr	r1, [pc, #36]	; (800dcd8 <Get_SerialNum+0x50>)
 800dcb2:	68f8      	ldr	r0, [r7, #12]
 800dcb4:	f000 f814 	bl	800dce0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800dcb8:	2204      	movs	r2, #4
 800dcba:	4908      	ldr	r1, [pc, #32]	; (800dcdc <Get_SerialNum+0x54>)
 800dcbc:	68b8      	ldr	r0, [r7, #8]
 800dcbe:	f000 f80f 	bl	800dce0 <IntToUnicode>
  }
}
 800dcc2:	bf00      	nop
 800dcc4:	3710      	adds	r7, #16
 800dcc6:	46bd      	mov	sp, r7
 800dcc8:	bd80      	pop	{r7, pc}
 800dcca:	bf00      	nop
 800dccc:	1fff7a10 	.word	0x1fff7a10
 800dcd0:	1fff7a14 	.word	0x1fff7a14
 800dcd4:	1fff7a18 	.word	0x1fff7a18
 800dcd8:	200000e6 	.word	0x200000e6
 800dcdc:	200000f6 	.word	0x200000f6

0800dce0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800dce0:	b480      	push	{r7}
 800dce2:	b087      	sub	sp, #28
 800dce4:	af00      	add	r7, sp, #0
 800dce6:	60f8      	str	r0, [r7, #12]
 800dce8:	60b9      	str	r1, [r7, #8]
 800dcea:	4613      	mov	r3, r2
 800dcec:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800dcee:	2300      	movs	r3, #0
 800dcf0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800dcf2:	2300      	movs	r3, #0
 800dcf4:	75fb      	strb	r3, [r7, #23]
 800dcf6:	e027      	b.n	800dd48 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800dcf8:	68fb      	ldr	r3, [r7, #12]
 800dcfa:	0f1b      	lsrs	r3, r3, #28
 800dcfc:	2b09      	cmp	r3, #9
 800dcfe:	d80b      	bhi.n	800dd18 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	0f1b      	lsrs	r3, r3, #28
 800dd04:	b2da      	uxtb	r2, r3
 800dd06:	7dfb      	ldrb	r3, [r7, #23]
 800dd08:	005b      	lsls	r3, r3, #1
 800dd0a:	4619      	mov	r1, r3
 800dd0c:	68bb      	ldr	r3, [r7, #8]
 800dd0e:	440b      	add	r3, r1
 800dd10:	3230      	adds	r2, #48	; 0x30
 800dd12:	b2d2      	uxtb	r2, r2
 800dd14:	701a      	strb	r2, [r3, #0]
 800dd16:	e00a      	b.n	800dd2e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	0f1b      	lsrs	r3, r3, #28
 800dd1c:	b2da      	uxtb	r2, r3
 800dd1e:	7dfb      	ldrb	r3, [r7, #23]
 800dd20:	005b      	lsls	r3, r3, #1
 800dd22:	4619      	mov	r1, r3
 800dd24:	68bb      	ldr	r3, [r7, #8]
 800dd26:	440b      	add	r3, r1
 800dd28:	3237      	adds	r2, #55	; 0x37
 800dd2a:	b2d2      	uxtb	r2, r2
 800dd2c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	011b      	lsls	r3, r3, #4
 800dd32:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800dd34:	7dfb      	ldrb	r3, [r7, #23]
 800dd36:	005b      	lsls	r3, r3, #1
 800dd38:	3301      	adds	r3, #1
 800dd3a:	68ba      	ldr	r2, [r7, #8]
 800dd3c:	4413      	add	r3, r2
 800dd3e:	2200      	movs	r2, #0
 800dd40:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800dd42:	7dfb      	ldrb	r3, [r7, #23]
 800dd44:	3301      	adds	r3, #1
 800dd46:	75fb      	strb	r3, [r7, #23]
 800dd48:	7dfa      	ldrb	r2, [r7, #23]
 800dd4a:	79fb      	ldrb	r3, [r7, #7]
 800dd4c:	429a      	cmp	r2, r3
 800dd4e:	d3d3      	bcc.n	800dcf8 <IntToUnicode+0x18>
  }
}
 800dd50:	bf00      	nop
 800dd52:	bf00      	nop
 800dd54:	371c      	adds	r7, #28
 800dd56:	46bd      	mov	sp, r7
 800dd58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd5c:	4770      	bx	lr
	...

0800dd60 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800dd60:	b580      	push	{r7, lr}
 800dd62:	b08a      	sub	sp, #40	; 0x28
 800dd64:	af00      	add	r7, sp, #0
 800dd66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800dd68:	f107 0314 	add.w	r3, r7, #20
 800dd6c:	2200      	movs	r2, #0
 800dd6e:	601a      	str	r2, [r3, #0]
 800dd70:	605a      	str	r2, [r3, #4]
 800dd72:	609a      	str	r2, [r3, #8]
 800dd74:	60da      	str	r2, [r3, #12]
 800dd76:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800dd80:	d147      	bne.n	800de12 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800dd82:	2300      	movs	r3, #0
 800dd84:	613b      	str	r3, [r7, #16]
 800dd86:	4b25      	ldr	r3, [pc, #148]	; (800de1c <HAL_PCD_MspInit+0xbc>)
 800dd88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd8a:	4a24      	ldr	r2, [pc, #144]	; (800de1c <HAL_PCD_MspInit+0xbc>)
 800dd8c:	f043 0301 	orr.w	r3, r3, #1
 800dd90:	6313      	str	r3, [r2, #48]	; 0x30
 800dd92:	4b22      	ldr	r3, [pc, #136]	; (800de1c <HAL_PCD_MspInit+0xbc>)
 800dd94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd96:	f003 0301 	and.w	r3, r3, #1
 800dd9a:	613b      	str	r3, [r7, #16]
 800dd9c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800dd9e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dda2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800dda4:	2300      	movs	r3, #0
 800dda6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dda8:	2300      	movs	r3, #0
 800ddaa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800ddac:	f107 0314 	add.w	r3, r7, #20
 800ddb0:	4619      	mov	r1, r3
 800ddb2:	481b      	ldr	r0, [pc, #108]	; (800de20 <HAL_PCD_MspInit+0xc0>)
 800ddb4:	f7f4 f846 	bl	8001e44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800ddb8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800ddbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ddbe:	2302      	movs	r3, #2
 800ddc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ddc2:	2300      	movs	r3, #0
 800ddc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ddc6:	2303      	movs	r3, #3
 800ddc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ddca:	230a      	movs	r3, #10
 800ddcc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ddce:	f107 0314 	add.w	r3, r7, #20
 800ddd2:	4619      	mov	r1, r3
 800ddd4:	4812      	ldr	r0, [pc, #72]	; (800de20 <HAL_PCD_MspInit+0xc0>)
 800ddd6:	f7f4 f835 	bl	8001e44 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ddda:	4b10      	ldr	r3, [pc, #64]	; (800de1c <HAL_PCD_MspInit+0xbc>)
 800dddc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ddde:	4a0f      	ldr	r2, [pc, #60]	; (800de1c <HAL_PCD_MspInit+0xbc>)
 800dde0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dde4:	6353      	str	r3, [r2, #52]	; 0x34
 800dde6:	2300      	movs	r3, #0
 800dde8:	60fb      	str	r3, [r7, #12]
 800ddea:	4b0c      	ldr	r3, [pc, #48]	; (800de1c <HAL_PCD_MspInit+0xbc>)
 800ddec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ddee:	4a0b      	ldr	r2, [pc, #44]	; (800de1c <HAL_PCD_MspInit+0xbc>)
 800ddf0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ddf4:	6453      	str	r3, [r2, #68]	; 0x44
 800ddf6:	4b09      	ldr	r3, [pc, #36]	; (800de1c <HAL_PCD_MspInit+0xbc>)
 800ddf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ddfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ddfe:	60fb      	str	r3, [r7, #12]
 800de00:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800de02:	2200      	movs	r2, #0
 800de04:	2105      	movs	r1, #5
 800de06:	2043      	movs	r0, #67	; 0x43
 800de08:	f7f3 ff60 	bl	8001ccc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800de0c:	2043      	movs	r0, #67	; 0x43
 800de0e:	f7f3 ff79 	bl	8001d04 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800de12:	bf00      	nop
 800de14:	3728      	adds	r7, #40	; 0x28
 800de16:	46bd      	mov	sp, r7
 800de18:	bd80      	pop	{r7, pc}
 800de1a:	bf00      	nop
 800de1c:	40023800 	.word	0x40023800
 800de20:	40020000 	.word	0x40020000

0800de24 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800de24:	b580      	push	{r7, lr}
 800de26:	b082      	sub	sp, #8
 800de28:	af00      	add	r7, sp, #0
 800de2a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800de38:	4619      	mov	r1, r3
 800de3a:	4610      	mov	r0, r2
 800de3c:	f7fb f9af 	bl	800919e <USBD_LL_SetupStage>
}
 800de40:	bf00      	nop
 800de42:	3708      	adds	r7, #8
 800de44:	46bd      	mov	sp, r7
 800de46:	bd80      	pop	{r7, pc}

0800de48 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800de48:	b580      	push	{r7, lr}
 800de4a:	b082      	sub	sp, #8
 800de4c:	af00      	add	r7, sp, #0
 800de4e:	6078      	str	r0, [r7, #4]
 800de50:	460b      	mov	r3, r1
 800de52:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800de5a:	78fa      	ldrb	r2, [r7, #3]
 800de5c:	6879      	ldr	r1, [r7, #4]
 800de5e:	4613      	mov	r3, r2
 800de60:	00db      	lsls	r3, r3, #3
 800de62:	4413      	add	r3, r2
 800de64:	009b      	lsls	r3, r3, #2
 800de66:	440b      	add	r3, r1
 800de68:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800de6c:	681a      	ldr	r2, [r3, #0]
 800de6e:	78fb      	ldrb	r3, [r7, #3]
 800de70:	4619      	mov	r1, r3
 800de72:	f7fb f9e9 	bl	8009248 <USBD_LL_DataOutStage>
}
 800de76:	bf00      	nop
 800de78:	3708      	adds	r7, #8
 800de7a:	46bd      	mov	sp, r7
 800de7c:	bd80      	pop	{r7, pc}

0800de7e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800de7e:	b580      	push	{r7, lr}
 800de80:	b082      	sub	sp, #8
 800de82:	af00      	add	r7, sp, #0
 800de84:	6078      	str	r0, [r7, #4]
 800de86:	460b      	mov	r3, r1
 800de88:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800de90:	78fa      	ldrb	r2, [r7, #3]
 800de92:	6879      	ldr	r1, [r7, #4]
 800de94:	4613      	mov	r3, r2
 800de96:	00db      	lsls	r3, r3, #3
 800de98:	4413      	add	r3, r2
 800de9a:	009b      	lsls	r3, r3, #2
 800de9c:	440b      	add	r3, r1
 800de9e:	334c      	adds	r3, #76	; 0x4c
 800dea0:	681a      	ldr	r2, [r3, #0]
 800dea2:	78fb      	ldrb	r3, [r7, #3]
 800dea4:	4619      	mov	r1, r3
 800dea6:	f7fb fa82 	bl	80093ae <USBD_LL_DataInStage>
}
 800deaa:	bf00      	nop
 800deac:	3708      	adds	r7, #8
 800deae:	46bd      	mov	sp, r7
 800deb0:	bd80      	pop	{r7, pc}

0800deb2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800deb2:	b580      	push	{r7, lr}
 800deb4:	b082      	sub	sp, #8
 800deb6:	af00      	add	r7, sp, #0
 800deb8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800dec0:	4618      	mov	r0, r3
 800dec2:	f7fb fbb6 	bl	8009632 <USBD_LL_SOF>
}
 800dec6:	bf00      	nop
 800dec8:	3708      	adds	r7, #8
 800deca:	46bd      	mov	sp, r7
 800decc:	bd80      	pop	{r7, pc}

0800dece <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dece:	b580      	push	{r7, lr}
 800ded0:	b084      	sub	sp, #16
 800ded2:	af00      	add	r7, sp, #0
 800ded4:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ded6:	2301      	movs	r3, #1
 800ded8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	68db      	ldr	r3, [r3, #12]
 800dede:	2b02      	cmp	r3, #2
 800dee0:	d001      	beq.n	800dee6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800dee2:	f7f3 fb83 	bl	80015ec <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800deec:	7bfa      	ldrb	r2, [r7, #15]
 800deee:	4611      	mov	r1, r2
 800def0:	4618      	mov	r0, r3
 800def2:	f7fb fb60 	bl	80095b6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800defc:	4618      	mov	r0, r3
 800defe:	f7fb fb08 	bl	8009512 <USBD_LL_Reset>
}
 800df02:	bf00      	nop
 800df04:	3710      	adds	r7, #16
 800df06:	46bd      	mov	sp, r7
 800df08:	bd80      	pop	{r7, pc}
	...

0800df0c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800df0c:	b580      	push	{r7, lr}
 800df0e:	b082      	sub	sp, #8
 800df10:	af00      	add	r7, sp, #0
 800df12:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800df1a:	4618      	mov	r0, r3
 800df1c:	f7fb fb5b 	bl	80095d6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	687a      	ldr	r2, [r7, #4]
 800df2c:	6812      	ldr	r2, [r2, #0]
 800df2e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800df32:	f043 0301 	orr.w	r3, r3, #1
 800df36:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	6a1b      	ldr	r3, [r3, #32]
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d005      	beq.n	800df4c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800df40:	4b04      	ldr	r3, [pc, #16]	; (800df54 <HAL_PCD_SuspendCallback+0x48>)
 800df42:	691b      	ldr	r3, [r3, #16]
 800df44:	4a03      	ldr	r2, [pc, #12]	; (800df54 <HAL_PCD_SuspendCallback+0x48>)
 800df46:	f043 0306 	orr.w	r3, r3, #6
 800df4a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800df4c:	bf00      	nop
 800df4e:	3708      	adds	r7, #8
 800df50:	46bd      	mov	sp, r7
 800df52:	bd80      	pop	{r7, pc}
 800df54:	e000ed00 	.word	0xe000ed00

0800df58 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800df58:	b580      	push	{r7, lr}
 800df5a:	b082      	sub	sp, #8
 800df5c:	af00      	add	r7, sp, #0
 800df5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800df66:	4618      	mov	r0, r3
 800df68:	f7fb fb4b 	bl	8009602 <USBD_LL_Resume>
}
 800df6c:	bf00      	nop
 800df6e:	3708      	adds	r7, #8
 800df70:	46bd      	mov	sp, r7
 800df72:	bd80      	pop	{r7, pc}

0800df74 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800df74:	b580      	push	{r7, lr}
 800df76:	b082      	sub	sp, #8
 800df78:	af00      	add	r7, sp, #0
 800df7a:	6078      	str	r0, [r7, #4]
 800df7c:	460b      	mov	r3, r1
 800df7e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800df86:	78fa      	ldrb	r2, [r7, #3]
 800df88:	4611      	mov	r1, r2
 800df8a:	4618      	mov	r0, r3
 800df8c:	f7fb fba3 	bl	80096d6 <USBD_LL_IsoOUTIncomplete>
}
 800df90:	bf00      	nop
 800df92:	3708      	adds	r7, #8
 800df94:	46bd      	mov	sp, r7
 800df96:	bd80      	pop	{r7, pc}

0800df98 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800df98:	b580      	push	{r7, lr}
 800df9a:	b082      	sub	sp, #8
 800df9c:	af00      	add	r7, sp, #0
 800df9e:	6078      	str	r0, [r7, #4]
 800dfa0:	460b      	mov	r3, r1
 800dfa2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800dfaa:	78fa      	ldrb	r2, [r7, #3]
 800dfac:	4611      	mov	r1, r2
 800dfae:	4618      	mov	r0, r3
 800dfb0:	f7fb fb5f 	bl	8009672 <USBD_LL_IsoINIncomplete>
}
 800dfb4:	bf00      	nop
 800dfb6:	3708      	adds	r7, #8
 800dfb8:	46bd      	mov	sp, r7
 800dfba:	bd80      	pop	{r7, pc}

0800dfbc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dfbc:	b580      	push	{r7, lr}
 800dfbe:	b082      	sub	sp, #8
 800dfc0:	af00      	add	r7, sp, #0
 800dfc2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800dfca:	4618      	mov	r0, r3
 800dfcc:	f7fb fbb5 	bl	800973a <USBD_LL_DevConnected>
}
 800dfd0:	bf00      	nop
 800dfd2:	3708      	adds	r7, #8
 800dfd4:	46bd      	mov	sp, r7
 800dfd6:	bd80      	pop	{r7, pc}

0800dfd8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dfd8:	b580      	push	{r7, lr}
 800dfda:	b082      	sub	sp, #8
 800dfdc:	af00      	add	r7, sp, #0
 800dfde:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800dfe6:	4618      	mov	r0, r3
 800dfe8:	f7fb fbb2 	bl	8009750 <USBD_LL_DevDisconnected>
}
 800dfec:	bf00      	nop
 800dfee:	3708      	adds	r7, #8
 800dff0:	46bd      	mov	sp, r7
 800dff2:	bd80      	pop	{r7, pc}

0800dff4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800dff4:	b580      	push	{r7, lr}
 800dff6:	b082      	sub	sp, #8
 800dff8:	af00      	add	r7, sp, #0
 800dffa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	781b      	ldrb	r3, [r3, #0]
 800e000:	2b00      	cmp	r3, #0
 800e002:	d13c      	bne.n	800e07e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800e004:	4a20      	ldr	r2, [pc, #128]	; (800e088 <USBD_LL_Init+0x94>)
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	4a1e      	ldr	r2, [pc, #120]	; (800e088 <USBD_LL_Init+0x94>)
 800e010:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800e014:	4b1c      	ldr	r3, [pc, #112]	; (800e088 <USBD_LL_Init+0x94>)
 800e016:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800e01a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800e01c:	4b1a      	ldr	r3, [pc, #104]	; (800e088 <USBD_LL_Init+0x94>)
 800e01e:	2204      	movs	r2, #4
 800e020:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800e022:	4b19      	ldr	r3, [pc, #100]	; (800e088 <USBD_LL_Init+0x94>)
 800e024:	2202      	movs	r2, #2
 800e026:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800e028:	4b17      	ldr	r3, [pc, #92]	; (800e088 <USBD_LL_Init+0x94>)
 800e02a:	2200      	movs	r2, #0
 800e02c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e02e:	4b16      	ldr	r3, [pc, #88]	; (800e088 <USBD_LL_Init+0x94>)
 800e030:	2202      	movs	r2, #2
 800e032:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800e034:	4b14      	ldr	r3, [pc, #80]	; (800e088 <USBD_LL_Init+0x94>)
 800e036:	2200      	movs	r2, #0
 800e038:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800e03a:	4b13      	ldr	r3, [pc, #76]	; (800e088 <USBD_LL_Init+0x94>)
 800e03c:	2200      	movs	r2, #0
 800e03e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800e040:	4b11      	ldr	r3, [pc, #68]	; (800e088 <USBD_LL_Init+0x94>)
 800e042:	2200      	movs	r2, #0
 800e044:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800e046:	4b10      	ldr	r3, [pc, #64]	; (800e088 <USBD_LL_Init+0x94>)
 800e048:	2200      	movs	r2, #0
 800e04a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800e04c:	4b0e      	ldr	r3, [pc, #56]	; (800e088 <USBD_LL_Init+0x94>)
 800e04e:	2200      	movs	r2, #0
 800e050:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800e052:	480d      	ldr	r0, [pc, #52]	; (800e088 <USBD_LL_Init+0x94>)
 800e054:	f7f5 f853 	bl	80030fe <HAL_PCD_Init>
 800e058:	4603      	mov	r3, r0
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	d001      	beq.n	800e062 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800e05e:	f7f3 fac5 	bl	80015ec <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800e062:	2180      	movs	r1, #128	; 0x80
 800e064:	4808      	ldr	r0, [pc, #32]	; (800e088 <USBD_LL_Init+0x94>)
 800e066:	f7f6 faaa 	bl	80045be <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800e06a:	2240      	movs	r2, #64	; 0x40
 800e06c:	2100      	movs	r1, #0
 800e06e:	4806      	ldr	r0, [pc, #24]	; (800e088 <USBD_LL_Init+0x94>)
 800e070:	f7f6 fa5e 	bl	8004530 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800e074:	2280      	movs	r2, #128	; 0x80
 800e076:	2101      	movs	r1, #1
 800e078:	4803      	ldr	r0, [pc, #12]	; (800e088 <USBD_LL_Init+0x94>)
 800e07a:	f7f6 fa59 	bl	8004530 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800e07e:	2300      	movs	r3, #0
}
 800e080:	4618      	mov	r0, r3
 800e082:	3708      	adds	r7, #8
 800e084:	46bd      	mov	sp, r7
 800e086:	bd80      	pop	{r7, pc}
 800e088:	200065ec 	.word	0x200065ec

0800e08c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e08c:	b580      	push	{r7, lr}
 800e08e:	b084      	sub	sp, #16
 800e090:	af00      	add	r7, sp, #0
 800e092:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e094:	2300      	movs	r3, #0
 800e096:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e098:	2300      	movs	r3, #0
 800e09a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e0a2:	4618      	mov	r0, r3
 800e0a4:	f7f5 f948 	bl	8003338 <HAL_PCD_Start>
 800e0a8:	4603      	mov	r3, r0
 800e0aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e0ac:	7bfb      	ldrb	r3, [r7, #15]
 800e0ae:	4618      	mov	r0, r3
 800e0b0:	f000 f942 	bl	800e338 <USBD_Get_USB_Status>
 800e0b4:	4603      	mov	r3, r0
 800e0b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e0b8:	7bbb      	ldrb	r3, [r7, #14]
}
 800e0ba:	4618      	mov	r0, r3
 800e0bc:	3710      	adds	r7, #16
 800e0be:	46bd      	mov	sp, r7
 800e0c0:	bd80      	pop	{r7, pc}

0800e0c2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e0c2:	b580      	push	{r7, lr}
 800e0c4:	b084      	sub	sp, #16
 800e0c6:	af00      	add	r7, sp, #0
 800e0c8:	6078      	str	r0, [r7, #4]
 800e0ca:	4608      	mov	r0, r1
 800e0cc:	4611      	mov	r1, r2
 800e0ce:	461a      	mov	r2, r3
 800e0d0:	4603      	mov	r3, r0
 800e0d2:	70fb      	strb	r3, [r7, #3]
 800e0d4:	460b      	mov	r3, r1
 800e0d6:	70bb      	strb	r3, [r7, #2]
 800e0d8:	4613      	mov	r3, r2
 800e0da:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e0dc:	2300      	movs	r3, #0
 800e0de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e0e0:	2300      	movs	r3, #0
 800e0e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e0ea:	78bb      	ldrb	r3, [r7, #2]
 800e0ec:	883a      	ldrh	r2, [r7, #0]
 800e0ee:	78f9      	ldrb	r1, [r7, #3]
 800e0f0:	f7f5 fe19 	bl	8003d26 <HAL_PCD_EP_Open>
 800e0f4:	4603      	mov	r3, r0
 800e0f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e0f8:	7bfb      	ldrb	r3, [r7, #15]
 800e0fa:	4618      	mov	r0, r3
 800e0fc:	f000 f91c 	bl	800e338 <USBD_Get_USB_Status>
 800e100:	4603      	mov	r3, r0
 800e102:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e104:	7bbb      	ldrb	r3, [r7, #14]
}
 800e106:	4618      	mov	r0, r3
 800e108:	3710      	adds	r7, #16
 800e10a:	46bd      	mov	sp, r7
 800e10c:	bd80      	pop	{r7, pc}

0800e10e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e10e:	b580      	push	{r7, lr}
 800e110:	b084      	sub	sp, #16
 800e112:	af00      	add	r7, sp, #0
 800e114:	6078      	str	r0, [r7, #4]
 800e116:	460b      	mov	r3, r1
 800e118:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e11a:	2300      	movs	r3, #0
 800e11c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e11e:	2300      	movs	r3, #0
 800e120:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e128:	78fa      	ldrb	r2, [r7, #3]
 800e12a:	4611      	mov	r1, r2
 800e12c:	4618      	mov	r0, r3
 800e12e:	f7f5 fe62 	bl	8003df6 <HAL_PCD_EP_Close>
 800e132:	4603      	mov	r3, r0
 800e134:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e136:	7bfb      	ldrb	r3, [r7, #15]
 800e138:	4618      	mov	r0, r3
 800e13a:	f000 f8fd 	bl	800e338 <USBD_Get_USB_Status>
 800e13e:	4603      	mov	r3, r0
 800e140:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e142:	7bbb      	ldrb	r3, [r7, #14]
}
 800e144:	4618      	mov	r0, r3
 800e146:	3710      	adds	r7, #16
 800e148:	46bd      	mov	sp, r7
 800e14a:	bd80      	pop	{r7, pc}

0800e14c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e14c:	b580      	push	{r7, lr}
 800e14e:	b084      	sub	sp, #16
 800e150:	af00      	add	r7, sp, #0
 800e152:	6078      	str	r0, [r7, #4]
 800e154:	460b      	mov	r3, r1
 800e156:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e158:	2300      	movs	r3, #0
 800e15a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e15c:	2300      	movs	r3, #0
 800e15e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e166:	78fa      	ldrb	r2, [r7, #3]
 800e168:	4611      	mov	r1, r2
 800e16a:	4618      	mov	r0, r3
 800e16c:	f7f5 ff3a 	bl	8003fe4 <HAL_PCD_EP_SetStall>
 800e170:	4603      	mov	r3, r0
 800e172:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e174:	7bfb      	ldrb	r3, [r7, #15]
 800e176:	4618      	mov	r0, r3
 800e178:	f000 f8de 	bl	800e338 <USBD_Get_USB_Status>
 800e17c:	4603      	mov	r3, r0
 800e17e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e180:	7bbb      	ldrb	r3, [r7, #14]
}
 800e182:	4618      	mov	r0, r3
 800e184:	3710      	adds	r7, #16
 800e186:	46bd      	mov	sp, r7
 800e188:	bd80      	pop	{r7, pc}

0800e18a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e18a:	b580      	push	{r7, lr}
 800e18c:	b084      	sub	sp, #16
 800e18e:	af00      	add	r7, sp, #0
 800e190:	6078      	str	r0, [r7, #4]
 800e192:	460b      	mov	r3, r1
 800e194:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e196:	2300      	movs	r3, #0
 800e198:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e19a:	2300      	movs	r3, #0
 800e19c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e1a4:	78fa      	ldrb	r2, [r7, #3]
 800e1a6:	4611      	mov	r1, r2
 800e1a8:	4618      	mov	r0, r3
 800e1aa:	f7f5 ff7f 	bl	80040ac <HAL_PCD_EP_ClrStall>
 800e1ae:	4603      	mov	r3, r0
 800e1b0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e1b2:	7bfb      	ldrb	r3, [r7, #15]
 800e1b4:	4618      	mov	r0, r3
 800e1b6:	f000 f8bf 	bl	800e338 <USBD_Get_USB_Status>
 800e1ba:	4603      	mov	r3, r0
 800e1bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e1be:	7bbb      	ldrb	r3, [r7, #14]
}
 800e1c0:	4618      	mov	r0, r3
 800e1c2:	3710      	adds	r7, #16
 800e1c4:	46bd      	mov	sp, r7
 800e1c6:	bd80      	pop	{r7, pc}

0800e1c8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e1c8:	b480      	push	{r7}
 800e1ca:	b085      	sub	sp, #20
 800e1cc:	af00      	add	r7, sp, #0
 800e1ce:	6078      	str	r0, [r7, #4]
 800e1d0:	460b      	mov	r3, r1
 800e1d2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e1da:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e1dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	da0b      	bge.n	800e1fc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e1e4:	78fb      	ldrb	r3, [r7, #3]
 800e1e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e1ea:	68f9      	ldr	r1, [r7, #12]
 800e1ec:	4613      	mov	r3, r2
 800e1ee:	00db      	lsls	r3, r3, #3
 800e1f0:	4413      	add	r3, r2
 800e1f2:	009b      	lsls	r3, r3, #2
 800e1f4:	440b      	add	r3, r1
 800e1f6:	333e      	adds	r3, #62	; 0x3e
 800e1f8:	781b      	ldrb	r3, [r3, #0]
 800e1fa:	e00b      	b.n	800e214 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e1fc:	78fb      	ldrb	r3, [r7, #3]
 800e1fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e202:	68f9      	ldr	r1, [r7, #12]
 800e204:	4613      	mov	r3, r2
 800e206:	00db      	lsls	r3, r3, #3
 800e208:	4413      	add	r3, r2
 800e20a:	009b      	lsls	r3, r3, #2
 800e20c:	440b      	add	r3, r1
 800e20e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800e212:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e214:	4618      	mov	r0, r3
 800e216:	3714      	adds	r7, #20
 800e218:	46bd      	mov	sp, r7
 800e21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e21e:	4770      	bx	lr

0800e220 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e220:	b580      	push	{r7, lr}
 800e222:	b084      	sub	sp, #16
 800e224:	af00      	add	r7, sp, #0
 800e226:	6078      	str	r0, [r7, #4]
 800e228:	460b      	mov	r3, r1
 800e22a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e22c:	2300      	movs	r3, #0
 800e22e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e230:	2300      	movs	r3, #0
 800e232:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e23a:	78fa      	ldrb	r2, [r7, #3]
 800e23c:	4611      	mov	r1, r2
 800e23e:	4618      	mov	r0, r3
 800e240:	f7f5 fd4c 	bl	8003cdc <HAL_PCD_SetAddress>
 800e244:	4603      	mov	r3, r0
 800e246:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e248:	7bfb      	ldrb	r3, [r7, #15]
 800e24a:	4618      	mov	r0, r3
 800e24c:	f000 f874 	bl	800e338 <USBD_Get_USB_Status>
 800e250:	4603      	mov	r3, r0
 800e252:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e254:	7bbb      	ldrb	r3, [r7, #14]
}
 800e256:	4618      	mov	r0, r3
 800e258:	3710      	adds	r7, #16
 800e25a:	46bd      	mov	sp, r7
 800e25c:	bd80      	pop	{r7, pc}

0800e25e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e25e:	b580      	push	{r7, lr}
 800e260:	b086      	sub	sp, #24
 800e262:	af00      	add	r7, sp, #0
 800e264:	60f8      	str	r0, [r7, #12]
 800e266:	607a      	str	r2, [r7, #4]
 800e268:	603b      	str	r3, [r7, #0]
 800e26a:	460b      	mov	r3, r1
 800e26c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e26e:	2300      	movs	r3, #0
 800e270:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e272:	2300      	movs	r3, #0
 800e274:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e27c:	7af9      	ldrb	r1, [r7, #11]
 800e27e:	683b      	ldr	r3, [r7, #0]
 800e280:	687a      	ldr	r2, [r7, #4]
 800e282:	f7f5 fe65 	bl	8003f50 <HAL_PCD_EP_Transmit>
 800e286:	4603      	mov	r3, r0
 800e288:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e28a:	7dfb      	ldrb	r3, [r7, #23]
 800e28c:	4618      	mov	r0, r3
 800e28e:	f000 f853 	bl	800e338 <USBD_Get_USB_Status>
 800e292:	4603      	mov	r3, r0
 800e294:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e296:	7dbb      	ldrb	r3, [r7, #22]
}
 800e298:	4618      	mov	r0, r3
 800e29a:	3718      	adds	r7, #24
 800e29c:	46bd      	mov	sp, r7
 800e29e:	bd80      	pop	{r7, pc}

0800e2a0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e2a0:	b580      	push	{r7, lr}
 800e2a2:	b086      	sub	sp, #24
 800e2a4:	af00      	add	r7, sp, #0
 800e2a6:	60f8      	str	r0, [r7, #12]
 800e2a8:	607a      	str	r2, [r7, #4]
 800e2aa:	603b      	str	r3, [r7, #0]
 800e2ac:	460b      	mov	r3, r1
 800e2ae:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e2b0:	2300      	movs	r3, #0
 800e2b2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e2b4:	2300      	movs	r3, #0
 800e2b6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e2be:	7af9      	ldrb	r1, [r7, #11]
 800e2c0:	683b      	ldr	r3, [r7, #0]
 800e2c2:	687a      	ldr	r2, [r7, #4]
 800e2c4:	f7f5 fde1 	bl	8003e8a <HAL_PCD_EP_Receive>
 800e2c8:	4603      	mov	r3, r0
 800e2ca:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e2cc:	7dfb      	ldrb	r3, [r7, #23]
 800e2ce:	4618      	mov	r0, r3
 800e2d0:	f000 f832 	bl	800e338 <USBD_Get_USB_Status>
 800e2d4:	4603      	mov	r3, r0
 800e2d6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e2d8:	7dbb      	ldrb	r3, [r7, #22]
}
 800e2da:	4618      	mov	r0, r3
 800e2dc:	3718      	adds	r7, #24
 800e2de:	46bd      	mov	sp, r7
 800e2e0:	bd80      	pop	{r7, pc}

0800e2e2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e2e2:	b580      	push	{r7, lr}
 800e2e4:	b082      	sub	sp, #8
 800e2e6:	af00      	add	r7, sp, #0
 800e2e8:	6078      	str	r0, [r7, #4]
 800e2ea:	460b      	mov	r3, r1
 800e2ec:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e2f4:	78fa      	ldrb	r2, [r7, #3]
 800e2f6:	4611      	mov	r1, r2
 800e2f8:	4618      	mov	r0, r3
 800e2fa:	f7f5 fe11 	bl	8003f20 <HAL_PCD_EP_GetRxCount>
 800e2fe:	4603      	mov	r3, r0
}
 800e300:	4618      	mov	r0, r3
 800e302:	3708      	adds	r7, #8
 800e304:	46bd      	mov	sp, r7
 800e306:	bd80      	pop	{r7, pc}

0800e308 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800e308:	b480      	push	{r7}
 800e30a:	b083      	sub	sp, #12
 800e30c:	af00      	add	r7, sp, #0
 800e30e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800e310:	4b03      	ldr	r3, [pc, #12]	; (800e320 <USBD_static_malloc+0x18>)
}
 800e312:	4618      	mov	r0, r3
 800e314:	370c      	adds	r7, #12
 800e316:	46bd      	mov	sp, r7
 800e318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e31c:	4770      	bx	lr
 800e31e:	bf00      	nop
 800e320:	20006af8 	.word	0x20006af8

0800e324 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800e324:	b480      	push	{r7}
 800e326:	b083      	sub	sp, #12
 800e328:	af00      	add	r7, sp, #0
 800e32a:	6078      	str	r0, [r7, #4]

}
 800e32c:	bf00      	nop
 800e32e:	370c      	adds	r7, #12
 800e330:	46bd      	mov	sp, r7
 800e332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e336:	4770      	bx	lr

0800e338 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e338:	b480      	push	{r7}
 800e33a:	b085      	sub	sp, #20
 800e33c:	af00      	add	r7, sp, #0
 800e33e:	4603      	mov	r3, r0
 800e340:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e342:	2300      	movs	r3, #0
 800e344:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e346:	79fb      	ldrb	r3, [r7, #7]
 800e348:	2b03      	cmp	r3, #3
 800e34a:	d817      	bhi.n	800e37c <USBD_Get_USB_Status+0x44>
 800e34c:	a201      	add	r2, pc, #4	; (adr r2, 800e354 <USBD_Get_USB_Status+0x1c>)
 800e34e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e352:	bf00      	nop
 800e354:	0800e365 	.word	0x0800e365
 800e358:	0800e36b 	.word	0x0800e36b
 800e35c:	0800e371 	.word	0x0800e371
 800e360:	0800e377 	.word	0x0800e377
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800e364:	2300      	movs	r3, #0
 800e366:	73fb      	strb	r3, [r7, #15]
    break;
 800e368:	e00b      	b.n	800e382 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e36a:	2303      	movs	r3, #3
 800e36c:	73fb      	strb	r3, [r7, #15]
    break;
 800e36e:	e008      	b.n	800e382 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e370:	2301      	movs	r3, #1
 800e372:	73fb      	strb	r3, [r7, #15]
    break;
 800e374:	e005      	b.n	800e382 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e376:	2303      	movs	r3, #3
 800e378:	73fb      	strb	r3, [r7, #15]
    break;
 800e37a:	e002      	b.n	800e382 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800e37c:	2303      	movs	r3, #3
 800e37e:	73fb      	strb	r3, [r7, #15]
    break;
 800e380:	bf00      	nop
  }
  return usb_status;
 800e382:	7bfb      	ldrb	r3, [r7, #15]
}
 800e384:	4618      	mov	r0, r3
 800e386:	3714      	adds	r7, #20
 800e388:	46bd      	mov	sp, r7
 800e38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e38e:	4770      	bx	lr

0800e390 <memset>:
 800e390:	4402      	add	r2, r0
 800e392:	4603      	mov	r3, r0
 800e394:	4293      	cmp	r3, r2
 800e396:	d100      	bne.n	800e39a <memset+0xa>
 800e398:	4770      	bx	lr
 800e39a:	f803 1b01 	strb.w	r1, [r3], #1
 800e39e:	e7f9      	b.n	800e394 <memset+0x4>

0800e3a0 <_reclaim_reent>:
 800e3a0:	4b29      	ldr	r3, [pc, #164]	; (800e448 <_reclaim_reent+0xa8>)
 800e3a2:	681b      	ldr	r3, [r3, #0]
 800e3a4:	4283      	cmp	r3, r0
 800e3a6:	b570      	push	{r4, r5, r6, lr}
 800e3a8:	4604      	mov	r4, r0
 800e3aa:	d04b      	beq.n	800e444 <_reclaim_reent+0xa4>
 800e3ac:	69c3      	ldr	r3, [r0, #28]
 800e3ae:	b143      	cbz	r3, 800e3c2 <_reclaim_reent+0x22>
 800e3b0:	68db      	ldr	r3, [r3, #12]
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d144      	bne.n	800e440 <_reclaim_reent+0xa0>
 800e3b6:	69e3      	ldr	r3, [r4, #28]
 800e3b8:	6819      	ldr	r1, [r3, #0]
 800e3ba:	b111      	cbz	r1, 800e3c2 <_reclaim_reent+0x22>
 800e3bc:	4620      	mov	r0, r4
 800e3be:	f000 f879 	bl	800e4b4 <_free_r>
 800e3c2:	6961      	ldr	r1, [r4, #20]
 800e3c4:	b111      	cbz	r1, 800e3cc <_reclaim_reent+0x2c>
 800e3c6:	4620      	mov	r0, r4
 800e3c8:	f000 f874 	bl	800e4b4 <_free_r>
 800e3cc:	69e1      	ldr	r1, [r4, #28]
 800e3ce:	b111      	cbz	r1, 800e3d6 <_reclaim_reent+0x36>
 800e3d0:	4620      	mov	r0, r4
 800e3d2:	f000 f86f 	bl	800e4b4 <_free_r>
 800e3d6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800e3d8:	b111      	cbz	r1, 800e3e0 <_reclaim_reent+0x40>
 800e3da:	4620      	mov	r0, r4
 800e3dc:	f000 f86a 	bl	800e4b4 <_free_r>
 800e3e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e3e2:	b111      	cbz	r1, 800e3ea <_reclaim_reent+0x4a>
 800e3e4:	4620      	mov	r0, r4
 800e3e6:	f000 f865 	bl	800e4b4 <_free_r>
 800e3ea:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800e3ec:	b111      	cbz	r1, 800e3f4 <_reclaim_reent+0x54>
 800e3ee:	4620      	mov	r0, r4
 800e3f0:	f000 f860 	bl	800e4b4 <_free_r>
 800e3f4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800e3f6:	b111      	cbz	r1, 800e3fe <_reclaim_reent+0x5e>
 800e3f8:	4620      	mov	r0, r4
 800e3fa:	f000 f85b 	bl	800e4b4 <_free_r>
 800e3fe:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800e400:	b111      	cbz	r1, 800e408 <_reclaim_reent+0x68>
 800e402:	4620      	mov	r0, r4
 800e404:	f000 f856 	bl	800e4b4 <_free_r>
 800e408:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800e40a:	b111      	cbz	r1, 800e412 <_reclaim_reent+0x72>
 800e40c:	4620      	mov	r0, r4
 800e40e:	f000 f851 	bl	800e4b4 <_free_r>
 800e412:	6a23      	ldr	r3, [r4, #32]
 800e414:	b1b3      	cbz	r3, 800e444 <_reclaim_reent+0xa4>
 800e416:	4620      	mov	r0, r4
 800e418:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e41c:	4718      	bx	r3
 800e41e:	5949      	ldr	r1, [r1, r5]
 800e420:	b941      	cbnz	r1, 800e434 <_reclaim_reent+0x94>
 800e422:	3504      	adds	r5, #4
 800e424:	69e3      	ldr	r3, [r4, #28]
 800e426:	2d80      	cmp	r5, #128	; 0x80
 800e428:	68d9      	ldr	r1, [r3, #12]
 800e42a:	d1f8      	bne.n	800e41e <_reclaim_reent+0x7e>
 800e42c:	4620      	mov	r0, r4
 800e42e:	f000 f841 	bl	800e4b4 <_free_r>
 800e432:	e7c0      	b.n	800e3b6 <_reclaim_reent+0x16>
 800e434:	680e      	ldr	r6, [r1, #0]
 800e436:	4620      	mov	r0, r4
 800e438:	f000 f83c 	bl	800e4b4 <_free_r>
 800e43c:	4631      	mov	r1, r6
 800e43e:	e7ef      	b.n	800e420 <_reclaim_reent+0x80>
 800e440:	2500      	movs	r5, #0
 800e442:	e7ef      	b.n	800e424 <_reclaim_reent+0x84>
 800e444:	bd70      	pop	{r4, r5, r6, pc}
 800e446:	bf00      	nop
 800e448:	2000014c 	.word	0x2000014c

0800e44c <__libc_init_array>:
 800e44c:	b570      	push	{r4, r5, r6, lr}
 800e44e:	4d0d      	ldr	r5, [pc, #52]	; (800e484 <__libc_init_array+0x38>)
 800e450:	4c0d      	ldr	r4, [pc, #52]	; (800e488 <__libc_init_array+0x3c>)
 800e452:	1b64      	subs	r4, r4, r5
 800e454:	10a4      	asrs	r4, r4, #2
 800e456:	2600      	movs	r6, #0
 800e458:	42a6      	cmp	r6, r4
 800e45a:	d109      	bne.n	800e470 <__libc_init_array+0x24>
 800e45c:	4d0b      	ldr	r5, [pc, #44]	; (800e48c <__libc_init_array+0x40>)
 800e45e:	4c0c      	ldr	r4, [pc, #48]	; (800e490 <__libc_init_array+0x44>)
 800e460:	f000 f880 	bl	800e564 <_init>
 800e464:	1b64      	subs	r4, r4, r5
 800e466:	10a4      	asrs	r4, r4, #2
 800e468:	2600      	movs	r6, #0
 800e46a:	42a6      	cmp	r6, r4
 800e46c:	d105      	bne.n	800e47a <__libc_init_array+0x2e>
 800e46e:	bd70      	pop	{r4, r5, r6, pc}
 800e470:	f855 3b04 	ldr.w	r3, [r5], #4
 800e474:	4798      	blx	r3
 800e476:	3601      	adds	r6, #1
 800e478:	e7ee      	b.n	800e458 <__libc_init_array+0xc>
 800e47a:	f855 3b04 	ldr.w	r3, [r5], #4
 800e47e:	4798      	blx	r3
 800e480:	3601      	adds	r6, #1
 800e482:	e7f2      	b.n	800e46a <__libc_init_array+0x1e>
 800e484:	0800e69c 	.word	0x0800e69c
 800e488:	0800e69c 	.word	0x0800e69c
 800e48c:	0800e69c 	.word	0x0800e69c
 800e490:	0800e6a0 	.word	0x0800e6a0

0800e494 <__retarget_lock_acquire_recursive>:
 800e494:	4770      	bx	lr

0800e496 <__retarget_lock_release_recursive>:
 800e496:	4770      	bx	lr

0800e498 <memcpy>:
 800e498:	440a      	add	r2, r1
 800e49a:	4291      	cmp	r1, r2
 800e49c:	f100 33ff 	add.w	r3, r0, #4294967295
 800e4a0:	d100      	bne.n	800e4a4 <memcpy+0xc>
 800e4a2:	4770      	bx	lr
 800e4a4:	b510      	push	{r4, lr}
 800e4a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e4aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e4ae:	4291      	cmp	r1, r2
 800e4b0:	d1f9      	bne.n	800e4a6 <memcpy+0xe>
 800e4b2:	bd10      	pop	{r4, pc}

0800e4b4 <_free_r>:
 800e4b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e4b6:	2900      	cmp	r1, #0
 800e4b8:	d044      	beq.n	800e544 <_free_r+0x90>
 800e4ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e4be:	9001      	str	r0, [sp, #4]
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	f1a1 0404 	sub.w	r4, r1, #4
 800e4c6:	bfb8      	it	lt
 800e4c8:	18e4      	addlt	r4, r4, r3
 800e4ca:	f000 f83f 	bl	800e54c <__malloc_lock>
 800e4ce:	4a1e      	ldr	r2, [pc, #120]	; (800e548 <_free_r+0x94>)
 800e4d0:	9801      	ldr	r0, [sp, #4]
 800e4d2:	6813      	ldr	r3, [r2, #0]
 800e4d4:	b933      	cbnz	r3, 800e4e4 <_free_r+0x30>
 800e4d6:	6063      	str	r3, [r4, #4]
 800e4d8:	6014      	str	r4, [r2, #0]
 800e4da:	b003      	add	sp, #12
 800e4dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e4e0:	f000 b83a 	b.w	800e558 <__malloc_unlock>
 800e4e4:	42a3      	cmp	r3, r4
 800e4e6:	d908      	bls.n	800e4fa <_free_r+0x46>
 800e4e8:	6825      	ldr	r5, [r4, #0]
 800e4ea:	1961      	adds	r1, r4, r5
 800e4ec:	428b      	cmp	r3, r1
 800e4ee:	bf01      	itttt	eq
 800e4f0:	6819      	ldreq	r1, [r3, #0]
 800e4f2:	685b      	ldreq	r3, [r3, #4]
 800e4f4:	1949      	addeq	r1, r1, r5
 800e4f6:	6021      	streq	r1, [r4, #0]
 800e4f8:	e7ed      	b.n	800e4d6 <_free_r+0x22>
 800e4fa:	461a      	mov	r2, r3
 800e4fc:	685b      	ldr	r3, [r3, #4]
 800e4fe:	b10b      	cbz	r3, 800e504 <_free_r+0x50>
 800e500:	42a3      	cmp	r3, r4
 800e502:	d9fa      	bls.n	800e4fa <_free_r+0x46>
 800e504:	6811      	ldr	r1, [r2, #0]
 800e506:	1855      	adds	r5, r2, r1
 800e508:	42a5      	cmp	r5, r4
 800e50a:	d10b      	bne.n	800e524 <_free_r+0x70>
 800e50c:	6824      	ldr	r4, [r4, #0]
 800e50e:	4421      	add	r1, r4
 800e510:	1854      	adds	r4, r2, r1
 800e512:	42a3      	cmp	r3, r4
 800e514:	6011      	str	r1, [r2, #0]
 800e516:	d1e0      	bne.n	800e4da <_free_r+0x26>
 800e518:	681c      	ldr	r4, [r3, #0]
 800e51a:	685b      	ldr	r3, [r3, #4]
 800e51c:	6053      	str	r3, [r2, #4]
 800e51e:	440c      	add	r4, r1
 800e520:	6014      	str	r4, [r2, #0]
 800e522:	e7da      	b.n	800e4da <_free_r+0x26>
 800e524:	d902      	bls.n	800e52c <_free_r+0x78>
 800e526:	230c      	movs	r3, #12
 800e528:	6003      	str	r3, [r0, #0]
 800e52a:	e7d6      	b.n	800e4da <_free_r+0x26>
 800e52c:	6825      	ldr	r5, [r4, #0]
 800e52e:	1961      	adds	r1, r4, r5
 800e530:	428b      	cmp	r3, r1
 800e532:	bf04      	itt	eq
 800e534:	6819      	ldreq	r1, [r3, #0]
 800e536:	685b      	ldreq	r3, [r3, #4]
 800e538:	6063      	str	r3, [r4, #4]
 800e53a:	bf04      	itt	eq
 800e53c:	1949      	addeq	r1, r1, r5
 800e53e:	6021      	streq	r1, [r4, #0]
 800e540:	6054      	str	r4, [r2, #4]
 800e542:	e7ca      	b.n	800e4da <_free_r+0x26>
 800e544:	b003      	add	sp, #12
 800e546:	bd30      	pop	{r4, r5, pc}
 800e548:	20006e54 	.word	0x20006e54

0800e54c <__malloc_lock>:
 800e54c:	4801      	ldr	r0, [pc, #4]	; (800e554 <__malloc_lock+0x8>)
 800e54e:	f7ff bfa1 	b.w	800e494 <__retarget_lock_acquire_recursive>
 800e552:	bf00      	nop
 800e554:	20006e50 	.word	0x20006e50

0800e558 <__malloc_unlock>:
 800e558:	4801      	ldr	r0, [pc, #4]	; (800e560 <__malloc_unlock+0x8>)
 800e55a:	f7ff bf9c 	b.w	800e496 <__retarget_lock_release_recursive>
 800e55e:	bf00      	nop
 800e560:	20006e50 	.word	0x20006e50

0800e564 <_init>:
 800e564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e566:	bf00      	nop
 800e568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e56a:	bc08      	pop	{r3}
 800e56c:	469e      	mov	lr, r3
 800e56e:	4770      	bx	lr

0800e570 <_fini>:
 800e570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e572:	bf00      	nop
 800e574:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e576:	bc08      	pop	{r3}
 800e578:	469e      	mov	lr, r3
 800e57a:	4770      	bx	lr
